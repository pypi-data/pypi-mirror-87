# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['stringql']

package_data = \
{'': ['*']}

install_requires = \
['psycopg2>=2.8.6,<3.0.0', 'testing.postgresql >=1.3.0,<2.0.0']

setup_kwargs = {
    'name': 'stringql',
    'version': '1.0.0',
    'description': 'Library to performs SQL string parameterisation and execution.',
    'long_description': '# stringql\n\nSupport for string queries parameterisation and execution, building on [`Psycopg2.sql`](https://www.psycopg.org/docs/sql.html) module. \n\n## How to to use\n```\nimport stringql\n\nschema = "a_schema"\nlibpq_string = "dbname=a_db user=a_user password=a_secret"\nengine = stringql.start_engine(libpq_string=libpq_string)\nconn = engine.connect(schema=schema)  # created if doesn\'t exist.\n\nq = "select name from {table} where {filter_col} = %s"\nfilter_val = ("smith",)\n\ncurs = engine.do_query(conn, \n                       mode=\'r\', \n                       query=q, \n                       data=filter_val, \n                       table="people", \n                       filter_col="family_name")\n\nfor name in curs:  # when reading do_query returns an iterable cursor object\n    print(name)  # prints tuples, like: ("john",) ...\ncurs.close()  # always close your cursor\n```\n\n### the connect method\nYou can connect to the postgres instance by using the libpq string, or the dsn keyword arguments: \n- *libpq_string*: MydB("dbname=test user=postgres password=secret")\n- *dsn kwargs*: MyDb(dbname="test", user="postgres", password="secret")\n- *schema*: defaulted to None, in which case you\'ll connect to the public schema. Otherwise it\'ll create the schema and \nset `search_path` to it. \n\n### the parameterise_query method\nThe `parameterize_query()` function forms a [Composable object](https://www.psycopg.org/docs/sql.html#psycopg2.sql.Composable)\n representing a snippet of SQL statement.\nIt all happens behind the curtains when you call the `.do_query()` method. \n\n- *query*: query string. see [here](https://www.psycopg.org/docs/sql.html#psycopg2.sql.SQL) for basic rules on how to form \nstrings for the Psycopg2\'s sql module. \n- *data*: defaulted to None, pass a dictionary to format an insert statement. \n- *kwargs*: the fields to pass to the string format method.\n\nReturns parameterised string query, where needed, or original query.\n\n\nShould you want to just parameterise your query and use Psycopg2 cusror\'s `.execute()` method,\ndo the following:\n\n```\nfrom stringql.pg_engine import parameterize_query\n\nq = "select {cols} from {table} where {filter} = %s"\ncols = ["name", "dob"]\ntable = "people"\nfilter = "family_name"\nparamed_q = parameterize_query(query=q, cols=cols, table=table, filter=filter)\n\n# You need the conn to reprint the Composed object as string\nprint(paramed_q.as_string(conn))  \n\n# will print to console:\n\'select "name", "dob" fom "people" where "family_name" = %s\'\n\n# execute yourself with your curs object.\ndata = ("smith", )\ncurs.execute(parameterized_query, data)\n```\n\nYou can also use `parameterize_query()` with the `"data"` argument *only* to prepare a dictionary insert statement.\n\n- Include in the string query `"placeholders"` and `"fields"` so that `parameterize_query()` can replace \nthem with the parameterised dictionary keys.\n- Use the `"drop_keys"` optional keyword argument if there are certain keys of the dictionary that you want to drop.\n\n```\ninsert_stmt = "insert into {table} ({fields}) values ({placeholders})"\n\ndata = {"name": "gianny", "dob": "23/01/1900", "ignore": [1, 2, 3]}\ntable = "people"\n\nparamed_q = parameterize_query(insert_stmt, data, drop_keys=["ignore"])\n\nprint(paramed_q.as_string(conn))  \n\n# will print to console:\n\'insert into "people" ("name", "dob") values (%(name)s, %(dob)s)\'\n\ncurs.execute(parameterized_query, data)\n```\n\n### The do_query method \n\nThe class `MyDb` would not be complete without a support for execution. Once you started your engine, established a \nconnection - you probably want to run some queries, and you can, with the `.do_query()` method.\n\n- *conn*: connection object returned by `.connect()` method. \n- *mode*: "r"(ead) for SELECT, "w"(rite) for INSERT, "wr"(write and read) for INSERT RETURNING.\n- *query*: string query to be parameterised and executed.\n- *data*: collection or dictionary containing data for placeholders (if tuple) or fields and placeholders (if dict).\n- *kwargs*: kwarg to be parameterised and used to form query string.\n\nIt returns a psycopg2 iterable cursor object if r or wr mode otherwise None.\n\n##### Some examples\n\n###### insert from either tuple or dictionary\n```\nget_french_ppl = "select {cols} from {table} where {nat} = % or {place} = %"\ncols = ["name", "family_name", "dob", "marital_status"]\ndata = ("french", "france")\ncurs = engine.do_query(conn, "r", get_french_ppl, data, nat="nationality", place="place_of_birth")\n# curs is now an iterable with your data in it. \n\n# insert from tuple\n\ninsert_from_t = "insert into {table} ({cols}) values (%s, %s)"\ndata_t = (1, 2)\nengine.do_query(conn, "w", insert_from_t, data_t, table="test", cols=[\'a\', \'b\'])\n\n# insert from a dict dropping some k:v pairs. \n\ninsert_from_d = "insert into {table} ({fields}) values ({placeholders})"\ndata_d = {"name": "gianny", "dob": "23/01/1900", "ignore": [1, 2, 3]}\nengine.do_query(conn, "w", insert_from_d, data_d, table="test", drop_keys=["ignore"])\n```\n\n###### do a batch insert\n\nFor example, build a statement for a [multivalue](https://www.postgresql.org/docs/12/dml-insert.html) insert statement, given a list of dictionaries. \n\n```\nfrom more_itertools import flatten\n\ndraft_stmt = "insert into {{table}} ({{placeholders}}) values {multivals}"\nd1 = {"a":1, "b":2}\nd2 = {"a":3, "b":4}\nd_coll = [d1, d2]\n\ndef make_multivals(collection):\n    height = len(collection)\n    length = len(collection[0])\n    val_line = "(" + ("%s, " * length).rstrip(", ") + "),"\n    multivals = (val_line * height).rstrip(",") + ";"\n\ndef make_stmt(draft, d_coll):\n    m = make_multivals(collection=d_coll)\n    return draft.format(multivals=m)\n\ndata = flatten([[x for x in d.values()] for d in d_coll])\nq = make_stmt(draft=draft_stmt, d_coll=d_coll)\ncols = list(d)\n\n# start your engine and your connection\nengine.do_query(conn, "w", q, data, table="a_table", placeholders=cols)\n```\n\n###### curry do_query to always refer to the same table, with the same connection. \n\n```\nimport stringql\nfrom functools import partial\n\ndata = {"name": "gianny", "dob": "13/01/2009", "ignore": []}\n\nconn_string = "dbname=postgres user=postgres password=secreeeeetuuuh"\nengine = stringql.start_engine(libpq_string=conn_string)\nconn = engine.connect(schema="test")\ncreate = ("create table if not exists {table} ("\n          "id serial, "\n          "name varchar,"\n          "dob date)")\n\ninsert = "insert into {table} ({fields}) values({placeholders})"\nselect = "select {col} from {table}"\n\npeopleTable_writer = partial(\n    engine.do_query, conn=conn, mode="w", table="people")\n\npeopleTable_reader = partial(\n    engine.do_query, conn=conn, mode="r", table="people")\n\nif __name__ == "__main__":\n    peopleTable_writer(query=create)\n    peopleTable_writer(query=insert, data=data, drop_keys=["ignore"])\n    curs = peopleTable_reader(query=select, col="name")\n\n    with curs:\n        for record in curs:\n            print(record)\n```\n',
    'author': 'Gabriele Simeone',
    'author_email': 'gabriele.simeone@gmail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/gsime1/stringql',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.8,<4.0',
}


setup(**setup_kwargs)
