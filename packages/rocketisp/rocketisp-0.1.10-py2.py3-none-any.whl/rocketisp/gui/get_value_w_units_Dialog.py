#!/usr/bin/env python
# -*- coding: ascii -*-
from __future__ import print_function

# NOTICE... this file is generated by TkGridGUI.
# Any code or comments added by the user must be in designated areas ONLY.
# User additions will be lost if they are placed in code-generated areas.
# (i.e. Saving from TkGridGUI will over-write code-generated areas.)

# TkGridGUI generated code. DO NOT EDIT THE FOLLOWING. section "imports"


from __future__ import unicode_literals
from future import standard_library
standard_library.install_aliases()
from builtins import str
from builtins import range
from builtins import object

from tkinter.ttk import Combobox, Progressbar, Separator, Treeview, Notebook
import tkinter.messagebox

from tkinter import *
from tkinter import Button, Canvas, Checkbutton, Entry, Frame, Label, LabelFrame
from tkinter import Listbox, Message, Radiobutton, Spinbox, Text
from tkinter import OptionMenu
import tkinter.filedialog
from tkinter import _setit as set_command


# >>>>>>insert any user code below this comment for section "imports"
# Place any user import statements here
from rocketisp.unit_conv_data import get_category, categoryD

# TkGridGUI generated code. DO NOT EDIT THE FOLLOWING. section "top_of_init"

if sys.version_info < (3,):
    from tkSimpleDialog import Dialog
else:
    from tkinter.simpledialog import Dialog

class _Dialog(Dialog):
    # use dialogOptions dictionary to set any values in the dialog
    def __init__(self, parent, title = None, dialogOptions=None):
    
        self.dialogOptions = dialogOptions
        Dialog.__init__(self, parent, title)

class _get_value_w_units(_Dialog):

    def body(self, master):
        dialogframe = Frame(master, width=466, height=221)
        self.dialogframe = dialogframe
        dialogframe.pack()


        self.make_Button_1( self.dialogframe )         #      Button: Set XXX to None (not used) : at Main(3,1)
        self.make_Combobox_1( self.dialogframe )       #    Combobox: Mine Yours Ours : at Main(5,3)
        self.make_Entry_1( self.dialogframe )          #       Entry:  at Main(5,2)
        self.make_Label_1( self.dialogframe )          #       Label: Input XXX Value : at Main(1,1)
        self.make_Label_2( self.dialogframe )          #       Label: definition : at Main(2,1)
        self.make_Label_3( self.dialogframe )          #       Label: Value : at Main(4,2)
        self.make_Label_4( self.dialogframe )          #       Label: Units : at Main(4,3)
        self.make_Label_5( self.dialogframe )          #       Label: XXX= : at Main(5,1)
        self.make_Label_6( self.dialogframe )          #       Label:  at Main(5,0)
        self.make_Label_7( self.dialogframe )          #       Label:  at Main(5,4)

        self.dialogframe.columnconfigure(4, weight=1)
        self.dialogframe.columnconfigure(0, weight=1)

        # >>>>>>insert any user code below this comment for section "top_of_init"
        
        self.set_value_to_none = False
        if not self.dialogOptions.get('show_none_btn', False):
            self.Button_1.grid_remove()
            
        self.Entry_1.focus_set()
        self.Entry_1.select_range(0, END)


    # TkGridGUI generated code. DO NOT EDIT THE FOLLOWING. section "make_Button_1"
    def make_Button_1(self, frame):
        """      Button: Set XXX to None (not used) : at Main(3,1)"""
        self.Button_1 = Button( frame , text="Set XXX to None (i.e. not used)", width="45")
        self.Button_1.grid(row=3, column=1, columnspan="3")

        # >>>>>>insert any user code below this comment for section "make_Button_1"

        self.Button_1.bind("<ButtonRelease-1>", self.Button_1_Click)
        name = self.dialogOptions.get('label', '')
        if not name:
            name = self.dialogOptions.get('name', '')
        self.Button_1.configure( text='Set %s to None (i.e. not used)'%name )

    # TkGridGUI generated code. DO NOT EDIT THE FOLLOWING. section "make_Combobox_1"
    def make_Combobox_1(self, frame):
        """    Combobox: Mine Yours Ours : at Main(5,3)"""
        self.Combobox_1 = Combobox( frame , values="Mine Yours Ours", text="Combobox_1")
        self.Combobox_1.grid(row=5, column=3, sticky="w")
        self.Combobox_1_StringVar = StringVar()

        # >>>>>>insert any user code below this comment for section "make_Combobox_1"
        units = self.dialogOptions.get('units','')
        category = get_category( units )
        catL = categoryD.get( category, [units] )
        self.Combobox_1.configure( values=' '.join(catL) )

        self.Combobox_1.configure(textvariable=self.Combobox_1_StringVar)
        self.Combobox_1_StringVar.set( units )
        self.Combobox_1_StringVar_traceName = self.Combobox_1_StringVar.trace_variable("w", self.Combobox_1_StringVar_Callback)

    # TkGridGUI generated code. DO NOT EDIT THE FOLLOWING. section "make_Entry_1"
    def make_Entry_1(self, frame):
        """       Entry:  at Main(5,2)"""
        self.Entry_1 = Entry( frame , width="15")
        self.Entry_1.grid(row=5, column=2, sticky="ew", columnspan="1")
        self.Entry_1_StringVar = StringVar()

        # >>>>>>insert any user code below this comment for section "make_Entry_1"
        value = self.dialogOptions.get('value', '')
        self.Entry_1_StringVar.set( value )

        self.Entry_1.configure(textvariable=self.Entry_1_StringVar)
        self.Entry_1_StringVar_traceName = self.Entry_1_StringVar.trace_variable("w", self.Entry_1_StringVar_Callback)

    # TkGridGUI generated code. DO NOT EDIT THE FOLLOWING. section "make_Label_1"
    def make_Label_1(self, frame):
        """       Label: Input XXX Value : at Main(1,1)"""
        self.Label_1 = Label( frame , text="Input XXX Value", width="60")
        self.Label_1.grid(row=1, column=1, columnspan="3")

        # >>>>>>insert any user code below this comment for section "make_Label_1"
        name = self.dialogOptions.get('label', '')
        if not name:
            name = self.dialogOptions.get('name', '')
        self.Label_1.configure( text='Input: '+name )


    # TkGridGUI generated code. DO NOT EDIT THE FOLLOWING. section "make_Label_2"
    def make_Label_2(self, frame):
        """       Label: definition : at Main(2,1)"""
        self.Label_2 = Label( frame , text="definition", width="60", height="6")
        self.Label_2.grid(row=2, column=1, columnspan="3")

        # >>>>>>insert any user code below this comment for section "make_Label_2"
        desc = self.dialogOptions.get('desc', '')
        self.Label_2.configure( text=desc, wraplength=400 )


    # TkGridGUI generated code. DO NOT EDIT THE FOLLOWING. section "make_Label_3"
    def make_Label_3(self, frame):
        """       Label: Value : at Main(4,2)"""
        self.Label_3 = Label( frame , text="Value", width="15")
        self.Label_3.grid(row=4, column=2)

        # >>>>>>insert any user code below this comment for section "make_Label_3"


    # TkGridGUI generated code. DO NOT EDIT THE FOLLOWING. section "make_Label_4"
    def make_Label_4(self, frame):
        """       Label: Units : at Main(4,3)"""
        self.Label_4 = Label( frame , text="Units", width="15", anchor="w")
        self.Label_4.grid(row=4, column=3)

        # >>>>>>insert any user code below this comment for section "make_Label_4"


    # TkGridGUI generated code. DO NOT EDIT THE FOLLOWING. section "make_Label_5"
    def make_Label_5(self, frame):
        """       Label: XXX= : at Main(5,1)"""
        self.Label_5 = Label( frame , text="XXX=", width="15", anchor="e")
        self.Label_5.grid(row=5, column=1, sticky="e")

        # >>>>>>insert any user code below this comment for section "make_Label_5"
        name = self.dialogOptions.get('name', '')
        self.Label_5.configure( text=name+'=' )


    # TkGridGUI generated code. DO NOT EDIT THE FOLLOWING. section "make_Label_6"
    def make_Label_6(self, frame):
        """       Label:  at Main(5,0)"""
        self.Label_6 = Label( frame , text="", width="2")
        self.Label_6.grid(row=5, column=0)

        # >>>>>>insert any user code below this comment for section "make_Label_6"


    # TkGridGUI generated code. DO NOT EDIT THE FOLLOWING. section "make_Label_7"
    def make_Label_7(self, frame):
        """       Label:  at Main(5,4)"""
        self.Label_7 = Label( frame , text="", width="2")
        self.Label_7.grid(row=5, column=4)

        # >>>>>>insert any user code below this comment for section "make_Label_7"


    # TkGridGUI generated code. DO NOT EDIT THE FOLLOWING. section "Button_1_Click"
    def Button_1_Click(self, event): #bind method for component ID=Button_1
        """      Button: Set XXX to None (not used) : at Main(3,1)"""
        pass
        # >>>>>>insert any user code below this comment for section "Button_1_Click"
        # replace, delete, or comment-out the following
        #print( "executed method Button_1_Click" )
        
        self.set_value_to_none = True
        self.ok()

    # TkGridGUI generated code. DO NOT EDIT THE FOLLOWING. section "Combobox_1_StringVar_traceName"
    def Combobox_1_StringVar_Callback(self, varName, index, mode):
        """    Combobox: Mine Yours Ours : at Main(5,3)"""
        pass

        # >>>>>>insert any user code below this comment for section "Combobox_1_StringVar_traceName"
        # replace, delete, or comment-out the following
        #print( "Combobox_1_StringVar_Callback varName, index, mode",varName, index, mode )
        #print( "    new StringVar value =",self.Combobox_1_StringVar.get() )



    # TkGridGUI generated code. DO NOT EDIT THE FOLLOWING. section "Entry_1_StringVar_traceName"
    def Entry_1_StringVar_Callback(self, varName, index, mode):
        """       Entry:  at Main(5,2)"""
        pass

        # >>>>>>insert any user code below this comment for section "Entry_1_StringVar_traceName"
        # replace, delete, or comment-out the following
        #print( "Entry_1_StringVar_Callback varName, index, mode",varName, index, mode )
        #print( "    new StringVar value =",self.Entry_1_StringVar.get() )



    # TkGridGUI generated code. DO NOT EDIT THE FOLLOWING. section "standard_message_dialogs"

    # standard message dialogs... showinfo, showwarning, showerror
    def ShowInfo(self, title='Title', message='your message here.'):
        tkinter.messagebox.showinfo( title, message )
        return
    def ShowWarning(self, title='Title', message='your message here.'):
        tkinter.messagebox.showwarning( title, message )
        return
    def ShowError(self, title='Title', message='your message here.'):
        tkinter.messagebox.showerror( title, message )
        return
        
    # standard question dialogs... askquestion, askokcancel, askyesno, or askretrycancel
    # return True for OK, Yes, Retry, False for Cancel or No
    def AskYesNo(self, title='Title', message='your question here.'):
        return tkinter.messagebox.askyesno( title, message )
    def AskOK_Cancel(self, title='Title', message='your question here.'):
        return tkinter.messagebox.askokcancel( title, message )
    def AskRetryCancel(self, title='Title', message='your question here.'):
        return tkinter.messagebox.askretrycancel( title, message )
        
    # return "yes" for Yes, "no" for No
    def AskQuestion(self, title='Title', message='your question here.'):
        return tkinter.messagebox.askquestion( title, message )
    # END of standard message dialogs

    # >>>>>>insert any user code below this comment for section "standard_message_dialogs"


    # TkGridGUI generated code. DO NOT EDIT THE FOLLOWING. section "dialog_validate"
    def validate(self):
        self.result = {} # return a dictionary of results
    

        #self.result["Combobox_1"] = self.Combobox_1_StringVar.get()
        #self.result["Entry_1"] = self.Entry_1_StringVar.get()

        # >>>>>>insert any user code below this comment for section "dialog_validate"
        # set values in "self.result" dictionary for return
        # for example...
        # self.result["age"] = self.Entry_2_StringVar.get() 


        self.result["return_units"] = self.Combobox_1_StringVar.get()
        s = self.Entry_1_StringVar.get().strip()
        
        if self.set_value_to_none or s.lower()=='none':
            self.result["return_value"] = None
        else:
            try:
                s = eval( s )
            except:
                self.ShowError( title='Invalid Number', message='"%s" NOT recognized as number\nPlease Try Again.'%s)
                return 0            
            
            try:
                value = float( s )
            except:
                self.ShowError( title='Invalid Number', message='"%s" is NOT a number\nPlease Try Again.'%s)
                return 0
            self.result["return_value"] = s
        
        #print('Value w Units Dialog result =', self.result)

        #self.result["test"] = "test message" 
        return 1
        
    """
    replace test code
        desc = 'radius of curvature just downstream of throat (Rdownstream / Rthrt) this could be a very long description and we would just need to wrap it.'
        dialog = _get_value_w_units(self.master, "Test Dialog", 
                 dialogOptions={'name':'Rthrt', 'units':'in', 'value':'22', 'desc':desc, 'show_none_btn':True})    
    """
# TkGridGUI generated code. DO NOT EDIT THE FOLLOWING. section "end"


    def apply(self):
        pass
        #print( 'apply called' )

class _Testdialog:
    def __init__(self, master):
        frame = Frame(master, width=300, height=300)
        frame.pack()
        self.master = master
        self.x, self.y, self.w, self.h = -1,-1,-1,-1
        
        self.Button_1 = Button(text="Test Dialog", relief="raised", width="15")
        self.Button_1.place(x=84, y=36)
        self.Button_1.bind("<ButtonRelease-1>", self.Button_1_Click)

    def Button_1_Click(self, event): #click method for component ID=1
        desc = 'radius of curvature just downstream of throat (Rdownstream / Rthrt) this could be a very long description and we would just need to wrap it.'
        dialog = _get_value_w_units(self.master, "Test Dialog", 
                 dialogOptions={'name':'Rthrt', 'units':'in', 'value':'22', 'desc':desc, 'show_none_btn':True})    
        print( '===============Result from Dialog====================' )
        print( dialog.result )
        print( '=====================================================' )

def main():
    root = Tk()
    app = _Testdialog(root)
    root.mainloop()

if __name__ == '__main__':
    main()
