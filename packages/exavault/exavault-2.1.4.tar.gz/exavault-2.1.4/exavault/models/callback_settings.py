# coding: utf-8

"""
    ExaVault API

    See our API reference documentation at https://www.exavault.com/developer/api-docs/  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@exavault.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CallbackSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'endpoint_url': 'str',
        'token': 'str',
        'triggers': 'CallbackSettingsTriggers'
    }

    attribute_map = {
        'account_id': 'accountId',
        'endpoint_url': 'endpointUrl',
        'token': 'token',
        'triggers': 'triggers'
    }

    def __init__(self, account_id=None, endpoint_url=None, token=None, triggers=None):  # noqa: E501
        """CallbackSettings - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._endpoint_url = None
        self._token = None
        self._triggers = None
        self.discriminator = None
        if account_id is not None:
            self.account_id = account_id
        if endpoint_url is not None:
            self.endpoint_url = endpoint_url
        if token is not None:
            self.token = token
        if triggers is not None:
            self.triggers = triggers

    @property
    def account_id(self):
        """Gets the account_id of this CallbackSettings.  # noqa: E501

        ID of the account these settings belongs to.  # noqa: E501

        :return: The account_id of this CallbackSettings.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CallbackSettings.

        ID of the account these settings belongs to.  # noqa: E501

        :param account_id: The account_id of this CallbackSettings.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def endpoint_url(self):
        """Gets the endpoint_url of this CallbackSettings.  # noqa: E501

        Where callback settings object sent to.  # noqa: E501

        :return: The endpoint_url of this CallbackSettings.  # noqa: E501
        :rtype: str
        """
        return self._endpoint_url

    @endpoint_url.setter
    def endpoint_url(self, endpoint_url):
        """Sets the endpoint_url of this CallbackSettings.

        Where callback settings object sent to.  # noqa: E501

        :param endpoint_url: The endpoint_url of this CallbackSettings.  # noqa: E501
        :type: str
        """

        self._endpoint_url = endpoint_url

    @property
    def token(self):
        """Gets the token of this CallbackSettings.  # noqa: E501

        Verification token for the request authentication.  # noqa: E501

        :return: The token of this CallbackSettings.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this CallbackSettings.

        Verification token for the request authentication.  # noqa: E501

        :param token: The token of this CallbackSettings.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def triggers(self):
        """Gets the triggers of this CallbackSettings.  # noqa: E501


        :return: The triggers of this CallbackSettings.  # noqa: E501
        :rtype: CallbackSettingsTriggers
        """
        return self._triggers

    @triggers.setter
    def triggers(self, triggers):
        """Sets the triggers of this CallbackSettings.


        :param triggers: The triggers of this CallbackSettings.  # noqa: E501
        :type: CallbackSettingsTriggers
        """

        self._triggers = triggers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CallbackSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CallbackSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
