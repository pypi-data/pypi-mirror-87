# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkMinimumMaximumImageCalculatorPython
else:
    import _itkMinimumMaximumImageCalculatorPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkMinimumMaximumImageCalculatorPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkMinimumMaximumImageCalculatorPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImageRegionPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.ITKCommonBasePython
import itk.itkImagePython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.itkRGBPixelPython
import itk.itkPointPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkRGBAPixelPython

def itkMinimumMaximumImageCalculatorID2_New():
    return itkMinimumMaximumImageCalculatorID2.New()

class itkMinimumMaximumImageCalculatorID2(itk.ITKCommonBasePython.itkObject):
    r"""


    Computes the minimum and the maximum intensity values of an image.

    This calculator computes the minimum and the maximum intensity values
    of an image. It is templated over input image type. If only Maximum or
    Minimum value is needed, just call ComputeMaximum() (
    ComputeMinimum()) otherwise Compute() will compute both.

    {Core/Common/FindMaxAndMinInImage,Find Max And Min In Image}
    {Developer/OilPaintingImageFilter,Multi-threaded oil painting image
    filter} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID2___New_orig__)
    Clone = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID2_Clone)
    SetImage = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID2_SetImage)
    ComputeMinimum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID2_ComputeMinimum)
    ComputeMaximum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID2_ComputeMaximum)
    Compute = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID2_Compute)
    GetMinimum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID2_GetMinimum)
    GetMaximum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID2_GetMaximum)
    GetIndexOfMinimum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID2_GetIndexOfMinimum)
    GetIndexOfMaximum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID2_GetIndexOfMaximum)
    SetRegion = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID2_SetRegion)
    __swig_destroy__ = _itkMinimumMaximumImageCalculatorPython.delete_itkMinimumMaximumImageCalculatorID2
    cast = _swig_new_static_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID2_cast)

    def New(*args, **kargs):
        """New() -> itkMinimumMaximumImageCalculatorID2

        Create a new object of the class itkMinimumMaximumImageCalculatorID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMinimumMaximumImageCalculatorID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMinimumMaximumImageCalculatorID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMinimumMaximumImageCalculatorID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMinimumMaximumImageCalculatorID2 in _itkMinimumMaximumImageCalculatorPython:
_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID2_swigregister(itkMinimumMaximumImageCalculatorID2)
itkMinimumMaximumImageCalculatorID2___New_orig__ = _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID2___New_orig__
itkMinimumMaximumImageCalculatorID2_cast = _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID2_cast


def itkMinimumMaximumImageCalculatorID3_New():
    return itkMinimumMaximumImageCalculatorID3.New()

class itkMinimumMaximumImageCalculatorID3(itk.ITKCommonBasePython.itkObject):
    r"""


    Computes the minimum and the maximum intensity values of an image.

    This calculator computes the minimum and the maximum intensity values
    of an image. It is templated over input image type. If only Maximum or
    Minimum value is needed, just call ComputeMaximum() (
    ComputeMinimum()) otherwise Compute() will compute both.

    {Core/Common/FindMaxAndMinInImage,Find Max And Min In Image}
    {Developer/OilPaintingImageFilter,Multi-threaded oil painting image
    filter} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID3___New_orig__)
    Clone = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID3_Clone)
    SetImage = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID3_SetImage)
    ComputeMinimum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID3_ComputeMinimum)
    ComputeMaximum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID3_ComputeMaximum)
    Compute = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID3_Compute)
    GetMinimum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID3_GetMinimum)
    GetMaximum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID3_GetMaximum)
    GetIndexOfMinimum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID3_GetIndexOfMinimum)
    GetIndexOfMaximum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID3_GetIndexOfMaximum)
    SetRegion = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID3_SetRegion)
    __swig_destroy__ = _itkMinimumMaximumImageCalculatorPython.delete_itkMinimumMaximumImageCalculatorID3
    cast = _swig_new_static_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID3_cast)

    def New(*args, **kargs):
        """New() -> itkMinimumMaximumImageCalculatorID3

        Create a new object of the class itkMinimumMaximumImageCalculatorID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMinimumMaximumImageCalculatorID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMinimumMaximumImageCalculatorID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMinimumMaximumImageCalculatorID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMinimumMaximumImageCalculatorID3 in _itkMinimumMaximumImageCalculatorPython:
_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID3_swigregister(itkMinimumMaximumImageCalculatorID3)
itkMinimumMaximumImageCalculatorID3___New_orig__ = _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID3___New_orig__
itkMinimumMaximumImageCalculatorID3_cast = _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID3_cast


def itkMinimumMaximumImageCalculatorIF2_New():
    return itkMinimumMaximumImageCalculatorIF2.New()

class itkMinimumMaximumImageCalculatorIF2(itk.ITKCommonBasePython.itkObject):
    r"""


    Computes the minimum and the maximum intensity values of an image.

    This calculator computes the minimum and the maximum intensity values
    of an image. It is templated over input image type. If only Maximum or
    Minimum value is needed, just call ComputeMaximum() (
    ComputeMinimum()) otherwise Compute() will compute both.

    {Core/Common/FindMaxAndMinInImage,Find Max And Min In Image}
    {Developer/OilPaintingImageFilter,Multi-threaded oil painting image
    filter} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF2___New_orig__)
    Clone = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF2_Clone)
    SetImage = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF2_SetImage)
    ComputeMinimum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF2_ComputeMinimum)
    ComputeMaximum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF2_ComputeMaximum)
    Compute = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF2_Compute)
    GetMinimum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF2_GetMinimum)
    GetMaximum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF2_GetMaximum)
    GetIndexOfMinimum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF2_GetIndexOfMinimum)
    GetIndexOfMaximum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF2_GetIndexOfMaximum)
    SetRegion = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF2_SetRegion)
    __swig_destroy__ = _itkMinimumMaximumImageCalculatorPython.delete_itkMinimumMaximumImageCalculatorIF2
    cast = _swig_new_static_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF2_cast)

    def New(*args, **kargs):
        """New() -> itkMinimumMaximumImageCalculatorIF2

        Create a new object of the class itkMinimumMaximumImageCalculatorIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMinimumMaximumImageCalculatorIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMinimumMaximumImageCalculatorIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMinimumMaximumImageCalculatorIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMinimumMaximumImageCalculatorIF2 in _itkMinimumMaximumImageCalculatorPython:
_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF2_swigregister(itkMinimumMaximumImageCalculatorIF2)
itkMinimumMaximumImageCalculatorIF2___New_orig__ = _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF2___New_orig__
itkMinimumMaximumImageCalculatorIF2_cast = _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF2_cast


def itkMinimumMaximumImageCalculatorIF3_New():
    return itkMinimumMaximumImageCalculatorIF3.New()

class itkMinimumMaximumImageCalculatorIF3(itk.ITKCommonBasePython.itkObject):
    r"""


    Computes the minimum and the maximum intensity values of an image.

    This calculator computes the minimum and the maximum intensity values
    of an image. It is templated over input image type. If only Maximum or
    Minimum value is needed, just call ComputeMaximum() (
    ComputeMinimum()) otherwise Compute() will compute both.

    {Core/Common/FindMaxAndMinInImage,Find Max And Min In Image}
    {Developer/OilPaintingImageFilter,Multi-threaded oil painting image
    filter} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF3___New_orig__)
    Clone = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF3_Clone)
    SetImage = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF3_SetImage)
    ComputeMinimum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF3_ComputeMinimum)
    ComputeMaximum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF3_ComputeMaximum)
    Compute = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF3_Compute)
    GetMinimum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF3_GetMinimum)
    GetMaximum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF3_GetMaximum)
    GetIndexOfMinimum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF3_GetIndexOfMinimum)
    GetIndexOfMaximum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF3_GetIndexOfMaximum)
    SetRegion = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF3_SetRegion)
    __swig_destroy__ = _itkMinimumMaximumImageCalculatorPython.delete_itkMinimumMaximumImageCalculatorIF3
    cast = _swig_new_static_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF3_cast)

    def New(*args, **kargs):
        """New() -> itkMinimumMaximumImageCalculatorIF3

        Create a new object of the class itkMinimumMaximumImageCalculatorIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMinimumMaximumImageCalculatorIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMinimumMaximumImageCalculatorIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMinimumMaximumImageCalculatorIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMinimumMaximumImageCalculatorIF3 in _itkMinimumMaximumImageCalculatorPython:
_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF3_swigregister(itkMinimumMaximumImageCalculatorIF3)
itkMinimumMaximumImageCalculatorIF3___New_orig__ = _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF3___New_orig__
itkMinimumMaximumImageCalculatorIF3_cast = _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF3_cast


def itkMinimumMaximumImageCalculatorISS2_New():
    return itkMinimumMaximumImageCalculatorISS2.New()

class itkMinimumMaximumImageCalculatorISS2(itk.ITKCommonBasePython.itkObject):
    r"""


    Computes the minimum and the maximum intensity values of an image.

    This calculator computes the minimum and the maximum intensity values
    of an image. It is templated over input image type. If only Maximum or
    Minimum value is needed, just call ComputeMaximum() (
    ComputeMinimum()) otherwise Compute() will compute both.

    {Core/Common/FindMaxAndMinInImage,Find Max And Min In Image}
    {Developer/OilPaintingImageFilter,Multi-threaded oil painting image
    filter} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS2_Clone)
    SetImage = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS2_SetImage)
    ComputeMinimum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS2_ComputeMinimum)
    ComputeMaximum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS2_ComputeMaximum)
    Compute = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS2_Compute)
    GetMinimum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS2_GetMinimum)
    GetMaximum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS2_GetMaximum)
    GetIndexOfMinimum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS2_GetIndexOfMinimum)
    GetIndexOfMaximum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS2_GetIndexOfMaximum)
    SetRegion = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS2_SetRegion)
    __swig_destroy__ = _itkMinimumMaximumImageCalculatorPython.delete_itkMinimumMaximumImageCalculatorISS2
    cast = _swig_new_static_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS2_cast)

    def New(*args, **kargs):
        """New() -> itkMinimumMaximumImageCalculatorISS2

        Create a new object of the class itkMinimumMaximumImageCalculatorISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMinimumMaximumImageCalculatorISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMinimumMaximumImageCalculatorISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMinimumMaximumImageCalculatorISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMinimumMaximumImageCalculatorISS2 in _itkMinimumMaximumImageCalculatorPython:
_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS2_swigregister(itkMinimumMaximumImageCalculatorISS2)
itkMinimumMaximumImageCalculatorISS2___New_orig__ = _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS2___New_orig__
itkMinimumMaximumImageCalculatorISS2_cast = _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS2_cast


def itkMinimumMaximumImageCalculatorISS3_New():
    return itkMinimumMaximumImageCalculatorISS3.New()

class itkMinimumMaximumImageCalculatorISS3(itk.ITKCommonBasePython.itkObject):
    r"""


    Computes the minimum and the maximum intensity values of an image.

    This calculator computes the minimum and the maximum intensity values
    of an image. It is templated over input image type. If only Maximum or
    Minimum value is needed, just call ComputeMaximum() (
    ComputeMinimum()) otherwise Compute() will compute both.

    {Core/Common/FindMaxAndMinInImage,Find Max And Min In Image}
    {Developer/OilPaintingImageFilter,Multi-threaded oil painting image
    filter} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS3_Clone)
    SetImage = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS3_SetImage)
    ComputeMinimum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS3_ComputeMinimum)
    ComputeMaximum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS3_ComputeMaximum)
    Compute = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS3_Compute)
    GetMinimum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS3_GetMinimum)
    GetMaximum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS3_GetMaximum)
    GetIndexOfMinimum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS3_GetIndexOfMinimum)
    GetIndexOfMaximum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS3_GetIndexOfMaximum)
    SetRegion = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS3_SetRegion)
    __swig_destroy__ = _itkMinimumMaximumImageCalculatorPython.delete_itkMinimumMaximumImageCalculatorISS3
    cast = _swig_new_static_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS3_cast)

    def New(*args, **kargs):
        """New() -> itkMinimumMaximumImageCalculatorISS3

        Create a new object of the class itkMinimumMaximumImageCalculatorISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMinimumMaximumImageCalculatorISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMinimumMaximumImageCalculatorISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMinimumMaximumImageCalculatorISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMinimumMaximumImageCalculatorISS3 in _itkMinimumMaximumImageCalculatorPython:
_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS3_swigregister(itkMinimumMaximumImageCalculatorISS3)
itkMinimumMaximumImageCalculatorISS3___New_orig__ = _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS3___New_orig__
itkMinimumMaximumImageCalculatorISS3_cast = _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS3_cast


def itkMinimumMaximumImageCalculatorIUC2_New():
    return itkMinimumMaximumImageCalculatorIUC2.New()

class itkMinimumMaximumImageCalculatorIUC2(itk.ITKCommonBasePython.itkObject):
    r"""


    Computes the minimum and the maximum intensity values of an image.

    This calculator computes the minimum and the maximum intensity values
    of an image. It is templated over input image type. If only Maximum or
    Minimum value is needed, just call ComputeMaximum() (
    ComputeMinimum()) otherwise Compute() will compute both.

    {Core/Common/FindMaxAndMinInImage,Find Max And Min In Image}
    {Developer/OilPaintingImageFilter,Multi-threaded oil painting image
    filter} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC2_Clone)
    SetImage = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC2_SetImage)
    ComputeMinimum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC2_ComputeMinimum)
    ComputeMaximum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC2_ComputeMaximum)
    Compute = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC2_Compute)
    GetMinimum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC2_GetMinimum)
    GetMaximum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC2_GetMaximum)
    GetIndexOfMinimum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC2_GetIndexOfMinimum)
    GetIndexOfMaximum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC2_GetIndexOfMaximum)
    SetRegion = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC2_SetRegion)
    __swig_destroy__ = _itkMinimumMaximumImageCalculatorPython.delete_itkMinimumMaximumImageCalculatorIUC2
    cast = _swig_new_static_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC2_cast)

    def New(*args, **kargs):
        """New() -> itkMinimumMaximumImageCalculatorIUC2

        Create a new object of the class itkMinimumMaximumImageCalculatorIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMinimumMaximumImageCalculatorIUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMinimumMaximumImageCalculatorIUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMinimumMaximumImageCalculatorIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMinimumMaximumImageCalculatorIUC2 in _itkMinimumMaximumImageCalculatorPython:
_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC2_swigregister(itkMinimumMaximumImageCalculatorIUC2)
itkMinimumMaximumImageCalculatorIUC2___New_orig__ = _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC2___New_orig__
itkMinimumMaximumImageCalculatorIUC2_cast = _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC2_cast


def itkMinimumMaximumImageCalculatorIUC3_New():
    return itkMinimumMaximumImageCalculatorIUC3.New()

class itkMinimumMaximumImageCalculatorIUC3(itk.ITKCommonBasePython.itkObject):
    r"""


    Computes the minimum and the maximum intensity values of an image.

    This calculator computes the minimum and the maximum intensity values
    of an image. It is templated over input image type. If only Maximum or
    Minimum value is needed, just call ComputeMaximum() (
    ComputeMinimum()) otherwise Compute() will compute both.

    {Core/Common/FindMaxAndMinInImage,Find Max And Min In Image}
    {Developer/OilPaintingImageFilter,Multi-threaded oil painting image
    filter} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC3_Clone)
    SetImage = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC3_SetImage)
    ComputeMinimum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC3_ComputeMinimum)
    ComputeMaximum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC3_ComputeMaximum)
    Compute = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC3_Compute)
    GetMinimum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC3_GetMinimum)
    GetMaximum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC3_GetMaximum)
    GetIndexOfMinimum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC3_GetIndexOfMinimum)
    GetIndexOfMaximum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC3_GetIndexOfMaximum)
    SetRegion = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC3_SetRegion)
    __swig_destroy__ = _itkMinimumMaximumImageCalculatorPython.delete_itkMinimumMaximumImageCalculatorIUC3
    cast = _swig_new_static_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC3_cast)

    def New(*args, **kargs):
        """New() -> itkMinimumMaximumImageCalculatorIUC3

        Create a new object of the class itkMinimumMaximumImageCalculatorIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMinimumMaximumImageCalculatorIUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMinimumMaximumImageCalculatorIUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMinimumMaximumImageCalculatorIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMinimumMaximumImageCalculatorIUC3 in _itkMinimumMaximumImageCalculatorPython:
_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC3_swigregister(itkMinimumMaximumImageCalculatorIUC3)
itkMinimumMaximumImageCalculatorIUC3___New_orig__ = _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC3___New_orig__
itkMinimumMaximumImageCalculatorIUC3_cast = _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC3_cast


def itkMinimumMaximumImageCalculatorIUS2_New():
    return itkMinimumMaximumImageCalculatorIUS2.New()

class itkMinimumMaximumImageCalculatorIUS2(itk.ITKCommonBasePython.itkObject):
    r"""


    Computes the minimum and the maximum intensity values of an image.

    This calculator computes the minimum and the maximum intensity values
    of an image. It is templated over input image type. If only Maximum or
    Minimum value is needed, just call ComputeMaximum() (
    ComputeMinimum()) otherwise Compute() will compute both.

    {Core/Common/FindMaxAndMinInImage,Find Max And Min In Image}
    {Developer/OilPaintingImageFilter,Multi-threaded oil painting image
    filter} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS2_Clone)
    SetImage = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS2_SetImage)
    ComputeMinimum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS2_ComputeMinimum)
    ComputeMaximum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS2_ComputeMaximum)
    Compute = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS2_Compute)
    GetMinimum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS2_GetMinimum)
    GetMaximum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS2_GetMaximum)
    GetIndexOfMinimum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS2_GetIndexOfMinimum)
    GetIndexOfMaximum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS2_GetIndexOfMaximum)
    SetRegion = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS2_SetRegion)
    __swig_destroy__ = _itkMinimumMaximumImageCalculatorPython.delete_itkMinimumMaximumImageCalculatorIUS2
    cast = _swig_new_static_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS2_cast)

    def New(*args, **kargs):
        """New() -> itkMinimumMaximumImageCalculatorIUS2

        Create a new object of the class itkMinimumMaximumImageCalculatorIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMinimumMaximumImageCalculatorIUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMinimumMaximumImageCalculatorIUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMinimumMaximumImageCalculatorIUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMinimumMaximumImageCalculatorIUS2 in _itkMinimumMaximumImageCalculatorPython:
_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS2_swigregister(itkMinimumMaximumImageCalculatorIUS2)
itkMinimumMaximumImageCalculatorIUS2___New_orig__ = _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS2___New_orig__
itkMinimumMaximumImageCalculatorIUS2_cast = _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS2_cast


def itkMinimumMaximumImageCalculatorIUS3_New():
    return itkMinimumMaximumImageCalculatorIUS3.New()

class itkMinimumMaximumImageCalculatorIUS3(itk.ITKCommonBasePython.itkObject):
    r"""


    Computes the minimum and the maximum intensity values of an image.

    This calculator computes the minimum and the maximum intensity values
    of an image. It is templated over input image type. If only Maximum or
    Minimum value is needed, just call ComputeMaximum() (
    ComputeMinimum()) otherwise Compute() will compute both.

    {Core/Common/FindMaxAndMinInImage,Find Max And Min In Image}
    {Developer/OilPaintingImageFilter,Multi-threaded oil painting image
    filter} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS3_Clone)
    SetImage = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS3_SetImage)
    ComputeMinimum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS3_ComputeMinimum)
    ComputeMaximum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS3_ComputeMaximum)
    Compute = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS3_Compute)
    GetMinimum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS3_GetMinimum)
    GetMaximum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS3_GetMaximum)
    GetIndexOfMinimum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS3_GetIndexOfMinimum)
    GetIndexOfMaximum = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS3_GetIndexOfMaximum)
    SetRegion = _swig_new_instance_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS3_SetRegion)
    __swig_destroy__ = _itkMinimumMaximumImageCalculatorPython.delete_itkMinimumMaximumImageCalculatorIUS3
    cast = _swig_new_static_method(_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS3_cast)

    def New(*args, **kargs):
        """New() -> itkMinimumMaximumImageCalculatorIUS3

        Create a new object of the class itkMinimumMaximumImageCalculatorIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMinimumMaximumImageCalculatorIUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMinimumMaximumImageCalculatorIUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMinimumMaximumImageCalculatorIUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMinimumMaximumImageCalculatorIUS3 in _itkMinimumMaximumImageCalculatorPython:
_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS3_swigregister(itkMinimumMaximumImageCalculatorIUS3)
itkMinimumMaximumImageCalculatorIUS3___New_orig__ = _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS3___New_orig__
itkMinimumMaximumImageCalculatorIUS3_cast = _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS3_cast



