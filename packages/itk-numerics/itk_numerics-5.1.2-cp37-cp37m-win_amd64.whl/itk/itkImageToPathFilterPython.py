# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKPathPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkImageToPathFilterPython
else:
    import _itkImageToPathFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkImageToPathFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkImageToPathFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImagePython
import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkFixedArrayPython
import itk.itkSizePython
import itk.itkCovariantVectorPython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkRGBPixelPython
import itk.itkPathSourcePython
import itk.itkPolyLineParametricPathPython
import itk.itkVectorContainerPython
import itk.itkContinuousIndexPython
import itk.itkParametricPathPython
import itk.itkPathBasePython
class itkImageToPathFilterID2PLPP2(itk.itkPathSourcePython.itkPathSourcePLPP2):
    r"""


    Base class for filters that take an image as input and produce an path
    as output.

    ImageToPathFilter is the base class for all process objects that
    output path data and require image data as input. Specifically, this
    class defines the SetInput() method for defining the input to a
    filter.

    This code was contributed in the Insight Journal paper:
    "ContourExtractor2DImageFilter: A subpixel-precision image isocontour
    extraction filter." by Pincus
    Z.https://hdl.handle.net/1926/165http://www.insight-
    journal.org/browse/publication/72 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToPathFilterPython.itkImageToPathFilterID2PLPP2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToPathFilterPython.itkImageToPathFilterID2PLPP2_GetInput)
    __swig_destroy__ = _itkImageToPathFilterPython.delete_itkImageToPathFilterID2PLPP2
    cast = _swig_new_static_method(_itkImageToPathFilterPython.itkImageToPathFilterID2PLPP2_cast)

# Register itkImageToPathFilterID2PLPP2 in _itkImageToPathFilterPython:
_itkImageToPathFilterPython.itkImageToPathFilterID2PLPP2_swigregister(itkImageToPathFilterID2PLPP2)
itkImageToPathFilterID2PLPP2_cast = _itkImageToPathFilterPython.itkImageToPathFilterID2PLPP2_cast

class itkImageToPathFilterID3PLPP3(itk.itkPathSourcePython.itkPathSourcePLPP3):
    r"""


    Base class for filters that take an image as input and produce an path
    as output.

    ImageToPathFilter is the base class for all process objects that
    output path data and require image data as input. Specifically, this
    class defines the SetInput() method for defining the input to a
    filter.

    This code was contributed in the Insight Journal paper:
    "ContourExtractor2DImageFilter: A subpixel-precision image isocontour
    extraction filter." by Pincus
    Z.https://hdl.handle.net/1926/165http://www.insight-
    journal.org/browse/publication/72 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToPathFilterPython.itkImageToPathFilterID3PLPP3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToPathFilterPython.itkImageToPathFilterID3PLPP3_GetInput)
    __swig_destroy__ = _itkImageToPathFilterPython.delete_itkImageToPathFilterID3PLPP3
    cast = _swig_new_static_method(_itkImageToPathFilterPython.itkImageToPathFilterID3PLPP3_cast)

# Register itkImageToPathFilterID3PLPP3 in _itkImageToPathFilterPython:
_itkImageToPathFilterPython.itkImageToPathFilterID3PLPP3_swigregister(itkImageToPathFilterID3PLPP3)
itkImageToPathFilterID3PLPP3_cast = _itkImageToPathFilterPython.itkImageToPathFilterID3PLPP3_cast

class itkImageToPathFilterIF2PLPP2(itk.itkPathSourcePython.itkPathSourcePLPP2):
    r"""


    Base class for filters that take an image as input and produce an path
    as output.

    ImageToPathFilter is the base class for all process objects that
    output path data and require image data as input. Specifically, this
    class defines the SetInput() method for defining the input to a
    filter.

    This code was contributed in the Insight Journal paper:
    "ContourExtractor2DImageFilter: A subpixel-precision image isocontour
    extraction filter." by Pincus
    Z.https://hdl.handle.net/1926/165http://www.insight-
    journal.org/browse/publication/72 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToPathFilterPython.itkImageToPathFilterIF2PLPP2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToPathFilterPython.itkImageToPathFilterIF2PLPP2_GetInput)
    __swig_destroy__ = _itkImageToPathFilterPython.delete_itkImageToPathFilterIF2PLPP2
    cast = _swig_new_static_method(_itkImageToPathFilterPython.itkImageToPathFilterIF2PLPP2_cast)

# Register itkImageToPathFilterIF2PLPP2 in _itkImageToPathFilterPython:
_itkImageToPathFilterPython.itkImageToPathFilterIF2PLPP2_swigregister(itkImageToPathFilterIF2PLPP2)
itkImageToPathFilterIF2PLPP2_cast = _itkImageToPathFilterPython.itkImageToPathFilterIF2PLPP2_cast

class itkImageToPathFilterIF3PLPP3(itk.itkPathSourcePython.itkPathSourcePLPP3):
    r"""


    Base class for filters that take an image as input and produce an path
    as output.

    ImageToPathFilter is the base class for all process objects that
    output path data and require image data as input. Specifically, this
    class defines the SetInput() method for defining the input to a
    filter.

    This code was contributed in the Insight Journal paper:
    "ContourExtractor2DImageFilter: A subpixel-precision image isocontour
    extraction filter." by Pincus
    Z.https://hdl.handle.net/1926/165http://www.insight-
    journal.org/browse/publication/72 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToPathFilterPython.itkImageToPathFilterIF3PLPP3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToPathFilterPython.itkImageToPathFilterIF3PLPP3_GetInput)
    __swig_destroy__ = _itkImageToPathFilterPython.delete_itkImageToPathFilterIF3PLPP3
    cast = _swig_new_static_method(_itkImageToPathFilterPython.itkImageToPathFilterIF3PLPP3_cast)

# Register itkImageToPathFilterIF3PLPP3 in _itkImageToPathFilterPython:
_itkImageToPathFilterPython.itkImageToPathFilterIF3PLPP3_swigregister(itkImageToPathFilterIF3PLPP3)
itkImageToPathFilterIF3PLPP3_cast = _itkImageToPathFilterPython.itkImageToPathFilterIF3PLPP3_cast

class itkImageToPathFilterISS2PLPP2(itk.itkPathSourcePython.itkPathSourcePLPP2):
    r"""


    Base class for filters that take an image as input and produce an path
    as output.

    ImageToPathFilter is the base class for all process objects that
    output path data and require image data as input. Specifically, this
    class defines the SetInput() method for defining the input to a
    filter.

    This code was contributed in the Insight Journal paper:
    "ContourExtractor2DImageFilter: A subpixel-precision image isocontour
    extraction filter." by Pincus
    Z.https://hdl.handle.net/1926/165http://www.insight-
    journal.org/browse/publication/72 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToPathFilterPython.itkImageToPathFilterISS2PLPP2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToPathFilterPython.itkImageToPathFilterISS2PLPP2_GetInput)
    __swig_destroy__ = _itkImageToPathFilterPython.delete_itkImageToPathFilterISS2PLPP2
    cast = _swig_new_static_method(_itkImageToPathFilterPython.itkImageToPathFilterISS2PLPP2_cast)

# Register itkImageToPathFilterISS2PLPP2 in _itkImageToPathFilterPython:
_itkImageToPathFilterPython.itkImageToPathFilterISS2PLPP2_swigregister(itkImageToPathFilterISS2PLPP2)
itkImageToPathFilterISS2PLPP2_cast = _itkImageToPathFilterPython.itkImageToPathFilterISS2PLPP2_cast

class itkImageToPathFilterISS3PLPP3(itk.itkPathSourcePython.itkPathSourcePLPP3):
    r"""


    Base class for filters that take an image as input and produce an path
    as output.

    ImageToPathFilter is the base class for all process objects that
    output path data and require image data as input. Specifically, this
    class defines the SetInput() method for defining the input to a
    filter.

    This code was contributed in the Insight Journal paper:
    "ContourExtractor2DImageFilter: A subpixel-precision image isocontour
    extraction filter." by Pincus
    Z.https://hdl.handle.net/1926/165http://www.insight-
    journal.org/browse/publication/72 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToPathFilterPython.itkImageToPathFilterISS3PLPP3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToPathFilterPython.itkImageToPathFilterISS3PLPP3_GetInput)
    __swig_destroy__ = _itkImageToPathFilterPython.delete_itkImageToPathFilterISS3PLPP3
    cast = _swig_new_static_method(_itkImageToPathFilterPython.itkImageToPathFilterISS3PLPP3_cast)

# Register itkImageToPathFilterISS3PLPP3 in _itkImageToPathFilterPython:
_itkImageToPathFilterPython.itkImageToPathFilterISS3PLPP3_swigregister(itkImageToPathFilterISS3PLPP3)
itkImageToPathFilterISS3PLPP3_cast = _itkImageToPathFilterPython.itkImageToPathFilterISS3PLPP3_cast

class itkImageToPathFilterIUC2PLPP2(itk.itkPathSourcePython.itkPathSourcePLPP2):
    r"""


    Base class for filters that take an image as input and produce an path
    as output.

    ImageToPathFilter is the base class for all process objects that
    output path data and require image data as input. Specifically, this
    class defines the SetInput() method for defining the input to a
    filter.

    This code was contributed in the Insight Journal paper:
    "ContourExtractor2DImageFilter: A subpixel-precision image isocontour
    extraction filter." by Pincus
    Z.https://hdl.handle.net/1926/165http://www.insight-
    journal.org/browse/publication/72 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToPathFilterPython.itkImageToPathFilterIUC2PLPP2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToPathFilterPython.itkImageToPathFilterIUC2PLPP2_GetInput)
    __swig_destroy__ = _itkImageToPathFilterPython.delete_itkImageToPathFilterIUC2PLPP2
    cast = _swig_new_static_method(_itkImageToPathFilterPython.itkImageToPathFilterIUC2PLPP2_cast)

# Register itkImageToPathFilterIUC2PLPP2 in _itkImageToPathFilterPython:
_itkImageToPathFilterPython.itkImageToPathFilterIUC2PLPP2_swigregister(itkImageToPathFilterIUC2PLPP2)
itkImageToPathFilterIUC2PLPP2_cast = _itkImageToPathFilterPython.itkImageToPathFilterIUC2PLPP2_cast

class itkImageToPathFilterIUC3PLPP3(itk.itkPathSourcePython.itkPathSourcePLPP3):
    r"""


    Base class for filters that take an image as input and produce an path
    as output.

    ImageToPathFilter is the base class for all process objects that
    output path data and require image data as input. Specifically, this
    class defines the SetInput() method for defining the input to a
    filter.

    This code was contributed in the Insight Journal paper:
    "ContourExtractor2DImageFilter: A subpixel-precision image isocontour
    extraction filter." by Pincus
    Z.https://hdl.handle.net/1926/165http://www.insight-
    journal.org/browse/publication/72 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToPathFilterPython.itkImageToPathFilterIUC3PLPP3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToPathFilterPython.itkImageToPathFilterIUC3PLPP3_GetInput)
    __swig_destroy__ = _itkImageToPathFilterPython.delete_itkImageToPathFilterIUC3PLPP3
    cast = _swig_new_static_method(_itkImageToPathFilterPython.itkImageToPathFilterIUC3PLPP3_cast)

# Register itkImageToPathFilterIUC3PLPP3 in _itkImageToPathFilterPython:
_itkImageToPathFilterPython.itkImageToPathFilterIUC3PLPP3_swigregister(itkImageToPathFilterIUC3PLPP3)
itkImageToPathFilterIUC3PLPP3_cast = _itkImageToPathFilterPython.itkImageToPathFilterIUC3PLPP3_cast

class itkImageToPathFilterIUS2PLPP2(itk.itkPathSourcePython.itkPathSourcePLPP2):
    r"""


    Base class for filters that take an image as input and produce an path
    as output.

    ImageToPathFilter is the base class for all process objects that
    output path data and require image data as input. Specifically, this
    class defines the SetInput() method for defining the input to a
    filter.

    This code was contributed in the Insight Journal paper:
    "ContourExtractor2DImageFilter: A subpixel-precision image isocontour
    extraction filter." by Pincus
    Z.https://hdl.handle.net/1926/165http://www.insight-
    journal.org/browse/publication/72 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToPathFilterPython.itkImageToPathFilterIUS2PLPP2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToPathFilterPython.itkImageToPathFilterIUS2PLPP2_GetInput)
    __swig_destroy__ = _itkImageToPathFilterPython.delete_itkImageToPathFilterIUS2PLPP2
    cast = _swig_new_static_method(_itkImageToPathFilterPython.itkImageToPathFilterIUS2PLPP2_cast)

# Register itkImageToPathFilterIUS2PLPP2 in _itkImageToPathFilterPython:
_itkImageToPathFilterPython.itkImageToPathFilterIUS2PLPP2_swigregister(itkImageToPathFilterIUS2PLPP2)
itkImageToPathFilterIUS2PLPP2_cast = _itkImageToPathFilterPython.itkImageToPathFilterIUS2PLPP2_cast

class itkImageToPathFilterIUS3PLPP3(itk.itkPathSourcePython.itkPathSourcePLPP3):
    r"""


    Base class for filters that take an image as input and produce an path
    as output.

    ImageToPathFilter is the base class for all process objects that
    output path data and require image data as input. Specifically, this
    class defines the SetInput() method for defining the input to a
    filter.

    This code was contributed in the Insight Journal paper:
    "ContourExtractor2DImageFilter: A subpixel-precision image isocontour
    extraction filter." by Pincus
    Z.https://hdl.handle.net/1926/165http://www.insight-
    journal.org/browse/publication/72 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkImageToPathFilterPython.itkImageToPathFilterIUS3PLPP3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageToPathFilterPython.itkImageToPathFilterIUS3PLPP3_GetInput)
    __swig_destroy__ = _itkImageToPathFilterPython.delete_itkImageToPathFilterIUS3PLPP3
    cast = _swig_new_static_method(_itkImageToPathFilterPython.itkImageToPathFilterIUS3PLPP3_cast)

# Register itkImageToPathFilterIUS3PLPP3 in _itkImageToPathFilterPython:
_itkImageToPathFilterPython.itkImageToPathFilterIUS3PLPP3_swigregister(itkImageToPathFilterIUS3PLPP3)
itkImageToPathFilterIUS3PLPP3_cast = _itkImageToPathFilterPython.itkImageToPathFilterIUS3PLPP3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def image_to_path_filter(*args, **kwargs):
    """Procedural interface for ImageToPathFilter"""
    import itk
    instance = itk.ImageToPathFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def image_to_path_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ImageToPathFilter, itkTemplate.itkTemplate):
        filter_object = itk.ImageToPathFilter.values()[0]
    else:
        filter_object = itk.ImageToPathFilter

    image_to_path_filter.__doc__ = filter_object.__doc__
    image_to_path_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    image_to_path_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.ImageToPathFilter, itkTemplate.itkTemplate):
        image_to_path_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        image_to_path_filter.__doc__ += "\n"
        image_to_path_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        image_to_path_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



