# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageIntensityPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkLogImageFilterPython
else:
    import _itkLogImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkLogImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkLogImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkUnaryGeneratorImageFilterPython
import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkInPlaceImageFilterBPython
import itk.itkImageToImageFilterBPython
import itk.itkImageToImageFilterCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.stdcomplexPython
import itk.itkImagePython
import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython

def itkLogImageFilterID2ID2_New():
    return itkLogImageFilterID2ID2.New()

class itkLogImageFilterID2ID2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2ID2):
    r"""


    Computes the log() of each pixel. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLogImageFilterPython.itkLogImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkLogImageFilterPython.itkLogImageFilterID2ID2_Clone)
    InputConvertibleToDoubleCheck = _itkLogImageFilterPython.itkLogImageFilterID2ID2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkLogImageFilterPython.itkLogImageFilterID2ID2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkLogImageFilterPython.delete_itkLogImageFilterID2ID2
    cast = _swig_new_static_method(_itkLogImageFilterPython.itkLogImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkLogImageFilterID2ID2

        Create a new object of the class itkLogImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLogImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLogImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLogImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLogImageFilterID2ID2 in _itkLogImageFilterPython:
_itkLogImageFilterPython.itkLogImageFilterID2ID2_swigregister(itkLogImageFilterID2ID2)
itkLogImageFilterID2ID2___New_orig__ = _itkLogImageFilterPython.itkLogImageFilterID2ID2___New_orig__
itkLogImageFilterID2ID2_cast = _itkLogImageFilterPython.itkLogImageFilterID2ID2_cast


def itkLogImageFilterID3ID3_New():
    return itkLogImageFilterID3ID3.New()

class itkLogImageFilterID3ID3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3ID3):
    r"""


    Computes the log() of each pixel. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLogImageFilterPython.itkLogImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkLogImageFilterPython.itkLogImageFilterID3ID3_Clone)
    InputConvertibleToDoubleCheck = _itkLogImageFilterPython.itkLogImageFilterID3ID3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkLogImageFilterPython.itkLogImageFilterID3ID3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkLogImageFilterPython.delete_itkLogImageFilterID3ID3
    cast = _swig_new_static_method(_itkLogImageFilterPython.itkLogImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkLogImageFilterID3ID3

        Create a new object of the class itkLogImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLogImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLogImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLogImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLogImageFilterID3ID3 in _itkLogImageFilterPython:
_itkLogImageFilterPython.itkLogImageFilterID3ID3_swigregister(itkLogImageFilterID3ID3)
itkLogImageFilterID3ID3___New_orig__ = _itkLogImageFilterPython.itkLogImageFilterID3ID3___New_orig__
itkLogImageFilterID3ID3_cast = _itkLogImageFilterPython.itkLogImageFilterID3ID3_cast


def itkLogImageFilterIF2IF2_New():
    return itkLogImageFilterIF2IF2.New()

class itkLogImageFilterIF2IF2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2IF2):
    r"""


    Computes the log() of each pixel. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLogImageFilterPython.itkLogImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkLogImageFilterPython.itkLogImageFilterIF2IF2_Clone)
    InputConvertibleToDoubleCheck = _itkLogImageFilterPython.itkLogImageFilterIF2IF2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkLogImageFilterPython.itkLogImageFilterIF2IF2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkLogImageFilterPython.delete_itkLogImageFilterIF2IF2
    cast = _swig_new_static_method(_itkLogImageFilterPython.itkLogImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkLogImageFilterIF2IF2

        Create a new object of the class itkLogImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLogImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLogImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLogImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLogImageFilterIF2IF2 in _itkLogImageFilterPython:
_itkLogImageFilterPython.itkLogImageFilterIF2IF2_swigregister(itkLogImageFilterIF2IF2)
itkLogImageFilterIF2IF2___New_orig__ = _itkLogImageFilterPython.itkLogImageFilterIF2IF2___New_orig__
itkLogImageFilterIF2IF2_cast = _itkLogImageFilterPython.itkLogImageFilterIF2IF2_cast


def itkLogImageFilterIF3IF3_New():
    return itkLogImageFilterIF3IF3.New()

class itkLogImageFilterIF3IF3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3IF3):
    r"""


    Computes the log() of each pixel. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLogImageFilterPython.itkLogImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkLogImageFilterPython.itkLogImageFilterIF3IF3_Clone)
    InputConvertibleToDoubleCheck = _itkLogImageFilterPython.itkLogImageFilterIF3IF3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkLogImageFilterPython.itkLogImageFilterIF3IF3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkLogImageFilterPython.delete_itkLogImageFilterIF3IF3
    cast = _swig_new_static_method(_itkLogImageFilterPython.itkLogImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkLogImageFilterIF3IF3

        Create a new object of the class itkLogImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLogImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLogImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLogImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLogImageFilterIF3IF3 in _itkLogImageFilterPython:
_itkLogImageFilterPython.itkLogImageFilterIF3IF3_swigregister(itkLogImageFilterIF3IF3)
itkLogImageFilterIF3IF3___New_orig__ = _itkLogImageFilterPython.itkLogImageFilterIF3IF3___New_orig__
itkLogImageFilterIF3IF3_cast = _itkLogImageFilterPython.itkLogImageFilterIF3IF3_cast


def itkLogImageFilterISS2ISS2_New():
    return itkLogImageFilterISS2ISS2.New()

class itkLogImageFilterISS2ISS2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS2ISS2):
    r"""


    Computes the log() of each pixel. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLogImageFilterPython.itkLogImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkLogImageFilterPython.itkLogImageFilterISS2ISS2_Clone)
    InputConvertibleToDoubleCheck = _itkLogImageFilterPython.itkLogImageFilterISS2ISS2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkLogImageFilterPython.itkLogImageFilterISS2ISS2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkLogImageFilterPython.delete_itkLogImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkLogImageFilterPython.itkLogImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkLogImageFilterISS2ISS2

        Create a new object of the class itkLogImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLogImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLogImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLogImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLogImageFilterISS2ISS2 in _itkLogImageFilterPython:
_itkLogImageFilterPython.itkLogImageFilterISS2ISS2_swigregister(itkLogImageFilterISS2ISS2)
itkLogImageFilterISS2ISS2___New_orig__ = _itkLogImageFilterPython.itkLogImageFilterISS2ISS2___New_orig__
itkLogImageFilterISS2ISS2_cast = _itkLogImageFilterPython.itkLogImageFilterISS2ISS2_cast


def itkLogImageFilterISS3ISS3_New():
    return itkLogImageFilterISS3ISS3.New()

class itkLogImageFilterISS3ISS3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS3ISS3):
    r"""


    Computes the log() of each pixel. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLogImageFilterPython.itkLogImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkLogImageFilterPython.itkLogImageFilterISS3ISS3_Clone)
    InputConvertibleToDoubleCheck = _itkLogImageFilterPython.itkLogImageFilterISS3ISS3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkLogImageFilterPython.itkLogImageFilterISS3ISS3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkLogImageFilterPython.delete_itkLogImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkLogImageFilterPython.itkLogImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkLogImageFilterISS3ISS3

        Create a new object of the class itkLogImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLogImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLogImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLogImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLogImageFilterISS3ISS3 in _itkLogImageFilterPython:
_itkLogImageFilterPython.itkLogImageFilterISS3ISS3_swigregister(itkLogImageFilterISS3ISS3)
itkLogImageFilterISS3ISS3___New_orig__ = _itkLogImageFilterPython.itkLogImageFilterISS3ISS3___New_orig__
itkLogImageFilterISS3ISS3_cast = _itkLogImageFilterPython.itkLogImageFilterISS3ISS3_cast


def itkLogImageFilterIUC2IUC2_New():
    return itkLogImageFilterIUC2IUC2.New()

class itkLogImageFilterIUC2IUC2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC2IUC2):
    r"""


    Computes the log() of each pixel. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLogImageFilterPython.itkLogImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkLogImageFilterPython.itkLogImageFilterIUC2IUC2_Clone)
    InputConvertibleToDoubleCheck = _itkLogImageFilterPython.itkLogImageFilterIUC2IUC2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkLogImageFilterPython.itkLogImageFilterIUC2IUC2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkLogImageFilterPython.delete_itkLogImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkLogImageFilterPython.itkLogImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkLogImageFilterIUC2IUC2

        Create a new object of the class itkLogImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLogImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLogImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLogImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLogImageFilterIUC2IUC2 in _itkLogImageFilterPython:
_itkLogImageFilterPython.itkLogImageFilterIUC2IUC2_swigregister(itkLogImageFilterIUC2IUC2)
itkLogImageFilterIUC2IUC2___New_orig__ = _itkLogImageFilterPython.itkLogImageFilterIUC2IUC2___New_orig__
itkLogImageFilterIUC2IUC2_cast = _itkLogImageFilterPython.itkLogImageFilterIUC2IUC2_cast


def itkLogImageFilterIUC3IUC3_New():
    return itkLogImageFilterIUC3IUC3.New()

class itkLogImageFilterIUC3IUC3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC3IUC3):
    r"""


    Computes the log() of each pixel. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLogImageFilterPython.itkLogImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkLogImageFilterPython.itkLogImageFilterIUC3IUC3_Clone)
    InputConvertibleToDoubleCheck = _itkLogImageFilterPython.itkLogImageFilterIUC3IUC3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkLogImageFilterPython.itkLogImageFilterIUC3IUC3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkLogImageFilterPython.delete_itkLogImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkLogImageFilterPython.itkLogImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkLogImageFilterIUC3IUC3

        Create a new object of the class itkLogImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLogImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLogImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLogImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLogImageFilterIUC3IUC3 in _itkLogImageFilterPython:
_itkLogImageFilterPython.itkLogImageFilterIUC3IUC3_swigregister(itkLogImageFilterIUC3IUC3)
itkLogImageFilterIUC3IUC3___New_orig__ = _itkLogImageFilterPython.itkLogImageFilterIUC3IUC3___New_orig__
itkLogImageFilterIUC3IUC3_cast = _itkLogImageFilterPython.itkLogImageFilterIUC3IUC3_cast


def itkLogImageFilterIUS2IUS2_New():
    return itkLogImageFilterIUS2IUS2.New()

class itkLogImageFilterIUS2IUS2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS2IUS2):
    r"""


    Computes the log() of each pixel. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLogImageFilterPython.itkLogImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkLogImageFilterPython.itkLogImageFilterIUS2IUS2_Clone)
    InputConvertibleToDoubleCheck = _itkLogImageFilterPython.itkLogImageFilterIUS2IUS2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkLogImageFilterPython.itkLogImageFilterIUS2IUS2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkLogImageFilterPython.delete_itkLogImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkLogImageFilterPython.itkLogImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkLogImageFilterIUS2IUS2

        Create a new object of the class itkLogImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLogImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLogImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLogImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLogImageFilterIUS2IUS2 in _itkLogImageFilterPython:
_itkLogImageFilterPython.itkLogImageFilterIUS2IUS2_swigregister(itkLogImageFilterIUS2IUS2)
itkLogImageFilterIUS2IUS2___New_orig__ = _itkLogImageFilterPython.itkLogImageFilterIUS2IUS2___New_orig__
itkLogImageFilterIUS2IUS2_cast = _itkLogImageFilterPython.itkLogImageFilterIUS2IUS2_cast


def itkLogImageFilterIUS3IUS3_New():
    return itkLogImageFilterIUS3IUS3.New()

class itkLogImageFilterIUS3IUS3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS3IUS3):
    r"""


    Computes the log() of each pixel. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLogImageFilterPython.itkLogImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkLogImageFilterPython.itkLogImageFilterIUS3IUS3_Clone)
    InputConvertibleToDoubleCheck = _itkLogImageFilterPython.itkLogImageFilterIUS3IUS3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkLogImageFilterPython.itkLogImageFilterIUS3IUS3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkLogImageFilterPython.delete_itkLogImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkLogImageFilterPython.itkLogImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkLogImageFilterIUS3IUS3

        Create a new object of the class itkLogImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLogImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLogImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLogImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLogImageFilterIUS3IUS3 in _itkLogImageFilterPython:
_itkLogImageFilterPython.itkLogImageFilterIUS3IUS3_swigregister(itkLogImageFilterIUS3IUS3)
itkLogImageFilterIUS3IUS3___New_orig__ = _itkLogImageFilterPython.itkLogImageFilterIUS3IUS3___New_orig__
itkLogImageFilterIUS3IUS3_cast = _itkLogImageFilterPython.itkLogImageFilterIUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def log_image_filter(*args, **kwargs):
    """Procedural interface for LogImageFilter"""
    import itk
    instance = itk.LogImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def log_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.LogImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.LogImageFilter.values()[0]
    else:
        filter_object = itk.LogImageFilter

    log_image_filter.__doc__ = filter_object.__doc__
    log_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    log_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.LogImageFilter, itkTemplate.itkTemplate):
        log_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        log_image_filter.__doc__ += "\n"
        log_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        log_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



