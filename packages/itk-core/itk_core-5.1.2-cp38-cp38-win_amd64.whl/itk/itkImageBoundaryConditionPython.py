# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkImageBoundaryConditionPython
else:
    import _itkImageBoundaryConditionPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkImageBoundaryConditionPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkImageBoundaryConditionPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImageRegionPython
import itk.itkSizePython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkRGBPixelPython
import itk.itkFixedArrayPython
import itk.stdcomplexPython
import itk.itkRGBAPixelPython
import itk.itkCovariantVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkImagePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkSymmetricSecondRankTensorPython
class itkImageBoundaryConditionICF2(object):
    r"""


    A virtual base object that defines an interface to a class of boundary
    condition objects for use by neighborhood iterators.

    A boundary condition object supplies a phantom pixel value when given
    a neighborhood of (pointers to) image values, the (ND) index of the
    phantom pixel, and its (ND) offset from the boundary. The index of the
    phantom pixel is relative to the "upper left-hand corner" of the
    neighborhood (as opposed to its center).

    Associated Types Description  PixelType The data type of the return
    value. PixelPointerType A pointer to PixelType.
    PixelPointerTypeNeighborhood A neighborhood of PixelPointerTypes that
    points to the pixel values in an image neighborhood. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetNameOfClass = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionICF2_GetNameOfClass)
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionICF2_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionICF2___call__)
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkImageBoundaryConditionICF2
    RequiresCompleteNeighborhood = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionICF2_RequiresCompleteNeighborhood)
    GetInputRequestedRegion = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionICF2_GetInputRequestedRegion)
    GetPixel = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionICF2_GetPixel)

# Register itkImageBoundaryConditionICF2 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkImageBoundaryConditionICF2_swigregister(itkImageBoundaryConditionICF2)

class itkImageBoundaryConditionICF3(object):
    r"""


    A virtual base object that defines an interface to a class of boundary
    condition objects for use by neighborhood iterators.

    A boundary condition object supplies a phantom pixel value when given
    a neighborhood of (pointers to) image values, the (ND) index of the
    phantom pixel, and its (ND) offset from the boundary. The index of the
    phantom pixel is relative to the "upper left-hand corner" of the
    neighborhood (as opposed to its center).

    Associated Types Description  PixelType The data type of the return
    value. PixelPointerType A pointer to PixelType.
    PixelPointerTypeNeighborhood A neighborhood of PixelPointerTypes that
    points to the pixel values in an image neighborhood. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetNameOfClass = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionICF3_GetNameOfClass)
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionICF3_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionICF3___call__)
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkImageBoundaryConditionICF3
    RequiresCompleteNeighborhood = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionICF3_RequiresCompleteNeighborhood)
    GetInputRequestedRegion = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionICF3_GetInputRequestedRegion)
    GetPixel = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionICF3_GetPixel)

# Register itkImageBoundaryConditionICF3 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkImageBoundaryConditionICF3_swigregister(itkImageBoundaryConditionICF3)

class itkImageBoundaryConditionICVF22(object):
    r"""


    A virtual base object that defines an interface to a class of boundary
    condition objects for use by neighborhood iterators.

    A boundary condition object supplies a phantom pixel value when given
    a neighborhood of (pointers to) image values, the (ND) index of the
    phantom pixel, and its (ND) offset from the boundary. The index of the
    phantom pixel is relative to the "upper left-hand corner" of the
    neighborhood (as opposed to its center).

    Associated Types Description  PixelType The data type of the return
    value. PixelPointerType A pointer to PixelType.
    PixelPointerTypeNeighborhood A neighborhood of PixelPointerTypes that
    points to the pixel values in an image neighborhood. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetNameOfClass = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionICVF22_GetNameOfClass)
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionICVF22_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionICVF22___call__)
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkImageBoundaryConditionICVF22
    RequiresCompleteNeighborhood = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionICVF22_RequiresCompleteNeighborhood)
    GetInputRequestedRegion = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionICVF22_GetInputRequestedRegion)
    GetPixel = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionICVF22_GetPixel)

# Register itkImageBoundaryConditionICVF22 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkImageBoundaryConditionICVF22_swigregister(itkImageBoundaryConditionICVF22)

class itkImageBoundaryConditionICVF23(object):
    r"""


    A virtual base object that defines an interface to a class of boundary
    condition objects for use by neighborhood iterators.

    A boundary condition object supplies a phantom pixel value when given
    a neighborhood of (pointers to) image values, the (ND) index of the
    phantom pixel, and its (ND) offset from the boundary. The index of the
    phantom pixel is relative to the "upper left-hand corner" of the
    neighborhood (as opposed to its center).

    Associated Types Description  PixelType The data type of the return
    value. PixelPointerType A pointer to PixelType.
    PixelPointerTypeNeighborhood A neighborhood of PixelPointerTypes that
    points to the pixel values in an image neighborhood. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetNameOfClass = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionICVF23_GetNameOfClass)
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionICVF23_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionICVF23___call__)
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkImageBoundaryConditionICVF23
    RequiresCompleteNeighborhood = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionICVF23_RequiresCompleteNeighborhood)
    GetInputRequestedRegion = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionICVF23_GetInputRequestedRegion)
    GetPixel = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionICVF23_GetPixel)

# Register itkImageBoundaryConditionICVF23 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkImageBoundaryConditionICVF23_swigregister(itkImageBoundaryConditionICVF23)

class itkImageBoundaryConditionICVF32(object):
    r"""


    A virtual base object that defines an interface to a class of boundary
    condition objects for use by neighborhood iterators.

    A boundary condition object supplies a phantom pixel value when given
    a neighborhood of (pointers to) image values, the (ND) index of the
    phantom pixel, and its (ND) offset from the boundary. The index of the
    phantom pixel is relative to the "upper left-hand corner" of the
    neighborhood (as opposed to its center).

    Associated Types Description  PixelType The data type of the return
    value. PixelPointerType A pointer to PixelType.
    PixelPointerTypeNeighborhood A neighborhood of PixelPointerTypes that
    points to the pixel values in an image neighborhood. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetNameOfClass = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionICVF32_GetNameOfClass)
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionICVF32_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionICVF32___call__)
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkImageBoundaryConditionICVF32
    RequiresCompleteNeighborhood = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionICVF32_RequiresCompleteNeighborhood)
    GetInputRequestedRegion = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionICVF32_GetInputRequestedRegion)
    GetPixel = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionICVF32_GetPixel)

# Register itkImageBoundaryConditionICVF32 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkImageBoundaryConditionICVF32_swigregister(itkImageBoundaryConditionICVF32)

class itkImageBoundaryConditionICVF33(object):
    r"""


    A virtual base object that defines an interface to a class of boundary
    condition objects for use by neighborhood iterators.

    A boundary condition object supplies a phantom pixel value when given
    a neighborhood of (pointers to) image values, the (ND) index of the
    phantom pixel, and its (ND) offset from the boundary. The index of the
    phantom pixel is relative to the "upper left-hand corner" of the
    neighborhood (as opposed to its center).

    Associated Types Description  PixelType The data type of the return
    value. PixelPointerType A pointer to PixelType.
    PixelPointerTypeNeighborhood A neighborhood of PixelPointerTypes that
    points to the pixel values in an image neighborhood. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetNameOfClass = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionICVF33_GetNameOfClass)
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionICVF33_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionICVF33___call__)
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkImageBoundaryConditionICVF33
    RequiresCompleteNeighborhood = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionICVF33_RequiresCompleteNeighborhood)
    GetInputRequestedRegion = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionICVF33_GetInputRequestedRegion)
    GetPixel = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionICVF33_GetPixel)

# Register itkImageBoundaryConditionICVF33 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkImageBoundaryConditionICVF33_swigregister(itkImageBoundaryConditionICVF33)

class itkImageBoundaryConditionICVF42(object):
    r"""


    A virtual base object that defines an interface to a class of boundary
    condition objects for use by neighborhood iterators.

    A boundary condition object supplies a phantom pixel value when given
    a neighborhood of (pointers to) image values, the (ND) index of the
    phantom pixel, and its (ND) offset from the boundary. The index of the
    phantom pixel is relative to the "upper left-hand corner" of the
    neighborhood (as opposed to its center).

    Associated Types Description  PixelType The data type of the return
    value. PixelPointerType A pointer to PixelType.
    PixelPointerTypeNeighborhood A neighborhood of PixelPointerTypes that
    points to the pixel values in an image neighborhood. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetNameOfClass = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionICVF42_GetNameOfClass)
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionICVF42_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionICVF42___call__)
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkImageBoundaryConditionICVF42
    RequiresCompleteNeighborhood = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionICVF42_RequiresCompleteNeighborhood)
    GetInputRequestedRegion = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionICVF42_GetInputRequestedRegion)
    GetPixel = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionICVF42_GetPixel)

# Register itkImageBoundaryConditionICVF42 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkImageBoundaryConditionICVF42_swigregister(itkImageBoundaryConditionICVF42)

class itkImageBoundaryConditionICVF43(object):
    r"""


    A virtual base object that defines an interface to a class of boundary
    condition objects for use by neighborhood iterators.

    A boundary condition object supplies a phantom pixel value when given
    a neighborhood of (pointers to) image values, the (ND) index of the
    phantom pixel, and its (ND) offset from the boundary. The index of the
    phantom pixel is relative to the "upper left-hand corner" of the
    neighborhood (as opposed to its center).

    Associated Types Description  PixelType The data type of the return
    value. PixelPointerType A pointer to PixelType.
    PixelPointerTypeNeighborhood A neighborhood of PixelPointerTypes that
    points to the pixel values in an image neighborhood. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetNameOfClass = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionICVF43_GetNameOfClass)
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionICVF43_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionICVF43___call__)
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkImageBoundaryConditionICVF43
    RequiresCompleteNeighborhood = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionICVF43_RequiresCompleteNeighborhood)
    GetInputRequestedRegion = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionICVF43_GetInputRequestedRegion)
    GetPixel = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionICVF43_GetPixel)

# Register itkImageBoundaryConditionICVF43 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkImageBoundaryConditionICVF43_swigregister(itkImageBoundaryConditionICVF43)

class itkImageBoundaryConditionID2(object):
    r"""


    A virtual base object that defines an interface to a class of boundary
    condition objects for use by neighborhood iterators.

    A boundary condition object supplies a phantom pixel value when given
    a neighborhood of (pointers to) image values, the (ND) index of the
    phantom pixel, and its (ND) offset from the boundary. The index of the
    phantom pixel is relative to the "upper left-hand corner" of the
    neighborhood (as opposed to its center).

    Associated Types Description  PixelType The data type of the return
    value. PixelPointerType A pointer to PixelType.
    PixelPointerTypeNeighborhood A neighborhood of PixelPointerTypes that
    points to the pixel values in an image neighborhood. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetNameOfClass = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionID2_GetNameOfClass)
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionID2_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionID2___call__)
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkImageBoundaryConditionID2
    RequiresCompleteNeighborhood = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionID2_RequiresCompleteNeighborhood)
    GetInputRequestedRegion = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionID2_GetInputRequestedRegion)
    GetPixel = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionID2_GetPixel)

# Register itkImageBoundaryConditionID2 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkImageBoundaryConditionID2_swigregister(itkImageBoundaryConditionID2)

class itkImageBoundaryConditionID3(object):
    r"""


    A virtual base object that defines an interface to a class of boundary
    condition objects for use by neighborhood iterators.

    A boundary condition object supplies a phantom pixel value when given
    a neighborhood of (pointers to) image values, the (ND) index of the
    phantom pixel, and its (ND) offset from the boundary. The index of the
    phantom pixel is relative to the "upper left-hand corner" of the
    neighborhood (as opposed to its center).

    Associated Types Description  PixelType The data type of the return
    value. PixelPointerType A pointer to PixelType.
    PixelPointerTypeNeighborhood A neighborhood of PixelPointerTypes that
    points to the pixel values in an image neighborhood. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetNameOfClass = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionID3_GetNameOfClass)
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionID3_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionID3___call__)
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkImageBoundaryConditionID3
    RequiresCompleteNeighborhood = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionID3_RequiresCompleteNeighborhood)
    GetInputRequestedRegion = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionID3_GetInputRequestedRegion)
    GetPixel = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionID3_GetPixel)

# Register itkImageBoundaryConditionID3 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkImageBoundaryConditionID3_swigregister(itkImageBoundaryConditionID3)

class itkImageBoundaryConditionIF2(object):
    r"""


    A virtual base object that defines an interface to a class of boundary
    condition objects for use by neighborhood iterators.

    A boundary condition object supplies a phantom pixel value when given
    a neighborhood of (pointers to) image values, the (ND) index of the
    phantom pixel, and its (ND) offset from the boundary. The index of the
    phantom pixel is relative to the "upper left-hand corner" of the
    neighborhood (as opposed to its center).

    Associated Types Description  PixelType The data type of the return
    value. PixelPointerType A pointer to PixelType.
    PixelPointerTypeNeighborhood A neighborhood of PixelPointerTypes that
    points to the pixel values in an image neighborhood. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetNameOfClass = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIF2_GetNameOfClass)
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIF2_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIF2___call__)
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkImageBoundaryConditionIF2
    RequiresCompleteNeighborhood = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIF2_RequiresCompleteNeighborhood)
    GetInputRequestedRegion = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIF2_GetInputRequestedRegion)
    GetPixel = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIF2_GetPixel)

# Register itkImageBoundaryConditionIF2 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkImageBoundaryConditionIF2_swigregister(itkImageBoundaryConditionIF2)

class itkImageBoundaryConditionIF3(object):
    r"""


    A virtual base object that defines an interface to a class of boundary
    condition objects for use by neighborhood iterators.

    A boundary condition object supplies a phantom pixel value when given
    a neighborhood of (pointers to) image values, the (ND) index of the
    phantom pixel, and its (ND) offset from the boundary. The index of the
    phantom pixel is relative to the "upper left-hand corner" of the
    neighborhood (as opposed to its center).

    Associated Types Description  PixelType The data type of the return
    value. PixelPointerType A pointer to PixelType.
    PixelPointerTypeNeighborhood A neighborhood of PixelPointerTypes that
    points to the pixel values in an image neighborhood. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetNameOfClass = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIF3_GetNameOfClass)
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIF3_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIF3___call__)
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkImageBoundaryConditionIF3
    RequiresCompleteNeighborhood = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIF3_RequiresCompleteNeighborhood)
    GetInputRequestedRegion = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIF3_GetInputRequestedRegion)
    GetPixel = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIF3_GetPixel)

# Register itkImageBoundaryConditionIF3 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkImageBoundaryConditionIF3_swigregister(itkImageBoundaryConditionIF3)

class itkImageBoundaryConditionIRGBAUC2(object):
    r"""


    A virtual base object that defines an interface to a class of boundary
    condition objects for use by neighborhood iterators.

    A boundary condition object supplies a phantom pixel value when given
    a neighborhood of (pointers to) image values, the (ND) index of the
    phantom pixel, and its (ND) offset from the boundary. The index of the
    phantom pixel is relative to the "upper left-hand corner" of the
    neighborhood (as opposed to its center).

    Associated Types Description  PixelType The data type of the return
    value. PixelPointerType A pointer to PixelType.
    PixelPointerTypeNeighborhood A neighborhood of PixelPointerTypes that
    points to the pixel values in an image neighborhood. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetNameOfClass = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIRGBAUC2_GetNameOfClass)
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIRGBAUC2_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIRGBAUC2___call__)
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkImageBoundaryConditionIRGBAUC2
    RequiresCompleteNeighborhood = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIRGBAUC2_RequiresCompleteNeighborhood)
    GetInputRequestedRegion = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIRGBAUC2_GetInputRequestedRegion)
    GetPixel = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIRGBAUC2_GetPixel)

# Register itkImageBoundaryConditionIRGBAUC2 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkImageBoundaryConditionIRGBAUC2_swigregister(itkImageBoundaryConditionIRGBAUC2)

class itkImageBoundaryConditionIRGBAUC3(object):
    r"""


    A virtual base object that defines an interface to a class of boundary
    condition objects for use by neighborhood iterators.

    A boundary condition object supplies a phantom pixel value when given
    a neighborhood of (pointers to) image values, the (ND) index of the
    phantom pixel, and its (ND) offset from the boundary. The index of the
    phantom pixel is relative to the "upper left-hand corner" of the
    neighborhood (as opposed to its center).

    Associated Types Description  PixelType The data type of the return
    value. PixelPointerType A pointer to PixelType.
    PixelPointerTypeNeighborhood A neighborhood of PixelPointerTypes that
    points to the pixel values in an image neighborhood. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetNameOfClass = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIRGBAUC3_GetNameOfClass)
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIRGBAUC3_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIRGBAUC3___call__)
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkImageBoundaryConditionIRGBAUC3
    RequiresCompleteNeighborhood = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIRGBAUC3_RequiresCompleteNeighborhood)
    GetInputRequestedRegion = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIRGBAUC3_GetInputRequestedRegion)
    GetPixel = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIRGBAUC3_GetPixel)

# Register itkImageBoundaryConditionIRGBAUC3 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkImageBoundaryConditionIRGBAUC3_swigregister(itkImageBoundaryConditionIRGBAUC3)

class itkImageBoundaryConditionIRGBUC2(object):
    r"""


    A virtual base object that defines an interface to a class of boundary
    condition objects for use by neighborhood iterators.

    A boundary condition object supplies a phantom pixel value when given
    a neighborhood of (pointers to) image values, the (ND) index of the
    phantom pixel, and its (ND) offset from the boundary. The index of the
    phantom pixel is relative to the "upper left-hand corner" of the
    neighborhood (as opposed to its center).

    Associated Types Description  PixelType The data type of the return
    value. PixelPointerType A pointer to PixelType.
    PixelPointerTypeNeighborhood A neighborhood of PixelPointerTypes that
    points to the pixel values in an image neighborhood. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetNameOfClass = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIRGBUC2_GetNameOfClass)
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIRGBUC2_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIRGBUC2___call__)
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkImageBoundaryConditionIRGBUC2
    RequiresCompleteNeighborhood = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIRGBUC2_RequiresCompleteNeighborhood)
    GetInputRequestedRegion = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIRGBUC2_GetInputRequestedRegion)
    GetPixel = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIRGBUC2_GetPixel)

# Register itkImageBoundaryConditionIRGBUC2 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkImageBoundaryConditionIRGBUC2_swigregister(itkImageBoundaryConditionIRGBUC2)

class itkImageBoundaryConditionIRGBUC3(object):
    r"""


    A virtual base object that defines an interface to a class of boundary
    condition objects for use by neighborhood iterators.

    A boundary condition object supplies a phantom pixel value when given
    a neighborhood of (pointers to) image values, the (ND) index of the
    phantom pixel, and its (ND) offset from the boundary. The index of the
    phantom pixel is relative to the "upper left-hand corner" of the
    neighborhood (as opposed to its center).

    Associated Types Description  PixelType The data type of the return
    value. PixelPointerType A pointer to PixelType.
    PixelPointerTypeNeighborhood A neighborhood of PixelPointerTypes that
    points to the pixel values in an image neighborhood. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetNameOfClass = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIRGBUC3_GetNameOfClass)
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIRGBUC3_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIRGBUC3___call__)
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkImageBoundaryConditionIRGBUC3
    RequiresCompleteNeighborhood = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIRGBUC3_RequiresCompleteNeighborhood)
    GetInputRequestedRegion = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIRGBUC3_GetInputRequestedRegion)
    GetPixel = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIRGBUC3_GetPixel)

# Register itkImageBoundaryConditionIRGBUC3 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkImageBoundaryConditionIRGBUC3_swigregister(itkImageBoundaryConditionIRGBUC3)

class itkImageBoundaryConditionISS2(object):
    r"""


    A virtual base object that defines an interface to a class of boundary
    condition objects for use by neighborhood iterators.

    A boundary condition object supplies a phantom pixel value when given
    a neighborhood of (pointers to) image values, the (ND) index of the
    phantom pixel, and its (ND) offset from the boundary. The index of the
    phantom pixel is relative to the "upper left-hand corner" of the
    neighborhood (as opposed to its center).

    Associated Types Description  PixelType The data type of the return
    value. PixelPointerType A pointer to PixelType.
    PixelPointerTypeNeighborhood A neighborhood of PixelPointerTypes that
    points to the pixel values in an image neighborhood. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetNameOfClass = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionISS2_GetNameOfClass)
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionISS2_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionISS2___call__)
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkImageBoundaryConditionISS2
    RequiresCompleteNeighborhood = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionISS2_RequiresCompleteNeighborhood)
    GetInputRequestedRegion = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionISS2_GetInputRequestedRegion)
    GetPixel = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionISS2_GetPixel)

# Register itkImageBoundaryConditionISS2 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkImageBoundaryConditionISS2_swigregister(itkImageBoundaryConditionISS2)

class itkImageBoundaryConditionISS3(object):
    r"""


    A virtual base object that defines an interface to a class of boundary
    condition objects for use by neighborhood iterators.

    A boundary condition object supplies a phantom pixel value when given
    a neighborhood of (pointers to) image values, the (ND) index of the
    phantom pixel, and its (ND) offset from the boundary. The index of the
    phantom pixel is relative to the "upper left-hand corner" of the
    neighborhood (as opposed to its center).

    Associated Types Description  PixelType The data type of the return
    value. PixelPointerType A pointer to PixelType.
    PixelPointerTypeNeighborhood A neighborhood of PixelPointerTypes that
    points to the pixel values in an image neighborhood. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetNameOfClass = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionISS3_GetNameOfClass)
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionISS3_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionISS3___call__)
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkImageBoundaryConditionISS3
    RequiresCompleteNeighborhood = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionISS3_RequiresCompleteNeighborhood)
    GetInputRequestedRegion = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionISS3_GetInputRequestedRegion)
    GetPixel = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionISS3_GetPixel)

# Register itkImageBoundaryConditionISS3 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkImageBoundaryConditionISS3_swigregister(itkImageBoundaryConditionISS3)

class itkImageBoundaryConditionIUC2(object):
    r"""


    A virtual base object that defines an interface to a class of boundary
    condition objects for use by neighborhood iterators.

    A boundary condition object supplies a phantom pixel value when given
    a neighborhood of (pointers to) image values, the (ND) index of the
    phantom pixel, and its (ND) offset from the boundary. The index of the
    phantom pixel is relative to the "upper left-hand corner" of the
    neighborhood (as opposed to its center).

    Associated Types Description  PixelType The data type of the return
    value. PixelPointerType A pointer to PixelType.
    PixelPointerTypeNeighborhood A neighborhood of PixelPointerTypes that
    points to the pixel values in an image neighborhood. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetNameOfClass = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIUC2_GetNameOfClass)
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIUC2_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIUC2___call__)
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkImageBoundaryConditionIUC2
    RequiresCompleteNeighborhood = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIUC2_RequiresCompleteNeighborhood)
    GetInputRequestedRegion = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIUC2_GetInputRequestedRegion)
    GetPixel = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIUC2_GetPixel)

# Register itkImageBoundaryConditionIUC2 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkImageBoundaryConditionIUC2_swigregister(itkImageBoundaryConditionIUC2)

class itkImageBoundaryConditionIUC3(object):
    r"""


    A virtual base object that defines an interface to a class of boundary
    condition objects for use by neighborhood iterators.

    A boundary condition object supplies a phantom pixel value when given
    a neighborhood of (pointers to) image values, the (ND) index of the
    phantom pixel, and its (ND) offset from the boundary. The index of the
    phantom pixel is relative to the "upper left-hand corner" of the
    neighborhood (as opposed to its center).

    Associated Types Description  PixelType The data type of the return
    value. PixelPointerType A pointer to PixelType.
    PixelPointerTypeNeighborhood A neighborhood of PixelPointerTypes that
    points to the pixel values in an image neighborhood. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetNameOfClass = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIUC3_GetNameOfClass)
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIUC3_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIUC3___call__)
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkImageBoundaryConditionIUC3
    RequiresCompleteNeighborhood = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIUC3_RequiresCompleteNeighborhood)
    GetInputRequestedRegion = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIUC3_GetInputRequestedRegion)
    GetPixel = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIUC3_GetPixel)

# Register itkImageBoundaryConditionIUC3 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkImageBoundaryConditionIUC3_swigregister(itkImageBoundaryConditionIUC3)

class itkImageBoundaryConditionIUS2(object):
    r"""


    A virtual base object that defines an interface to a class of boundary
    condition objects for use by neighborhood iterators.

    A boundary condition object supplies a phantom pixel value when given
    a neighborhood of (pointers to) image values, the (ND) index of the
    phantom pixel, and its (ND) offset from the boundary. The index of the
    phantom pixel is relative to the "upper left-hand corner" of the
    neighborhood (as opposed to its center).

    Associated Types Description  PixelType The data type of the return
    value. PixelPointerType A pointer to PixelType.
    PixelPointerTypeNeighborhood A neighborhood of PixelPointerTypes that
    points to the pixel values in an image neighborhood. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetNameOfClass = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIUS2_GetNameOfClass)
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIUS2_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIUS2___call__)
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkImageBoundaryConditionIUS2
    RequiresCompleteNeighborhood = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIUS2_RequiresCompleteNeighborhood)
    GetInputRequestedRegion = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIUS2_GetInputRequestedRegion)
    GetPixel = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIUS2_GetPixel)

# Register itkImageBoundaryConditionIUS2 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkImageBoundaryConditionIUS2_swigregister(itkImageBoundaryConditionIUS2)

class itkImageBoundaryConditionIUS3(object):
    r"""


    A virtual base object that defines an interface to a class of boundary
    condition objects for use by neighborhood iterators.

    A boundary condition object supplies a phantom pixel value when given
    a neighborhood of (pointers to) image values, the (ND) index of the
    phantom pixel, and its (ND) offset from the boundary. The index of the
    phantom pixel is relative to the "upper left-hand corner" of the
    neighborhood (as opposed to its center).

    Associated Types Description  PixelType The data type of the return
    value. PixelPointerType A pointer to PixelType.
    PixelPointerTypeNeighborhood A neighborhood of PixelPointerTypes that
    points to the pixel values in an image neighborhood. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetNameOfClass = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIUS3_GetNameOfClass)
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIUS3_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIUS3___call__)
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkImageBoundaryConditionIUS3
    RequiresCompleteNeighborhood = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIUS3_RequiresCompleteNeighborhood)
    GetInputRequestedRegion = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIUS3_GetInputRequestedRegion)
    GetPixel = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIUS3_GetPixel)

# Register itkImageBoundaryConditionIUS3 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkImageBoundaryConditionIUS3_swigregister(itkImageBoundaryConditionIUS3)

class itkImageBoundaryConditionIVF22(object):
    r"""


    A virtual base object that defines an interface to a class of boundary
    condition objects for use by neighborhood iterators.

    A boundary condition object supplies a phantom pixel value when given
    a neighborhood of (pointers to) image values, the (ND) index of the
    phantom pixel, and its (ND) offset from the boundary. The index of the
    phantom pixel is relative to the "upper left-hand corner" of the
    neighborhood (as opposed to its center).

    Associated Types Description  PixelType The data type of the return
    value. PixelPointerType A pointer to PixelType.
    PixelPointerTypeNeighborhood A neighborhood of PixelPointerTypes that
    points to the pixel values in an image neighborhood. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetNameOfClass = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIVF22_GetNameOfClass)
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIVF22_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIVF22___call__)
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkImageBoundaryConditionIVF22
    RequiresCompleteNeighborhood = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIVF22_RequiresCompleteNeighborhood)
    GetInputRequestedRegion = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIVF22_GetInputRequestedRegion)
    GetPixel = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIVF22_GetPixel)

# Register itkImageBoundaryConditionIVF22 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkImageBoundaryConditionIVF22_swigregister(itkImageBoundaryConditionIVF22)

class itkImageBoundaryConditionIVF23(object):
    r"""


    A virtual base object that defines an interface to a class of boundary
    condition objects for use by neighborhood iterators.

    A boundary condition object supplies a phantom pixel value when given
    a neighborhood of (pointers to) image values, the (ND) index of the
    phantom pixel, and its (ND) offset from the boundary. The index of the
    phantom pixel is relative to the "upper left-hand corner" of the
    neighborhood (as opposed to its center).

    Associated Types Description  PixelType The data type of the return
    value. PixelPointerType A pointer to PixelType.
    PixelPointerTypeNeighborhood A neighborhood of PixelPointerTypes that
    points to the pixel values in an image neighborhood. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetNameOfClass = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIVF23_GetNameOfClass)
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIVF23_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIVF23___call__)
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkImageBoundaryConditionIVF23
    RequiresCompleteNeighborhood = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIVF23_RequiresCompleteNeighborhood)
    GetInputRequestedRegion = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIVF23_GetInputRequestedRegion)
    GetPixel = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIVF23_GetPixel)

# Register itkImageBoundaryConditionIVF23 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkImageBoundaryConditionIVF23_swigregister(itkImageBoundaryConditionIVF23)

class itkImageBoundaryConditionIVF32(object):
    r"""


    A virtual base object that defines an interface to a class of boundary
    condition objects for use by neighborhood iterators.

    A boundary condition object supplies a phantom pixel value when given
    a neighborhood of (pointers to) image values, the (ND) index of the
    phantom pixel, and its (ND) offset from the boundary. The index of the
    phantom pixel is relative to the "upper left-hand corner" of the
    neighborhood (as opposed to its center).

    Associated Types Description  PixelType The data type of the return
    value. PixelPointerType A pointer to PixelType.
    PixelPointerTypeNeighborhood A neighborhood of PixelPointerTypes that
    points to the pixel values in an image neighborhood. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetNameOfClass = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIVF32_GetNameOfClass)
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIVF32_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIVF32___call__)
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkImageBoundaryConditionIVF32
    RequiresCompleteNeighborhood = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIVF32_RequiresCompleteNeighborhood)
    GetInputRequestedRegion = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIVF32_GetInputRequestedRegion)
    GetPixel = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIVF32_GetPixel)

# Register itkImageBoundaryConditionIVF32 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkImageBoundaryConditionIVF32_swigregister(itkImageBoundaryConditionIVF32)

class itkImageBoundaryConditionIVF33(object):
    r"""


    A virtual base object that defines an interface to a class of boundary
    condition objects for use by neighborhood iterators.

    A boundary condition object supplies a phantom pixel value when given
    a neighborhood of (pointers to) image values, the (ND) index of the
    phantom pixel, and its (ND) offset from the boundary. The index of the
    phantom pixel is relative to the "upper left-hand corner" of the
    neighborhood (as opposed to its center).

    Associated Types Description  PixelType The data type of the return
    value. PixelPointerType A pointer to PixelType.
    PixelPointerTypeNeighborhood A neighborhood of PixelPointerTypes that
    points to the pixel values in an image neighborhood. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetNameOfClass = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIVF33_GetNameOfClass)
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIVF33_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIVF33___call__)
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkImageBoundaryConditionIVF33
    RequiresCompleteNeighborhood = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIVF33_RequiresCompleteNeighborhood)
    GetInputRequestedRegion = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIVF33_GetInputRequestedRegion)
    GetPixel = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIVF33_GetPixel)

# Register itkImageBoundaryConditionIVF33 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkImageBoundaryConditionIVF33_swigregister(itkImageBoundaryConditionIVF33)

class itkImageBoundaryConditionIVF42(object):
    r"""


    A virtual base object that defines an interface to a class of boundary
    condition objects for use by neighborhood iterators.

    A boundary condition object supplies a phantom pixel value when given
    a neighborhood of (pointers to) image values, the (ND) index of the
    phantom pixel, and its (ND) offset from the boundary. The index of the
    phantom pixel is relative to the "upper left-hand corner" of the
    neighborhood (as opposed to its center).

    Associated Types Description  PixelType The data type of the return
    value. PixelPointerType A pointer to PixelType.
    PixelPointerTypeNeighborhood A neighborhood of PixelPointerTypes that
    points to the pixel values in an image neighborhood. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetNameOfClass = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIVF42_GetNameOfClass)
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIVF42_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIVF42___call__)
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkImageBoundaryConditionIVF42
    RequiresCompleteNeighborhood = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIVF42_RequiresCompleteNeighborhood)
    GetInputRequestedRegion = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIVF42_GetInputRequestedRegion)
    GetPixel = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIVF42_GetPixel)

# Register itkImageBoundaryConditionIVF42 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkImageBoundaryConditionIVF42_swigregister(itkImageBoundaryConditionIVF42)

class itkImageBoundaryConditionIVF43(object):
    r"""


    A virtual base object that defines an interface to a class of boundary
    condition objects for use by neighborhood iterators.

    A boundary condition object supplies a phantom pixel value when given
    a neighborhood of (pointers to) image values, the (ND) index of the
    phantom pixel, and its (ND) offset from the boundary. The index of the
    phantom pixel is relative to the "upper left-hand corner" of the
    neighborhood (as opposed to its center).

    Associated Types Description  PixelType The data type of the return
    value. PixelPointerType A pointer to PixelType.
    PixelPointerTypeNeighborhood A neighborhood of PixelPointerTypes that
    points to the pixel values in an image neighborhood. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetNameOfClass = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIVF43_GetNameOfClass)
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIVF43_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIVF43___call__)
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkImageBoundaryConditionIVF43
    RequiresCompleteNeighborhood = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIVF43_RequiresCompleteNeighborhood)
    GetInputRequestedRegion = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIVF43_GetInputRequestedRegion)
    GetPixel = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkImageBoundaryConditionIVF43_GetPixel)

# Register itkImageBoundaryConditionIVF43 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkImageBoundaryConditionIVF43_swigregister(itkImageBoundaryConditionIVF43)

class itkPeriodicBoundaryConditionICF2(itkImageBoundaryConditionICF2):
    r"""


    A function object that determines values outside of image boundaries
    according to periodic (wrap-around) conditions.

    The input to this function object is a neighborhood iterator. This
    boundary condition object is designed to be given as a template
    argument to a NeighborhoodIterator or any of the NeighborhoodIterator
    subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionICF2___call__)

    def __init__(self, *args):
        r"""
        __init__(itkPeriodicBoundaryConditionICF2 self) -> itkPeriodicBoundaryConditionICF2
        __init__(itkPeriodicBoundaryConditionICF2 self, itkPeriodicBoundaryConditionICF2 arg0) -> itkPeriodicBoundaryConditionICF2


        A function object that determines values outside of image boundaries
        according to periodic (wrap-around) conditions.

        The input to this function object is a neighborhood iterator. This
        boundary condition object is designed to be given as a template
        argument to a NeighborhoodIterator or any of the NeighborhoodIterator
        subclasses. 
        """
        _itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionICF2_swiginit(self, _itkImageBoundaryConditionPython.new_itkPeriodicBoundaryConditionICF2(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkPeriodicBoundaryConditionICF2

# Register itkPeriodicBoundaryConditionICF2 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionICF2_swigregister(itkPeriodicBoundaryConditionICF2)

class itkPeriodicBoundaryConditionICF3(itkImageBoundaryConditionICF3):
    r"""


    A function object that determines values outside of image boundaries
    according to periodic (wrap-around) conditions.

    The input to this function object is a neighborhood iterator. This
    boundary condition object is designed to be given as a template
    argument to a NeighborhoodIterator or any of the NeighborhoodIterator
    subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionICF3___call__)

    def __init__(self, *args):
        r"""
        __init__(itkPeriodicBoundaryConditionICF3 self) -> itkPeriodicBoundaryConditionICF3
        __init__(itkPeriodicBoundaryConditionICF3 self, itkPeriodicBoundaryConditionICF3 arg0) -> itkPeriodicBoundaryConditionICF3


        A function object that determines values outside of image boundaries
        according to periodic (wrap-around) conditions.

        The input to this function object is a neighborhood iterator. This
        boundary condition object is designed to be given as a template
        argument to a NeighborhoodIterator or any of the NeighborhoodIterator
        subclasses. 
        """
        _itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionICF3_swiginit(self, _itkImageBoundaryConditionPython.new_itkPeriodicBoundaryConditionICF3(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkPeriodicBoundaryConditionICF3

# Register itkPeriodicBoundaryConditionICF3 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionICF3_swigregister(itkPeriodicBoundaryConditionICF3)

class itkPeriodicBoundaryConditionICVF22(itkImageBoundaryConditionICVF22):
    r"""


    A function object that determines values outside of image boundaries
    according to periodic (wrap-around) conditions.

    The input to this function object is a neighborhood iterator. This
    boundary condition object is designed to be given as a template
    argument to a NeighborhoodIterator or any of the NeighborhoodIterator
    subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionICVF22___call__)

    def __init__(self, *args):
        r"""
        __init__(itkPeriodicBoundaryConditionICVF22 self) -> itkPeriodicBoundaryConditionICVF22
        __init__(itkPeriodicBoundaryConditionICVF22 self, itkPeriodicBoundaryConditionICVF22 arg0) -> itkPeriodicBoundaryConditionICVF22


        A function object that determines values outside of image boundaries
        according to periodic (wrap-around) conditions.

        The input to this function object is a neighborhood iterator. This
        boundary condition object is designed to be given as a template
        argument to a NeighborhoodIterator or any of the NeighborhoodIterator
        subclasses. 
        """
        _itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionICVF22_swiginit(self, _itkImageBoundaryConditionPython.new_itkPeriodicBoundaryConditionICVF22(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkPeriodicBoundaryConditionICVF22

# Register itkPeriodicBoundaryConditionICVF22 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionICVF22_swigregister(itkPeriodicBoundaryConditionICVF22)

class itkPeriodicBoundaryConditionICVF23(itkImageBoundaryConditionICVF23):
    r"""


    A function object that determines values outside of image boundaries
    according to periodic (wrap-around) conditions.

    The input to this function object is a neighborhood iterator. This
    boundary condition object is designed to be given as a template
    argument to a NeighborhoodIterator or any of the NeighborhoodIterator
    subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionICVF23___call__)

    def __init__(self, *args):
        r"""
        __init__(itkPeriodicBoundaryConditionICVF23 self) -> itkPeriodicBoundaryConditionICVF23
        __init__(itkPeriodicBoundaryConditionICVF23 self, itkPeriodicBoundaryConditionICVF23 arg0) -> itkPeriodicBoundaryConditionICVF23


        A function object that determines values outside of image boundaries
        according to periodic (wrap-around) conditions.

        The input to this function object is a neighborhood iterator. This
        boundary condition object is designed to be given as a template
        argument to a NeighborhoodIterator or any of the NeighborhoodIterator
        subclasses. 
        """
        _itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionICVF23_swiginit(self, _itkImageBoundaryConditionPython.new_itkPeriodicBoundaryConditionICVF23(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkPeriodicBoundaryConditionICVF23

# Register itkPeriodicBoundaryConditionICVF23 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionICVF23_swigregister(itkPeriodicBoundaryConditionICVF23)

class itkPeriodicBoundaryConditionICVF32(itkImageBoundaryConditionICVF32):
    r"""


    A function object that determines values outside of image boundaries
    according to periodic (wrap-around) conditions.

    The input to this function object is a neighborhood iterator. This
    boundary condition object is designed to be given as a template
    argument to a NeighborhoodIterator or any of the NeighborhoodIterator
    subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionICVF32___call__)

    def __init__(self, *args):
        r"""
        __init__(itkPeriodicBoundaryConditionICVF32 self) -> itkPeriodicBoundaryConditionICVF32
        __init__(itkPeriodicBoundaryConditionICVF32 self, itkPeriodicBoundaryConditionICVF32 arg0) -> itkPeriodicBoundaryConditionICVF32


        A function object that determines values outside of image boundaries
        according to periodic (wrap-around) conditions.

        The input to this function object is a neighborhood iterator. This
        boundary condition object is designed to be given as a template
        argument to a NeighborhoodIterator or any of the NeighborhoodIterator
        subclasses. 
        """
        _itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionICVF32_swiginit(self, _itkImageBoundaryConditionPython.new_itkPeriodicBoundaryConditionICVF32(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkPeriodicBoundaryConditionICVF32

# Register itkPeriodicBoundaryConditionICVF32 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionICVF32_swigregister(itkPeriodicBoundaryConditionICVF32)

class itkPeriodicBoundaryConditionICVF33(itkImageBoundaryConditionICVF33):
    r"""


    A function object that determines values outside of image boundaries
    according to periodic (wrap-around) conditions.

    The input to this function object is a neighborhood iterator. This
    boundary condition object is designed to be given as a template
    argument to a NeighborhoodIterator or any of the NeighborhoodIterator
    subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionICVF33___call__)

    def __init__(self, *args):
        r"""
        __init__(itkPeriodicBoundaryConditionICVF33 self) -> itkPeriodicBoundaryConditionICVF33
        __init__(itkPeriodicBoundaryConditionICVF33 self, itkPeriodicBoundaryConditionICVF33 arg0) -> itkPeriodicBoundaryConditionICVF33


        A function object that determines values outside of image boundaries
        according to periodic (wrap-around) conditions.

        The input to this function object is a neighborhood iterator. This
        boundary condition object is designed to be given as a template
        argument to a NeighborhoodIterator or any of the NeighborhoodIterator
        subclasses. 
        """
        _itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionICVF33_swiginit(self, _itkImageBoundaryConditionPython.new_itkPeriodicBoundaryConditionICVF33(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkPeriodicBoundaryConditionICVF33

# Register itkPeriodicBoundaryConditionICVF33 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionICVF33_swigregister(itkPeriodicBoundaryConditionICVF33)

class itkPeriodicBoundaryConditionICVF42(itkImageBoundaryConditionICVF42):
    r"""


    A function object that determines values outside of image boundaries
    according to periodic (wrap-around) conditions.

    The input to this function object is a neighborhood iterator. This
    boundary condition object is designed to be given as a template
    argument to a NeighborhoodIterator or any of the NeighborhoodIterator
    subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionICVF42___call__)

    def __init__(self, *args):
        r"""
        __init__(itkPeriodicBoundaryConditionICVF42 self) -> itkPeriodicBoundaryConditionICVF42
        __init__(itkPeriodicBoundaryConditionICVF42 self, itkPeriodicBoundaryConditionICVF42 arg0) -> itkPeriodicBoundaryConditionICVF42


        A function object that determines values outside of image boundaries
        according to periodic (wrap-around) conditions.

        The input to this function object is a neighborhood iterator. This
        boundary condition object is designed to be given as a template
        argument to a NeighborhoodIterator or any of the NeighborhoodIterator
        subclasses. 
        """
        _itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionICVF42_swiginit(self, _itkImageBoundaryConditionPython.new_itkPeriodicBoundaryConditionICVF42(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkPeriodicBoundaryConditionICVF42

# Register itkPeriodicBoundaryConditionICVF42 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionICVF42_swigregister(itkPeriodicBoundaryConditionICVF42)

class itkPeriodicBoundaryConditionICVF43(itkImageBoundaryConditionICVF43):
    r"""


    A function object that determines values outside of image boundaries
    according to periodic (wrap-around) conditions.

    The input to this function object is a neighborhood iterator. This
    boundary condition object is designed to be given as a template
    argument to a NeighborhoodIterator or any of the NeighborhoodIterator
    subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionICVF43___call__)

    def __init__(self, *args):
        r"""
        __init__(itkPeriodicBoundaryConditionICVF43 self) -> itkPeriodicBoundaryConditionICVF43
        __init__(itkPeriodicBoundaryConditionICVF43 self, itkPeriodicBoundaryConditionICVF43 arg0) -> itkPeriodicBoundaryConditionICVF43


        A function object that determines values outside of image boundaries
        according to periodic (wrap-around) conditions.

        The input to this function object is a neighborhood iterator. This
        boundary condition object is designed to be given as a template
        argument to a NeighborhoodIterator or any of the NeighborhoodIterator
        subclasses. 
        """
        _itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionICVF43_swiginit(self, _itkImageBoundaryConditionPython.new_itkPeriodicBoundaryConditionICVF43(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkPeriodicBoundaryConditionICVF43

# Register itkPeriodicBoundaryConditionICVF43 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionICVF43_swigregister(itkPeriodicBoundaryConditionICVF43)

class itkPeriodicBoundaryConditionID2(itkImageBoundaryConditionID2):
    r"""


    A function object that determines values outside of image boundaries
    according to periodic (wrap-around) conditions.

    The input to this function object is a neighborhood iterator. This
    boundary condition object is designed to be given as a template
    argument to a NeighborhoodIterator or any of the NeighborhoodIterator
    subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionID2___call__)

    def __init__(self, *args):
        r"""
        __init__(itkPeriodicBoundaryConditionID2 self) -> itkPeriodicBoundaryConditionID2
        __init__(itkPeriodicBoundaryConditionID2 self, itkPeriodicBoundaryConditionID2 arg0) -> itkPeriodicBoundaryConditionID2


        A function object that determines values outside of image boundaries
        according to periodic (wrap-around) conditions.

        The input to this function object is a neighborhood iterator. This
        boundary condition object is designed to be given as a template
        argument to a NeighborhoodIterator or any of the NeighborhoodIterator
        subclasses. 
        """
        _itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionID2_swiginit(self, _itkImageBoundaryConditionPython.new_itkPeriodicBoundaryConditionID2(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkPeriodicBoundaryConditionID2

# Register itkPeriodicBoundaryConditionID2 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionID2_swigregister(itkPeriodicBoundaryConditionID2)

class itkPeriodicBoundaryConditionID3(itkImageBoundaryConditionID3):
    r"""


    A function object that determines values outside of image boundaries
    according to periodic (wrap-around) conditions.

    The input to this function object is a neighborhood iterator. This
    boundary condition object is designed to be given as a template
    argument to a NeighborhoodIterator or any of the NeighborhoodIterator
    subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionID3___call__)

    def __init__(self, *args):
        r"""
        __init__(itkPeriodicBoundaryConditionID3 self) -> itkPeriodicBoundaryConditionID3
        __init__(itkPeriodicBoundaryConditionID3 self, itkPeriodicBoundaryConditionID3 arg0) -> itkPeriodicBoundaryConditionID3


        A function object that determines values outside of image boundaries
        according to periodic (wrap-around) conditions.

        The input to this function object is a neighborhood iterator. This
        boundary condition object is designed to be given as a template
        argument to a NeighborhoodIterator or any of the NeighborhoodIterator
        subclasses. 
        """
        _itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionID3_swiginit(self, _itkImageBoundaryConditionPython.new_itkPeriodicBoundaryConditionID3(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkPeriodicBoundaryConditionID3

# Register itkPeriodicBoundaryConditionID3 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionID3_swigregister(itkPeriodicBoundaryConditionID3)

class itkPeriodicBoundaryConditionIF2(itkImageBoundaryConditionIF2):
    r"""


    A function object that determines values outside of image boundaries
    according to periodic (wrap-around) conditions.

    The input to this function object is a neighborhood iterator. This
    boundary condition object is designed to be given as a template
    argument to a NeighborhoodIterator or any of the NeighborhoodIterator
    subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionIF2___call__)

    def __init__(self, *args):
        r"""
        __init__(itkPeriodicBoundaryConditionIF2 self) -> itkPeriodicBoundaryConditionIF2
        __init__(itkPeriodicBoundaryConditionIF2 self, itkPeriodicBoundaryConditionIF2 arg0) -> itkPeriodicBoundaryConditionIF2


        A function object that determines values outside of image boundaries
        according to periodic (wrap-around) conditions.

        The input to this function object is a neighborhood iterator. This
        boundary condition object is designed to be given as a template
        argument to a NeighborhoodIterator or any of the NeighborhoodIterator
        subclasses. 
        """
        _itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionIF2_swiginit(self, _itkImageBoundaryConditionPython.new_itkPeriodicBoundaryConditionIF2(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkPeriodicBoundaryConditionIF2

# Register itkPeriodicBoundaryConditionIF2 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionIF2_swigregister(itkPeriodicBoundaryConditionIF2)

class itkPeriodicBoundaryConditionIF3(itkImageBoundaryConditionIF3):
    r"""


    A function object that determines values outside of image boundaries
    according to periodic (wrap-around) conditions.

    The input to this function object is a neighborhood iterator. This
    boundary condition object is designed to be given as a template
    argument to a NeighborhoodIterator or any of the NeighborhoodIterator
    subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionIF3___call__)

    def __init__(self, *args):
        r"""
        __init__(itkPeriodicBoundaryConditionIF3 self) -> itkPeriodicBoundaryConditionIF3
        __init__(itkPeriodicBoundaryConditionIF3 self, itkPeriodicBoundaryConditionIF3 arg0) -> itkPeriodicBoundaryConditionIF3


        A function object that determines values outside of image boundaries
        according to periodic (wrap-around) conditions.

        The input to this function object is a neighborhood iterator. This
        boundary condition object is designed to be given as a template
        argument to a NeighborhoodIterator or any of the NeighborhoodIterator
        subclasses. 
        """
        _itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionIF3_swiginit(self, _itkImageBoundaryConditionPython.new_itkPeriodicBoundaryConditionIF3(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkPeriodicBoundaryConditionIF3

# Register itkPeriodicBoundaryConditionIF3 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionIF3_swigregister(itkPeriodicBoundaryConditionIF3)

class itkPeriodicBoundaryConditionIRGBAUC2(itkImageBoundaryConditionIRGBAUC2):
    r"""


    A function object that determines values outside of image boundaries
    according to periodic (wrap-around) conditions.

    The input to this function object is a neighborhood iterator. This
    boundary condition object is designed to be given as a template
    argument to a NeighborhoodIterator or any of the NeighborhoodIterator
    subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionIRGBAUC2___call__)

    def __init__(self, *args):
        r"""
        __init__(itkPeriodicBoundaryConditionIRGBAUC2 self) -> itkPeriodicBoundaryConditionIRGBAUC2
        __init__(itkPeriodicBoundaryConditionIRGBAUC2 self, itkPeriodicBoundaryConditionIRGBAUC2 arg0) -> itkPeriodicBoundaryConditionIRGBAUC2


        A function object that determines values outside of image boundaries
        according to periodic (wrap-around) conditions.

        The input to this function object is a neighborhood iterator. This
        boundary condition object is designed to be given as a template
        argument to a NeighborhoodIterator or any of the NeighborhoodIterator
        subclasses. 
        """
        _itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionIRGBAUC2_swiginit(self, _itkImageBoundaryConditionPython.new_itkPeriodicBoundaryConditionIRGBAUC2(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkPeriodicBoundaryConditionIRGBAUC2

# Register itkPeriodicBoundaryConditionIRGBAUC2 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionIRGBAUC2_swigregister(itkPeriodicBoundaryConditionIRGBAUC2)

class itkPeriodicBoundaryConditionIRGBAUC3(itkImageBoundaryConditionIRGBAUC3):
    r"""


    A function object that determines values outside of image boundaries
    according to periodic (wrap-around) conditions.

    The input to this function object is a neighborhood iterator. This
    boundary condition object is designed to be given as a template
    argument to a NeighborhoodIterator or any of the NeighborhoodIterator
    subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionIRGBAUC3___call__)

    def __init__(self, *args):
        r"""
        __init__(itkPeriodicBoundaryConditionIRGBAUC3 self) -> itkPeriodicBoundaryConditionIRGBAUC3
        __init__(itkPeriodicBoundaryConditionIRGBAUC3 self, itkPeriodicBoundaryConditionIRGBAUC3 arg0) -> itkPeriodicBoundaryConditionIRGBAUC3


        A function object that determines values outside of image boundaries
        according to periodic (wrap-around) conditions.

        The input to this function object is a neighborhood iterator. This
        boundary condition object is designed to be given as a template
        argument to a NeighborhoodIterator or any of the NeighborhoodIterator
        subclasses. 
        """
        _itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionIRGBAUC3_swiginit(self, _itkImageBoundaryConditionPython.new_itkPeriodicBoundaryConditionIRGBAUC3(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkPeriodicBoundaryConditionIRGBAUC3

# Register itkPeriodicBoundaryConditionIRGBAUC3 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionIRGBAUC3_swigregister(itkPeriodicBoundaryConditionIRGBAUC3)

class itkPeriodicBoundaryConditionIRGBUC2(itkImageBoundaryConditionIRGBUC2):
    r"""


    A function object that determines values outside of image boundaries
    according to periodic (wrap-around) conditions.

    The input to this function object is a neighborhood iterator. This
    boundary condition object is designed to be given as a template
    argument to a NeighborhoodIterator or any of the NeighborhoodIterator
    subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionIRGBUC2___call__)

    def __init__(self, *args):
        r"""
        __init__(itkPeriodicBoundaryConditionIRGBUC2 self) -> itkPeriodicBoundaryConditionIRGBUC2
        __init__(itkPeriodicBoundaryConditionIRGBUC2 self, itkPeriodicBoundaryConditionIRGBUC2 arg0) -> itkPeriodicBoundaryConditionIRGBUC2


        A function object that determines values outside of image boundaries
        according to periodic (wrap-around) conditions.

        The input to this function object is a neighborhood iterator. This
        boundary condition object is designed to be given as a template
        argument to a NeighborhoodIterator or any of the NeighborhoodIterator
        subclasses. 
        """
        _itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionIRGBUC2_swiginit(self, _itkImageBoundaryConditionPython.new_itkPeriodicBoundaryConditionIRGBUC2(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkPeriodicBoundaryConditionIRGBUC2

# Register itkPeriodicBoundaryConditionIRGBUC2 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionIRGBUC2_swigregister(itkPeriodicBoundaryConditionIRGBUC2)

class itkPeriodicBoundaryConditionIRGBUC3(itkImageBoundaryConditionIRGBUC3):
    r"""


    A function object that determines values outside of image boundaries
    according to periodic (wrap-around) conditions.

    The input to this function object is a neighborhood iterator. This
    boundary condition object is designed to be given as a template
    argument to a NeighborhoodIterator or any of the NeighborhoodIterator
    subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionIRGBUC3___call__)

    def __init__(self, *args):
        r"""
        __init__(itkPeriodicBoundaryConditionIRGBUC3 self) -> itkPeriodicBoundaryConditionIRGBUC3
        __init__(itkPeriodicBoundaryConditionIRGBUC3 self, itkPeriodicBoundaryConditionIRGBUC3 arg0) -> itkPeriodicBoundaryConditionIRGBUC3


        A function object that determines values outside of image boundaries
        according to periodic (wrap-around) conditions.

        The input to this function object is a neighborhood iterator. This
        boundary condition object is designed to be given as a template
        argument to a NeighborhoodIterator or any of the NeighborhoodIterator
        subclasses. 
        """
        _itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionIRGBUC3_swiginit(self, _itkImageBoundaryConditionPython.new_itkPeriodicBoundaryConditionIRGBUC3(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkPeriodicBoundaryConditionIRGBUC3

# Register itkPeriodicBoundaryConditionIRGBUC3 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionIRGBUC3_swigregister(itkPeriodicBoundaryConditionIRGBUC3)

class itkPeriodicBoundaryConditionISS2(itkImageBoundaryConditionISS2):
    r"""


    A function object that determines values outside of image boundaries
    according to periodic (wrap-around) conditions.

    The input to this function object is a neighborhood iterator. This
    boundary condition object is designed to be given as a template
    argument to a NeighborhoodIterator or any of the NeighborhoodIterator
    subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionISS2___call__)

    def __init__(self, *args):
        r"""
        __init__(itkPeriodicBoundaryConditionISS2 self) -> itkPeriodicBoundaryConditionISS2
        __init__(itkPeriodicBoundaryConditionISS2 self, itkPeriodicBoundaryConditionISS2 arg0) -> itkPeriodicBoundaryConditionISS2


        A function object that determines values outside of image boundaries
        according to periodic (wrap-around) conditions.

        The input to this function object is a neighborhood iterator. This
        boundary condition object is designed to be given as a template
        argument to a NeighborhoodIterator or any of the NeighborhoodIterator
        subclasses. 
        """
        _itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionISS2_swiginit(self, _itkImageBoundaryConditionPython.new_itkPeriodicBoundaryConditionISS2(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkPeriodicBoundaryConditionISS2

# Register itkPeriodicBoundaryConditionISS2 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionISS2_swigregister(itkPeriodicBoundaryConditionISS2)

class itkPeriodicBoundaryConditionISS3(itkImageBoundaryConditionISS3):
    r"""


    A function object that determines values outside of image boundaries
    according to periodic (wrap-around) conditions.

    The input to this function object is a neighborhood iterator. This
    boundary condition object is designed to be given as a template
    argument to a NeighborhoodIterator or any of the NeighborhoodIterator
    subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionISS3___call__)

    def __init__(self, *args):
        r"""
        __init__(itkPeriodicBoundaryConditionISS3 self) -> itkPeriodicBoundaryConditionISS3
        __init__(itkPeriodicBoundaryConditionISS3 self, itkPeriodicBoundaryConditionISS3 arg0) -> itkPeriodicBoundaryConditionISS3


        A function object that determines values outside of image boundaries
        according to periodic (wrap-around) conditions.

        The input to this function object is a neighborhood iterator. This
        boundary condition object is designed to be given as a template
        argument to a NeighborhoodIterator or any of the NeighborhoodIterator
        subclasses. 
        """
        _itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionISS3_swiginit(self, _itkImageBoundaryConditionPython.new_itkPeriodicBoundaryConditionISS3(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkPeriodicBoundaryConditionISS3

# Register itkPeriodicBoundaryConditionISS3 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionISS3_swigregister(itkPeriodicBoundaryConditionISS3)

class itkPeriodicBoundaryConditionIUC2(itkImageBoundaryConditionIUC2):
    r"""


    A function object that determines values outside of image boundaries
    according to periodic (wrap-around) conditions.

    The input to this function object is a neighborhood iterator. This
    boundary condition object is designed to be given as a template
    argument to a NeighborhoodIterator or any of the NeighborhoodIterator
    subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionIUC2___call__)

    def __init__(self, *args):
        r"""
        __init__(itkPeriodicBoundaryConditionIUC2 self) -> itkPeriodicBoundaryConditionIUC2
        __init__(itkPeriodicBoundaryConditionIUC2 self, itkPeriodicBoundaryConditionIUC2 arg0) -> itkPeriodicBoundaryConditionIUC2


        A function object that determines values outside of image boundaries
        according to periodic (wrap-around) conditions.

        The input to this function object is a neighborhood iterator. This
        boundary condition object is designed to be given as a template
        argument to a NeighborhoodIterator or any of the NeighborhoodIterator
        subclasses. 
        """
        _itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionIUC2_swiginit(self, _itkImageBoundaryConditionPython.new_itkPeriodicBoundaryConditionIUC2(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkPeriodicBoundaryConditionIUC2

# Register itkPeriodicBoundaryConditionIUC2 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionIUC2_swigregister(itkPeriodicBoundaryConditionIUC2)

class itkPeriodicBoundaryConditionIUC3(itkImageBoundaryConditionIUC3):
    r"""


    A function object that determines values outside of image boundaries
    according to periodic (wrap-around) conditions.

    The input to this function object is a neighborhood iterator. This
    boundary condition object is designed to be given as a template
    argument to a NeighborhoodIterator or any of the NeighborhoodIterator
    subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionIUC3___call__)

    def __init__(self, *args):
        r"""
        __init__(itkPeriodicBoundaryConditionIUC3 self) -> itkPeriodicBoundaryConditionIUC3
        __init__(itkPeriodicBoundaryConditionIUC3 self, itkPeriodicBoundaryConditionIUC3 arg0) -> itkPeriodicBoundaryConditionIUC3


        A function object that determines values outside of image boundaries
        according to periodic (wrap-around) conditions.

        The input to this function object is a neighborhood iterator. This
        boundary condition object is designed to be given as a template
        argument to a NeighborhoodIterator or any of the NeighborhoodIterator
        subclasses. 
        """
        _itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionIUC3_swiginit(self, _itkImageBoundaryConditionPython.new_itkPeriodicBoundaryConditionIUC3(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkPeriodicBoundaryConditionIUC3

# Register itkPeriodicBoundaryConditionIUC3 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionIUC3_swigregister(itkPeriodicBoundaryConditionIUC3)

class itkPeriodicBoundaryConditionIUS2(itkImageBoundaryConditionIUS2):
    r"""


    A function object that determines values outside of image boundaries
    according to periodic (wrap-around) conditions.

    The input to this function object is a neighborhood iterator. This
    boundary condition object is designed to be given as a template
    argument to a NeighborhoodIterator or any of the NeighborhoodIterator
    subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionIUS2___call__)

    def __init__(self, *args):
        r"""
        __init__(itkPeriodicBoundaryConditionIUS2 self) -> itkPeriodicBoundaryConditionIUS2
        __init__(itkPeriodicBoundaryConditionIUS2 self, itkPeriodicBoundaryConditionIUS2 arg0) -> itkPeriodicBoundaryConditionIUS2


        A function object that determines values outside of image boundaries
        according to periodic (wrap-around) conditions.

        The input to this function object is a neighborhood iterator. This
        boundary condition object is designed to be given as a template
        argument to a NeighborhoodIterator or any of the NeighborhoodIterator
        subclasses. 
        """
        _itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionIUS2_swiginit(self, _itkImageBoundaryConditionPython.new_itkPeriodicBoundaryConditionIUS2(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkPeriodicBoundaryConditionIUS2

# Register itkPeriodicBoundaryConditionIUS2 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionIUS2_swigregister(itkPeriodicBoundaryConditionIUS2)

class itkPeriodicBoundaryConditionIUS3(itkImageBoundaryConditionIUS3):
    r"""


    A function object that determines values outside of image boundaries
    according to periodic (wrap-around) conditions.

    The input to this function object is a neighborhood iterator. This
    boundary condition object is designed to be given as a template
    argument to a NeighborhoodIterator or any of the NeighborhoodIterator
    subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionIUS3___call__)

    def __init__(self, *args):
        r"""
        __init__(itkPeriodicBoundaryConditionIUS3 self) -> itkPeriodicBoundaryConditionIUS3
        __init__(itkPeriodicBoundaryConditionIUS3 self, itkPeriodicBoundaryConditionIUS3 arg0) -> itkPeriodicBoundaryConditionIUS3


        A function object that determines values outside of image boundaries
        according to periodic (wrap-around) conditions.

        The input to this function object is a neighborhood iterator. This
        boundary condition object is designed to be given as a template
        argument to a NeighborhoodIterator or any of the NeighborhoodIterator
        subclasses. 
        """
        _itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionIUS3_swiginit(self, _itkImageBoundaryConditionPython.new_itkPeriodicBoundaryConditionIUS3(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkPeriodicBoundaryConditionIUS3

# Register itkPeriodicBoundaryConditionIUS3 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionIUS3_swigregister(itkPeriodicBoundaryConditionIUS3)

class itkPeriodicBoundaryConditionIVF22(itkImageBoundaryConditionIVF22):
    r"""


    A function object that determines values outside of image boundaries
    according to periodic (wrap-around) conditions.

    The input to this function object is a neighborhood iterator. This
    boundary condition object is designed to be given as a template
    argument to a NeighborhoodIterator or any of the NeighborhoodIterator
    subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionIVF22___call__)

    def __init__(self, *args):
        r"""
        __init__(itkPeriodicBoundaryConditionIVF22 self) -> itkPeriodicBoundaryConditionIVF22
        __init__(itkPeriodicBoundaryConditionIVF22 self, itkPeriodicBoundaryConditionIVF22 arg0) -> itkPeriodicBoundaryConditionIVF22


        A function object that determines values outside of image boundaries
        according to periodic (wrap-around) conditions.

        The input to this function object is a neighborhood iterator. This
        boundary condition object is designed to be given as a template
        argument to a NeighborhoodIterator or any of the NeighborhoodIterator
        subclasses. 
        """
        _itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionIVF22_swiginit(self, _itkImageBoundaryConditionPython.new_itkPeriodicBoundaryConditionIVF22(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkPeriodicBoundaryConditionIVF22

# Register itkPeriodicBoundaryConditionIVF22 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionIVF22_swigregister(itkPeriodicBoundaryConditionIVF22)

class itkPeriodicBoundaryConditionIVF23(itkImageBoundaryConditionIVF23):
    r"""


    A function object that determines values outside of image boundaries
    according to periodic (wrap-around) conditions.

    The input to this function object is a neighborhood iterator. This
    boundary condition object is designed to be given as a template
    argument to a NeighborhoodIterator or any of the NeighborhoodIterator
    subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionIVF23___call__)

    def __init__(self, *args):
        r"""
        __init__(itkPeriodicBoundaryConditionIVF23 self) -> itkPeriodicBoundaryConditionIVF23
        __init__(itkPeriodicBoundaryConditionIVF23 self, itkPeriodicBoundaryConditionIVF23 arg0) -> itkPeriodicBoundaryConditionIVF23


        A function object that determines values outside of image boundaries
        according to periodic (wrap-around) conditions.

        The input to this function object is a neighborhood iterator. This
        boundary condition object is designed to be given as a template
        argument to a NeighborhoodIterator or any of the NeighborhoodIterator
        subclasses. 
        """
        _itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionIVF23_swiginit(self, _itkImageBoundaryConditionPython.new_itkPeriodicBoundaryConditionIVF23(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkPeriodicBoundaryConditionIVF23

# Register itkPeriodicBoundaryConditionIVF23 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionIVF23_swigregister(itkPeriodicBoundaryConditionIVF23)

class itkPeriodicBoundaryConditionIVF32(itkImageBoundaryConditionIVF32):
    r"""


    A function object that determines values outside of image boundaries
    according to periodic (wrap-around) conditions.

    The input to this function object is a neighborhood iterator. This
    boundary condition object is designed to be given as a template
    argument to a NeighborhoodIterator or any of the NeighborhoodIterator
    subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionIVF32___call__)

    def __init__(self, *args):
        r"""
        __init__(itkPeriodicBoundaryConditionIVF32 self) -> itkPeriodicBoundaryConditionIVF32
        __init__(itkPeriodicBoundaryConditionIVF32 self, itkPeriodicBoundaryConditionIVF32 arg0) -> itkPeriodicBoundaryConditionIVF32


        A function object that determines values outside of image boundaries
        according to periodic (wrap-around) conditions.

        The input to this function object is a neighborhood iterator. This
        boundary condition object is designed to be given as a template
        argument to a NeighborhoodIterator or any of the NeighborhoodIterator
        subclasses. 
        """
        _itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionIVF32_swiginit(self, _itkImageBoundaryConditionPython.new_itkPeriodicBoundaryConditionIVF32(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkPeriodicBoundaryConditionIVF32

# Register itkPeriodicBoundaryConditionIVF32 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionIVF32_swigregister(itkPeriodicBoundaryConditionIVF32)

class itkPeriodicBoundaryConditionIVF33(itkImageBoundaryConditionIVF33):
    r"""


    A function object that determines values outside of image boundaries
    according to periodic (wrap-around) conditions.

    The input to this function object is a neighborhood iterator. This
    boundary condition object is designed to be given as a template
    argument to a NeighborhoodIterator or any of the NeighborhoodIterator
    subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionIVF33___call__)

    def __init__(self, *args):
        r"""
        __init__(itkPeriodicBoundaryConditionIVF33 self) -> itkPeriodicBoundaryConditionIVF33
        __init__(itkPeriodicBoundaryConditionIVF33 self, itkPeriodicBoundaryConditionIVF33 arg0) -> itkPeriodicBoundaryConditionIVF33


        A function object that determines values outside of image boundaries
        according to periodic (wrap-around) conditions.

        The input to this function object is a neighborhood iterator. This
        boundary condition object is designed to be given as a template
        argument to a NeighborhoodIterator or any of the NeighborhoodIterator
        subclasses. 
        """
        _itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionIVF33_swiginit(self, _itkImageBoundaryConditionPython.new_itkPeriodicBoundaryConditionIVF33(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkPeriodicBoundaryConditionIVF33

# Register itkPeriodicBoundaryConditionIVF33 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionIVF33_swigregister(itkPeriodicBoundaryConditionIVF33)

class itkPeriodicBoundaryConditionIVF42(itkImageBoundaryConditionIVF42):
    r"""


    A function object that determines values outside of image boundaries
    according to periodic (wrap-around) conditions.

    The input to this function object is a neighborhood iterator. This
    boundary condition object is designed to be given as a template
    argument to a NeighborhoodIterator or any of the NeighborhoodIterator
    subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionIVF42___call__)

    def __init__(self, *args):
        r"""
        __init__(itkPeriodicBoundaryConditionIVF42 self) -> itkPeriodicBoundaryConditionIVF42
        __init__(itkPeriodicBoundaryConditionIVF42 self, itkPeriodicBoundaryConditionIVF42 arg0) -> itkPeriodicBoundaryConditionIVF42


        A function object that determines values outside of image boundaries
        according to periodic (wrap-around) conditions.

        The input to this function object is a neighborhood iterator. This
        boundary condition object is designed to be given as a template
        argument to a NeighborhoodIterator or any of the NeighborhoodIterator
        subclasses. 
        """
        _itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionIVF42_swiginit(self, _itkImageBoundaryConditionPython.new_itkPeriodicBoundaryConditionIVF42(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkPeriodicBoundaryConditionIVF42

# Register itkPeriodicBoundaryConditionIVF42 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionIVF42_swigregister(itkPeriodicBoundaryConditionIVF42)

class itkPeriodicBoundaryConditionIVF43(itkImageBoundaryConditionIVF43):
    r"""


    A function object that determines values outside of image boundaries
    according to periodic (wrap-around) conditions.

    The input to this function object is a neighborhood iterator. This
    boundary condition object is designed to be given as a template
    argument to a NeighborhoodIterator or any of the NeighborhoodIterator
    subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionIVF43___call__)

    def __init__(self, *args):
        r"""
        __init__(itkPeriodicBoundaryConditionIVF43 self) -> itkPeriodicBoundaryConditionIVF43
        __init__(itkPeriodicBoundaryConditionIVF43 self, itkPeriodicBoundaryConditionIVF43 arg0) -> itkPeriodicBoundaryConditionIVF43


        A function object that determines values outside of image boundaries
        according to periodic (wrap-around) conditions.

        The input to this function object is a neighborhood iterator. This
        boundary condition object is designed to be given as a template
        argument to a NeighborhoodIterator or any of the NeighborhoodIterator
        subclasses. 
        """
        _itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionIVF43_swiginit(self, _itkImageBoundaryConditionPython.new_itkPeriodicBoundaryConditionIVF43(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkPeriodicBoundaryConditionIVF43

# Register itkPeriodicBoundaryConditionIVF43 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkPeriodicBoundaryConditionIVF43_swigregister(itkPeriodicBoundaryConditionIVF43)

class itkZeroFluxNeumannBoundaryConditionICF2(itkImageBoundaryConditionICF2):
    r"""


    A function object that determines a neighborhood of values at an image
    boundary according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this function object on a 7x5 iterator that
    masks a region at an image corner (iterator is centered on the 2):
    returns the following neighborhood of values: The input to this
    function object is a neighborhood iterator. This boundary condition
    object is designed to be given as a template argument to a
    NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionICF2___call__)

    def __init__(self, *args):
        r"""
        __init__(itkZeroFluxNeumannBoundaryConditionICF2 self) -> itkZeroFluxNeumannBoundaryConditionICF2
        __init__(itkZeroFluxNeumannBoundaryConditionICF2 self, itkZeroFluxNeumannBoundaryConditionICF2 arg0) -> itkZeroFluxNeumannBoundaryConditionICF2


        A function object that determines a neighborhood of values at an image
        boundary according to a Neumann boundary condition where first, upwind
        derivatives on the boundary are zero. This is a useful condition in
        solving some classes of differential equations.

        For example, invoking this function object on a 7x5 iterator that
        masks a region at an image corner (iterator is centered on the 2):
        returns the following neighborhood of values: The input to this
        function object is a neighborhood iterator. This boundary condition
        object is designed to be given as a template argument to a
        NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
        """
        _itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionICF2_swiginit(self, _itkImageBoundaryConditionPython.new_itkZeroFluxNeumannBoundaryConditionICF2(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkZeroFluxNeumannBoundaryConditionICF2

# Register itkZeroFluxNeumannBoundaryConditionICF2 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionICF2_swigregister(itkZeroFluxNeumannBoundaryConditionICF2)

class itkZeroFluxNeumannBoundaryConditionICF3(itkImageBoundaryConditionICF3):
    r"""


    A function object that determines a neighborhood of values at an image
    boundary according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this function object on a 7x5 iterator that
    masks a region at an image corner (iterator is centered on the 2):
    returns the following neighborhood of values: The input to this
    function object is a neighborhood iterator. This boundary condition
    object is designed to be given as a template argument to a
    NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionICF3___call__)

    def __init__(self, *args):
        r"""
        __init__(itkZeroFluxNeumannBoundaryConditionICF3 self) -> itkZeroFluxNeumannBoundaryConditionICF3
        __init__(itkZeroFluxNeumannBoundaryConditionICF3 self, itkZeroFluxNeumannBoundaryConditionICF3 arg0) -> itkZeroFluxNeumannBoundaryConditionICF3


        A function object that determines a neighborhood of values at an image
        boundary according to a Neumann boundary condition where first, upwind
        derivatives on the boundary are zero. This is a useful condition in
        solving some classes of differential equations.

        For example, invoking this function object on a 7x5 iterator that
        masks a region at an image corner (iterator is centered on the 2):
        returns the following neighborhood of values: The input to this
        function object is a neighborhood iterator. This boundary condition
        object is designed to be given as a template argument to a
        NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
        """
        _itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionICF3_swiginit(self, _itkImageBoundaryConditionPython.new_itkZeroFluxNeumannBoundaryConditionICF3(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkZeroFluxNeumannBoundaryConditionICF3

# Register itkZeroFluxNeumannBoundaryConditionICF3 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionICF3_swigregister(itkZeroFluxNeumannBoundaryConditionICF3)

class itkZeroFluxNeumannBoundaryConditionICVF22(itkImageBoundaryConditionICVF22):
    r"""


    A function object that determines a neighborhood of values at an image
    boundary according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this function object on a 7x5 iterator that
    masks a region at an image corner (iterator is centered on the 2):
    returns the following neighborhood of values: The input to this
    function object is a neighborhood iterator. This boundary condition
    object is designed to be given as a template argument to a
    NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionICVF22___call__)

    def __init__(self, *args):
        r"""
        __init__(itkZeroFluxNeumannBoundaryConditionICVF22 self) -> itkZeroFluxNeumannBoundaryConditionICVF22
        __init__(itkZeroFluxNeumannBoundaryConditionICVF22 self, itkZeroFluxNeumannBoundaryConditionICVF22 arg0) -> itkZeroFluxNeumannBoundaryConditionICVF22


        A function object that determines a neighborhood of values at an image
        boundary according to a Neumann boundary condition where first, upwind
        derivatives on the boundary are zero. This is a useful condition in
        solving some classes of differential equations.

        For example, invoking this function object on a 7x5 iterator that
        masks a region at an image corner (iterator is centered on the 2):
        returns the following neighborhood of values: The input to this
        function object is a neighborhood iterator. This boundary condition
        object is designed to be given as a template argument to a
        NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
        """
        _itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionICVF22_swiginit(self, _itkImageBoundaryConditionPython.new_itkZeroFluxNeumannBoundaryConditionICVF22(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkZeroFluxNeumannBoundaryConditionICVF22

# Register itkZeroFluxNeumannBoundaryConditionICVF22 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionICVF22_swigregister(itkZeroFluxNeumannBoundaryConditionICVF22)

class itkZeroFluxNeumannBoundaryConditionICVF23(itkImageBoundaryConditionICVF23):
    r"""


    A function object that determines a neighborhood of values at an image
    boundary according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this function object on a 7x5 iterator that
    masks a region at an image corner (iterator is centered on the 2):
    returns the following neighborhood of values: The input to this
    function object is a neighborhood iterator. This boundary condition
    object is designed to be given as a template argument to a
    NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionICVF23___call__)

    def __init__(self, *args):
        r"""
        __init__(itkZeroFluxNeumannBoundaryConditionICVF23 self) -> itkZeroFluxNeumannBoundaryConditionICVF23
        __init__(itkZeroFluxNeumannBoundaryConditionICVF23 self, itkZeroFluxNeumannBoundaryConditionICVF23 arg0) -> itkZeroFluxNeumannBoundaryConditionICVF23


        A function object that determines a neighborhood of values at an image
        boundary according to a Neumann boundary condition where first, upwind
        derivatives on the boundary are zero. This is a useful condition in
        solving some classes of differential equations.

        For example, invoking this function object on a 7x5 iterator that
        masks a region at an image corner (iterator is centered on the 2):
        returns the following neighborhood of values: The input to this
        function object is a neighborhood iterator. This boundary condition
        object is designed to be given as a template argument to a
        NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
        """
        _itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionICVF23_swiginit(self, _itkImageBoundaryConditionPython.new_itkZeroFluxNeumannBoundaryConditionICVF23(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkZeroFluxNeumannBoundaryConditionICVF23

# Register itkZeroFluxNeumannBoundaryConditionICVF23 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionICVF23_swigregister(itkZeroFluxNeumannBoundaryConditionICVF23)

class itkZeroFluxNeumannBoundaryConditionICVF32(itkImageBoundaryConditionICVF32):
    r"""


    A function object that determines a neighborhood of values at an image
    boundary according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this function object on a 7x5 iterator that
    masks a region at an image corner (iterator is centered on the 2):
    returns the following neighborhood of values: The input to this
    function object is a neighborhood iterator. This boundary condition
    object is designed to be given as a template argument to a
    NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionICVF32___call__)

    def __init__(self, *args):
        r"""
        __init__(itkZeroFluxNeumannBoundaryConditionICVF32 self) -> itkZeroFluxNeumannBoundaryConditionICVF32
        __init__(itkZeroFluxNeumannBoundaryConditionICVF32 self, itkZeroFluxNeumannBoundaryConditionICVF32 arg0) -> itkZeroFluxNeumannBoundaryConditionICVF32


        A function object that determines a neighborhood of values at an image
        boundary according to a Neumann boundary condition where first, upwind
        derivatives on the boundary are zero. This is a useful condition in
        solving some classes of differential equations.

        For example, invoking this function object on a 7x5 iterator that
        masks a region at an image corner (iterator is centered on the 2):
        returns the following neighborhood of values: The input to this
        function object is a neighborhood iterator. This boundary condition
        object is designed to be given as a template argument to a
        NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
        """
        _itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionICVF32_swiginit(self, _itkImageBoundaryConditionPython.new_itkZeroFluxNeumannBoundaryConditionICVF32(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkZeroFluxNeumannBoundaryConditionICVF32

# Register itkZeroFluxNeumannBoundaryConditionICVF32 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionICVF32_swigregister(itkZeroFluxNeumannBoundaryConditionICVF32)

class itkZeroFluxNeumannBoundaryConditionICVF33(itkImageBoundaryConditionICVF33):
    r"""


    A function object that determines a neighborhood of values at an image
    boundary according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this function object on a 7x5 iterator that
    masks a region at an image corner (iterator is centered on the 2):
    returns the following neighborhood of values: The input to this
    function object is a neighborhood iterator. This boundary condition
    object is designed to be given as a template argument to a
    NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionICVF33___call__)

    def __init__(self, *args):
        r"""
        __init__(itkZeroFluxNeumannBoundaryConditionICVF33 self) -> itkZeroFluxNeumannBoundaryConditionICVF33
        __init__(itkZeroFluxNeumannBoundaryConditionICVF33 self, itkZeroFluxNeumannBoundaryConditionICVF33 arg0) -> itkZeroFluxNeumannBoundaryConditionICVF33


        A function object that determines a neighborhood of values at an image
        boundary according to a Neumann boundary condition where first, upwind
        derivatives on the boundary are zero. This is a useful condition in
        solving some classes of differential equations.

        For example, invoking this function object on a 7x5 iterator that
        masks a region at an image corner (iterator is centered on the 2):
        returns the following neighborhood of values: The input to this
        function object is a neighborhood iterator. This boundary condition
        object is designed to be given as a template argument to a
        NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
        """
        _itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionICVF33_swiginit(self, _itkImageBoundaryConditionPython.new_itkZeroFluxNeumannBoundaryConditionICVF33(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkZeroFluxNeumannBoundaryConditionICVF33

# Register itkZeroFluxNeumannBoundaryConditionICVF33 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionICVF33_swigregister(itkZeroFluxNeumannBoundaryConditionICVF33)

class itkZeroFluxNeumannBoundaryConditionICVF42(itkImageBoundaryConditionICVF42):
    r"""


    A function object that determines a neighborhood of values at an image
    boundary according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this function object on a 7x5 iterator that
    masks a region at an image corner (iterator is centered on the 2):
    returns the following neighborhood of values: The input to this
    function object is a neighborhood iterator. This boundary condition
    object is designed to be given as a template argument to a
    NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionICVF42___call__)

    def __init__(self, *args):
        r"""
        __init__(itkZeroFluxNeumannBoundaryConditionICVF42 self) -> itkZeroFluxNeumannBoundaryConditionICVF42
        __init__(itkZeroFluxNeumannBoundaryConditionICVF42 self, itkZeroFluxNeumannBoundaryConditionICVF42 arg0) -> itkZeroFluxNeumannBoundaryConditionICVF42


        A function object that determines a neighborhood of values at an image
        boundary according to a Neumann boundary condition where first, upwind
        derivatives on the boundary are zero. This is a useful condition in
        solving some classes of differential equations.

        For example, invoking this function object on a 7x5 iterator that
        masks a region at an image corner (iterator is centered on the 2):
        returns the following neighborhood of values: The input to this
        function object is a neighborhood iterator. This boundary condition
        object is designed to be given as a template argument to a
        NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
        """
        _itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionICVF42_swiginit(self, _itkImageBoundaryConditionPython.new_itkZeroFluxNeumannBoundaryConditionICVF42(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkZeroFluxNeumannBoundaryConditionICVF42

# Register itkZeroFluxNeumannBoundaryConditionICVF42 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionICVF42_swigregister(itkZeroFluxNeumannBoundaryConditionICVF42)

class itkZeroFluxNeumannBoundaryConditionICVF43(itkImageBoundaryConditionICVF43):
    r"""


    A function object that determines a neighborhood of values at an image
    boundary according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this function object on a 7x5 iterator that
    masks a region at an image corner (iterator is centered on the 2):
    returns the following neighborhood of values: The input to this
    function object is a neighborhood iterator. This boundary condition
    object is designed to be given as a template argument to a
    NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionICVF43___call__)

    def __init__(self, *args):
        r"""
        __init__(itkZeroFluxNeumannBoundaryConditionICVF43 self) -> itkZeroFluxNeumannBoundaryConditionICVF43
        __init__(itkZeroFluxNeumannBoundaryConditionICVF43 self, itkZeroFluxNeumannBoundaryConditionICVF43 arg0) -> itkZeroFluxNeumannBoundaryConditionICVF43


        A function object that determines a neighborhood of values at an image
        boundary according to a Neumann boundary condition where first, upwind
        derivatives on the boundary are zero. This is a useful condition in
        solving some classes of differential equations.

        For example, invoking this function object on a 7x5 iterator that
        masks a region at an image corner (iterator is centered on the 2):
        returns the following neighborhood of values: The input to this
        function object is a neighborhood iterator. This boundary condition
        object is designed to be given as a template argument to a
        NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
        """
        _itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionICVF43_swiginit(self, _itkImageBoundaryConditionPython.new_itkZeroFluxNeumannBoundaryConditionICVF43(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkZeroFluxNeumannBoundaryConditionICVF43

# Register itkZeroFluxNeumannBoundaryConditionICVF43 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionICVF43_swigregister(itkZeroFluxNeumannBoundaryConditionICVF43)

class itkZeroFluxNeumannBoundaryConditionID2(itkImageBoundaryConditionID2):
    r"""


    A function object that determines a neighborhood of values at an image
    boundary according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this function object on a 7x5 iterator that
    masks a region at an image corner (iterator is centered on the 2):
    returns the following neighborhood of values: The input to this
    function object is a neighborhood iterator. This boundary condition
    object is designed to be given as a template argument to a
    NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionID2___call__)

    def __init__(self, *args):
        r"""
        __init__(itkZeroFluxNeumannBoundaryConditionID2 self) -> itkZeroFluxNeumannBoundaryConditionID2
        __init__(itkZeroFluxNeumannBoundaryConditionID2 self, itkZeroFluxNeumannBoundaryConditionID2 arg0) -> itkZeroFluxNeumannBoundaryConditionID2


        A function object that determines a neighborhood of values at an image
        boundary according to a Neumann boundary condition where first, upwind
        derivatives on the boundary are zero. This is a useful condition in
        solving some classes of differential equations.

        For example, invoking this function object on a 7x5 iterator that
        masks a region at an image corner (iterator is centered on the 2):
        returns the following neighborhood of values: The input to this
        function object is a neighborhood iterator. This boundary condition
        object is designed to be given as a template argument to a
        NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
        """
        _itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionID2_swiginit(self, _itkImageBoundaryConditionPython.new_itkZeroFluxNeumannBoundaryConditionID2(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkZeroFluxNeumannBoundaryConditionID2

# Register itkZeroFluxNeumannBoundaryConditionID2 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionID2_swigregister(itkZeroFluxNeumannBoundaryConditionID2)

class itkZeroFluxNeumannBoundaryConditionID3(itkImageBoundaryConditionID3):
    r"""


    A function object that determines a neighborhood of values at an image
    boundary according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this function object on a 7x5 iterator that
    masks a region at an image corner (iterator is centered on the 2):
    returns the following neighborhood of values: The input to this
    function object is a neighborhood iterator. This boundary condition
    object is designed to be given as a template argument to a
    NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionID3___call__)

    def __init__(self, *args):
        r"""
        __init__(itkZeroFluxNeumannBoundaryConditionID3 self) -> itkZeroFluxNeumannBoundaryConditionID3
        __init__(itkZeroFluxNeumannBoundaryConditionID3 self, itkZeroFluxNeumannBoundaryConditionID3 arg0) -> itkZeroFluxNeumannBoundaryConditionID3


        A function object that determines a neighborhood of values at an image
        boundary according to a Neumann boundary condition where first, upwind
        derivatives on the boundary are zero. This is a useful condition in
        solving some classes of differential equations.

        For example, invoking this function object on a 7x5 iterator that
        masks a region at an image corner (iterator is centered on the 2):
        returns the following neighborhood of values: The input to this
        function object is a neighborhood iterator. This boundary condition
        object is designed to be given as a template argument to a
        NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
        """
        _itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionID3_swiginit(self, _itkImageBoundaryConditionPython.new_itkZeroFluxNeumannBoundaryConditionID3(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkZeroFluxNeumannBoundaryConditionID3

# Register itkZeroFluxNeumannBoundaryConditionID3 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionID3_swigregister(itkZeroFluxNeumannBoundaryConditionID3)

class itkZeroFluxNeumannBoundaryConditionIF2(itkImageBoundaryConditionIF2):
    r"""


    A function object that determines a neighborhood of values at an image
    boundary according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this function object on a 7x5 iterator that
    masks a region at an image corner (iterator is centered on the 2):
    returns the following neighborhood of values: The input to this
    function object is a neighborhood iterator. This boundary condition
    object is designed to be given as a template argument to a
    NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionIF2___call__)

    def __init__(self, *args):
        r"""
        __init__(itkZeroFluxNeumannBoundaryConditionIF2 self) -> itkZeroFluxNeumannBoundaryConditionIF2
        __init__(itkZeroFluxNeumannBoundaryConditionIF2 self, itkZeroFluxNeumannBoundaryConditionIF2 arg0) -> itkZeroFluxNeumannBoundaryConditionIF2


        A function object that determines a neighborhood of values at an image
        boundary according to a Neumann boundary condition where first, upwind
        derivatives on the boundary are zero. This is a useful condition in
        solving some classes of differential equations.

        For example, invoking this function object on a 7x5 iterator that
        masks a region at an image corner (iterator is centered on the 2):
        returns the following neighborhood of values: The input to this
        function object is a neighborhood iterator. This boundary condition
        object is designed to be given as a template argument to a
        NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
        """
        _itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionIF2_swiginit(self, _itkImageBoundaryConditionPython.new_itkZeroFluxNeumannBoundaryConditionIF2(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkZeroFluxNeumannBoundaryConditionIF2

# Register itkZeroFluxNeumannBoundaryConditionIF2 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionIF2_swigregister(itkZeroFluxNeumannBoundaryConditionIF2)

class itkZeroFluxNeumannBoundaryConditionIF3(itkImageBoundaryConditionIF3):
    r"""


    A function object that determines a neighborhood of values at an image
    boundary according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this function object on a 7x5 iterator that
    masks a region at an image corner (iterator is centered on the 2):
    returns the following neighborhood of values: The input to this
    function object is a neighborhood iterator. This boundary condition
    object is designed to be given as a template argument to a
    NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionIF3___call__)

    def __init__(self, *args):
        r"""
        __init__(itkZeroFluxNeumannBoundaryConditionIF3 self) -> itkZeroFluxNeumannBoundaryConditionIF3
        __init__(itkZeroFluxNeumannBoundaryConditionIF3 self, itkZeroFluxNeumannBoundaryConditionIF3 arg0) -> itkZeroFluxNeumannBoundaryConditionIF3


        A function object that determines a neighborhood of values at an image
        boundary according to a Neumann boundary condition where first, upwind
        derivatives on the boundary are zero. This is a useful condition in
        solving some classes of differential equations.

        For example, invoking this function object on a 7x5 iterator that
        masks a region at an image corner (iterator is centered on the 2):
        returns the following neighborhood of values: The input to this
        function object is a neighborhood iterator. This boundary condition
        object is designed to be given as a template argument to a
        NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
        """
        _itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionIF3_swiginit(self, _itkImageBoundaryConditionPython.new_itkZeroFluxNeumannBoundaryConditionIF3(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkZeroFluxNeumannBoundaryConditionIF3

# Register itkZeroFluxNeumannBoundaryConditionIF3 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionIF3_swigregister(itkZeroFluxNeumannBoundaryConditionIF3)

class itkZeroFluxNeumannBoundaryConditionIRGBAUC2(itkImageBoundaryConditionIRGBAUC2):
    r"""


    A function object that determines a neighborhood of values at an image
    boundary according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this function object on a 7x5 iterator that
    masks a region at an image corner (iterator is centered on the 2):
    returns the following neighborhood of values: The input to this
    function object is a neighborhood iterator. This boundary condition
    object is designed to be given as a template argument to a
    NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionIRGBAUC2___call__)

    def __init__(self, *args):
        r"""
        __init__(itkZeroFluxNeumannBoundaryConditionIRGBAUC2 self) -> itkZeroFluxNeumannBoundaryConditionIRGBAUC2
        __init__(itkZeroFluxNeumannBoundaryConditionIRGBAUC2 self, itkZeroFluxNeumannBoundaryConditionIRGBAUC2 arg0) -> itkZeroFluxNeumannBoundaryConditionIRGBAUC2


        A function object that determines a neighborhood of values at an image
        boundary according to a Neumann boundary condition where first, upwind
        derivatives on the boundary are zero. This is a useful condition in
        solving some classes of differential equations.

        For example, invoking this function object on a 7x5 iterator that
        masks a region at an image corner (iterator is centered on the 2):
        returns the following neighborhood of values: The input to this
        function object is a neighborhood iterator. This boundary condition
        object is designed to be given as a template argument to a
        NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
        """
        _itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionIRGBAUC2_swiginit(self, _itkImageBoundaryConditionPython.new_itkZeroFluxNeumannBoundaryConditionIRGBAUC2(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkZeroFluxNeumannBoundaryConditionIRGBAUC2

# Register itkZeroFluxNeumannBoundaryConditionIRGBAUC2 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionIRGBAUC2_swigregister(itkZeroFluxNeumannBoundaryConditionIRGBAUC2)

class itkZeroFluxNeumannBoundaryConditionIRGBAUC3(itkImageBoundaryConditionIRGBAUC3):
    r"""


    A function object that determines a neighborhood of values at an image
    boundary according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this function object on a 7x5 iterator that
    masks a region at an image corner (iterator is centered on the 2):
    returns the following neighborhood of values: The input to this
    function object is a neighborhood iterator. This boundary condition
    object is designed to be given as a template argument to a
    NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionIRGBAUC3___call__)

    def __init__(self, *args):
        r"""
        __init__(itkZeroFluxNeumannBoundaryConditionIRGBAUC3 self) -> itkZeroFluxNeumannBoundaryConditionIRGBAUC3
        __init__(itkZeroFluxNeumannBoundaryConditionIRGBAUC3 self, itkZeroFluxNeumannBoundaryConditionIRGBAUC3 arg0) -> itkZeroFluxNeumannBoundaryConditionIRGBAUC3


        A function object that determines a neighborhood of values at an image
        boundary according to a Neumann boundary condition where first, upwind
        derivatives on the boundary are zero. This is a useful condition in
        solving some classes of differential equations.

        For example, invoking this function object on a 7x5 iterator that
        masks a region at an image corner (iterator is centered on the 2):
        returns the following neighborhood of values: The input to this
        function object is a neighborhood iterator. This boundary condition
        object is designed to be given as a template argument to a
        NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
        """
        _itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionIRGBAUC3_swiginit(self, _itkImageBoundaryConditionPython.new_itkZeroFluxNeumannBoundaryConditionIRGBAUC3(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkZeroFluxNeumannBoundaryConditionIRGBAUC3

# Register itkZeroFluxNeumannBoundaryConditionIRGBAUC3 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionIRGBAUC3_swigregister(itkZeroFluxNeumannBoundaryConditionIRGBAUC3)

class itkZeroFluxNeumannBoundaryConditionIRGBUC2(itkImageBoundaryConditionIRGBUC2):
    r"""


    A function object that determines a neighborhood of values at an image
    boundary according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this function object on a 7x5 iterator that
    masks a region at an image corner (iterator is centered on the 2):
    returns the following neighborhood of values: The input to this
    function object is a neighborhood iterator. This boundary condition
    object is designed to be given as a template argument to a
    NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionIRGBUC2___call__)

    def __init__(self, *args):
        r"""
        __init__(itkZeroFluxNeumannBoundaryConditionIRGBUC2 self) -> itkZeroFluxNeumannBoundaryConditionIRGBUC2
        __init__(itkZeroFluxNeumannBoundaryConditionIRGBUC2 self, itkZeroFluxNeumannBoundaryConditionIRGBUC2 arg0) -> itkZeroFluxNeumannBoundaryConditionIRGBUC2


        A function object that determines a neighborhood of values at an image
        boundary according to a Neumann boundary condition where first, upwind
        derivatives on the boundary are zero. This is a useful condition in
        solving some classes of differential equations.

        For example, invoking this function object on a 7x5 iterator that
        masks a region at an image corner (iterator is centered on the 2):
        returns the following neighborhood of values: The input to this
        function object is a neighborhood iterator. This boundary condition
        object is designed to be given as a template argument to a
        NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
        """
        _itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionIRGBUC2_swiginit(self, _itkImageBoundaryConditionPython.new_itkZeroFluxNeumannBoundaryConditionIRGBUC2(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkZeroFluxNeumannBoundaryConditionIRGBUC2

# Register itkZeroFluxNeumannBoundaryConditionIRGBUC2 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionIRGBUC2_swigregister(itkZeroFluxNeumannBoundaryConditionIRGBUC2)

class itkZeroFluxNeumannBoundaryConditionIRGBUC3(itkImageBoundaryConditionIRGBUC3):
    r"""


    A function object that determines a neighborhood of values at an image
    boundary according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this function object on a 7x5 iterator that
    masks a region at an image corner (iterator is centered on the 2):
    returns the following neighborhood of values: The input to this
    function object is a neighborhood iterator. This boundary condition
    object is designed to be given as a template argument to a
    NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionIRGBUC3___call__)

    def __init__(self, *args):
        r"""
        __init__(itkZeroFluxNeumannBoundaryConditionIRGBUC3 self) -> itkZeroFluxNeumannBoundaryConditionIRGBUC3
        __init__(itkZeroFluxNeumannBoundaryConditionIRGBUC3 self, itkZeroFluxNeumannBoundaryConditionIRGBUC3 arg0) -> itkZeroFluxNeumannBoundaryConditionIRGBUC3


        A function object that determines a neighborhood of values at an image
        boundary according to a Neumann boundary condition where first, upwind
        derivatives on the boundary are zero. This is a useful condition in
        solving some classes of differential equations.

        For example, invoking this function object on a 7x5 iterator that
        masks a region at an image corner (iterator is centered on the 2):
        returns the following neighborhood of values: The input to this
        function object is a neighborhood iterator. This boundary condition
        object is designed to be given as a template argument to a
        NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
        """
        _itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionIRGBUC3_swiginit(self, _itkImageBoundaryConditionPython.new_itkZeroFluxNeumannBoundaryConditionIRGBUC3(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkZeroFluxNeumannBoundaryConditionIRGBUC3

# Register itkZeroFluxNeumannBoundaryConditionIRGBUC3 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionIRGBUC3_swigregister(itkZeroFluxNeumannBoundaryConditionIRGBUC3)

class itkZeroFluxNeumannBoundaryConditionISS2(itkImageBoundaryConditionISS2):
    r"""


    A function object that determines a neighborhood of values at an image
    boundary according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this function object on a 7x5 iterator that
    masks a region at an image corner (iterator is centered on the 2):
    returns the following neighborhood of values: The input to this
    function object is a neighborhood iterator. This boundary condition
    object is designed to be given as a template argument to a
    NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionISS2___call__)

    def __init__(self, *args):
        r"""
        __init__(itkZeroFluxNeumannBoundaryConditionISS2 self) -> itkZeroFluxNeumannBoundaryConditionISS2
        __init__(itkZeroFluxNeumannBoundaryConditionISS2 self, itkZeroFluxNeumannBoundaryConditionISS2 arg0) -> itkZeroFluxNeumannBoundaryConditionISS2


        A function object that determines a neighborhood of values at an image
        boundary according to a Neumann boundary condition where first, upwind
        derivatives on the boundary are zero. This is a useful condition in
        solving some classes of differential equations.

        For example, invoking this function object on a 7x5 iterator that
        masks a region at an image corner (iterator is centered on the 2):
        returns the following neighborhood of values: The input to this
        function object is a neighborhood iterator. This boundary condition
        object is designed to be given as a template argument to a
        NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
        """
        _itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionISS2_swiginit(self, _itkImageBoundaryConditionPython.new_itkZeroFluxNeumannBoundaryConditionISS2(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkZeroFluxNeumannBoundaryConditionISS2

# Register itkZeroFluxNeumannBoundaryConditionISS2 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionISS2_swigregister(itkZeroFluxNeumannBoundaryConditionISS2)

class itkZeroFluxNeumannBoundaryConditionISS3(itkImageBoundaryConditionISS3):
    r"""


    A function object that determines a neighborhood of values at an image
    boundary according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this function object on a 7x5 iterator that
    masks a region at an image corner (iterator is centered on the 2):
    returns the following neighborhood of values: The input to this
    function object is a neighborhood iterator. This boundary condition
    object is designed to be given as a template argument to a
    NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionISS3___call__)

    def __init__(self, *args):
        r"""
        __init__(itkZeroFluxNeumannBoundaryConditionISS3 self) -> itkZeroFluxNeumannBoundaryConditionISS3
        __init__(itkZeroFluxNeumannBoundaryConditionISS3 self, itkZeroFluxNeumannBoundaryConditionISS3 arg0) -> itkZeroFluxNeumannBoundaryConditionISS3


        A function object that determines a neighborhood of values at an image
        boundary according to a Neumann boundary condition where first, upwind
        derivatives on the boundary are zero. This is a useful condition in
        solving some classes of differential equations.

        For example, invoking this function object on a 7x5 iterator that
        masks a region at an image corner (iterator is centered on the 2):
        returns the following neighborhood of values: The input to this
        function object is a neighborhood iterator. This boundary condition
        object is designed to be given as a template argument to a
        NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
        """
        _itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionISS3_swiginit(self, _itkImageBoundaryConditionPython.new_itkZeroFluxNeumannBoundaryConditionISS3(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkZeroFluxNeumannBoundaryConditionISS3

# Register itkZeroFluxNeumannBoundaryConditionISS3 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionISS3_swigregister(itkZeroFluxNeumannBoundaryConditionISS3)

class itkZeroFluxNeumannBoundaryConditionIUC2(itkImageBoundaryConditionIUC2):
    r"""


    A function object that determines a neighborhood of values at an image
    boundary according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this function object on a 7x5 iterator that
    masks a region at an image corner (iterator is centered on the 2):
    returns the following neighborhood of values: The input to this
    function object is a neighborhood iterator. This boundary condition
    object is designed to be given as a template argument to a
    NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionIUC2___call__)

    def __init__(self, *args):
        r"""
        __init__(itkZeroFluxNeumannBoundaryConditionIUC2 self) -> itkZeroFluxNeumannBoundaryConditionIUC2
        __init__(itkZeroFluxNeumannBoundaryConditionIUC2 self, itkZeroFluxNeumannBoundaryConditionIUC2 arg0) -> itkZeroFluxNeumannBoundaryConditionIUC2


        A function object that determines a neighborhood of values at an image
        boundary according to a Neumann boundary condition where first, upwind
        derivatives on the boundary are zero. This is a useful condition in
        solving some classes of differential equations.

        For example, invoking this function object on a 7x5 iterator that
        masks a region at an image corner (iterator is centered on the 2):
        returns the following neighborhood of values: The input to this
        function object is a neighborhood iterator. This boundary condition
        object is designed to be given as a template argument to a
        NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
        """
        _itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionIUC2_swiginit(self, _itkImageBoundaryConditionPython.new_itkZeroFluxNeumannBoundaryConditionIUC2(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkZeroFluxNeumannBoundaryConditionIUC2

# Register itkZeroFluxNeumannBoundaryConditionIUC2 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionIUC2_swigregister(itkZeroFluxNeumannBoundaryConditionIUC2)

class itkZeroFluxNeumannBoundaryConditionIUC3(itkImageBoundaryConditionIUC3):
    r"""


    A function object that determines a neighborhood of values at an image
    boundary according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this function object on a 7x5 iterator that
    masks a region at an image corner (iterator is centered on the 2):
    returns the following neighborhood of values: The input to this
    function object is a neighborhood iterator. This boundary condition
    object is designed to be given as a template argument to a
    NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionIUC3___call__)

    def __init__(self, *args):
        r"""
        __init__(itkZeroFluxNeumannBoundaryConditionIUC3 self) -> itkZeroFluxNeumannBoundaryConditionIUC3
        __init__(itkZeroFluxNeumannBoundaryConditionIUC3 self, itkZeroFluxNeumannBoundaryConditionIUC3 arg0) -> itkZeroFluxNeumannBoundaryConditionIUC3


        A function object that determines a neighborhood of values at an image
        boundary according to a Neumann boundary condition where first, upwind
        derivatives on the boundary are zero. This is a useful condition in
        solving some classes of differential equations.

        For example, invoking this function object on a 7x5 iterator that
        masks a region at an image corner (iterator is centered on the 2):
        returns the following neighborhood of values: The input to this
        function object is a neighborhood iterator. This boundary condition
        object is designed to be given as a template argument to a
        NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
        """
        _itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionIUC3_swiginit(self, _itkImageBoundaryConditionPython.new_itkZeroFluxNeumannBoundaryConditionIUC3(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkZeroFluxNeumannBoundaryConditionIUC3

# Register itkZeroFluxNeumannBoundaryConditionIUC3 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionIUC3_swigregister(itkZeroFluxNeumannBoundaryConditionIUC3)

class itkZeroFluxNeumannBoundaryConditionIUS2(itkImageBoundaryConditionIUS2):
    r"""


    A function object that determines a neighborhood of values at an image
    boundary according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this function object on a 7x5 iterator that
    masks a region at an image corner (iterator is centered on the 2):
    returns the following neighborhood of values: The input to this
    function object is a neighborhood iterator. This boundary condition
    object is designed to be given as a template argument to a
    NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionIUS2___call__)

    def __init__(self, *args):
        r"""
        __init__(itkZeroFluxNeumannBoundaryConditionIUS2 self) -> itkZeroFluxNeumannBoundaryConditionIUS2
        __init__(itkZeroFluxNeumannBoundaryConditionIUS2 self, itkZeroFluxNeumannBoundaryConditionIUS2 arg0) -> itkZeroFluxNeumannBoundaryConditionIUS2


        A function object that determines a neighborhood of values at an image
        boundary according to a Neumann boundary condition where first, upwind
        derivatives on the boundary are zero. This is a useful condition in
        solving some classes of differential equations.

        For example, invoking this function object on a 7x5 iterator that
        masks a region at an image corner (iterator is centered on the 2):
        returns the following neighborhood of values: The input to this
        function object is a neighborhood iterator. This boundary condition
        object is designed to be given as a template argument to a
        NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
        """
        _itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionIUS2_swiginit(self, _itkImageBoundaryConditionPython.new_itkZeroFluxNeumannBoundaryConditionIUS2(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkZeroFluxNeumannBoundaryConditionIUS2

# Register itkZeroFluxNeumannBoundaryConditionIUS2 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionIUS2_swigregister(itkZeroFluxNeumannBoundaryConditionIUS2)

class itkZeroFluxNeumannBoundaryConditionIUS3(itkImageBoundaryConditionIUS3):
    r"""


    A function object that determines a neighborhood of values at an image
    boundary according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this function object on a 7x5 iterator that
    masks a region at an image corner (iterator is centered on the 2):
    returns the following neighborhood of values: The input to this
    function object is a neighborhood iterator. This boundary condition
    object is designed to be given as a template argument to a
    NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionIUS3___call__)

    def __init__(self, *args):
        r"""
        __init__(itkZeroFluxNeumannBoundaryConditionIUS3 self) -> itkZeroFluxNeumannBoundaryConditionIUS3
        __init__(itkZeroFluxNeumannBoundaryConditionIUS3 self, itkZeroFluxNeumannBoundaryConditionIUS3 arg0) -> itkZeroFluxNeumannBoundaryConditionIUS3


        A function object that determines a neighborhood of values at an image
        boundary according to a Neumann boundary condition where first, upwind
        derivatives on the boundary are zero. This is a useful condition in
        solving some classes of differential equations.

        For example, invoking this function object on a 7x5 iterator that
        masks a region at an image corner (iterator is centered on the 2):
        returns the following neighborhood of values: The input to this
        function object is a neighborhood iterator. This boundary condition
        object is designed to be given as a template argument to a
        NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
        """
        _itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionIUS3_swiginit(self, _itkImageBoundaryConditionPython.new_itkZeroFluxNeumannBoundaryConditionIUS3(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkZeroFluxNeumannBoundaryConditionIUS3

# Register itkZeroFluxNeumannBoundaryConditionIUS3 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionIUS3_swigregister(itkZeroFluxNeumannBoundaryConditionIUS3)

class itkZeroFluxNeumannBoundaryConditionIVF22(itkImageBoundaryConditionIVF22):
    r"""


    A function object that determines a neighborhood of values at an image
    boundary according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this function object on a 7x5 iterator that
    masks a region at an image corner (iterator is centered on the 2):
    returns the following neighborhood of values: The input to this
    function object is a neighborhood iterator. This boundary condition
    object is designed to be given as a template argument to a
    NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionIVF22___call__)

    def __init__(self, *args):
        r"""
        __init__(itkZeroFluxNeumannBoundaryConditionIVF22 self) -> itkZeroFluxNeumannBoundaryConditionIVF22
        __init__(itkZeroFluxNeumannBoundaryConditionIVF22 self, itkZeroFluxNeumannBoundaryConditionIVF22 arg0) -> itkZeroFluxNeumannBoundaryConditionIVF22


        A function object that determines a neighborhood of values at an image
        boundary according to a Neumann boundary condition where first, upwind
        derivatives on the boundary are zero. This is a useful condition in
        solving some classes of differential equations.

        For example, invoking this function object on a 7x5 iterator that
        masks a region at an image corner (iterator is centered on the 2):
        returns the following neighborhood of values: The input to this
        function object is a neighborhood iterator. This boundary condition
        object is designed to be given as a template argument to a
        NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
        """
        _itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionIVF22_swiginit(self, _itkImageBoundaryConditionPython.new_itkZeroFluxNeumannBoundaryConditionIVF22(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkZeroFluxNeumannBoundaryConditionIVF22

# Register itkZeroFluxNeumannBoundaryConditionIVF22 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionIVF22_swigregister(itkZeroFluxNeumannBoundaryConditionIVF22)

class itkZeroFluxNeumannBoundaryConditionIVF23(itkImageBoundaryConditionIVF23):
    r"""


    A function object that determines a neighborhood of values at an image
    boundary according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this function object on a 7x5 iterator that
    masks a region at an image corner (iterator is centered on the 2):
    returns the following neighborhood of values: The input to this
    function object is a neighborhood iterator. This boundary condition
    object is designed to be given as a template argument to a
    NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionIVF23___call__)

    def __init__(self, *args):
        r"""
        __init__(itkZeroFluxNeumannBoundaryConditionIVF23 self) -> itkZeroFluxNeumannBoundaryConditionIVF23
        __init__(itkZeroFluxNeumannBoundaryConditionIVF23 self, itkZeroFluxNeumannBoundaryConditionIVF23 arg0) -> itkZeroFluxNeumannBoundaryConditionIVF23


        A function object that determines a neighborhood of values at an image
        boundary according to a Neumann boundary condition where first, upwind
        derivatives on the boundary are zero. This is a useful condition in
        solving some classes of differential equations.

        For example, invoking this function object on a 7x5 iterator that
        masks a region at an image corner (iterator is centered on the 2):
        returns the following neighborhood of values: The input to this
        function object is a neighborhood iterator. This boundary condition
        object is designed to be given as a template argument to a
        NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
        """
        _itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionIVF23_swiginit(self, _itkImageBoundaryConditionPython.new_itkZeroFluxNeumannBoundaryConditionIVF23(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkZeroFluxNeumannBoundaryConditionIVF23

# Register itkZeroFluxNeumannBoundaryConditionIVF23 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionIVF23_swigregister(itkZeroFluxNeumannBoundaryConditionIVF23)

class itkZeroFluxNeumannBoundaryConditionIVF32(itkImageBoundaryConditionIVF32):
    r"""


    A function object that determines a neighborhood of values at an image
    boundary according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this function object on a 7x5 iterator that
    masks a region at an image corner (iterator is centered on the 2):
    returns the following neighborhood of values: The input to this
    function object is a neighborhood iterator. This boundary condition
    object is designed to be given as a template argument to a
    NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionIVF32___call__)

    def __init__(self, *args):
        r"""
        __init__(itkZeroFluxNeumannBoundaryConditionIVF32 self) -> itkZeroFluxNeumannBoundaryConditionIVF32
        __init__(itkZeroFluxNeumannBoundaryConditionIVF32 self, itkZeroFluxNeumannBoundaryConditionIVF32 arg0) -> itkZeroFluxNeumannBoundaryConditionIVF32


        A function object that determines a neighborhood of values at an image
        boundary according to a Neumann boundary condition where first, upwind
        derivatives on the boundary are zero. This is a useful condition in
        solving some classes of differential equations.

        For example, invoking this function object on a 7x5 iterator that
        masks a region at an image corner (iterator is centered on the 2):
        returns the following neighborhood of values: The input to this
        function object is a neighborhood iterator. This boundary condition
        object is designed to be given as a template argument to a
        NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
        """
        _itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionIVF32_swiginit(self, _itkImageBoundaryConditionPython.new_itkZeroFluxNeumannBoundaryConditionIVF32(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkZeroFluxNeumannBoundaryConditionIVF32

# Register itkZeroFluxNeumannBoundaryConditionIVF32 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionIVF32_swigregister(itkZeroFluxNeumannBoundaryConditionIVF32)

class itkZeroFluxNeumannBoundaryConditionIVF33(itkImageBoundaryConditionIVF33):
    r"""


    A function object that determines a neighborhood of values at an image
    boundary according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this function object on a 7x5 iterator that
    masks a region at an image corner (iterator is centered on the 2):
    returns the following neighborhood of values: The input to this
    function object is a neighborhood iterator. This boundary condition
    object is designed to be given as a template argument to a
    NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionIVF33___call__)

    def __init__(self, *args):
        r"""
        __init__(itkZeroFluxNeumannBoundaryConditionIVF33 self) -> itkZeroFluxNeumannBoundaryConditionIVF33
        __init__(itkZeroFluxNeumannBoundaryConditionIVF33 self, itkZeroFluxNeumannBoundaryConditionIVF33 arg0) -> itkZeroFluxNeumannBoundaryConditionIVF33


        A function object that determines a neighborhood of values at an image
        boundary according to a Neumann boundary condition where first, upwind
        derivatives on the boundary are zero. This is a useful condition in
        solving some classes of differential equations.

        For example, invoking this function object on a 7x5 iterator that
        masks a region at an image corner (iterator is centered on the 2):
        returns the following neighborhood of values: The input to this
        function object is a neighborhood iterator. This boundary condition
        object is designed to be given as a template argument to a
        NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
        """
        _itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionIVF33_swiginit(self, _itkImageBoundaryConditionPython.new_itkZeroFluxNeumannBoundaryConditionIVF33(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkZeroFluxNeumannBoundaryConditionIVF33

# Register itkZeroFluxNeumannBoundaryConditionIVF33 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionIVF33_swigregister(itkZeroFluxNeumannBoundaryConditionIVF33)

class itkZeroFluxNeumannBoundaryConditionIVF42(itkImageBoundaryConditionIVF42):
    r"""


    A function object that determines a neighborhood of values at an image
    boundary according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this function object on a 7x5 iterator that
    masks a region at an image corner (iterator is centered on the 2):
    returns the following neighborhood of values: The input to this
    function object is a neighborhood iterator. This boundary condition
    object is designed to be given as a template argument to a
    NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionIVF42___call__)

    def __init__(self, *args):
        r"""
        __init__(itkZeroFluxNeumannBoundaryConditionIVF42 self) -> itkZeroFluxNeumannBoundaryConditionIVF42
        __init__(itkZeroFluxNeumannBoundaryConditionIVF42 self, itkZeroFluxNeumannBoundaryConditionIVF42 arg0) -> itkZeroFluxNeumannBoundaryConditionIVF42


        A function object that determines a neighborhood of values at an image
        boundary according to a Neumann boundary condition where first, upwind
        derivatives on the boundary are zero. This is a useful condition in
        solving some classes of differential equations.

        For example, invoking this function object on a 7x5 iterator that
        masks a region at an image corner (iterator is centered on the 2):
        returns the following neighborhood of values: The input to this
        function object is a neighborhood iterator. This boundary condition
        object is designed to be given as a template argument to a
        NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
        """
        _itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionIVF42_swiginit(self, _itkImageBoundaryConditionPython.new_itkZeroFluxNeumannBoundaryConditionIVF42(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkZeroFluxNeumannBoundaryConditionIVF42

# Register itkZeroFluxNeumannBoundaryConditionIVF42 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionIVF42_swigregister(itkZeroFluxNeumannBoundaryConditionIVF42)

class itkZeroFluxNeumannBoundaryConditionIVF43(itkImageBoundaryConditionIVF43):
    r"""


    A function object that determines a neighborhood of values at an image
    boundary according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this function object on a 7x5 iterator that
    masks a region at an image corner (iterator is centered on the 2):
    returns the following neighborhood of values: The input to this
    function object is a neighborhood iterator. This boundary condition
    object is designed to be given as a template argument to a
    NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionIVF43___call__)

    def __init__(self, *args):
        r"""
        __init__(itkZeroFluxNeumannBoundaryConditionIVF43 self) -> itkZeroFluxNeumannBoundaryConditionIVF43
        __init__(itkZeroFluxNeumannBoundaryConditionIVF43 self, itkZeroFluxNeumannBoundaryConditionIVF43 arg0) -> itkZeroFluxNeumannBoundaryConditionIVF43


        A function object that determines a neighborhood of values at an image
        boundary according to a Neumann boundary condition where first, upwind
        derivatives on the boundary are zero. This is a useful condition in
        solving some classes of differential equations.

        For example, invoking this function object on a 7x5 iterator that
        masks a region at an image corner (iterator is centered on the 2):
        returns the following neighborhood of values: The input to this
        function object is a neighborhood iterator. This boundary condition
        object is designed to be given as a template argument to a
        NeighborhoodIterator or any of the NeighborhoodIterator subclasses. 
        """
        _itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionIVF43_swiginit(self, _itkImageBoundaryConditionPython.new_itkZeroFluxNeumannBoundaryConditionIVF43(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkZeroFluxNeumannBoundaryConditionIVF43

# Register itkZeroFluxNeumannBoundaryConditionIVF43 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkZeroFluxNeumannBoundaryConditionIVF43_swigregister(itkZeroFluxNeumannBoundaryConditionIVF43)

class itkConstantBoundaryConditionICF2(itkImageBoundaryConditionICF2):
    r"""


    This boundary condition returns a constant value for out-of-bounds
    image pixels.

    For example, invoking this function object with a constant value of
    zero (the default) on each out-of-bounds element of a 7x5 iterator
    that masks a region at an image corner (iterator is centered on the
    2):          * * * * * * *           * * * * * * *           * * 1 2 3
    4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
    of the image boundary)           * * 4 4 6 7 8

    would produce the following neighborhood of values:          0 0 0 0 0
    0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
    5 5 6           0 0 4 4 6 7 8

    If you are using an image with Array as the pixel type, you will need
    to set the constant explicitly with an array of the appropriate
    length. This is also true if your image type is a VectorImage.

    See:   ImageBoundaryCondition
    {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
    Pixels Return Constant Value} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionICF2_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionICF2___call__)
    SetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionICF2_SetConstant)
    GetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionICF2_GetConstant)

    def __init__(self, *args):
        r"""
        __init__(itkConstantBoundaryConditionICF2 self) -> itkConstantBoundaryConditionICF2
        __init__(itkConstantBoundaryConditionICF2 self, itkConstantBoundaryConditionICF2 arg0) -> itkConstantBoundaryConditionICF2


        This boundary condition returns a constant value for out-of-bounds
        image pixels.

        For example, invoking this function object with a constant value of
        zero (the default) on each out-of-bounds element of a 7x5 iterator
        that masks a region at an image corner (iterator is centered on the
        2):          * * * * * * *           * * * * * * *           * * 1 2 3
        4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
        of the image boundary)           * * 4 4 6 7 8

        would produce the following neighborhood of values:          0 0 0 0 0
        0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
        5 5 6           0 0 4 4 6 7 8

        If you are using an image with Array as the pixel type, you will need
        to set the constant explicitly with an array of the appropriate
        length. This is also true if your image type is a VectorImage.

        See:   ImageBoundaryCondition
        {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
        Pixels Return Constant Value} 
        """
        _itkImageBoundaryConditionPython.itkConstantBoundaryConditionICF2_swiginit(self, _itkImageBoundaryConditionPython.new_itkConstantBoundaryConditionICF2(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkConstantBoundaryConditionICF2

# Register itkConstantBoundaryConditionICF2 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkConstantBoundaryConditionICF2_swigregister(itkConstantBoundaryConditionICF2)

class itkConstantBoundaryConditionICF3(itkImageBoundaryConditionICF3):
    r"""


    This boundary condition returns a constant value for out-of-bounds
    image pixels.

    For example, invoking this function object with a constant value of
    zero (the default) on each out-of-bounds element of a 7x5 iterator
    that masks a region at an image corner (iterator is centered on the
    2):          * * * * * * *           * * * * * * *           * * 1 2 3
    4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
    of the image boundary)           * * 4 4 6 7 8

    would produce the following neighborhood of values:          0 0 0 0 0
    0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
    5 5 6           0 0 4 4 6 7 8

    If you are using an image with Array as the pixel type, you will need
    to set the constant explicitly with an array of the appropriate
    length. This is also true if your image type is a VectorImage.

    See:   ImageBoundaryCondition
    {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
    Pixels Return Constant Value} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionICF3_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionICF3___call__)
    SetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionICF3_SetConstant)
    GetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionICF3_GetConstant)

    def __init__(self, *args):
        r"""
        __init__(itkConstantBoundaryConditionICF3 self) -> itkConstantBoundaryConditionICF3
        __init__(itkConstantBoundaryConditionICF3 self, itkConstantBoundaryConditionICF3 arg0) -> itkConstantBoundaryConditionICF3


        This boundary condition returns a constant value for out-of-bounds
        image pixels.

        For example, invoking this function object with a constant value of
        zero (the default) on each out-of-bounds element of a 7x5 iterator
        that masks a region at an image corner (iterator is centered on the
        2):          * * * * * * *           * * * * * * *           * * 1 2 3
        4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
        of the image boundary)           * * 4 4 6 7 8

        would produce the following neighborhood of values:          0 0 0 0 0
        0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
        5 5 6           0 0 4 4 6 7 8

        If you are using an image with Array as the pixel type, you will need
        to set the constant explicitly with an array of the appropriate
        length. This is also true if your image type is a VectorImage.

        See:   ImageBoundaryCondition
        {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
        Pixels Return Constant Value} 
        """
        _itkImageBoundaryConditionPython.itkConstantBoundaryConditionICF3_swiginit(self, _itkImageBoundaryConditionPython.new_itkConstantBoundaryConditionICF3(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkConstantBoundaryConditionICF3

# Register itkConstantBoundaryConditionICF3 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkConstantBoundaryConditionICF3_swigregister(itkConstantBoundaryConditionICF3)

class itkConstantBoundaryConditionICVF22(itkImageBoundaryConditionICVF22):
    r"""


    This boundary condition returns a constant value for out-of-bounds
    image pixels.

    For example, invoking this function object with a constant value of
    zero (the default) on each out-of-bounds element of a 7x5 iterator
    that masks a region at an image corner (iterator is centered on the
    2):          * * * * * * *           * * * * * * *           * * 1 2 3
    4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
    of the image boundary)           * * 4 4 6 7 8

    would produce the following neighborhood of values:          0 0 0 0 0
    0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
    5 5 6           0 0 4 4 6 7 8

    If you are using an image with Array as the pixel type, you will need
    to set the constant explicitly with an array of the appropriate
    length. This is also true if your image type is a VectorImage.

    See:   ImageBoundaryCondition
    {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
    Pixels Return Constant Value} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionICVF22_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionICVF22___call__)
    SetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionICVF22_SetConstant)
    GetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionICVF22_GetConstant)

    def __init__(self, *args):
        r"""
        __init__(itkConstantBoundaryConditionICVF22 self) -> itkConstantBoundaryConditionICVF22
        __init__(itkConstantBoundaryConditionICVF22 self, itkConstantBoundaryConditionICVF22 arg0) -> itkConstantBoundaryConditionICVF22


        This boundary condition returns a constant value for out-of-bounds
        image pixels.

        For example, invoking this function object with a constant value of
        zero (the default) on each out-of-bounds element of a 7x5 iterator
        that masks a region at an image corner (iterator is centered on the
        2):          * * * * * * *           * * * * * * *           * * 1 2 3
        4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
        of the image boundary)           * * 4 4 6 7 8

        would produce the following neighborhood of values:          0 0 0 0 0
        0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
        5 5 6           0 0 4 4 6 7 8

        If you are using an image with Array as the pixel type, you will need
        to set the constant explicitly with an array of the appropriate
        length. This is also true if your image type is a VectorImage.

        See:   ImageBoundaryCondition
        {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
        Pixels Return Constant Value} 
        """
        _itkImageBoundaryConditionPython.itkConstantBoundaryConditionICVF22_swiginit(self, _itkImageBoundaryConditionPython.new_itkConstantBoundaryConditionICVF22(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkConstantBoundaryConditionICVF22

# Register itkConstantBoundaryConditionICVF22 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkConstantBoundaryConditionICVF22_swigregister(itkConstantBoundaryConditionICVF22)

class itkConstantBoundaryConditionICVF23(itkImageBoundaryConditionICVF23):
    r"""


    This boundary condition returns a constant value for out-of-bounds
    image pixels.

    For example, invoking this function object with a constant value of
    zero (the default) on each out-of-bounds element of a 7x5 iterator
    that masks a region at an image corner (iterator is centered on the
    2):          * * * * * * *           * * * * * * *           * * 1 2 3
    4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
    of the image boundary)           * * 4 4 6 7 8

    would produce the following neighborhood of values:          0 0 0 0 0
    0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
    5 5 6           0 0 4 4 6 7 8

    If you are using an image with Array as the pixel type, you will need
    to set the constant explicitly with an array of the appropriate
    length. This is also true if your image type is a VectorImage.

    See:   ImageBoundaryCondition
    {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
    Pixels Return Constant Value} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionICVF23_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionICVF23___call__)
    SetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionICVF23_SetConstant)
    GetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionICVF23_GetConstant)

    def __init__(self, *args):
        r"""
        __init__(itkConstantBoundaryConditionICVF23 self) -> itkConstantBoundaryConditionICVF23
        __init__(itkConstantBoundaryConditionICVF23 self, itkConstantBoundaryConditionICVF23 arg0) -> itkConstantBoundaryConditionICVF23


        This boundary condition returns a constant value for out-of-bounds
        image pixels.

        For example, invoking this function object with a constant value of
        zero (the default) on each out-of-bounds element of a 7x5 iterator
        that masks a region at an image corner (iterator is centered on the
        2):          * * * * * * *           * * * * * * *           * * 1 2 3
        4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
        of the image boundary)           * * 4 4 6 7 8

        would produce the following neighborhood of values:          0 0 0 0 0
        0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
        5 5 6           0 0 4 4 6 7 8

        If you are using an image with Array as the pixel type, you will need
        to set the constant explicitly with an array of the appropriate
        length. This is also true if your image type is a VectorImage.

        See:   ImageBoundaryCondition
        {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
        Pixels Return Constant Value} 
        """
        _itkImageBoundaryConditionPython.itkConstantBoundaryConditionICVF23_swiginit(self, _itkImageBoundaryConditionPython.new_itkConstantBoundaryConditionICVF23(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkConstantBoundaryConditionICVF23

# Register itkConstantBoundaryConditionICVF23 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkConstantBoundaryConditionICVF23_swigregister(itkConstantBoundaryConditionICVF23)

class itkConstantBoundaryConditionICVF32(itkImageBoundaryConditionICVF32):
    r"""


    This boundary condition returns a constant value for out-of-bounds
    image pixels.

    For example, invoking this function object with a constant value of
    zero (the default) on each out-of-bounds element of a 7x5 iterator
    that masks a region at an image corner (iterator is centered on the
    2):          * * * * * * *           * * * * * * *           * * 1 2 3
    4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
    of the image boundary)           * * 4 4 6 7 8

    would produce the following neighborhood of values:          0 0 0 0 0
    0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
    5 5 6           0 0 4 4 6 7 8

    If you are using an image with Array as the pixel type, you will need
    to set the constant explicitly with an array of the appropriate
    length. This is also true if your image type is a VectorImage.

    See:   ImageBoundaryCondition
    {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
    Pixels Return Constant Value} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionICVF32_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionICVF32___call__)
    SetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionICVF32_SetConstant)
    GetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionICVF32_GetConstant)

    def __init__(self, *args):
        r"""
        __init__(itkConstantBoundaryConditionICVF32 self) -> itkConstantBoundaryConditionICVF32
        __init__(itkConstantBoundaryConditionICVF32 self, itkConstantBoundaryConditionICVF32 arg0) -> itkConstantBoundaryConditionICVF32


        This boundary condition returns a constant value for out-of-bounds
        image pixels.

        For example, invoking this function object with a constant value of
        zero (the default) on each out-of-bounds element of a 7x5 iterator
        that masks a region at an image corner (iterator is centered on the
        2):          * * * * * * *           * * * * * * *           * * 1 2 3
        4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
        of the image boundary)           * * 4 4 6 7 8

        would produce the following neighborhood of values:          0 0 0 0 0
        0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
        5 5 6           0 0 4 4 6 7 8

        If you are using an image with Array as the pixel type, you will need
        to set the constant explicitly with an array of the appropriate
        length. This is also true if your image type is a VectorImage.

        See:   ImageBoundaryCondition
        {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
        Pixels Return Constant Value} 
        """
        _itkImageBoundaryConditionPython.itkConstantBoundaryConditionICVF32_swiginit(self, _itkImageBoundaryConditionPython.new_itkConstantBoundaryConditionICVF32(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkConstantBoundaryConditionICVF32

# Register itkConstantBoundaryConditionICVF32 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkConstantBoundaryConditionICVF32_swigregister(itkConstantBoundaryConditionICVF32)

class itkConstantBoundaryConditionICVF33(itkImageBoundaryConditionICVF33):
    r"""


    This boundary condition returns a constant value for out-of-bounds
    image pixels.

    For example, invoking this function object with a constant value of
    zero (the default) on each out-of-bounds element of a 7x5 iterator
    that masks a region at an image corner (iterator is centered on the
    2):          * * * * * * *           * * * * * * *           * * 1 2 3
    4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
    of the image boundary)           * * 4 4 6 7 8

    would produce the following neighborhood of values:          0 0 0 0 0
    0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
    5 5 6           0 0 4 4 6 7 8

    If you are using an image with Array as the pixel type, you will need
    to set the constant explicitly with an array of the appropriate
    length. This is also true if your image type is a VectorImage.

    See:   ImageBoundaryCondition
    {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
    Pixels Return Constant Value} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionICVF33_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionICVF33___call__)
    SetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionICVF33_SetConstant)
    GetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionICVF33_GetConstant)

    def __init__(self, *args):
        r"""
        __init__(itkConstantBoundaryConditionICVF33 self) -> itkConstantBoundaryConditionICVF33
        __init__(itkConstantBoundaryConditionICVF33 self, itkConstantBoundaryConditionICVF33 arg0) -> itkConstantBoundaryConditionICVF33


        This boundary condition returns a constant value for out-of-bounds
        image pixels.

        For example, invoking this function object with a constant value of
        zero (the default) on each out-of-bounds element of a 7x5 iterator
        that masks a region at an image corner (iterator is centered on the
        2):          * * * * * * *           * * * * * * *           * * 1 2 3
        4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
        of the image boundary)           * * 4 4 6 7 8

        would produce the following neighborhood of values:          0 0 0 0 0
        0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
        5 5 6           0 0 4 4 6 7 8

        If you are using an image with Array as the pixel type, you will need
        to set the constant explicitly with an array of the appropriate
        length. This is also true if your image type is a VectorImage.

        See:   ImageBoundaryCondition
        {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
        Pixels Return Constant Value} 
        """
        _itkImageBoundaryConditionPython.itkConstantBoundaryConditionICVF33_swiginit(self, _itkImageBoundaryConditionPython.new_itkConstantBoundaryConditionICVF33(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkConstantBoundaryConditionICVF33

# Register itkConstantBoundaryConditionICVF33 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkConstantBoundaryConditionICVF33_swigregister(itkConstantBoundaryConditionICVF33)

class itkConstantBoundaryConditionICVF42(itkImageBoundaryConditionICVF42):
    r"""


    This boundary condition returns a constant value for out-of-bounds
    image pixels.

    For example, invoking this function object with a constant value of
    zero (the default) on each out-of-bounds element of a 7x5 iterator
    that masks a region at an image corner (iterator is centered on the
    2):          * * * * * * *           * * * * * * *           * * 1 2 3
    4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
    of the image boundary)           * * 4 4 6 7 8

    would produce the following neighborhood of values:          0 0 0 0 0
    0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
    5 5 6           0 0 4 4 6 7 8

    If you are using an image with Array as the pixel type, you will need
    to set the constant explicitly with an array of the appropriate
    length. This is also true if your image type is a VectorImage.

    See:   ImageBoundaryCondition
    {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
    Pixels Return Constant Value} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionICVF42_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionICVF42___call__)
    SetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionICVF42_SetConstant)
    GetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionICVF42_GetConstant)

    def __init__(self, *args):
        r"""
        __init__(itkConstantBoundaryConditionICVF42 self) -> itkConstantBoundaryConditionICVF42
        __init__(itkConstantBoundaryConditionICVF42 self, itkConstantBoundaryConditionICVF42 arg0) -> itkConstantBoundaryConditionICVF42


        This boundary condition returns a constant value for out-of-bounds
        image pixels.

        For example, invoking this function object with a constant value of
        zero (the default) on each out-of-bounds element of a 7x5 iterator
        that masks a region at an image corner (iterator is centered on the
        2):          * * * * * * *           * * * * * * *           * * 1 2 3
        4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
        of the image boundary)           * * 4 4 6 7 8

        would produce the following neighborhood of values:          0 0 0 0 0
        0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
        5 5 6           0 0 4 4 6 7 8

        If you are using an image with Array as the pixel type, you will need
        to set the constant explicitly with an array of the appropriate
        length. This is also true if your image type is a VectorImage.

        See:   ImageBoundaryCondition
        {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
        Pixels Return Constant Value} 
        """
        _itkImageBoundaryConditionPython.itkConstantBoundaryConditionICVF42_swiginit(self, _itkImageBoundaryConditionPython.new_itkConstantBoundaryConditionICVF42(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkConstantBoundaryConditionICVF42

# Register itkConstantBoundaryConditionICVF42 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkConstantBoundaryConditionICVF42_swigregister(itkConstantBoundaryConditionICVF42)

class itkConstantBoundaryConditionICVF43(itkImageBoundaryConditionICVF43):
    r"""


    This boundary condition returns a constant value for out-of-bounds
    image pixels.

    For example, invoking this function object with a constant value of
    zero (the default) on each out-of-bounds element of a 7x5 iterator
    that masks a region at an image corner (iterator is centered on the
    2):          * * * * * * *           * * * * * * *           * * 1 2 3
    4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
    of the image boundary)           * * 4 4 6 7 8

    would produce the following neighborhood of values:          0 0 0 0 0
    0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
    5 5 6           0 0 4 4 6 7 8

    If you are using an image with Array as the pixel type, you will need
    to set the constant explicitly with an array of the appropriate
    length. This is also true if your image type is a VectorImage.

    See:   ImageBoundaryCondition
    {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
    Pixels Return Constant Value} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionICVF43_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionICVF43___call__)
    SetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionICVF43_SetConstant)
    GetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionICVF43_GetConstant)

    def __init__(self, *args):
        r"""
        __init__(itkConstantBoundaryConditionICVF43 self) -> itkConstantBoundaryConditionICVF43
        __init__(itkConstantBoundaryConditionICVF43 self, itkConstantBoundaryConditionICVF43 arg0) -> itkConstantBoundaryConditionICVF43


        This boundary condition returns a constant value for out-of-bounds
        image pixels.

        For example, invoking this function object with a constant value of
        zero (the default) on each out-of-bounds element of a 7x5 iterator
        that masks a region at an image corner (iterator is centered on the
        2):          * * * * * * *           * * * * * * *           * * 1 2 3
        4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
        of the image boundary)           * * 4 4 6 7 8

        would produce the following neighborhood of values:          0 0 0 0 0
        0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
        5 5 6           0 0 4 4 6 7 8

        If you are using an image with Array as the pixel type, you will need
        to set the constant explicitly with an array of the appropriate
        length. This is also true if your image type is a VectorImage.

        See:   ImageBoundaryCondition
        {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
        Pixels Return Constant Value} 
        """
        _itkImageBoundaryConditionPython.itkConstantBoundaryConditionICVF43_swiginit(self, _itkImageBoundaryConditionPython.new_itkConstantBoundaryConditionICVF43(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkConstantBoundaryConditionICVF43

# Register itkConstantBoundaryConditionICVF43 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkConstantBoundaryConditionICVF43_swigregister(itkConstantBoundaryConditionICVF43)

class itkConstantBoundaryConditionID2(itkImageBoundaryConditionID2):
    r"""


    This boundary condition returns a constant value for out-of-bounds
    image pixels.

    For example, invoking this function object with a constant value of
    zero (the default) on each out-of-bounds element of a 7x5 iterator
    that masks a region at an image corner (iterator is centered on the
    2):          * * * * * * *           * * * * * * *           * * 1 2 3
    4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
    of the image boundary)           * * 4 4 6 7 8

    would produce the following neighborhood of values:          0 0 0 0 0
    0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
    5 5 6           0 0 4 4 6 7 8

    If you are using an image with Array as the pixel type, you will need
    to set the constant explicitly with an array of the appropriate
    length. This is also true if your image type is a VectorImage.

    See:   ImageBoundaryCondition
    {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
    Pixels Return Constant Value} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionID2_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionID2___call__)
    SetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionID2_SetConstant)
    GetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionID2_GetConstant)

    def __init__(self, *args):
        r"""
        __init__(itkConstantBoundaryConditionID2 self) -> itkConstantBoundaryConditionID2
        __init__(itkConstantBoundaryConditionID2 self, itkConstantBoundaryConditionID2 arg0) -> itkConstantBoundaryConditionID2


        This boundary condition returns a constant value for out-of-bounds
        image pixels.

        For example, invoking this function object with a constant value of
        zero (the default) on each out-of-bounds element of a 7x5 iterator
        that masks a region at an image corner (iterator is centered on the
        2):          * * * * * * *           * * * * * * *           * * 1 2 3
        4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
        of the image boundary)           * * 4 4 6 7 8

        would produce the following neighborhood of values:          0 0 0 0 0
        0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
        5 5 6           0 0 4 4 6 7 8

        If you are using an image with Array as the pixel type, you will need
        to set the constant explicitly with an array of the appropriate
        length. This is also true if your image type is a VectorImage.

        See:   ImageBoundaryCondition
        {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
        Pixels Return Constant Value} 
        """
        _itkImageBoundaryConditionPython.itkConstantBoundaryConditionID2_swiginit(self, _itkImageBoundaryConditionPython.new_itkConstantBoundaryConditionID2(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkConstantBoundaryConditionID2

# Register itkConstantBoundaryConditionID2 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkConstantBoundaryConditionID2_swigregister(itkConstantBoundaryConditionID2)

class itkConstantBoundaryConditionID3(itkImageBoundaryConditionID3):
    r"""


    This boundary condition returns a constant value for out-of-bounds
    image pixels.

    For example, invoking this function object with a constant value of
    zero (the default) on each out-of-bounds element of a 7x5 iterator
    that masks a region at an image corner (iterator is centered on the
    2):          * * * * * * *           * * * * * * *           * * 1 2 3
    4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
    of the image boundary)           * * 4 4 6 7 8

    would produce the following neighborhood of values:          0 0 0 0 0
    0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
    5 5 6           0 0 4 4 6 7 8

    If you are using an image with Array as the pixel type, you will need
    to set the constant explicitly with an array of the appropriate
    length. This is also true if your image type is a VectorImage.

    See:   ImageBoundaryCondition
    {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
    Pixels Return Constant Value} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionID3_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionID3___call__)
    SetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionID3_SetConstant)
    GetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionID3_GetConstant)

    def __init__(self, *args):
        r"""
        __init__(itkConstantBoundaryConditionID3 self) -> itkConstantBoundaryConditionID3
        __init__(itkConstantBoundaryConditionID3 self, itkConstantBoundaryConditionID3 arg0) -> itkConstantBoundaryConditionID3


        This boundary condition returns a constant value for out-of-bounds
        image pixels.

        For example, invoking this function object with a constant value of
        zero (the default) on each out-of-bounds element of a 7x5 iterator
        that masks a region at an image corner (iterator is centered on the
        2):          * * * * * * *           * * * * * * *           * * 1 2 3
        4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
        of the image boundary)           * * 4 4 6 7 8

        would produce the following neighborhood of values:          0 0 0 0 0
        0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
        5 5 6           0 0 4 4 6 7 8

        If you are using an image with Array as the pixel type, you will need
        to set the constant explicitly with an array of the appropriate
        length. This is also true if your image type is a VectorImage.

        See:   ImageBoundaryCondition
        {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
        Pixels Return Constant Value} 
        """
        _itkImageBoundaryConditionPython.itkConstantBoundaryConditionID3_swiginit(self, _itkImageBoundaryConditionPython.new_itkConstantBoundaryConditionID3(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkConstantBoundaryConditionID3

# Register itkConstantBoundaryConditionID3 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkConstantBoundaryConditionID3_swigregister(itkConstantBoundaryConditionID3)

class itkConstantBoundaryConditionIF2(itkImageBoundaryConditionIF2):
    r"""


    This boundary condition returns a constant value for out-of-bounds
    image pixels.

    For example, invoking this function object with a constant value of
    zero (the default) on each out-of-bounds element of a 7x5 iterator
    that masks a region at an image corner (iterator is centered on the
    2):          * * * * * * *           * * * * * * *           * * 1 2 3
    4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
    of the image boundary)           * * 4 4 6 7 8

    would produce the following neighborhood of values:          0 0 0 0 0
    0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
    5 5 6           0 0 4 4 6 7 8

    If you are using an image with Array as the pixel type, you will need
    to set the constant explicitly with an array of the appropriate
    length. This is also true if your image type is a VectorImage.

    See:   ImageBoundaryCondition
    {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
    Pixels Return Constant Value} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIF2_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIF2___call__)
    SetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIF2_SetConstant)
    GetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIF2_GetConstant)

    def __init__(self, *args):
        r"""
        __init__(itkConstantBoundaryConditionIF2 self) -> itkConstantBoundaryConditionIF2
        __init__(itkConstantBoundaryConditionIF2 self, itkConstantBoundaryConditionIF2 arg0) -> itkConstantBoundaryConditionIF2


        This boundary condition returns a constant value for out-of-bounds
        image pixels.

        For example, invoking this function object with a constant value of
        zero (the default) on each out-of-bounds element of a 7x5 iterator
        that masks a region at an image corner (iterator is centered on the
        2):          * * * * * * *           * * * * * * *           * * 1 2 3
        4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
        of the image boundary)           * * 4 4 6 7 8

        would produce the following neighborhood of values:          0 0 0 0 0
        0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
        5 5 6           0 0 4 4 6 7 8

        If you are using an image with Array as the pixel type, you will need
        to set the constant explicitly with an array of the appropriate
        length. This is also true if your image type is a VectorImage.

        See:   ImageBoundaryCondition
        {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
        Pixels Return Constant Value} 
        """
        _itkImageBoundaryConditionPython.itkConstantBoundaryConditionIF2_swiginit(self, _itkImageBoundaryConditionPython.new_itkConstantBoundaryConditionIF2(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkConstantBoundaryConditionIF2

# Register itkConstantBoundaryConditionIF2 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIF2_swigregister(itkConstantBoundaryConditionIF2)

class itkConstantBoundaryConditionIF3(itkImageBoundaryConditionIF3):
    r"""


    This boundary condition returns a constant value for out-of-bounds
    image pixels.

    For example, invoking this function object with a constant value of
    zero (the default) on each out-of-bounds element of a 7x5 iterator
    that masks a region at an image corner (iterator is centered on the
    2):          * * * * * * *           * * * * * * *           * * 1 2 3
    4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
    of the image boundary)           * * 4 4 6 7 8

    would produce the following neighborhood of values:          0 0 0 0 0
    0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
    5 5 6           0 0 4 4 6 7 8

    If you are using an image with Array as the pixel type, you will need
    to set the constant explicitly with an array of the appropriate
    length. This is also true if your image type is a VectorImage.

    See:   ImageBoundaryCondition
    {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
    Pixels Return Constant Value} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIF3_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIF3___call__)
    SetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIF3_SetConstant)
    GetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIF3_GetConstant)

    def __init__(self, *args):
        r"""
        __init__(itkConstantBoundaryConditionIF3 self) -> itkConstantBoundaryConditionIF3
        __init__(itkConstantBoundaryConditionIF3 self, itkConstantBoundaryConditionIF3 arg0) -> itkConstantBoundaryConditionIF3


        This boundary condition returns a constant value for out-of-bounds
        image pixels.

        For example, invoking this function object with a constant value of
        zero (the default) on each out-of-bounds element of a 7x5 iterator
        that masks a region at an image corner (iterator is centered on the
        2):          * * * * * * *           * * * * * * *           * * 1 2 3
        4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
        of the image boundary)           * * 4 4 6 7 8

        would produce the following neighborhood of values:          0 0 0 0 0
        0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
        5 5 6           0 0 4 4 6 7 8

        If you are using an image with Array as the pixel type, you will need
        to set the constant explicitly with an array of the appropriate
        length. This is also true if your image type is a VectorImage.

        See:   ImageBoundaryCondition
        {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
        Pixels Return Constant Value} 
        """
        _itkImageBoundaryConditionPython.itkConstantBoundaryConditionIF3_swiginit(self, _itkImageBoundaryConditionPython.new_itkConstantBoundaryConditionIF3(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkConstantBoundaryConditionIF3

# Register itkConstantBoundaryConditionIF3 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIF3_swigregister(itkConstantBoundaryConditionIF3)

class itkConstantBoundaryConditionIRGBAUC2(itkImageBoundaryConditionIRGBAUC2):
    r"""


    This boundary condition returns a constant value for out-of-bounds
    image pixels.

    For example, invoking this function object with a constant value of
    zero (the default) on each out-of-bounds element of a 7x5 iterator
    that masks a region at an image corner (iterator is centered on the
    2):          * * * * * * *           * * * * * * *           * * 1 2 3
    4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
    of the image boundary)           * * 4 4 6 7 8

    would produce the following neighborhood of values:          0 0 0 0 0
    0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
    5 5 6           0 0 4 4 6 7 8

    If you are using an image with Array as the pixel type, you will need
    to set the constant explicitly with an array of the appropriate
    length. This is also true if your image type is a VectorImage.

    See:   ImageBoundaryCondition
    {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
    Pixels Return Constant Value} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIRGBAUC2_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIRGBAUC2___call__)
    SetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIRGBAUC2_SetConstant)
    GetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIRGBAUC2_GetConstant)

    def __init__(self, *args):
        r"""
        __init__(itkConstantBoundaryConditionIRGBAUC2 self) -> itkConstantBoundaryConditionIRGBAUC2
        __init__(itkConstantBoundaryConditionIRGBAUC2 self, itkConstantBoundaryConditionIRGBAUC2 arg0) -> itkConstantBoundaryConditionIRGBAUC2


        This boundary condition returns a constant value for out-of-bounds
        image pixels.

        For example, invoking this function object with a constant value of
        zero (the default) on each out-of-bounds element of a 7x5 iterator
        that masks a region at an image corner (iterator is centered on the
        2):          * * * * * * *           * * * * * * *           * * 1 2 3
        4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
        of the image boundary)           * * 4 4 6 7 8

        would produce the following neighborhood of values:          0 0 0 0 0
        0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
        5 5 6           0 0 4 4 6 7 8

        If you are using an image with Array as the pixel type, you will need
        to set the constant explicitly with an array of the appropriate
        length. This is also true if your image type is a VectorImage.

        See:   ImageBoundaryCondition
        {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
        Pixels Return Constant Value} 
        """
        _itkImageBoundaryConditionPython.itkConstantBoundaryConditionIRGBAUC2_swiginit(self, _itkImageBoundaryConditionPython.new_itkConstantBoundaryConditionIRGBAUC2(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkConstantBoundaryConditionIRGBAUC2

# Register itkConstantBoundaryConditionIRGBAUC2 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIRGBAUC2_swigregister(itkConstantBoundaryConditionIRGBAUC2)

class itkConstantBoundaryConditionIRGBAUC3(itkImageBoundaryConditionIRGBAUC3):
    r"""


    This boundary condition returns a constant value for out-of-bounds
    image pixels.

    For example, invoking this function object with a constant value of
    zero (the default) on each out-of-bounds element of a 7x5 iterator
    that masks a region at an image corner (iterator is centered on the
    2):          * * * * * * *           * * * * * * *           * * 1 2 3
    4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
    of the image boundary)           * * 4 4 6 7 8

    would produce the following neighborhood of values:          0 0 0 0 0
    0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
    5 5 6           0 0 4 4 6 7 8

    If you are using an image with Array as the pixel type, you will need
    to set the constant explicitly with an array of the appropriate
    length. This is also true if your image type is a VectorImage.

    See:   ImageBoundaryCondition
    {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
    Pixels Return Constant Value} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIRGBAUC3_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIRGBAUC3___call__)
    SetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIRGBAUC3_SetConstant)
    GetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIRGBAUC3_GetConstant)

    def __init__(self, *args):
        r"""
        __init__(itkConstantBoundaryConditionIRGBAUC3 self) -> itkConstantBoundaryConditionIRGBAUC3
        __init__(itkConstantBoundaryConditionIRGBAUC3 self, itkConstantBoundaryConditionIRGBAUC3 arg0) -> itkConstantBoundaryConditionIRGBAUC3


        This boundary condition returns a constant value for out-of-bounds
        image pixels.

        For example, invoking this function object with a constant value of
        zero (the default) on each out-of-bounds element of a 7x5 iterator
        that masks a region at an image corner (iterator is centered on the
        2):          * * * * * * *           * * * * * * *           * * 1 2 3
        4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
        of the image boundary)           * * 4 4 6 7 8

        would produce the following neighborhood of values:          0 0 0 0 0
        0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
        5 5 6           0 0 4 4 6 7 8

        If you are using an image with Array as the pixel type, you will need
        to set the constant explicitly with an array of the appropriate
        length. This is also true if your image type is a VectorImage.

        See:   ImageBoundaryCondition
        {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
        Pixels Return Constant Value} 
        """
        _itkImageBoundaryConditionPython.itkConstantBoundaryConditionIRGBAUC3_swiginit(self, _itkImageBoundaryConditionPython.new_itkConstantBoundaryConditionIRGBAUC3(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkConstantBoundaryConditionIRGBAUC3

# Register itkConstantBoundaryConditionIRGBAUC3 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIRGBAUC3_swigregister(itkConstantBoundaryConditionIRGBAUC3)

class itkConstantBoundaryConditionIRGBUC2(itkImageBoundaryConditionIRGBUC2):
    r"""


    This boundary condition returns a constant value for out-of-bounds
    image pixels.

    For example, invoking this function object with a constant value of
    zero (the default) on each out-of-bounds element of a 7x5 iterator
    that masks a region at an image corner (iterator is centered on the
    2):          * * * * * * *           * * * * * * *           * * 1 2 3
    4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
    of the image boundary)           * * 4 4 6 7 8

    would produce the following neighborhood of values:          0 0 0 0 0
    0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
    5 5 6           0 0 4 4 6 7 8

    If you are using an image with Array as the pixel type, you will need
    to set the constant explicitly with an array of the appropriate
    length. This is also true if your image type is a VectorImage.

    See:   ImageBoundaryCondition
    {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
    Pixels Return Constant Value} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIRGBUC2_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIRGBUC2___call__)
    SetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIRGBUC2_SetConstant)
    GetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIRGBUC2_GetConstant)

    def __init__(self, *args):
        r"""
        __init__(itkConstantBoundaryConditionIRGBUC2 self) -> itkConstantBoundaryConditionIRGBUC2
        __init__(itkConstantBoundaryConditionIRGBUC2 self, itkConstantBoundaryConditionIRGBUC2 arg0) -> itkConstantBoundaryConditionIRGBUC2


        This boundary condition returns a constant value for out-of-bounds
        image pixels.

        For example, invoking this function object with a constant value of
        zero (the default) on each out-of-bounds element of a 7x5 iterator
        that masks a region at an image corner (iterator is centered on the
        2):          * * * * * * *           * * * * * * *           * * 1 2 3
        4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
        of the image boundary)           * * 4 4 6 7 8

        would produce the following neighborhood of values:          0 0 0 0 0
        0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
        5 5 6           0 0 4 4 6 7 8

        If you are using an image with Array as the pixel type, you will need
        to set the constant explicitly with an array of the appropriate
        length. This is also true if your image type is a VectorImage.

        See:   ImageBoundaryCondition
        {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
        Pixels Return Constant Value} 
        """
        _itkImageBoundaryConditionPython.itkConstantBoundaryConditionIRGBUC2_swiginit(self, _itkImageBoundaryConditionPython.new_itkConstantBoundaryConditionIRGBUC2(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkConstantBoundaryConditionIRGBUC2

# Register itkConstantBoundaryConditionIRGBUC2 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIRGBUC2_swigregister(itkConstantBoundaryConditionIRGBUC2)

class itkConstantBoundaryConditionIRGBUC3(itkImageBoundaryConditionIRGBUC3):
    r"""


    This boundary condition returns a constant value for out-of-bounds
    image pixels.

    For example, invoking this function object with a constant value of
    zero (the default) on each out-of-bounds element of a 7x5 iterator
    that masks a region at an image corner (iterator is centered on the
    2):          * * * * * * *           * * * * * * *           * * 1 2 3
    4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
    of the image boundary)           * * 4 4 6 7 8

    would produce the following neighborhood of values:          0 0 0 0 0
    0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
    5 5 6           0 0 4 4 6 7 8

    If you are using an image with Array as the pixel type, you will need
    to set the constant explicitly with an array of the appropriate
    length. This is also true if your image type is a VectorImage.

    See:   ImageBoundaryCondition
    {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
    Pixels Return Constant Value} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIRGBUC3_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIRGBUC3___call__)
    SetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIRGBUC3_SetConstant)
    GetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIRGBUC3_GetConstant)

    def __init__(self, *args):
        r"""
        __init__(itkConstantBoundaryConditionIRGBUC3 self) -> itkConstantBoundaryConditionIRGBUC3
        __init__(itkConstantBoundaryConditionIRGBUC3 self, itkConstantBoundaryConditionIRGBUC3 arg0) -> itkConstantBoundaryConditionIRGBUC3


        This boundary condition returns a constant value for out-of-bounds
        image pixels.

        For example, invoking this function object with a constant value of
        zero (the default) on each out-of-bounds element of a 7x5 iterator
        that masks a region at an image corner (iterator is centered on the
        2):          * * * * * * *           * * * * * * *           * * 1 2 3
        4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
        of the image boundary)           * * 4 4 6 7 8

        would produce the following neighborhood of values:          0 0 0 0 0
        0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
        5 5 6           0 0 4 4 6 7 8

        If you are using an image with Array as the pixel type, you will need
        to set the constant explicitly with an array of the appropriate
        length. This is also true if your image type is a VectorImage.

        See:   ImageBoundaryCondition
        {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
        Pixels Return Constant Value} 
        """
        _itkImageBoundaryConditionPython.itkConstantBoundaryConditionIRGBUC3_swiginit(self, _itkImageBoundaryConditionPython.new_itkConstantBoundaryConditionIRGBUC3(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkConstantBoundaryConditionIRGBUC3

# Register itkConstantBoundaryConditionIRGBUC3 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIRGBUC3_swigregister(itkConstantBoundaryConditionIRGBUC3)

class itkConstantBoundaryConditionISS2(itkImageBoundaryConditionISS2):
    r"""


    This boundary condition returns a constant value for out-of-bounds
    image pixels.

    For example, invoking this function object with a constant value of
    zero (the default) on each out-of-bounds element of a 7x5 iterator
    that masks a region at an image corner (iterator is centered on the
    2):          * * * * * * *           * * * * * * *           * * 1 2 3
    4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
    of the image boundary)           * * 4 4 6 7 8

    would produce the following neighborhood of values:          0 0 0 0 0
    0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
    5 5 6           0 0 4 4 6 7 8

    If you are using an image with Array as the pixel type, you will need
    to set the constant explicitly with an array of the appropriate
    length. This is also true if your image type is a VectorImage.

    See:   ImageBoundaryCondition
    {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
    Pixels Return Constant Value} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionISS2_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionISS2___call__)
    SetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionISS2_SetConstant)
    GetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionISS2_GetConstant)

    def __init__(self, *args):
        r"""
        __init__(itkConstantBoundaryConditionISS2 self) -> itkConstantBoundaryConditionISS2
        __init__(itkConstantBoundaryConditionISS2 self, itkConstantBoundaryConditionISS2 arg0) -> itkConstantBoundaryConditionISS2


        This boundary condition returns a constant value for out-of-bounds
        image pixels.

        For example, invoking this function object with a constant value of
        zero (the default) on each out-of-bounds element of a 7x5 iterator
        that masks a region at an image corner (iterator is centered on the
        2):          * * * * * * *           * * * * * * *           * * 1 2 3
        4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
        of the image boundary)           * * 4 4 6 7 8

        would produce the following neighborhood of values:          0 0 0 0 0
        0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
        5 5 6           0 0 4 4 6 7 8

        If you are using an image with Array as the pixel type, you will need
        to set the constant explicitly with an array of the appropriate
        length. This is also true if your image type is a VectorImage.

        See:   ImageBoundaryCondition
        {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
        Pixels Return Constant Value} 
        """
        _itkImageBoundaryConditionPython.itkConstantBoundaryConditionISS2_swiginit(self, _itkImageBoundaryConditionPython.new_itkConstantBoundaryConditionISS2(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkConstantBoundaryConditionISS2

# Register itkConstantBoundaryConditionISS2 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkConstantBoundaryConditionISS2_swigregister(itkConstantBoundaryConditionISS2)

class itkConstantBoundaryConditionISS3(itkImageBoundaryConditionISS3):
    r"""


    This boundary condition returns a constant value for out-of-bounds
    image pixels.

    For example, invoking this function object with a constant value of
    zero (the default) on each out-of-bounds element of a 7x5 iterator
    that masks a region at an image corner (iterator is centered on the
    2):          * * * * * * *           * * * * * * *           * * 1 2 3
    4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
    of the image boundary)           * * 4 4 6 7 8

    would produce the following neighborhood of values:          0 0 0 0 0
    0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
    5 5 6           0 0 4 4 6 7 8

    If you are using an image with Array as the pixel type, you will need
    to set the constant explicitly with an array of the appropriate
    length. This is also true if your image type is a VectorImage.

    See:   ImageBoundaryCondition
    {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
    Pixels Return Constant Value} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionISS3_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionISS3___call__)
    SetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionISS3_SetConstant)
    GetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionISS3_GetConstant)

    def __init__(self, *args):
        r"""
        __init__(itkConstantBoundaryConditionISS3 self) -> itkConstantBoundaryConditionISS3
        __init__(itkConstantBoundaryConditionISS3 self, itkConstantBoundaryConditionISS3 arg0) -> itkConstantBoundaryConditionISS3


        This boundary condition returns a constant value for out-of-bounds
        image pixels.

        For example, invoking this function object with a constant value of
        zero (the default) on each out-of-bounds element of a 7x5 iterator
        that masks a region at an image corner (iterator is centered on the
        2):          * * * * * * *           * * * * * * *           * * 1 2 3
        4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
        of the image boundary)           * * 4 4 6 7 8

        would produce the following neighborhood of values:          0 0 0 0 0
        0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
        5 5 6           0 0 4 4 6 7 8

        If you are using an image with Array as the pixel type, you will need
        to set the constant explicitly with an array of the appropriate
        length. This is also true if your image type is a VectorImage.

        See:   ImageBoundaryCondition
        {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
        Pixels Return Constant Value} 
        """
        _itkImageBoundaryConditionPython.itkConstantBoundaryConditionISS3_swiginit(self, _itkImageBoundaryConditionPython.new_itkConstantBoundaryConditionISS3(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkConstantBoundaryConditionISS3

# Register itkConstantBoundaryConditionISS3 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkConstantBoundaryConditionISS3_swigregister(itkConstantBoundaryConditionISS3)

class itkConstantBoundaryConditionIUC2(itkImageBoundaryConditionIUC2):
    r"""


    This boundary condition returns a constant value for out-of-bounds
    image pixels.

    For example, invoking this function object with a constant value of
    zero (the default) on each out-of-bounds element of a 7x5 iterator
    that masks a region at an image corner (iterator is centered on the
    2):          * * * * * * *           * * * * * * *           * * 1 2 3
    4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
    of the image boundary)           * * 4 4 6 7 8

    would produce the following neighborhood of values:          0 0 0 0 0
    0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
    5 5 6           0 0 4 4 6 7 8

    If you are using an image with Array as the pixel type, you will need
    to set the constant explicitly with an array of the appropriate
    length. This is also true if your image type is a VectorImage.

    See:   ImageBoundaryCondition
    {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
    Pixels Return Constant Value} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIUC2_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIUC2___call__)
    SetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIUC2_SetConstant)
    GetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIUC2_GetConstant)

    def __init__(self, *args):
        r"""
        __init__(itkConstantBoundaryConditionIUC2 self) -> itkConstantBoundaryConditionIUC2
        __init__(itkConstantBoundaryConditionIUC2 self, itkConstantBoundaryConditionIUC2 arg0) -> itkConstantBoundaryConditionIUC2


        This boundary condition returns a constant value for out-of-bounds
        image pixels.

        For example, invoking this function object with a constant value of
        zero (the default) on each out-of-bounds element of a 7x5 iterator
        that masks a region at an image corner (iterator is centered on the
        2):          * * * * * * *           * * * * * * *           * * 1 2 3
        4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
        of the image boundary)           * * 4 4 6 7 8

        would produce the following neighborhood of values:          0 0 0 0 0
        0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
        5 5 6           0 0 4 4 6 7 8

        If you are using an image with Array as the pixel type, you will need
        to set the constant explicitly with an array of the appropriate
        length. This is also true if your image type is a VectorImage.

        See:   ImageBoundaryCondition
        {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
        Pixels Return Constant Value} 
        """
        _itkImageBoundaryConditionPython.itkConstantBoundaryConditionIUC2_swiginit(self, _itkImageBoundaryConditionPython.new_itkConstantBoundaryConditionIUC2(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkConstantBoundaryConditionIUC2

# Register itkConstantBoundaryConditionIUC2 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIUC2_swigregister(itkConstantBoundaryConditionIUC2)

class itkConstantBoundaryConditionIUC3(itkImageBoundaryConditionIUC3):
    r"""


    This boundary condition returns a constant value for out-of-bounds
    image pixels.

    For example, invoking this function object with a constant value of
    zero (the default) on each out-of-bounds element of a 7x5 iterator
    that masks a region at an image corner (iterator is centered on the
    2):          * * * * * * *           * * * * * * *           * * 1 2 3
    4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
    of the image boundary)           * * 4 4 6 7 8

    would produce the following neighborhood of values:          0 0 0 0 0
    0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
    5 5 6           0 0 4 4 6 7 8

    If you are using an image with Array as the pixel type, you will need
    to set the constant explicitly with an array of the appropriate
    length. This is also true if your image type is a VectorImage.

    See:   ImageBoundaryCondition
    {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
    Pixels Return Constant Value} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIUC3_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIUC3___call__)
    SetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIUC3_SetConstant)
    GetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIUC3_GetConstant)

    def __init__(self, *args):
        r"""
        __init__(itkConstantBoundaryConditionIUC3 self) -> itkConstantBoundaryConditionIUC3
        __init__(itkConstantBoundaryConditionIUC3 self, itkConstantBoundaryConditionIUC3 arg0) -> itkConstantBoundaryConditionIUC3


        This boundary condition returns a constant value for out-of-bounds
        image pixels.

        For example, invoking this function object with a constant value of
        zero (the default) on each out-of-bounds element of a 7x5 iterator
        that masks a region at an image corner (iterator is centered on the
        2):          * * * * * * *           * * * * * * *           * * 1 2 3
        4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
        of the image boundary)           * * 4 4 6 7 8

        would produce the following neighborhood of values:          0 0 0 0 0
        0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
        5 5 6           0 0 4 4 6 7 8

        If you are using an image with Array as the pixel type, you will need
        to set the constant explicitly with an array of the appropriate
        length. This is also true if your image type is a VectorImage.

        See:   ImageBoundaryCondition
        {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
        Pixels Return Constant Value} 
        """
        _itkImageBoundaryConditionPython.itkConstantBoundaryConditionIUC3_swiginit(self, _itkImageBoundaryConditionPython.new_itkConstantBoundaryConditionIUC3(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkConstantBoundaryConditionIUC3

# Register itkConstantBoundaryConditionIUC3 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIUC3_swigregister(itkConstantBoundaryConditionIUC3)

class itkConstantBoundaryConditionIUS2(itkImageBoundaryConditionIUS2):
    r"""


    This boundary condition returns a constant value for out-of-bounds
    image pixels.

    For example, invoking this function object with a constant value of
    zero (the default) on each out-of-bounds element of a 7x5 iterator
    that masks a region at an image corner (iterator is centered on the
    2):          * * * * * * *           * * * * * * *           * * 1 2 3
    4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
    of the image boundary)           * * 4 4 6 7 8

    would produce the following neighborhood of values:          0 0 0 0 0
    0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
    5 5 6           0 0 4 4 6 7 8

    If you are using an image with Array as the pixel type, you will need
    to set the constant explicitly with an array of the appropriate
    length. This is also true if your image type is a VectorImage.

    See:   ImageBoundaryCondition
    {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
    Pixels Return Constant Value} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIUS2_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIUS2___call__)
    SetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIUS2_SetConstant)
    GetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIUS2_GetConstant)

    def __init__(self, *args):
        r"""
        __init__(itkConstantBoundaryConditionIUS2 self) -> itkConstantBoundaryConditionIUS2
        __init__(itkConstantBoundaryConditionIUS2 self, itkConstantBoundaryConditionIUS2 arg0) -> itkConstantBoundaryConditionIUS2


        This boundary condition returns a constant value for out-of-bounds
        image pixels.

        For example, invoking this function object with a constant value of
        zero (the default) on each out-of-bounds element of a 7x5 iterator
        that masks a region at an image corner (iterator is centered on the
        2):          * * * * * * *           * * * * * * *           * * 1 2 3
        4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
        of the image boundary)           * * 4 4 6 7 8

        would produce the following neighborhood of values:          0 0 0 0 0
        0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
        5 5 6           0 0 4 4 6 7 8

        If you are using an image with Array as the pixel type, you will need
        to set the constant explicitly with an array of the appropriate
        length. This is also true if your image type is a VectorImage.

        See:   ImageBoundaryCondition
        {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
        Pixels Return Constant Value} 
        """
        _itkImageBoundaryConditionPython.itkConstantBoundaryConditionIUS2_swiginit(self, _itkImageBoundaryConditionPython.new_itkConstantBoundaryConditionIUS2(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkConstantBoundaryConditionIUS2

# Register itkConstantBoundaryConditionIUS2 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIUS2_swigregister(itkConstantBoundaryConditionIUS2)

class itkConstantBoundaryConditionIUS3(itkImageBoundaryConditionIUS3):
    r"""


    This boundary condition returns a constant value for out-of-bounds
    image pixels.

    For example, invoking this function object with a constant value of
    zero (the default) on each out-of-bounds element of a 7x5 iterator
    that masks a region at an image corner (iterator is centered on the
    2):          * * * * * * *           * * * * * * *           * * 1 2 3
    4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
    of the image boundary)           * * 4 4 6 7 8

    would produce the following neighborhood of values:          0 0 0 0 0
    0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
    5 5 6           0 0 4 4 6 7 8

    If you are using an image with Array as the pixel type, you will need
    to set the constant explicitly with an array of the appropriate
    length. This is also true if your image type is a VectorImage.

    See:   ImageBoundaryCondition
    {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
    Pixels Return Constant Value} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIUS3_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIUS3___call__)
    SetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIUS3_SetConstant)
    GetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIUS3_GetConstant)

    def __init__(self, *args):
        r"""
        __init__(itkConstantBoundaryConditionIUS3 self) -> itkConstantBoundaryConditionIUS3
        __init__(itkConstantBoundaryConditionIUS3 self, itkConstantBoundaryConditionIUS3 arg0) -> itkConstantBoundaryConditionIUS3


        This boundary condition returns a constant value for out-of-bounds
        image pixels.

        For example, invoking this function object with a constant value of
        zero (the default) on each out-of-bounds element of a 7x5 iterator
        that masks a region at an image corner (iterator is centered on the
        2):          * * * * * * *           * * * * * * *           * * 1 2 3
        4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
        of the image boundary)           * * 4 4 6 7 8

        would produce the following neighborhood of values:          0 0 0 0 0
        0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
        5 5 6           0 0 4 4 6 7 8

        If you are using an image with Array as the pixel type, you will need
        to set the constant explicitly with an array of the appropriate
        length. This is also true if your image type is a VectorImage.

        See:   ImageBoundaryCondition
        {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
        Pixels Return Constant Value} 
        """
        _itkImageBoundaryConditionPython.itkConstantBoundaryConditionIUS3_swiginit(self, _itkImageBoundaryConditionPython.new_itkConstantBoundaryConditionIUS3(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkConstantBoundaryConditionIUS3

# Register itkConstantBoundaryConditionIUS3 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIUS3_swigregister(itkConstantBoundaryConditionIUS3)

class itkConstantBoundaryConditionIVF22(itkImageBoundaryConditionIVF22):
    r"""


    This boundary condition returns a constant value for out-of-bounds
    image pixels.

    For example, invoking this function object with a constant value of
    zero (the default) on each out-of-bounds element of a 7x5 iterator
    that masks a region at an image corner (iterator is centered on the
    2):          * * * * * * *           * * * * * * *           * * 1 2 3
    4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
    of the image boundary)           * * 4 4 6 7 8

    would produce the following neighborhood of values:          0 0 0 0 0
    0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
    5 5 6           0 0 4 4 6 7 8

    If you are using an image with Array as the pixel type, you will need
    to set the constant explicitly with an array of the appropriate
    length. This is also true if your image type is a VectorImage.

    See:   ImageBoundaryCondition
    {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
    Pixels Return Constant Value} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIVF22_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIVF22___call__)
    SetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIVF22_SetConstant)
    GetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIVF22_GetConstant)

    def __init__(self, *args):
        r"""
        __init__(itkConstantBoundaryConditionIVF22 self) -> itkConstantBoundaryConditionIVF22
        __init__(itkConstantBoundaryConditionIVF22 self, itkConstantBoundaryConditionIVF22 arg0) -> itkConstantBoundaryConditionIVF22


        This boundary condition returns a constant value for out-of-bounds
        image pixels.

        For example, invoking this function object with a constant value of
        zero (the default) on each out-of-bounds element of a 7x5 iterator
        that masks a region at an image corner (iterator is centered on the
        2):          * * * * * * *           * * * * * * *           * * 1 2 3
        4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
        of the image boundary)           * * 4 4 6 7 8

        would produce the following neighborhood of values:          0 0 0 0 0
        0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
        5 5 6           0 0 4 4 6 7 8

        If you are using an image with Array as the pixel type, you will need
        to set the constant explicitly with an array of the appropriate
        length. This is also true if your image type is a VectorImage.

        See:   ImageBoundaryCondition
        {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
        Pixels Return Constant Value} 
        """
        _itkImageBoundaryConditionPython.itkConstantBoundaryConditionIVF22_swiginit(self, _itkImageBoundaryConditionPython.new_itkConstantBoundaryConditionIVF22(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkConstantBoundaryConditionIVF22

# Register itkConstantBoundaryConditionIVF22 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIVF22_swigregister(itkConstantBoundaryConditionIVF22)

class itkConstantBoundaryConditionIVF23(itkImageBoundaryConditionIVF23):
    r"""


    This boundary condition returns a constant value for out-of-bounds
    image pixels.

    For example, invoking this function object with a constant value of
    zero (the default) on each out-of-bounds element of a 7x5 iterator
    that masks a region at an image corner (iterator is centered on the
    2):          * * * * * * *           * * * * * * *           * * 1 2 3
    4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
    of the image boundary)           * * 4 4 6 7 8

    would produce the following neighborhood of values:          0 0 0 0 0
    0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
    5 5 6           0 0 4 4 6 7 8

    If you are using an image with Array as the pixel type, you will need
    to set the constant explicitly with an array of the appropriate
    length. This is also true if your image type is a VectorImage.

    See:   ImageBoundaryCondition
    {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
    Pixels Return Constant Value} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIVF23_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIVF23___call__)
    SetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIVF23_SetConstant)
    GetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIVF23_GetConstant)

    def __init__(self, *args):
        r"""
        __init__(itkConstantBoundaryConditionIVF23 self) -> itkConstantBoundaryConditionIVF23
        __init__(itkConstantBoundaryConditionIVF23 self, itkConstantBoundaryConditionIVF23 arg0) -> itkConstantBoundaryConditionIVF23


        This boundary condition returns a constant value for out-of-bounds
        image pixels.

        For example, invoking this function object with a constant value of
        zero (the default) on each out-of-bounds element of a 7x5 iterator
        that masks a region at an image corner (iterator is centered on the
        2):          * * * * * * *           * * * * * * *           * * 1 2 3
        4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
        of the image boundary)           * * 4 4 6 7 8

        would produce the following neighborhood of values:          0 0 0 0 0
        0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
        5 5 6           0 0 4 4 6 7 8

        If you are using an image with Array as the pixel type, you will need
        to set the constant explicitly with an array of the appropriate
        length. This is also true if your image type is a VectorImage.

        See:   ImageBoundaryCondition
        {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
        Pixels Return Constant Value} 
        """
        _itkImageBoundaryConditionPython.itkConstantBoundaryConditionIVF23_swiginit(self, _itkImageBoundaryConditionPython.new_itkConstantBoundaryConditionIVF23(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkConstantBoundaryConditionIVF23

# Register itkConstantBoundaryConditionIVF23 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIVF23_swigregister(itkConstantBoundaryConditionIVF23)

class itkConstantBoundaryConditionIVF32(itkImageBoundaryConditionIVF32):
    r"""


    This boundary condition returns a constant value for out-of-bounds
    image pixels.

    For example, invoking this function object with a constant value of
    zero (the default) on each out-of-bounds element of a 7x5 iterator
    that masks a region at an image corner (iterator is centered on the
    2):          * * * * * * *           * * * * * * *           * * 1 2 3
    4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
    of the image boundary)           * * 4 4 6 7 8

    would produce the following neighborhood of values:          0 0 0 0 0
    0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
    5 5 6           0 0 4 4 6 7 8

    If you are using an image with Array as the pixel type, you will need
    to set the constant explicitly with an array of the appropriate
    length. This is also true if your image type is a VectorImage.

    See:   ImageBoundaryCondition
    {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
    Pixels Return Constant Value} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIVF32_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIVF32___call__)
    SetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIVF32_SetConstant)
    GetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIVF32_GetConstant)

    def __init__(self, *args):
        r"""
        __init__(itkConstantBoundaryConditionIVF32 self) -> itkConstantBoundaryConditionIVF32
        __init__(itkConstantBoundaryConditionIVF32 self, itkConstantBoundaryConditionIVF32 arg0) -> itkConstantBoundaryConditionIVF32


        This boundary condition returns a constant value for out-of-bounds
        image pixels.

        For example, invoking this function object with a constant value of
        zero (the default) on each out-of-bounds element of a 7x5 iterator
        that masks a region at an image corner (iterator is centered on the
        2):          * * * * * * *           * * * * * * *           * * 1 2 3
        4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
        of the image boundary)           * * 4 4 6 7 8

        would produce the following neighborhood of values:          0 0 0 0 0
        0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
        5 5 6           0 0 4 4 6 7 8

        If you are using an image with Array as the pixel type, you will need
        to set the constant explicitly with an array of the appropriate
        length. This is also true if your image type is a VectorImage.

        See:   ImageBoundaryCondition
        {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
        Pixels Return Constant Value} 
        """
        _itkImageBoundaryConditionPython.itkConstantBoundaryConditionIVF32_swiginit(self, _itkImageBoundaryConditionPython.new_itkConstantBoundaryConditionIVF32(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkConstantBoundaryConditionIVF32

# Register itkConstantBoundaryConditionIVF32 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIVF32_swigregister(itkConstantBoundaryConditionIVF32)

class itkConstantBoundaryConditionIVF33(itkImageBoundaryConditionIVF33):
    r"""


    This boundary condition returns a constant value for out-of-bounds
    image pixels.

    For example, invoking this function object with a constant value of
    zero (the default) on each out-of-bounds element of a 7x5 iterator
    that masks a region at an image corner (iterator is centered on the
    2):          * * * * * * *           * * * * * * *           * * 1 2 3
    4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
    of the image boundary)           * * 4 4 6 7 8

    would produce the following neighborhood of values:          0 0 0 0 0
    0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
    5 5 6           0 0 4 4 6 7 8

    If you are using an image with Array as the pixel type, you will need
    to set the constant explicitly with an array of the appropriate
    length. This is also true if your image type is a VectorImage.

    See:   ImageBoundaryCondition
    {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
    Pixels Return Constant Value} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIVF33_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIVF33___call__)
    SetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIVF33_SetConstant)
    GetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIVF33_GetConstant)

    def __init__(self, *args):
        r"""
        __init__(itkConstantBoundaryConditionIVF33 self) -> itkConstantBoundaryConditionIVF33
        __init__(itkConstantBoundaryConditionIVF33 self, itkConstantBoundaryConditionIVF33 arg0) -> itkConstantBoundaryConditionIVF33


        This boundary condition returns a constant value for out-of-bounds
        image pixels.

        For example, invoking this function object with a constant value of
        zero (the default) on each out-of-bounds element of a 7x5 iterator
        that masks a region at an image corner (iterator is centered on the
        2):          * * * * * * *           * * * * * * *           * * 1 2 3
        4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
        of the image boundary)           * * 4 4 6 7 8

        would produce the following neighborhood of values:          0 0 0 0 0
        0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
        5 5 6           0 0 4 4 6 7 8

        If you are using an image with Array as the pixel type, you will need
        to set the constant explicitly with an array of the appropriate
        length. This is also true if your image type is a VectorImage.

        See:   ImageBoundaryCondition
        {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
        Pixels Return Constant Value} 
        """
        _itkImageBoundaryConditionPython.itkConstantBoundaryConditionIVF33_swiginit(self, _itkImageBoundaryConditionPython.new_itkConstantBoundaryConditionIVF33(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkConstantBoundaryConditionIVF33

# Register itkConstantBoundaryConditionIVF33 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIVF33_swigregister(itkConstantBoundaryConditionIVF33)

class itkConstantBoundaryConditionIVF42(itkImageBoundaryConditionIVF42):
    r"""


    This boundary condition returns a constant value for out-of-bounds
    image pixels.

    For example, invoking this function object with a constant value of
    zero (the default) on each out-of-bounds element of a 7x5 iterator
    that masks a region at an image corner (iterator is centered on the
    2):          * * * * * * *           * * * * * * *           * * 1 2 3
    4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
    of the image boundary)           * * 4 4 6 7 8

    would produce the following neighborhood of values:          0 0 0 0 0
    0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
    5 5 6           0 0 4 4 6 7 8

    If you are using an image with Array as the pixel type, you will need
    to set the constant explicitly with an array of the appropriate
    length. This is also true if your image type is a VectorImage.

    See:   ImageBoundaryCondition
    {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
    Pixels Return Constant Value} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIVF42_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIVF42___call__)
    SetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIVF42_SetConstant)
    GetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIVF42_GetConstant)

    def __init__(self, *args):
        r"""
        __init__(itkConstantBoundaryConditionIVF42 self) -> itkConstantBoundaryConditionIVF42
        __init__(itkConstantBoundaryConditionIVF42 self, itkConstantBoundaryConditionIVF42 arg0) -> itkConstantBoundaryConditionIVF42


        This boundary condition returns a constant value for out-of-bounds
        image pixels.

        For example, invoking this function object with a constant value of
        zero (the default) on each out-of-bounds element of a 7x5 iterator
        that masks a region at an image corner (iterator is centered on the
        2):          * * * * * * *           * * * * * * *           * * 1 2 3
        4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
        of the image boundary)           * * 4 4 6 7 8

        would produce the following neighborhood of values:          0 0 0 0 0
        0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
        5 5 6           0 0 4 4 6 7 8

        If you are using an image with Array as the pixel type, you will need
        to set the constant explicitly with an array of the appropriate
        length. This is also true if your image type is a VectorImage.

        See:   ImageBoundaryCondition
        {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
        Pixels Return Constant Value} 
        """
        _itkImageBoundaryConditionPython.itkConstantBoundaryConditionIVF42_swiginit(self, _itkImageBoundaryConditionPython.new_itkConstantBoundaryConditionIVF42(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkConstantBoundaryConditionIVF42

# Register itkConstantBoundaryConditionIVF42 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIVF42_swigregister(itkConstantBoundaryConditionIVF42)

class itkConstantBoundaryConditionIVF43(itkImageBoundaryConditionIVF43):
    r"""


    This boundary condition returns a constant value for out-of-bounds
    image pixels.

    For example, invoking this function object with a constant value of
    zero (the default) on each out-of-bounds element of a 7x5 iterator
    that masks a region at an image corner (iterator is centered on the
    2):          * * * * * * *           * * * * * * *           * * 1 2 3
    4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
    of the image boundary)           * * 4 4 6 7 8

    would produce the following neighborhood of values:          0 0 0 0 0
    0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
    5 5 6           0 0 4 4 6 7 8

    If you are using an image with Array as the pixel type, you will need
    to set the constant explicitly with an array of the appropriate
    length. This is also true if your image type is a VectorImage.

    See:   ImageBoundaryCondition
    {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
    Pixels Return Constant Value} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Print = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIVF43_Print)
    __call__ = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIVF43___call__)
    SetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIVF43_SetConstant)
    GetConstant = _swig_new_instance_method(_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIVF43_GetConstant)

    def __init__(self, *args):
        r"""
        __init__(itkConstantBoundaryConditionIVF43 self) -> itkConstantBoundaryConditionIVF43
        __init__(itkConstantBoundaryConditionIVF43 self, itkConstantBoundaryConditionIVF43 arg0) -> itkConstantBoundaryConditionIVF43


        This boundary condition returns a constant value for out-of-bounds
        image pixels.

        For example, invoking this function object with a constant value of
        zero (the default) on each out-of-bounds element of a 7x5 iterator
        that masks a region at an image corner (iterator is centered on the
        2):          * * * * * * *           * * * * * * *           * * 1 2 3
        4 5  (where * denotes pixels that lie           * * 3 3 5 5 6 outside
        of the image boundary)           * * 4 4 6 7 8

        would produce the following neighborhood of values:          0 0 0 0 0
        0 0           0 0 0 0 0 0 0           0 0 1 2 3 4 5           0 0 3 3
        5 5 6           0 0 4 4 6 7 8

        If you are using an image with Array as the pixel type, you will need
        to set the constant explicitly with an array of the appropriate
        length. This is also true if your image type is a VectorImage.

        See:   ImageBoundaryCondition
        {Core/Common/OutOfBoundsPixelsReturnConstValue,Make Out Of Bounds
        Pixels Return Constant Value} 
        """
        _itkImageBoundaryConditionPython.itkConstantBoundaryConditionIVF43_swiginit(self, _itkImageBoundaryConditionPython.new_itkConstantBoundaryConditionIVF43(*args))
    __swig_destroy__ = _itkImageBoundaryConditionPython.delete_itkConstantBoundaryConditionIVF43

# Register itkConstantBoundaryConditionIVF43 in _itkImageBoundaryConditionPython:
_itkImageBoundaryConditionPython.itkConstantBoundaryConditionIVF43_swigregister(itkConstantBoundaryConditionIVF43)



