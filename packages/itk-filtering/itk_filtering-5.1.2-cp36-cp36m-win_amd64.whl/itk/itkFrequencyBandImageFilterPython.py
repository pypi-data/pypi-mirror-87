# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageFrequencyPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkFrequencyBandImageFilterPython
else:
    import _itkFrequencyBandImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkFrequencyBandImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkFrequencyBandImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkUnaryFrequencyDomainFilterPython
import itk.itkInPlaceImageFilterBPython
import itk.itkImageToImageFilterBPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkImagePython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.ITKCommonBasePython
import itk.itkPointPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkRGBAPixelPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython

def itkFrequencyBandImageFilterICF2_New():
    return itkFrequencyBandImageFilterICF2.New()

class itkFrequencyBandImageFilterICF2(itk.itkUnaryFrequencyDomainFilterPython.itkUnaryFrequencyDomainFilterICF2):
    r"""


    Performs a frequency band filtering on a frequency domain image.

    The default filtering functor filters in the range
    LowFrequencyThreshold and HighFrequencyThreshold - pass band between
    threshold frequencies [0,0.5] Hz or [0, pi] radians, where both
    boundary values also pass (equivalent to SetPassBand(true,true)). A
    pass band sets to zero any value outside the defined range, and let
    pass without modification the input image inside the band.

    Instead, a stop band can be set between the threshold values. In this
    case, the delimited band acts as a stop band, setting values to zero
    in this range, and does not modify input image values outside this
    range. Set a stop band using SetPassBand(false), but it is clearer to
    use SetStopBand(bool, bool) that also control behaviour at band
    boundaries.

    The boundaries of the bands are controlled with
    SetPassLow(High)FrequencyThreshold(bool). The default is to let pass
    low and high boundaries. Also, SetPassBand(true, false), will let pass
    low boundary/threshold, and stop the high value.

    This filter derives from UnaryFrequencyDomainFilter and implements its
    own custom functor. If a different functor is set, the normal
    functionality of this filter will be lost.

    See:   UnaryFrequencyDomainFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2___New_orig__)
    Clone = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_Clone)
    GetLowFrequencyThreshold = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_GetLowFrequencyThreshold)
    SetLowFrequencyThreshold = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_SetLowFrequencyThreshold)
    SetLowFrequencyThresholdInRadians = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_SetLowFrequencyThresholdInRadians)
    GetHighFrequencyThreshold = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_GetHighFrequencyThreshold)
    SetHighFrequencyThreshold = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_SetHighFrequencyThreshold)
    SetHighFrequencyThresholdInRadians = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_SetHighFrequencyThresholdInRadians)
    SetFrequencyThresholds = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_SetFrequencyThresholds)
    SetFrequencyThresholdsInRadians = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_SetFrequencyThresholdsInRadians)
    SetPassLowFrequencyThreshold = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_SetPassLowFrequencyThreshold)
    GetPassLowFrequencyThreshold = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_GetPassLowFrequencyThreshold)
    PassLowFrequencyThresholdOn = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_PassLowFrequencyThresholdOn)
    PassLowFrequencyThresholdOff = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_PassLowFrequencyThresholdOff)
    SetPassHighFrequencyThreshold = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_SetPassHighFrequencyThreshold)
    GetPassHighFrequencyThreshold = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_GetPassHighFrequencyThreshold)
    PassHighFrequencyThresholdOn = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_PassHighFrequencyThresholdOn)
    PassHighFrequencyThresholdOff = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_PassHighFrequencyThresholdOff)
    GetPassBand = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_GetPassBand)
    PassBandOn = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_PassBandOn)
    PassBandOff = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_PassBandOff)
    SetPassBand = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_SetPassBand)
    SetStopBand = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_SetStopBand)
    SetRadialBand = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_SetRadialBand)
    GetRadialBand = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_GetRadialBand)
    RadialBandOn = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_RadialBandOn)
    RadialBandOff = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_RadialBandOff)
    SetPassNegativeLowFrequencyThreshold = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_SetPassNegativeLowFrequencyThreshold)
    GetPassNegativeLowFrequencyThreshold = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_GetPassNegativeLowFrequencyThreshold)
    PassNegativeLowFrequencyThresholdOn = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_PassNegativeLowFrequencyThresholdOn)
    PassNegativeLowFrequencyThresholdOff = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_PassNegativeLowFrequencyThresholdOff)
    SetPassNegativeHighFrequencyThreshold = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_SetPassNegativeHighFrequencyThreshold)
    GetPassNegativeHighFrequencyThreshold = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_GetPassNegativeHighFrequencyThreshold)
    PassNegativeHighFrequencyThresholdOn = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_PassNegativeHighFrequencyThresholdOn)
    PassNegativeHighFrequencyThresholdOff = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_PassNegativeHighFrequencyThresholdOff)
    __swig_destroy__ = _itkFrequencyBandImageFilterPython.delete_itkFrequencyBandImageFilterICF2
    cast = _swig_new_static_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_cast)

    def New(*args, **kargs):
        """New() -> itkFrequencyBandImageFilterICF2

        Create a new object of the class itkFrequencyBandImageFilterICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyBandImageFilterICF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFrequencyBandImageFilterICF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFrequencyBandImageFilterICF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFrequencyBandImageFilterICF2 in _itkFrequencyBandImageFilterPython:
_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_swigregister(itkFrequencyBandImageFilterICF2)
itkFrequencyBandImageFilterICF2___New_orig__ = _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2___New_orig__
itkFrequencyBandImageFilterICF2_cast = _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_cast


def itkFrequencyBandImageFilterICF3_New():
    return itkFrequencyBandImageFilterICF3.New()

class itkFrequencyBandImageFilterICF3(itk.itkUnaryFrequencyDomainFilterPython.itkUnaryFrequencyDomainFilterICF3):
    r"""


    Performs a frequency band filtering on a frequency domain image.

    The default filtering functor filters in the range
    LowFrequencyThreshold and HighFrequencyThreshold - pass band between
    threshold frequencies [0,0.5] Hz or [0, pi] radians, where both
    boundary values also pass (equivalent to SetPassBand(true,true)). A
    pass band sets to zero any value outside the defined range, and let
    pass without modification the input image inside the band.

    Instead, a stop band can be set between the threshold values. In this
    case, the delimited band acts as a stop band, setting values to zero
    in this range, and does not modify input image values outside this
    range. Set a stop band using SetPassBand(false), but it is clearer to
    use SetStopBand(bool, bool) that also control behaviour at band
    boundaries.

    The boundaries of the bands are controlled with
    SetPassLow(High)FrequencyThreshold(bool). The default is to let pass
    low and high boundaries. Also, SetPassBand(true, false), will let pass
    low boundary/threshold, and stop the high value.

    This filter derives from UnaryFrequencyDomainFilter and implements its
    own custom functor. If a different functor is set, the normal
    functionality of this filter will be lost.

    See:   UnaryFrequencyDomainFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3___New_orig__)
    Clone = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_Clone)
    GetLowFrequencyThreshold = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_GetLowFrequencyThreshold)
    SetLowFrequencyThreshold = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_SetLowFrequencyThreshold)
    SetLowFrequencyThresholdInRadians = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_SetLowFrequencyThresholdInRadians)
    GetHighFrequencyThreshold = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_GetHighFrequencyThreshold)
    SetHighFrequencyThreshold = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_SetHighFrequencyThreshold)
    SetHighFrequencyThresholdInRadians = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_SetHighFrequencyThresholdInRadians)
    SetFrequencyThresholds = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_SetFrequencyThresholds)
    SetFrequencyThresholdsInRadians = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_SetFrequencyThresholdsInRadians)
    SetPassLowFrequencyThreshold = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_SetPassLowFrequencyThreshold)
    GetPassLowFrequencyThreshold = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_GetPassLowFrequencyThreshold)
    PassLowFrequencyThresholdOn = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_PassLowFrequencyThresholdOn)
    PassLowFrequencyThresholdOff = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_PassLowFrequencyThresholdOff)
    SetPassHighFrequencyThreshold = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_SetPassHighFrequencyThreshold)
    GetPassHighFrequencyThreshold = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_GetPassHighFrequencyThreshold)
    PassHighFrequencyThresholdOn = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_PassHighFrequencyThresholdOn)
    PassHighFrequencyThresholdOff = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_PassHighFrequencyThresholdOff)
    GetPassBand = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_GetPassBand)
    PassBandOn = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_PassBandOn)
    PassBandOff = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_PassBandOff)
    SetPassBand = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_SetPassBand)
    SetStopBand = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_SetStopBand)
    SetRadialBand = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_SetRadialBand)
    GetRadialBand = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_GetRadialBand)
    RadialBandOn = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_RadialBandOn)
    RadialBandOff = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_RadialBandOff)
    SetPassNegativeLowFrequencyThreshold = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_SetPassNegativeLowFrequencyThreshold)
    GetPassNegativeLowFrequencyThreshold = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_GetPassNegativeLowFrequencyThreshold)
    PassNegativeLowFrequencyThresholdOn = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_PassNegativeLowFrequencyThresholdOn)
    PassNegativeLowFrequencyThresholdOff = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_PassNegativeLowFrequencyThresholdOff)
    SetPassNegativeHighFrequencyThreshold = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_SetPassNegativeHighFrequencyThreshold)
    GetPassNegativeHighFrequencyThreshold = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_GetPassNegativeHighFrequencyThreshold)
    PassNegativeHighFrequencyThresholdOn = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_PassNegativeHighFrequencyThresholdOn)
    PassNegativeHighFrequencyThresholdOff = _swig_new_instance_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_PassNegativeHighFrequencyThresholdOff)
    __swig_destroy__ = _itkFrequencyBandImageFilterPython.delete_itkFrequencyBandImageFilterICF3
    cast = _swig_new_static_method(_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_cast)

    def New(*args, **kargs):
        """New() -> itkFrequencyBandImageFilterICF3

        Create a new object of the class itkFrequencyBandImageFilterICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyBandImageFilterICF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFrequencyBandImageFilterICF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFrequencyBandImageFilterICF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFrequencyBandImageFilterICF3 in _itkFrequencyBandImageFilterPython:
_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_swigregister(itkFrequencyBandImageFilterICF3)
itkFrequencyBandImageFilterICF3___New_orig__ = _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3___New_orig__
itkFrequencyBandImageFilterICF3_cast = _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def frequency_band_image_filter(*args, **kwargs):
    """Procedural interface for FrequencyBandImageFilter"""
    import itk
    instance = itk.FrequencyBandImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def frequency_band_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.FrequencyBandImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.FrequencyBandImageFilter.values()[0]
    else:
        filter_object = itk.FrequencyBandImageFilter

    frequency_band_image_filter.__doc__ = filter_object.__doc__
    frequency_band_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    frequency_band_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.FrequencyBandImageFilter, itkTemplate.itkTemplate):
        frequency_band_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        frequency_band_image_filter.__doc__ += "\n"
        frequency_band_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        frequency_band_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



