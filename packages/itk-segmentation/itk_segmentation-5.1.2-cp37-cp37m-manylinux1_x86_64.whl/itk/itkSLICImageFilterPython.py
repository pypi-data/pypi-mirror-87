# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKSuperPixelPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkSLICImageFilterPython
else:
    import _itkSLICImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkSLICImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkSLICImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkImageSourcePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkCovariantVectorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
class itkSLICImageFilterID2IUL2_Superclass(itk.itkImageSourcePython.itkImageSourceIUL2):
    r"""Proxy of C++ itkSLICImageFilterID2IUL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterID2IUL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_Superclass_cast)

# Register itkSLICImageFilterID2IUL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_Superclass_swigregister(itkSLICImageFilterID2IUL2_Superclass)
itkSLICImageFilterID2IUL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_Superclass_cast

class itkSLICImageFilterID2IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterID2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterID2IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_Superclass_cast)

# Register itkSLICImageFilterID2IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_Superclass_swigregister(itkSLICImageFilterID2IUS2_Superclass)
itkSLICImageFilterID2IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_Superclass_cast

class itkSLICImageFilterID3IUL3_Superclass(itk.itkImageSourcePython.itkImageSourceIUL3):
    r"""Proxy of C++ itkSLICImageFilterID3IUL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterID3IUL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_Superclass_cast)

# Register itkSLICImageFilterID3IUL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_Superclass_swigregister(itkSLICImageFilterID3IUL3_Superclass)
itkSLICImageFilterID3IUL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_Superclass_cast

class itkSLICImageFilterID3IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterID3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterID3IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_Superclass_cast)

# Register itkSLICImageFilterID3IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_Superclass_swigregister(itkSLICImageFilterID3IUS3_Superclass)
itkSLICImageFilterID3IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_Superclass_cast

class itkSLICImageFilterIF2IUL2_Superclass(itk.itkImageSourcePython.itkImageSourceIUL2):
    r"""Proxy of C++ itkSLICImageFilterIF2IUL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIF2IUL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_Superclass_cast)

# Register itkSLICImageFilterIF2IUL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_Superclass_swigregister(itkSLICImageFilterIF2IUL2_Superclass)
itkSLICImageFilterIF2IUL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_Superclass_cast

class itkSLICImageFilterIF2IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterIF2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIF2IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_cast)

# Register itkSLICImageFilterIF2IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_swigregister(itkSLICImageFilterIF2IUS2_Superclass)
itkSLICImageFilterIF2IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_cast

class itkSLICImageFilterIF3IUL3_Superclass(itk.itkImageSourcePython.itkImageSourceIUL3):
    r"""Proxy of C++ itkSLICImageFilterIF3IUL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIF3IUL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_Superclass_cast)

# Register itkSLICImageFilterIF3IUL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_Superclass_swigregister(itkSLICImageFilterIF3IUL3_Superclass)
itkSLICImageFilterIF3IUL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_Superclass_cast

class itkSLICImageFilterIF3IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterIF3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIF3IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_cast)

# Register itkSLICImageFilterIF3IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_swigregister(itkSLICImageFilterIF3IUS3_Superclass)
itkSLICImageFilterIF3IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_cast

class itkSLICImageFilterISS2IUL2_Superclass(itk.itkImageSourcePython.itkImageSourceIUL2):
    r"""Proxy of C++ itkSLICImageFilterISS2IUL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterISS2IUL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_Superclass_cast)

# Register itkSLICImageFilterISS2IUL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_Superclass_swigregister(itkSLICImageFilterISS2IUL2_Superclass)
itkSLICImageFilterISS2IUL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_Superclass_cast

class itkSLICImageFilterISS2IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterISS2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterISS2IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_cast)

# Register itkSLICImageFilterISS2IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_swigregister(itkSLICImageFilterISS2IUS2_Superclass)
itkSLICImageFilterISS2IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_cast

class itkSLICImageFilterISS3IUL3_Superclass(itk.itkImageSourcePython.itkImageSourceIUL3):
    r"""Proxy of C++ itkSLICImageFilterISS3IUL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterISS3IUL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_Superclass_cast)

# Register itkSLICImageFilterISS3IUL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_Superclass_swigregister(itkSLICImageFilterISS3IUL3_Superclass)
itkSLICImageFilterISS3IUL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_Superclass_cast

class itkSLICImageFilterISS3IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterISS3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterISS3IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_cast)

# Register itkSLICImageFilterISS3IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_swigregister(itkSLICImageFilterISS3IUS3_Superclass)
itkSLICImageFilterISS3IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_cast

class itkSLICImageFilterIUC2IUL2_Superclass(itk.itkImageSourcePython.itkImageSourceIUL2):
    r"""Proxy of C++ itkSLICImageFilterIUC2IUL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUC2IUL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_Superclass_cast)

# Register itkSLICImageFilterIUC2IUL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_Superclass_swigregister(itkSLICImageFilterIUC2IUL2_Superclass)
itkSLICImageFilterIUC2IUL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_Superclass_cast

class itkSLICImageFilterIUC2IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterIUC2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUC2IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_cast)

# Register itkSLICImageFilterIUC2IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_swigregister(itkSLICImageFilterIUC2IUS2_Superclass)
itkSLICImageFilterIUC2IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_cast

class itkSLICImageFilterIUC3IUL3_Superclass(itk.itkImageSourcePython.itkImageSourceIUL3):
    r"""Proxy of C++ itkSLICImageFilterIUC3IUL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUC3IUL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_Superclass_cast)

# Register itkSLICImageFilterIUC3IUL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_Superclass_swigregister(itkSLICImageFilterIUC3IUL3_Superclass)
itkSLICImageFilterIUC3IUL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_Superclass_cast

class itkSLICImageFilterIUC3IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterIUC3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUC3IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_cast)

# Register itkSLICImageFilterIUC3IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_swigregister(itkSLICImageFilterIUC3IUS3_Superclass)
itkSLICImageFilterIUC3IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_cast

class itkSLICImageFilterIUS2IUL2_Superclass(itk.itkImageSourcePython.itkImageSourceIUL2):
    r"""Proxy of C++ itkSLICImageFilterIUS2IUL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUS2IUL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_Superclass_cast)

# Register itkSLICImageFilterIUS2IUL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_Superclass_swigregister(itkSLICImageFilterIUS2IUL2_Superclass)
itkSLICImageFilterIUS2IUL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_Superclass_cast

class itkSLICImageFilterIUS2IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterIUS2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUS2IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_cast)

# Register itkSLICImageFilterIUS2IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_swigregister(itkSLICImageFilterIUS2IUS2_Superclass)
itkSLICImageFilterIUS2IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_cast

class itkSLICImageFilterIUS3IUL3_Superclass(itk.itkImageSourcePython.itkImageSourceIUL3):
    r"""Proxy of C++ itkSLICImageFilterIUS3IUL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUS3IUL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_Superclass_cast)

# Register itkSLICImageFilterIUS3IUL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_Superclass_swigregister(itkSLICImageFilterIUS3IUL3_Superclass)
itkSLICImageFilterIUS3IUL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_Superclass_cast

class itkSLICImageFilterIUS3IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterIUS3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUS3IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_cast)

# Register itkSLICImageFilterIUS3IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_swigregister(itkSLICImageFilterIUS3IUS3_Superclass)
itkSLICImageFilterIUS3IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_cast

class itkSLICImageFilterVID2IUL2_Superclass(itk.itkImageSourcePython.itkImageSourceIUL2):
    r"""Proxy of C++ itkSLICImageFilterVID2IUL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVID2IUL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_Superclass_cast)

# Register itkSLICImageFilterVID2IUL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_Superclass_swigregister(itkSLICImageFilterVID2IUL2_Superclass)
itkSLICImageFilterVID2IUL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_Superclass_cast

class itkSLICImageFilterVID2IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterVID2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVID2IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_Superclass_cast)

# Register itkSLICImageFilterVID2IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_Superclass_swigregister(itkSLICImageFilterVID2IUS2_Superclass)
itkSLICImageFilterVID2IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_Superclass_cast

class itkSLICImageFilterVID3IUL3_Superclass(itk.itkImageSourcePython.itkImageSourceIUL3):
    r"""Proxy of C++ itkSLICImageFilterVID3IUL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVID3IUL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_Superclass_cast)

# Register itkSLICImageFilterVID3IUL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_Superclass_swigregister(itkSLICImageFilterVID3IUL3_Superclass)
itkSLICImageFilterVID3IUL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_Superclass_cast

class itkSLICImageFilterVID3IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterVID3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVID3IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_Superclass_cast)

# Register itkSLICImageFilterVID3IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_Superclass_swigregister(itkSLICImageFilterVID3IUS3_Superclass)
itkSLICImageFilterVID3IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_Superclass_cast

class itkSLICImageFilterVIF2IUL2_Superclass(itk.itkImageSourcePython.itkImageSourceIUL2):
    r"""Proxy of C++ itkSLICImageFilterVIF2IUL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIF2IUL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_Superclass_cast)

# Register itkSLICImageFilterVIF2IUL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_Superclass_swigregister(itkSLICImageFilterVIF2IUL2_Superclass)
itkSLICImageFilterVIF2IUL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_Superclass_cast

class itkSLICImageFilterVIF2IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterVIF2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIF2IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_cast)

# Register itkSLICImageFilterVIF2IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_swigregister(itkSLICImageFilterVIF2IUS2_Superclass)
itkSLICImageFilterVIF2IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_cast

class itkSLICImageFilterVIF3IUL3_Superclass(itk.itkImageSourcePython.itkImageSourceIUL3):
    r"""Proxy of C++ itkSLICImageFilterVIF3IUL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIF3IUL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_Superclass_cast)

# Register itkSLICImageFilterVIF3IUL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_Superclass_swigregister(itkSLICImageFilterVIF3IUL3_Superclass)
itkSLICImageFilterVIF3IUL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_Superclass_cast

class itkSLICImageFilterVIF3IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterVIF3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIF3IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_cast)

# Register itkSLICImageFilterVIF3IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_swigregister(itkSLICImageFilterVIF3IUS3_Superclass)
itkSLICImageFilterVIF3IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_cast

class itkSLICImageFilterVISS2IUL2_Superclass(itk.itkImageSourcePython.itkImageSourceIUL2):
    r"""Proxy of C++ itkSLICImageFilterVISS2IUL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVISS2IUL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_Superclass_cast)

# Register itkSLICImageFilterVISS2IUL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_Superclass_swigregister(itkSLICImageFilterVISS2IUL2_Superclass)
itkSLICImageFilterVISS2IUL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_Superclass_cast

class itkSLICImageFilterVISS2IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterVISS2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVISS2IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_cast)

# Register itkSLICImageFilterVISS2IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_swigregister(itkSLICImageFilterVISS2IUS2_Superclass)
itkSLICImageFilterVISS2IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_cast

class itkSLICImageFilterVISS3IUL3_Superclass(itk.itkImageSourcePython.itkImageSourceIUL3):
    r"""Proxy of C++ itkSLICImageFilterVISS3IUL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVISS3IUL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_Superclass_cast)

# Register itkSLICImageFilterVISS3IUL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_Superclass_swigregister(itkSLICImageFilterVISS3IUL3_Superclass)
itkSLICImageFilterVISS3IUL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_Superclass_cast

class itkSLICImageFilterVISS3IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterVISS3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVISS3IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_cast)

# Register itkSLICImageFilterVISS3IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_swigregister(itkSLICImageFilterVISS3IUS3_Superclass)
itkSLICImageFilterVISS3IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_cast

class itkSLICImageFilterVIUC2IUL2_Superclass(itk.itkImageSourcePython.itkImageSourceIUL2):
    r"""Proxy of C++ itkSLICImageFilterVIUC2IUL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUC2IUL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_Superclass_cast)

# Register itkSLICImageFilterVIUC2IUL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_Superclass_swigregister(itkSLICImageFilterVIUC2IUL2_Superclass)
itkSLICImageFilterVIUC2IUL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_Superclass_cast

class itkSLICImageFilterVIUC2IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterVIUC2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUC2IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_cast)

# Register itkSLICImageFilterVIUC2IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_swigregister(itkSLICImageFilterVIUC2IUS2_Superclass)
itkSLICImageFilterVIUC2IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_cast

class itkSLICImageFilterVIUC3IUL3_Superclass(itk.itkImageSourcePython.itkImageSourceIUL3):
    r"""Proxy of C++ itkSLICImageFilterVIUC3IUL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUC3IUL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_Superclass_cast)

# Register itkSLICImageFilterVIUC3IUL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_Superclass_swigregister(itkSLICImageFilterVIUC3IUL3_Superclass)
itkSLICImageFilterVIUC3IUL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_Superclass_cast

class itkSLICImageFilterVIUC3IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterVIUC3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUC3IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_cast)

# Register itkSLICImageFilterVIUC3IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_swigregister(itkSLICImageFilterVIUC3IUS3_Superclass)
itkSLICImageFilterVIUC3IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_cast

class itkSLICImageFilterVIUS2IUL2_Superclass(itk.itkImageSourcePython.itkImageSourceIUL2):
    r"""Proxy of C++ itkSLICImageFilterVIUS2IUL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUS2IUL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_Superclass_cast)

# Register itkSLICImageFilterVIUS2IUL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_Superclass_swigregister(itkSLICImageFilterVIUS2IUL2_Superclass)
itkSLICImageFilterVIUS2IUL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_Superclass_cast

class itkSLICImageFilterVIUS2IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterVIUS2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUS2IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_cast)

# Register itkSLICImageFilterVIUS2IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_swigregister(itkSLICImageFilterVIUS2IUS2_Superclass)
itkSLICImageFilterVIUS2IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_cast

class itkSLICImageFilterVIUS3IUL3_Superclass(itk.itkImageSourcePython.itkImageSourceIUL3):
    r"""Proxy of C++ itkSLICImageFilterVIUS3IUL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUS3IUL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_Superclass_cast)

# Register itkSLICImageFilterVIUS3IUL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_Superclass_swigregister(itkSLICImageFilterVIUS3IUL3_Superclass)
itkSLICImageFilterVIUS3IUL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_Superclass_cast

class itkSLICImageFilterVIUS3IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterVIUS3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUS3IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_cast)

# Register itkSLICImageFilterVIUS3IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_swigregister(itkSLICImageFilterVIUS3IUS3_Superclass)
itkSLICImageFilterVIUS3IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_cast


def itkSLICImageFilterID2IUL2_New():
    return itkSLICImageFilterID2IUL2.New()

class itkSLICImageFilterID2IUL2(itkSLICImageFilterID2IUL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterID2IUL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterID2IUL2

        Create a new object of the class itkSLICImageFilterID2IUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterID2IUL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterID2IUL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterID2IUL2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterID2IUL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_swigregister(itkSLICImageFilterID2IUL2)
itkSLICImageFilterID2IUL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterID2IUL2___New_orig__
itkSLICImageFilterID2IUL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_cast


def itkSLICImageFilterID2IUS2_New():
    return itkSLICImageFilterID2IUS2.New()

class itkSLICImageFilterID2IUS2(itkSLICImageFilterID2IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterID2IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterID2IUS2

        Create a new object of the class itkSLICImageFilterID2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterID2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterID2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterID2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterID2IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_swigregister(itkSLICImageFilterID2IUS2)
itkSLICImageFilterID2IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterID2IUS2___New_orig__
itkSLICImageFilterID2IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_cast


def itkSLICImageFilterID3IUL3_New():
    return itkSLICImageFilterID3IUL3.New()

class itkSLICImageFilterID3IUL3(itkSLICImageFilterID3IUL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterID3IUL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterID3IUL3

        Create a new object of the class itkSLICImageFilterID3IUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterID3IUL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterID3IUL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterID3IUL3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterID3IUL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_swigregister(itkSLICImageFilterID3IUL3)
itkSLICImageFilterID3IUL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterID3IUL3___New_orig__
itkSLICImageFilterID3IUL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_cast


def itkSLICImageFilterID3IUS3_New():
    return itkSLICImageFilterID3IUS3.New()

class itkSLICImageFilterID3IUS3(itkSLICImageFilterID3IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterID3IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterID3IUS3

        Create a new object of the class itkSLICImageFilterID3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterID3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterID3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterID3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterID3IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_swigregister(itkSLICImageFilterID3IUS3)
itkSLICImageFilterID3IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterID3IUS3___New_orig__
itkSLICImageFilterID3IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_cast


def itkSLICImageFilterIF2IUL2_New():
    return itkSLICImageFilterIF2IUL2.New()

class itkSLICImageFilterIF2IUL2(itkSLICImageFilterIF2IUL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIF2IUL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIF2IUL2

        Create a new object of the class itkSLICImageFilterIF2IUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIF2IUL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIF2IUL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIF2IUL2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIF2IUL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_swigregister(itkSLICImageFilterIF2IUL2)
itkSLICImageFilterIF2IUL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2___New_orig__
itkSLICImageFilterIF2IUL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_cast


def itkSLICImageFilterIF2IUS2_New():
    return itkSLICImageFilterIF2IUS2.New()

class itkSLICImageFilterIF2IUS2(itkSLICImageFilterIF2IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIF2IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIF2IUS2

        Create a new object of the class itkSLICImageFilterIF2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIF2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIF2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIF2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIF2IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_swigregister(itkSLICImageFilterIF2IUS2)
itkSLICImageFilterIF2IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2___New_orig__
itkSLICImageFilterIF2IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_cast


def itkSLICImageFilterIF3IUL3_New():
    return itkSLICImageFilterIF3IUL3.New()

class itkSLICImageFilterIF3IUL3(itkSLICImageFilterIF3IUL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIF3IUL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIF3IUL3

        Create a new object of the class itkSLICImageFilterIF3IUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIF3IUL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIF3IUL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIF3IUL3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIF3IUL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_swigregister(itkSLICImageFilterIF3IUL3)
itkSLICImageFilterIF3IUL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3___New_orig__
itkSLICImageFilterIF3IUL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_cast


def itkSLICImageFilterIF3IUS3_New():
    return itkSLICImageFilterIF3IUS3.New()

class itkSLICImageFilterIF3IUS3(itkSLICImageFilterIF3IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIF3IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIF3IUS3

        Create a new object of the class itkSLICImageFilterIF3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIF3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIF3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIF3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIF3IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_swigregister(itkSLICImageFilterIF3IUS3)
itkSLICImageFilterIF3IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3___New_orig__
itkSLICImageFilterIF3IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_cast


def itkSLICImageFilterISS2IUL2_New():
    return itkSLICImageFilterISS2IUL2.New()

class itkSLICImageFilterISS2IUL2(itkSLICImageFilterISS2IUL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterISS2IUL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterISS2IUL2

        Create a new object of the class itkSLICImageFilterISS2IUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterISS2IUL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterISS2IUL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterISS2IUL2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterISS2IUL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_swigregister(itkSLICImageFilterISS2IUL2)
itkSLICImageFilterISS2IUL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2___New_orig__
itkSLICImageFilterISS2IUL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_cast


def itkSLICImageFilterISS2IUS2_New():
    return itkSLICImageFilterISS2IUS2.New()

class itkSLICImageFilterISS2IUS2(itkSLICImageFilterISS2IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterISS2IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterISS2IUS2

        Create a new object of the class itkSLICImageFilterISS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterISS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterISS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterISS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterISS2IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_swigregister(itkSLICImageFilterISS2IUS2)
itkSLICImageFilterISS2IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2___New_orig__
itkSLICImageFilterISS2IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_cast


def itkSLICImageFilterISS3IUL3_New():
    return itkSLICImageFilterISS3IUL3.New()

class itkSLICImageFilterISS3IUL3(itkSLICImageFilterISS3IUL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterISS3IUL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterISS3IUL3

        Create a new object of the class itkSLICImageFilterISS3IUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterISS3IUL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterISS3IUL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterISS3IUL3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterISS3IUL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_swigregister(itkSLICImageFilterISS3IUL3)
itkSLICImageFilterISS3IUL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3___New_orig__
itkSLICImageFilterISS3IUL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_cast


def itkSLICImageFilterISS3IUS3_New():
    return itkSLICImageFilterISS3IUS3.New()

class itkSLICImageFilterISS3IUS3(itkSLICImageFilterISS3IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterISS3IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterISS3IUS3

        Create a new object of the class itkSLICImageFilterISS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterISS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterISS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterISS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterISS3IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_swigregister(itkSLICImageFilterISS3IUS3)
itkSLICImageFilterISS3IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3___New_orig__
itkSLICImageFilterISS3IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_cast


def itkSLICImageFilterIUC2IUL2_New():
    return itkSLICImageFilterIUC2IUL2.New()

class itkSLICImageFilterIUC2IUL2(itkSLICImageFilterIUC2IUL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUC2IUL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIUC2IUL2

        Create a new object of the class itkSLICImageFilterIUC2IUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIUC2IUL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIUC2IUL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIUC2IUL2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIUC2IUL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_swigregister(itkSLICImageFilterIUC2IUL2)
itkSLICImageFilterIUC2IUL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2___New_orig__
itkSLICImageFilterIUC2IUL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_cast


def itkSLICImageFilterIUC2IUS2_New():
    return itkSLICImageFilterIUC2IUS2.New()

class itkSLICImageFilterIUC2IUS2(itkSLICImageFilterIUC2IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUC2IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIUC2IUS2

        Create a new object of the class itkSLICImageFilterIUC2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIUC2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIUC2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIUC2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIUC2IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_swigregister(itkSLICImageFilterIUC2IUS2)
itkSLICImageFilterIUC2IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2___New_orig__
itkSLICImageFilterIUC2IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_cast


def itkSLICImageFilterIUC3IUL3_New():
    return itkSLICImageFilterIUC3IUL3.New()

class itkSLICImageFilterIUC3IUL3(itkSLICImageFilterIUC3IUL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUC3IUL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIUC3IUL3

        Create a new object of the class itkSLICImageFilterIUC3IUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIUC3IUL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIUC3IUL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIUC3IUL3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIUC3IUL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_swigregister(itkSLICImageFilterIUC3IUL3)
itkSLICImageFilterIUC3IUL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3___New_orig__
itkSLICImageFilterIUC3IUL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_cast


def itkSLICImageFilterIUC3IUS3_New():
    return itkSLICImageFilterIUC3IUS3.New()

class itkSLICImageFilterIUC3IUS3(itkSLICImageFilterIUC3IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUC3IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIUC3IUS3

        Create a new object of the class itkSLICImageFilterIUC3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIUC3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIUC3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIUC3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIUC3IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_swigregister(itkSLICImageFilterIUC3IUS3)
itkSLICImageFilterIUC3IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3___New_orig__
itkSLICImageFilterIUC3IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_cast


def itkSLICImageFilterIUS2IUL2_New():
    return itkSLICImageFilterIUS2IUL2.New()

class itkSLICImageFilterIUS2IUL2(itkSLICImageFilterIUS2IUL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUS2IUL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIUS2IUL2

        Create a new object of the class itkSLICImageFilterIUS2IUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIUS2IUL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIUS2IUL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIUS2IUL2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIUS2IUL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_swigregister(itkSLICImageFilterIUS2IUL2)
itkSLICImageFilterIUS2IUL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2___New_orig__
itkSLICImageFilterIUS2IUL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_cast


def itkSLICImageFilterIUS2IUS2_New():
    return itkSLICImageFilterIUS2IUS2.New()

class itkSLICImageFilterIUS2IUS2(itkSLICImageFilterIUS2IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIUS2IUS2

        Create a new object of the class itkSLICImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIUS2IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_swigregister(itkSLICImageFilterIUS2IUS2)
itkSLICImageFilterIUS2IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2___New_orig__
itkSLICImageFilterIUS2IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_cast


def itkSLICImageFilterIUS3IUL3_New():
    return itkSLICImageFilterIUS3IUL3.New()

class itkSLICImageFilterIUS3IUL3(itkSLICImageFilterIUS3IUL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUS3IUL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIUS3IUL3

        Create a new object of the class itkSLICImageFilterIUS3IUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIUS3IUL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIUS3IUL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIUS3IUL3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIUS3IUL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_swigregister(itkSLICImageFilterIUS3IUL3)
itkSLICImageFilterIUS3IUL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3___New_orig__
itkSLICImageFilterIUS3IUL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_cast


def itkSLICImageFilterIUS3IUS3_New():
    return itkSLICImageFilterIUS3IUS3.New()

class itkSLICImageFilterIUS3IUS3(itkSLICImageFilterIUS3IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIUS3IUS3

        Create a new object of the class itkSLICImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIUS3IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_swigregister(itkSLICImageFilterIUS3IUS3)
itkSLICImageFilterIUS3IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3___New_orig__
itkSLICImageFilterIUS3IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_cast


def itkSLICImageFilterVID2IUL2_New():
    return itkSLICImageFilterVID2IUL2.New()

class itkSLICImageFilterVID2IUL2(itkSLICImageFilterVID2IUL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVID2IUL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVID2IUL2

        Create a new object of the class itkSLICImageFilterVID2IUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVID2IUL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVID2IUL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVID2IUL2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVID2IUL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_swigregister(itkSLICImageFilterVID2IUL2)
itkSLICImageFilterVID2IUL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2___New_orig__
itkSLICImageFilterVID2IUL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_cast


def itkSLICImageFilterVID2IUS2_New():
    return itkSLICImageFilterVID2IUS2.New()

class itkSLICImageFilterVID2IUS2(itkSLICImageFilterVID2IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVID2IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVID2IUS2

        Create a new object of the class itkSLICImageFilterVID2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVID2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVID2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVID2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVID2IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_swigregister(itkSLICImageFilterVID2IUS2)
itkSLICImageFilterVID2IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2___New_orig__
itkSLICImageFilterVID2IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_cast


def itkSLICImageFilterVID3IUL3_New():
    return itkSLICImageFilterVID3IUL3.New()

class itkSLICImageFilterVID3IUL3(itkSLICImageFilterVID3IUL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVID3IUL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVID3IUL3

        Create a new object of the class itkSLICImageFilterVID3IUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVID3IUL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVID3IUL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVID3IUL3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVID3IUL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_swigregister(itkSLICImageFilterVID3IUL3)
itkSLICImageFilterVID3IUL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3___New_orig__
itkSLICImageFilterVID3IUL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_cast


def itkSLICImageFilterVID3IUS3_New():
    return itkSLICImageFilterVID3IUS3.New()

class itkSLICImageFilterVID3IUS3(itkSLICImageFilterVID3IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVID3IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVID3IUS3

        Create a new object of the class itkSLICImageFilterVID3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVID3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVID3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVID3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVID3IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_swigregister(itkSLICImageFilterVID3IUS3)
itkSLICImageFilterVID3IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3___New_orig__
itkSLICImageFilterVID3IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_cast


def itkSLICImageFilterVIF2IUL2_New():
    return itkSLICImageFilterVIF2IUL2.New()

class itkSLICImageFilterVIF2IUL2(itkSLICImageFilterVIF2IUL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIF2IUL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIF2IUL2

        Create a new object of the class itkSLICImageFilterVIF2IUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIF2IUL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIF2IUL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVIF2IUL2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVIF2IUL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_swigregister(itkSLICImageFilterVIF2IUL2)
itkSLICImageFilterVIF2IUL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2___New_orig__
itkSLICImageFilterVIF2IUL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_cast


def itkSLICImageFilterVIF2IUS2_New():
    return itkSLICImageFilterVIF2IUS2.New()

class itkSLICImageFilterVIF2IUS2(itkSLICImageFilterVIF2IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIF2IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIF2IUS2

        Create a new object of the class itkSLICImageFilterVIF2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIF2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIF2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVIF2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVIF2IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_swigregister(itkSLICImageFilterVIF2IUS2)
itkSLICImageFilterVIF2IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2___New_orig__
itkSLICImageFilterVIF2IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_cast


def itkSLICImageFilterVIF3IUL3_New():
    return itkSLICImageFilterVIF3IUL3.New()

class itkSLICImageFilterVIF3IUL3(itkSLICImageFilterVIF3IUL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIF3IUL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIF3IUL3

        Create a new object of the class itkSLICImageFilterVIF3IUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIF3IUL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIF3IUL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVIF3IUL3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVIF3IUL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_swigregister(itkSLICImageFilterVIF3IUL3)
itkSLICImageFilterVIF3IUL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3___New_orig__
itkSLICImageFilterVIF3IUL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_cast


def itkSLICImageFilterVIF3IUS3_New():
    return itkSLICImageFilterVIF3IUS3.New()

class itkSLICImageFilterVIF3IUS3(itkSLICImageFilterVIF3IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIF3IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIF3IUS3

        Create a new object of the class itkSLICImageFilterVIF3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIF3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIF3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVIF3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVIF3IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_swigregister(itkSLICImageFilterVIF3IUS3)
itkSLICImageFilterVIF3IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3___New_orig__
itkSLICImageFilterVIF3IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_cast


def itkSLICImageFilterVISS2IUL2_New():
    return itkSLICImageFilterVISS2IUL2.New()

class itkSLICImageFilterVISS2IUL2(itkSLICImageFilterVISS2IUL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVISS2IUL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVISS2IUL2

        Create a new object of the class itkSLICImageFilterVISS2IUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVISS2IUL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVISS2IUL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVISS2IUL2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVISS2IUL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_swigregister(itkSLICImageFilterVISS2IUL2)
itkSLICImageFilterVISS2IUL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2___New_orig__
itkSLICImageFilterVISS2IUL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_cast


def itkSLICImageFilterVISS2IUS2_New():
    return itkSLICImageFilterVISS2IUS2.New()

class itkSLICImageFilterVISS2IUS2(itkSLICImageFilterVISS2IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVISS2IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVISS2IUS2

        Create a new object of the class itkSLICImageFilterVISS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVISS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVISS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVISS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVISS2IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_swigregister(itkSLICImageFilterVISS2IUS2)
itkSLICImageFilterVISS2IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2___New_orig__
itkSLICImageFilterVISS2IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_cast


def itkSLICImageFilterVISS3IUL3_New():
    return itkSLICImageFilterVISS3IUL3.New()

class itkSLICImageFilterVISS3IUL3(itkSLICImageFilterVISS3IUL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVISS3IUL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVISS3IUL3

        Create a new object of the class itkSLICImageFilterVISS3IUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVISS3IUL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVISS3IUL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVISS3IUL3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVISS3IUL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_swigregister(itkSLICImageFilterVISS3IUL3)
itkSLICImageFilterVISS3IUL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3___New_orig__
itkSLICImageFilterVISS3IUL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_cast


def itkSLICImageFilterVISS3IUS3_New():
    return itkSLICImageFilterVISS3IUS3.New()

class itkSLICImageFilterVISS3IUS3(itkSLICImageFilterVISS3IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVISS3IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVISS3IUS3

        Create a new object of the class itkSLICImageFilterVISS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVISS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVISS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVISS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVISS3IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_swigregister(itkSLICImageFilterVISS3IUS3)
itkSLICImageFilterVISS3IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3___New_orig__
itkSLICImageFilterVISS3IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_cast


def itkSLICImageFilterVIUC2IUL2_New():
    return itkSLICImageFilterVIUC2IUL2.New()

class itkSLICImageFilterVIUC2IUL2(itkSLICImageFilterVIUC2IUL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUC2IUL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIUC2IUL2

        Create a new object of the class itkSLICImageFilterVIUC2IUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIUC2IUL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIUC2IUL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVIUC2IUL2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVIUC2IUL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_swigregister(itkSLICImageFilterVIUC2IUL2)
itkSLICImageFilterVIUC2IUL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2___New_orig__
itkSLICImageFilterVIUC2IUL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_cast


def itkSLICImageFilterVIUC2IUS2_New():
    return itkSLICImageFilterVIUC2IUS2.New()

class itkSLICImageFilterVIUC2IUS2(itkSLICImageFilterVIUC2IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUC2IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIUC2IUS2

        Create a new object of the class itkSLICImageFilterVIUC2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIUC2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIUC2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVIUC2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVIUC2IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_swigregister(itkSLICImageFilterVIUC2IUS2)
itkSLICImageFilterVIUC2IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2___New_orig__
itkSLICImageFilterVIUC2IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_cast


def itkSLICImageFilterVIUC3IUL3_New():
    return itkSLICImageFilterVIUC3IUL3.New()

class itkSLICImageFilterVIUC3IUL3(itkSLICImageFilterVIUC3IUL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUC3IUL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIUC3IUL3

        Create a new object of the class itkSLICImageFilterVIUC3IUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIUC3IUL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIUC3IUL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVIUC3IUL3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVIUC3IUL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_swigregister(itkSLICImageFilterVIUC3IUL3)
itkSLICImageFilterVIUC3IUL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3___New_orig__
itkSLICImageFilterVIUC3IUL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_cast


def itkSLICImageFilterVIUC3IUS3_New():
    return itkSLICImageFilterVIUC3IUS3.New()

class itkSLICImageFilterVIUC3IUS3(itkSLICImageFilterVIUC3IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUC3IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIUC3IUS3

        Create a new object of the class itkSLICImageFilterVIUC3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIUC3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIUC3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVIUC3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVIUC3IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_swigregister(itkSLICImageFilterVIUC3IUS3)
itkSLICImageFilterVIUC3IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3___New_orig__
itkSLICImageFilterVIUC3IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_cast


def itkSLICImageFilterVIUS2IUL2_New():
    return itkSLICImageFilterVIUS2IUL2.New()

class itkSLICImageFilterVIUS2IUL2(itkSLICImageFilterVIUS2IUL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUS2IUL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIUS2IUL2

        Create a new object of the class itkSLICImageFilterVIUS2IUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIUS2IUL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIUS2IUL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVIUS2IUL2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVIUS2IUL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_swigregister(itkSLICImageFilterVIUS2IUL2)
itkSLICImageFilterVIUS2IUL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2___New_orig__
itkSLICImageFilterVIUS2IUL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_cast


def itkSLICImageFilterVIUS2IUS2_New():
    return itkSLICImageFilterVIUS2IUS2.New()

class itkSLICImageFilterVIUS2IUS2(itkSLICImageFilterVIUS2IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUS2IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIUS2IUS2

        Create a new object of the class itkSLICImageFilterVIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVIUS2IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_swigregister(itkSLICImageFilterVIUS2IUS2)
itkSLICImageFilterVIUS2IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2___New_orig__
itkSLICImageFilterVIUS2IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_cast


def itkSLICImageFilterVIUS3IUL3_New():
    return itkSLICImageFilterVIUS3IUL3.New()

class itkSLICImageFilterVIUS3IUL3(itkSLICImageFilterVIUS3IUL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUS3IUL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIUS3IUL3

        Create a new object of the class itkSLICImageFilterVIUS3IUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIUS3IUL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIUS3IUL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVIUS3IUL3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVIUS3IUL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_swigregister(itkSLICImageFilterVIUS3IUL3)
itkSLICImageFilterVIUS3IUL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3___New_orig__
itkSLICImageFilterVIUS3IUL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_cast


def itkSLICImageFilterVIUS3IUS3_New():
    return itkSLICImageFilterVIUS3IUS3.New()

class itkSLICImageFilterVIUS3IUS3(itkSLICImageFilterVIUS3IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://hdl.handle.net/1926/3596 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUS3IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIUS3IUS3

        Create a new object of the class itkSLICImageFilterVIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVIUS3IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_swigregister(itkSLICImageFilterVIUS3IUS3)
itkSLICImageFilterVIUS3IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3___New_orig__
itkSLICImageFilterVIUS3IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def image_to_image_filter(*args, **kwargs):
    """Procedural interface for ImageToImageFilter"""
    import itk
    instance = itk.ImageToImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def image_to_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ImageToImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.ImageToImageFilter.values()[0]
    else:
        filter_object = itk.ImageToImageFilter

    image_to_image_filter.__doc__ = filter_object.__doc__
    image_to_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    image_to_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.ImageToImageFilter, itkTemplate.itkTemplate):
        image_to_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        image_to_image_filter.__doc__ += "\n"
        image_to_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        image_to_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])
import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def slic_image_filter(*args, **kwargs):
    """Procedural interface for SLICImageFilter"""
    import itk
    instance = itk.SLICImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def slic_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.SLICImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.SLICImageFilter.values()[0]
    else:
        filter_object = itk.SLICImageFilter

    slic_image_filter.__doc__ = filter_object.__doc__
    slic_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    slic_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.SLICImageFilter, itkTemplate.itkTemplate):
        slic_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        slic_image_filter.__doc__ += "\n"
        slic_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        slic_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



