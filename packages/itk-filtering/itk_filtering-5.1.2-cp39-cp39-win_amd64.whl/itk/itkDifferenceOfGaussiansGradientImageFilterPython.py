# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageGradientPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkDifferenceOfGaussiansGradientImageFilterPython
else:
    import _itkDifferenceOfGaussiansGradientImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkDifferenceOfGaussiansGradientImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkDifferenceOfGaussiansGradientImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkImageToImageFilterBPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkFixedArrayPython
import itk.itkPointPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkRGBPixelPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython

def itkDifferenceOfGaussiansGradientImageFilterID2F_New():
    return itkDifferenceOfGaussiansGradientImageFilterID2F.New()

class itkDifferenceOfGaussiansGradientImageFilterID2F(itk.itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF22):
    r"""


    Performs difference-of-gaussians gradient detection. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterID2F___New_orig__)
    Clone = _swig_new_instance_method(_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterID2F_Clone)
    GetWidth = _swig_new_instance_method(_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterID2F_GetWidth)
    SetWidth = _swig_new_instance_method(_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterID2F_SetWidth)
    DataTypeHasNumericTraitsCheck = _itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterID2F_DataTypeHasNumericTraitsCheck
    
    __swig_destroy__ = _itkDifferenceOfGaussiansGradientImageFilterPython.delete_itkDifferenceOfGaussiansGradientImageFilterID2F
    cast = _swig_new_static_method(_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterID2F_cast)

    def New(*args, **kargs):
        """New() -> itkDifferenceOfGaussiansGradientImageFilterID2F

        Create a new object of the class itkDifferenceOfGaussiansGradientImageFilterID2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDifferenceOfGaussiansGradientImageFilterID2F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDifferenceOfGaussiansGradientImageFilterID2F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDifferenceOfGaussiansGradientImageFilterID2F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDifferenceOfGaussiansGradientImageFilterID2F in _itkDifferenceOfGaussiansGradientImageFilterPython:
_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterID2F_swigregister(itkDifferenceOfGaussiansGradientImageFilterID2F)
itkDifferenceOfGaussiansGradientImageFilterID2F___New_orig__ = _itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterID2F___New_orig__
itkDifferenceOfGaussiansGradientImageFilterID2F_cast = _itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterID2F_cast


def itkDifferenceOfGaussiansGradientImageFilterID3F_New():
    return itkDifferenceOfGaussiansGradientImageFilterID3F.New()

class itkDifferenceOfGaussiansGradientImageFilterID3F(itk.itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF33):
    r"""


    Performs difference-of-gaussians gradient detection. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterID3F___New_orig__)
    Clone = _swig_new_instance_method(_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterID3F_Clone)
    GetWidth = _swig_new_instance_method(_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterID3F_GetWidth)
    SetWidth = _swig_new_instance_method(_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterID3F_SetWidth)
    DataTypeHasNumericTraitsCheck = _itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterID3F_DataTypeHasNumericTraitsCheck
    
    __swig_destroy__ = _itkDifferenceOfGaussiansGradientImageFilterPython.delete_itkDifferenceOfGaussiansGradientImageFilterID3F
    cast = _swig_new_static_method(_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterID3F_cast)

    def New(*args, **kargs):
        """New() -> itkDifferenceOfGaussiansGradientImageFilterID3F

        Create a new object of the class itkDifferenceOfGaussiansGradientImageFilterID3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDifferenceOfGaussiansGradientImageFilterID3F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDifferenceOfGaussiansGradientImageFilterID3F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDifferenceOfGaussiansGradientImageFilterID3F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDifferenceOfGaussiansGradientImageFilterID3F in _itkDifferenceOfGaussiansGradientImageFilterPython:
_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterID3F_swigregister(itkDifferenceOfGaussiansGradientImageFilterID3F)
itkDifferenceOfGaussiansGradientImageFilterID3F___New_orig__ = _itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterID3F___New_orig__
itkDifferenceOfGaussiansGradientImageFilterID3F_cast = _itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterID3F_cast


def itkDifferenceOfGaussiansGradientImageFilterIF2F_New():
    return itkDifferenceOfGaussiansGradientImageFilterIF2F.New()

class itkDifferenceOfGaussiansGradientImageFilterIF2F(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF22):
    r"""


    Performs difference-of-gaussians gradient detection. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIF2F___New_orig__)
    Clone = _swig_new_instance_method(_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIF2F_Clone)
    GetWidth = _swig_new_instance_method(_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIF2F_GetWidth)
    SetWidth = _swig_new_instance_method(_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIF2F_SetWidth)
    DataTypeHasNumericTraitsCheck = _itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIF2F_DataTypeHasNumericTraitsCheck
    
    __swig_destroy__ = _itkDifferenceOfGaussiansGradientImageFilterPython.delete_itkDifferenceOfGaussiansGradientImageFilterIF2F
    cast = _swig_new_static_method(_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIF2F_cast)

    def New(*args, **kargs):
        """New() -> itkDifferenceOfGaussiansGradientImageFilterIF2F

        Create a new object of the class itkDifferenceOfGaussiansGradientImageFilterIF2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDifferenceOfGaussiansGradientImageFilterIF2F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDifferenceOfGaussiansGradientImageFilterIF2F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDifferenceOfGaussiansGradientImageFilterIF2F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDifferenceOfGaussiansGradientImageFilterIF2F in _itkDifferenceOfGaussiansGradientImageFilterPython:
_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIF2F_swigregister(itkDifferenceOfGaussiansGradientImageFilterIF2F)
itkDifferenceOfGaussiansGradientImageFilterIF2F___New_orig__ = _itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIF2F___New_orig__
itkDifferenceOfGaussiansGradientImageFilterIF2F_cast = _itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIF2F_cast


def itkDifferenceOfGaussiansGradientImageFilterIF3F_New():
    return itkDifferenceOfGaussiansGradientImageFilterIF3F.New()

class itkDifferenceOfGaussiansGradientImageFilterIF3F(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF33):
    r"""


    Performs difference-of-gaussians gradient detection. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIF3F___New_orig__)
    Clone = _swig_new_instance_method(_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIF3F_Clone)
    GetWidth = _swig_new_instance_method(_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIF3F_GetWidth)
    SetWidth = _swig_new_instance_method(_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIF3F_SetWidth)
    DataTypeHasNumericTraitsCheck = _itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIF3F_DataTypeHasNumericTraitsCheck
    
    __swig_destroy__ = _itkDifferenceOfGaussiansGradientImageFilterPython.delete_itkDifferenceOfGaussiansGradientImageFilterIF3F
    cast = _swig_new_static_method(_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIF3F_cast)

    def New(*args, **kargs):
        """New() -> itkDifferenceOfGaussiansGradientImageFilterIF3F

        Create a new object of the class itkDifferenceOfGaussiansGradientImageFilterIF3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDifferenceOfGaussiansGradientImageFilterIF3F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDifferenceOfGaussiansGradientImageFilterIF3F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDifferenceOfGaussiansGradientImageFilterIF3F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDifferenceOfGaussiansGradientImageFilterIF3F in _itkDifferenceOfGaussiansGradientImageFilterPython:
_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIF3F_swigregister(itkDifferenceOfGaussiansGradientImageFilterIF3F)
itkDifferenceOfGaussiansGradientImageFilterIF3F___New_orig__ = _itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIF3F___New_orig__
itkDifferenceOfGaussiansGradientImageFilterIF3F_cast = _itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIF3F_cast


def itkDifferenceOfGaussiansGradientImageFilterISS2F_New():
    return itkDifferenceOfGaussiansGradientImageFilterISS2F.New()

class itkDifferenceOfGaussiansGradientImageFilterISS2F(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF22):
    r"""


    Performs difference-of-gaussians gradient detection. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterISS2F___New_orig__)
    Clone = _swig_new_instance_method(_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterISS2F_Clone)
    GetWidth = _swig_new_instance_method(_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterISS2F_GetWidth)
    SetWidth = _swig_new_instance_method(_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterISS2F_SetWidth)
    DataTypeHasNumericTraitsCheck = _itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterISS2F_DataTypeHasNumericTraitsCheck
    
    __swig_destroy__ = _itkDifferenceOfGaussiansGradientImageFilterPython.delete_itkDifferenceOfGaussiansGradientImageFilterISS2F
    cast = _swig_new_static_method(_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterISS2F_cast)

    def New(*args, **kargs):
        """New() -> itkDifferenceOfGaussiansGradientImageFilterISS2F

        Create a new object of the class itkDifferenceOfGaussiansGradientImageFilterISS2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDifferenceOfGaussiansGradientImageFilterISS2F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDifferenceOfGaussiansGradientImageFilterISS2F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDifferenceOfGaussiansGradientImageFilterISS2F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDifferenceOfGaussiansGradientImageFilterISS2F in _itkDifferenceOfGaussiansGradientImageFilterPython:
_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterISS2F_swigregister(itkDifferenceOfGaussiansGradientImageFilterISS2F)
itkDifferenceOfGaussiansGradientImageFilterISS2F___New_orig__ = _itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterISS2F___New_orig__
itkDifferenceOfGaussiansGradientImageFilterISS2F_cast = _itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterISS2F_cast


def itkDifferenceOfGaussiansGradientImageFilterISS3F_New():
    return itkDifferenceOfGaussiansGradientImageFilterISS3F.New()

class itkDifferenceOfGaussiansGradientImageFilterISS3F(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF33):
    r"""


    Performs difference-of-gaussians gradient detection. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterISS3F___New_orig__)
    Clone = _swig_new_instance_method(_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterISS3F_Clone)
    GetWidth = _swig_new_instance_method(_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterISS3F_GetWidth)
    SetWidth = _swig_new_instance_method(_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterISS3F_SetWidth)
    DataTypeHasNumericTraitsCheck = _itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterISS3F_DataTypeHasNumericTraitsCheck
    
    __swig_destroy__ = _itkDifferenceOfGaussiansGradientImageFilterPython.delete_itkDifferenceOfGaussiansGradientImageFilterISS3F
    cast = _swig_new_static_method(_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterISS3F_cast)

    def New(*args, **kargs):
        """New() -> itkDifferenceOfGaussiansGradientImageFilterISS3F

        Create a new object of the class itkDifferenceOfGaussiansGradientImageFilterISS3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDifferenceOfGaussiansGradientImageFilterISS3F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDifferenceOfGaussiansGradientImageFilterISS3F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDifferenceOfGaussiansGradientImageFilterISS3F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDifferenceOfGaussiansGradientImageFilterISS3F in _itkDifferenceOfGaussiansGradientImageFilterPython:
_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterISS3F_swigregister(itkDifferenceOfGaussiansGradientImageFilterISS3F)
itkDifferenceOfGaussiansGradientImageFilterISS3F___New_orig__ = _itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterISS3F___New_orig__
itkDifferenceOfGaussiansGradientImageFilterISS3F_cast = _itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterISS3F_cast


def itkDifferenceOfGaussiansGradientImageFilterIUC2F_New():
    return itkDifferenceOfGaussiansGradientImageFilterIUC2F.New()

class itkDifferenceOfGaussiansGradientImageFilterIUC2F(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF22):
    r"""


    Performs difference-of-gaussians gradient detection. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIUC2F___New_orig__)
    Clone = _swig_new_instance_method(_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIUC2F_Clone)
    GetWidth = _swig_new_instance_method(_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIUC2F_GetWidth)
    SetWidth = _swig_new_instance_method(_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIUC2F_SetWidth)
    DataTypeHasNumericTraitsCheck = _itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIUC2F_DataTypeHasNumericTraitsCheck
    
    __swig_destroy__ = _itkDifferenceOfGaussiansGradientImageFilterPython.delete_itkDifferenceOfGaussiansGradientImageFilterIUC2F
    cast = _swig_new_static_method(_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIUC2F_cast)

    def New(*args, **kargs):
        """New() -> itkDifferenceOfGaussiansGradientImageFilterIUC2F

        Create a new object of the class itkDifferenceOfGaussiansGradientImageFilterIUC2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDifferenceOfGaussiansGradientImageFilterIUC2F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDifferenceOfGaussiansGradientImageFilterIUC2F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDifferenceOfGaussiansGradientImageFilterIUC2F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDifferenceOfGaussiansGradientImageFilterIUC2F in _itkDifferenceOfGaussiansGradientImageFilterPython:
_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIUC2F_swigregister(itkDifferenceOfGaussiansGradientImageFilterIUC2F)
itkDifferenceOfGaussiansGradientImageFilterIUC2F___New_orig__ = _itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIUC2F___New_orig__
itkDifferenceOfGaussiansGradientImageFilterIUC2F_cast = _itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIUC2F_cast


def itkDifferenceOfGaussiansGradientImageFilterIUC3F_New():
    return itkDifferenceOfGaussiansGradientImageFilterIUC3F.New()

class itkDifferenceOfGaussiansGradientImageFilterIUC3F(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF33):
    r"""


    Performs difference-of-gaussians gradient detection. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIUC3F___New_orig__)
    Clone = _swig_new_instance_method(_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIUC3F_Clone)
    GetWidth = _swig_new_instance_method(_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIUC3F_GetWidth)
    SetWidth = _swig_new_instance_method(_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIUC3F_SetWidth)
    DataTypeHasNumericTraitsCheck = _itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIUC3F_DataTypeHasNumericTraitsCheck
    
    __swig_destroy__ = _itkDifferenceOfGaussiansGradientImageFilterPython.delete_itkDifferenceOfGaussiansGradientImageFilterIUC3F
    cast = _swig_new_static_method(_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIUC3F_cast)

    def New(*args, **kargs):
        """New() -> itkDifferenceOfGaussiansGradientImageFilterIUC3F

        Create a new object of the class itkDifferenceOfGaussiansGradientImageFilterIUC3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDifferenceOfGaussiansGradientImageFilterIUC3F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDifferenceOfGaussiansGradientImageFilterIUC3F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDifferenceOfGaussiansGradientImageFilterIUC3F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDifferenceOfGaussiansGradientImageFilterIUC3F in _itkDifferenceOfGaussiansGradientImageFilterPython:
_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIUC3F_swigregister(itkDifferenceOfGaussiansGradientImageFilterIUC3F)
itkDifferenceOfGaussiansGradientImageFilterIUC3F___New_orig__ = _itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIUC3F___New_orig__
itkDifferenceOfGaussiansGradientImageFilterIUC3F_cast = _itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIUC3F_cast


def itkDifferenceOfGaussiansGradientImageFilterIUS2F_New():
    return itkDifferenceOfGaussiansGradientImageFilterIUS2F.New()

class itkDifferenceOfGaussiansGradientImageFilterIUS2F(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF22):
    r"""


    Performs difference-of-gaussians gradient detection. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIUS2F___New_orig__)
    Clone = _swig_new_instance_method(_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIUS2F_Clone)
    GetWidth = _swig_new_instance_method(_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIUS2F_GetWidth)
    SetWidth = _swig_new_instance_method(_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIUS2F_SetWidth)
    DataTypeHasNumericTraitsCheck = _itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIUS2F_DataTypeHasNumericTraitsCheck
    
    __swig_destroy__ = _itkDifferenceOfGaussiansGradientImageFilterPython.delete_itkDifferenceOfGaussiansGradientImageFilterIUS2F
    cast = _swig_new_static_method(_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIUS2F_cast)

    def New(*args, **kargs):
        """New() -> itkDifferenceOfGaussiansGradientImageFilterIUS2F

        Create a new object of the class itkDifferenceOfGaussiansGradientImageFilterIUS2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDifferenceOfGaussiansGradientImageFilterIUS2F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDifferenceOfGaussiansGradientImageFilterIUS2F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDifferenceOfGaussiansGradientImageFilterIUS2F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDifferenceOfGaussiansGradientImageFilterIUS2F in _itkDifferenceOfGaussiansGradientImageFilterPython:
_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIUS2F_swigregister(itkDifferenceOfGaussiansGradientImageFilterIUS2F)
itkDifferenceOfGaussiansGradientImageFilterIUS2F___New_orig__ = _itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIUS2F___New_orig__
itkDifferenceOfGaussiansGradientImageFilterIUS2F_cast = _itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIUS2F_cast


def itkDifferenceOfGaussiansGradientImageFilterIUS3F_New():
    return itkDifferenceOfGaussiansGradientImageFilterIUS3F.New()

class itkDifferenceOfGaussiansGradientImageFilterIUS3F(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF33):
    r"""


    Performs difference-of-gaussians gradient detection. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIUS3F___New_orig__)
    Clone = _swig_new_instance_method(_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIUS3F_Clone)
    GetWidth = _swig_new_instance_method(_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIUS3F_GetWidth)
    SetWidth = _swig_new_instance_method(_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIUS3F_SetWidth)
    DataTypeHasNumericTraitsCheck = _itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIUS3F_DataTypeHasNumericTraitsCheck
    
    __swig_destroy__ = _itkDifferenceOfGaussiansGradientImageFilterPython.delete_itkDifferenceOfGaussiansGradientImageFilterIUS3F
    cast = _swig_new_static_method(_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIUS3F_cast)

    def New(*args, **kargs):
        """New() -> itkDifferenceOfGaussiansGradientImageFilterIUS3F

        Create a new object of the class itkDifferenceOfGaussiansGradientImageFilterIUS3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDifferenceOfGaussiansGradientImageFilterIUS3F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDifferenceOfGaussiansGradientImageFilterIUS3F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDifferenceOfGaussiansGradientImageFilterIUS3F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDifferenceOfGaussiansGradientImageFilterIUS3F in _itkDifferenceOfGaussiansGradientImageFilterPython:
_itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIUS3F_swigregister(itkDifferenceOfGaussiansGradientImageFilterIUS3F)
itkDifferenceOfGaussiansGradientImageFilterIUS3F___New_orig__ = _itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIUS3F___New_orig__
itkDifferenceOfGaussiansGradientImageFilterIUS3F_cast = _itkDifferenceOfGaussiansGradientImageFilterPython.itkDifferenceOfGaussiansGradientImageFilterIUS3F_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def difference_of_gaussians_gradient_image_filter(*args, **kwargs):
    """Procedural interface for DifferenceOfGaussiansGradientImageFilter"""
    import itk
    instance = itk.DifferenceOfGaussiansGradientImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def difference_of_gaussians_gradient_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.DifferenceOfGaussiansGradientImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.DifferenceOfGaussiansGradientImageFilter.values()[0]
    else:
        filter_object = itk.DifferenceOfGaussiansGradientImageFilter

    difference_of_gaussians_gradient_image_filter.__doc__ = filter_object.__doc__
    difference_of_gaussians_gradient_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    difference_of_gaussians_gradient_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.DifferenceOfGaussiansGradientImageFilter, itkTemplate.itkTemplate):
        difference_of_gaussians_gradient_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        difference_of_gaussians_gradient_image_filter.__doc__ += "\n"
        difference_of_gaussians_gradient_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        difference_of_gaussians_gradient_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



