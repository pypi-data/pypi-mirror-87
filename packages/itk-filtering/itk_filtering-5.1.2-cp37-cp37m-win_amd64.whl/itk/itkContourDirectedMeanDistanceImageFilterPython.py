# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKDistanceMapPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkContourDirectedMeanDistanceImageFilterPython
else:
    import _itkContourDirectedMeanDistanceImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkContourDirectedMeanDistanceImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkContourDirectedMeanDistanceImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImageRegionPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.ITKCommonBasePython
import itk.itkImageToImageFilterAPython
import itk.itkImagePython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkRGBPixelPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython

def itkContourDirectedMeanDistanceImageFilterID2ID2_New():
    return itkContourDirectedMeanDistanceImageFilterID2ID2.New()

class itkContourDirectedMeanDistanceImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""


    Computes the directed Mean distance between the boundaries of non-zero
    pixel regions of two images.

    ContourDirectedMeanDistanceImageFilter computes the distance between
    the set non-zero pixels of two images using the following formula:
    \\[ h(A,B) = \\mathrm{mean}_{a \\in A} \\min_{b \\in B}
    \\| a - b\\| \\] where $A$ and $B$ are respectively the set of
    non-zero pixels in the first and second input images. It identifies
    the point $ a \\in A $ that is farthest from any point of $B$ and
    measures the distance from $a$ to the nearest neighbor in $B$. Note
    that this function is not is not symmetric and hence is not a true
    distance.

    In particular, this filter uses the SignedMaurerDistanceMapImageFilter
    inside to compute distance map from all non-zero pixels in the second
    image. It then computes the mean distance (in pixels) within the
    boundary pixels of non-zero regions in the first image.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:   SignedMaurerDistanceMapImageFilter

    Teo Popa, ISIS Center, Georgetown University 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID2ID2_Clone)
    SetInput1 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID2ID2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID2ID2_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID2ID2_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID2ID2_GetInput2)
    GetContourDirectedMeanDistance = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID2ID2_GetContourDirectedMeanDistance)
    SetUseImageSpacing = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID2ID2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID2ID2_GetUseImageSpacing)
    InputHasNumericTraitsCheck = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID2ID2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourDirectedMeanDistanceImageFilterPython.delete_itkContourDirectedMeanDistanceImageFilterID2ID2
    cast = _swig_new_static_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkContourDirectedMeanDistanceImageFilterID2ID2

        Create a new object of the class itkContourDirectedMeanDistanceImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourDirectedMeanDistanceImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourDirectedMeanDistanceImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourDirectedMeanDistanceImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourDirectedMeanDistanceImageFilterID2ID2 in _itkContourDirectedMeanDistanceImageFilterPython:
_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID2ID2_swigregister(itkContourDirectedMeanDistanceImageFilterID2ID2)
itkContourDirectedMeanDistanceImageFilterID2ID2___New_orig__ = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID2ID2___New_orig__
itkContourDirectedMeanDistanceImageFilterID2ID2_cast = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID2ID2_cast


def itkContourDirectedMeanDistanceImageFilterID3ID3_New():
    return itkContourDirectedMeanDistanceImageFilterID3ID3.New()

class itkContourDirectedMeanDistanceImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""


    Computes the directed Mean distance between the boundaries of non-zero
    pixel regions of two images.

    ContourDirectedMeanDistanceImageFilter computes the distance between
    the set non-zero pixels of two images using the following formula:
    \\[ h(A,B) = \\mathrm{mean}_{a \\in A} \\min_{b \\in B}
    \\| a - b\\| \\] where $A$ and $B$ are respectively the set of
    non-zero pixels in the first and second input images. It identifies
    the point $ a \\in A $ that is farthest from any point of $B$ and
    measures the distance from $a$ to the nearest neighbor in $B$. Note
    that this function is not is not symmetric and hence is not a true
    distance.

    In particular, this filter uses the SignedMaurerDistanceMapImageFilter
    inside to compute distance map from all non-zero pixels in the second
    image. It then computes the mean distance (in pixels) within the
    boundary pixels of non-zero regions in the first image.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:   SignedMaurerDistanceMapImageFilter

    Teo Popa, ISIS Center, Georgetown University 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID3ID3_Clone)
    SetInput1 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID3ID3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID3ID3_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID3ID3_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID3ID3_GetInput2)
    GetContourDirectedMeanDistance = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID3ID3_GetContourDirectedMeanDistance)
    SetUseImageSpacing = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID3ID3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID3ID3_GetUseImageSpacing)
    InputHasNumericTraitsCheck = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID3ID3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourDirectedMeanDistanceImageFilterPython.delete_itkContourDirectedMeanDistanceImageFilterID3ID3
    cast = _swig_new_static_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkContourDirectedMeanDistanceImageFilterID3ID3

        Create a new object of the class itkContourDirectedMeanDistanceImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourDirectedMeanDistanceImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourDirectedMeanDistanceImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourDirectedMeanDistanceImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourDirectedMeanDistanceImageFilterID3ID3 in _itkContourDirectedMeanDistanceImageFilterPython:
_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID3ID3_swigregister(itkContourDirectedMeanDistanceImageFilterID3ID3)
itkContourDirectedMeanDistanceImageFilterID3ID3___New_orig__ = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID3ID3___New_orig__
itkContourDirectedMeanDistanceImageFilterID3ID3_cast = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID3ID3_cast


def itkContourDirectedMeanDistanceImageFilterIF2IF2_New():
    return itkContourDirectedMeanDistanceImageFilterIF2IF2.New()

class itkContourDirectedMeanDistanceImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""


    Computes the directed Mean distance between the boundaries of non-zero
    pixel regions of two images.

    ContourDirectedMeanDistanceImageFilter computes the distance between
    the set non-zero pixels of two images using the following formula:
    \\[ h(A,B) = \\mathrm{mean}_{a \\in A} \\min_{b \\in B}
    \\| a - b\\| \\] where $A$ and $B$ are respectively the set of
    non-zero pixels in the first and second input images. It identifies
    the point $ a \\in A $ that is farthest from any point of $B$ and
    measures the distance from $a$ to the nearest neighbor in $B$. Note
    that this function is not is not symmetric and hence is not a true
    distance.

    In particular, this filter uses the SignedMaurerDistanceMapImageFilter
    inside to compute distance map from all non-zero pixels in the second
    image. It then computes the mean distance (in pixels) within the
    boundary pixels of non-zero regions in the first image.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:   SignedMaurerDistanceMapImageFilter

    Teo Popa, ISIS Center, Georgetown University 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF2IF2_Clone)
    SetInput1 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF2IF2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF2IF2_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF2IF2_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF2IF2_GetInput2)
    GetContourDirectedMeanDistance = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF2IF2_GetContourDirectedMeanDistance)
    SetUseImageSpacing = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF2IF2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF2IF2_GetUseImageSpacing)
    InputHasNumericTraitsCheck = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF2IF2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourDirectedMeanDistanceImageFilterPython.delete_itkContourDirectedMeanDistanceImageFilterIF2IF2
    cast = _swig_new_static_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkContourDirectedMeanDistanceImageFilterIF2IF2

        Create a new object of the class itkContourDirectedMeanDistanceImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourDirectedMeanDistanceImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourDirectedMeanDistanceImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourDirectedMeanDistanceImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourDirectedMeanDistanceImageFilterIF2IF2 in _itkContourDirectedMeanDistanceImageFilterPython:
_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF2IF2_swigregister(itkContourDirectedMeanDistanceImageFilterIF2IF2)
itkContourDirectedMeanDistanceImageFilterIF2IF2___New_orig__ = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF2IF2___New_orig__
itkContourDirectedMeanDistanceImageFilterIF2IF2_cast = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF2IF2_cast


def itkContourDirectedMeanDistanceImageFilterIF3IF3_New():
    return itkContourDirectedMeanDistanceImageFilterIF3IF3.New()

class itkContourDirectedMeanDistanceImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""


    Computes the directed Mean distance between the boundaries of non-zero
    pixel regions of two images.

    ContourDirectedMeanDistanceImageFilter computes the distance between
    the set non-zero pixels of two images using the following formula:
    \\[ h(A,B) = \\mathrm{mean}_{a \\in A} \\min_{b \\in B}
    \\| a - b\\| \\] where $A$ and $B$ are respectively the set of
    non-zero pixels in the first and second input images. It identifies
    the point $ a \\in A $ that is farthest from any point of $B$ and
    measures the distance from $a$ to the nearest neighbor in $B$. Note
    that this function is not is not symmetric and hence is not a true
    distance.

    In particular, this filter uses the SignedMaurerDistanceMapImageFilter
    inside to compute distance map from all non-zero pixels in the second
    image. It then computes the mean distance (in pixels) within the
    boundary pixels of non-zero regions in the first image.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:   SignedMaurerDistanceMapImageFilter

    Teo Popa, ISIS Center, Georgetown University 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF3IF3_Clone)
    SetInput1 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF3IF3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF3IF3_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF3IF3_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF3IF3_GetInput2)
    GetContourDirectedMeanDistance = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF3IF3_GetContourDirectedMeanDistance)
    SetUseImageSpacing = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF3IF3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF3IF3_GetUseImageSpacing)
    InputHasNumericTraitsCheck = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF3IF3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourDirectedMeanDistanceImageFilterPython.delete_itkContourDirectedMeanDistanceImageFilterIF3IF3
    cast = _swig_new_static_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkContourDirectedMeanDistanceImageFilterIF3IF3

        Create a new object of the class itkContourDirectedMeanDistanceImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourDirectedMeanDistanceImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourDirectedMeanDistanceImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourDirectedMeanDistanceImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourDirectedMeanDistanceImageFilterIF3IF3 in _itkContourDirectedMeanDistanceImageFilterPython:
_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF3IF3_swigregister(itkContourDirectedMeanDistanceImageFilterIF3IF3)
itkContourDirectedMeanDistanceImageFilterIF3IF3___New_orig__ = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF3IF3___New_orig__
itkContourDirectedMeanDistanceImageFilterIF3IF3_cast = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF3IF3_cast


def itkContourDirectedMeanDistanceImageFilterISS2ISS2_New():
    return itkContourDirectedMeanDistanceImageFilterISS2ISS2.New()

class itkContourDirectedMeanDistanceImageFilterISS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""


    Computes the directed Mean distance between the boundaries of non-zero
    pixel regions of two images.

    ContourDirectedMeanDistanceImageFilter computes the distance between
    the set non-zero pixels of two images using the following formula:
    \\[ h(A,B) = \\mathrm{mean}_{a \\in A} \\min_{b \\in B}
    \\| a - b\\| \\] where $A$ and $B$ are respectively the set of
    non-zero pixels in the first and second input images. It identifies
    the point $ a \\in A $ that is farthest from any point of $B$ and
    measures the distance from $a$ to the nearest neighbor in $B$. Note
    that this function is not is not symmetric and hence is not a true
    distance.

    In particular, this filter uses the SignedMaurerDistanceMapImageFilter
    inside to compute distance map from all non-zero pixels in the second
    image. It then computes the mean distance (in pixels) within the
    boundary pixels of non-zero regions in the first image.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:   SignedMaurerDistanceMapImageFilter

    Teo Popa, ISIS Center, Georgetown University 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS2ISS2_Clone)
    SetInput1 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS2ISS2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS2ISS2_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS2ISS2_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS2ISS2_GetInput2)
    GetContourDirectedMeanDistance = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS2ISS2_GetContourDirectedMeanDistance)
    SetUseImageSpacing = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS2ISS2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS2ISS2_GetUseImageSpacing)
    InputHasNumericTraitsCheck = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS2ISS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourDirectedMeanDistanceImageFilterPython.delete_itkContourDirectedMeanDistanceImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkContourDirectedMeanDistanceImageFilterISS2ISS2

        Create a new object of the class itkContourDirectedMeanDistanceImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourDirectedMeanDistanceImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourDirectedMeanDistanceImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourDirectedMeanDistanceImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourDirectedMeanDistanceImageFilterISS2ISS2 in _itkContourDirectedMeanDistanceImageFilterPython:
_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS2ISS2_swigregister(itkContourDirectedMeanDistanceImageFilterISS2ISS2)
itkContourDirectedMeanDistanceImageFilterISS2ISS2___New_orig__ = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS2ISS2___New_orig__
itkContourDirectedMeanDistanceImageFilterISS2ISS2_cast = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS2ISS2_cast


def itkContourDirectedMeanDistanceImageFilterISS3ISS3_New():
    return itkContourDirectedMeanDistanceImageFilterISS3ISS3.New()

class itkContourDirectedMeanDistanceImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""


    Computes the directed Mean distance between the boundaries of non-zero
    pixel regions of two images.

    ContourDirectedMeanDistanceImageFilter computes the distance between
    the set non-zero pixels of two images using the following formula:
    \\[ h(A,B) = \\mathrm{mean}_{a \\in A} \\min_{b \\in B}
    \\| a - b\\| \\] where $A$ and $B$ are respectively the set of
    non-zero pixels in the first and second input images. It identifies
    the point $ a \\in A $ that is farthest from any point of $B$ and
    measures the distance from $a$ to the nearest neighbor in $B$. Note
    that this function is not is not symmetric and hence is not a true
    distance.

    In particular, this filter uses the SignedMaurerDistanceMapImageFilter
    inside to compute distance map from all non-zero pixels in the second
    image. It then computes the mean distance (in pixels) within the
    boundary pixels of non-zero regions in the first image.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:   SignedMaurerDistanceMapImageFilter

    Teo Popa, ISIS Center, Georgetown University 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS3ISS3_Clone)
    SetInput1 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS3ISS3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS3ISS3_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS3ISS3_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS3ISS3_GetInput2)
    GetContourDirectedMeanDistance = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS3ISS3_GetContourDirectedMeanDistance)
    SetUseImageSpacing = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS3ISS3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS3ISS3_GetUseImageSpacing)
    InputHasNumericTraitsCheck = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS3ISS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourDirectedMeanDistanceImageFilterPython.delete_itkContourDirectedMeanDistanceImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkContourDirectedMeanDistanceImageFilterISS3ISS3

        Create a new object of the class itkContourDirectedMeanDistanceImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourDirectedMeanDistanceImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourDirectedMeanDistanceImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourDirectedMeanDistanceImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourDirectedMeanDistanceImageFilterISS3ISS3 in _itkContourDirectedMeanDistanceImageFilterPython:
_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS3ISS3_swigregister(itkContourDirectedMeanDistanceImageFilterISS3ISS3)
itkContourDirectedMeanDistanceImageFilterISS3ISS3___New_orig__ = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS3ISS3___New_orig__
itkContourDirectedMeanDistanceImageFilterISS3ISS3_cast = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS3ISS3_cast


def itkContourDirectedMeanDistanceImageFilterIUC2ID2_New():
    return itkContourDirectedMeanDistanceImageFilterIUC2ID2.New()

class itkContourDirectedMeanDistanceImageFilterIUC2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""


    Computes the directed Mean distance between the boundaries of non-zero
    pixel regions of two images.

    ContourDirectedMeanDistanceImageFilter computes the distance between
    the set non-zero pixels of two images using the following formula:
    \\[ h(A,B) = \\mathrm{mean}_{a \\in A} \\min_{b \\in B}
    \\| a - b\\| \\] where $A$ and $B$ are respectively the set of
    non-zero pixels in the first and second input images. It identifies
    the point $ a \\in A $ that is farthest from any point of $B$ and
    measures the distance from $a$ to the nearest neighbor in $B$. Note
    that this function is not is not symmetric and hence is not a true
    distance.

    In particular, this filter uses the SignedMaurerDistanceMapImageFilter
    inside to compute distance map from all non-zero pixels in the second
    image. It then computes the mean distance (in pixels) within the
    boundary pixels of non-zero regions in the first image.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:   SignedMaurerDistanceMapImageFilter

    Teo Popa, ISIS Center, Georgetown University 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2ID2_Clone)
    SetInput1 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2ID2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2ID2_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2ID2_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2ID2_GetInput2)
    GetContourDirectedMeanDistance = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2ID2_GetContourDirectedMeanDistance)
    SetUseImageSpacing = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2ID2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2ID2_GetUseImageSpacing)
    InputHasNumericTraitsCheck = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2ID2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourDirectedMeanDistanceImageFilterPython.delete_itkContourDirectedMeanDistanceImageFilterIUC2ID2
    cast = _swig_new_static_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkContourDirectedMeanDistanceImageFilterIUC2ID2

        Create a new object of the class itkContourDirectedMeanDistanceImageFilterIUC2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourDirectedMeanDistanceImageFilterIUC2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourDirectedMeanDistanceImageFilterIUC2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourDirectedMeanDistanceImageFilterIUC2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourDirectedMeanDistanceImageFilterIUC2ID2 in _itkContourDirectedMeanDistanceImageFilterPython:
_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2ID2_swigregister(itkContourDirectedMeanDistanceImageFilterIUC2ID2)
itkContourDirectedMeanDistanceImageFilterIUC2ID2___New_orig__ = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2ID2___New_orig__
itkContourDirectedMeanDistanceImageFilterIUC2ID2_cast = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2ID2_cast


def itkContourDirectedMeanDistanceImageFilterIUC2IF2_New():
    return itkContourDirectedMeanDistanceImageFilterIUC2IF2.New()

class itkContourDirectedMeanDistanceImageFilterIUC2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""


    Computes the directed Mean distance between the boundaries of non-zero
    pixel regions of two images.

    ContourDirectedMeanDistanceImageFilter computes the distance between
    the set non-zero pixels of two images using the following formula:
    \\[ h(A,B) = \\mathrm{mean}_{a \\in A} \\min_{b \\in B}
    \\| a - b\\| \\] where $A$ and $B$ are respectively the set of
    non-zero pixels in the first and second input images. It identifies
    the point $ a \\in A $ that is farthest from any point of $B$ and
    measures the distance from $a$ to the nearest neighbor in $B$. Note
    that this function is not is not symmetric and hence is not a true
    distance.

    In particular, this filter uses the SignedMaurerDistanceMapImageFilter
    inside to compute distance map from all non-zero pixels in the second
    image. It then computes the mean distance (in pixels) within the
    boundary pixels of non-zero regions in the first image.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:   SignedMaurerDistanceMapImageFilter

    Teo Popa, ISIS Center, Georgetown University 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2IF2_Clone)
    SetInput1 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2IF2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2IF2_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2IF2_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2IF2_GetInput2)
    GetContourDirectedMeanDistance = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2IF2_GetContourDirectedMeanDistance)
    SetUseImageSpacing = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2IF2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2IF2_GetUseImageSpacing)
    InputHasNumericTraitsCheck = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2IF2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourDirectedMeanDistanceImageFilterPython.delete_itkContourDirectedMeanDistanceImageFilterIUC2IF2
    cast = _swig_new_static_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkContourDirectedMeanDistanceImageFilterIUC2IF2

        Create a new object of the class itkContourDirectedMeanDistanceImageFilterIUC2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourDirectedMeanDistanceImageFilterIUC2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourDirectedMeanDistanceImageFilterIUC2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourDirectedMeanDistanceImageFilterIUC2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourDirectedMeanDistanceImageFilterIUC2IF2 in _itkContourDirectedMeanDistanceImageFilterPython:
_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2IF2_swigregister(itkContourDirectedMeanDistanceImageFilterIUC2IF2)
itkContourDirectedMeanDistanceImageFilterIUC2IF2___New_orig__ = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2IF2___New_orig__
itkContourDirectedMeanDistanceImageFilterIUC2IF2_cast = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2IF2_cast


def itkContourDirectedMeanDistanceImageFilterIUC3ID3_New():
    return itkContourDirectedMeanDistanceImageFilterIUC3ID3.New()

class itkContourDirectedMeanDistanceImageFilterIUC3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""


    Computes the directed Mean distance between the boundaries of non-zero
    pixel regions of two images.

    ContourDirectedMeanDistanceImageFilter computes the distance between
    the set non-zero pixels of two images using the following formula:
    \\[ h(A,B) = \\mathrm{mean}_{a \\in A} \\min_{b \\in B}
    \\| a - b\\| \\] where $A$ and $B$ are respectively the set of
    non-zero pixels in the first and second input images. It identifies
    the point $ a \\in A $ that is farthest from any point of $B$ and
    measures the distance from $a$ to the nearest neighbor in $B$. Note
    that this function is not is not symmetric and hence is not a true
    distance.

    In particular, this filter uses the SignedMaurerDistanceMapImageFilter
    inside to compute distance map from all non-zero pixels in the second
    image. It then computes the mean distance (in pixels) within the
    boundary pixels of non-zero regions in the first image.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:   SignedMaurerDistanceMapImageFilter

    Teo Popa, ISIS Center, Georgetown University 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3ID3_Clone)
    SetInput1 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3ID3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3ID3_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3ID3_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3ID3_GetInput2)
    GetContourDirectedMeanDistance = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3ID3_GetContourDirectedMeanDistance)
    SetUseImageSpacing = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3ID3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3ID3_GetUseImageSpacing)
    InputHasNumericTraitsCheck = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3ID3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourDirectedMeanDistanceImageFilterPython.delete_itkContourDirectedMeanDistanceImageFilterIUC3ID3
    cast = _swig_new_static_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkContourDirectedMeanDistanceImageFilterIUC3ID3

        Create a new object of the class itkContourDirectedMeanDistanceImageFilterIUC3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourDirectedMeanDistanceImageFilterIUC3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourDirectedMeanDistanceImageFilterIUC3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourDirectedMeanDistanceImageFilterIUC3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourDirectedMeanDistanceImageFilterIUC3ID3 in _itkContourDirectedMeanDistanceImageFilterPython:
_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3ID3_swigregister(itkContourDirectedMeanDistanceImageFilterIUC3ID3)
itkContourDirectedMeanDistanceImageFilterIUC3ID3___New_orig__ = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3ID3___New_orig__
itkContourDirectedMeanDistanceImageFilterIUC3ID3_cast = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3ID3_cast


def itkContourDirectedMeanDistanceImageFilterIUC3IF3_New():
    return itkContourDirectedMeanDistanceImageFilterIUC3IF3.New()

class itkContourDirectedMeanDistanceImageFilterIUC3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""


    Computes the directed Mean distance between the boundaries of non-zero
    pixel regions of two images.

    ContourDirectedMeanDistanceImageFilter computes the distance between
    the set non-zero pixels of two images using the following formula:
    \\[ h(A,B) = \\mathrm{mean}_{a \\in A} \\min_{b \\in B}
    \\| a - b\\| \\] where $A$ and $B$ are respectively the set of
    non-zero pixels in the first and second input images. It identifies
    the point $ a \\in A $ that is farthest from any point of $B$ and
    measures the distance from $a$ to the nearest neighbor in $B$. Note
    that this function is not is not symmetric and hence is not a true
    distance.

    In particular, this filter uses the SignedMaurerDistanceMapImageFilter
    inside to compute distance map from all non-zero pixels in the second
    image. It then computes the mean distance (in pixels) within the
    boundary pixels of non-zero regions in the first image.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:   SignedMaurerDistanceMapImageFilter

    Teo Popa, ISIS Center, Georgetown University 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3IF3_Clone)
    SetInput1 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3IF3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3IF3_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3IF3_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3IF3_GetInput2)
    GetContourDirectedMeanDistance = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3IF3_GetContourDirectedMeanDistance)
    SetUseImageSpacing = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3IF3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3IF3_GetUseImageSpacing)
    InputHasNumericTraitsCheck = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3IF3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourDirectedMeanDistanceImageFilterPython.delete_itkContourDirectedMeanDistanceImageFilterIUC3IF3
    cast = _swig_new_static_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkContourDirectedMeanDistanceImageFilterIUC3IF3

        Create a new object of the class itkContourDirectedMeanDistanceImageFilterIUC3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourDirectedMeanDistanceImageFilterIUC3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourDirectedMeanDistanceImageFilterIUC3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourDirectedMeanDistanceImageFilterIUC3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourDirectedMeanDistanceImageFilterIUC3IF3 in _itkContourDirectedMeanDistanceImageFilterPython:
_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3IF3_swigregister(itkContourDirectedMeanDistanceImageFilterIUC3IF3)
itkContourDirectedMeanDistanceImageFilterIUC3IF3___New_orig__ = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3IF3___New_orig__
itkContourDirectedMeanDistanceImageFilterIUC3IF3_cast = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3IF3_cast


def itkContourDirectedMeanDistanceImageFilterIUS2ID2_New():
    return itkContourDirectedMeanDistanceImageFilterIUS2ID2.New()

class itkContourDirectedMeanDistanceImageFilterIUS2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""


    Computes the directed Mean distance between the boundaries of non-zero
    pixel regions of two images.

    ContourDirectedMeanDistanceImageFilter computes the distance between
    the set non-zero pixels of two images using the following formula:
    \\[ h(A,B) = \\mathrm{mean}_{a \\in A} \\min_{b \\in B}
    \\| a - b\\| \\] where $A$ and $B$ are respectively the set of
    non-zero pixels in the first and second input images. It identifies
    the point $ a \\in A $ that is farthest from any point of $B$ and
    measures the distance from $a$ to the nearest neighbor in $B$. Note
    that this function is not is not symmetric and hence is not a true
    distance.

    In particular, this filter uses the SignedMaurerDistanceMapImageFilter
    inside to compute distance map from all non-zero pixels in the second
    image. It then computes the mean distance (in pixels) within the
    boundary pixels of non-zero regions in the first image.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:   SignedMaurerDistanceMapImageFilter

    Teo Popa, ISIS Center, Georgetown University 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2ID2_Clone)
    SetInput1 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2ID2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2ID2_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2ID2_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2ID2_GetInput2)
    GetContourDirectedMeanDistance = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2ID2_GetContourDirectedMeanDistance)
    SetUseImageSpacing = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2ID2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2ID2_GetUseImageSpacing)
    InputHasNumericTraitsCheck = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2ID2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourDirectedMeanDistanceImageFilterPython.delete_itkContourDirectedMeanDistanceImageFilterIUS2ID2
    cast = _swig_new_static_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkContourDirectedMeanDistanceImageFilterIUS2ID2

        Create a new object of the class itkContourDirectedMeanDistanceImageFilterIUS2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourDirectedMeanDistanceImageFilterIUS2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourDirectedMeanDistanceImageFilterIUS2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourDirectedMeanDistanceImageFilterIUS2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourDirectedMeanDistanceImageFilterIUS2ID2 in _itkContourDirectedMeanDistanceImageFilterPython:
_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2ID2_swigregister(itkContourDirectedMeanDistanceImageFilterIUS2ID2)
itkContourDirectedMeanDistanceImageFilterIUS2ID2___New_orig__ = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2ID2___New_orig__
itkContourDirectedMeanDistanceImageFilterIUS2ID2_cast = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2ID2_cast


def itkContourDirectedMeanDistanceImageFilterIUS2IF2_New():
    return itkContourDirectedMeanDistanceImageFilterIUS2IF2.New()

class itkContourDirectedMeanDistanceImageFilterIUS2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""


    Computes the directed Mean distance between the boundaries of non-zero
    pixel regions of two images.

    ContourDirectedMeanDistanceImageFilter computes the distance between
    the set non-zero pixels of two images using the following formula:
    \\[ h(A,B) = \\mathrm{mean}_{a \\in A} \\min_{b \\in B}
    \\| a - b\\| \\] where $A$ and $B$ are respectively the set of
    non-zero pixels in the first and second input images. It identifies
    the point $ a \\in A $ that is farthest from any point of $B$ and
    measures the distance from $a$ to the nearest neighbor in $B$. Note
    that this function is not is not symmetric and hence is not a true
    distance.

    In particular, this filter uses the SignedMaurerDistanceMapImageFilter
    inside to compute distance map from all non-zero pixels in the second
    image. It then computes the mean distance (in pixels) within the
    boundary pixels of non-zero regions in the first image.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:   SignedMaurerDistanceMapImageFilter

    Teo Popa, ISIS Center, Georgetown University 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2IF2_Clone)
    SetInput1 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2IF2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2IF2_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2IF2_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2IF2_GetInput2)
    GetContourDirectedMeanDistance = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2IF2_GetContourDirectedMeanDistance)
    SetUseImageSpacing = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2IF2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2IF2_GetUseImageSpacing)
    InputHasNumericTraitsCheck = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2IF2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourDirectedMeanDistanceImageFilterPython.delete_itkContourDirectedMeanDistanceImageFilterIUS2IF2
    cast = _swig_new_static_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkContourDirectedMeanDistanceImageFilterIUS2IF2

        Create a new object of the class itkContourDirectedMeanDistanceImageFilterIUS2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourDirectedMeanDistanceImageFilterIUS2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourDirectedMeanDistanceImageFilterIUS2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourDirectedMeanDistanceImageFilterIUS2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourDirectedMeanDistanceImageFilterIUS2IF2 in _itkContourDirectedMeanDistanceImageFilterPython:
_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2IF2_swigregister(itkContourDirectedMeanDistanceImageFilterIUS2IF2)
itkContourDirectedMeanDistanceImageFilterIUS2IF2___New_orig__ = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2IF2___New_orig__
itkContourDirectedMeanDistanceImageFilterIUS2IF2_cast = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2IF2_cast


def itkContourDirectedMeanDistanceImageFilterIUS3ID3_New():
    return itkContourDirectedMeanDistanceImageFilterIUS3ID3.New()

class itkContourDirectedMeanDistanceImageFilterIUS3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""


    Computes the directed Mean distance between the boundaries of non-zero
    pixel regions of two images.

    ContourDirectedMeanDistanceImageFilter computes the distance between
    the set non-zero pixels of two images using the following formula:
    \\[ h(A,B) = \\mathrm{mean}_{a \\in A} \\min_{b \\in B}
    \\| a - b\\| \\] where $A$ and $B$ are respectively the set of
    non-zero pixels in the first and second input images. It identifies
    the point $ a \\in A $ that is farthest from any point of $B$ and
    measures the distance from $a$ to the nearest neighbor in $B$. Note
    that this function is not is not symmetric and hence is not a true
    distance.

    In particular, this filter uses the SignedMaurerDistanceMapImageFilter
    inside to compute distance map from all non-zero pixels in the second
    image. It then computes the mean distance (in pixels) within the
    boundary pixels of non-zero regions in the first image.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:   SignedMaurerDistanceMapImageFilter

    Teo Popa, ISIS Center, Georgetown University 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3ID3_Clone)
    SetInput1 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3ID3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3ID3_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3ID3_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3ID3_GetInput2)
    GetContourDirectedMeanDistance = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3ID3_GetContourDirectedMeanDistance)
    SetUseImageSpacing = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3ID3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3ID3_GetUseImageSpacing)
    InputHasNumericTraitsCheck = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3ID3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourDirectedMeanDistanceImageFilterPython.delete_itkContourDirectedMeanDistanceImageFilterIUS3ID3
    cast = _swig_new_static_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkContourDirectedMeanDistanceImageFilterIUS3ID3

        Create a new object of the class itkContourDirectedMeanDistanceImageFilterIUS3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourDirectedMeanDistanceImageFilterIUS3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourDirectedMeanDistanceImageFilterIUS3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourDirectedMeanDistanceImageFilterIUS3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourDirectedMeanDistanceImageFilterIUS3ID3 in _itkContourDirectedMeanDistanceImageFilterPython:
_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3ID3_swigregister(itkContourDirectedMeanDistanceImageFilterIUS3ID3)
itkContourDirectedMeanDistanceImageFilterIUS3ID3___New_orig__ = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3ID3___New_orig__
itkContourDirectedMeanDistanceImageFilterIUS3ID3_cast = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3ID3_cast


def itkContourDirectedMeanDistanceImageFilterIUS3IF3_New():
    return itkContourDirectedMeanDistanceImageFilterIUS3IF3.New()

class itkContourDirectedMeanDistanceImageFilterIUS3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""


    Computes the directed Mean distance between the boundaries of non-zero
    pixel regions of two images.

    ContourDirectedMeanDistanceImageFilter computes the distance between
    the set non-zero pixels of two images using the following formula:
    \\[ h(A,B) = \\mathrm{mean}_{a \\in A} \\min_{b \\in B}
    \\| a - b\\| \\] where $A$ and $B$ are respectively the set of
    non-zero pixels in the first and second input images. It identifies
    the point $ a \\in A $ that is farthest from any point of $B$ and
    measures the distance from $a$ to the nearest neighbor in $B$. Note
    that this function is not is not symmetric and hence is not a true
    distance.

    In particular, this filter uses the SignedMaurerDistanceMapImageFilter
    inside to compute distance map from all non-zero pixels in the second
    image. It then computes the mean distance (in pixels) within the
    boundary pixels of non-zero regions in the first image.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:   SignedMaurerDistanceMapImageFilter

    Teo Popa, ISIS Center, Georgetown University 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3IF3_Clone)
    SetInput1 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3IF3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3IF3_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3IF3_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3IF3_GetInput2)
    GetContourDirectedMeanDistance = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3IF3_GetContourDirectedMeanDistance)
    SetUseImageSpacing = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3IF3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3IF3_GetUseImageSpacing)
    InputHasNumericTraitsCheck = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3IF3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourDirectedMeanDistanceImageFilterPython.delete_itkContourDirectedMeanDistanceImageFilterIUS3IF3
    cast = _swig_new_static_method(_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkContourDirectedMeanDistanceImageFilterIUS3IF3

        Create a new object of the class itkContourDirectedMeanDistanceImageFilterIUS3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourDirectedMeanDistanceImageFilterIUS3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourDirectedMeanDistanceImageFilterIUS3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourDirectedMeanDistanceImageFilterIUS3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourDirectedMeanDistanceImageFilterIUS3IF3 in _itkContourDirectedMeanDistanceImageFilterPython:
_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3IF3_swigregister(itkContourDirectedMeanDistanceImageFilterIUS3IF3)
itkContourDirectedMeanDistanceImageFilterIUS3IF3___New_orig__ = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3IF3___New_orig__
itkContourDirectedMeanDistanceImageFilterIUS3IF3_cast = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3IF3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def contour_directed_mean_distance_image_filter(*args, **kwargs):
    """Procedural interface for ContourDirectedMeanDistanceImageFilter"""
    import itk
    instance = itk.ContourDirectedMeanDistanceImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def contour_directed_mean_distance_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ContourDirectedMeanDistanceImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.ContourDirectedMeanDistanceImageFilter.values()[0]
    else:
        filter_object = itk.ContourDirectedMeanDistanceImageFilter

    contour_directed_mean_distance_image_filter.__doc__ = filter_object.__doc__
    contour_directed_mean_distance_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    contour_directed_mean_distance_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.ContourDirectedMeanDistanceImageFilter, itkTemplate.itkTemplate):
        contour_directed_mean_distance_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        contour_directed_mean_distance_image_filter.__doc__ += "\n"
        contour_directed_mean_distance_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        contour_directed_mean_distance_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



