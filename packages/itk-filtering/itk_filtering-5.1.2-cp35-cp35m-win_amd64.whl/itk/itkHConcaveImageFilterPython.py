# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKMathematicalMorphologyPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkHConcaveImageFilterPython
else:
    import _itkHConcaveImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkHConcaveImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkHConcaveImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkFixedArrayPython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython

def itkHConcaveImageFilterID2ID2_New():
    return itkHConcaveImageFilterID2ID2.New()

class itkHConcaveImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""


    Identify local minima whose depth below the baseline is greater than
    h.

    HConcaveImageFilter extract local minima that are more than h
    intensity units below the (local) background. This has the effect of
    extracting objects that are darker than the background by at least h
    intensity units.

    This filter uses the HMinimaImageFilter.

    Geodesic morphology and the H-Convex algorithm is described in Chapter
    6 of Pierre Soille's book "Morphological Image Analysis: Principles
    and Applications", Second Edition, Springer, 2003.

    See:   GrayscaleGeodesicDilateImageFilter, HMaximaImageFilter,

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterID2ID2_Clone)
    SetHeight = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterID2ID2_SetHeight)
    GetHeight = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterID2ID2_GetHeight)
    SetFullyConnected = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterID2ID2_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterID2ID2_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterID2ID2_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterID2ID2_FullyConnectedOff)
    InputEqualityComparableCheck = _itkHConcaveImageFilterPython.itkHConcaveImageFilterID2ID2_InputEqualityComparableCheck
    
    IntConvertibleToInputCheck = _itkHConcaveImageFilterPython.itkHConcaveImageFilterID2ID2_IntConvertibleToInputCheck
    
    InputOStreamWritableCheck = _itkHConcaveImageFilterPython.itkHConcaveImageFilterID2ID2_InputOStreamWritableCheck
    
    __swig_destroy__ = _itkHConcaveImageFilterPython.delete_itkHConcaveImageFilterID2ID2
    cast = _swig_new_static_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkHConcaveImageFilterID2ID2

        Create a new object of the class itkHConcaveImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHConcaveImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHConcaveImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHConcaveImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHConcaveImageFilterID2ID2 in _itkHConcaveImageFilterPython:
_itkHConcaveImageFilterPython.itkHConcaveImageFilterID2ID2_swigregister(itkHConcaveImageFilterID2ID2)
itkHConcaveImageFilterID2ID2___New_orig__ = _itkHConcaveImageFilterPython.itkHConcaveImageFilterID2ID2___New_orig__
itkHConcaveImageFilterID2ID2_cast = _itkHConcaveImageFilterPython.itkHConcaveImageFilterID2ID2_cast


def itkHConcaveImageFilterID3ID3_New():
    return itkHConcaveImageFilterID3ID3.New()

class itkHConcaveImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""


    Identify local minima whose depth below the baseline is greater than
    h.

    HConcaveImageFilter extract local minima that are more than h
    intensity units below the (local) background. This has the effect of
    extracting objects that are darker than the background by at least h
    intensity units.

    This filter uses the HMinimaImageFilter.

    Geodesic morphology and the H-Convex algorithm is described in Chapter
    6 of Pierre Soille's book "Morphological Image Analysis: Principles
    and Applications", Second Edition, Springer, 2003.

    See:   GrayscaleGeodesicDilateImageFilter, HMaximaImageFilter,

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterID3ID3_Clone)
    SetHeight = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterID3ID3_SetHeight)
    GetHeight = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterID3ID3_GetHeight)
    SetFullyConnected = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterID3ID3_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterID3ID3_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterID3ID3_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterID3ID3_FullyConnectedOff)
    InputEqualityComparableCheck = _itkHConcaveImageFilterPython.itkHConcaveImageFilterID3ID3_InputEqualityComparableCheck
    
    IntConvertibleToInputCheck = _itkHConcaveImageFilterPython.itkHConcaveImageFilterID3ID3_IntConvertibleToInputCheck
    
    InputOStreamWritableCheck = _itkHConcaveImageFilterPython.itkHConcaveImageFilterID3ID3_InputOStreamWritableCheck
    
    __swig_destroy__ = _itkHConcaveImageFilterPython.delete_itkHConcaveImageFilterID3ID3
    cast = _swig_new_static_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkHConcaveImageFilterID3ID3

        Create a new object of the class itkHConcaveImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHConcaveImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHConcaveImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHConcaveImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHConcaveImageFilterID3ID3 in _itkHConcaveImageFilterPython:
_itkHConcaveImageFilterPython.itkHConcaveImageFilterID3ID3_swigregister(itkHConcaveImageFilterID3ID3)
itkHConcaveImageFilterID3ID3___New_orig__ = _itkHConcaveImageFilterPython.itkHConcaveImageFilterID3ID3___New_orig__
itkHConcaveImageFilterID3ID3_cast = _itkHConcaveImageFilterPython.itkHConcaveImageFilterID3ID3_cast


def itkHConcaveImageFilterIF2IF2_New():
    return itkHConcaveImageFilterIF2IF2.New()

class itkHConcaveImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""


    Identify local minima whose depth below the baseline is greater than
    h.

    HConcaveImageFilter extract local minima that are more than h
    intensity units below the (local) background. This has the effect of
    extracting objects that are darker than the background by at least h
    intensity units.

    This filter uses the HMinimaImageFilter.

    Geodesic morphology and the H-Convex algorithm is described in Chapter
    6 of Pierre Soille's book "Morphological Image Analysis: Principles
    and Applications", Second Edition, Springer, 2003.

    See:   GrayscaleGeodesicDilateImageFilter, HMaximaImageFilter,

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIF2IF2_Clone)
    SetHeight = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIF2IF2_SetHeight)
    GetHeight = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIF2IF2_GetHeight)
    SetFullyConnected = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIF2IF2_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIF2IF2_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIF2IF2_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIF2IF2_FullyConnectedOff)
    InputEqualityComparableCheck = _itkHConcaveImageFilterPython.itkHConcaveImageFilterIF2IF2_InputEqualityComparableCheck
    
    IntConvertibleToInputCheck = _itkHConcaveImageFilterPython.itkHConcaveImageFilterIF2IF2_IntConvertibleToInputCheck
    
    InputOStreamWritableCheck = _itkHConcaveImageFilterPython.itkHConcaveImageFilterIF2IF2_InputOStreamWritableCheck
    
    __swig_destroy__ = _itkHConcaveImageFilterPython.delete_itkHConcaveImageFilterIF2IF2
    cast = _swig_new_static_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkHConcaveImageFilterIF2IF2

        Create a new object of the class itkHConcaveImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHConcaveImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHConcaveImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHConcaveImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHConcaveImageFilterIF2IF2 in _itkHConcaveImageFilterPython:
_itkHConcaveImageFilterPython.itkHConcaveImageFilterIF2IF2_swigregister(itkHConcaveImageFilterIF2IF2)
itkHConcaveImageFilterIF2IF2___New_orig__ = _itkHConcaveImageFilterPython.itkHConcaveImageFilterIF2IF2___New_orig__
itkHConcaveImageFilterIF2IF2_cast = _itkHConcaveImageFilterPython.itkHConcaveImageFilterIF2IF2_cast


def itkHConcaveImageFilterIF3IF3_New():
    return itkHConcaveImageFilterIF3IF3.New()

class itkHConcaveImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""


    Identify local minima whose depth below the baseline is greater than
    h.

    HConcaveImageFilter extract local minima that are more than h
    intensity units below the (local) background. This has the effect of
    extracting objects that are darker than the background by at least h
    intensity units.

    This filter uses the HMinimaImageFilter.

    Geodesic morphology and the H-Convex algorithm is described in Chapter
    6 of Pierre Soille's book "Morphological Image Analysis: Principles
    and Applications", Second Edition, Springer, 2003.

    See:   GrayscaleGeodesicDilateImageFilter, HMaximaImageFilter,

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIF3IF3_Clone)
    SetHeight = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIF3IF3_SetHeight)
    GetHeight = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIF3IF3_GetHeight)
    SetFullyConnected = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIF3IF3_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIF3IF3_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIF3IF3_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIF3IF3_FullyConnectedOff)
    InputEqualityComparableCheck = _itkHConcaveImageFilterPython.itkHConcaveImageFilterIF3IF3_InputEqualityComparableCheck
    
    IntConvertibleToInputCheck = _itkHConcaveImageFilterPython.itkHConcaveImageFilterIF3IF3_IntConvertibleToInputCheck
    
    InputOStreamWritableCheck = _itkHConcaveImageFilterPython.itkHConcaveImageFilterIF3IF3_InputOStreamWritableCheck
    
    __swig_destroy__ = _itkHConcaveImageFilterPython.delete_itkHConcaveImageFilterIF3IF3
    cast = _swig_new_static_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkHConcaveImageFilterIF3IF3

        Create a new object of the class itkHConcaveImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHConcaveImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHConcaveImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHConcaveImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHConcaveImageFilterIF3IF3 in _itkHConcaveImageFilterPython:
_itkHConcaveImageFilterPython.itkHConcaveImageFilterIF3IF3_swigregister(itkHConcaveImageFilterIF3IF3)
itkHConcaveImageFilterIF3IF3___New_orig__ = _itkHConcaveImageFilterPython.itkHConcaveImageFilterIF3IF3___New_orig__
itkHConcaveImageFilterIF3IF3_cast = _itkHConcaveImageFilterPython.itkHConcaveImageFilterIF3IF3_cast


def itkHConcaveImageFilterISS2ISS2_New():
    return itkHConcaveImageFilterISS2ISS2.New()

class itkHConcaveImageFilterISS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""


    Identify local minima whose depth below the baseline is greater than
    h.

    HConcaveImageFilter extract local minima that are more than h
    intensity units below the (local) background. This has the effect of
    extracting objects that are darker than the background by at least h
    intensity units.

    This filter uses the HMinimaImageFilter.

    Geodesic morphology and the H-Convex algorithm is described in Chapter
    6 of Pierre Soille's book "Morphological Image Analysis: Principles
    and Applications", Second Edition, Springer, 2003.

    See:   GrayscaleGeodesicDilateImageFilter, HMaximaImageFilter,

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterISS2ISS2_Clone)
    SetHeight = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterISS2ISS2_SetHeight)
    GetHeight = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterISS2ISS2_GetHeight)
    SetFullyConnected = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterISS2ISS2_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterISS2ISS2_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterISS2ISS2_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterISS2ISS2_FullyConnectedOff)
    InputEqualityComparableCheck = _itkHConcaveImageFilterPython.itkHConcaveImageFilterISS2ISS2_InputEqualityComparableCheck
    
    IntConvertibleToInputCheck = _itkHConcaveImageFilterPython.itkHConcaveImageFilterISS2ISS2_IntConvertibleToInputCheck
    
    InputOStreamWritableCheck = _itkHConcaveImageFilterPython.itkHConcaveImageFilterISS2ISS2_InputOStreamWritableCheck
    
    __swig_destroy__ = _itkHConcaveImageFilterPython.delete_itkHConcaveImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkHConcaveImageFilterISS2ISS2

        Create a new object of the class itkHConcaveImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHConcaveImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHConcaveImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHConcaveImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHConcaveImageFilterISS2ISS2 in _itkHConcaveImageFilterPython:
_itkHConcaveImageFilterPython.itkHConcaveImageFilterISS2ISS2_swigregister(itkHConcaveImageFilterISS2ISS2)
itkHConcaveImageFilterISS2ISS2___New_orig__ = _itkHConcaveImageFilterPython.itkHConcaveImageFilterISS2ISS2___New_orig__
itkHConcaveImageFilterISS2ISS2_cast = _itkHConcaveImageFilterPython.itkHConcaveImageFilterISS2ISS2_cast


def itkHConcaveImageFilterISS3ISS3_New():
    return itkHConcaveImageFilterISS3ISS3.New()

class itkHConcaveImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""


    Identify local minima whose depth below the baseline is greater than
    h.

    HConcaveImageFilter extract local minima that are more than h
    intensity units below the (local) background. This has the effect of
    extracting objects that are darker than the background by at least h
    intensity units.

    This filter uses the HMinimaImageFilter.

    Geodesic morphology and the H-Convex algorithm is described in Chapter
    6 of Pierre Soille's book "Morphological Image Analysis: Principles
    and Applications", Second Edition, Springer, 2003.

    See:   GrayscaleGeodesicDilateImageFilter, HMaximaImageFilter,

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterISS3ISS3_Clone)
    SetHeight = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterISS3ISS3_SetHeight)
    GetHeight = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterISS3ISS3_GetHeight)
    SetFullyConnected = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterISS3ISS3_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterISS3ISS3_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterISS3ISS3_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterISS3ISS3_FullyConnectedOff)
    InputEqualityComparableCheck = _itkHConcaveImageFilterPython.itkHConcaveImageFilterISS3ISS3_InputEqualityComparableCheck
    
    IntConvertibleToInputCheck = _itkHConcaveImageFilterPython.itkHConcaveImageFilterISS3ISS3_IntConvertibleToInputCheck
    
    InputOStreamWritableCheck = _itkHConcaveImageFilterPython.itkHConcaveImageFilterISS3ISS3_InputOStreamWritableCheck
    
    __swig_destroy__ = _itkHConcaveImageFilterPython.delete_itkHConcaveImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkHConcaveImageFilterISS3ISS3

        Create a new object of the class itkHConcaveImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHConcaveImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHConcaveImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHConcaveImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHConcaveImageFilterISS3ISS3 in _itkHConcaveImageFilterPython:
_itkHConcaveImageFilterPython.itkHConcaveImageFilterISS3ISS3_swigregister(itkHConcaveImageFilterISS3ISS3)
itkHConcaveImageFilterISS3ISS3___New_orig__ = _itkHConcaveImageFilterPython.itkHConcaveImageFilterISS3ISS3___New_orig__
itkHConcaveImageFilterISS3ISS3_cast = _itkHConcaveImageFilterPython.itkHConcaveImageFilterISS3ISS3_cast


def itkHConcaveImageFilterIUC2IUC2_New():
    return itkHConcaveImageFilterIUC2IUC2.New()

class itkHConcaveImageFilterIUC2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""


    Identify local minima whose depth below the baseline is greater than
    h.

    HConcaveImageFilter extract local minima that are more than h
    intensity units below the (local) background. This has the effect of
    extracting objects that are darker than the background by at least h
    intensity units.

    This filter uses the HMinimaImageFilter.

    Geodesic morphology and the H-Convex algorithm is described in Chapter
    6 of Pierre Soille's book "Morphological Image Analysis: Principles
    and Applications", Second Edition, Springer, 2003.

    See:   GrayscaleGeodesicDilateImageFilter, HMaximaImageFilter,

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIUC2IUC2_Clone)
    SetHeight = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIUC2IUC2_SetHeight)
    GetHeight = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIUC2IUC2_GetHeight)
    SetFullyConnected = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIUC2IUC2_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIUC2IUC2_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIUC2IUC2_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIUC2IUC2_FullyConnectedOff)
    InputEqualityComparableCheck = _itkHConcaveImageFilterPython.itkHConcaveImageFilterIUC2IUC2_InputEqualityComparableCheck
    
    IntConvertibleToInputCheck = _itkHConcaveImageFilterPython.itkHConcaveImageFilterIUC2IUC2_IntConvertibleToInputCheck
    
    InputOStreamWritableCheck = _itkHConcaveImageFilterPython.itkHConcaveImageFilterIUC2IUC2_InputOStreamWritableCheck
    
    __swig_destroy__ = _itkHConcaveImageFilterPython.delete_itkHConcaveImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkHConcaveImageFilterIUC2IUC2

        Create a new object of the class itkHConcaveImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHConcaveImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHConcaveImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHConcaveImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHConcaveImageFilterIUC2IUC2 in _itkHConcaveImageFilterPython:
_itkHConcaveImageFilterPython.itkHConcaveImageFilterIUC2IUC2_swigregister(itkHConcaveImageFilterIUC2IUC2)
itkHConcaveImageFilterIUC2IUC2___New_orig__ = _itkHConcaveImageFilterPython.itkHConcaveImageFilterIUC2IUC2___New_orig__
itkHConcaveImageFilterIUC2IUC2_cast = _itkHConcaveImageFilterPython.itkHConcaveImageFilterIUC2IUC2_cast


def itkHConcaveImageFilterIUC3IUC3_New():
    return itkHConcaveImageFilterIUC3IUC3.New()

class itkHConcaveImageFilterIUC3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""


    Identify local minima whose depth below the baseline is greater than
    h.

    HConcaveImageFilter extract local minima that are more than h
    intensity units below the (local) background. This has the effect of
    extracting objects that are darker than the background by at least h
    intensity units.

    This filter uses the HMinimaImageFilter.

    Geodesic morphology and the H-Convex algorithm is described in Chapter
    6 of Pierre Soille's book "Morphological Image Analysis: Principles
    and Applications", Second Edition, Springer, 2003.

    See:   GrayscaleGeodesicDilateImageFilter, HMaximaImageFilter,

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIUC3IUC3_Clone)
    SetHeight = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIUC3IUC3_SetHeight)
    GetHeight = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIUC3IUC3_GetHeight)
    SetFullyConnected = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIUC3IUC3_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIUC3IUC3_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIUC3IUC3_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIUC3IUC3_FullyConnectedOff)
    InputEqualityComparableCheck = _itkHConcaveImageFilterPython.itkHConcaveImageFilterIUC3IUC3_InputEqualityComparableCheck
    
    IntConvertibleToInputCheck = _itkHConcaveImageFilterPython.itkHConcaveImageFilterIUC3IUC3_IntConvertibleToInputCheck
    
    InputOStreamWritableCheck = _itkHConcaveImageFilterPython.itkHConcaveImageFilterIUC3IUC3_InputOStreamWritableCheck
    
    __swig_destroy__ = _itkHConcaveImageFilterPython.delete_itkHConcaveImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkHConcaveImageFilterIUC3IUC3

        Create a new object of the class itkHConcaveImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHConcaveImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHConcaveImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHConcaveImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHConcaveImageFilterIUC3IUC3 in _itkHConcaveImageFilterPython:
_itkHConcaveImageFilterPython.itkHConcaveImageFilterIUC3IUC3_swigregister(itkHConcaveImageFilterIUC3IUC3)
itkHConcaveImageFilterIUC3IUC3___New_orig__ = _itkHConcaveImageFilterPython.itkHConcaveImageFilterIUC3IUC3___New_orig__
itkHConcaveImageFilterIUC3IUC3_cast = _itkHConcaveImageFilterPython.itkHConcaveImageFilterIUC3IUC3_cast


def itkHConcaveImageFilterIUS2IUS2_New():
    return itkHConcaveImageFilterIUS2IUS2.New()

class itkHConcaveImageFilterIUS2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""


    Identify local minima whose depth below the baseline is greater than
    h.

    HConcaveImageFilter extract local minima that are more than h
    intensity units below the (local) background. This has the effect of
    extracting objects that are darker than the background by at least h
    intensity units.

    This filter uses the HMinimaImageFilter.

    Geodesic morphology and the H-Convex algorithm is described in Chapter
    6 of Pierre Soille's book "Morphological Image Analysis: Principles
    and Applications", Second Edition, Springer, 2003.

    See:   GrayscaleGeodesicDilateImageFilter, HMaximaImageFilter,

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIUS2IUS2_Clone)
    SetHeight = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIUS2IUS2_SetHeight)
    GetHeight = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIUS2IUS2_GetHeight)
    SetFullyConnected = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIUS2IUS2_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIUS2IUS2_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIUS2IUS2_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIUS2IUS2_FullyConnectedOff)
    InputEqualityComparableCheck = _itkHConcaveImageFilterPython.itkHConcaveImageFilterIUS2IUS2_InputEqualityComparableCheck
    
    IntConvertibleToInputCheck = _itkHConcaveImageFilterPython.itkHConcaveImageFilterIUS2IUS2_IntConvertibleToInputCheck
    
    InputOStreamWritableCheck = _itkHConcaveImageFilterPython.itkHConcaveImageFilterIUS2IUS2_InputOStreamWritableCheck
    
    __swig_destroy__ = _itkHConcaveImageFilterPython.delete_itkHConcaveImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkHConcaveImageFilterIUS2IUS2

        Create a new object of the class itkHConcaveImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHConcaveImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHConcaveImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHConcaveImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHConcaveImageFilterIUS2IUS2 in _itkHConcaveImageFilterPython:
_itkHConcaveImageFilterPython.itkHConcaveImageFilterIUS2IUS2_swigregister(itkHConcaveImageFilterIUS2IUS2)
itkHConcaveImageFilterIUS2IUS2___New_orig__ = _itkHConcaveImageFilterPython.itkHConcaveImageFilterIUS2IUS2___New_orig__
itkHConcaveImageFilterIUS2IUS2_cast = _itkHConcaveImageFilterPython.itkHConcaveImageFilterIUS2IUS2_cast


def itkHConcaveImageFilterIUS3IUS3_New():
    return itkHConcaveImageFilterIUS3IUS3.New()

class itkHConcaveImageFilterIUS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""


    Identify local minima whose depth below the baseline is greater than
    h.

    HConcaveImageFilter extract local minima that are more than h
    intensity units below the (local) background. This has the effect of
    extracting objects that are darker than the background by at least h
    intensity units.

    This filter uses the HMinimaImageFilter.

    Geodesic morphology and the H-Convex algorithm is described in Chapter
    6 of Pierre Soille's book "Morphological Image Analysis: Principles
    and Applications", Second Edition, Springer, 2003.

    See:   GrayscaleGeodesicDilateImageFilter, HMaximaImageFilter,

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIUS3IUS3_Clone)
    SetHeight = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIUS3IUS3_SetHeight)
    GetHeight = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIUS3IUS3_GetHeight)
    SetFullyConnected = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIUS3IUS3_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIUS3IUS3_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIUS3IUS3_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIUS3IUS3_FullyConnectedOff)
    InputEqualityComparableCheck = _itkHConcaveImageFilterPython.itkHConcaveImageFilterIUS3IUS3_InputEqualityComparableCheck
    
    IntConvertibleToInputCheck = _itkHConcaveImageFilterPython.itkHConcaveImageFilterIUS3IUS3_IntConvertibleToInputCheck
    
    InputOStreamWritableCheck = _itkHConcaveImageFilterPython.itkHConcaveImageFilterIUS3IUS3_InputOStreamWritableCheck
    
    __swig_destroy__ = _itkHConcaveImageFilterPython.delete_itkHConcaveImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkHConcaveImageFilterPython.itkHConcaveImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkHConcaveImageFilterIUS3IUS3

        Create a new object of the class itkHConcaveImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHConcaveImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHConcaveImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHConcaveImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHConcaveImageFilterIUS3IUS3 in _itkHConcaveImageFilterPython:
_itkHConcaveImageFilterPython.itkHConcaveImageFilterIUS3IUS3_swigregister(itkHConcaveImageFilterIUS3IUS3)
itkHConcaveImageFilterIUS3IUS3___New_orig__ = _itkHConcaveImageFilterPython.itkHConcaveImageFilterIUS3IUS3___New_orig__
itkHConcaveImageFilterIUS3IUS3_cast = _itkHConcaveImageFilterPython.itkHConcaveImageFilterIUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def h_concave_image_filter(*args, **kwargs):
    """Procedural interface for HConcaveImageFilter"""
    import itk
    instance = itk.HConcaveImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def h_concave_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.HConcaveImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.HConcaveImageFilter.values()[0]
    else:
        filter_object = itk.HConcaveImageFilter

    h_concave_image_filter.__doc__ = filter_object.__doc__
    h_concave_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    h_concave_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.HConcaveImageFilter, itkTemplate.itkTemplate):
        h_concave_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        h_concave_image_filter.__doc__ += "\n"
        h_concave_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        h_concave_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



