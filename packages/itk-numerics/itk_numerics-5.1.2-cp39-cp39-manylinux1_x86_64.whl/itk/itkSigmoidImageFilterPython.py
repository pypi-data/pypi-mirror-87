# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageIntensityPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkSigmoidImageFilterPython
else:
    import _itkSigmoidImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkSigmoidImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkSigmoidImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkRGBPixelPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterBPython

def itkSigmoidImageFilterID2ID2_Superclass_New():
    return itkSigmoidImageFilterID2ID2_Superclass.New()

class itkSigmoidImageFilterID2ID2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2ID2):
    r"""Proxy of C++ itkSigmoidImageFilterID2ID2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterID2ID2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterID2ID2_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterID2ID2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterID2ID2_Superclass_SetFunctor)
    __swig_destroy__ = _itkSigmoidImageFilterPython.delete_itkSigmoidImageFilterID2ID2_Superclass
    cast = _swig_new_static_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterID2ID2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkSigmoidImageFilterID2ID2_Superclass

        Create a new object of the class itkSigmoidImageFilterID2ID2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSigmoidImageFilterID2ID2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSigmoidImageFilterID2ID2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSigmoidImageFilterID2ID2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSigmoidImageFilterID2ID2_Superclass in _itkSigmoidImageFilterPython:
_itkSigmoidImageFilterPython.itkSigmoidImageFilterID2ID2_Superclass_swigregister(itkSigmoidImageFilterID2ID2_Superclass)
itkSigmoidImageFilterID2ID2_Superclass___New_orig__ = _itkSigmoidImageFilterPython.itkSigmoidImageFilterID2ID2_Superclass___New_orig__
itkSigmoidImageFilterID2ID2_Superclass_cast = _itkSigmoidImageFilterPython.itkSigmoidImageFilterID2ID2_Superclass_cast


def itkSigmoidImageFilterID3ID3_Superclass_New():
    return itkSigmoidImageFilterID3ID3_Superclass.New()

class itkSigmoidImageFilterID3ID3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3):
    r"""Proxy of C++ itkSigmoidImageFilterID3ID3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterID3ID3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterID3ID3_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterID3ID3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterID3ID3_Superclass_SetFunctor)
    __swig_destroy__ = _itkSigmoidImageFilterPython.delete_itkSigmoidImageFilterID3ID3_Superclass
    cast = _swig_new_static_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterID3ID3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkSigmoidImageFilterID3ID3_Superclass

        Create a new object of the class itkSigmoidImageFilterID3ID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSigmoidImageFilterID3ID3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSigmoidImageFilterID3ID3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSigmoidImageFilterID3ID3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSigmoidImageFilterID3ID3_Superclass in _itkSigmoidImageFilterPython:
_itkSigmoidImageFilterPython.itkSigmoidImageFilterID3ID3_Superclass_swigregister(itkSigmoidImageFilterID3ID3_Superclass)
itkSigmoidImageFilterID3ID3_Superclass___New_orig__ = _itkSigmoidImageFilterPython.itkSigmoidImageFilterID3ID3_Superclass___New_orig__
itkSigmoidImageFilterID3ID3_Superclass_cast = _itkSigmoidImageFilterPython.itkSigmoidImageFilterID3ID3_Superclass_cast


def itkSigmoidImageFilterIF2IF2_Superclass_New():
    return itkSigmoidImageFilterIF2IF2_Superclass.New()

class itkSigmoidImageFilterIF2IF2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IF2):
    r"""Proxy of C++ itkSigmoidImageFilterIF2IF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIF2IF2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIF2IF2_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIF2IF2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIF2IF2_Superclass_SetFunctor)
    __swig_destroy__ = _itkSigmoidImageFilterPython.delete_itkSigmoidImageFilterIF2IF2_Superclass
    cast = _swig_new_static_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIF2IF2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkSigmoidImageFilterIF2IF2_Superclass

        Create a new object of the class itkSigmoidImageFilterIF2IF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSigmoidImageFilterIF2IF2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSigmoidImageFilterIF2IF2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSigmoidImageFilterIF2IF2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSigmoidImageFilterIF2IF2_Superclass in _itkSigmoidImageFilterPython:
_itkSigmoidImageFilterPython.itkSigmoidImageFilterIF2IF2_Superclass_swigregister(itkSigmoidImageFilterIF2IF2_Superclass)
itkSigmoidImageFilterIF2IF2_Superclass___New_orig__ = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF2IF2_Superclass___New_orig__
itkSigmoidImageFilterIF2IF2_Superclass_cast = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF2IF2_Superclass_cast


def itkSigmoidImageFilterIF3IF3_Superclass_New():
    return itkSigmoidImageFilterIF3IF3_Superclass.New()

class itkSigmoidImageFilterIF3IF3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    r"""Proxy of C++ itkSigmoidImageFilterIF3IF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIF3IF3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIF3IF3_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIF3IF3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIF3IF3_Superclass_SetFunctor)
    __swig_destroy__ = _itkSigmoidImageFilterPython.delete_itkSigmoidImageFilterIF3IF3_Superclass
    cast = _swig_new_static_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIF3IF3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkSigmoidImageFilterIF3IF3_Superclass

        Create a new object of the class itkSigmoidImageFilterIF3IF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSigmoidImageFilterIF3IF3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSigmoidImageFilterIF3IF3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSigmoidImageFilterIF3IF3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSigmoidImageFilterIF3IF3_Superclass in _itkSigmoidImageFilterPython:
_itkSigmoidImageFilterPython.itkSigmoidImageFilterIF3IF3_Superclass_swigregister(itkSigmoidImageFilterIF3IF3_Superclass)
itkSigmoidImageFilterIF3IF3_Superclass___New_orig__ = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF3IF3_Superclass___New_orig__
itkSigmoidImageFilterIF3IF3_Superclass_cast = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF3IF3_Superclass_cast


def itkSigmoidImageFilterISS2ISS2_Superclass_New():
    return itkSigmoidImageFilterISS2ISS2_Superclass.New()

class itkSigmoidImageFilterISS2ISS2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2ISS2):
    r"""Proxy of C++ itkSigmoidImageFilterISS2ISS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterISS2ISS2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterISS2ISS2_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterISS2ISS2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterISS2ISS2_Superclass_SetFunctor)
    __swig_destroy__ = _itkSigmoidImageFilterPython.delete_itkSigmoidImageFilterISS2ISS2_Superclass
    cast = _swig_new_static_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterISS2ISS2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkSigmoidImageFilterISS2ISS2_Superclass

        Create a new object of the class itkSigmoidImageFilterISS2ISS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSigmoidImageFilterISS2ISS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSigmoidImageFilterISS2ISS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSigmoidImageFilterISS2ISS2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSigmoidImageFilterISS2ISS2_Superclass in _itkSigmoidImageFilterPython:
_itkSigmoidImageFilterPython.itkSigmoidImageFilterISS2ISS2_Superclass_swigregister(itkSigmoidImageFilterISS2ISS2_Superclass)
itkSigmoidImageFilterISS2ISS2_Superclass___New_orig__ = _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS2ISS2_Superclass___New_orig__
itkSigmoidImageFilterISS2ISS2_Superclass_cast = _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS2ISS2_Superclass_cast


def itkSigmoidImageFilterISS3ISS3_Superclass_New():
    return itkSigmoidImageFilterISS3ISS3_Superclass.New()

class itkSigmoidImageFilterISS3ISS3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3ISS3):
    r"""Proxy of C++ itkSigmoidImageFilterISS3ISS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterISS3ISS3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterISS3ISS3_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterISS3ISS3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterISS3ISS3_Superclass_SetFunctor)
    __swig_destroy__ = _itkSigmoidImageFilterPython.delete_itkSigmoidImageFilterISS3ISS3_Superclass
    cast = _swig_new_static_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterISS3ISS3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkSigmoidImageFilterISS3ISS3_Superclass

        Create a new object of the class itkSigmoidImageFilterISS3ISS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSigmoidImageFilterISS3ISS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSigmoidImageFilterISS3ISS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSigmoidImageFilterISS3ISS3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSigmoidImageFilterISS3ISS3_Superclass in _itkSigmoidImageFilterPython:
_itkSigmoidImageFilterPython.itkSigmoidImageFilterISS3ISS3_Superclass_swigregister(itkSigmoidImageFilterISS3ISS3_Superclass)
itkSigmoidImageFilterISS3ISS3_Superclass___New_orig__ = _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS3ISS3_Superclass___New_orig__
itkSigmoidImageFilterISS3ISS3_Superclass_cast = _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS3ISS3_Superclass_cast


def itkSigmoidImageFilterIUC2IUC2_Superclass_New():
    return itkSigmoidImageFilterIUC2IUC2_Superclass.New()

class itkSigmoidImageFilterIUC2IUC2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUC2):
    r"""Proxy of C++ itkSigmoidImageFilterIUC2IUC2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC2IUC2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC2IUC2_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC2IUC2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC2IUC2_Superclass_SetFunctor)
    __swig_destroy__ = _itkSigmoidImageFilterPython.delete_itkSigmoidImageFilterIUC2IUC2_Superclass
    cast = _swig_new_static_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC2IUC2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkSigmoidImageFilterIUC2IUC2_Superclass

        Create a new object of the class itkSigmoidImageFilterIUC2IUC2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSigmoidImageFilterIUC2IUC2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSigmoidImageFilterIUC2IUC2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSigmoidImageFilterIUC2IUC2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSigmoidImageFilterIUC2IUC2_Superclass in _itkSigmoidImageFilterPython:
_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC2IUC2_Superclass_swigregister(itkSigmoidImageFilterIUC2IUC2_Superclass)
itkSigmoidImageFilterIUC2IUC2_Superclass___New_orig__ = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC2IUC2_Superclass___New_orig__
itkSigmoidImageFilterIUC2IUC2_Superclass_cast = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC2IUC2_Superclass_cast


def itkSigmoidImageFilterIUC3IUC3_Superclass_New():
    return itkSigmoidImageFilterIUC3IUC3_Superclass.New()

class itkSigmoidImageFilterIUC3IUC3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUC3):
    r"""Proxy of C++ itkSigmoidImageFilterIUC3IUC3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC3IUC3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC3IUC3_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC3IUC3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC3IUC3_Superclass_SetFunctor)
    __swig_destroy__ = _itkSigmoidImageFilterPython.delete_itkSigmoidImageFilterIUC3IUC3_Superclass
    cast = _swig_new_static_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC3IUC3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkSigmoidImageFilterIUC3IUC3_Superclass

        Create a new object of the class itkSigmoidImageFilterIUC3IUC3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSigmoidImageFilterIUC3IUC3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSigmoidImageFilterIUC3IUC3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSigmoidImageFilterIUC3IUC3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSigmoidImageFilterIUC3IUC3_Superclass in _itkSigmoidImageFilterPython:
_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC3IUC3_Superclass_swigregister(itkSigmoidImageFilterIUC3IUC3_Superclass)
itkSigmoidImageFilterIUC3IUC3_Superclass___New_orig__ = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC3IUC3_Superclass___New_orig__
itkSigmoidImageFilterIUC3IUC3_Superclass_cast = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC3IUC3_Superclass_cast


def itkSigmoidImageFilterIUS2IUS2_Superclass_New():
    return itkSigmoidImageFilterIUS2IUS2_Superclass.New()

class itkSigmoidImageFilterIUS2IUS2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUS2):
    r"""Proxy of C++ itkSigmoidImageFilterIUS2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS2IUS2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS2IUS2_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS2IUS2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS2IUS2_Superclass_SetFunctor)
    __swig_destroy__ = _itkSigmoidImageFilterPython.delete_itkSigmoidImageFilterIUS2IUS2_Superclass
    cast = _swig_new_static_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS2IUS2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkSigmoidImageFilterIUS2IUS2_Superclass

        Create a new object of the class itkSigmoidImageFilterIUS2IUS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSigmoidImageFilterIUS2IUS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSigmoidImageFilterIUS2IUS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSigmoidImageFilterIUS2IUS2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSigmoidImageFilterIUS2IUS2_Superclass in _itkSigmoidImageFilterPython:
_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS2IUS2_Superclass_swigregister(itkSigmoidImageFilterIUS2IUS2_Superclass)
itkSigmoidImageFilterIUS2IUS2_Superclass___New_orig__ = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS2IUS2_Superclass___New_orig__
itkSigmoidImageFilterIUS2IUS2_Superclass_cast = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS2IUS2_Superclass_cast


def itkSigmoidImageFilterIUS3IUS3_Superclass_New():
    return itkSigmoidImageFilterIUS3IUS3_Superclass.New()

class itkSigmoidImageFilterIUS3IUS3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUS3):
    r"""Proxy of C++ itkSigmoidImageFilterIUS3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS3IUS3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS3IUS3_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS3IUS3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS3IUS3_Superclass_SetFunctor)
    __swig_destroy__ = _itkSigmoidImageFilterPython.delete_itkSigmoidImageFilterIUS3IUS3_Superclass
    cast = _swig_new_static_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS3IUS3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkSigmoidImageFilterIUS3IUS3_Superclass

        Create a new object of the class itkSigmoidImageFilterIUS3IUS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSigmoidImageFilterIUS3IUS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSigmoidImageFilterIUS3IUS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSigmoidImageFilterIUS3IUS3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSigmoidImageFilterIUS3IUS3_Superclass in _itkSigmoidImageFilterPython:
_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS3IUS3_Superclass_swigregister(itkSigmoidImageFilterIUS3IUS3_Superclass)
itkSigmoidImageFilterIUS3IUS3_Superclass___New_orig__ = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS3IUS3_Superclass___New_orig__
itkSigmoidImageFilterIUS3IUS3_Superclass_cast = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS3IUS3_Superclass_cast


def itkSigmoidImageFilterID2ID2_New():
    return itkSigmoidImageFilterID2ID2.New()

class itkSigmoidImageFilterID2ID2(itkSigmoidImageFilterID2ID2_Superclass):
    r"""


    Computes the sigmoid function pixel-wise.

    A linear transformation is applied first on the argument of the
    sigmoid function. The resulting total transform is given by

    \\[ f(x) = (Max-Min) \\cdot \\frac{1}{\\left(1+e^{- \\frac{
    x - \\beta }{\\alpha}}\\right)} + Min \\]

    Every output pixel is equal to f(x). Where x is the intensity of the
    homologous input pixel, and alpha and beta are user-provided
    constants. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterID2ID2_Clone)
    SetAlpha = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterID2ID2_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterID2ID2_GetAlpha)
    SetBeta = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterID2ID2_SetBeta)
    GetBeta = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterID2ID2_GetBeta)
    SetOutputMinimum = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterID2ID2_SetOutputMinimum)
    GetOutputMinimum = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterID2ID2_GetOutputMinimum)
    SetOutputMaximum = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterID2ID2_SetOutputMaximum)
    GetOutputMaximum = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterID2ID2_GetOutputMaximum)
    InputConvertibleToDoubleCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterID2ID2_InputConvertibleToDoubleCheck
    
    OutputAdditiveOperatorsCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterID2ID2_OutputAdditiveOperatorsCheck
    
    DoubleConvertibleToOutputCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterID2ID2_DoubleConvertibleToOutputCheck
    
    OutputTimesDoubleCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterID2ID2_OutputTimesDoubleCheck
    
    OutputDoubleAdditiveOperatorsCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterID2ID2_OutputDoubleAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkSigmoidImageFilterPython.delete_itkSigmoidImageFilterID2ID2
    cast = _swig_new_static_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkSigmoidImageFilterID2ID2

        Create a new object of the class itkSigmoidImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSigmoidImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSigmoidImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSigmoidImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSigmoidImageFilterID2ID2 in _itkSigmoidImageFilterPython:
_itkSigmoidImageFilterPython.itkSigmoidImageFilterID2ID2_swigregister(itkSigmoidImageFilterID2ID2)
itkSigmoidImageFilterID2ID2___New_orig__ = _itkSigmoidImageFilterPython.itkSigmoidImageFilterID2ID2___New_orig__
itkSigmoidImageFilterID2ID2_cast = _itkSigmoidImageFilterPython.itkSigmoidImageFilterID2ID2_cast


def itkSigmoidImageFilterID3ID3_New():
    return itkSigmoidImageFilterID3ID3.New()

class itkSigmoidImageFilterID3ID3(itkSigmoidImageFilterID3ID3_Superclass):
    r"""


    Computes the sigmoid function pixel-wise.

    A linear transformation is applied first on the argument of the
    sigmoid function. The resulting total transform is given by

    \\[ f(x) = (Max-Min) \\cdot \\frac{1}{\\left(1+e^{- \\frac{
    x - \\beta }{\\alpha}}\\right)} + Min \\]

    Every output pixel is equal to f(x). Where x is the intensity of the
    homologous input pixel, and alpha and beta are user-provided
    constants. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterID3ID3_Clone)
    SetAlpha = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterID3ID3_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterID3ID3_GetAlpha)
    SetBeta = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterID3ID3_SetBeta)
    GetBeta = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterID3ID3_GetBeta)
    SetOutputMinimum = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterID3ID3_SetOutputMinimum)
    GetOutputMinimum = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterID3ID3_GetOutputMinimum)
    SetOutputMaximum = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterID3ID3_SetOutputMaximum)
    GetOutputMaximum = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterID3ID3_GetOutputMaximum)
    InputConvertibleToDoubleCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterID3ID3_InputConvertibleToDoubleCheck
    
    OutputAdditiveOperatorsCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterID3ID3_OutputAdditiveOperatorsCheck
    
    DoubleConvertibleToOutputCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterID3ID3_DoubleConvertibleToOutputCheck
    
    OutputTimesDoubleCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterID3ID3_OutputTimesDoubleCheck
    
    OutputDoubleAdditiveOperatorsCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterID3ID3_OutputDoubleAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkSigmoidImageFilterPython.delete_itkSigmoidImageFilterID3ID3
    cast = _swig_new_static_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkSigmoidImageFilterID3ID3

        Create a new object of the class itkSigmoidImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSigmoidImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSigmoidImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSigmoidImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSigmoidImageFilterID3ID3 in _itkSigmoidImageFilterPython:
_itkSigmoidImageFilterPython.itkSigmoidImageFilterID3ID3_swigregister(itkSigmoidImageFilterID3ID3)
itkSigmoidImageFilterID3ID3___New_orig__ = _itkSigmoidImageFilterPython.itkSigmoidImageFilterID3ID3___New_orig__
itkSigmoidImageFilterID3ID3_cast = _itkSigmoidImageFilterPython.itkSigmoidImageFilterID3ID3_cast


def itkSigmoidImageFilterIF2IF2_New():
    return itkSigmoidImageFilterIF2IF2.New()

class itkSigmoidImageFilterIF2IF2(itkSigmoidImageFilterIF2IF2_Superclass):
    r"""


    Computes the sigmoid function pixel-wise.

    A linear transformation is applied first on the argument of the
    sigmoid function. The resulting total transform is given by

    \\[ f(x) = (Max-Min) \\cdot \\frac{1}{\\left(1+e^{- \\frac{
    x - \\beta }{\\alpha}}\\right)} + Min \\]

    Every output pixel is equal to f(x). Where x is the intensity of the
    homologous input pixel, and alpha and beta are user-provided
    constants. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIF2IF2_Clone)
    SetAlpha = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIF2IF2_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIF2IF2_GetAlpha)
    SetBeta = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIF2IF2_SetBeta)
    GetBeta = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIF2IF2_GetBeta)
    SetOutputMinimum = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIF2IF2_SetOutputMinimum)
    GetOutputMinimum = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIF2IF2_GetOutputMinimum)
    SetOutputMaximum = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIF2IF2_SetOutputMaximum)
    GetOutputMaximum = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIF2IF2_GetOutputMaximum)
    InputConvertibleToDoubleCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF2IF2_InputConvertibleToDoubleCheck
    
    OutputAdditiveOperatorsCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF2IF2_OutputAdditiveOperatorsCheck
    
    DoubleConvertibleToOutputCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF2IF2_DoubleConvertibleToOutputCheck
    
    OutputTimesDoubleCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF2IF2_OutputTimesDoubleCheck
    
    OutputDoubleAdditiveOperatorsCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF2IF2_OutputDoubleAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkSigmoidImageFilterPython.delete_itkSigmoidImageFilterIF2IF2
    cast = _swig_new_static_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkSigmoidImageFilterIF2IF2

        Create a new object of the class itkSigmoidImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSigmoidImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSigmoidImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSigmoidImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSigmoidImageFilterIF2IF2 in _itkSigmoidImageFilterPython:
_itkSigmoidImageFilterPython.itkSigmoidImageFilterIF2IF2_swigregister(itkSigmoidImageFilterIF2IF2)
itkSigmoidImageFilterIF2IF2___New_orig__ = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF2IF2___New_orig__
itkSigmoidImageFilterIF2IF2_cast = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF2IF2_cast


def itkSigmoidImageFilterIF3IF3_New():
    return itkSigmoidImageFilterIF3IF3.New()

class itkSigmoidImageFilterIF3IF3(itkSigmoidImageFilterIF3IF3_Superclass):
    r"""


    Computes the sigmoid function pixel-wise.

    A linear transformation is applied first on the argument of the
    sigmoid function. The resulting total transform is given by

    \\[ f(x) = (Max-Min) \\cdot \\frac{1}{\\left(1+e^{- \\frac{
    x - \\beta }{\\alpha}}\\right)} + Min \\]

    Every output pixel is equal to f(x). Where x is the intensity of the
    homologous input pixel, and alpha and beta are user-provided
    constants. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIF3IF3_Clone)
    SetAlpha = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIF3IF3_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIF3IF3_GetAlpha)
    SetBeta = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIF3IF3_SetBeta)
    GetBeta = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIF3IF3_GetBeta)
    SetOutputMinimum = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIF3IF3_SetOutputMinimum)
    GetOutputMinimum = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIF3IF3_GetOutputMinimum)
    SetOutputMaximum = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIF3IF3_SetOutputMaximum)
    GetOutputMaximum = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIF3IF3_GetOutputMaximum)
    InputConvertibleToDoubleCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF3IF3_InputConvertibleToDoubleCheck
    
    OutputAdditiveOperatorsCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF3IF3_OutputAdditiveOperatorsCheck
    
    DoubleConvertibleToOutputCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF3IF3_DoubleConvertibleToOutputCheck
    
    OutputTimesDoubleCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF3IF3_OutputTimesDoubleCheck
    
    OutputDoubleAdditiveOperatorsCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF3IF3_OutputDoubleAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkSigmoidImageFilterPython.delete_itkSigmoidImageFilterIF3IF3
    cast = _swig_new_static_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkSigmoidImageFilterIF3IF3

        Create a new object of the class itkSigmoidImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSigmoidImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSigmoidImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSigmoidImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSigmoidImageFilterIF3IF3 in _itkSigmoidImageFilterPython:
_itkSigmoidImageFilterPython.itkSigmoidImageFilterIF3IF3_swigregister(itkSigmoidImageFilterIF3IF3)
itkSigmoidImageFilterIF3IF3___New_orig__ = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF3IF3___New_orig__
itkSigmoidImageFilterIF3IF3_cast = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF3IF3_cast


def itkSigmoidImageFilterISS2ISS2_New():
    return itkSigmoidImageFilterISS2ISS2.New()

class itkSigmoidImageFilterISS2ISS2(itkSigmoidImageFilterISS2ISS2_Superclass):
    r"""


    Computes the sigmoid function pixel-wise.

    A linear transformation is applied first on the argument of the
    sigmoid function. The resulting total transform is given by

    \\[ f(x) = (Max-Min) \\cdot \\frac{1}{\\left(1+e^{- \\frac{
    x - \\beta }{\\alpha}}\\right)} + Min \\]

    Every output pixel is equal to f(x). Where x is the intensity of the
    homologous input pixel, and alpha and beta are user-provided
    constants. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterISS2ISS2_Clone)
    SetAlpha = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterISS2ISS2_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterISS2ISS2_GetAlpha)
    SetBeta = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterISS2ISS2_SetBeta)
    GetBeta = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterISS2ISS2_GetBeta)
    SetOutputMinimum = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterISS2ISS2_SetOutputMinimum)
    GetOutputMinimum = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterISS2ISS2_GetOutputMinimum)
    SetOutputMaximum = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterISS2ISS2_SetOutputMaximum)
    GetOutputMaximum = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterISS2ISS2_GetOutputMaximum)
    InputConvertibleToDoubleCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS2ISS2_InputConvertibleToDoubleCheck
    
    OutputAdditiveOperatorsCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS2ISS2_OutputAdditiveOperatorsCheck
    
    DoubleConvertibleToOutputCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS2ISS2_DoubleConvertibleToOutputCheck
    
    OutputTimesDoubleCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS2ISS2_OutputTimesDoubleCheck
    
    OutputDoubleAdditiveOperatorsCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS2ISS2_OutputDoubleAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkSigmoidImageFilterPython.delete_itkSigmoidImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkSigmoidImageFilterISS2ISS2

        Create a new object of the class itkSigmoidImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSigmoidImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSigmoidImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSigmoidImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSigmoidImageFilterISS2ISS2 in _itkSigmoidImageFilterPython:
_itkSigmoidImageFilterPython.itkSigmoidImageFilterISS2ISS2_swigregister(itkSigmoidImageFilterISS2ISS2)
itkSigmoidImageFilterISS2ISS2___New_orig__ = _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS2ISS2___New_orig__
itkSigmoidImageFilterISS2ISS2_cast = _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS2ISS2_cast


def itkSigmoidImageFilterISS3ISS3_New():
    return itkSigmoidImageFilterISS3ISS3.New()

class itkSigmoidImageFilterISS3ISS3(itkSigmoidImageFilterISS3ISS3_Superclass):
    r"""


    Computes the sigmoid function pixel-wise.

    A linear transformation is applied first on the argument of the
    sigmoid function. The resulting total transform is given by

    \\[ f(x) = (Max-Min) \\cdot \\frac{1}{\\left(1+e^{- \\frac{
    x - \\beta }{\\alpha}}\\right)} + Min \\]

    Every output pixel is equal to f(x). Where x is the intensity of the
    homologous input pixel, and alpha and beta are user-provided
    constants. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterISS3ISS3_Clone)
    SetAlpha = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterISS3ISS3_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterISS3ISS3_GetAlpha)
    SetBeta = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterISS3ISS3_SetBeta)
    GetBeta = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterISS3ISS3_GetBeta)
    SetOutputMinimum = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterISS3ISS3_SetOutputMinimum)
    GetOutputMinimum = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterISS3ISS3_GetOutputMinimum)
    SetOutputMaximum = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterISS3ISS3_SetOutputMaximum)
    GetOutputMaximum = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterISS3ISS3_GetOutputMaximum)
    InputConvertibleToDoubleCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS3ISS3_InputConvertibleToDoubleCheck
    
    OutputAdditiveOperatorsCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS3ISS3_OutputAdditiveOperatorsCheck
    
    DoubleConvertibleToOutputCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS3ISS3_DoubleConvertibleToOutputCheck
    
    OutputTimesDoubleCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS3ISS3_OutputTimesDoubleCheck
    
    OutputDoubleAdditiveOperatorsCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS3ISS3_OutputDoubleAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkSigmoidImageFilterPython.delete_itkSigmoidImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkSigmoidImageFilterISS3ISS3

        Create a new object of the class itkSigmoidImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSigmoidImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSigmoidImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSigmoidImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSigmoidImageFilterISS3ISS3 in _itkSigmoidImageFilterPython:
_itkSigmoidImageFilterPython.itkSigmoidImageFilterISS3ISS3_swigregister(itkSigmoidImageFilterISS3ISS3)
itkSigmoidImageFilterISS3ISS3___New_orig__ = _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS3ISS3___New_orig__
itkSigmoidImageFilterISS3ISS3_cast = _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS3ISS3_cast


def itkSigmoidImageFilterIUC2IUC2_New():
    return itkSigmoidImageFilterIUC2IUC2.New()

class itkSigmoidImageFilterIUC2IUC2(itkSigmoidImageFilterIUC2IUC2_Superclass):
    r"""


    Computes the sigmoid function pixel-wise.

    A linear transformation is applied first on the argument of the
    sigmoid function. The resulting total transform is given by

    \\[ f(x) = (Max-Min) \\cdot \\frac{1}{\\left(1+e^{- \\frac{
    x - \\beta }{\\alpha}}\\right)} + Min \\]

    Every output pixel is equal to f(x). Where x is the intensity of the
    homologous input pixel, and alpha and beta are user-provided
    constants. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC2IUC2_Clone)
    SetAlpha = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC2IUC2_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC2IUC2_GetAlpha)
    SetBeta = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC2IUC2_SetBeta)
    GetBeta = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC2IUC2_GetBeta)
    SetOutputMinimum = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC2IUC2_SetOutputMinimum)
    GetOutputMinimum = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC2IUC2_GetOutputMinimum)
    SetOutputMaximum = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC2IUC2_SetOutputMaximum)
    GetOutputMaximum = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC2IUC2_GetOutputMaximum)
    InputConvertibleToDoubleCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC2IUC2_InputConvertibleToDoubleCheck
    
    OutputAdditiveOperatorsCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC2IUC2_OutputAdditiveOperatorsCheck
    
    DoubleConvertibleToOutputCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC2IUC2_DoubleConvertibleToOutputCheck
    
    OutputTimesDoubleCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC2IUC2_OutputTimesDoubleCheck
    
    OutputDoubleAdditiveOperatorsCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC2IUC2_OutputDoubleAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkSigmoidImageFilterPython.delete_itkSigmoidImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkSigmoidImageFilterIUC2IUC2

        Create a new object of the class itkSigmoidImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSigmoidImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSigmoidImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSigmoidImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSigmoidImageFilterIUC2IUC2 in _itkSigmoidImageFilterPython:
_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC2IUC2_swigregister(itkSigmoidImageFilterIUC2IUC2)
itkSigmoidImageFilterIUC2IUC2___New_orig__ = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC2IUC2___New_orig__
itkSigmoidImageFilterIUC2IUC2_cast = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC2IUC2_cast


def itkSigmoidImageFilterIUC3IUC3_New():
    return itkSigmoidImageFilterIUC3IUC3.New()

class itkSigmoidImageFilterIUC3IUC3(itkSigmoidImageFilterIUC3IUC3_Superclass):
    r"""


    Computes the sigmoid function pixel-wise.

    A linear transformation is applied first on the argument of the
    sigmoid function. The resulting total transform is given by

    \\[ f(x) = (Max-Min) \\cdot \\frac{1}{\\left(1+e^{- \\frac{
    x - \\beta }{\\alpha}}\\right)} + Min \\]

    Every output pixel is equal to f(x). Where x is the intensity of the
    homologous input pixel, and alpha and beta are user-provided
    constants. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC3IUC3_Clone)
    SetAlpha = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC3IUC3_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC3IUC3_GetAlpha)
    SetBeta = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC3IUC3_SetBeta)
    GetBeta = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC3IUC3_GetBeta)
    SetOutputMinimum = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC3IUC3_SetOutputMinimum)
    GetOutputMinimum = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC3IUC3_GetOutputMinimum)
    SetOutputMaximum = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC3IUC3_SetOutputMaximum)
    GetOutputMaximum = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC3IUC3_GetOutputMaximum)
    InputConvertibleToDoubleCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC3IUC3_InputConvertibleToDoubleCheck
    
    OutputAdditiveOperatorsCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC3IUC3_OutputAdditiveOperatorsCheck
    
    DoubleConvertibleToOutputCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC3IUC3_DoubleConvertibleToOutputCheck
    
    OutputTimesDoubleCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC3IUC3_OutputTimesDoubleCheck
    
    OutputDoubleAdditiveOperatorsCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC3IUC3_OutputDoubleAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkSigmoidImageFilterPython.delete_itkSigmoidImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkSigmoidImageFilterIUC3IUC3

        Create a new object of the class itkSigmoidImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSigmoidImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSigmoidImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSigmoidImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSigmoidImageFilterIUC3IUC3 in _itkSigmoidImageFilterPython:
_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC3IUC3_swigregister(itkSigmoidImageFilterIUC3IUC3)
itkSigmoidImageFilterIUC3IUC3___New_orig__ = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC3IUC3___New_orig__
itkSigmoidImageFilterIUC3IUC3_cast = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC3IUC3_cast


def itkSigmoidImageFilterIUS2IUS2_New():
    return itkSigmoidImageFilterIUS2IUS2.New()

class itkSigmoidImageFilterIUS2IUS2(itkSigmoidImageFilterIUS2IUS2_Superclass):
    r"""


    Computes the sigmoid function pixel-wise.

    A linear transformation is applied first on the argument of the
    sigmoid function. The resulting total transform is given by

    \\[ f(x) = (Max-Min) \\cdot \\frac{1}{\\left(1+e^{- \\frac{
    x - \\beta }{\\alpha}}\\right)} + Min \\]

    Every output pixel is equal to f(x). Where x is the intensity of the
    homologous input pixel, and alpha and beta are user-provided
    constants. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS2IUS2_Clone)
    SetAlpha = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS2IUS2_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS2IUS2_GetAlpha)
    SetBeta = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS2IUS2_SetBeta)
    GetBeta = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS2IUS2_GetBeta)
    SetOutputMinimum = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS2IUS2_SetOutputMinimum)
    GetOutputMinimum = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS2IUS2_GetOutputMinimum)
    SetOutputMaximum = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS2IUS2_SetOutputMaximum)
    GetOutputMaximum = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS2IUS2_GetOutputMaximum)
    InputConvertibleToDoubleCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS2IUS2_InputConvertibleToDoubleCheck
    
    OutputAdditiveOperatorsCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS2IUS2_OutputAdditiveOperatorsCheck
    
    DoubleConvertibleToOutputCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS2IUS2_DoubleConvertibleToOutputCheck
    
    OutputTimesDoubleCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS2IUS2_OutputTimesDoubleCheck
    
    OutputDoubleAdditiveOperatorsCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS2IUS2_OutputDoubleAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkSigmoidImageFilterPython.delete_itkSigmoidImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSigmoidImageFilterIUS2IUS2

        Create a new object of the class itkSigmoidImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSigmoidImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSigmoidImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSigmoidImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSigmoidImageFilterIUS2IUS2 in _itkSigmoidImageFilterPython:
_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS2IUS2_swigregister(itkSigmoidImageFilterIUS2IUS2)
itkSigmoidImageFilterIUS2IUS2___New_orig__ = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS2IUS2___New_orig__
itkSigmoidImageFilterIUS2IUS2_cast = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS2IUS2_cast


def itkSigmoidImageFilterIUS3IUS3_New():
    return itkSigmoidImageFilterIUS3IUS3.New()

class itkSigmoidImageFilterIUS3IUS3(itkSigmoidImageFilterIUS3IUS3_Superclass):
    r"""


    Computes the sigmoid function pixel-wise.

    A linear transformation is applied first on the argument of the
    sigmoid function. The resulting total transform is given by

    \\[ f(x) = (Max-Min) \\cdot \\frac{1}{\\left(1+e^{- \\frac{
    x - \\beta }{\\alpha}}\\right)} + Min \\]

    Every output pixel is equal to f(x). Where x is the intensity of the
    homologous input pixel, and alpha and beta are user-provided
    constants. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS3IUS3_Clone)
    SetAlpha = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS3IUS3_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS3IUS3_GetAlpha)
    SetBeta = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS3IUS3_SetBeta)
    GetBeta = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS3IUS3_GetBeta)
    SetOutputMinimum = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS3IUS3_SetOutputMinimum)
    GetOutputMinimum = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS3IUS3_GetOutputMinimum)
    SetOutputMaximum = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS3IUS3_SetOutputMaximum)
    GetOutputMaximum = _swig_new_instance_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS3IUS3_GetOutputMaximum)
    InputConvertibleToDoubleCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS3IUS3_InputConvertibleToDoubleCheck
    
    OutputAdditiveOperatorsCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS3IUS3_OutputAdditiveOperatorsCheck
    
    DoubleConvertibleToOutputCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS3IUS3_DoubleConvertibleToOutputCheck
    
    OutputTimesDoubleCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS3IUS3_OutputTimesDoubleCheck
    
    OutputDoubleAdditiveOperatorsCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS3IUS3_OutputDoubleAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkSigmoidImageFilterPython.delete_itkSigmoidImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSigmoidImageFilterIUS3IUS3

        Create a new object of the class itkSigmoidImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSigmoidImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSigmoidImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSigmoidImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSigmoidImageFilterIUS3IUS3 in _itkSigmoidImageFilterPython:
_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS3IUS3_swigregister(itkSigmoidImageFilterIUS3IUS3)
itkSigmoidImageFilterIUS3IUS3___New_orig__ = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS3IUS3___New_orig__
itkSigmoidImageFilterIUS3IUS3_cast = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def sigmoid_image_filter(*args, **kwargs):
    """Procedural interface for SigmoidImageFilter"""
    import itk
    instance = itk.SigmoidImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def sigmoid_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.SigmoidImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.SigmoidImageFilter.values()[0]
    else:
        filter_object = itk.SigmoidImageFilter

    sigmoid_image_filter.__doc__ = filter_object.__doc__
    sigmoid_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    sigmoid_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.SigmoidImageFilter, itkTemplate.itkTemplate):
        sigmoid_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        sigmoid_image_filter.__doc__ += "\n"
        sigmoid_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        sigmoid_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])
import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def unary_functor_image_filter(*args, **kwargs):
    """Procedural interface for UnaryFunctorImageFilter"""
    import itk
    instance = itk.UnaryFunctorImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def unary_functor_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.UnaryFunctorImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.UnaryFunctorImageFilter.values()[0]
    else:
        filter_object = itk.UnaryFunctorImageFilter

    unary_functor_image_filter.__doc__ = filter_object.__doc__
    unary_functor_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    unary_functor_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.UnaryFunctorImageFilter, itkTemplate.itkTemplate):
        unary_functor_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        unary_functor_image_filter.__doc__ += "\n"
        unary_functor_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        unary_functor_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



