# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageFilterBasePython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkNeighborhoodOperatorImageFilterPython
else:
    import _itkNeighborhoodOperatorImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkNeighborhoodOperatorImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkNeighborhoodOperatorImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkIndexPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkOffsetPython
import itk.itkImageToImageFilterAPython
import itk.itkImagePython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkPointPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.ITKCommonBasePython
import itk.itkImageRegionPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkNeighborhoodPython
class itkImageBoundaryConditionD2D2(object):
    r"""


    A virtual base object that defines an interface to a class of boundary
    condition objects for use by neighborhood iterators.

    A boundary condition object supplies a phantom pixel value when given
    a neighborhood of (pointers to) image values, the (ND) index of the
    phantom pixel, and its (ND) offset from the boundary. The index of the
    phantom pixel is relative to the "upper left-hand corner" of the
    neighborhood (as opposed to its center).

    Associated Types Description

    PixelType The data type of the return value. PixelPointerType A
    pointer to PixelType. PixelPointerTypeNeighborhood A neighborhood of
    PixelPointerTypes that points to the pixel values in an image
    neighborhood. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetNameOfClass = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionD2D2_GetNameOfClass)
    Print = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionD2D2_Print)
    __call__ = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionD2D2___call__)
    __swig_destroy__ = _itkNeighborhoodOperatorImageFilterPython.delete_itkImageBoundaryConditionD2D2
    RequiresCompleteNeighborhood = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionD2D2_RequiresCompleteNeighborhood)
    GetInputRequestedRegion = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionD2D2_GetInputRequestedRegion)
    GetPixel = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionD2D2_GetPixel)

# Register itkImageBoundaryConditionD2D2 in _itkNeighborhoodOperatorImageFilterPython:
_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionD2D2_swigregister(itkImageBoundaryConditionD2D2)

class itkImageBoundaryConditionD3D3(object):
    r"""


    A virtual base object that defines an interface to a class of boundary
    condition objects for use by neighborhood iterators.

    A boundary condition object supplies a phantom pixel value when given
    a neighborhood of (pointers to) image values, the (ND) index of the
    phantom pixel, and its (ND) offset from the boundary. The index of the
    phantom pixel is relative to the "upper left-hand corner" of the
    neighborhood (as opposed to its center).

    Associated Types Description

    PixelType The data type of the return value. PixelPointerType A
    pointer to PixelType. PixelPointerTypeNeighborhood A neighborhood of
    PixelPointerTypes that points to the pixel values in an image
    neighborhood. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetNameOfClass = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionD3D3_GetNameOfClass)
    Print = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionD3D3_Print)
    __call__ = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionD3D3___call__)
    __swig_destroy__ = _itkNeighborhoodOperatorImageFilterPython.delete_itkImageBoundaryConditionD3D3
    RequiresCompleteNeighborhood = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionD3D3_RequiresCompleteNeighborhood)
    GetInputRequestedRegion = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionD3D3_GetInputRequestedRegion)
    GetPixel = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionD3D3_GetPixel)

# Register itkImageBoundaryConditionD3D3 in _itkNeighborhoodOperatorImageFilterPython:
_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionD3D3_swigregister(itkImageBoundaryConditionD3D3)

class itkImageBoundaryConditionF2F2(object):
    r"""


    A virtual base object that defines an interface to a class of boundary
    condition objects for use by neighborhood iterators.

    A boundary condition object supplies a phantom pixel value when given
    a neighborhood of (pointers to) image values, the (ND) index of the
    phantom pixel, and its (ND) offset from the boundary. The index of the
    phantom pixel is relative to the "upper left-hand corner" of the
    neighborhood (as opposed to its center).

    Associated Types Description

    PixelType The data type of the return value. PixelPointerType A
    pointer to PixelType. PixelPointerTypeNeighborhood A neighborhood of
    PixelPointerTypes that points to the pixel values in an image
    neighborhood. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetNameOfClass = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionF2F2_GetNameOfClass)
    Print = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionF2F2_Print)
    __call__ = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionF2F2___call__)
    __swig_destroy__ = _itkNeighborhoodOperatorImageFilterPython.delete_itkImageBoundaryConditionF2F2
    RequiresCompleteNeighborhood = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionF2F2_RequiresCompleteNeighborhood)
    GetInputRequestedRegion = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionF2F2_GetInputRequestedRegion)
    GetPixel = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionF2F2_GetPixel)

# Register itkImageBoundaryConditionF2F2 in _itkNeighborhoodOperatorImageFilterPython:
_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionF2F2_swigregister(itkImageBoundaryConditionF2F2)

class itkImageBoundaryConditionF3F3(object):
    r"""


    A virtual base object that defines an interface to a class of boundary
    condition objects for use by neighborhood iterators.

    A boundary condition object supplies a phantom pixel value when given
    a neighborhood of (pointers to) image values, the (ND) index of the
    phantom pixel, and its (ND) offset from the boundary. The index of the
    phantom pixel is relative to the "upper left-hand corner" of the
    neighborhood (as opposed to its center).

    Associated Types Description

    PixelType The data type of the return value. PixelPointerType A
    pointer to PixelType. PixelPointerTypeNeighborhood A neighborhood of
    PixelPointerTypes that points to the pixel values in an image
    neighborhood. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetNameOfClass = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionF3F3_GetNameOfClass)
    Print = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionF3F3_Print)
    __call__ = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionF3F3___call__)
    __swig_destroy__ = _itkNeighborhoodOperatorImageFilterPython.delete_itkImageBoundaryConditionF3F3
    RequiresCompleteNeighborhood = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionF3F3_RequiresCompleteNeighborhood)
    GetInputRequestedRegion = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionF3F3_GetInputRequestedRegion)
    GetPixel = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionF3F3_GetPixel)

# Register itkImageBoundaryConditionF3F3 in _itkNeighborhoodOperatorImageFilterPython:
_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionF3F3_swigregister(itkImageBoundaryConditionF3F3)

class itkImageBoundaryConditionSS2SS2(object):
    r"""


    A virtual base object that defines an interface to a class of boundary
    condition objects for use by neighborhood iterators.

    A boundary condition object supplies a phantom pixel value when given
    a neighborhood of (pointers to) image values, the (ND) index of the
    phantom pixel, and its (ND) offset from the boundary. The index of the
    phantom pixel is relative to the "upper left-hand corner" of the
    neighborhood (as opposed to its center).

    Associated Types Description

    PixelType The data type of the return value. PixelPointerType A
    pointer to PixelType. PixelPointerTypeNeighborhood A neighborhood of
    PixelPointerTypes that points to the pixel values in an image
    neighborhood. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetNameOfClass = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionSS2SS2_GetNameOfClass)
    Print = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionSS2SS2_Print)
    __call__ = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionSS2SS2___call__)
    __swig_destroy__ = _itkNeighborhoodOperatorImageFilterPython.delete_itkImageBoundaryConditionSS2SS2
    RequiresCompleteNeighborhood = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionSS2SS2_RequiresCompleteNeighborhood)
    GetInputRequestedRegion = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionSS2SS2_GetInputRequestedRegion)
    GetPixel = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionSS2SS2_GetPixel)

# Register itkImageBoundaryConditionSS2SS2 in _itkNeighborhoodOperatorImageFilterPython:
_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionSS2SS2_swigregister(itkImageBoundaryConditionSS2SS2)

class itkImageBoundaryConditionSS3SS3(object):
    r"""


    A virtual base object that defines an interface to a class of boundary
    condition objects for use by neighborhood iterators.

    A boundary condition object supplies a phantom pixel value when given
    a neighborhood of (pointers to) image values, the (ND) index of the
    phantom pixel, and its (ND) offset from the boundary. The index of the
    phantom pixel is relative to the "upper left-hand corner" of the
    neighborhood (as opposed to its center).

    Associated Types Description

    PixelType The data type of the return value. PixelPointerType A
    pointer to PixelType. PixelPointerTypeNeighborhood A neighborhood of
    PixelPointerTypes that points to the pixel values in an image
    neighborhood. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetNameOfClass = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionSS3SS3_GetNameOfClass)
    Print = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionSS3SS3_Print)
    __call__ = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionSS3SS3___call__)
    __swig_destroy__ = _itkNeighborhoodOperatorImageFilterPython.delete_itkImageBoundaryConditionSS3SS3
    RequiresCompleteNeighborhood = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionSS3SS3_RequiresCompleteNeighborhood)
    GetInputRequestedRegion = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionSS3SS3_GetInputRequestedRegion)
    GetPixel = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionSS3SS3_GetPixel)

# Register itkImageBoundaryConditionSS3SS3 in _itkNeighborhoodOperatorImageFilterPython:
_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionSS3SS3_swigregister(itkImageBoundaryConditionSS3SS3)

class itkImageBoundaryConditionUC2UC2(object):
    r"""


    A virtual base object that defines an interface to a class of boundary
    condition objects for use by neighborhood iterators.

    A boundary condition object supplies a phantom pixel value when given
    a neighborhood of (pointers to) image values, the (ND) index of the
    phantom pixel, and its (ND) offset from the boundary. The index of the
    phantom pixel is relative to the "upper left-hand corner" of the
    neighborhood (as opposed to its center).

    Associated Types Description

    PixelType The data type of the return value. PixelPointerType A
    pointer to PixelType. PixelPointerTypeNeighborhood A neighborhood of
    PixelPointerTypes that points to the pixel values in an image
    neighborhood. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetNameOfClass = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUC2UC2_GetNameOfClass)
    Print = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUC2UC2_Print)
    __call__ = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUC2UC2___call__)
    __swig_destroy__ = _itkNeighborhoodOperatorImageFilterPython.delete_itkImageBoundaryConditionUC2UC2
    RequiresCompleteNeighborhood = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUC2UC2_RequiresCompleteNeighborhood)
    GetInputRequestedRegion = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUC2UC2_GetInputRequestedRegion)
    GetPixel = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUC2UC2_GetPixel)

# Register itkImageBoundaryConditionUC2UC2 in _itkNeighborhoodOperatorImageFilterPython:
_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUC2UC2_swigregister(itkImageBoundaryConditionUC2UC2)

class itkImageBoundaryConditionUC3UC3(object):
    r"""


    A virtual base object that defines an interface to a class of boundary
    condition objects for use by neighborhood iterators.

    A boundary condition object supplies a phantom pixel value when given
    a neighborhood of (pointers to) image values, the (ND) index of the
    phantom pixel, and its (ND) offset from the boundary. The index of the
    phantom pixel is relative to the "upper left-hand corner" of the
    neighborhood (as opposed to its center).

    Associated Types Description

    PixelType The data type of the return value. PixelPointerType A
    pointer to PixelType. PixelPointerTypeNeighborhood A neighborhood of
    PixelPointerTypes that points to the pixel values in an image
    neighborhood. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetNameOfClass = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUC3UC3_GetNameOfClass)
    Print = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUC3UC3_Print)
    __call__ = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUC3UC3___call__)
    __swig_destroy__ = _itkNeighborhoodOperatorImageFilterPython.delete_itkImageBoundaryConditionUC3UC3
    RequiresCompleteNeighborhood = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUC3UC3_RequiresCompleteNeighborhood)
    GetInputRequestedRegion = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUC3UC3_GetInputRequestedRegion)
    GetPixel = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUC3UC3_GetPixel)

# Register itkImageBoundaryConditionUC3UC3 in _itkNeighborhoodOperatorImageFilterPython:
_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUC3UC3_swigregister(itkImageBoundaryConditionUC3UC3)

class itkImageBoundaryConditionUS2US2(object):
    r"""


    A virtual base object that defines an interface to a class of boundary
    condition objects for use by neighborhood iterators.

    A boundary condition object supplies a phantom pixel value when given
    a neighborhood of (pointers to) image values, the (ND) index of the
    phantom pixel, and its (ND) offset from the boundary. The index of the
    phantom pixel is relative to the "upper left-hand corner" of the
    neighborhood (as opposed to its center).

    Associated Types Description

    PixelType The data type of the return value. PixelPointerType A
    pointer to PixelType. PixelPointerTypeNeighborhood A neighborhood of
    PixelPointerTypes that points to the pixel values in an image
    neighborhood. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetNameOfClass = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUS2US2_GetNameOfClass)
    Print = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUS2US2_Print)
    __call__ = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUS2US2___call__)
    __swig_destroy__ = _itkNeighborhoodOperatorImageFilterPython.delete_itkImageBoundaryConditionUS2US2
    RequiresCompleteNeighborhood = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUS2US2_RequiresCompleteNeighborhood)
    GetInputRequestedRegion = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUS2US2_GetInputRequestedRegion)
    GetPixel = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUS2US2_GetPixel)

# Register itkImageBoundaryConditionUS2US2 in _itkNeighborhoodOperatorImageFilterPython:
_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUS2US2_swigregister(itkImageBoundaryConditionUS2US2)

class itkImageBoundaryConditionUS3US3(object):
    r"""


    A virtual base object that defines an interface to a class of boundary
    condition objects for use by neighborhood iterators.

    A boundary condition object supplies a phantom pixel value when given
    a neighborhood of (pointers to) image values, the (ND) index of the
    phantom pixel, and its (ND) offset from the boundary. The index of the
    phantom pixel is relative to the "upper left-hand corner" of the
    neighborhood (as opposed to its center).

    Associated Types Description

    PixelType The data type of the return value. PixelPointerType A
    pointer to PixelType. PixelPointerTypeNeighborhood A neighborhood of
    PixelPointerTypes that points to the pixel values in an image
    neighborhood. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetNameOfClass = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUS3US3_GetNameOfClass)
    Print = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUS3US3_Print)
    __call__ = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUS3US3___call__)
    __swig_destroy__ = _itkNeighborhoodOperatorImageFilterPython.delete_itkImageBoundaryConditionUS3US3
    RequiresCompleteNeighborhood = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUS3US3_RequiresCompleteNeighborhood)
    GetInputRequestedRegion = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUS3US3_GetInputRequestedRegion)
    GetPixel = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUS3US3_GetPixel)

# Register itkImageBoundaryConditionUS3US3 in _itkNeighborhoodOperatorImageFilterPython:
_itkNeighborhoodOperatorImageFilterPython.itkImageBoundaryConditionUS3US3_swigregister(itkImageBoundaryConditionUS3US3)


def itkNeighborhoodOperatorImageFilterD2D2D_New():
    return itkNeighborhoodOperatorImageFilterD2D2D.New()

class itkNeighborhoodOperatorImageFilterD2D2D(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""


    Applies a single NeighborhoodOperator to an image region.

    This filter calculates successive inner products between a single
    NeighborhoodOperator and a NeighborhoodIterator, which is swept across
    every pixel in an image region. For operators that are symmetric
    across their axes, the result is a fast convolution with the image
    region. Apply the mirror()'d operator for non-symmetric
    NeighborhoodOperators.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    example{Filtering/ImageFilterBase/ApplyKernelToEveryPixel,Apply Kernel
    To Every Pixel} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD2D2D___New_orig__)
    Clone = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD2D2D_Clone)
    SetOperator = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD2D2D_SetOperator)
    GetOperator = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD2D2D_GetOperator)
    OverrideBoundaryCondition = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD2D2D_OverrideBoundaryCondition)
    GetBoundaryCondition = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD2D2D_GetBoundaryCondition)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD2D2D_GenerateInputRequestedRegion)
    SameDimensionCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD2D2D_SameDimensionCheck
    
    OperatorConvertibleToOutputCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD2D2D_OperatorConvertibleToOutputCheck
    
    InputConvertibleToOperatorCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD2D2D_InputConvertibleToOperatorCheck
    
    OperatorMultiplyOperatorCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD2D2D_OperatorMultiplyOperatorCheck
    
    OperatorAdditiveOperatorsCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD2D2D_OperatorAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkNeighborhoodOperatorImageFilterPython.delete_itkNeighborhoodOperatorImageFilterD2D2D
    cast = _swig_new_static_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD2D2D_cast)

    def New(*args, **kargs):
        """New() -> itkNeighborhoodOperatorImageFilterD2D2D

        Create a new object of the class itkNeighborhoodOperatorImageFilterD2D2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNeighborhoodOperatorImageFilterD2D2D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNeighborhoodOperatorImageFilterD2D2D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNeighborhoodOperatorImageFilterD2D2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNeighborhoodOperatorImageFilterD2D2D in _itkNeighborhoodOperatorImageFilterPython:
_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD2D2D_swigregister(itkNeighborhoodOperatorImageFilterD2D2D)
itkNeighborhoodOperatorImageFilterD2D2D___New_orig__ = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD2D2D___New_orig__
itkNeighborhoodOperatorImageFilterD2D2D_cast = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD2D2D_cast


def itkNeighborhoodOperatorImageFilterD3D3D_New():
    return itkNeighborhoodOperatorImageFilterD3D3D.New()

class itkNeighborhoodOperatorImageFilterD3D3D(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""


    Applies a single NeighborhoodOperator to an image region.

    This filter calculates successive inner products between a single
    NeighborhoodOperator and a NeighborhoodIterator, which is swept across
    every pixel in an image region. For operators that are symmetric
    across their axes, the result is a fast convolution with the image
    region. Apply the mirror()'d operator for non-symmetric
    NeighborhoodOperators.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    example{Filtering/ImageFilterBase/ApplyKernelToEveryPixel,Apply Kernel
    To Every Pixel} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD3D3D___New_orig__)
    Clone = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD3D3D_Clone)
    SetOperator = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD3D3D_SetOperator)
    GetOperator = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD3D3D_GetOperator)
    OverrideBoundaryCondition = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD3D3D_OverrideBoundaryCondition)
    GetBoundaryCondition = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD3D3D_GetBoundaryCondition)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD3D3D_GenerateInputRequestedRegion)
    SameDimensionCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD3D3D_SameDimensionCheck
    
    OperatorConvertibleToOutputCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD3D3D_OperatorConvertibleToOutputCheck
    
    InputConvertibleToOperatorCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD3D3D_InputConvertibleToOperatorCheck
    
    OperatorMultiplyOperatorCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD3D3D_OperatorMultiplyOperatorCheck
    
    OperatorAdditiveOperatorsCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD3D3D_OperatorAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkNeighborhoodOperatorImageFilterPython.delete_itkNeighborhoodOperatorImageFilterD3D3D
    cast = _swig_new_static_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD3D3D_cast)

    def New(*args, **kargs):
        """New() -> itkNeighborhoodOperatorImageFilterD3D3D

        Create a new object of the class itkNeighborhoodOperatorImageFilterD3D3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNeighborhoodOperatorImageFilterD3D3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNeighborhoodOperatorImageFilterD3D3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNeighborhoodOperatorImageFilterD3D3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNeighborhoodOperatorImageFilterD3D3D in _itkNeighborhoodOperatorImageFilterPython:
_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD3D3D_swigregister(itkNeighborhoodOperatorImageFilterD3D3D)
itkNeighborhoodOperatorImageFilterD3D3D___New_orig__ = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD3D3D___New_orig__
itkNeighborhoodOperatorImageFilterD3D3D_cast = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterD3D3D_cast


def itkNeighborhoodOperatorImageFilterF2F2F_New():
    return itkNeighborhoodOperatorImageFilterF2F2F.New()

class itkNeighborhoodOperatorImageFilterF2F2F(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""


    Applies a single NeighborhoodOperator to an image region.

    This filter calculates successive inner products between a single
    NeighborhoodOperator and a NeighborhoodIterator, which is swept across
    every pixel in an image region. For operators that are symmetric
    across their axes, the result is a fast convolution with the image
    region. Apply the mirror()'d operator for non-symmetric
    NeighborhoodOperators.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    example{Filtering/ImageFilterBase/ApplyKernelToEveryPixel,Apply Kernel
    To Every Pixel} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF2F2F___New_orig__)
    Clone = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF2F2F_Clone)
    SetOperator = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF2F2F_SetOperator)
    GetOperator = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF2F2F_GetOperator)
    OverrideBoundaryCondition = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF2F2F_OverrideBoundaryCondition)
    GetBoundaryCondition = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF2F2F_GetBoundaryCondition)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF2F2F_GenerateInputRequestedRegion)
    SameDimensionCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF2F2F_SameDimensionCheck
    
    OperatorConvertibleToOutputCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF2F2F_OperatorConvertibleToOutputCheck
    
    InputConvertibleToOperatorCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF2F2F_InputConvertibleToOperatorCheck
    
    OperatorMultiplyOperatorCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF2F2F_OperatorMultiplyOperatorCheck
    
    OperatorAdditiveOperatorsCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF2F2F_OperatorAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkNeighborhoodOperatorImageFilterPython.delete_itkNeighborhoodOperatorImageFilterF2F2F
    cast = _swig_new_static_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF2F2F_cast)

    def New(*args, **kargs):
        """New() -> itkNeighborhoodOperatorImageFilterF2F2F

        Create a new object of the class itkNeighborhoodOperatorImageFilterF2F2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNeighborhoodOperatorImageFilterF2F2F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNeighborhoodOperatorImageFilterF2F2F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNeighborhoodOperatorImageFilterF2F2F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNeighborhoodOperatorImageFilterF2F2F in _itkNeighborhoodOperatorImageFilterPython:
_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF2F2F_swigregister(itkNeighborhoodOperatorImageFilterF2F2F)
itkNeighborhoodOperatorImageFilterF2F2F___New_orig__ = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF2F2F___New_orig__
itkNeighborhoodOperatorImageFilterF2F2F_cast = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF2F2F_cast


def itkNeighborhoodOperatorImageFilterF3F3F_New():
    return itkNeighborhoodOperatorImageFilterF3F3F.New()

class itkNeighborhoodOperatorImageFilterF3F3F(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""


    Applies a single NeighborhoodOperator to an image region.

    This filter calculates successive inner products between a single
    NeighborhoodOperator and a NeighborhoodIterator, which is swept across
    every pixel in an image region. For operators that are symmetric
    across their axes, the result is a fast convolution with the image
    region. Apply the mirror()'d operator for non-symmetric
    NeighborhoodOperators.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    example{Filtering/ImageFilterBase/ApplyKernelToEveryPixel,Apply Kernel
    To Every Pixel} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF3F3F___New_orig__)
    Clone = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF3F3F_Clone)
    SetOperator = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF3F3F_SetOperator)
    GetOperator = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF3F3F_GetOperator)
    OverrideBoundaryCondition = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF3F3F_OverrideBoundaryCondition)
    GetBoundaryCondition = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF3F3F_GetBoundaryCondition)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF3F3F_GenerateInputRequestedRegion)
    SameDimensionCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF3F3F_SameDimensionCheck
    
    OperatorConvertibleToOutputCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF3F3F_OperatorConvertibleToOutputCheck
    
    InputConvertibleToOperatorCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF3F3F_InputConvertibleToOperatorCheck
    
    OperatorMultiplyOperatorCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF3F3F_OperatorMultiplyOperatorCheck
    
    OperatorAdditiveOperatorsCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF3F3F_OperatorAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkNeighborhoodOperatorImageFilterPython.delete_itkNeighborhoodOperatorImageFilterF3F3F
    cast = _swig_new_static_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF3F3F_cast)

    def New(*args, **kargs):
        """New() -> itkNeighborhoodOperatorImageFilterF3F3F

        Create a new object of the class itkNeighborhoodOperatorImageFilterF3F3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNeighborhoodOperatorImageFilterF3F3F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNeighborhoodOperatorImageFilterF3F3F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNeighborhoodOperatorImageFilterF3F3F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNeighborhoodOperatorImageFilterF3F3F in _itkNeighborhoodOperatorImageFilterPython:
_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF3F3F_swigregister(itkNeighborhoodOperatorImageFilterF3F3F)
itkNeighborhoodOperatorImageFilterF3F3F___New_orig__ = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF3F3F___New_orig__
itkNeighborhoodOperatorImageFilterF3F3F_cast = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterF3F3F_cast


def itkNeighborhoodOperatorImageFilterSS2SS2SS_New():
    return itkNeighborhoodOperatorImageFilterSS2SS2SS.New()

class itkNeighborhoodOperatorImageFilterSS2SS2SS(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""


    Applies a single NeighborhoodOperator to an image region.

    This filter calculates successive inner products between a single
    NeighborhoodOperator and a NeighborhoodIterator, which is swept across
    every pixel in an image region. For operators that are symmetric
    across their axes, the result is a fast convolution with the image
    region. Apply the mirror()'d operator for non-symmetric
    NeighborhoodOperators.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    example{Filtering/ImageFilterBase/ApplyKernelToEveryPixel,Apply Kernel
    To Every Pixel} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS2SS2SS___New_orig__)
    Clone = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS2SS2SS_Clone)
    SetOperator = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS2SS2SS_SetOperator)
    GetOperator = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS2SS2SS_GetOperator)
    OverrideBoundaryCondition = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS2SS2SS_OverrideBoundaryCondition)
    GetBoundaryCondition = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS2SS2SS_GetBoundaryCondition)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS2SS2SS_GenerateInputRequestedRegion)
    SameDimensionCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS2SS2SS_SameDimensionCheck
    
    OperatorConvertibleToOutputCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS2SS2SS_OperatorConvertibleToOutputCheck
    
    InputConvertibleToOperatorCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS2SS2SS_InputConvertibleToOperatorCheck
    
    OperatorMultiplyOperatorCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS2SS2SS_OperatorMultiplyOperatorCheck
    
    OperatorAdditiveOperatorsCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS2SS2SS_OperatorAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkNeighborhoodOperatorImageFilterPython.delete_itkNeighborhoodOperatorImageFilterSS2SS2SS
    cast = _swig_new_static_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS2SS2SS_cast)

    def New(*args, **kargs):
        """New() -> itkNeighborhoodOperatorImageFilterSS2SS2SS

        Create a new object of the class itkNeighborhoodOperatorImageFilterSS2SS2SS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNeighborhoodOperatorImageFilterSS2SS2SS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNeighborhoodOperatorImageFilterSS2SS2SS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNeighborhoodOperatorImageFilterSS2SS2SS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNeighborhoodOperatorImageFilterSS2SS2SS in _itkNeighborhoodOperatorImageFilterPython:
_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS2SS2SS_swigregister(itkNeighborhoodOperatorImageFilterSS2SS2SS)
itkNeighborhoodOperatorImageFilterSS2SS2SS___New_orig__ = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS2SS2SS___New_orig__
itkNeighborhoodOperatorImageFilterSS2SS2SS_cast = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS2SS2SS_cast


def itkNeighborhoodOperatorImageFilterSS3SS3SS_New():
    return itkNeighborhoodOperatorImageFilterSS3SS3SS.New()

class itkNeighborhoodOperatorImageFilterSS3SS3SS(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""


    Applies a single NeighborhoodOperator to an image region.

    This filter calculates successive inner products between a single
    NeighborhoodOperator and a NeighborhoodIterator, which is swept across
    every pixel in an image region. For operators that are symmetric
    across their axes, the result is a fast convolution with the image
    region. Apply the mirror()'d operator for non-symmetric
    NeighborhoodOperators.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    example{Filtering/ImageFilterBase/ApplyKernelToEveryPixel,Apply Kernel
    To Every Pixel} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS3SS3SS___New_orig__)
    Clone = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS3SS3SS_Clone)
    SetOperator = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS3SS3SS_SetOperator)
    GetOperator = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS3SS3SS_GetOperator)
    OverrideBoundaryCondition = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS3SS3SS_OverrideBoundaryCondition)
    GetBoundaryCondition = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS3SS3SS_GetBoundaryCondition)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS3SS3SS_GenerateInputRequestedRegion)
    SameDimensionCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS3SS3SS_SameDimensionCheck
    
    OperatorConvertibleToOutputCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS3SS3SS_OperatorConvertibleToOutputCheck
    
    InputConvertibleToOperatorCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS3SS3SS_InputConvertibleToOperatorCheck
    
    OperatorMultiplyOperatorCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS3SS3SS_OperatorMultiplyOperatorCheck
    
    OperatorAdditiveOperatorsCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS3SS3SS_OperatorAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkNeighborhoodOperatorImageFilterPython.delete_itkNeighborhoodOperatorImageFilterSS3SS3SS
    cast = _swig_new_static_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS3SS3SS_cast)

    def New(*args, **kargs):
        """New() -> itkNeighborhoodOperatorImageFilterSS3SS3SS

        Create a new object of the class itkNeighborhoodOperatorImageFilterSS3SS3SS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNeighborhoodOperatorImageFilterSS3SS3SS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNeighborhoodOperatorImageFilterSS3SS3SS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNeighborhoodOperatorImageFilterSS3SS3SS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNeighborhoodOperatorImageFilterSS3SS3SS in _itkNeighborhoodOperatorImageFilterPython:
_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS3SS3SS_swigregister(itkNeighborhoodOperatorImageFilterSS3SS3SS)
itkNeighborhoodOperatorImageFilterSS3SS3SS___New_orig__ = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS3SS3SS___New_orig__
itkNeighborhoodOperatorImageFilterSS3SS3SS_cast = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterSS3SS3SS_cast


def itkNeighborhoodOperatorImageFilterUC2UC2UC_New():
    return itkNeighborhoodOperatorImageFilterUC2UC2UC.New()

class itkNeighborhoodOperatorImageFilterUC2UC2UC(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""


    Applies a single NeighborhoodOperator to an image region.

    This filter calculates successive inner products between a single
    NeighborhoodOperator and a NeighborhoodIterator, which is swept across
    every pixel in an image region. For operators that are symmetric
    across their axes, the result is a fast convolution with the image
    region. Apply the mirror()'d operator for non-symmetric
    NeighborhoodOperators.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    example{Filtering/ImageFilterBase/ApplyKernelToEveryPixel,Apply Kernel
    To Every Pixel} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC2UC2UC___New_orig__)
    Clone = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC2UC2UC_Clone)
    SetOperator = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC2UC2UC_SetOperator)
    GetOperator = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC2UC2UC_GetOperator)
    OverrideBoundaryCondition = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC2UC2UC_OverrideBoundaryCondition)
    GetBoundaryCondition = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC2UC2UC_GetBoundaryCondition)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC2UC2UC_GenerateInputRequestedRegion)
    SameDimensionCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC2UC2UC_SameDimensionCheck
    
    OperatorConvertibleToOutputCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC2UC2UC_OperatorConvertibleToOutputCheck
    
    InputConvertibleToOperatorCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC2UC2UC_InputConvertibleToOperatorCheck
    
    OperatorMultiplyOperatorCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC2UC2UC_OperatorMultiplyOperatorCheck
    
    OperatorAdditiveOperatorsCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC2UC2UC_OperatorAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkNeighborhoodOperatorImageFilterPython.delete_itkNeighborhoodOperatorImageFilterUC2UC2UC
    cast = _swig_new_static_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC2UC2UC_cast)

    def New(*args, **kargs):
        """New() -> itkNeighborhoodOperatorImageFilterUC2UC2UC

        Create a new object of the class itkNeighborhoodOperatorImageFilterUC2UC2UC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNeighborhoodOperatorImageFilterUC2UC2UC.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNeighborhoodOperatorImageFilterUC2UC2UC.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNeighborhoodOperatorImageFilterUC2UC2UC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNeighborhoodOperatorImageFilterUC2UC2UC in _itkNeighborhoodOperatorImageFilterPython:
_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC2UC2UC_swigregister(itkNeighborhoodOperatorImageFilterUC2UC2UC)
itkNeighborhoodOperatorImageFilterUC2UC2UC___New_orig__ = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC2UC2UC___New_orig__
itkNeighborhoodOperatorImageFilterUC2UC2UC_cast = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC2UC2UC_cast


def itkNeighborhoodOperatorImageFilterUC3UC3UC_New():
    return itkNeighborhoodOperatorImageFilterUC3UC3UC.New()

class itkNeighborhoodOperatorImageFilterUC3UC3UC(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""


    Applies a single NeighborhoodOperator to an image region.

    This filter calculates successive inner products between a single
    NeighborhoodOperator and a NeighborhoodIterator, which is swept across
    every pixel in an image region. For operators that are symmetric
    across their axes, the result is a fast convolution with the image
    region. Apply the mirror()'d operator for non-symmetric
    NeighborhoodOperators.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    example{Filtering/ImageFilterBase/ApplyKernelToEveryPixel,Apply Kernel
    To Every Pixel} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC3UC3UC___New_orig__)
    Clone = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC3UC3UC_Clone)
    SetOperator = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC3UC3UC_SetOperator)
    GetOperator = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC3UC3UC_GetOperator)
    OverrideBoundaryCondition = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC3UC3UC_OverrideBoundaryCondition)
    GetBoundaryCondition = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC3UC3UC_GetBoundaryCondition)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC3UC3UC_GenerateInputRequestedRegion)
    SameDimensionCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC3UC3UC_SameDimensionCheck
    
    OperatorConvertibleToOutputCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC3UC3UC_OperatorConvertibleToOutputCheck
    
    InputConvertibleToOperatorCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC3UC3UC_InputConvertibleToOperatorCheck
    
    OperatorMultiplyOperatorCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC3UC3UC_OperatorMultiplyOperatorCheck
    
    OperatorAdditiveOperatorsCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC3UC3UC_OperatorAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkNeighborhoodOperatorImageFilterPython.delete_itkNeighborhoodOperatorImageFilterUC3UC3UC
    cast = _swig_new_static_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC3UC3UC_cast)

    def New(*args, **kargs):
        """New() -> itkNeighborhoodOperatorImageFilterUC3UC3UC

        Create a new object of the class itkNeighborhoodOperatorImageFilterUC3UC3UC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNeighborhoodOperatorImageFilterUC3UC3UC.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNeighborhoodOperatorImageFilterUC3UC3UC.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNeighborhoodOperatorImageFilterUC3UC3UC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNeighborhoodOperatorImageFilterUC3UC3UC in _itkNeighborhoodOperatorImageFilterPython:
_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC3UC3UC_swigregister(itkNeighborhoodOperatorImageFilterUC3UC3UC)
itkNeighborhoodOperatorImageFilterUC3UC3UC___New_orig__ = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC3UC3UC___New_orig__
itkNeighborhoodOperatorImageFilterUC3UC3UC_cast = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUC3UC3UC_cast


def itkNeighborhoodOperatorImageFilterUS2US2US_New():
    return itkNeighborhoodOperatorImageFilterUS2US2US.New()

class itkNeighborhoodOperatorImageFilterUS2US2US(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""


    Applies a single NeighborhoodOperator to an image region.

    This filter calculates successive inner products between a single
    NeighborhoodOperator and a NeighborhoodIterator, which is swept across
    every pixel in an image region. For operators that are symmetric
    across their axes, the result is a fast convolution with the image
    region. Apply the mirror()'d operator for non-symmetric
    NeighborhoodOperators.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    example{Filtering/ImageFilterBase/ApplyKernelToEveryPixel,Apply Kernel
    To Every Pixel} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS2US2US___New_orig__)
    Clone = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS2US2US_Clone)
    SetOperator = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS2US2US_SetOperator)
    GetOperator = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS2US2US_GetOperator)
    OverrideBoundaryCondition = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS2US2US_OverrideBoundaryCondition)
    GetBoundaryCondition = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS2US2US_GetBoundaryCondition)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS2US2US_GenerateInputRequestedRegion)
    SameDimensionCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS2US2US_SameDimensionCheck
    
    OperatorConvertibleToOutputCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS2US2US_OperatorConvertibleToOutputCheck
    
    InputConvertibleToOperatorCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS2US2US_InputConvertibleToOperatorCheck
    
    OperatorMultiplyOperatorCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS2US2US_OperatorMultiplyOperatorCheck
    
    OperatorAdditiveOperatorsCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS2US2US_OperatorAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkNeighborhoodOperatorImageFilterPython.delete_itkNeighborhoodOperatorImageFilterUS2US2US
    cast = _swig_new_static_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS2US2US_cast)

    def New(*args, **kargs):
        """New() -> itkNeighborhoodOperatorImageFilterUS2US2US

        Create a new object of the class itkNeighborhoodOperatorImageFilterUS2US2US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNeighborhoodOperatorImageFilterUS2US2US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNeighborhoodOperatorImageFilterUS2US2US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNeighborhoodOperatorImageFilterUS2US2US.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNeighborhoodOperatorImageFilterUS2US2US in _itkNeighborhoodOperatorImageFilterPython:
_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS2US2US_swigregister(itkNeighborhoodOperatorImageFilterUS2US2US)
itkNeighborhoodOperatorImageFilterUS2US2US___New_orig__ = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS2US2US___New_orig__
itkNeighborhoodOperatorImageFilterUS2US2US_cast = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS2US2US_cast


def itkNeighborhoodOperatorImageFilterUS3US3US_New():
    return itkNeighborhoodOperatorImageFilterUS3US3US.New()

class itkNeighborhoodOperatorImageFilterUS3US3US(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""


    Applies a single NeighborhoodOperator to an image region.

    This filter calculates successive inner products between a single
    NeighborhoodOperator and a NeighborhoodIterator, which is swept across
    every pixel in an image region. For operators that are symmetric
    across their axes, the result is a fast convolution with the image
    region. Apply the mirror()'d operator for non-symmetric
    NeighborhoodOperators.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    example{Filtering/ImageFilterBase/ApplyKernelToEveryPixel,Apply Kernel
    To Every Pixel} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS3US3US___New_orig__)
    Clone = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS3US3US_Clone)
    SetOperator = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS3US3US_SetOperator)
    GetOperator = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS3US3US_GetOperator)
    OverrideBoundaryCondition = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS3US3US_OverrideBoundaryCondition)
    GetBoundaryCondition = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS3US3US_GetBoundaryCondition)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS3US3US_GenerateInputRequestedRegion)
    SameDimensionCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS3US3US_SameDimensionCheck
    
    OperatorConvertibleToOutputCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS3US3US_OperatorConvertibleToOutputCheck
    
    InputConvertibleToOperatorCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS3US3US_InputConvertibleToOperatorCheck
    
    OperatorMultiplyOperatorCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS3US3US_OperatorMultiplyOperatorCheck
    
    OperatorAdditiveOperatorsCheck = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS3US3US_OperatorAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkNeighborhoodOperatorImageFilterPython.delete_itkNeighborhoodOperatorImageFilterUS3US3US
    cast = _swig_new_static_method(_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS3US3US_cast)

    def New(*args, **kargs):
        """New() -> itkNeighborhoodOperatorImageFilterUS3US3US

        Create a new object of the class itkNeighborhoodOperatorImageFilterUS3US3US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNeighborhoodOperatorImageFilterUS3US3US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNeighborhoodOperatorImageFilterUS3US3US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNeighborhoodOperatorImageFilterUS3US3US.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNeighborhoodOperatorImageFilterUS3US3US in _itkNeighborhoodOperatorImageFilterPython:
_itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS3US3US_swigregister(itkNeighborhoodOperatorImageFilterUS3US3US)
itkNeighborhoodOperatorImageFilterUS3US3US___New_orig__ = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS3US3US___New_orig__
itkNeighborhoodOperatorImageFilterUS3US3US_cast = _itkNeighborhoodOperatorImageFilterPython.itkNeighborhoodOperatorImageFilterUS3US3US_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def neighborhood_operator_image_filter(*args, **kwargs):
    """Procedural interface for NeighborhoodOperatorImageFilter"""
    import itk
    instance = itk.NeighborhoodOperatorImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def neighborhood_operator_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.NeighborhoodOperatorImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.NeighborhoodOperatorImageFilter.values()[0]
    else:
        filter_object = itk.NeighborhoodOperatorImageFilter

    neighborhood_operator_image_filter.__doc__ = filter_object.__doc__
    neighborhood_operator_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    neighborhood_operator_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.NeighborhoodOperatorImageFilter, itkTemplate.itkTemplate):
        neighborhood_operator_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        neighborhood_operator_image_filter.__doc__ += "\n"
        neighborhood_operator_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        neighborhood_operator_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



