# coding: utf-8

"""
    ThingsBoard REST API

    For instructions how to authorize requests please visit <a href='http://thingsboard.io/docs/reference/rest-api/'>REST API documentation page</a>.  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: info@thingsboard.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from tb_rest_client32.api_client import ApiClient


class WhiteLabelingControllerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_app_theme_css_using_post(self, palette_settings, **kwargs):  # noqa: E501
        """getAppThemeCss  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_app_theme_css_using_post(palette_settings, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PaletteSettings palette_settings: paletteSettings (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_app_theme_css_using_post_with_http_info(palette_settings, **kwargs)  # noqa: E501
        else:
            (data) = self.get_app_theme_css_using_post_with_http_info(palette_settings, **kwargs)  # noqa: E501
            return data

    def get_app_theme_css_using_post_with_http_info(self, palette_settings, **kwargs):  # noqa: E501
        """getAppThemeCss  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_app_theme_css_using_post_with_http_info(palette_settings, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PaletteSettings palette_settings: paletteSettings (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['palette_settings']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'palette_settings' is set
        if ('palette_settings' not in params or
                params['palette_settings'] is None):
            raise ValueError("Missing the required parameter `palette_settings` when calling `get_app_theme_css_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'palette_settings' in params:
            body_params = params['palette_settings']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['plain/text'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/whiteLabel/appThemeCss', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_current_login_white_label_params_using_get(self, **kwargs):  # noqa: E501
        """getCurrentLoginWhiteLabelParams  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_current_login_white_label_params_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: LoginWhiteLabelingParams
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_current_login_white_label_params_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_current_login_white_label_params_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_current_login_white_label_params_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """getCurrentLoginWhiteLabelParams  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_current_login_white_label_params_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: LoginWhiteLabelingParams
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/whiteLabel/currentLoginWhiteLabelParams', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LoginWhiteLabelingParams',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_current_white_label_params_using_get(self, **kwargs):  # noqa: E501
        """getCurrentWhiteLabelParams  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_current_white_label_params_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: WhiteLabelingParams
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_current_white_label_params_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_current_white_label_params_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_current_white_label_params_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """getCurrentWhiteLabelParams  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_current_white_label_params_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: WhiteLabelingParams
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/whiteLabel/currentWhiteLabelParams', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WhiteLabelingParams',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_login_theme_css_using_post(self, palette_settings, **kwargs):  # noqa: E501
        """getLoginThemeCss  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_login_theme_css_using_post(palette_settings, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PaletteSettings palette_settings: paletteSettings (required)
        :param bool dark_foreground: darkForeground
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_login_theme_css_using_post_with_http_info(palette_settings, **kwargs)  # noqa: E501
        else:
            (data) = self.get_login_theme_css_using_post_with_http_info(palette_settings, **kwargs)  # noqa: E501
            return data

    def get_login_theme_css_using_post_with_http_info(self, palette_settings, **kwargs):  # noqa: E501
        """getLoginThemeCss  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_login_theme_css_using_post_with_http_info(palette_settings, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PaletteSettings palette_settings: paletteSettings (required)
        :param bool dark_foreground: darkForeground
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['palette_settings', 'dark_foreground']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'palette_settings' is set
        if ('palette_settings' not in params or
                params['palette_settings'] is None):
            raise ValueError("Missing the required parameter `palette_settings` when calling `get_login_theme_css_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'dark_foreground' in params:
            query_params.append(('darkForeground', params['dark_foreground']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'palette_settings' in params:
            body_params = params['palette_settings']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['plain/text'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/noauth/whiteLabel/loginThemeCss{?darkForeground}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_login_white_label_params_using_get(self, **kwargs):  # noqa: E501
        """getLoginWhiteLabelParams  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_login_white_label_params_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str logo_image_checksum: logoImageChecksum
        :param str favicon_checksum: faviconChecksum
        :return: LoginWhiteLabelingParams
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_login_white_label_params_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_login_white_label_params_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_login_white_label_params_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """getLoginWhiteLabelParams  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_login_white_label_params_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str logo_image_checksum: logoImageChecksum
        :param str favicon_checksum: faviconChecksum
        :return: LoginWhiteLabelingParams
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['logo_image_checksum', 'favicon_checksum']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'logo_image_checksum' in params:
            query_params.append(('logoImageChecksum', params['logo_image_checksum']))  # noqa: E501
        if 'favicon_checksum' in params:
            query_params.append(('faviconChecksum', params['favicon_checksum']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/noauth/whiteLabel/loginWhiteLabelParams{?logoImageChecksum,faviconChecksum}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LoginWhiteLabelingParams',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_white_label_params_using_get(self, **kwargs):  # noqa: E501
        """getWhiteLabelParams  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_white_label_params_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str logo_image_checksum: logoImageChecksum
        :param str favicon_checksum: faviconChecksum
        :return: WhiteLabelingParams
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_white_label_params_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_white_label_params_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_white_label_params_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """getWhiteLabelParams  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_white_label_params_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str logo_image_checksum: logoImageChecksum
        :param str favicon_checksum: faviconChecksum
        :return: WhiteLabelingParams
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['logo_image_checksum', 'favicon_checksum']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'logo_image_checksum' in params:
            query_params.append(('logoImageChecksum', params['logo_image_checksum']))  # noqa: E501
        if 'favicon_checksum' in params:
            query_params.append(('faviconChecksum', params['favicon_checksum']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/whiteLabel/whiteLabelParams{?logoImageChecksum,faviconChecksum}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WhiteLabelingParams',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def is_customer_white_labeling_allowed_using_get(self, **kwargs):  # noqa: E501
        """isCustomerWhiteLabelingAllowed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.is_customer_white_labeling_allowed_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.is_customer_white_labeling_allowed_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.is_customer_white_labeling_allowed_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def is_customer_white_labeling_allowed_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """isCustomerWhiteLabelingAllowed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.is_customer_white_labeling_allowed_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/whiteLabel/isCustomerWhiteLabelingAllowed', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def is_white_labeling_allowed_using_get(self, **kwargs):  # noqa: E501
        """isWhiteLabelingAllowed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.is_white_labeling_allowed_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.is_white_labeling_allowed_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.is_white_labeling_allowed_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def is_white_labeling_allowed_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """isWhiteLabelingAllowed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.is_white_labeling_allowed_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/whiteLabel/isWhiteLabelingAllowed', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def preview_white_label_params_using_post(self, white_labeling_params, **kwargs):  # noqa: E501
        """previewWhiteLabelParams  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.preview_white_label_params_using_post(white_labeling_params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WhiteLabelingParams white_labeling_params: whiteLabelingParams (required)
        :return: WhiteLabelingParams
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.preview_white_label_params_using_post_with_http_info(white_labeling_params, **kwargs)  # noqa: E501
        else:
            (data) = self.preview_white_label_params_using_post_with_http_info(white_labeling_params, **kwargs)  # noqa: E501
            return data

    def preview_white_label_params_using_post_with_http_info(self, white_labeling_params, **kwargs):  # noqa: E501
        """previewWhiteLabelParams  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.preview_white_label_params_using_post_with_http_info(white_labeling_params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WhiteLabelingParams white_labeling_params: whiteLabelingParams (required)
        :return: WhiteLabelingParams
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['white_labeling_params']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'white_labeling_params' is set
        if ('white_labeling_params' not in params or
                params['white_labeling_params'] is None):
            raise ValueError("Missing the required parameter `white_labeling_params` when calling `preview_white_label_params_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'white_labeling_params' in params:
            body_params = params['white_labeling_params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/whiteLabel/previewWhiteLabelParams', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WhiteLabelingParams',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def save_login_white_label_params_using_post(self, login_white_labeling_params, **kwargs):  # noqa: E501
        """saveLoginWhiteLabelParams  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.save_login_white_label_params_using_post(login_white_labeling_params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LoginWhiteLabelingParams login_white_labeling_params: loginWhiteLabelingParams (required)
        :return: LoginWhiteLabelingParams
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.save_login_white_label_params_using_post_with_http_info(login_white_labeling_params, **kwargs)  # noqa: E501
        else:
            (data) = self.save_login_white_label_params_using_post_with_http_info(login_white_labeling_params, **kwargs)  # noqa: E501
            return data

    def save_login_white_label_params_using_post_with_http_info(self, login_white_labeling_params, **kwargs):  # noqa: E501
        """saveLoginWhiteLabelParams  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.save_login_white_label_params_using_post_with_http_info(login_white_labeling_params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LoginWhiteLabelingParams login_white_labeling_params: loginWhiteLabelingParams (required)
        :return: LoginWhiteLabelingParams
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['login_white_labeling_params']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'login_white_labeling_params' is set
        if ('login_white_labeling_params' not in params or
                params['login_white_labeling_params'] is None):
            raise ValueError("Missing the required parameter `login_white_labeling_params` when calling `save_login_white_label_params_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'login_white_labeling_params' in params:
            body_params = params['login_white_labeling_params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/whiteLabel/loginWhiteLabelParams', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LoginWhiteLabelingParams',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def save_white_label_params_using_post(self, white_labeling_params, **kwargs):  # noqa: E501
        """saveWhiteLabelParams  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.save_white_label_params_using_post(white_labeling_params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WhiteLabelingParams white_labeling_params: whiteLabelingParams (required)
        :return: WhiteLabelingParams
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.save_white_label_params_using_post_with_http_info(white_labeling_params, **kwargs)  # noqa: E501
        else:
            (data) = self.save_white_label_params_using_post_with_http_info(white_labeling_params, **kwargs)  # noqa: E501
            return data

    def save_white_label_params_using_post_with_http_info(self, white_labeling_params, **kwargs):  # noqa: E501
        """saveWhiteLabelParams  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.save_white_label_params_using_post_with_http_info(white_labeling_params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WhiteLabelingParams white_labeling_params: whiteLabelingParams (required)
        :return: WhiteLabelingParams
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['white_labeling_params']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'white_labeling_params' is set
        if ('white_labeling_params' not in params or
                params['white_labeling_params'] is None):
            raise ValueError("Missing the required parameter `white_labeling_params` when calling `save_white_label_params_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'white_labeling_params' in params:
            body_params = params['white_labeling_params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/whiteLabel/whiteLabelParams', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WhiteLabelingParams',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
