# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageStatisticsPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkImageMomentsCalculatorPython
else:
    import _itkImageMomentsCalculatorPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkImageMomentsCalculatorPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkImageMomentsCalculatorPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImagePython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkAffineTransformPython
import itk.itkTransformBasePython
import itk.itkVariableLengthVectorPython
import itk.itkDiffusionTensor3DPython
import itk.itkArrayPython
import itk.itkOptimizerParametersPython
import itk.itkArray2DPython
import itk.itkMatrixOffsetTransformBasePython
import itk.itkSpatialObjectBasePython
import itk.itkBoundingBoxPython
import itk.itkMapContainerPython
import itk.itkVectorContainerPython
import itk.itkContinuousIndexPython
import itk.itkSpatialObjectPropertyPython

def itkImageMomentsCalculatorID2_New():
    return itkImageMomentsCalculatorID2.New()

class itkImageMomentsCalculatorID2(itk.ITKCommonBasePython.itkObject):
    r"""


    Compute moments of an n-dimensional image.

    This class provides methods for computing the moments and related
    properties of a single-echo image. Computing the (non-central) moments
    of a large image can easily take a million times longer than computing
    the various other values derived from them, so we compute the moments
    only on explicit request, and save their values (in an
    ImageMomentsCalculator object) for later retrieval by the user.

    The non-central moments computed by this class are not really intended
    for general use and are therefore in index coordinates; that is, we
    pretend that the index that selects a particular pixel also equals its
    physical coordinates. The center of gravity, central moments,
    principal moments and principal axes are all more generally useful and
    are computed in the physical coordinates defined by the Origin and
    Spacing parameters of the image.

    The methods that return values return the values themselves rather
    than references because the cost is small compared to the cost of
    computing the moments and doing so simplifies memory management for
    the caller.

    Todo It's not yet clear how multi-echo images should be handled here.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorID2___New_orig__)
    Clone = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorID2_Clone)
    SetImage = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorID2_SetImage)
    SetSpatialObjectMask = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorID2_SetSpatialObjectMask)
    Compute = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorID2_Compute)
    GetTotalMass = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorID2_GetTotalMass)
    GetFirstMoments = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorID2_GetFirstMoments)
    GetSecondMoments = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorID2_GetSecondMoments)
    GetCenterOfGravity = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorID2_GetCenterOfGravity)
    GetCentralMoments = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorID2_GetCentralMoments)
    GetPrincipalMoments = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorID2_GetPrincipalMoments)
    GetPrincipalAxes = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorID2_GetPrincipalAxes)
    GetPrincipalAxesToPhysicalAxesTransform = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorID2_GetPrincipalAxesToPhysicalAxesTransform)
    GetPhysicalAxesToPrincipalAxesTransform = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorID2_GetPhysicalAxesToPrincipalAxesTransform)
    __swig_destroy__ = _itkImageMomentsCalculatorPython.delete_itkImageMomentsCalculatorID2
    cast = _swig_new_static_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorID2_cast)

    def New(*args, **kargs):
        """New() -> itkImageMomentsCalculatorID2

        Create a new object of the class itkImageMomentsCalculatorID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageMomentsCalculatorID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageMomentsCalculatorID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageMomentsCalculatorID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageMomentsCalculatorID2 in _itkImageMomentsCalculatorPython:
_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorID2_swigregister(itkImageMomentsCalculatorID2)
itkImageMomentsCalculatorID2___New_orig__ = _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorID2___New_orig__
itkImageMomentsCalculatorID2_cast = _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorID2_cast


def itkImageMomentsCalculatorID3_New():
    return itkImageMomentsCalculatorID3.New()

class itkImageMomentsCalculatorID3(itk.ITKCommonBasePython.itkObject):
    r"""


    Compute moments of an n-dimensional image.

    This class provides methods for computing the moments and related
    properties of a single-echo image. Computing the (non-central) moments
    of a large image can easily take a million times longer than computing
    the various other values derived from them, so we compute the moments
    only on explicit request, and save their values (in an
    ImageMomentsCalculator object) for later retrieval by the user.

    The non-central moments computed by this class are not really intended
    for general use and are therefore in index coordinates; that is, we
    pretend that the index that selects a particular pixel also equals its
    physical coordinates. The center of gravity, central moments,
    principal moments and principal axes are all more generally useful and
    are computed in the physical coordinates defined by the Origin and
    Spacing parameters of the image.

    The methods that return values return the values themselves rather
    than references because the cost is small compared to the cost of
    computing the moments and doing so simplifies memory management for
    the caller.

    Todo It's not yet clear how multi-echo images should be handled here.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorID3___New_orig__)
    Clone = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorID3_Clone)
    SetImage = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorID3_SetImage)
    SetSpatialObjectMask = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorID3_SetSpatialObjectMask)
    Compute = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorID3_Compute)
    GetTotalMass = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorID3_GetTotalMass)
    GetFirstMoments = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorID3_GetFirstMoments)
    GetSecondMoments = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorID3_GetSecondMoments)
    GetCenterOfGravity = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorID3_GetCenterOfGravity)
    GetCentralMoments = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorID3_GetCentralMoments)
    GetPrincipalMoments = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorID3_GetPrincipalMoments)
    GetPrincipalAxes = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorID3_GetPrincipalAxes)
    GetPrincipalAxesToPhysicalAxesTransform = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorID3_GetPrincipalAxesToPhysicalAxesTransform)
    GetPhysicalAxesToPrincipalAxesTransform = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorID3_GetPhysicalAxesToPrincipalAxesTransform)
    __swig_destroy__ = _itkImageMomentsCalculatorPython.delete_itkImageMomentsCalculatorID3
    cast = _swig_new_static_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorID3_cast)

    def New(*args, **kargs):
        """New() -> itkImageMomentsCalculatorID3

        Create a new object of the class itkImageMomentsCalculatorID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageMomentsCalculatorID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageMomentsCalculatorID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageMomentsCalculatorID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageMomentsCalculatorID3 in _itkImageMomentsCalculatorPython:
_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorID3_swigregister(itkImageMomentsCalculatorID3)
itkImageMomentsCalculatorID3___New_orig__ = _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorID3___New_orig__
itkImageMomentsCalculatorID3_cast = _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorID3_cast


def itkImageMomentsCalculatorIF2_New():
    return itkImageMomentsCalculatorIF2.New()

class itkImageMomentsCalculatorIF2(itk.ITKCommonBasePython.itkObject):
    r"""


    Compute moments of an n-dimensional image.

    This class provides methods for computing the moments and related
    properties of a single-echo image. Computing the (non-central) moments
    of a large image can easily take a million times longer than computing
    the various other values derived from them, so we compute the moments
    only on explicit request, and save their values (in an
    ImageMomentsCalculator object) for later retrieval by the user.

    The non-central moments computed by this class are not really intended
    for general use and are therefore in index coordinates; that is, we
    pretend that the index that selects a particular pixel also equals its
    physical coordinates. The center of gravity, central moments,
    principal moments and principal axes are all more generally useful and
    are computed in the physical coordinates defined by the Origin and
    Spacing parameters of the image.

    The methods that return values return the values themselves rather
    than references because the cost is small compared to the cost of
    computing the moments and doing so simplifies memory management for
    the caller.

    Todo It's not yet clear how multi-echo images should be handled here.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF2___New_orig__)
    Clone = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF2_Clone)
    SetImage = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF2_SetImage)
    SetSpatialObjectMask = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF2_SetSpatialObjectMask)
    Compute = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF2_Compute)
    GetTotalMass = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF2_GetTotalMass)
    GetFirstMoments = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF2_GetFirstMoments)
    GetSecondMoments = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF2_GetSecondMoments)
    GetCenterOfGravity = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF2_GetCenterOfGravity)
    GetCentralMoments = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF2_GetCentralMoments)
    GetPrincipalMoments = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF2_GetPrincipalMoments)
    GetPrincipalAxes = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF2_GetPrincipalAxes)
    GetPrincipalAxesToPhysicalAxesTransform = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF2_GetPrincipalAxesToPhysicalAxesTransform)
    GetPhysicalAxesToPrincipalAxesTransform = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF2_GetPhysicalAxesToPrincipalAxesTransform)
    __swig_destroy__ = _itkImageMomentsCalculatorPython.delete_itkImageMomentsCalculatorIF2
    cast = _swig_new_static_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF2_cast)

    def New(*args, **kargs):
        """New() -> itkImageMomentsCalculatorIF2

        Create a new object of the class itkImageMomentsCalculatorIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageMomentsCalculatorIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageMomentsCalculatorIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageMomentsCalculatorIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageMomentsCalculatorIF2 in _itkImageMomentsCalculatorPython:
_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF2_swigregister(itkImageMomentsCalculatorIF2)
itkImageMomentsCalculatorIF2___New_orig__ = _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF2___New_orig__
itkImageMomentsCalculatorIF2_cast = _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF2_cast


def itkImageMomentsCalculatorIF3_New():
    return itkImageMomentsCalculatorIF3.New()

class itkImageMomentsCalculatorIF3(itk.ITKCommonBasePython.itkObject):
    r"""


    Compute moments of an n-dimensional image.

    This class provides methods for computing the moments and related
    properties of a single-echo image. Computing the (non-central) moments
    of a large image can easily take a million times longer than computing
    the various other values derived from them, so we compute the moments
    only on explicit request, and save their values (in an
    ImageMomentsCalculator object) for later retrieval by the user.

    The non-central moments computed by this class are not really intended
    for general use and are therefore in index coordinates; that is, we
    pretend that the index that selects a particular pixel also equals its
    physical coordinates. The center of gravity, central moments,
    principal moments and principal axes are all more generally useful and
    are computed in the physical coordinates defined by the Origin and
    Spacing parameters of the image.

    The methods that return values return the values themselves rather
    than references because the cost is small compared to the cost of
    computing the moments and doing so simplifies memory management for
    the caller.

    Todo It's not yet clear how multi-echo images should be handled here.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF3___New_orig__)
    Clone = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF3_Clone)
    SetImage = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF3_SetImage)
    SetSpatialObjectMask = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF3_SetSpatialObjectMask)
    Compute = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF3_Compute)
    GetTotalMass = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF3_GetTotalMass)
    GetFirstMoments = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF3_GetFirstMoments)
    GetSecondMoments = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF3_GetSecondMoments)
    GetCenterOfGravity = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF3_GetCenterOfGravity)
    GetCentralMoments = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF3_GetCentralMoments)
    GetPrincipalMoments = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF3_GetPrincipalMoments)
    GetPrincipalAxes = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF3_GetPrincipalAxes)
    GetPrincipalAxesToPhysicalAxesTransform = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF3_GetPrincipalAxesToPhysicalAxesTransform)
    GetPhysicalAxesToPrincipalAxesTransform = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF3_GetPhysicalAxesToPrincipalAxesTransform)
    __swig_destroy__ = _itkImageMomentsCalculatorPython.delete_itkImageMomentsCalculatorIF3
    cast = _swig_new_static_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF3_cast)

    def New(*args, **kargs):
        """New() -> itkImageMomentsCalculatorIF3

        Create a new object of the class itkImageMomentsCalculatorIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageMomentsCalculatorIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageMomentsCalculatorIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageMomentsCalculatorIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageMomentsCalculatorIF3 in _itkImageMomentsCalculatorPython:
_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF3_swigregister(itkImageMomentsCalculatorIF3)
itkImageMomentsCalculatorIF3___New_orig__ = _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF3___New_orig__
itkImageMomentsCalculatorIF3_cast = _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIF3_cast


def itkImageMomentsCalculatorISS2_New():
    return itkImageMomentsCalculatorISS2.New()

class itkImageMomentsCalculatorISS2(itk.ITKCommonBasePython.itkObject):
    r"""


    Compute moments of an n-dimensional image.

    This class provides methods for computing the moments and related
    properties of a single-echo image. Computing the (non-central) moments
    of a large image can easily take a million times longer than computing
    the various other values derived from them, so we compute the moments
    only on explicit request, and save their values (in an
    ImageMomentsCalculator object) for later retrieval by the user.

    The non-central moments computed by this class are not really intended
    for general use and are therefore in index coordinates; that is, we
    pretend that the index that selects a particular pixel also equals its
    physical coordinates. The center of gravity, central moments,
    principal moments and principal axes are all more generally useful and
    are computed in the physical coordinates defined by the Origin and
    Spacing parameters of the image.

    The methods that return values return the values themselves rather
    than references because the cost is small compared to the cost of
    computing the moments and doing so simplifies memory management for
    the caller.

    Todo It's not yet clear how multi-echo images should be handled here.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS2_Clone)
    SetImage = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS2_SetImage)
    SetSpatialObjectMask = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS2_SetSpatialObjectMask)
    Compute = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS2_Compute)
    GetTotalMass = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS2_GetTotalMass)
    GetFirstMoments = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS2_GetFirstMoments)
    GetSecondMoments = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS2_GetSecondMoments)
    GetCenterOfGravity = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS2_GetCenterOfGravity)
    GetCentralMoments = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS2_GetCentralMoments)
    GetPrincipalMoments = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS2_GetPrincipalMoments)
    GetPrincipalAxes = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS2_GetPrincipalAxes)
    GetPrincipalAxesToPhysicalAxesTransform = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS2_GetPrincipalAxesToPhysicalAxesTransform)
    GetPhysicalAxesToPrincipalAxesTransform = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS2_GetPhysicalAxesToPrincipalAxesTransform)
    __swig_destroy__ = _itkImageMomentsCalculatorPython.delete_itkImageMomentsCalculatorISS2
    cast = _swig_new_static_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageMomentsCalculatorISS2

        Create a new object of the class itkImageMomentsCalculatorISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageMomentsCalculatorISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageMomentsCalculatorISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageMomentsCalculatorISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageMomentsCalculatorISS2 in _itkImageMomentsCalculatorPython:
_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS2_swigregister(itkImageMomentsCalculatorISS2)
itkImageMomentsCalculatorISS2___New_orig__ = _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS2___New_orig__
itkImageMomentsCalculatorISS2_cast = _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS2_cast


def itkImageMomentsCalculatorISS3_New():
    return itkImageMomentsCalculatorISS3.New()

class itkImageMomentsCalculatorISS3(itk.ITKCommonBasePython.itkObject):
    r"""


    Compute moments of an n-dimensional image.

    This class provides methods for computing the moments and related
    properties of a single-echo image. Computing the (non-central) moments
    of a large image can easily take a million times longer than computing
    the various other values derived from them, so we compute the moments
    only on explicit request, and save their values (in an
    ImageMomentsCalculator object) for later retrieval by the user.

    The non-central moments computed by this class are not really intended
    for general use and are therefore in index coordinates; that is, we
    pretend that the index that selects a particular pixel also equals its
    physical coordinates. The center of gravity, central moments,
    principal moments and principal axes are all more generally useful and
    are computed in the physical coordinates defined by the Origin and
    Spacing parameters of the image.

    The methods that return values return the values themselves rather
    than references because the cost is small compared to the cost of
    computing the moments and doing so simplifies memory management for
    the caller.

    Todo It's not yet clear how multi-echo images should be handled here.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS3_Clone)
    SetImage = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS3_SetImage)
    SetSpatialObjectMask = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS3_SetSpatialObjectMask)
    Compute = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS3_Compute)
    GetTotalMass = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS3_GetTotalMass)
    GetFirstMoments = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS3_GetFirstMoments)
    GetSecondMoments = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS3_GetSecondMoments)
    GetCenterOfGravity = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS3_GetCenterOfGravity)
    GetCentralMoments = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS3_GetCentralMoments)
    GetPrincipalMoments = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS3_GetPrincipalMoments)
    GetPrincipalAxes = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS3_GetPrincipalAxes)
    GetPrincipalAxesToPhysicalAxesTransform = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS3_GetPrincipalAxesToPhysicalAxesTransform)
    GetPhysicalAxesToPrincipalAxesTransform = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS3_GetPhysicalAxesToPrincipalAxesTransform)
    __swig_destroy__ = _itkImageMomentsCalculatorPython.delete_itkImageMomentsCalculatorISS3
    cast = _swig_new_static_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageMomentsCalculatorISS3

        Create a new object of the class itkImageMomentsCalculatorISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageMomentsCalculatorISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageMomentsCalculatorISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageMomentsCalculatorISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageMomentsCalculatorISS3 in _itkImageMomentsCalculatorPython:
_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS3_swigregister(itkImageMomentsCalculatorISS3)
itkImageMomentsCalculatorISS3___New_orig__ = _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS3___New_orig__
itkImageMomentsCalculatorISS3_cast = _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorISS3_cast


def itkImageMomentsCalculatorIUC2_New():
    return itkImageMomentsCalculatorIUC2.New()

class itkImageMomentsCalculatorIUC2(itk.ITKCommonBasePython.itkObject):
    r"""


    Compute moments of an n-dimensional image.

    This class provides methods for computing the moments and related
    properties of a single-echo image. Computing the (non-central) moments
    of a large image can easily take a million times longer than computing
    the various other values derived from them, so we compute the moments
    only on explicit request, and save their values (in an
    ImageMomentsCalculator object) for later retrieval by the user.

    The non-central moments computed by this class are not really intended
    for general use and are therefore in index coordinates; that is, we
    pretend that the index that selects a particular pixel also equals its
    physical coordinates. The center of gravity, central moments,
    principal moments and principal axes are all more generally useful and
    are computed in the physical coordinates defined by the Origin and
    Spacing parameters of the image.

    The methods that return values return the values themselves rather
    than references because the cost is small compared to the cost of
    computing the moments and doing so simplifies memory management for
    the caller.

    Todo It's not yet clear how multi-echo images should be handled here.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC2_Clone)
    SetImage = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC2_SetImage)
    SetSpatialObjectMask = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC2_SetSpatialObjectMask)
    Compute = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC2_Compute)
    GetTotalMass = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC2_GetTotalMass)
    GetFirstMoments = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC2_GetFirstMoments)
    GetSecondMoments = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC2_GetSecondMoments)
    GetCenterOfGravity = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC2_GetCenterOfGravity)
    GetCentralMoments = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC2_GetCentralMoments)
    GetPrincipalMoments = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC2_GetPrincipalMoments)
    GetPrincipalAxes = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC2_GetPrincipalAxes)
    GetPrincipalAxesToPhysicalAxesTransform = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC2_GetPrincipalAxesToPhysicalAxesTransform)
    GetPhysicalAxesToPrincipalAxesTransform = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC2_GetPhysicalAxesToPrincipalAxesTransform)
    __swig_destroy__ = _itkImageMomentsCalculatorPython.delete_itkImageMomentsCalculatorIUC2
    cast = _swig_new_static_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC2_cast)

    def New(*args, **kargs):
        """New() -> itkImageMomentsCalculatorIUC2

        Create a new object of the class itkImageMomentsCalculatorIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageMomentsCalculatorIUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageMomentsCalculatorIUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageMomentsCalculatorIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageMomentsCalculatorIUC2 in _itkImageMomentsCalculatorPython:
_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC2_swigregister(itkImageMomentsCalculatorIUC2)
itkImageMomentsCalculatorIUC2___New_orig__ = _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC2___New_orig__
itkImageMomentsCalculatorIUC2_cast = _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC2_cast


def itkImageMomentsCalculatorIUC3_New():
    return itkImageMomentsCalculatorIUC3.New()

class itkImageMomentsCalculatorIUC3(itk.ITKCommonBasePython.itkObject):
    r"""


    Compute moments of an n-dimensional image.

    This class provides methods for computing the moments and related
    properties of a single-echo image. Computing the (non-central) moments
    of a large image can easily take a million times longer than computing
    the various other values derived from them, so we compute the moments
    only on explicit request, and save their values (in an
    ImageMomentsCalculator object) for later retrieval by the user.

    The non-central moments computed by this class are not really intended
    for general use and are therefore in index coordinates; that is, we
    pretend that the index that selects a particular pixel also equals its
    physical coordinates. The center of gravity, central moments,
    principal moments and principal axes are all more generally useful and
    are computed in the physical coordinates defined by the Origin and
    Spacing parameters of the image.

    The methods that return values return the values themselves rather
    than references because the cost is small compared to the cost of
    computing the moments and doing so simplifies memory management for
    the caller.

    Todo It's not yet clear how multi-echo images should be handled here.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC3_Clone)
    SetImage = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC3_SetImage)
    SetSpatialObjectMask = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC3_SetSpatialObjectMask)
    Compute = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC3_Compute)
    GetTotalMass = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC3_GetTotalMass)
    GetFirstMoments = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC3_GetFirstMoments)
    GetSecondMoments = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC3_GetSecondMoments)
    GetCenterOfGravity = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC3_GetCenterOfGravity)
    GetCentralMoments = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC3_GetCentralMoments)
    GetPrincipalMoments = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC3_GetPrincipalMoments)
    GetPrincipalAxes = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC3_GetPrincipalAxes)
    GetPrincipalAxesToPhysicalAxesTransform = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC3_GetPrincipalAxesToPhysicalAxesTransform)
    GetPhysicalAxesToPrincipalAxesTransform = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC3_GetPhysicalAxesToPrincipalAxesTransform)
    __swig_destroy__ = _itkImageMomentsCalculatorPython.delete_itkImageMomentsCalculatorIUC3
    cast = _swig_new_static_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC3_cast)

    def New(*args, **kargs):
        """New() -> itkImageMomentsCalculatorIUC3

        Create a new object of the class itkImageMomentsCalculatorIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageMomentsCalculatorIUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageMomentsCalculatorIUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageMomentsCalculatorIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageMomentsCalculatorIUC3 in _itkImageMomentsCalculatorPython:
_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC3_swigregister(itkImageMomentsCalculatorIUC3)
itkImageMomentsCalculatorIUC3___New_orig__ = _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC3___New_orig__
itkImageMomentsCalculatorIUC3_cast = _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUC3_cast


def itkImageMomentsCalculatorIUS2_New():
    return itkImageMomentsCalculatorIUS2.New()

class itkImageMomentsCalculatorIUS2(itk.ITKCommonBasePython.itkObject):
    r"""


    Compute moments of an n-dimensional image.

    This class provides methods for computing the moments and related
    properties of a single-echo image. Computing the (non-central) moments
    of a large image can easily take a million times longer than computing
    the various other values derived from them, so we compute the moments
    only on explicit request, and save their values (in an
    ImageMomentsCalculator object) for later retrieval by the user.

    The non-central moments computed by this class are not really intended
    for general use and are therefore in index coordinates; that is, we
    pretend that the index that selects a particular pixel also equals its
    physical coordinates. The center of gravity, central moments,
    principal moments and principal axes are all more generally useful and
    are computed in the physical coordinates defined by the Origin and
    Spacing parameters of the image.

    The methods that return values return the values themselves rather
    than references because the cost is small compared to the cost of
    computing the moments and doing so simplifies memory management for
    the caller.

    Todo It's not yet clear how multi-echo images should be handled here.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS2_Clone)
    SetImage = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS2_SetImage)
    SetSpatialObjectMask = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS2_SetSpatialObjectMask)
    Compute = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS2_Compute)
    GetTotalMass = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS2_GetTotalMass)
    GetFirstMoments = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS2_GetFirstMoments)
    GetSecondMoments = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS2_GetSecondMoments)
    GetCenterOfGravity = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS2_GetCenterOfGravity)
    GetCentralMoments = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS2_GetCentralMoments)
    GetPrincipalMoments = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS2_GetPrincipalMoments)
    GetPrincipalAxes = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS2_GetPrincipalAxes)
    GetPrincipalAxesToPhysicalAxesTransform = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS2_GetPrincipalAxesToPhysicalAxesTransform)
    GetPhysicalAxesToPrincipalAxesTransform = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS2_GetPhysicalAxesToPrincipalAxesTransform)
    __swig_destroy__ = _itkImageMomentsCalculatorPython.delete_itkImageMomentsCalculatorIUS2
    cast = _swig_new_static_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageMomentsCalculatorIUS2

        Create a new object of the class itkImageMomentsCalculatorIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageMomentsCalculatorIUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageMomentsCalculatorIUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageMomentsCalculatorIUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageMomentsCalculatorIUS2 in _itkImageMomentsCalculatorPython:
_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS2_swigregister(itkImageMomentsCalculatorIUS2)
itkImageMomentsCalculatorIUS2___New_orig__ = _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS2___New_orig__
itkImageMomentsCalculatorIUS2_cast = _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS2_cast


def itkImageMomentsCalculatorIUS3_New():
    return itkImageMomentsCalculatorIUS3.New()

class itkImageMomentsCalculatorIUS3(itk.ITKCommonBasePython.itkObject):
    r"""


    Compute moments of an n-dimensional image.

    This class provides methods for computing the moments and related
    properties of a single-echo image. Computing the (non-central) moments
    of a large image can easily take a million times longer than computing
    the various other values derived from them, so we compute the moments
    only on explicit request, and save their values (in an
    ImageMomentsCalculator object) for later retrieval by the user.

    The non-central moments computed by this class are not really intended
    for general use and are therefore in index coordinates; that is, we
    pretend that the index that selects a particular pixel also equals its
    physical coordinates. The center of gravity, central moments,
    principal moments and principal axes are all more generally useful and
    are computed in the physical coordinates defined by the Origin and
    Spacing parameters of the image.

    The methods that return values return the values themselves rather
    than references because the cost is small compared to the cost of
    computing the moments and doing so simplifies memory management for
    the caller.

    Todo It's not yet clear how multi-echo images should be handled here.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS3_Clone)
    SetImage = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS3_SetImage)
    SetSpatialObjectMask = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS3_SetSpatialObjectMask)
    Compute = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS3_Compute)
    GetTotalMass = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS3_GetTotalMass)
    GetFirstMoments = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS3_GetFirstMoments)
    GetSecondMoments = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS3_GetSecondMoments)
    GetCenterOfGravity = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS3_GetCenterOfGravity)
    GetCentralMoments = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS3_GetCentralMoments)
    GetPrincipalMoments = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS3_GetPrincipalMoments)
    GetPrincipalAxes = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS3_GetPrincipalAxes)
    GetPrincipalAxesToPhysicalAxesTransform = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS3_GetPrincipalAxesToPhysicalAxesTransform)
    GetPhysicalAxesToPrincipalAxesTransform = _swig_new_instance_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS3_GetPhysicalAxesToPrincipalAxesTransform)
    __swig_destroy__ = _itkImageMomentsCalculatorPython.delete_itkImageMomentsCalculatorIUS3
    cast = _swig_new_static_method(_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageMomentsCalculatorIUS3

        Create a new object of the class itkImageMomentsCalculatorIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageMomentsCalculatorIUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageMomentsCalculatorIUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageMomentsCalculatorIUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageMomentsCalculatorIUS3 in _itkImageMomentsCalculatorPython:
_itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS3_swigregister(itkImageMomentsCalculatorIUS3)
itkImageMomentsCalculatorIUS3___New_orig__ = _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS3___New_orig__
itkImageMomentsCalculatorIUS3_cast = _itkImageMomentsCalculatorPython.itkImageMomentsCalculatorIUS3_cast



