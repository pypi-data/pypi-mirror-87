# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKLevelSetsPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkCollidingFrontsImageFilterPython
else:
    import _itkCollidingFrontsImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkCollidingFrontsImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkCollidingFrontsImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImageToImageFilterAPython
import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkImageToImageFilterCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.stdcomplexPython
import itk.itkImagePython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.ITKFastMarchingBasePython
import itk.itkFastMarchingStoppingCriterionBasePython
import itk.itkNodePairPython
import itk.itkLevelSetNodePython

def itkCollidingFrontsImageFilterID2ID2_New():
    return itkCollidingFrontsImageFilterID2ID2.New()

class itkCollidingFrontsImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""


    Selects a region of space where two independent fronts run towards
    each other.

    The filter can be used to quickly segment anatomical structures (e.g.
    for level set initialization).

    The filter uses two instances of FastMarchingUpwindGradientImageFilter
    to compute the gradients of arrival times of two wavefronts
    propagating from two sets of seeds. The input of the filter is used as
    the speed of the two wavefronts. The output is the dot product between
    the two gradient vector fields.

    The filter works on the following basic idea. In the regions where the
    dot product between the two gradient fields is negative, the two
    fronts propagate in opposite directions. In the regions where the dot
    product is positive, the two fronts propagate in the same direction.
    This can be used to extract the region of space between two sets of
    points.

    If StopOnTargets is On, then each front will stop as soon as all seeds
    of the other front have been reached. This can markedly speed up the
    execution of the filter, since wave propagation does not take place on
    the complete image.

    Optionally, a connectivity criterion can be applied to the resulting
    dot product image. In this case, the only negative region in the
    output image is the one connected to the seeds.

    Luca Antiga Ph.D. Biomedical Technologies Laboratory, Bioengineering
    Department, Mario Negri Institute, Italy. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID2ID2_Clone)
    SetSeedPoints1 = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID2ID2_SetSeedPoints1)
    GetSeedPoints1 = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID2ID2_GetSeedPoints1)
    SetSeedPoints2 = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID2ID2_SetSeedPoints2)
    GetSeedPoints2 = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID2ID2_GetSeedPoints2)
    SetNegativeEpsilon = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID2ID2_SetNegativeEpsilon)
    GetNegativeEpsilon = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID2ID2_GetNegativeEpsilon)
    SetApplyConnectivity = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID2ID2_SetApplyConnectivity)
    GetApplyConnectivity = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID2ID2_GetApplyConnectivity)
    ApplyConnectivityOn = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID2ID2_ApplyConnectivityOn)
    ApplyConnectivityOff = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID2ID2_ApplyConnectivityOff)
    SetStopOnTargets = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID2ID2_SetStopOnTargets)
    GetStopOnTargets = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID2ID2_GetStopOnTargets)
    StopOnTargetsOn = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID2ID2_StopOnTargetsOn)
    StopOnTargetsOff = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID2ID2_StopOnTargetsOff)
    InputHasNumericTraitsCheck = _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID2ID2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkCollidingFrontsImageFilterPython.delete_itkCollidingFrontsImageFilterID2ID2
    cast = _swig_new_static_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkCollidingFrontsImageFilterID2ID2

        Create a new object of the class itkCollidingFrontsImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCollidingFrontsImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCollidingFrontsImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCollidingFrontsImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCollidingFrontsImageFilterID2ID2 in _itkCollidingFrontsImageFilterPython:
_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID2ID2_swigregister(itkCollidingFrontsImageFilterID2ID2)
itkCollidingFrontsImageFilterID2ID2___New_orig__ = _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID2ID2___New_orig__
itkCollidingFrontsImageFilterID2ID2_cast = _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID2ID2_cast


def itkCollidingFrontsImageFilterID3ID3_New():
    return itkCollidingFrontsImageFilterID3ID3.New()

class itkCollidingFrontsImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""


    Selects a region of space where two independent fronts run towards
    each other.

    The filter can be used to quickly segment anatomical structures (e.g.
    for level set initialization).

    The filter uses two instances of FastMarchingUpwindGradientImageFilter
    to compute the gradients of arrival times of two wavefronts
    propagating from two sets of seeds. The input of the filter is used as
    the speed of the two wavefronts. The output is the dot product between
    the two gradient vector fields.

    The filter works on the following basic idea. In the regions where the
    dot product between the two gradient fields is negative, the two
    fronts propagate in opposite directions. In the regions where the dot
    product is positive, the two fronts propagate in the same direction.
    This can be used to extract the region of space between two sets of
    points.

    If StopOnTargets is On, then each front will stop as soon as all seeds
    of the other front have been reached. This can markedly speed up the
    execution of the filter, since wave propagation does not take place on
    the complete image.

    Optionally, a connectivity criterion can be applied to the resulting
    dot product image. In this case, the only negative region in the
    output image is the one connected to the seeds.

    Luca Antiga Ph.D. Biomedical Technologies Laboratory, Bioengineering
    Department, Mario Negri Institute, Italy. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID3ID3_Clone)
    SetSeedPoints1 = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID3ID3_SetSeedPoints1)
    GetSeedPoints1 = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID3ID3_GetSeedPoints1)
    SetSeedPoints2 = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID3ID3_SetSeedPoints2)
    GetSeedPoints2 = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID3ID3_GetSeedPoints2)
    SetNegativeEpsilon = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID3ID3_SetNegativeEpsilon)
    GetNegativeEpsilon = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID3ID3_GetNegativeEpsilon)
    SetApplyConnectivity = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID3ID3_SetApplyConnectivity)
    GetApplyConnectivity = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID3ID3_GetApplyConnectivity)
    ApplyConnectivityOn = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID3ID3_ApplyConnectivityOn)
    ApplyConnectivityOff = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID3ID3_ApplyConnectivityOff)
    SetStopOnTargets = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID3ID3_SetStopOnTargets)
    GetStopOnTargets = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID3ID3_GetStopOnTargets)
    StopOnTargetsOn = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID3ID3_StopOnTargetsOn)
    StopOnTargetsOff = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID3ID3_StopOnTargetsOff)
    InputHasNumericTraitsCheck = _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID3ID3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkCollidingFrontsImageFilterPython.delete_itkCollidingFrontsImageFilterID3ID3
    cast = _swig_new_static_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkCollidingFrontsImageFilterID3ID3

        Create a new object of the class itkCollidingFrontsImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCollidingFrontsImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCollidingFrontsImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCollidingFrontsImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCollidingFrontsImageFilterID3ID3 in _itkCollidingFrontsImageFilterPython:
_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID3ID3_swigregister(itkCollidingFrontsImageFilterID3ID3)
itkCollidingFrontsImageFilterID3ID3___New_orig__ = _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID3ID3___New_orig__
itkCollidingFrontsImageFilterID3ID3_cast = _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID3ID3_cast


def itkCollidingFrontsImageFilterIF2IF2_New():
    return itkCollidingFrontsImageFilterIF2IF2.New()

class itkCollidingFrontsImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""


    Selects a region of space where two independent fronts run towards
    each other.

    The filter can be used to quickly segment anatomical structures (e.g.
    for level set initialization).

    The filter uses two instances of FastMarchingUpwindGradientImageFilter
    to compute the gradients of arrival times of two wavefronts
    propagating from two sets of seeds. The input of the filter is used as
    the speed of the two wavefronts. The output is the dot product between
    the two gradient vector fields.

    The filter works on the following basic idea. In the regions where the
    dot product between the two gradient fields is negative, the two
    fronts propagate in opposite directions. In the regions where the dot
    product is positive, the two fronts propagate in the same direction.
    This can be used to extract the region of space between two sets of
    points.

    If StopOnTargets is On, then each front will stop as soon as all seeds
    of the other front have been reached. This can markedly speed up the
    execution of the filter, since wave propagation does not take place on
    the complete image.

    Optionally, a connectivity criterion can be applied to the resulting
    dot product image. In this case, the only negative region in the
    output image is the one connected to the seeds.

    Luca Antiga Ph.D. Biomedical Technologies Laboratory, Bioengineering
    Department, Mario Negri Institute, Italy. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF2IF2_Clone)
    SetSeedPoints1 = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF2IF2_SetSeedPoints1)
    GetSeedPoints1 = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF2IF2_GetSeedPoints1)
    SetSeedPoints2 = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF2IF2_SetSeedPoints2)
    GetSeedPoints2 = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF2IF2_GetSeedPoints2)
    SetNegativeEpsilon = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF2IF2_SetNegativeEpsilon)
    GetNegativeEpsilon = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF2IF2_GetNegativeEpsilon)
    SetApplyConnectivity = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF2IF2_SetApplyConnectivity)
    GetApplyConnectivity = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF2IF2_GetApplyConnectivity)
    ApplyConnectivityOn = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF2IF2_ApplyConnectivityOn)
    ApplyConnectivityOff = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF2IF2_ApplyConnectivityOff)
    SetStopOnTargets = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF2IF2_SetStopOnTargets)
    GetStopOnTargets = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF2IF2_GetStopOnTargets)
    StopOnTargetsOn = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF2IF2_StopOnTargetsOn)
    StopOnTargetsOff = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF2IF2_StopOnTargetsOff)
    InputHasNumericTraitsCheck = _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF2IF2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkCollidingFrontsImageFilterPython.delete_itkCollidingFrontsImageFilterIF2IF2
    cast = _swig_new_static_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkCollidingFrontsImageFilterIF2IF2

        Create a new object of the class itkCollidingFrontsImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCollidingFrontsImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCollidingFrontsImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCollidingFrontsImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCollidingFrontsImageFilterIF2IF2 in _itkCollidingFrontsImageFilterPython:
_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF2IF2_swigregister(itkCollidingFrontsImageFilterIF2IF2)
itkCollidingFrontsImageFilterIF2IF2___New_orig__ = _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF2IF2___New_orig__
itkCollidingFrontsImageFilterIF2IF2_cast = _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF2IF2_cast


def itkCollidingFrontsImageFilterIF3IF3_New():
    return itkCollidingFrontsImageFilterIF3IF3.New()

class itkCollidingFrontsImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""


    Selects a region of space where two independent fronts run towards
    each other.

    The filter can be used to quickly segment anatomical structures (e.g.
    for level set initialization).

    The filter uses two instances of FastMarchingUpwindGradientImageFilter
    to compute the gradients of arrival times of two wavefronts
    propagating from two sets of seeds. The input of the filter is used as
    the speed of the two wavefronts. The output is the dot product between
    the two gradient vector fields.

    The filter works on the following basic idea. In the regions where the
    dot product between the two gradient fields is negative, the two
    fronts propagate in opposite directions. In the regions where the dot
    product is positive, the two fronts propagate in the same direction.
    This can be used to extract the region of space between two sets of
    points.

    If StopOnTargets is On, then each front will stop as soon as all seeds
    of the other front have been reached. This can markedly speed up the
    execution of the filter, since wave propagation does not take place on
    the complete image.

    Optionally, a connectivity criterion can be applied to the resulting
    dot product image. In this case, the only negative region in the
    output image is the one connected to the seeds.

    Luca Antiga Ph.D. Biomedical Technologies Laboratory, Bioengineering
    Department, Mario Negri Institute, Italy. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF3IF3_Clone)
    SetSeedPoints1 = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF3IF3_SetSeedPoints1)
    GetSeedPoints1 = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF3IF3_GetSeedPoints1)
    SetSeedPoints2 = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF3IF3_SetSeedPoints2)
    GetSeedPoints2 = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF3IF3_GetSeedPoints2)
    SetNegativeEpsilon = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF3IF3_SetNegativeEpsilon)
    GetNegativeEpsilon = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF3IF3_GetNegativeEpsilon)
    SetApplyConnectivity = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF3IF3_SetApplyConnectivity)
    GetApplyConnectivity = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF3IF3_GetApplyConnectivity)
    ApplyConnectivityOn = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF3IF3_ApplyConnectivityOn)
    ApplyConnectivityOff = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF3IF3_ApplyConnectivityOff)
    SetStopOnTargets = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF3IF3_SetStopOnTargets)
    GetStopOnTargets = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF3IF3_GetStopOnTargets)
    StopOnTargetsOn = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF3IF3_StopOnTargetsOn)
    StopOnTargetsOff = _swig_new_instance_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF3IF3_StopOnTargetsOff)
    InputHasNumericTraitsCheck = _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF3IF3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkCollidingFrontsImageFilterPython.delete_itkCollidingFrontsImageFilterIF3IF3
    cast = _swig_new_static_method(_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkCollidingFrontsImageFilterIF3IF3

        Create a new object of the class itkCollidingFrontsImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCollidingFrontsImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCollidingFrontsImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCollidingFrontsImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCollidingFrontsImageFilterIF3IF3 in _itkCollidingFrontsImageFilterPython:
_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF3IF3_swigregister(itkCollidingFrontsImageFilterIF3IF3)
itkCollidingFrontsImageFilterIF3IF3___New_orig__ = _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF3IF3___New_orig__
itkCollidingFrontsImageFilterIF3IF3_cast = _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF3IF3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def colliding_fronts_image_filter(*args, **kwargs):
    """Procedural interface for CollidingFrontsImageFilter"""
    import itk
    instance = itk.CollidingFrontsImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def colliding_fronts_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.CollidingFrontsImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.CollidingFrontsImageFilter.values()[0]
    else:
        filter_object = itk.CollidingFrontsImageFilter

    colliding_fronts_image_filter.__doc__ = filter_object.__doc__
    colliding_fronts_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    colliding_fronts_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.CollidingFrontsImageFilter, itkTemplate.itkTemplate):
        colliding_fronts_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        colliding_fronts_image_filter.__doc__ += "\n"
        colliding_fronts_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        colliding_fronts_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



