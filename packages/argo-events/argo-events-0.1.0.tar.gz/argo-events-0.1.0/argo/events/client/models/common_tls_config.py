# coding: utf-8

"""
    Argo Events

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from argo.events.client.configuration import Configuration


class CommonTLSConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ca_cert_path': 'str',
        'ca_cert_secret': 'V1SecretKeySelector',
        'client_cert_path': 'str',
        'client_cert_secret': 'V1SecretKeySelector',
        'client_key_path': 'str',
        'client_key_secret': 'V1SecretKeySelector'
    }

    attribute_map = {
        'ca_cert_path': 'caCertPath',
        'ca_cert_secret': 'caCertSecret',
        'client_cert_path': 'clientCertPath',
        'client_cert_secret': 'clientCertSecret',
        'client_key_path': 'clientKeyPath',
        'client_key_secret': 'clientKeySecret'
    }

    def __init__(self, ca_cert_path=None, ca_cert_secret=None, client_cert_path=None, client_cert_secret=None, client_key_path=None, client_key_secret=None, local_vars_configuration=None):  # noqa: E501
        """CommonTLSConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._ca_cert_path = None
        self._ca_cert_secret = None
        self._client_cert_path = None
        self._client_cert_secret = None
        self._client_key_path = None
        self._client_key_secret = None
        self.discriminator = None

        self.ca_cert_path = ca_cert_path
        if ca_cert_secret is not None:
            self.ca_cert_secret = ca_cert_secret
        self.client_cert_path = client_cert_path
        if client_cert_secret is not None:
            self.client_cert_secret = client_cert_secret
        self.client_key_path = client_key_path
        if client_key_secret is not None:
            self.client_key_secret = client_key_secret

    @property
    def ca_cert_path(self):
        """Gets the ca_cert_path of this CommonTLSConfig.  # noqa: E501

        DeprecatedCACertPath refers the file path that contains the CA cert. Deprecated: use CACertSecret instead  # noqa: E501

        :return: The ca_cert_path of this CommonTLSConfig.  # noqa: E501
        :rtype: str
        """
        return self._ca_cert_path

    @ca_cert_path.setter
    def ca_cert_path(self, ca_cert_path):
        """Sets the ca_cert_path of this CommonTLSConfig.

        DeprecatedCACertPath refers the file path that contains the CA cert. Deprecated: use CACertSecret instead  # noqa: E501

        :param ca_cert_path: The ca_cert_path of this CommonTLSConfig.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and ca_cert_path is None:  # noqa: E501
            raise ValueError("Invalid value for `ca_cert_path`, must not be `None`")  # noqa: E501

        self._ca_cert_path = ca_cert_path

    @property
    def ca_cert_secret(self):
        """Gets the ca_cert_secret of this CommonTLSConfig.  # noqa: E501


        :return: The ca_cert_secret of this CommonTLSConfig.  # noqa: E501
        :rtype: V1SecretKeySelector
        """
        return self._ca_cert_secret

    @ca_cert_secret.setter
    def ca_cert_secret(self, ca_cert_secret):
        """Sets the ca_cert_secret of this CommonTLSConfig.


        :param ca_cert_secret: The ca_cert_secret of this CommonTLSConfig.  # noqa: E501
        :type: V1SecretKeySelector
        """

        self._ca_cert_secret = ca_cert_secret

    @property
    def client_cert_path(self):
        """Gets the client_cert_path of this CommonTLSConfig.  # noqa: E501

        DeprecatedClientCertPath refers the file path that contains client cert. Deprecated: use ClientCertSecret instead  # noqa: E501

        :return: The client_cert_path of this CommonTLSConfig.  # noqa: E501
        :rtype: str
        """
        return self._client_cert_path

    @client_cert_path.setter
    def client_cert_path(self, client_cert_path):
        """Sets the client_cert_path of this CommonTLSConfig.

        DeprecatedClientCertPath refers the file path that contains client cert. Deprecated: use ClientCertSecret instead  # noqa: E501

        :param client_cert_path: The client_cert_path of this CommonTLSConfig.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and client_cert_path is None:  # noqa: E501
            raise ValueError("Invalid value for `client_cert_path`, must not be `None`")  # noqa: E501

        self._client_cert_path = client_cert_path

    @property
    def client_cert_secret(self):
        """Gets the client_cert_secret of this CommonTLSConfig.  # noqa: E501


        :return: The client_cert_secret of this CommonTLSConfig.  # noqa: E501
        :rtype: V1SecretKeySelector
        """
        return self._client_cert_secret

    @client_cert_secret.setter
    def client_cert_secret(self, client_cert_secret):
        """Sets the client_cert_secret of this CommonTLSConfig.


        :param client_cert_secret: The client_cert_secret of this CommonTLSConfig.  # noqa: E501
        :type: V1SecretKeySelector
        """

        self._client_cert_secret = client_cert_secret

    @property
    def client_key_path(self):
        """Gets the client_key_path of this CommonTLSConfig.  # noqa: E501

        DeprecatedClientKeyPath refers the file path that contains client key. Deprecated: use ClientKeySecret instead  # noqa: E501

        :return: The client_key_path of this CommonTLSConfig.  # noqa: E501
        :rtype: str
        """
        return self._client_key_path

    @client_key_path.setter
    def client_key_path(self, client_key_path):
        """Sets the client_key_path of this CommonTLSConfig.

        DeprecatedClientKeyPath refers the file path that contains client key. Deprecated: use ClientKeySecret instead  # noqa: E501

        :param client_key_path: The client_key_path of this CommonTLSConfig.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and client_key_path is None:  # noqa: E501
            raise ValueError("Invalid value for `client_key_path`, must not be `None`")  # noqa: E501

        self._client_key_path = client_key_path

    @property
    def client_key_secret(self):
        """Gets the client_key_secret of this CommonTLSConfig.  # noqa: E501


        :return: The client_key_secret of this CommonTLSConfig.  # noqa: E501
        :rtype: V1SecretKeySelector
        """
        return self._client_key_secret

    @client_key_secret.setter
    def client_key_secret(self, client_key_secret):
        """Sets the client_key_secret of this CommonTLSConfig.


        :param client_key_secret: The client_key_secret of this CommonTLSConfig.  # noqa: E501
        :type: V1SecretKeySelector
        """

        self._client_key_secret = client_key_secret

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommonTLSConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CommonTLSConfig):
            return True

        return self.to_dict() != other.to_dict()
