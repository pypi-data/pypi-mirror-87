# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKLevelSetsPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkCannySegmentationLevelSetImageFilterPython
else:
    import _itkCannySegmentationLevelSetImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkCannySegmentationLevelSetImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkCannySegmentationLevelSetImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImagePython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.ITKCommonBasePython
import itk.itkPointPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkRGBAPixelPython
import itk.itkSegmentationLevelSetImageFilterPython
import itk.itkSparseFieldLevelSetImageFilterPython
import itk.itkFiniteDifferenceImageFilterPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterBPython
import itk.itkFiniteDifferenceFunctionPython
import itk.itkSegmentationLevelSetFunctionPython
import itk.itkLevelSetFunctionPython

def itkCannySegmentationLevelSetImageFilterID2ID2D_New():
    return itkCannySegmentationLevelSetImageFilterID2ID2D.New()

class itkCannySegmentationLevelSetImageFilterID2ID2D(itk.itkSegmentationLevelSetImageFilterPython.itkSegmentationLevelSetImageFilterID2ID2D):
    r"""


    Segments structures in images based on image features derived from
    pseudo-canny-edges.

    IMPORTANT The SegmentationLevelSetImageFilter class and the
    CannySegmentationLevelSetFunction class contain additional information
    necessary to the full understanding of how to use this filter.
    OVERVIEW This class is a level set method segmentation filter. It
    constructs a speed function which is designed to lock onto edges as
    detected by a Canny filter.

    The CannySegmentationLevelSetImageFilter can be a tool for refining an
    existing segmentation, or it can be used to try to segment a region by
    itself. Like all other level-set based segmentation filters (see
    SegmentationLevelSetImageFilter), it works by first constructing a
    scalar speed term and a vector advection field based on edge features
    in the image. The level set front is then moved according to these two
    terms with the addition of a third curvature term to contol the
    smoothness of the solution.

    The speed term is constructed as the Danielsson distance transform of
    the Canny edge image, as calculated by the
    CannyEdgeDetectionImageFilter. This scalar speed can be tuned in and
    out of the final evolution equation by setting the PropagationScaling
    parameter (a value of 0 removes the speed term).

    The advection field term is constructed by minimizing Danielsson
    distance squared. i.e. $ \\mbox{min} \\int D^2 \\Rightarrow D
    \\nabla D $. This term moves the level set down the gradient of the
    distance transform.

    In practice, you may set the speed (propagation) term to zero if your
    initialization is already close to the edge you are interested in. If
    you are trying to segment a region by seeding with a small surface
    (blob, sphere) then you will likely want to add speed (propagation) to
    the equation so that the levelsets can expand along zero gradients.
    The relative influence of these two terms are controlled by the
    SetPropagationScaling and SetAdvectionScaling parameters. INPUTS This
    filter requires two inputs. The first input is a seed image. This seed
    image must contain an isosurface that you want to use as the seed for
    your segmentation. It can be a binary, graylevel, or floating point
    image. The only requirement is that it contain a closed isosurface
    that you will identify as the seed by setting the IsosurfaceValue
    parameter of the filter. For a binary image you will want to set your
    isosurface value halfway between your on and off values (i.e. for 0's
    and 1's, use an isosurface value of 0.5).

    The second input is the feature image. This is the image from which
    the speed function will be calculated. For most applications, this is
    the image that you want to segment. The desired isosurface in your
    seed image should lie within the region of your feature image that you
    are trying to segment.

    See SegmentationLevelSetImageFilter for more information on Inputs.
    OUTPUTS The filter outputs a single, scalar, real-valued image.
    Positive *values in the output image are inside the segmented region
    and negative *values in the image are outside of the inside region.
    The zero crossings of *the image correspond to the position of the
    level set front.

    See SparseFieldLevelSetImageFilter and SegmentationLevelSetImageFilter
    for more information. PARAMETERS There are five parameters important
    for controlling the behavior of this filter.

    (1) Threshold. Sets the thresholding value of the Canny edge
    detection. See CannyEdgeDetectionImageFilter for more information.

    (2) Variance. Controls the smoothing parameter of the gaussian
    filtering done during Canny edge detection.

    (3) CurvatureScaling. Controls the degree to which curvature
    influences the evolution of the level set. Higher values relative to
    Propagation and Advection scalings will yield a smoother surface.

    (4) PropagationScaling. Scales the propagation (speed) term of the
    level set equation. Set this term to zero to allow the level set to
    flow only down the gradient of the distance transform.

    (5) AdvectionScaling. Scales influence of the advection field relative
    to curvature and propagation terms.

    See:   SegmentationLevelSetImageFilter

    See:  CannySegmentationLevelSetFunction,

    See:   SparseFieldLevelSetImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID2ID2D___New_orig__)
    Clone = _swig_new_instance_method(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID2ID2D_Clone)
    SetThreshold = _swig_new_instance_method(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID2ID2D_SetThreshold)
    GetThreshold = _swig_new_instance_method(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID2ID2D_GetThreshold)
    SetVariance = _swig_new_instance_method(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID2ID2D_SetVariance)
    GetVariance = _swig_new_instance_method(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID2ID2D_GetVariance)
    GetCannyImage = _swig_new_instance_method(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID2ID2D_GetCannyImage)
    OutputHasNumericTraitsCheck = _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID2ID2D_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkCannySegmentationLevelSetImageFilterPython.delete_itkCannySegmentationLevelSetImageFilterID2ID2D
    cast = _swig_new_static_method(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID2ID2D_cast)

    def New(*args, **kargs):
        """New() -> itkCannySegmentationLevelSetImageFilterID2ID2D

        Create a new object of the class itkCannySegmentationLevelSetImageFilterID2ID2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCannySegmentationLevelSetImageFilterID2ID2D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCannySegmentationLevelSetImageFilterID2ID2D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCannySegmentationLevelSetImageFilterID2ID2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCannySegmentationLevelSetImageFilterID2ID2D in _itkCannySegmentationLevelSetImageFilterPython:
_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID2ID2D_swigregister(itkCannySegmentationLevelSetImageFilterID2ID2D)
itkCannySegmentationLevelSetImageFilterID2ID2D___New_orig__ = _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID2ID2D___New_orig__
itkCannySegmentationLevelSetImageFilterID2ID2D_cast = _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID2ID2D_cast


def itkCannySegmentationLevelSetImageFilterID3ID3D_New():
    return itkCannySegmentationLevelSetImageFilterID3ID3D.New()

class itkCannySegmentationLevelSetImageFilterID3ID3D(itk.itkSegmentationLevelSetImageFilterPython.itkSegmentationLevelSetImageFilterID3ID3D):
    r"""


    Segments structures in images based on image features derived from
    pseudo-canny-edges.

    IMPORTANT The SegmentationLevelSetImageFilter class and the
    CannySegmentationLevelSetFunction class contain additional information
    necessary to the full understanding of how to use this filter.
    OVERVIEW This class is a level set method segmentation filter. It
    constructs a speed function which is designed to lock onto edges as
    detected by a Canny filter.

    The CannySegmentationLevelSetImageFilter can be a tool for refining an
    existing segmentation, or it can be used to try to segment a region by
    itself. Like all other level-set based segmentation filters (see
    SegmentationLevelSetImageFilter), it works by first constructing a
    scalar speed term and a vector advection field based on edge features
    in the image. The level set front is then moved according to these two
    terms with the addition of a third curvature term to contol the
    smoothness of the solution.

    The speed term is constructed as the Danielsson distance transform of
    the Canny edge image, as calculated by the
    CannyEdgeDetectionImageFilter. This scalar speed can be tuned in and
    out of the final evolution equation by setting the PropagationScaling
    parameter (a value of 0 removes the speed term).

    The advection field term is constructed by minimizing Danielsson
    distance squared. i.e. $ \\mbox{min} \\int D^2 \\Rightarrow D
    \\nabla D $. This term moves the level set down the gradient of the
    distance transform.

    In practice, you may set the speed (propagation) term to zero if your
    initialization is already close to the edge you are interested in. If
    you are trying to segment a region by seeding with a small surface
    (blob, sphere) then you will likely want to add speed (propagation) to
    the equation so that the levelsets can expand along zero gradients.
    The relative influence of these two terms are controlled by the
    SetPropagationScaling and SetAdvectionScaling parameters. INPUTS This
    filter requires two inputs. The first input is a seed image. This seed
    image must contain an isosurface that you want to use as the seed for
    your segmentation. It can be a binary, graylevel, or floating point
    image. The only requirement is that it contain a closed isosurface
    that you will identify as the seed by setting the IsosurfaceValue
    parameter of the filter. For a binary image you will want to set your
    isosurface value halfway between your on and off values (i.e. for 0's
    and 1's, use an isosurface value of 0.5).

    The second input is the feature image. This is the image from which
    the speed function will be calculated. For most applications, this is
    the image that you want to segment. The desired isosurface in your
    seed image should lie within the region of your feature image that you
    are trying to segment.

    See SegmentationLevelSetImageFilter for more information on Inputs.
    OUTPUTS The filter outputs a single, scalar, real-valued image.
    Positive *values in the output image are inside the segmented region
    and negative *values in the image are outside of the inside region.
    The zero crossings of *the image correspond to the position of the
    level set front.

    See SparseFieldLevelSetImageFilter and SegmentationLevelSetImageFilter
    for more information. PARAMETERS There are five parameters important
    for controlling the behavior of this filter.

    (1) Threshold. Sets the thresholding value of the Canny edge
    detection. See CannyEdgeDetectionImageFilter for more information.

    (2) Variance. Controls the smoothing parameter of the gaussian
    filtering done during Canny edge detection.

    (3) CurvatureScaling. Controls the degree to which curvature
    influences the evolution of the level set. Higher values relative to
    Propagation and Advection scalings will yield a smoother surface.

    (4) PropagationScaling. Scales the propagation (speed) term of the
    level set equation. Set this term to zero to allow the level set to
    flow only down the gradient of the distance transform.

    (5) AdvectionScaling. Scales influence of the advection field relative
    to curvature and propagation terms.

    See:   SegmentationLevelSetImageFilter

    See:  CannySegmentationLevelSetFunction,

    See:   SparseFieldLevelSetImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID3ID3D___New_orig__)
    Clone = _swig_new_instance_method(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID3ID3D_Clone)
    SetThreshold = _swig_new_instance_method(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID3ID3D_SetThreshold)
    GetThreshold = _swig_new_instance_method(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID3ID3D_GetThreshold)
    SetVariance = _swig_new_instance_method(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID3ID3D_SetVariance)
    GetVariance = _swig_new_instance_method(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID3ID3D_GetVariance)
    GetCannyImage = _swig_new_instance_method(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID3ID3D_GetCannyImage)
    OutputHasNumericTraitsCheck = _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID3ID3D_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkCannySegmentationLevelSetImageFilterPython.delete_itkCannySegmentationLevelSetImageFilterID3ID3D
    cast = _swig_new_static_method(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID3ID3D_cast)

    def New(*args, **kargs):
        """New() -> itkCannySegmentationLevelSetImageFilterID3ID3D

        Create a new object of the class itkCannySegmentationLevelSetImageFilterID3ID3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCannySegmentationLevelSetImageFilterID3ID3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCannySegmentationLevelSetImageFilterID3ID3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCannySegmentationLevelSetImageFilterID3ID3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCannySegmentationLevelSetImageFilterID3ID3D in _itkCannySegmentationLevelSetImageFilterPython:
_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID3ID3D_swigregister(itkCannySegmentationLevelSetImageFilterID3ID3D)
itkCannySegmentationLevelSetImageFilterID3ID3D___New_orig__ = _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID3ID3D___New_orig__
itkCannySegmentationLevelSetImageFilterID3ID3D_cast = _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID3ID3D_cast


def itkCannySegmentationLevelSetImageFilterIF2IF2F_New():
    return itkCannySegmentationLevelSetImageFilterIF2IF2F.New()

class itkCannySegmentationLevelSetImageFilterIF2IF2F(itk.itkSegmentationLevelSetImageFilterPython.itkSegmentationLevelSetImageFilterIF2IF2F):
    r"""


    Segments structures in images based on image features derived from
    pseudo-canny-edges.

    IMPORTANT The SegmentationLevelSetImageFilter class and the
    CannySegmentationLevelSetFunction class contain additional information
    necessary to the full understanding of how to use this filter.
    OVERVIEW This class is a level set method segmentation filter. It
    constructs a speed function which is designed to lock onto edges as
    detected by a Canny filter.

    The CannySegmentationLevelSetImageFilter can be a tool for refining an
    existing segmentation, or it can be used to try to segment a region by
    itself. Like all other level-set based segmentation filters (see
    SegmentationLevelSetImageFilter), it works by first constructing a
    scalar speed term and a vector advection field based on edge features
    in the image. The level set front is then moved according to these two
    terms with the addition of a third curvature term to contol the
    smoothness of the solution.

    The speed term is constructed as the Danielsson distance transform of
    the Canny edge image, as calculated by the
    CannyEdgeDetectionImageFilter. This scalar speed can be tuned in and
    out of the final evolution equation by setting the PropagationScaling
    parameter (a value of 0 removes the speed term).

    The advection field term is constructed by minimizing Danielsson
    distance squared. i.e. $ \\mbox{min} \\int D^2 \\Rightarrow D
    \\nabla D $. This term moves the level set down the gradient of the
    distance transform.

    In practice, you may set the speed (propagation) term to zero if your
    initialization is already close to the edge you are interested in. If
    you are trying to segment a region by seeding with a small surface
    (blob, sphere) then you will likely want to add speed (propagation) to
    the equation so that the levelsets can expand along zero gradients.
    The relative influence of these two terms are controlled by the
    SetPropagationScaling and SetAdvectionScaling parameters. INPUTS This
    filter requires two inputs. The first input is a seed image. This seed
    image must contain an isosurface that you want to use as the seed for
    your segmentation. It can be a binary, graylevel, or floating point
    image. The only requirement is that it contain a closed isosurface
    that you will identify as the seed by setting the IsosurfaceValue
    parameter of the filter. For a binary image you will want to set your
    isosurface value halfway between your on and off values (i.e. for 0's
    and 1's, use an isosurface value of 0.5).

    The second input is the feature image. This is the image from which
    the speed function will be calculated. For most applications, this is
    the image that you want to segment. The desired isosurface in your
    seed image should lie within the region of your feature image that you
    are trying to segment.

    See SegmentationLevelSetImageFilter for more information on Inputs.
    OUTPUTS The filter outputs a single, scalar, real-valued image.
    Positive *values in the output image are inside the segmented region
    and negative *values in the image are outside of the inside region.
    The zero crossings of *the image correspond to the position of the
    level set front.

    See SparseFieldLevelSetImageFilter and SegmentationLevelSetImageFilter
    for more information. PARAMETERS There are five parameters important
    for controlling the behavior of this filter.

    (1) Threshold. Sets the thresholding value of the Canny edge
    detection. See CannyEdgeDetectionImageFilter for more information.

    (2) Variance. Controls the smoothing parameter of the gaussian
    filtering done during Canny edge detection.

    (3) CurvatureScaling. Controls the degree to which curvature
    influences the evolution of the level set. Higher values relative to
    Propagation and Advection scalings will yield a smoother surface.

    (4) PropagationScaling. Scales the propagation (speed) term of the
    level set equation. Set this term to zero to allow the level set to
    flow only down the gradient of the distance transform.

    (5) AdvectionScaling. Scales influence of the advection field relative
    to curvature and propagation terms.

    See:   SegmentationLevelSetImageFilter

    See:  CannySegmentationLevelSetFunction,

    See:   SparseFieldLevelSetImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF2IF2F___New_orig__)
    Clone = _swig_new_instance_method(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF2IF2F_Clone)
    SetThreshold = _swig_new_instance_method(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF2IF2F_SetThreshold)
    GetThreshold = _swig_new_instance_method(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF2IF2F_GetThreshold)
    SetVariance = _swig_new_instance_method(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF2IF2F_SetVariance)
    GetVariance = _swig_new_instance_method(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF2IF2F_GetVariance)
    GetCannyImage = _swig_new_instance_method(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF2IF2F_GetCannyImage)
    OutputHasNumericTraitsCheck = _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF2IF2F_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkCannySegmentationLevelSetImageFilterPython.delete_itkCannySegmentationLevelSetImageFilterIF2IF2F
    cast = _swig_new_static_method(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF2IF2F_cast)

    def New(*args, **kargs):
        """New() -> itkCannySegmentationLevelSetImageFilterIF2IF2F

        Create a new object of the class itkCannySegmentationLevelSetImageFilterIF2IF2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCannySegmentationLevelSetImageFilterIF2IF2F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCannySegmentationLevelSetImageFilterIF2IF2F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCannySegmentationLevelSetImageFilterIF2IF2F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCannySegmentationLevelSetImageFilterIF2IF2F in _itkCannySegmentationLevelSetImageFilterPython:
_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF2IF2F_swigregister(itkCannySegmentationLevelSetImageFilterIF2IF2F)
itkCannySegmentationLevelSetImageFilterIF2IF2F___New_orig__ = _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF2IF2F___New_orig__
itkCannySegmentationLevelSetImageFilterIF2IF2F_cast = _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF2IF2F_cast


def itkCannySegmentationLevelSetImageFilterIF3IF3F_New():
    return itkCannySegmentationLevelSetImageFilterIF3IF3F.New()

class itkCannySegmentationLevelSetImageFilterIF3IF3F(itk.itkSegmentationLevelSetImageFilterPython.itkSegmentationLevelSetImageFilterIF3IF3F):
    r"""


    Segments structures in images based on image features derived from
    pseudo-canny-edges.

    IMPORTANT The SegmentationLevelSetImageFilter class and the
    CannySegmentationLevelSetFunction class contain additional information
    necessary to the full understanding of how to use this filter.
    OVERVIEW This class is a level set method segmentation filter. It
    constructs a speed function which is designed to lock onto edges as
    detected by a Canny filter.

    The CannySegmentationLevelSetImageFilter can be a tool for refining an
    existing segmentation, or it can be used to try to segment a region by
    itself. Like all other level-set based segmentation filters (see
    SegmentationLevelSetImageFilter), it works by first constructing a
    scalar speed term and a vector advection field based on edge features
    in the image. The level set front is then moved according to these two
    terms with the addition of a third curvature term to contol the
    smoothness of the solution.

    The speed term is constructed as the Danielsson distance transform of
    the Canny edge image, as calculated by the
    CannyEdgeDetectionImageFilter. This scalar speed can be tuned in and
    out of the final evolution equation by setting the PropagationScaling
    parameter (a value of 0 removes the speed term).

    The advection field term is constructed by minimizing Danielsson
    distance squared. i.e. $ \\mbox{min} \\int D^2 \\Rightarrow D
    \\nabla D $. This term moves the level set down the gradient of the
    distance transform.

    In practice, you may set the speed (propagation) term to zero if your
    initialization is already close to the edge you are interested in. If
    you are trying to segment a region by seeding with a small surface
    (blob, sphere) then you will likely want to add speed (propagation) to
    the equation so that the levelsets can expand along zero gradients.
    The relative influence of these two terms are controlled by the
    SetPropagationScaling and SetAdvectionScaling parameters. INPUTS This
    filter requires two inputs. The first input is a seed image. This seed
    image must contain an isosurface that you want to use as the seed for
    your segmentation. It can be a binary, graylevel, or floating point
    image. The only requirement is that it contain a closed isosurface
    that you will identify as the seed by setting the IsosurfaceValue
    parameter of the filter. For a binary image you will want to set your
    isosurface value halfway between your on and off values (i.e. for 0's
    and 1's, use an isosurface value of 0.5).

    The second input is the feature image. This is the image from which
    the speed function will be calculated. For most applications, this is
    the image that you want to segment. The desired isosurface in your
    seed image should lie within the region of your feature image that you
    are trying to segment.

    See SegmentationLevelSetImageFilter for more information on Inputs.
    OUTPUTS The filter outputs a single, scalar, real-valued image.
    Positive *values in the output image are inside the segmented region
    and negative *values in the image are outside of the inside region.
    The zero crossings of *the image correspond to the position of the
    level set front.

    See SparseFieldLevelSetImageFilter and SegmentationLevelSetImageFilter
    for more information. PARAMETERS There are five parameters important
    for controlling the behavior of this filter.

    (1) Threshold. Sets the thresholding value of the Canny edge
    detection. See CannyEdgeDetectionImageFilter for more information.

    (2) Variance. Controls the smoothing parameter of the gaussian
    filtering done during Canny edge detection.

    (3) CurvatureScaling. Controls the degree to which curvature
    influences the evolution of the level set. Higher values relative to
    Propagation and Advection scalings will yield a smoother surface.

    (4) PropagationScaling. Scales the propagation (speed) term of the
    level set equation. Set this term to zero to allow the level set to
    flow only down the gradient of the distance transform.

    (5) AdvectionScaling. Scales influence of the advection field relative
    to curvature and propagation terms.

    See:   SegmentationLevelSetImageFilter

    See:  CannySegmentationLevelSetFunction,

    See:   SparseFieldLevelSetImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF3IF3F___New_orig__)
    Clone = _swig_new_instance_method(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF3IF3F_Clone)
    SetThreshold = _swig_new_instance_method(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF3IF3F_SetThreshold)
    GetThreshold = _swig_new_instance_method(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF3IF3F_GetThreshold)
    SetVariance = _swig_new_instance_method(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF3IF3F_SetVariance)
    GetVariance = _swig_new_instance_method(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF3IF3F_GetVariance)
    GetCannyImage = _swig_new_instance_method(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF3IF3F_GetCannyImage)
    OutputHasNumericTraitsCheck = _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF3IF3F_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkCannySegmentationLevelSetImageFilterPython.delete_itkCannySegmentationLevelSetImageFilterIF3IF3F
    cast = _swig_new_static_method(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF3IF3F_cast)

    def New(*args, **kargs):
        """New() -> itkCannySegmentationLevelSetImageFilterIF3IF3F

        Create a new object of the class itkCannySegmentationLevelSetImageFilterIF3IF3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCannySegmentationLevelSetImageFilterIF3IF3F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCannySegmentationLevelSetImageFilterIF3IF3F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCannySegmentationLevelSetImageFilterIF3IF3F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCannySegmentationLevelSetImageFilterIF3IF3F in _itkCannySegmentationLevelSetImageFilterPython:
_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF3IF3F_swigregister(itkCannySegmentationLevelSetImageFilterIF3IF3F)
itkCannySegmentationLevelSetImageFilterIF3IF3F___New_orig__ = _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF3IF3F___New_orig__
itkCannySegmentationLevelSetImageFilterIF3IF3F_cast = _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF3IF3F_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def canny_segmentation_level_set_image_filter(*args, **kwargs):
    """Procedural interface for CannySegmentationLevelSetImageFilter"""
    import itk
    instance = itk.CannySegmentationLevelSetImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def canny_segmentation_level_set_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.CannySegmentationLevelSetImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.CannySegmentationLevelSetImageFilter.values()[0]
    else:
        filter_object = itk.CannySegmentationLevelSetImageFilter

    canny_segmentation_level_set_image_filter.__doc__ = filter_object.__doc__
    canny_segmentation_level_set_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    canny_segmentation_level_set_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.CannySegmentationLevelSetImageFilter, itkTemplate.itkTemplate):
        canny_segmentation_level_set_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        canny_segmentation_level_set_image_filter.__doc__ += "\n"
        canny_segmentation_level_set_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        canny_segmentation_level_set_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



