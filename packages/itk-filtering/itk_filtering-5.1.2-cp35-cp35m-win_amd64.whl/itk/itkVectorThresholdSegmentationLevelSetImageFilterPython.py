# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKLevelSetsPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkVectorThresholdSegmentationLevelSetImageFilterPython
else:
    import _itkVectorThresholdSegmentationLevelSetImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkVectorThresholdSegmentationLevelSetImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkVectorThresholdSegmentationLevelSetImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkSegmentationLevelSetImageFilterPython
import itk.itkSegmentationLevelSetFunctionPython
import itk.itkFixedArrayPython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkLevelSetFunctionPython
import itk.itkFiniteDifferenceFunctionPython
import itk.itkSparseFieldLevelSetImageFilterPython
import itk.itkFiniteDifferenceImageFilterPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterBPython
import itk.itkVariableSizeMatrixPython
import itk.itkArrayPython

def itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D_New():
    return itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D.New()

class itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D(itk.itkSegmentationLevelSetImageFilterPython.itkSegmentationLevelSetImageFilterID2IVF22D):
    r"""


    Segments structures in images based on intensity values.

    IMPORTANT The SegmentationLevelSetImageFilter class and the
    VectorThresholdSegmentationLevelSetFunction class contain additional
    information necessary to the full understanding of how to use this
    filter. CREDITS This class was contributed to ITK by Stefan
    Lindenauhttps://www.itk.org/pipermail/insight-
    users/2003-December/005969.html OVERVIEW This class is a level set
    method segmentation filter. It constructs a speed function which is
    close to zero where the Mahalabonian Distance exceeds a certain
    threshold, effectively locking the propagating front onto those edges.
    Elsewhere, the front will propagate quickly. INPUTS This filter
    requires two inputs. The first input is a seed image. This seed image
    must contain an isosurface that you want to use as the seed for your
    segmentation. It can be a binary, graylevel, or floating point image.
    The only requirement is that it contain a closed isosurface that you
    will identify as the seed by setting the IsosurfaceValue parameter of
    the filter. For a binary image you will want to set your isosurface
    value halfway between your on and off values (i.e. for 0's and 1's,
    use an isosurface value of 0.5).

    The second input is the feature image. This is the image from which
    the speed function will be calculated the feature image has to be a
    Vector Image. For most applications, this is the image that you want
    to segment. The desired isosurface in your seed image should lie
    within the region of your feature image that you are trying to
    segment. Note that this filter does no preprocessing of the feature
    image before thresholding.

    See SegmentationLevelSetImageFilter for more information on Inputs.
    OUTPUTS The filter outputs a single, scalar, real-valued image.
    Positive values in the output image are inside the segmented region
    and negative values in the image are outside of the inside region. The
    zero crossings of the image correspond to the position of the level
    set front.

    See SparseFieldLevelSetImageFilter and SegmentationLevelSetImageFilter
    for more information. PARAMETERS In addition to parameters described
    in SegmentationLevelSetImageFilter, this filter adds the Threshold,
    the Mean and the Covariance. See
    VectorThresholdSegmentationLevelSetFunction for a description of how
    this value affect the segmentation.

    See:   SegmentationLevelSetImageFilter

    See:  ThresholdSegmentationLevelSetFunction,

    See:   SparseFieldLevelSetImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D_Clone)
    SetMean = _swig_new_instance_method(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D_SetMean)
    GetMean = _swig_new_instance_method(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D_GetMean)
    SetCovariance = _swig_new_instance_method(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D_SetCovariance)
    GetCovariance = _swig_new_instance_method(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D_GetCovariance)
    SetThreshold = _swig_new_instance_method(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D_SetThreshold)
    GetThreshold = _swig_new_instance_method(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D_GetThreshold)
    __swig_destroy__ = _itkVectorThresholdSegmentationLevelSetImageFilterPython.delete_itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D
    cast = _swig_new_static_method(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D_cast)

    def New(*args, **kargs):
        """New() -> itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D

        Create a new object of the class itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D in _itkVectorThresholdSegmentationLevelSetImageFilterPython:
_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D_swigregister(itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D)
itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D___New_orig__ = _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D___New_orig__
itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D_cast = _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D_cast


def itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D_New():
    return itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D.New()

class itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D(itk.itkSegmentationLevelSetImageFilterPython.itkSegmentationLevelSetImageFilterID3IVF33D):
    r"""


    Segments structures in images based on intensity values.

    IMPORTANT The SegmentationLevelSetImageFilter class and the
    VectorThresholdSegmentationLevelSetFunction class contain additional
    information necessary to the full understanding of how to use this
    filter. CREDITS This class was contributed to ITK by Stefan
    Lindenauhttps://www.itk.org/pipermail/insight-
    users/2003-December/005969.html OVERVIEW This class is a level set
    method segmentation filter. It constructs a speed function which is
    close to zero where the Mahalabonian Distance exceeds a certain
    threshold, effectively locking the propagating front onto those edges.
    Elsewhere, the front will propagate quickly. INPUTS This filter
    requires two inputs. The first input is a seed image. This seed image
    must contain an isosurface that you want to use as the seed for your
    segmentation. It can be a binary, graylevel, or floating point image.
    The only requirement is that it contain a closed isosurface that you
    will identify as the seed by setting the IsosurfaceValue parameter of
    the filter. For a binary image you will want to set your isosurface
    value halfway between your on and off values (i.e. for 0's and 1's,
    use an isosurface value of 0.5).

    The second input is the feature image. This is the image from which
    the speed function will be calculated the feature image has to be a
    Vector Image. For most applications, this is the image that you want
    to segment. The desired isosurface in your seed image should lie
    within the region of your feature image that you are trying to
    segment. Note that this filter does no preprocessing of the feature
    image before thresholding.

    See SegmentationLevelSetImageFilter for more information on Inputs.
    OUTPUTS The filter outputs a single, scalar, real-valued image.
    Positive values in the output image are inside the segmented region
    and negative values in the image are outside of the inside region. The
    zero crossings of the image correspond to the position of the level
    set front.

    See SparseFieldLevelSetImageFilter and SegmentationLevelSetImageFilter
    for more information. PARAMETERS In addition to parameters described
    in SegmentationLevelSetImageFilter, this filter adds the Threshold,
    the Mean and the Covariance. See
    VectorThresholdSegmentationLevelSetFunction for a description of how
    this value affect the segmentation.

    See:   SegmentationLevelSetImageFilter

    See:  ThresholdSegmentationLevelSetFunction,

    See:   SparseFieldLevelSetImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D_Clone)
    SetMean = _swig_new_instance_method(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D_SetMean)
    GetMean = _swig_new_instance_method(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D_GetMean)
    SetCovariance = _swig_new_instance_method(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D_SetCovariance)
    GetCovariance = _swig_new_instance_method(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D_GetCovariance)
    SetThreshold = _swig_new_instance_method(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D_SetThreshold)
    GetThreshold = _swig_new_instance_method(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D_GetThreshold)
    __swig_destroy__ = _itkVectorThresholdSegmentationLevelSetImageFilterPython.delete_itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D
    cast = _swig_new_static_method(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D_cast)

    def New(*args, **kargs):
        """New() -> itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D

        Create a new object of the class itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D in _itkVectorThresholdSegmentationLevelSetImageFilterPython:
_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D_swigregister(itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D)
itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D___New_orig__ = _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D___New_orig__
itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D_cast = _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D_cast


def itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F_New():
    return itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F.New()

class itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F(itk.itkSegmentationLevelSetImageFilterPython.itkSegmentationLevelSetImageFilterIF2IVF22F):
    r"""


    Segments structures in images based on intensity values.

    IMPORTANT The SegmentationLevelSetImageFilter class and the
    VectorThresholdSegmentationLevelSetFunction class contain additional
    information necessary to the full understanding of how to use this
    filter. CREDITS This class was contributed to ITK by Stefan
    Lindenauhttps://www.itk.org/pipermail/insight-
    users/2003-December/005969.html OVERVIEW This class is a level set
    method segmentation filter. It constructs a speed function which is
    close to zero where the Mahalabonian Distance exceeds a certain
    threshold, effectively locking the propagating front onto those edges.
    Elsewhere, the front will propagate quickly. INPUTS This filter
    requires two inputs. The first input is a seed image. This seed image
    must contain an isosurface that you want to use as the seed for your
    segmentation. It can be a binary, graylevel, or floating point image.
    The only requirement is that it contain a closed isosurface that you
    will identify as the seed by setting the IsosurfaceValue parameter of
    the filter. For a binary image you will want to set your isosurface
    value halfway between your on and off values (i.e. for 0's and 1's,
    use an isosurface value of 0.5).

    The second input is the feature image. This is the image from which
    the speed function will be calculated the feature image has to be a
    Vector Image. For most applications, this is the image that you want
    to segment. The desired isosurface in your seed image should lie
    within the region of your feature image that you are trying to
    segment. Note that this filter does no preprocessing of the feature
    image before thresholding.

    See SegmentationLevelSetImageFilter for more information on Inputs.
    OUTPUTS The filter outputs a single, scalar, real-valued image.
    Positive values in the output image are inside the segmented region
    and negative values in the image are outside of the inside region. The
    zero crossings of the image correspond to the position of the level
    set front.

    See SparseFieldLevelSetImageFilter and SegmentationLevelSetImageFilter
    for more information. PARAMETERS In addition to parameters described
    in SegmentationLevelSetImageFilter, this filter adds the Threshold,
    the Mean and the Covariance. See
    VectorThresholdSegmentationLevelSetFunction for a description of how
    this value affect the segmentation.

    See:   SegmentationLevelSetImageFilter

    See:  ThresholdSegmentationLevelSetFunction,

    See:   SparseFieldLevelSetImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F_Clone)
    SetMean = _swig_new_instance_method(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F_SetMean)
    GetMean = _swig_new_instance_method(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F_GetMean)
    SetCovariance = _swig_new_instance_method(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F_SetCovariance)
    GetCovariance = _swig_new_instance_method(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F_GetCovariance)
    SetThreshold = _swig_new_instance_method(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F_SetThreshold)
    GetThreshold = _swig_new_instance_method(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F_GetThreshold)
    __swig_destroy__ = _itkVectorThresholdSegmentationLevelSetImageFilterPython.delete_itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F
    cast = _swig_new_static_method(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F_cast)

    def New(*args, **kargs):
        """New() -> itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F

        Create a new object of the class itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F in _itkVectorThresholdSegmentationLevelSetImageFilterPython:
_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F_swigregister(itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F)
itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F___New_orig__ = _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F___New_orig__
itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F_cast = _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F_cast


def itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F_New():
    return itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F.New()

class itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F(itk.itkSegmentationLevelSetImageFilterPython.itkSegmentationLevelSetImageFilterIF3IVF33F):
    r"""


    Segments structures in images based on intensity values.

    IMPORTANT The SegmentationLevelSetImageFilter class and the
    VectorThresholdSegmentationLevelSetFunction class contain additional
    information necessary to the full understanding of how to use this
    filter. CREDITS This class was contributed to ITK by Stefan
    Lindenauhttps://www.itk.org/pipermail/insight-
    users/2003-December/005969.html OVERVIEW This class is a level set
    method segmentation filter. It constructs a speed function which is
    close to zero where the Mahalabonian Distance exceeds a certain
    threshold, effectively locking the propagating front onto those edges.
    Elsewhere, the front will propagate quickly. INPUTS This filter
    requires two inputs. The first input is a seed image. This seed image
    must contain an isosurface that you want to use as the seed for your
    segmentation. It can be a binary, graylevel, or floating point image.
    The only requirement is that it contain a closed isosurface that you
    will identify as the seed by setting the IsosurfaceValue parameter of
    the filter. For a binary image you will want to set your isosurface
    value halfway between your on and off values (i.e. for 0's and 1's,
    use an isosurface value of 0.5).

    The second input is the feature image. This is the image from which
    the speed function will be calculated the feature image has to be a
    Vector Image. For most applications, this is the image that you want
    to segment. The desired isosurface in your seed image should lie
    within the region of your feature image that you are trying to
    segment. Note that this filter does no preprocessing of the feature
    image before thresholding.

    See SegmentationLevelSetImageFilter for more information on Inputs.
    OUTPUTS The filter outputs a single, scalar, real-valued image.
    Positive values in the output image are inside the segmented region
    and negative values in the image are outside of the inside region. The
    zero crossings of the image correspond to the position of the level
    set front.

    See SparseFieldLevelSetImageFilter and SegmentationLevelSetImageFilter
    for more information. PARAMETERS In addition to parameters described
    in SegmentationLevelSetImageFilter, this filter adds the Threshold,
    the Mean and the Covariance. See
    VectorThresholdSegmentationLevelSetFunction for a description of how
    this value affect the segmentation.

    See:   SegmentationLevelSetImageFilter

    See:  ThresholdSegmentationLevelSetFunction,

    See:   SparseFieldLevelSetImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F_Clone)
    SetMean = _swig_new_instance_method(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F_SetMean)
    GetMean = _swig_new_instance_method(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F_GetMean)
    SetCovariance = _swig_new_instance_method(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F_SetCovariance)
    GetCovariance = _swig_new_instance_method(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F_GetCovariance)
    SetThreshold = _swig_new_instance_method(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F_SetThreshold)
    GetThreshold = _swig_new_instance_method(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F_GetThreshold)
    __swig_destroy__ = _itkVectorThresholdSegmentationLevelSetImageFilterPython.delete_itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F
    cast = _swig_new_static_method(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F_cast)

    def New(*args, **kargs):
        """New() -> itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F

        Create a new object of the class itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F in _itkVectorThresholdSegmentationLevelSetImageFilterPython:
_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F_swigregister(itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F)
itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F___New_orig__ = _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F___New_orig__
itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F_cast = _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def vector_threshold_segmentation_level_set_image_filter(*args, **kwargs):
    """Procedural interface for VectorThresholdSegmentationLevelSetImageFilter"""
    import itk
    instance = itk.VectorThresholdSegmentationLevelSetImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def vector_threshold_segmentation_level_set_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.VectorThresholdSegmentationLevelSetImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.VectorThresholdSegmentationLevelSetImageFilter.values()[0]
    else:
        filter_object = itk.VectorThresholdSegmentationLevelSetImageFilter

    vector_threshold_segmentation_level_set_image_filter.__doc__ = filter_object.__doc__
    vector_threshold_segmentation_level_set_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    vector_threshold_segmentation_level_set_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.VectorThresholdSegmentationLevelSetImageFilter, itkTemplate.itkTemplate):
        vector_threshold_segmentation_level_set_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        vector_threshold_segmentation_level_set_image_filter.__doc__ += "\n"
        vector_threshold_segmentation_level_set_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        vector_threshold_segmentation_level_set_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



