# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkMatrixPython
else:
    import _itkMatrixPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkMatrixPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkMatrixPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.vnl_matrixPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython

def itkMatrixF22_New():
  return itkMatrixF22.New()


def itkMatrixD22_New():
  return itkMatrixD22.New()


def itkMatrixF23_New():
  return itkMatrixF23.New()


def itkMatrixD23_New():
  return itkMatrixD23.New()


def itkMatrixF24_New():
  return itkMatrixF24.New()


def itkMatrixD24_New():
  return itkMatrixD24.New()


def itkMatrixF32_New():
  return itkMatrixF32.New()


def itkMatrixD32_New():
  return itkMatrixD32.New()


def itkMatrixF33_New():
  return itkMatrixF33.New()


def itkMatrixD33_New():
  return itkMatrixD33.New()


def itkMatrixF34_New():
  return itkMatrixF34.New()


def itkMatrixD34_New():
  return itkMatrixD34.New()


def itkMatrixF42_New():
  return itkMatrixF42.New()


def itkMatrixD42_New():
  return itkMatrixD42.New()


def itkMatrixF43_New():
  return itkMatrixF43.New()


def itkMatrixD43_New():
  return itkMatrixD43.New()


def itkMatrixF44_New():
  return itkMatrixF44.New()


def itkMatrixD44_New():
  return itkMatrixD44.New()

class itkMatrixD22(object):
    r"""


    A templated class holding a M x N size Matrix.

    This class contains a vnl_matrix_fixed in order to make all the vnl
    mathematical methods available.

    {Core/Common/Matrix, Matrix} {Core/Common/MatrixInverse, Matrix
    Inverse} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD22___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD22___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD22___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD22___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD22___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD22___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixD22___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixD22___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD22___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD22___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixPython.itkMatrixD22_SetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixPython.itkMatrixD22_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD22___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD22___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixPython.itkMatrixD22_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixPython.itkMatrixD22_GetTranspose)

    def __init__(self, *args):
        r"""
        __init__(itkMatrixD22 self, vnl_matrixD matrix) -> itkMatrixD22
        __init__(itkMatrixD22 self, vnl_matrix_fixedD_2_2 matrix) -> itkMatrixD22
        __init__(itkMatrixD22 self) -> itkMatrixD22
        __init__(itkMatrixD22 self, itkMatrixD22 matrix) -> itkMatrixD22


        A templated class holding a M x N size Matrix.

        This class contains a vnl_matrix_fixed in order to make all the vnl
        mathematical methods available.

        {Core/Common/Matrix, Matrix} {Core/Common/MatrixInverse, Matrix
        Inverse} 
        """
        _itkMatrixPython.itkMatrixD22_swiginit(self, _itkMatrixPython.new_itkMatrixD22(*args))
    swap = _swig_new_instance_method(_itkMatrixPython.itkMatrixD22_swap)
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixD22

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy


# Register itkMatrixD22 in _itkMatrixPython:
_itkMatrixPython.itkMatrixD22_swigregister(itkMatrixD22)

class itkMatrixD23(object):
    r"""


    A templated class holding a M x N size Matrix.

    This class contains a vnl_matrix_fixed in order to make all the vnl
    mathematical methods available.

    {Core/Common/Matrix, Matrix} {Core/Common/MatrixInverse, Matrix
    Inverse} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD23___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD23___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD23___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD23___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD23___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD23___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixD23___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixD23___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD23___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD23___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixPython.itkMatrixD23_SetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixPython.itkMatrixD23_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD23___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD23___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixPython.itkMatrixD23_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixPython.itkMatrixD23_GetTranspose)

    def __init__(self, *args):
        r"""
        __init__(itkMatrixD23 self, vnl_matrixD matrix) -> itkMatrixD23
        __init__(itkMatrixD23 self, vnl_matrix_fixedD_2_3 matrix) -> itkMatrixD23
        __init__(itkMatrixD23 self) -> itkMatrixD23
        __init__(itkMatrixD23 self, itkMatrixD23 matrix) -> itkMatrixD23


        A templated class holding a M x N size Matrix.

        This class contains a vnl_matrix_fixed in order to make all the vnl
        mathematical methods available.

        {Core/Common/Matrix, Matrix} {Core/Common/MatrixInverse, Matrix
        Inverse} 
        """
        _itkMatrixPython.itkMatrixD23_swiginit(self, _itkMatrixPython.new_itkMatrixD23(*args))
    swap = _swig_new_instance_method(_itkMatrixPython.itkMatrixD23_swap)
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixD23

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy


# Register itkMatrixD23 in _itkMatrixPython:
_itkMatrixPython.itkMatrixD23_swigregister(itkMatrixD23)

class itkMatrixD24(object):
    r"""


    A templated class holding a M x N size Matrix.

    This class contains a vnl_matrix_fixed in order to make all the vnl
    mathematical methods available.

    {Core/Common/Matrix, Matrix} {Core/Common/MatrixInverse, Matrix
    Inverse} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD24___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD24___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD24___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD24___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD24___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD24___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixD24___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixD24___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD24___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD24___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixPython.itkMatrixD24_SetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixPython.itkMatrixD24_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD24___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD24___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixPython.itkMatrixD24_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixPython.itkMatrixD24_GetTranspose)

    def __init__(self, *args):
        r"""
        __init__(itkMatrixD24 self, vnl_matrixD matrix) -> itkMatrixD24
        __init__(itkMatrixD24 self, vnl_matrix_fixed< double,2,4 > const & matrix) -> itkMatrixD24
        __init__(itkMatrixD24 self) -> itkMatrixD24
        __init__(itkMatrixD24 self, itkMatrixD24 matrix) -> itkMatrixD24


        A templated class holding a M x N size Matrix.

        This class contains a vnl_matrix_fixed in order to make all the vnl
        mathematical methods available.

        {Core/Common/Matrix, Matrix} {Core/Common/MatrixInverse, Matrix
        Inverse} 
        """
        _itkMatrixPython.itkMatrixD24_swiginit(self, _itkMatrixPython.new_itkMatrixD24(*args))
    swap = _swig_new_instance_method(_itkMatrixPython.itkMatrixD24_swap)
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixD24

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy


# Register itkMatrixD24 in _itkMatrixPython:
_itkMatrixPython.itkMatrixD24_swigregister(itkMatrixD24)

class itkMatrixD32(object):
    r"""


    A templated class holding a M x N size Matrix.

    This class contains a vnl_matrix_fixed in order to make all the vnl
    mathematical methods available.

    {Core/Common/Matrix, Matrix} {Core/Common/MatrixInverse, Matrix
    Inverse} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD32___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD32___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD32___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD32___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD32___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD32___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixD32___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixD32___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD32___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD32___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixPython.itkMatrixD32_SetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixPython.itkMatrixD32_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD32___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD32___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixPython.itkMatrixD32_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixPython.itkMatrixD32_GetTranspose)

    def __init__(self, *args):
        r"""
        __init__(itkMatrixD32 self, vnl_matrixD matrix) -> itkMatrixD32
        __init__(itkMatrixD32 self, vnl_matrix_fixed< double,3,2 > const & matrix) -> itkMatrixD32
        __init__(itkMatrixD32 self) -> itkMatrixD32
        __init__(itkMatrixD32 self, itkMatrixD32 matrix) -> itkMatrixD32


        A templated class holding a M x N size Matrix.

        This class contains a vnl_matrix_fixed in order to make all the vnl
        mathematical methods available.

        {Core/Common/Matrix, Matrix} {Core/Common/MatrixInverse, Matrix
        Inverse} 
        """
        _itkMatrixPython.itkMatrixD32_swiginit(self, _itkMatrixPython.new_itkMatrixD32(*args))
    swap = _swig_new_instance_method(_itkMatrixPython.itkMatrixD32_swap)
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixD32

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy


# Register itkMatrixD32 in _itkMatrixPython:
_itkMatrixPython.itkMatrixD32_swigregister(itkMatrixD32)

class itkMatrixD33(object):
    r"""


    A templated class holding a M x N size Matrix.

    This class contains a vnl_matrix_fixed in order to make all the vnl
    mathematical methods available.

    {Core/Common/Matrix, Matrix} {Core/Common/MatrixInverse, Matrix
    Inverse} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD33___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD33___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD33___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD33___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD33___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD33___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixD33___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixD33___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD33___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD33___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixPython.itkMatrixD33_SetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixPython.itkMatrixD33_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD33___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD33___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixPython.itkMatrixD33_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixPython.itkMatrixD33_GetTranspose)

    def __init__(self, *args):
        r"""
        __init__(itkMatrixD33 self, vnl_matrixD matrix) -> itkMatrixD33
        __init__(itkMatrixD33 self, vnl_matrix_fixedD_3_3 matrix) -> itkMatrixD33
        __init__(itkMatrixD33 self) -> itkMatrixD33
        __init__(itkMatrixD33 self, itkMatrixD33 matrix) -> itkMatrixD33


        A templated class holding a M x N size Matrix.

        This class contains a vnl_matrix_fixed in order to make all the vnl
        mathematical methods available.

        {Core/Common/Matrix, Matrix} {Core/Common/MatrixInverse, Matrix
        Inverse} 
        """
        _itkMatrixPython.itkMatrixD33_swiginit(self, _itkMatrixPython.new_itkMatrixD33(*args))
    swap = _swig_new_instance_method(_itkMatrixPython.itkMatrixD33_swap)
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixD33

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy


# Register itkMatrixD33 in _itkMatrixPython:
_itkMatrixPython.itkMatrixD33_swigregister(itkMatrixD33)

class itkMatrixD34(object):
    r"""


    A templated class holding a M x N size Matrix.

    This class contains a vnl_matrix_fixed in order to make all the vnl
    mathematical methods available.

    {Core/Common/Matrix, Matrix} {Core/Common/MatrixInverse, Matrix
    Inverse} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD34___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD34___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD34___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD34___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD34___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD34___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixD34___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixD34___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD34___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD34___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixPython.itkMatrixD34_SetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixPython.itkMatrixD34_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD34___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD34___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixPython.itkMatrixD34_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixPython.itkMatrixD34_GetTranspose)

    def __init__(self, *args):
        r"""
        __init__(itkMatrixD34 self, vnl_matrixD matrix) -> itkMatrixD34
        __init__(itkMatrixD34 self, vnl_matrix_fixedD_3_4 matrix) -> itkMatrixD34
        __init__(itkMatrixD34 self) -> itkMatrixD34
        __init__(itkMatrixD34 self, itkMatrixD34 matrix) -> itkMatrixD34


        A templated class holding a M x N size Matrix.

        This class contains a vnl_matrix_fixed in order to make all the vnl
        mathematical methods available.

        {Core/Common/Matrix, Matrix} {Core/Common/MatrixInverse, Matrix
        Inverse} 
        """
        _itkMatrixPython.itkMatrixD34_swiginit(self, _itkMatrixPython.new_itkMatrixD34(*args))
    swap = _swig_new_instance_method(_itkMatrixPython.itkMatrixD34_swap)
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixD34

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy


# Register itkMatrixD34 in _itkMatrixPython:
_itkMatrixPython.itkMatrixD34_swigregister(itkMatrixD34)

class itkMatrixD42(object):
    r"""


    A templated class holding a M x N size Matrix.

    This class contains a vnl_matrix_fixed in order to make all the vnl
    mathematical methods available.

    {Core/Common/Matrix, Matrix} {Core/Common/MatrixInverse, Matrix
    Inverse} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD42___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD42___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD42___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD42___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD42___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD42___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixD42___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixD42___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD42___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD42___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixPython.itkMatrixD42_SetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixPython.itkMatrixD42_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD42___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD42___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixPython.itkMatrixD42_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixPython.itkMatrixD42_GetTranspose)

    def __init__(self, *args):
        r"""
        __init__(itkMatrixD42 self, vnl_matrixD matrix) -> itkMatrixD42
        __init__(itkMatrixD42 self, vnl_matrix_fixed< double,4,2 > const & matrix) -> itkMatrixD42
        __init__(itkMatrixD42 self) -> itkMatrixD42
        __init__(itkMatrixD42 self, itkMatrixD42 matrix) -> itkMatrixD42


        A templated class holding a M x N size Matrix.

        This class contains a vnl_matrix_fixed in order to make all the vnl
        mathematical methods available.

        {Core/Common/Matrix, Matrix} {Core/Common/MatrixInverse, Matrix
        Inverse} 
        """
        _itkMatrixPython.itkMatrixD42_swiginit(self, _itkMatrixPython.new_itkMatrixD42(*args))
    swap = _swig_new_instance_method(_itkMatrixPython.itkMatrixD42_swap)
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixD42

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy


# Register itkMatrixD42 in _itkMatrixPython:
_itkMatrixPython.itkMatrixD42_swigregister(itkMatrixD42)

class itkMatrixD43(object):
    r"""


    A templated class holding a M x N size Matrix.

    This class contains a vnl_matrix_fixed in order to make all the vnl
    mathematical methods available.

    {Core/Common/Matrix, Matrix} {Core/Common/MatrixInverse, Matrix
    Inverse} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD43___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD43___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD43___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD43___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD43___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD43___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixD43___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixD43___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD43___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD43___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixPython.itkMatrixD43_SetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixPython.itkMatrixD43_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD43___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD43___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixPython.itkMatrixD43_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixPython.itkMatrixD43_GetTranspose)

    def __init__(self, *args):
        r"""
        __init__(itkMatrixD43 self, vnl_matrixD matrix) -> itkMatrixD43
        __init__(itkMatrixD43 self, vnl_matrix_fixedD_4_3 matrix) -> itkMatrixD43
        __init__(itkMatrixD43 self) -> itkMatrixD43
        __init__(itkMatrixD43 self, itkMatrixD43 matrix) -> itkMatrixD43


        A templated class holding a M x N size Matrix.

        This class contains a vnl_matrix_fixed in order to make all the vnl
        mathematical methods available.

        {Core/Common/Matrix, Matrix} {Core/Common/MatrixInverse, Matrix
        Inverse} 
        """
        _itkMatrixPython.itkMatrixD43_swiginit(self, _itkMatrixPython.new_itkMatrixD43(*args))
    swap = _swig_new_instance_method(_itkMatrixPython.itkMatrixD43_swap)
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixD43

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy


# Register itkMatrixD43 in _itkMatrixPython:
_itkMatrixPython.itkMatrixD43_swigregister(itkMatrixD43)

class itkMatrixD44(object):
    r"""


    A templated class holding a M x N size Matrix.

    This class contains a vnl_matrix_fixed in order to make all the vnl
    mathematical methods available.

    {Core/Common/Matrix, Matrix} {Core/Common/MatrixInverse, Matrix
    Inverse} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD44___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD44___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD44___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD44___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD44___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD44___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixD44___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixD44___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD44___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD44___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixPython.itkMatrixD44_SetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixPython.itkMatrixD44_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD44___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD44___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixPython.itkMatrixD44_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixPython.itkMatrixD44_GetTranspose)

    def __init__(self, *args):
        r"""
        __init__(itkMatrixD44 self, vnl_matrixD matrix) -> itkMatrixD44
        __init__(itkMatrixD44 self, vnl_matrix_fixedD_4_4 matrix) -> itkMatrixD44
        __init__(itkMatrixD44 self) -> itkMatrixD44
        __init__(itkMatrixD44 self, itkMatrixD44 matrix) -> itkMatrixD44


        A templated class holding a M x N size Matrix.

        This class contains a vnl_matrix_fixed in order to make all the vnl
        mathematical methods available.

        {Core/Common/Matrix, Matrix} {Core/Common/MatrixInverse, Matrix
        Inverse} 
        """
        _itkMatrixPython.itkMatrixD44_swiginit(self, _itkMatrixPython.new_itkMatrixD44(*args))
    swap = _swig_new_instance_method(_itkMatrixPython.itkMatrixD44_swap)
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixD44

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy


# Register itkMatrixD44 in _itkMatrixPython:
_itkMatrixPython.itkMatrixD44_swigregister(itkMatrixD44)

class itkMatrixF22(object):
    r"""


    A templated class holding a M x N size Matrix.

    This class contains a vnl_matrix_fixed in order to make all the vnl
    mathematical methods available.

    {Core/Common/Matrix, Matrix} {Core/Common/MatrixInverse, Matrix
    Inverse} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF22___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF22___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF22___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF22___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF22___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF22___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixF22___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixF22___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF22___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF22___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixPython.itkMatrixF22_SetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixPython.itkMatrixF22_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF22___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF22___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixPython.itkMatrixF22_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixPython.itkMatrixF22_GetTranspose)

    def __init__(self, *args):
        r"""
        __init__(itkMatrixF22 self, vnl_matrixF matrix) -> itkMatrixF22
        __init__(itkMatrixF22 self, vnl_matrix_fixed< float,2,2 > const & matrix) -> itkMatrixF22
        __init__(itkMatrixF22 self) -> itkMatrixF22
        __init__(itkMatrixF22 self, itkMatrixF22 matrix) -> itkMatrixF22


        A templated class holding a M x N size Matrix.

        This class contains a vnl_matrix_fixed in order to make all the vnl
        mathematical methods available.

        {Core/Common/Matrix, Matrix} {Core/Common/MatrixInverse, Matrix
        Inverse} 
        """
        _itkMatrixPython.itkMatrixF22_swiginit(self, _itkMatrixPython.new_itkMatrixF22(*args))
    swap = _swig_new_instance_method(_itkMatrixPython.itkMatrixF22_swap)
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixF22

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy


# Register itkMatrixF22 in _itkMatrixPython:
_itkMatrixPython.itkMatrixF22_swigregister(itkMatrixF22)

class itkMatrixF23(object):
    r"""


    A templated class holding a M x N size Matrix.

    This class contains a vnl_matrix_fixed in order to make all the vnl
    mathematical methods available.

    {Core/Common/Matrix, Matrix} {Core/Common/MatrixInverse, Matrix
    Inverse} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF23___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF23___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF23___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF23___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF23___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF23___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixF23___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixF23___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF23___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF23___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixPython.itkMatrixF23_SetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixPython.itkMatrixF23_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF23___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF23___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixPython.itkMatrixF23_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixPython.itkMatrixF23_GetTranspose)

    def __init__(self, *args):
        r"""
        __init__(itkMatrixF23 self, vnl_matrixF matrix) -> itkMatrixF23
        __init__(itkMatrixF23 self, vnl_matrix_fixed< float,2,3 > const & matrix) -> itkMatrixF23
        __init__(itkMatrixF23 self) -> itkMatrixF23
        __init__(itkMatrixF23 self, itkMatrixF23 matrix) -> itkMatrixF23


        A templated class holding a M x N size Matrix.

        This class contains a vnl_matrix_fixed in order to make all the vnl
        mathematical methods available.

        {Core/Common/Matrix, Matrix} {Core/Common/MatrixInverse, Matrix
        Inverse} 
        """
        _itkMatrixPython.itkMatrixF23_swiginit(self, _itkMatrixPython.new_itkMatrixF23(*args))
    swap = _swig_new_instance_method(_itkMatrixPython.itkMatrixF23_swap)
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixF23

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy


# Register itkMatrixF23 in _itkMatrixPython:
_itkMatrixPython.itkMatrixF23_swigregister(itkMatrixF23)

class itkMatrixF24(object):
    r"""


    A templated class holding a M x N size Matrix.

    This class contains a vnl_matrix_fixed in order to make all the vnl
    mathematical methods available.

    {Core/Common/Matrix, Matrix} {Core/Common/MatrixInverse, Matrix
    Inverse} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF24___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF24___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF24___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF24___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF24___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF24___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixF24___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixF24___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF24___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF24___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixPython.itkMatrixF24_SetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixPython.itkMatrixF24_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF24___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF24___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixPython.itkMatrixF24_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixPython.itkMatrixF24_GetTranspose)

    def __init__(self, *args):
        r"""
        __init__(itkMatrixF24 self, vnl_matrixF matrix) -> itkMatrixF24
        __init__(itkMatrixF24 self, vnl_matrix_fixed< float,2,4 > const & matrix) -> itkMatrixF24
        __init__(itkMatrixF24 self) -> itkMatrixF24
        __init__(itkMatrixF24 self, itkMatrixF24 matrix) -> itkMatrixF24


        A templated class holding a M x N size Matrix.

        This class contains a vnl_matrix_fixed in order to make all the vnl
        mathematical methods available.

        {Core/Common/Matrix, Matrix} {Core/Common/MatrixInverse, Matrix
        Inverse} 
        """
        _itkMatrixPython.itkMatrixF24_swiginit(self, _itkMatrixPython.new_itkMatrixF24(*args))
    swap = _swig_new_instance_method(_itkMatrixPython.itkMatrixF24_swap)
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixF24

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy


# Register itkMatrixF24 in _itkMatrixPython:
_itkMatrixPython.itkMatrixF24_swigregister(itkMatrixF24)

class itkMatrixF32(object):
    r"""


    A templated class holding a M x N size Matrix.

    This class contains a vnl_matrix_fixed in order to make all the vnl
    mathematical methods available.

    {Core/Common/Matrix, Matrix} {Core/Common/MatrixInverse, Matrix
    Inverse} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF32___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF32___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF32___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF32___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF32___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF32___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixF32___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixF32___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF32___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF32___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixPython.itkMatrixF32_SetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixPython.itkMatrixF32_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF32___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF32___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixPython.itkMatrixF32_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixPython.itkMatrixF32_GetTranspose)

    def __init__(self, *args):
        r"""
        __init__(itkMatrixF32 self, vnl_matrixF matrix) -> itkMatrixF32
        __init__(itkMatrixF32 self, vnl_matrix_fixed< float,3,2 > const & matrix) -> itkMatrixF32
        __init__(itkMatrixF32 self) -> itkMatrixF32
        __init__(itkMatrixF32 self, itkMatrixF32 matrix) -> itkMatrixF32


        A templated class holding a M x N size Matrix.

        This class contains a vnl_matrix_fixed in order to make all the vnl
        mathematical methods available.

        {Core/Common/Matrix, Matrix} {Core/Common/MatrixInverse, Matrix
        Inverse} 
        """
        _itkMatrixPython.itkMatrixF32_swiginit(self, _itkMatrixPython.new_itkMatrixF32(*args))
    swap = _swig_new_instance_method(_itkMatrixPython.itkMatrixF32_swap)
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixF32

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy


# Register itkMatrixF32 in _itkMatrixPython:
_itkMatrixPython.itkMatrixF32_swigregister(itkMatrixF32)

class itkMatrixF33(object):
    r"""


    A templated class holding a M x N size Matrix.

    This class contains a vnl_matrix_fixed in order to make all the vnl
    mathematical methods available.

    {Core/Common/Matrix, Matrix} {Core/Common/MatrixInverse, Matrix
    Inverse} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF33___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF33___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF33___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF33___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF33___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF33___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixF33___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixF33___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF33___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF33___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixPython.itkMatrixF33_SetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixPython.itkMatrixF33_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF33___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF33___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixPython.itkMatrixF33_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixPython.itkMatrixF33_GetTranspose)

    def __init__(self, *args):
        r"""
        __init__(itkMatrixF33 self, vnl_matrixF matrix) -> itkMatrixF33
        __init__(itkMatrixF33 self, vnl_matrix_fixedF_3_3 matrix) -> itkMatrixF33
        __init__(itkMatrixF33 self) -> itkMatrixF33
        __init__(itkMatrixF33 self, itkMatrixF33 matrix) -> itkMatrixF33


        A templated class holding a M x N size Matrix.

        This class contains a vnl_matrix_fixed in order to make all the vnl
        mathematical methods available.

        {Core/Common/Matrix, Matrix} {Core/Common/MatrixInverse, Matrix
        Inverse} 
        """
        _itkMatrixPython.itkMatrixF33_swiginit(self, _itkMatrixPython.new_itkMatrixF33(*args))
    swap = _swig_new_instance_method(_itkMatrixPython.itkMatrixF33_swap)
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixF33

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy


# Register itkMatrixF33 in _itkMatrixPython:
_itkMatrixPython.itkMatrixF33_swigregister(itkMatrixF33)

class itkMatrixF34(object):
    r"""


    A templated class holding a M x N size Matrix.

    This class contains a vnl_matrix_fixed in order to make all the vnl
    mathematical methods available.

    {Core/Common/Matrix, Matrix} {Core/Common/MatrixInverse, Matrix
    Inverse} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF34___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF34___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF34___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF34___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF34___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF34___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixF34___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixF34___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF34___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF34___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixPython.itkMatrixF34_SetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixPython.itkMatrixF34_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF34___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF34___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixPython.itkMatrixF34_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixPython.itkMatrixF34_GetTranspose)

    def __init__(self, *args):
        r"""
        __init__(itkMatrixF34 self, vnl_matrixF matrix) -> itkMatrixF34
        __init__(itkMatrixF34 self, vnl_matrix_fixed< float,3,4 > const & matrix) -> itkMatrixF34
        __init__(itkMatrixF34 self) -> itkMatrixF34
        __init__(itkMatrixF34 self, itkMatrixF34 matrix) -> itkMatrixF34


        A templated class holding a M x N size Matrix.

        This class contains a vnl_matrix_fixed in order to make all the vnl
        mathematical methods available.

        {Core/Common/Matrix, Matrix} {Core/Common/MatrixInverse, Matrix
        Inverse} 
        """
        _itkMatrixPython.itkMatrixF34_swiginit(self, _itkMatrixPython.new_itkMatrixF34(*args))
    swap = _swig_new_instance_method(_itkMatrixPython.itkMatrixF34_swap)
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixF34

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy


# Register itkMatrixF34 in _itkMatrixPython:
_itkMatrixPython.itkMatrixF34_swigregister(itkMatrixF34)

class itkMatrixF42(object):
    r"""


    A templated class holding a M x N size Matrix.

    This class contains a vnl_matrix_fixed in order to make all the vnl
    mathematical methods available.

    {Core/Common/Matrix, Matrix} {Core/Common/MatrixInverse, Matrix
    Inverse} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF42___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF42___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF42___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF42___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF42___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF42___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixF42___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixF42___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF42___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF42___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixPython.itkMatrixF42_SetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixPython.itkMatrixF42_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF42___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF42___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixPython.itkMatrixF42_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixPython.itkMatrixF42_GetTranspose)

    def __init__(self, *args):
        r"""
        __init__(itkMatrixF42 self, vnl_matrixF matrix) -> itkMatrixF42
        __init__(itkMatrixF42 self, vnl_matrix_fixed< float,4,2 > const & matrix) -> itkMatrixF42
        __init__(itkMatrixF42 self) -> itkMatrixF42
        __init__(itkMatrixF42 self, itkMatrixF42 matrix) -> itkMatrixF42


        A templated class holding a M x N size Matrix.

        This class contains a vnl_matrix_fixed in order to make all the vnl
        mathematical methods available.

        {Core/Common/Matrix, Matrix} {Core/Common/MatrixInverse, Matrix
        Inverse} 
        """
        _itkMatrixPython.itkMatrixF42_swiginit(self, _itkMatrixPython.new_itkMatrixF42(*args))
    swap = _swig_new_instance_method(_itkMatrixPython.itkMatrixF42_swap)
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixF42

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy


# Register itkMatrixF42 in _itkMatrixPython:
_itkMatrixPython.itkMatrixF42_swigregister(itkMatrixF42)

class itkMatrixF43(object):
    r"""


    A templated class holding a M x N size Matrix.

    This class contains a vnl_matrix_fixed in order to make all the vnl
    mathematical methods available.

    {Core/Common/Matrix, Matrix} {Core/Common/MatrixInverse, Matrix
    Inverse} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF43___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF43___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF43___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF43___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF43___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF43___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixF43___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixF43___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF43___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF43___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixPython.itkMatrixF43_SetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixPython.itkMatrixF43_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF43___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF43___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixPython.itkMatrixF43_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixPython.itkMatrixF43_GetTranspose)

    def __init__(self, *args):
        r"""
        __init__(itkMatrixF43 self, vnl_matrixF matrix) -> itkMatrixF43
        __init__(itkMatrixF43 self, vnl_matrix_fixed< float,4,3 > const & matrix) -> itkMatrixF43
        __init__(itkMatrixF43 self) -> itkMatrixF43
        __init__(itkMatrixF43 self, itkMatrixF43 matrix) -> itkMatrixF43


        A templated class holding a M x N size Matrix.

        This class contains a vnl_matrix_fixed in order to make all the vnl
        mathematical methods available.

        {Core/Common/Matrix, Matrix} {Core/Common/MatrixInverse, Matrix
        Inverse} 
        """
        _itkMatrixPython.itkMatrixF43_swiginit(self, _itkMatrixPython.new_itkMatrixF43(*args))
    swap = _swig_new_instance_method(_itkMatrixPython.itkMatrixF43_swap)
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixF43

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy


# Register itkMatrixF43 in _itkMatrixPython:
_itkMatrixPython.itkMatrixF43_swigregister(itkMatrixF43)

class itkMatrixF44(object):
    r"""


    A templated class holding a M x N size Matrix.

    This class contains a vnl_matrix_fixed in order to make all the vnl
    mathematical methods available.

    {Core/Common/Matrix, Matrix} {Core/Common/MatrixInverse, Matrix
    Inverse} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF44___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF44___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF44___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF44___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF44___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF44___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixF44___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixF44___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF44___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF44___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixPython.itkMatrixF44_SetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixPython.itkMatrixF44_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF44___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF44___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixPython.itkMatrixF44_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixPython.itkMatrixF44_GetTranspose)

    def __init__(self, *args):
        r"""
        __init__(itkMatrixF44 self, vnl_matrixF matrix) -> itkMatrixF44
        __init__(itkMatrixF44 self, vnl_matrix_fixed< float,4,4 > const & matrix) -> itkMatrixF44
        __init__(itkMatrixF44 self) -> itkMatrixF44
        __init__(itkMatrixF44 self, itkMatrixF44 matrix) -> itkMatrixF44


        A templated class holding a M x N size Matrix.

        This class contains a vnl_matrix_fixed in order to make all the vnl
        mathematical methods available.

        {Core/Common/Matrix, Matrix} {Core/Common/MatrixInverse, Matrix
        Inverse} 
        """
        _itkMatrixPython.itkMatrixF44_swiginit(self, _itkMatrixPython.new_itkMatrixF44(*args))
    swap = _swig_new_instance_method(_itkMatrixPython.itkMatrixF44_swap)
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixF44

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy


# Register itkMatrixF44 in _itkMatrixPython:
_itkMatrixPython.itkMatrixF44_swigregister(itkMatrixF44)



