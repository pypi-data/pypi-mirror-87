# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKPathPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkContourExtractor2DImageFilterPython
else:
    import _itkContourExtractor2DImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkContourExtractor2DImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkContourExtractor2DImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkOffsetPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkContinuousIndexPython
import itk.itkIndexPython
import itk.itkPointPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkImageToPathFilterPython
import itk.ITKCommonBasePython
import itk.itkPathSourcePython
import itk.itkPolyLineParametricPathPython
import itk.itkParametricPathPython
import itk.itkPathBasePython
import itk.itkVectorContainerPython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkImagePython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython

def itkContourExtractor2DImageFilterID2_New():
    return itkContourExtractor2DImageFilterID2.New()

class itkContourExtractor2DImageFilterID2(itk.itkImageToPathFilterPython.itkImageToPathFilterID2PLPP2):
    r"""


    Computes a list of PolyLineParametricPath objects from the contours in
    a 2D image.

    Uses the "marching squares" method to compute a the iso-valued
    contours of the input 2D image for a given intensity value. Multiple
    outputs may be produced because an image can have multiple contours at
    a given level, so it is advised to call GetNumberOfIndexedOutputs()
    and GetOutput(n) to retrieve all of the contours. The contour value to
    be extracted can be set with SetContourValue(). Image intensities will
    be linearly interpolated to provide sub-pixel resolution for the
    output contours.

    The marching squares algorithm is a special case of the marching cubes
    algorithm (Lorensen, William and Harvey E. Cline. Marching Cubes: A
    High Resolution 3D Surface Construction Algorithm. Computer Graphics
    (SIGGRAPH 87 Proceedings) 21(4) July 1987, p. 163-170). A simple
    explanation is available
    here:http://users.polytech.unice.fr/~lingrand/MarchingCubes/algo.html

    There is a single ambiguous case in the marching squares algorithm: if
    a given 2x2-pixel square has two high-valued and two low-valued
    pixels, each pair diagonally adjacent. (Where high- and low-valued is
    with respect to the contour value sought.) In this case, either the
    high-valued pixels can be connected into the same "object" (where
    groups of pixels encircled by a given contour are considered an
    object), or the low-valued pixels can be connected. This is the "face
    connected" versus "face + vertex connected" (or 4- versus
    4-connected) distinction: high-valued pixels most be treated as one,
    and low-valued as the other. By default, high-valued pixels are
    treated as "face-connected" and low-valued pixels are treated as
    "face + vertex" connected. To reverse this, call
    VertexConnectHighPixelsOn();

    Outputs are not guaranteed to be closed paths: contours which
    intersect the image edge will be left open. All other paths will be
    closed. (The closedness of a path can be tested by checking whether
    the beginning point is the same as the end point.)

    Produced paths are oriented. Following the path from beginning to end,
    image intensity values lower than the contour value are to the left of
    the path and intensity values greater than the contour value are to
    the right. In other words, the image gradient at a path segment is
    (approximately) in the direct of that segment rotated right by 90
    degrees, because the image intensity values increase from left-to-
    right across the segment. This means that the generated contours will
    circle clockwise around "hills" of above-contour-value intensity,
    and counter-clockwise around "depressions" of below-contour-value
    intensity. This convention can be reversed by calling
    ReverseContourOrientationOn().

    By default the input image's largest possible region will be
    processed; call SetRequestedRegion() to process a different region, or
    ClearRequestedRegion() to revert to the default value. Note that the
    requested regions are usually set on the output; however since paths
    have no notion of a "region", this must be set at the filter level.

    This class was contributed to the Insight Journal by Zachary
    Pincus.https://hdl.handle.net/1926/165

    See:  Image

    See:   Path

    See:   PolyLineParametricPath 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2___New_orig__)
    Clone = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_Clone)
    SetReverseContourOrientation = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_SetReverseContourOrientation)
    GetReverseContourOrientation = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_GetReverseContourOrientation)
    ReverseContourOrientationOn = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_ReverseContourOrientationOn)
    ReverseContourOrientationOff = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_ReverseContourOrientationOff)
    SetVertexConnectHighPixels = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_SetVertexConnectHighPixels)
    GetVertexConnectHighPixels = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_GetVertexConnectHighPixels)
    VertexConnectHighPixelsOn = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_VertexConnectHighPixelsOn)
    VertexConnectHighPixelsOff = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_VertexConnectHighPixelsOff)
    SetRequestedRegion = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_GetRequestedRegion)
    ClearRequestedRegion = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_ClearRequestedRegion)
    SetContourValue = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_SetContourValue)
    GetContourValue = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_GetContourValue)
    DimensionShouldBe2 = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_DimensionShouldBe2
    
    InputPixelTypeComparable = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_InputPixelTypeComparable
    
    InputHasPixelTraitsCheck = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_InputHasPixelTraitsCheck
    
    InputHasNumericTraitsCheck = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourExtractor2DImageFilterPython.delete_itkContourExtractor2DImageFilterID2
    cast = _swig_new_static_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_cast)

    def New(*args, **kargs):
        """New() -> itkContourExtractor2DImageFilterID2

        Create a new object of the class itkContourExtractor2DImageFilterID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourExtractor2DImageFilterID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourExtractor2DImageFilterID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourExtractor2DImageFilterID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourExtractor2DImageFilterID2 in _itkContourExtractor2DImageFilterPython:
_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_swigregister(itkContourExtractor2DImageFilterID2)
itkContourExtractor2DImageFilterID2___New_orig__ = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2___New_orig__
itkContourExtractor2DImageFilterID2_cast = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_cast


def itkContourExtractor2DImageFilterIF2_New():
    return itkContourExtractor2DImageFilterIF2.New()

class itkContourExtractor2DImageFilterIF2(itk.itkImageToPathFilterPython.itkImageToPathFilterIF2PLPP2):
    r"""


    Computes a list of PolyLineParametricPath objects from the contours in
    a 2D image.

    Uses the "marching squares" method to compute a the iso-valued
    contours of the input 2D image for a given intensity value. Multiple
    outputs may be produced because an image can have multiple contours at
    a given level, so it is advised to call GetNumberOfIndexedOutputs()
    and GetOutput(n) to retrieve all of the contours. The contour value to
    be extracted can be set with SetContourValue(). Image intensities will
    be linearly interpolated to provide sub-pixel resolution for the
    output contours.

    The marching squares algorithm is a special case of the marching cubes
    algorithm (Lorensen, William and Harvey E. Cline. Marching Cubes: A
    High Resolution 3D Surface Construction Algorithm. Computer Graphics
    (SIGGRAPH 87 Proceedings) 21(4) July 1987, p. 163-170). A simple
    explanation is available
    here:http://users.polytech.unice.fr/~lingrand/MarchingCubes/algo.html

    There is a single ambiguous case in the marching squares algorithm: if
    a given 2x2-pixel square has two high-valued and two low-valued
    pixels, each pair diagonally adjacent. (Where high- and low-valued is
    with respect to the contour value sought.) In this case, either the
    high-valued pixels can be connected into the same "object" (where
    groups of pixels encircled by a given contour are considered an
    object), or the low-valued pixels can be connected. This is the "face
    connected" versus "face + vertex connected" (or 4- versus
    4-connected) distinction: high-valued pixels most be treated as one,
    and low-valued as the other. By default, high-valued pixels are
    treated as "face-connected" and low-valued pixels are treated as
    "face + vertex" connected. To reverse this, call
    VertexConnectHighPixelsOn();

    Outputs are not guaranteed to be closed paths: contours which
    intersect the image edge will be left open. All other paths will be
    closed. (The closedness of a path can be tested by checking whether
    the beginning point is the same as the end point.)

    Produced paths are oriented. Following the path from beginning to end,
    image intensity values lower than the contour value are to the left of
    the path and intensity values greater than the contour value are to
    the right. In other words, the image gradient at a path segment is
    (approximately) in the direct of that segment rotated right by 90
    degrees, because the image intensity values increase from left-to-
    right across the segment. This means that the generated contours will
    circle clockwise around "hills" of above-contour-value intensity,
    and counter-clockwise around "depressions" of below-contour-value
    intensity. This convention can be reversed by calling
    ReverseContourOrientationOn().

    By default the input image's largest possible region will be
    processed; call SetRequestedRegion() to process a different region, or
    ClearRequestedRegion() to revert to the default value. Note that the
    requested regions are usually set on the output; however since paths
    have no notion of a "region", this must be set at the filter level.

    This class was contributed to the Insight Journal by Zachary
    Pincus.https://hdl.handle.net/1926/165

    See:  Image

    See:   Path

    See:   PolyLineParametricPath 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2___New_orig__)
    Clone = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_Clone)
    SetReverseContourOrientation = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_SetReverseContourOrientation)
    GetReverseContourOrientation = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_GetReverseContourOrientation)
    ReverseContourOrientationOn = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_ReverseContourOrientationOn)
    ReverseContourOrientationOff = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_ReverseContourOrientationOff)
    SetVertexConnectHighPixels = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_SetVertexConnectHighPixels)
    GetVertexConnectHighPixels = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_GetVertexConnectHighPixels)
    VertexConnectHighPixelsOn = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_VertexConnectHighPixelsOn)
    VertexConnectHighPixelsOff = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_VertexConnectHighPixelsOff)
    SetRequestedRegion = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_GetRequestedRegion)
    ClearRequestedRegion = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_ClearRequestedRegion)
    SetContourValue = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_SetContourValue)
    GetContourValue = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_GetContourValue)
    DimensionShouldBe2 = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_DimensionShouldBe2
    
    InputPixelTypeComparable = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_InputPixelTypeComparable
    
    InputHasPixelTraitsCheck = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_InputHasPixelTraitsCheck
    
    InputHasNumericTraitsCheck = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourExtractor2DImageFilterPython.delete_itkContourExtractor2DImageFilterIF2
    cast = _swig_new_static_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_cast)

    def New(*args, **kargs):
        """New() -> itkContourExtractor2DImageFilterIF2

        Create a new object of the class itkContourExtractor2DImageFilterIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourExtractor2DImageFilterIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourExtractor2DImageFilterIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourExtractor2DImageFilterIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourExtractor2DImageFilterIF2 in _itkContourExtractor2DImageFilterPython:
_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_swigregister(itkContourExtractor2DImageFilterIF2)
itkContourExtractor2DImageFilterIF2___New_orig__ = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2___New_orig__
itkContourExtractor2DImageFilterIF2_cast = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_cast


def itkContourExtractor2DImageFilterISS2_New():
    return itkContourExtractor2DImageFilterISS2.New()

class itkContourExtractor2DImageFilterISS2(itk.itkImageToPathFilterPython.itkImageToPathFilterISS2PLPP2):
    r"""


    Computes a list of PolyLineParametricPath objects from the contours in
    a 2D image.

    Uses the "marching squares" method to compute a the iso-valued
    contours of the input 2D image for a given intensity value. Multiple
    outputs may be produced because an image can have multiple contours at
    a given level, so it is advised to call GetNumberOfIndexedOutputs()
    and GetOutput(n) to retrieve all of the contours. The contour value to
    be extracted can be set with SetContourValue(). Image intensities will
    be linearly interpolated to provide sub-pixel resolution for the
    output contours.

    The marching squares algorithm is a special case of the marching cubes
    algorithm (Lorensen, William and Harvey E. Cline. Marching Cubes: A
    High Resolution 3D Surface Construction Algorithm. Computer Graphics
    (SIGGRAPH 87 Proceedings) 21(4) July 1987, p. 163-170). A simple
    explanation is available
    here:http://users.polytech.unice.fr/~lingrand/MarchingCubes/algo.html

    There is a single ambiguous case in the marching squares algorithm: if
    a given 2x2-pixel square has two high-valued and two low-valued
    pixels, each pair diagonally adjacent. (Where high- and low-valued is
    with respect to the contour value sought.) In this case, either the
    high-valued pixels can be connected into the same "object" (where
    groups of pixels encircled by a given contour are considered an
    object), or the low-valued pixels can be connected. This is the "face
    connected" versus "face + vertex connected" (or 4- versus
    4-connected) distinction: high-valued pixels most be treated as one,
    and low-valued as the other. By default, high-valued pixels are
    treated as "face-connected" and low-valued pixels are treated as
    "face + vertex" connected. To reverse this, call
    VertexConnectHighPixelsOn();

    Outputs are not guaranteed to be closed paths: contours which
    intersect the image edge will be left open. All other paths will be
    closed. (The closedness of a path can be tested by checking whether
    the beginning point is the same as the end point.)

    Produced paths are oriented. Following the path from beginning to end,
    image intensity values lower than the contour value are to the left of
    the path and intensity values greater than the contour value are to
    the right. In other words, the image gradient at a path segment is
    (approximately) in the direct of that segment rotated right by 90
    degrees, because the image intensity values increase from left-to-
    right across the segment. This means that the generated contours will
    circle clockwise around "hills" of above-contour-value intensity,
    and counter-clockwise around "depressions" of below-contour-value
    intensity. This convention can be reversed by calling
    ReverseContourOrientationOn().

    By default the input image's largest possible region will be
    processed; call SetRequestedRegion() to process a different region, or
    ClearRequestedRegion() to revert to the default value. Note that the
    requested regions are usually set on the output; however since paths
    have no notion of a "region", this must be set at the filter level.

    This class was contributed to the Insight Journal by Zachary
    Pincus.https://hdl.handle.net/1926/165

    See:  Image

    See:   Path

    See:   PolyLineParametricPath 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_Clone)
    SetReverseContourOrientation = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_SetReverseContourOrientation)
    GetReverseContourOrientation = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_GetReverseContourOrientation)
    ReverseContourOrientationOn = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_ReverseContourOrientationOn)
    ReverseContourOrientationOff = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_ReverseContourOrientationOff)
    SetVertexConnectHighPixels = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_SetVertexConnectHighPixels)
    GetVertexConnectHighPixels = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_GetVertexConnectHighPixels)
    VertexConnectHighPixelsOn = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_VertexConnectHighPixelsOn)
    VertexConnectHighPixelsOff = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_VertexConnectHighPixelsOff)
    SetRequestedRegion = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_GetRequestedRegion)
    ClearRequestedRegion = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_ClearRequestedRegion)
    SetContourValue = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_SetContourValue)
    GetContourValue = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_GetContourValue)
    DimensionShouldBe2 = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_DimensionShouldBe2
    
    InputPixelTypeComparable = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_InputPixelTypeComparable
    
    InputHasPixelTraitsCheck = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_InputHasPixelTraitsCheck
    
    InputHasNumericTraitsCheck = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourExtractor2DImageFilterPython.delete_itkContourExtractor2DImageFilterISS2
    cast = _swig_new_static_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_cast)

    def New(*args, **kargs):
        """New() -> itkContourExtractor2DImageFilterISS2

        Create a new object of the class itkContourExtractor2DImageFilterISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourExtractor2DImageFilterISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourExtractor2DImageFilterISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourExtractor2DImageFilterISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourExtractor2DImageFilterISS2 in _itkContourExtractor2DImageFilterPython:
_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_swigregister(itkContourExtractor2DImageFilterISS2)
itkContourExtractor2DImageFilterISS2___New_orig__ = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2___New_orig__
itkContourExtractor2DImageFilterISS2_cast = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_cast


def itkContourExtractor2DImageFilterIUC2_New():
    return itkContourExtractor2DImageFilterIUC2.New()

class itkContourExtractor2DImageFilterIUC2(itk.itkImageToPathFilterPython.itkImageToPathFilterIUC2PLPP2):
    r"""


    Computes a list of PolyLineParametricPath objects from the contours in
    a 2D image.

    Uses the "marching squares" method to compute a the iso-valued
    contours of the input 2D image for a given intensity value. Multiple
    outputs may be produced because an image can have multiple contours at
    a given level, so it is advised to call GetNumberOfIndexedOutputs()
    and GetOutput(n) to retrieve all of the contours. The contour value to
    be extracted can be set with SetContourValue(). Image intensities will
    be linearly interpolated to provide sub-pixel resolution for the
    output contours.

    The marching squares algorithm is a special case of the marching cubes
    algorithm (Lorensen, William and Harvey E. Cline. Marching Cubes: A
    High Resolution 3D Surface Construction Algorithm. Computer Graphics
    (SIGGRAPH 87 Proceedings) 21(4) July 1987, p. 163-170). A simple
    explanation is available
    here:http://users.polytech.unice.fr/~lingrand/MarchingCubes/algo.html

    There is a single ambiguous case in the marching squares algorithm: if
    a given 2x2-pixel square has two high-valued and two low-valued
    pixels, each pair diagonally adjacent. (Where high- and low-valued is
    with respect to the contour value sought.) In this case, either the
    high-valued pixels can be connected into the same "object" (where
    groups of pixels encircled by a given contour are considered an
    object), or the low-valued pixels can be connected. This is the "face
    connected" versus "face + vertex connected" (or 4- versus
    4-connected) distinction: high-valued pixels most be treated as one,
    and low-valued as the other. By default, high-valued pixels are
    treated as "face-connected" and low-valued pixels are treated as
    "face + vertex" connected. To reverse this, call
    VertexConnectHighPixelsOn();

    Outputs are not guaranteed to be closed paths: contours which
    intersect the image edge will be left open. All other paths will be
    closed. (The closedness of a path can be tested by checking whether
    the beginning point is the same as the end point.)

    Produced paths are oriented. Following the path from beginning to end,
    image intensity values lower than the contour value are to the left of
    the path and intensity values greater than the contour value are to
    the right. In other words, the image gradient at a path segment is
    (approximately) in the direct of that segment rotated right by 90
    degrees, because the image intensity values increase from left-to-
    right across the segment. This means that the generated contours will
    circle clockwise around "hills" of above-contour-value intensity,
    and counter-clockwise around "depressions" of below-contour-value
    intensity. This convention can be reversed by calling
    ReverseContourOrientationOn().

    By default the input image's largest possible region will be
    processed; call SetRequestedRegion() to process a different region, or
    ClearRequestedRegion() to revert to the default value. Note that the
    requested regions are usually set on the output; however since paths
    have no notion of a "region", this must be set at the filter level.

    This class was contributed to the Insight Journal by Zachary
    Pincus.https://hdl.handle.net/1926/165

    See:  Image

    See:   Path

    See:   PolyLineParametricPath 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_Clone)
    SetReverseContourOrientation = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_SetReverseContourOrientation)
    GetReverseContourOrientation = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_GetReverseContourOrientation)
    ReverseContourOrientationOn = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_ReverseContourOrientationOn)
    ReverseContourOrientationOff = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_ReverseContourOrientationOff)
    SetVertexConnectHighPixels = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_SetVertexConnectHighPixels)
    GetVertexConnectHighPixels = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_GetVertexConnectHighPixels)
    VertexConnectHighPixelsOn = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_VertexConnectHighPixelsOn)
    VertexConnectHighPixelsOff = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_VertexConnectHighPixelsOff)
    SetRequestedRegion = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_GetRequestedRegion)
    ClearRequestedRegion = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_ClearRequestedRegion)
    SetContourValue = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_SetContourValue)
    GetContourValue = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_GetContourValue)
    DimensionShouldBe2 = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_DimensionShouldBe2
    
    InputPixelTypeComparable = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_InputPixelTypeComparable
    
    InputHasPixelTraitsCheck = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_InputHasPixelTraitsCheck
    
    InputHasNumericTraitsCheck = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourExtractor2DImageFilterPython.delete_itkContourExtractor2DImageFilterIUC2
    cast = _swig_new_static_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_cast)

    def New(*args, **kargs):
        """New() -> itkContourExtractor2DImageFilterIUC2

        Create a new object of the class itkContourExtractor2DImageFilterIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourExtractor2DImageFilterIUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourExtractor2DImageFilterIUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourExtractor2DImageFilterIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourExtractor2DImageFilterIUC2 in _itkContourExtractor2DImageFilterPython:
_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_swigregister(itkContourExtractor2DImageFilterIUC2)
itkContourExtractor2DImageFilterIUC2___New_orig__ = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2___New_orig__
itkContourExtractor2DImageFilterIUC2_cast = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_cast


def itkContourExtractor2DImageFilterIUS2_New():
    return itkContourExtractor2DImageFilterIUS2.New()

class itkContourExtractor2DImageFilterIUS2(itk.itkImageToPathFilterPython.itkImageToPathFilterIUS2PLPP2):
    r"""


    Computes a list of PolyLineParametricPath objects from the contours in
    a 2D image.

    Uses the "marching squares" method to compute a the iso-valued
    contours of the input 2D image for a given intensity value. Multiple
    outputs may be produced because an image can have multiple contours at
    a given level, so it is advised to call GetNumberOfIndexedOutputs()
    and GetOutput(n) to retrieve all of the contours. The contour value to
    be extracted can be set with SetContourValue(). Image intensities will
    be linearly interpolated to provide sub-pixel resolution for the
    output contours.

    The marching squares algorithm is a special case of the marching cubes
    algorithm (Lorensen, William and Harvey E. Cline. Marching Cubes: A
    High Resolution 3D Surface Construction Algorithm. Computer Graphics
    (SIGGRAPH 87 Proceedings) 21(4) July 1987, p. 163-170). A simple
    explanation is available
    here:http://users.polytech.unice.fr/~lingrand/MarchingCubes/algo.html

    There is a single ambiguous case in the marching squares algorithm: if
    a given 2x2-pixel square has two high-valued and two low-valued
    pixels, each pair diagonally adjacent. (Where high- and low-valued is
    with respect to the contour value sought.) In this case, either the
    high-valued pixels can be connected into the same "object" (where
    groups of pixels encircled by a given contour are considered an
    object), or the low-valued pixels can be connected. This is the "face
    connected" versus "face + vertex connected" (or 4- versus
    4-connected) distinction: high-valued pixels most be treated as one,
    and low-valued as the other. By default, high-valued pixels are
    treated as "face-connected" and low-valued pixels are treated as
    "face + vertex" connected. To reverse this, call
    VertexConnectHighPixelsOn();

    Outputs are not guaranteed to be closed paths: contours which
    intersect the image edge will be left open. All other paths will be
    closed. (The closedness of a path can be tested by checking whether
    the beginning point is the same as the end point.)

    Produced paths are oriented. Following the path from beginning to end,
    image intensity values lower than the contour value are to the left of
    the path and intensity values greater than the contour value are to
    the right. In other words, the image gradient at a path segment is
    (approximately) in the direct of that segment rotated right by 90
    degrees, because the image intensity values increase from left-to-
    right across the segment. This means that the generated contours will
    circle clockwise around "hills" of above-contour-value intensity,
    and counter-clockwise around "depressions" of below-contour-value
    intensity. This convention can be reversed by calling
    ReverseContourOrientationOn().

    By default the input image's largest possible region will be
    processed; call SetRequestedRegion() to process a different region, or
    ClearRequestedRegion() to revert to the default value. Note that the
    requested regions are usually set on the output; however since paths
    have no notion of a "region", this must be set at the filter level.

    This class was contributed to the Insight Journal by Zachary
    Pincus.https://hdl.handle.net/1926/165

    See:  Image

    See:   Path

    See:   PolyLineParametricPath 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_Clone)
    SetReverseContourOrientation = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_SetReverseContourOrientation)
    GetReverseContourOrientation = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_GetReverseContourOrientation)
    ReverseContourOrientationOn = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_ReverseContourOrientationOn)
    ReverseContourOrientationOff = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_ReverseContourOrientationOff)
    SetVertexConnectHighPixels = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_SetVertexConnectHighPixels)
    GetVertexConnectHighPixels = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_GetVertexConnectHighPixels)
    VertexConnectHighPixelsOn = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_VertexConnectHighPixelsOn)
    VertexConnectHighPixelsOff = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_VertexConnectHighPixelsOff)
    SetRequestedRegion = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_GetRequestedRegion)
    ClearRequestedRegion = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_ClearRequestedRegion)
    SetContourValue = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_SetContourValue)
    GetContourValue = _swig_new_instance_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_GetContourValue)
    DimensionShouldBe2 = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_DimensionShouldBe2
    
    InputPixelTypeComparable = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_InputPixelTypeComparable
    
    InputHasPixelTraitsCheck = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_InputHasPixelTraitsCheck
    
    InputHasNumericTraitsCheck = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourExtractor2DImageFilterPython.delete_itkContourExtractor2DImageFilterIUS2
    cast = _swig_new_static_method(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_cast)

    def New(*args, **kargs):
        """New() -> itkContourExtractor2DImageFilterIUS2

        Create a new object of the class itkContourExtractor2DImageFilterIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourExtractor2DImageFilterIUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourExtractor2DImageFilterIUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourExtractor2DImageFilterIUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourExtractor2DImageFilterIUS2 in _itkContourExtractor2DImageFilterPython:
_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_swigregister(itkContourExtractor2DImageFilterIUS2)
itkContourExtractor2DImageFilterIUS2___New_orig__ = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2___New_orig__
itkContourExtractor2DImageFilterIUS2_cast = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def contour_extractor2_d_image_filter(*args, **kwargs):
    """Procedural interface for ContourExtractor2DImageFilter"""
    import itk
    instance = itk.ContourExtractor2DImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def contour_extractor2_d_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ContourExtractor2DImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.ContourExtractor2DImageFilter.values()[0]
    else:
        filter_object = itk.ContourExtractor2DImageFilter

    contour_extractor2_d_image_filter.__doc__ = filter_object.__doc__
    contour_extractor2_d_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    contour_extractor2_d_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.ContourExtractor2DImageFilter, itkTemplate.itkTemplate):
        contour_extractor2_d_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        contour_extractor2_d_image_filter.__doc__ += "\n"
        contour_extractor2_d_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        contour_extractor2_d_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



