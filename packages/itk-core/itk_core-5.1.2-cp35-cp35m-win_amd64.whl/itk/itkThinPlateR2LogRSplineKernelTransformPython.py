# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKTransformPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkThinPlateR2LogRSplineKernelTransformPython
else:
    import _itkThinPlateR2LogRSplineKernelTransformPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkThinPlateR2LogRSplineKernelTransformPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkThinPlateR2LogRSplineKernelTransformPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.vnl_matrix_fixedPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkPointPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.itkKernelTransformPython
import itk.itkOptimizerParametersPython
import itk.itkArrayPython
import itk.itkCovariantVectorPython
import itk.itkPointSetPython
import itk.itkMatrixPython
import itk.itkVectorContainerPython
import itk.itkContinuousIndexPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkTransformBasePython
import itk.itkVariableLengthVectorPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkArray2DPython
import itk.itkDiffusionTensor3DPython

def itkThinPlateR2LogRSplineKernelTransformD2_New():
    return itkThinPlateR2LogRSplineKernelTransformD2.New()

class itkThinPlateR2LogRSplineKernelTransformD2(itk.itkKernelTransformPython.itkKernelTransformD2):
    r"""


    This class defines the thin plate spline (TPS) transformation. It is
    implemented in as straightforward a manner as possible from the IEEE
    TMI paper by Davis, Khotanzad, Flamig, and Harms, Vol. 16 No. 3 June
    1997.

    The kernel used in this variant of TPS is $ R^2 log(R) $ 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkThinPlateR2LogRSplineKernelTransformPython.itkThinPlateR2LogRSplineKernelTransformD2___New_orig__)
    Clone = _swig_new_instance_method(_itkThinPlateR2LogRSplineKernelTransformPython.itkThinPlateR2LogRSplineKernelTransformD2_Clone)
    __swig_destroy__ = _itkThinPlateR2LogRSplineKernelTransformPython.delete_itkThinPlateR2LogRSplineKernelTransformD2
    cast = _swig_new_static_method(_itkThinPlateR2LogRSplineKernelTransformPython.itkThinPlateR2LogRSplineKernelTransformD2_cast)

    def New(*args, **kargs):
        """New() -> itkThinPlateR2LogRSplineKernelTransformD2

        Create a new object of the class itkThinPlateR2LogRSplineKernelTransformD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkThinPlateR2LogRSplineKernelTransformD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkThinPlateR2LogRSplineKernelTransformD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkThinPlateR2LogRSplineKernelTransformD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkThinPlateR2LogRSplineKernelTransformD2 in _itkThinPlateR2LogRSplineKernelTransformPython:
_itkThinPlateR2LogRSplineKernelTransformPython.itkThinPlateR2LogRSplineKernelTransformD2_swigregister(itkThinPlateR2LogRSplineKernelTransformD2)
itkThinPlateR2LogRSplineKernelTransformD2___New_orig__ = _itkThinPlateR2LogRSplineKernelTransformPython.itkThinPlateR2LogRSplineKernelTransformD2___New_orig__
itkThinPlateR2LogRSplineKernelTransformD2_cast = _itkThinPlateR2LogRSplineKernelTransformPython.itkThinPlateR2LogRSplineKernelTransformD2_cast


def itkThinPlateR2LogRSplineKernelTransformD3_New():
    return itkThinPlateR2LogRSplineKernelTransformD3.New()

class itkThinPlateR2LogRSplineKernelTransformD3(itk.itkKernelTransformPython.itkKernelTransformD3):
    r"""


    This class defines the thin plate spline (TPS) transformation. It is
    implemented in as straightforward a manner as possible from the IEEE
    TMI paper by Davis, Khotanzad, Flamig, and Harms, Vol. 16 No. 3 June
    1997.

    The kernel used in this variant of TPS is $ R^2 log(R) $ 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkThinPlateR2LogRSplineKernelTransformPython.itkThinPlateR2LogRSplineKernelTransformD3___New_orig__)
    Clone = _swig_new_instance_method(_itkThinPlateR2LogRSplineKernelTransformPython.itkThinPlateR2LogRSplineKernelTransformD3_Clone)
    __swig_destroy__ = _itkThinPlateR2LogRSplineKernelTransformPython.delete_itkThinPlateR2LogRSplineKernelTransformD3
    cast = _swig_new_static_method(_itkThinPlateR2LogRSplineKernelTransformPython.itkThinPlateR2LogRSplineKernelTransformD3_cast)

    def New(*args, **kargs):
        """New() -> itkThinPlateR2LogRSplineKernelTransformD3

        Create a new object of the class itkThinPlateR2LogRSplineKernelTransformD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkThinPlateR2LogRSplineKernelTransformD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkThinPlateR2LogRSplineKernelTransformD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkThinPlateR2LogRSplineKernelTransformD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkThinPlateR2LogRSplineKernelTransformD3 in _itkThinPlateR2LogRSplineKernelTransformPython:
_itkThinPlateR2LogRSplineKernelTransformPython.itkThinPlateR2LogRSplineKernelTransformD3_swigregister(itkThinPlateR2LogRSplineKernelTransformD3)
itkThinPlateR2LogRSplineKernelTransformD3___New_orig__ = _itkThinPlateR2LogRSplineKernelTransformPython.itkThinPlateR2LogRSplineKernelTransformD3___New_orig__
itkThinPlateR2LogRSplineKernelTransformD3_cast = _itkThinPlateR2LogRSplineKernelTransformPython.itkThinPlateR2LogRSplineKernelTransformD3_cast



