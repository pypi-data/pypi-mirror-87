# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageFunctionPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkGaussianInterpolateImageFunctionPython
else:
    import _itkGaussianInterpolateImageFunctionPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkGaussianInterpolateImageFunctionPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkGaussianInterpolateImageFunctionPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkInterpolateImageFunctionPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkPointPython
import itk.ITKCommonBasePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkRGBPixelPython
import itk.itkImageFunctionBasePython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkContinuousIndexPython
import itk.itkFunctionBasePython
import itk.itkArrayPython

def itkGaussianInterpolateImageFunctionID2D_New():
    return itkGaussianInterpolateImageFunctionID2D.New()

class itkGaussianInterpolateImageFunctionID2D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID2D):
    r"""


    Evaluates the Gaussian interpolation of an image.

    This class defines an N-dimensional Gaussian interpolation function
    using the vnl error function. The two parameters associated with this
    function are: Sigma - a scalar array of size ImageDimension
    determining the width of the interpolation function.

    Alpha - a scalar specifying the cutoff distance over which the
    function is calculated.

    This work was originally described in the Insight Journal article: P.
    Yushkevich, N. Tustison, J. Gee, Gaussian interpolation. See:
    {https://hdl.handle.net/10380/3139}

    Paul Yushkevich

    Nick Tustison 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID2D___New_orig__)
    Clone = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID2D_Clone)
    SetSigma = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID2D_SetSigma)
    GetSigma = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID2D_GetSigma)
    SetAlpha = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID2D_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID2D_GetAlpha)
    SetParameters = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID2D_SetParameters)
    __swig_destroy__ = _itkGaussianInterpolateImageFunctionPython.delete_itkGaussianInterpolateImageFunctionID2D
    cast = _swig_new_static_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID2D_cast)

    def New(*args, **kargs):
        """New() -> itkGaussianInterpolateImageFunctionID2D

        Create a new object of the class itkGaussianInterpolateImageFunctionID2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianInterpolateImageFunctionID2D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaussianInterpolateImageFunctionID2D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaussianInterpolateImageFunctionID2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaussianInterpolateImageFunctionID2D in _itkGaussianInterpolateImageFunctionPython:
_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID2D_swigregister(itkGaussianInterpolateImageFunctionID2D)
itkGaussianInterpolateImageFunctionID2D___New_orig__ = _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID2D___New_orig__
itkGaussianInterpolateImageFunctionID2D_cast = _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID2D_cast


def itkGaussianInterpolateImageFunctionID3D_New():
    return itkGaussianInterpolateImageFunctionID3D.New()

class itkGaussianInterpolateImageFunctionID3D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID3D):
    r"""


    Evaluates the Gaussian interpolation of an image.

    This class defines an N-dimensional Gaussian interpolation function
    using the vnl error function. The two parameters associated with this
    function are: Sigma - a scalar array of size ImageDimension
    determining the width of the interpolation function.

    Alpha - a scalar specifying the cutoff distance over which the
    function is calculated.

    This work was originally described in the Insight Journal article: P.
    Yushkevich, N. Tustison, J. Gee, Gaussian interpolation. See:
    {https://hdl.handle.net/10380/3139}

    Paul Yushkevich

    Nick Tustison 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID3D___New_orig__)
    Clone = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID3D_Clone)
    SetSigma = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID3D_SetSigma)
    GetSigma = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID3D_GetSigma)
    SetAlpha = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID3D_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID3D_GetAlpha)
    SetParameters = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID3D_SetParameters)
    __swig_destroy__ = _itkGaussianInterpolateImageFunctionPython.delete_itkGaussianInterpolateImageFunctionID3D
    cast = _swig_new_static_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID3D_cast)

    def New(*args, **kargs):
        """New() -> itkGaussianInterpolateImageFunctionID3D

        Create a new object of the class itkGaussianInterpolateImageFunctionID3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianInterpolateImageFunctionID3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaussianInterpolateImageFunctionID3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaussianInterpolateImageFunctionID3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaussianInterpolateImageFunctionID3D in _itkGaussianInterpolateImageFunctionPython:
_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID3D_swigregister(itkGaussianInterpolateImageFunctionID3D)
itkGaussianInterpolateImageFunctionID3D___New_orig__ = _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID3D___New_orig__
itkGaussianInterpolateImageFunctionID3D_cast = _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionID3D_cast


def itkGaussianInterpolateImageFunctionIF2D_New():
    return itkGaussianInterpolateImageFunctionIF2D.New()

class itkGaussianInterpolateImageFunctionIF2D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF2D):
    r"""


    Evaluates the Gaussian interpolation of an image.

    This class defines an N-dimensional Gaussian interpolation function
    using the vnl error function. The two parameters associated with this
    function are: Sigma - a scalar array of size ImageDimension
    determining the width of the interpolation function.

    Alpha - a scalar specifying the cutoff distance over which the
    function is calculated.

    This work was originally described in the Insight Journal article: P.
    Yushkevich, N. Tustison, J. Gee, Gaussian interpolation. See:
    {https://hdl.handle.net/10380/3139}

    Paul Yushkevich

    Nick Tustison 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF2D___New_orig__)
    Clone = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF2D_Clone)
    SetSigma = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF2D_SetSigma)
    GetSigma = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF2D_GetSigma)
    SetAlpha = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF2D_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF2D_GetAlpha)
    SetParameters = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF2D_SetParameters)
    __swig_destroy__ = _itkGaussianInterpolateImageFunctionPython.delete_itkGaussianInterpolateImageFunctionIF2D
    cast = _swig_new_static_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF2D_cast)

    def New(*args, **kargs):
        """New() -> itkGaussianInterpolateImageFunctionIF2D

        Create a new object of the class itkGaussianInterpolateImageFunctionIF2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianInterpolateImageFunctionIF2D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaussianInterpolateImageFunctionIF2D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaussianInterpolateImageFunctionIF2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaussianInterpolateImageFunctionIF2D in _itkGaussianInterpolateImageFunctionPython:
_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF2D_swigregister(itkGaussianInterpolateImageFunctionIF2D)
itkGaussianInterpolateImageFunctionIF2D___New_orig__ = _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF2D___New_orig__
itkGaussianInterpolateImageFunctionIF2D_cast = _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF2D_cast


def itkGaussianInterpolateImageFunctionIF3D_New():
    return itkGaussianInterpolateImageFunctionIF3D.New()

class itkGaussianInterpolateImageFunctionIF3D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF3D):
    r"""


    Evaluates the Gaussian interpolation of an image.

    This class defines an N-dimensional Gaussian interpolation function
    using the vnl error function. The two parameters associated with this
    function are: Sigma - a scalar array of size ImageDimension
    determining the width of the interpolation function.

    Alpha - a scalar specifying the cutoff distance over which the
    function is calculated.

    This work was originally described in the Insight Journal article: P.
    Yushkevich, N. Tustison, J. Gee, Gaussian interpolation. See:
    {https://hdl.handle.net/10380/3139}

    Paul Yushkevich

    Nick Tustison 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF3D___New_orig__)
    Clone = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF3D_Clone)
    SetSigma = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF3D_SetSigma)
    GetSigma = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF3D_GetSigma)
    SetAlpha = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF3D_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF3D_GetAlpha)
    SetParameters = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF3D_SetParameters)
    __swig_destroy__ = _itkGaussianInterpolateImageFunctionPython.delete_itkGaussianInterpolateImageFunctionIF3D
    cast = _swig_new_static_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF3D_cast)

    def New(*args, **kargs):
        """New() -> itkGaussianInterpolateImageFunctionIF3D

        Create a new object of the class itkGaussianInterpolateImageFunctionIF3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianInterpolateImageFunctionIF3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaussianInterpolateImageFunctionIF3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaussianInterpolateImageFunctionIF3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaussianInterpolateImageFunctionIF3D in _itkGaussianInterpolateImageFunctionPython:
_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF3D_swigregister(itkGaussianInterpolateImageFunctionIF3D)
itkGaussianInterpolateImageFunctionIF3D___New_orig__ = _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF3D___New_orig__
itkGaussianInterpolateImageFunctionIF3D_cast = _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIF3D_cast


def itkGaussianInterpolateImageFunctionISS2D_New():
    return itkGaussianInterpolateImageFunctionISS2D.New()

class itkGaussianInterpolateImageFunctionISS2D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS2D):
    r"""


    Evaluates the Gaussian interpolation of an image.

    This class defines an N-dimensional Gaussian interpolation function
    using the vnl error function. The two parameters associated with this
    function are: Sigma - a scalar array of size ImageDimension
    determining the width of the interpolation function.

    Alpha - a scalar specifying the cutoff distance over which the
    function is calculated.

    This work was originally described in the Insight Journal article: P.
    Yushkevich, N. Tustison, J. Gee, Gaussian interpolation. See:
    {https://hdl.handle.net/10380/3139}

    Paul Yushkevich

    Nick Tustison 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS2D___New_orig__)
    Clone = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS2D_Clone)
    SetSigma = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS2D_SetSigma)
    GetSigma = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS2D_GetSigma)
    SetAlpha = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS2D_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS2D_GetAlpha)
    SetParameters = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS2D_SetParameters)
    __swig_destroy__ = _itkGaussianInterpolateImageFunctionPython.delete_itkGaussianInterpolateImageFunctionISS2D
    cast = _swig_new_static_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS2D_cast)

    def New(*args, **kargs):
        """New() -> itkGaussianInterpolateImageFunctionISS2D

        Create a new object of the class itkGaussianInterpolateImageFunctionISS2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianInterpolateImageFunctionISS2D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaussianInterpolateImageFunctionISS2D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaussianInterpolateImageFunctionISS2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaussianInterpolateImageFunctionISS2D in _itkGaussianInterpolateImageFunctionPython:
_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS2D_swigregister(itkGaussianInterpolateImageFunctionISS2D)
itkGaussianInterpolateImageFunctionISS2D___New_orig__ = _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS2D___New_orig__
itkGaussianInterpolateImageFunctionISS2D_cast = _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS2D_cast


def itkGaussianInterpolateImageFunctionISS3D_New():
    return itkGaussianInterpolateImageFunctionISS3D.New()

class itkGaussianInterpolateImageFunctionISS3D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS3D):
    r"""


    Evaluates the Gaussian interpolation of an image.

    This class defines an N-dimensional Gaussian interpolation function
    using the vnl error function. The two parameters associated with this
    function are: Sigma - a scalar array of size ImageDimension
    determining the width of the interpolation function.

    Alpha - a scalar specifying the cutoff distance over which the
    function is calculated.

    This work was originally described in the Insight Journal article: P.
    Yushkevich, N. Tustison, J. Gee, Gaussian interpolation. See:
    {https://hdl.handle.net/10380/3139}

    Paul Yushkevich

    Nick Tustison 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS3D___New_orig__)
    Clone = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS3D_Clone)
    SetSigma = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS3D_SetSigma)
    GetSigma = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS3D_GetSigma)
    SetAlpha = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS3D_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS3D_GetAlpha)
    SetParameters = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS3D_SetParameters)
    __swig_destroy__ = _itkGaussianInterpolateImageFunctionPython.delete_itkGaussianInterpolateImageFunctionISS3D
    cast = _swig_new_static_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS3D_cast)

    def New(*args, **kargs):
        """New() -> itkGaussianInterpolateImageFunctionISS3D

        Create a new object of the class itkGaussianInterpolateImageFunctionISS3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianInterpolateImageFunctionISS3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaussianInterpolateImageFunctionISS3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaussianInterpolateImageFunctionISS3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaussianInterpolateImageFunctionISS3D in _itkGaussianInterpolateImageFunctionPython:
_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS3D_swigregister(itkGaussianInterpolateImageFunctionISS3D)
itkGaussianInterpolateImageFunctionISS3D___New_orig__ = _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS3D___New_orig__
itkGaussianInterpolateImageFunctionISS3D_cast = _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS3D_cast


def itkGaussianInterpolateImageFunctionIUC2D_New():
    return itkGaussianInterpolateImageFunctionIUC2D.New()

class itkGaussianInterpolateImageFunctionIUC2D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC2D):
    r"""


    Evaluates the Gaussian interpolation of an image.

    This class defines an N-dimensional Gaussian interpolation function
    using the vnl error function. The two parameters associated with this
    function are: Sigma - a scalar array of size ImageDimension
    determining the width of the interpolation function.

    Alpha - a scalar specifying the cutoff distance over which the
    function is calculated.

    This work was originally described in the Insight Journal article: P.
    Yushkevich, N. Tustison, J. Gee, Gaussian interpolation. See:
    {https://hdl.handle.net/10380/3139}

    Paul Yushkevich

    Nick Tustison 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC2D___New_orig__)
    Clone = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC2D_Clone)
    SetSigma = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC2D_SetSigma)
    GetSigma = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC2D_GetSigma)
    SetAlpha = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC2D_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC2D_GetAlpha)
    SetParameters = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC2D_SetParameters)
    __swig_destroy__ = _itkGaussianInterpolateImageFunctionPython.delete_itkGaussianInterpolateImageFunctionIUC2D
    cast = _swig_new_static_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC2D_cast)

    def New(*args, **kargs):
        """New() -> itkGaussianInterpolateImageFunctionIUC2D

        Create a new object of the class itkGaussianInterpolateImageFunctionIUC2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianInterpolateImageFunctionIUC2D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaussianInterpolateImageFunctionIUC2D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaussianInterpolateImageFunctionIUC2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaussianInterpolateImageFunctionIUC2D in _itkGaussianInterpolateImageFunctionPython:
_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC2D_swigregister(itkGaussianInterpolateImageFunctionIUC2D)
itkGaussianInterpolateImageFunctionIUC2D___New_orig__ = _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC2D___New_orig__
itkGaussianInterpolateImageFunctionIUC2D_cast = _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC2D_cast


def itkGaussianInterpolateImageFunctionIUC3D_New():
    return itkGaussianInterpolateImageFunctionIUC3D.New()

class itkGaussianInterpolateImageFunctionIUC3D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC3D):
    r"""


    Evaluates the Gaussian interpolation of an image.

    This class defines an N-dimensional Gaussian interpolation function
    using the vnl error function. The two parameters associated with this
    function are: Sigma - a scalar array of size ImageDimension
    determining the width of the interpolation function.

    Alpha - a scalar specifying the cutoff distance over which the
    function is calculated.

    This work was originally described in the Insight Journal article: P.
    Yushkevich, N. Tustison, J. Gee, Gaussian interpolation. See:
    {https://hdl.handle.net/10380/3139}

    Paul Yushkevich

    Nick Tustison 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC3D___New_orig__)
    Clone = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC3D_Clone)
    SetSigma = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC3D_SetSigma)
    GetSigma = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC3D_GetSigma)
    SetAlpha = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC3D_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC3D_GetAlpha)
    SetParameters = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC3D_SetParameters)
    __swig_destroy__ = _itkGaussianInterpolateImageFunctionPython.delete_itkGaussianInterpolateImageFunctionIUC3D
    cast = _swig_new_static_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC3D_cast)

    def New(*args, **kargs):
        """New() -> itkGaussianInterpolateImageFunctionIUC3D

        Create a new object of the class itkGaussianInterpolateImageFunctionIUC3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianInterpolateImageFunctionIUC3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaussianInterpolateImageFunctionIUC3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaussianInterpolateImageFunctionIUC3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaussianInterpolateImageFunctionIUC3D in _itkGaussianInterpolateImageFunctionPython:
_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC3D_swigregister(itkGaussianInterpolateImageFunctionIUC3D)
itkGaussianInterpolateImageFunctionIUC3D___New_orig__ = _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC3D___New_orig__
itkGaussianInterpolateImageFunctionIUC3D_cast = _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC3D_cast


def itkGaussianInterpolateImageFunctionIUS2D_New():
    return itkGaussianInterpolateImageFunctionIUS2D.New()

class itkGaussianInterpolateImageFunctionIUS2D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS2D):
    r"""


    Evaluates the Gaussian interpolation of an image.

    This class defines an N-dimensional Gaussian interpolation function
    using the vnl error function. The two parameters associated with this
    function are: Sigma - a scalar array of size ImageDimension
    determining the width of the interpolation function.

    Alpha - a scalar specifying the cutoff distance over which the
    function is calculated.

    This work was originally described in the Insight Journal article: P.
    Yushkevich, N. Tustison, J. Gee, Gaussian interpolation. See:
    {https://hdl.handle.net/10380/3139}

    Paul Yushkevich

    Nick Tustison 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS2D___New_orig__)
    Clone = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS2D_Clone)
    SetSigma = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS2D_SetSigma)
    GetSigma = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS2D_GetSigma)
    SetAlpha = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS2D_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS2D_GetAlpha)
    SetParameters = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS2D_SetParameters)
    __swig_destroy__ = _itkGaussianInterpolateImageFunctionPython.delete_itkGaussianInterpolateImageFunctionIUS2D
    cast = _swig_new_static_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS2D_cast)

    def New(*args, **kargs):
        """New() -> itkGaussianInterpolateImageFunctionIUS2D

        Create a new object of the class itkGaussianInterpolateImageFunctionIUS2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianInterpolateImageFunctionIUS2D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaussianInterpolateImageFunctionIUS2D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaussianInterpolateImageFunctionIUS2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaussianInterpolateImageFunctionIUS2D in _itkGaussianInterpolateImageFunctionPython:
_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS2D_swigregister(itkGaussianInterpolateImageFunctionIUS2D)
itkGaussianInterpolateImageFunctionIUS2D___New_orig__ = _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS2D___New_orig__
itkGaussianInterpolateImageFunctionIUS2D_cast = _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS2D_cast


def itkGaussianInterpolateImageFunctionIUS3D_New():
    return itkGaussianInterpolateImageFunctionIUS3D.New()

class itkGaussianInterpolateImageFunctionIUS3D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS3D):
    r"""


    Evaluates the Gaussian interpolation of an image.

    This class defines an N-dimensional Gaussian interpolation function
    using the vnl error function. The two parameters associated with this
    function are: Sigma - a scalar array of size ImageDimension
    determining the width of the interpolation function.

    Alpha - a scalar specifying the cutoff distance over which the
    function is calculated.

    This work was originally described in the Insight Journal article: P.
    Yushkevich, N. Tustison, J. Gee, Gaussian interpolation. See:
    {https://hdl.handle.net/10380/3139}

    Paul Yushkevich

    Nick Tustison 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS3D___New_orig__)
    Clone = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS3D_Clone)
    SetSigma = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS3D_SetSigma)
    GetSigma = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS3D_GetSigma)
    SetAlpha = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS3D_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS3D_GetAlpha)
    SetParameters = _swig_new_instance_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS3D_SetParameters)
    __swig_destroy__ = _itkGaussianInterpolateImageFunctionPython.delete_itkGaussianInterpolateImageFunctionIUS3D
    cast = _swig_new_static_method(_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS3D_cast)

    def New(*args, **kargs):
        """New() -> itkGaussianInterpolateImageFunctionIUS3D

        Create a new object of the class itkGaussianInterpolateImageFunctionIUS3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianInterpolateImageFunctionIUS3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaussianInterpolateImageFunctionIUS3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaussianInterpolateImageFunctionIUS3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaussianInterpolateImageFunctionIUS3D in _itkGaussianInterpolateImageFunctionPython:
_itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS3D_swigregister(itkGaussianInterpolateImageFunctionIUS3D)
itkGaussianInterpolateImageFunctionIUS3D___New_orig__ = _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS3D___New_orig__
itkGaussianInterpolateImageFunctionIUS3D_cast = _itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS3D_cast



