# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageIntensityPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkConstrainedValueDifferenceImageFilterPython
else:
    import _itkConstrainedValueDifferenceImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkConstrainedValueDifferenceImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkConstrainedValueDifferenceImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkBinaryGeneratorImageFilterPython
import itk.stdcomplexPython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkSizePython
import itk.itkRGBPixelPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterBPython
import itk.itkInPlaceImageFilterBPython
import itk.itkSimpleDataObjectDecoratorPython
import itk.itkArrayPython

def itkConstrainedValueDifferenceImageFilterID2ID2ID2_New():
    return itkConstrainedValueDifferenceImageFilterID2ID2ID2.New()

class itkConstrainedValueDifferenceImageFilterID2ID2ID2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID2ID2ID2):
    r"""


    Implements pixel-wise the computation of constrained value difference.

    This filter is parameterized over the types of the two input images
    and the type of the output image.

    Numeric conversions (castings) are done by the C++ defaults.

    The filter will walk over all the pixels in the two input images, and
    for each one of them it will do the following:

    cast the input 1 pixel value to double

    cast the input 2 pixel value to double

    compute the difference of the two pixel values

    compute the constrained value (constrained to be between the
    NonpositiveMin and max of the output pixel type)

    cast the double value resulting from the constrained value to the
    pixel type of the output image

    store the cast value into the output image.

    The filter expect all images to have the same dimension (e.g. all 2D,
    or all 3D, or all ND)

    Lino Ramirez. Dept. of Electrical and Computer Engineering. University
    of Alberta. Canada 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterID2ID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterID2ID2ID2_Clone)
    Input1ConvertibleToDoubleCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterID2ID2ID2_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterID2ID2ID2_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterID2ID2ID2_DoubleConvertibleToOutputCheck
    
    DoubleGreaterThanOutputCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterID2ID2ID2_DoubleGreaterThanOutputCheck
    
    __swig_destroy__ = _itkConstrainedValueDifferenceImageFilterPython.delete_itkConstrainedValueDifferenceImageFilterID2ID2ID2
    cast = _swig_new_static_method(_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterID2ID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkConstrainedValueDifferenceImageFilterID2ID2ID2

        Create a new object of the class itkConstrainedValueDifferenceImageFilterID2ID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConstrainedValueDifferenceImageFilterID2ID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConstrainedValueDifferenceImageFilterID2ID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConstrainedValueDifferenceImageFilterID2ID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConstrainedValueDifferenceImageFilterID2ID2ID2 in _itkConstrainedValueDifferenceImageFilterPython:
_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterID2ID2ID2_swigregister(itkConstrainedValueDifferenceImageFilterID2ID2ID2)
itkConstrainedValueDifferenceImageFilterID2ID2ID2___New_orig__ = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterID2ID2ID2___New_orig__
itkConstrainedValueDifferenceImageFilterID2ID2ID2_cast = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterID2ID2ID2_cast


def itkConstrainedValueDifferenceImageFilterID3ID3ID3_New():
    return itkConstrainedValueDifferenceImageFilterID3ID3ID3.New()

class itkConstrainedValueDifferenceImageFilterID3ID3ID3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID3ID3ID3):
    r"""


    Implements pixel-wise the computation of constrained value difference.

    This filter is parameterized over the types of the two input images
    and the type of the output image.

    Numeric conversions (castings) are done by the C++ defaults.

    The filter will walk over all the pixels in the two input images, and
    for each one of them it will do the following:

    cast the input 1 pixel value to double

    cast the input 2 pixel value to double

    compute the difference of the two pixel values

    compute the constrained value (constrained to be between the
    NonpositiveMin and max of the output pixel type)

    cast the double value resulting from the constrained value to the
    pixel type of the output image

    store the cast value into the output image.

    The filter expect all images to have the same dimension (e.g. all 2D,
    or all 3D, or all ND)

    Lino Ramirez. Dept. of Electrical and Computer Engineering. University
    of Alberta. Canada 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterID3ID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterID3ID3ID3_Clone)
    Input1ConvertibleToDoubleCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterID3ID3ID3_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterID3ID3ID3_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterID3ID3ID3_DoubleConvertibleToOutputCheck
    
    DoubleGreaterThanOutputCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterID3ID3ID3_DoubleGreaterThanOutputCheck
    
    __swig_destroy__ = _itkConstrainedValueDifferenceImageFilterPython.delete_itkConstrainedValueDifferenceImageFilterID3ID3ID3
    cast = _swig_new_static_method(_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterID3ID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkConstrainedValueDifferenceImageFilterID3ID3ID3

        Create a new object of the class itkConstrainedValueDifferenceImageFilterID3ID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConstrainedValueDifferenceImageFilterID3ID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConstrainedValueDifferenceImageFilterID3ID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConstrainedValueDifferenceImageFilterID3ID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConstrainedValueDifferenceImageFilterID3ID3ID3 in _itkConstrainedValueDifferenceImageFilterPython:
_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterID3ID3ID3_swigregister(itkConstrainedValueDifferenceImageFilterID3ID3ID3)
itkConstrainedValueDifferenceImageFilterID3ID3ID3___New_orig__ = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterID3ID3ID3___New_orig__
itkConstrainedValueDifferenceImageFilterID3ID3ID3_cast = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterID3ID3ID3_cast


def itkConstrainedValueDifferenceImageFilterIF2IF2IF2_New():
    return itkConstrainedValueDifferenceImageFilterIF2IF2IF2.New()

class itkConstrainedValueDifferenceImageFilterIF2IF2IF2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF2IF2IF2):
    r"""


    Implements pixel-wise the computation of constrained value difference.

    This filter is parameterized over the types of the two input images
    and the type of the output image.

    Numeric conversions (castings) are done by the C++ defaults.

    The filter will walk over all the pixels in the two input images, and
    for each one of them it will do the following:

    cast the input 1 pixel value to double

    cast the input 2 pixel value to double

    compute the difference of the two pixel values

    compute the constrained value (constrained to be between the
    NonpositiveMin and max of the output pixel type)

    cast the double value resulting from the constrained value to the
    pixel type of the output image

    store the cast value into the output image.

    The filter expect all images to have the same dimension (e.g. all 2D,
    or all 3D, or all ND)

    Lino Ramirez. Dept. of Electrical and Computer Engineering. University
    of Alberta. Canada 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIF2IF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIF2IF2IF2_Clone)
    Input1ConvertibleToDoubleCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIF2IF2IF2_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIF2IF2IF2_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIF2IF2IF2_DoubleConvertibleToOutputCheck
    
    DoubleGreaterThanOutputCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIF2IF2IF2_DoubleGreaterThanOutputCheck
    
    __swig_destroy__ = _itkConstrainedValueDifferenceImageFilterPython.delete_itkConstrainedValueDifferenceImageFilterIF2IF2IF2
    cast = _swig_new_static_method(_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIF2IF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkConstrainedValueDifferenceImageFilterIF2IF2IF2

        Create a new object of the class itkConstrainedValueDifferenceImageFilterIF2IF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConstrainedValueDifferenceImageFilterIF2IF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConstrainedValueDifferenceImageFilterIF2IF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConstrainedValueDifferenceImageFilterIF2IF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConstrainedValueDifferenceImageFilterIF2IF2IF2 in _itkConstrainedValueDifferenceImageFilterPython:
_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIF2IF2IF2_swigregister(itkConstrainedValueDifferenceImageFilterIF2IF2IF2)
itkConstrainedValueDifferenceImageFilterIF2IF2IF2___New_orig__ = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIF2IF2IF2___New_orig__
itkConstrainedValueDifferenceImageFilterIF2IF2IF2_cast = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIF2IF2IF2_cast


def itkConstrainedValueDifferenceImageFilterIF3IF3IF3_New():
    return itkConstrainedValueDifferenceImageFilterIF3IF3IF3.New()

class itkConstrainedValueDifferenceImageFilterIF3IF3IF3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF3IF3IF3):
    r"""


    Implements pixel-wise the computation of constrained value difference.

    This filter is parameterized over the types of the two input images
    and the type of the output image.

    Numeric conversions (castings) are done by the C++ defaults.

    The filter will walk over all the pixels in the two input images, and
    for each one of them it will do the following:

    cast the input 1 pixel value to double

    cast the input 2 pixel value to double

    compute the difference of the two pixel values

    compute the constrained value (constrained to be between the
    NonpositiveMin and max of the output pixel type)

    cast the double value resulting from the constrained value to the
    pixel type of the output image

    store the cast value into the output image.

    The filter expect all images to have the same dimension (e.g. all 2D,
    or all 3D, or all ND)

    Lino Ramirez. Dept. of Electrical and Computer Engineering. University
    of Alberta. Canada 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIF3IF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIF3IF3IF3_Clone)
    Input1ConvertibleToDoubleCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIF3IF3IF3_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIF3IF3IF3_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIF3IF3IF3_DoubleConvertibleToOutputCheck
    
    DoubleGreaterThanOutputCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIF3IF3IF3_DoubleGreaterThanOutputCheck
    
    __swig_destroy__ = _itkConstrainedValueDifferenceImageFilterPython.delete_itkConstrainedValueDifferenceImageFilterIF3IF3IF3
    cast = _swig_new_static_method(_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIF3IF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkConstrainedValueDifferenceImageFilterIF3IF3IF3

        Create a new object of the class itkConstrainedValueDifferenceImageFilterIF3IF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConstrainedValueDifferenceImageFilterIF3IF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConstrainedValueDifferenceImageFilterIF3IF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConstrainedValueDifferenceImageFilterIF3IF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConstrainedValueDifferenceImageFilterIF3IF3IF3 in _itkConstrainedValueDifferenceImageFilterPython:
_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIF3IF3IF3_swigregister(itkConstrainedValueDifferenceImageFilterIF3IF3IF3)
itkConstrainedValueDifferenceImageFilterIF3IF3IF3___New_orig__ = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIF3IF3IF3___New_orig__
itkConstrainedValueDifferenceImageFilterIF3IF3IF3_cast = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIF3IF3IF3_cast


def itkConstrainedValueDifferenceImageFilterISS2ISS2ISS2_New():
    return itkConstrainedValueDifferenceImageFilterISS2ISS2ISS2.New()

class itkConstrainedValueDifferenceImageFilterISS2ISS2ISS2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS2ISS2ISS2):
    r"""


    Implements pixel-wise the computation of constrained value difference.

    This filter is parameterized over the types of the two input images
    and the type of the output image.

    Numeric conversions (castings) are done by the C++ defaults.

    The filter will walk over all the pixels in the two input images, and
    for each one of them it will do the following:

    cast the input 1 pixel value to double

    cast the input 2 pixel value to double

    compute the difference of the two pixel values

    compute the constrained value (constrained to be between the
    NonpositiveMin and max of the output pixel type)

    cast the double value resulting from the constrained value to the
    pixel type of the output image

    store the cast value into the output image.

    The filter expect all images to have the same dimension (e.g. all 2D,
    or all 3D, or all ND)

    Lino Ramirez. Dept. of Electrical and Computer Engineering. University
    of Alberta. Canada 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterISS2ISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterISS2ISS2ISS2_Clone)
    Input1ConvertibleToDoubleCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterISS2ISS2ISS2_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterISS2ISS2ISS2_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterISS2ISS2ISS2_DoubleConvertibleToOutputCheck
    
    DoubleGreaterThanOutputCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterISS2ISS2ISS2_DoubleGreaterThanOutputCheck
    
    __swig_destroy__ = _itkConstrainedValueDifferenceImageFilterPython.delete_itkConstrainedValueDifferenceImageFilterISS2ISS2ISS2
    cast = _swig_new_static_method(_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterISS2ISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkConstrainedValueDifferenceImageFilterISS2ISS2ISS2

        Create a new object of the class itkConstrainedValueDifferenceImageFilterISS2ISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConstrainedValueDifferenceImageFilterISS2ISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConstrainedValueDifferenceImageFilterISS2ISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConstrainedValueDifferenceImageFilterISS2ISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConstrainedValueDifferenceImageFilterISS2ISS2ISS2 in _itkConstrainedValueDifferenceImageFilterPython:
_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterISS2ISS2ISS2_swigregister(itkConstrainedValueDifferenceImageFilterISS2ISS2ISS2)
itkConstrainedValueDifferenceImageFilterISS2ISS2ISS2___New_orig__ = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterISS2ISS2ISS2___New_orig__
itkConstrainedValueDifferenceImageFilterISS2ISS2ISS2_cast = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterISS2ISS2ISS2_cast


def itkConstrainedValueDifferenceImageFilterISS3ISS3ISS3_New():
    return itkConstrainedValueDifferenceImageFilterISS3ISS3ISS3.New()

class itkConstrainedValueDifferenceImageFilterISS3ISS3ISS3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS3ISS3ISS3):
    r"""


    Implements pixel-wise the computation of constrained value difference.

    This filter is parameterized over the types of the two input images
    and the type of the output image.

    Numeric conversions (castings) are done by the C++ defaults.

    The filter will walk over all the pixels in the two input images, and
    for each one of them it will do the following:

    cast the input 1 pixel value to double

    cast the input 2 pixel value to double

    compute the difference of the two pixel values

    compute the constrained value (constrained to be between the
    NonpositiveMin and max of the output pixel type)

    cast the double value resulting from the constrained value to the
    pixel type of the output image

    store the cast value into the output image.

    The filter expect all images to have the same dimension (e.g. all 2D,
    or all 3D, or all ND)

    Lino Ramirez. Dept. of Electrical and Computer Engineering. University
    of Alberta. Canada 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterISS3ISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterISS3ISS3ISS3_Clone)
    Input1ConvertibleToDoubleCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterISS3ISS3ISS3_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterISS3ISS3ISS3_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterISS3ISS3ISS3_DoubleConvertibleToOutputCheck
    
    DoubleGreaterThanOutputCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterISS3ISS3ISS3_DoubleGreaterThanOutputCheck
    
    __swig_destroy__ = _itkConstrainedValueDifferenceImageFilterPython.delete_itkConstrainedValueDifferenceImageFilterISS3ISS3ISS3
    cast = _swig_new_static_method(_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterISS3ISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkConstrainedValueDifferenceImageFilterISS3ISS3ISS3

        Create a new object of the class itkConstrainedValueDifferenceImageFilterISS3ISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConstrainedValueDifferenceImageFilterISS3ISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConstrainedValueDifferenceImageFilterISS3ISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConstrainedValueDifferenceImageFilterISS3ISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConstrainedValueDifferenceImageFilterISS3ISS3ISS3 in _itkConstrainedValueDifferenceImageFilterPython:
_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterISS3ISS3ISS3_swigregister(itkConstrainedValueDifferenceImageFilterISS3ISS3ISS3)
itkConstrainedValueDifferenceImageFilterISS3ISS3ISS3___New_orig__ = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterISS3ISS3ISS3___New_orig__
itkConstrainedValueDifferenceImageFilterISS3ISS3ISS3_cast = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterISS3ISS3ISS3_cast


def itkConstrainedValueDifferenceImageFilterIUC2IUC2IUC2_New():
    return itkConstrainedValueDifferenceImageFilterIUC2IUC2IUC2.New()

class itkConstrainedValueDifferenceImageFilterIUC2IUC2IUC2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC2IUC2IUC2):
    r"""


    Implements pixel-wise the computation of constrained value difference.

    This filter is parameterized over the types of the two input images
    and the type of the output image.

    Numeric conversions (castings) are done by the C++ defaults.

    The filter will walk over all the pixels in the two input images, and
    for each one of them it will do the following:

    cast the input 1 pixel value to double

    cast the input 2 pixel value to double

    compute the difference of the two pixel values

    compute the constrained value (constrained to be between the
    NonpositiveMin and max of the output pixel type)

    cast the double value resulting from the constrained value to the
    pixel type of the output image

    store the cast value into the output image.

    The filter expect all images to have the same dimension (e.g. all 2D,
    or all 3D, or all ND)

    Lino Ramirez. Dept. of Electrical and Computer Engineering. University
    of Alberta. Canada 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUC2IUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUC2IUC2IUC2_Clone)
    Input1ConvertibleToDoubleCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUC2IUC2IUC2_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUC2IUC2IUC2_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUC2IUC2IUC2_DoubleConvertibleToOutputCheck
    
    DoubleGreaterThanOutputCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUC2IUC2IUC2_DoubleGreaterThanOutputCheck
    
    __swig_destroy__ = _itkConstrainedValueDifferenceImageFilterPython.delete_itkConstrainedValueDifferenceImageFilterIUC2IUC2IUC2
    cast = _swig_new_static_method(_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUC2IUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkConstrainedValueDifferenceImageFilterIUC2IUC2IUC2

        Create a new object of the class itkConstrainedValueDifferenceImageFilterIUC2IUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConstrainedValueDifferenceImageFilterIUC2IUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConstrainedValueDifferenceImageFilterIUC2IUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConstrainedValueDifferenceImageFilterIUC2IUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConstrainedValueDifferenceImageFilterIUC2IUC2IUC2 in _itkConstrainedValueDifferenceImageFilterPython:
_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUC2IUC2IUC2_swigregister(itkConstrainedValueDifferenceImageFilterIUC2IUC2IUC2)
itkConstrainedValueDifferenceImageFilterIUC2IUC2IUC2___New_orig__ = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUC2IUC2IUC2___New_orig__
itkConstrainedValueDifferenceImageFilterIUC2IUC2IUC2_cast = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUC2IUC2IUC2_cast


def itkConstrainedValueDifferenceImageFilterIUC3IUC3IUC3_New():
    return itkConstrainedValueDifferenceImageFilterIUC3IUC3IUC3.New()

class itkConstrainedValueDifferenceImageFilterIUC3IUC3IUC3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC3IUC3IUC3):
    r"""


    Implements pixel-wise the computation of constrained value difference.

    This filter is parameterized over the types of the two input images
    and the type of the output image.

    Numeric conversions (castings) are done by the C++ defaults.

    The filter will walk over all the pixels in the two input images, and
    for each one of them it will do the following:

    cast the input 1 pixel value to double

    cast the input 2 pixel value to double

    compute the difference of the two pixel values

    compute the constrained value (constrained to be between the
    NonpositiveMin and max of the output pixel type)

    cast the double value resulting from the constrained value to the
    pixel type of the output image

    store the cast value into the output image.

    The filter expect all images to have the same dimension (e.g. all 2D,
    or all 3D, or all ND)

    Lino Ramirez. Dept. of Electrical and Computer Engineering. University
    of Alberta. Canada 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUC3IUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUC3IUC3IUC3_Clone)
    Input1ConvertibleToDoubleCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUC3IUC3IUC3_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUC3IUC3IUC3_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUC3IUC3IUC3_DoubleConvertibleToOutputCheck
    
    DoubleGreaterThanOutputCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUC3IUC3IUC3_DoubleGreaterThanOutputCheck
    
    __swig_destroy__ = _itkConstrainedValueDifferenceImageFilterPython.delete_itkConstrainedValueDifferenceImageFilterIUC3IUC3IUC3
    cast = _swig_new_static_method(_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUC3IUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkConstrainedValueDifferenceImageFilterIUC3IUC3IUC3

        Create a new object of the class itkConstrainedValueDifferenceImageFilterIUC3IUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConstrainedValueDifferenceImageFilterIUC3IUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConstrainedValueDifferenceImageFilterIUC3IUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConstrainedValueDifferenceImageFilterIUC3IUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConstrainedValueDifferenceImageFilterIUC3IUC3IUC3 in _itkConstrainedValueDifferenceImageFilterPython:
_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUC3IUC3IUC3_swigregister(itkConstrainedValueDifferenceImageFilterIUC3IUC3IUC3)
itkConstrainedValueDifferenceImageFilterIUC3IUC3IUC3___New_orig__ = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUC3IUC3IUC3___New_orig__
itkConstrainedValueDifferenceImageFilterIUC3IUC3IUC3_cast = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUC3IUC3IUC3_cast


def itkConstrainedValueDifferenceImageFilterIUS2IUS2IUS2_New():
    return itkConstrainedValueDifferenceImageFilterIUS2IUS2IUS2.New()

class itkConstrainedValueDifferenceImageFilterIUS2IUS2IUS2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS2IUS2IUS2):
    r"""


    Implements pixel-wise the computation of constrained value difference.

    This filter is parameterized over the types of the two input images
    and the type of the output image.

    Numeric conversions (castings) are done by the C++ defaults.

    The filter will walk over all the pixels in the two input images, and
    for each one of them it will do the following:

    cast the input 1 pixel value to double

    cast the input 2 pixel value to double

    compute the difference of the two pixel values

    compute the constrained value (constrained to be between the
    NonpositiveMin and max of the output pixel type)

    cast the double value resulting from the constrained value to the
    pixel type of the output image

    store the cast value into the output image.

    The filter expect all images to have the same dimension (e.g. all 2D,
    or all 3D, or all ND)

    Lino Ramirez. Dept. of Electrical and Computer Engineering. University
    of Alberta. Canada 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUS2IUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUS2IUS2IUS2_Clone)
    Input1ConvertibleToDoubleCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUS2IUS2IUS2_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUS2IUS2IUS2_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUS2IUS2IUS2_DoubleConvertibleToOutputCheck
    
    DoubleGreaterThanOutputCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUS2IUS2IUS2_DoubleGreaterThanOutputCheck
    
    __swig_destroy__ = _itkConstrainedValueDifferenceImageFilterPython.delete_itkConstrainedValueDifferenceImageFilterIUS2IUS2IUS2
    cast = _swig_new_static_method(_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUS2IUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkConstrainedValueDifferenceImageFilterIUS2IUS2IUS2

        Create a new object of the class itkConstrainedValueDifferenceImageFilterIUS2IUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConstrainedValueDifferenceImageFilterIUS2IUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConstrainedValueDifferenceImageFilterIUS2IUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConstrainedValueDifferenceImageFilterIUS2IUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConstrainedValueDifferenceImageFilterIUS2IUS2IUS2 in _itkConstrainedValueDifferenceImageFilterPython:
_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUS2IUS2IUS2_swigregister(itkConstrainedValueDifferenceImageFilterIUS2IUS2IUS2)
itkConstrainedValueDifferenceImageFilterIUS2IUS2IUS2___New_orig__ = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUS2IUS2IUS2___New_orig__
itkConstrainedValueDifferenceImageFilterIUS2IUS2IUS2_cast = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUS2IUS2IUS2_cast


def itkConstrainedValueDifferenceImageFilterIUS3IUS3IUS3_New():
    return itkConstrainedValueDifferenceImageFilterIUS3IUS3IUS3.New()

class itkConstrainedValueDifferenceImageFilterIUS3IUS3IUS3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS3IUS3IUS3):
    r"""


    Implements pixel-wise the computation of constrained value difference.

    This filter is parameterized over the types of the two input images
    and the type of the output image.

    Numeric conversions (castings) are done by the C++ defaults.

    The filter will walk over all the pixels in the two input images, and
    for each one of them it will do the following:

    cast the input 1 pixel value to double

    cast the input 2 pixel value to double

    compute the difference of the two pixel values

    compute the constrained value (constrained to be between the
    NonpositiveMin and max of the output pixel type)

    cast the double value resulting from the constrained value to the
    pixel type of the output image

    store the cast value into the output image.

    The filter expect all images to have the same dimension (e.g. all 2D,
    or all 3D, or all ND)

    Lino Ramirez. Dept. of Electrical and Computer Engineering. University
    of Alberta. Canada 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUS3IUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUS3IUS3IUS3_Clone)
    Input1ConvertibleToDoubleCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUS3IUS3IUS3_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUS3IUS3IUS3_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUS3IUS3IUS3_DoubleConvertibleToOutputCheck
    
    DoubleGreaterThanOutputCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUS3IUS3IUS3_DoubleGreaterThanOutputCheck
    
    __swig_destroy__ = _itkConstrainedValueDifferenceImageFilterPython.delete_itkConstrainedValueDifferenceImageFilterIUS3IUS3IUS3
    cast = _swig_new_static_method(_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUS3IUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkConstrainedValueDifferenceImageFilterIUS3IUS3IUS3

        Create a new object of the class itkConstrainedValueDifferenceImageFilterIUS3IUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConstrainedValueDifferenceImageFilterIUS3IUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConstrainedValueDifferenceImageFilterIUS3IUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConstrainedValueDifferenceImageFilterIUS3IUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConstrainedValueDifferenceImageFilterIUS3IUS3IUS3 in _itkConstrainedValueDifferenceImageFilterPython:
_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUS3IUS3IUS3_swigregister(itkConstrainedValueDifferenceImageFilterIUS3IUS3IUS3)
itkConstrainedValueDifferenceImageFilterIUS3IUS3IUS3___New_orig__ = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUS3IUS3IUS3___New_orig__
itkConstrainedValueDifferenceImageFilterIUS3IUS3IUS3_cast = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUS3IUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def constrained_value_difference_image_filter(*args, **kwargs):
    """Procedural interface for ConstrainedValueDifferenceImageFilter"""
    import itk
    instance = itk.ConstrainedValueDifferenceImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def constrained_value_difference_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ConstrainedValueDifferenceImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.ConstrainedValueDifferenceImageFilter.values()[0]
    else:
        filter_object = itk.ConstrainedValueDifferenceImageFilter

    constrained_value_difference_image_filter.__doc__ = filter_object.__doc__
    constrained_value_difference_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    constrained_value_difference_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.ConstrainedValueDifferenceImageFilter, itkTemplate.itkTemplate):
        constrained_value_difference_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        constrained_value_difference_image_filter.__doc__ += "\n"
        constrained_value_difference_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        constrained_value_difference_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



