# coding: utf-8

"""
    Argo Events

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from argo.events.client.configuration import Configuration


class V1alpha1TriggerTemplate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'argo_workflow': 'V1alpha1ArgoWorkflowTrigger',
        'aws_lambda': 'V1alpha1AWSLambdaTrigger',
        'conditions': 'str',
        'custom': 'V1alpha1CustomTrigger',
        'http': 'V1alpha1HTTPTrigger',
        'k8s': 'V1alpha1StandardK8STrigger',
        'kafka': 'V1alpha1KafkaTrigger',
        'name': 'str',
        'nats': 'V1alpha1NATSTrigger',
        'open_whisk': 'V1alpha1OpenWhiskTrigger',
        'slack': 'V1alpha1SlackTrigger',
        'switch': 'V1alpha1TriggerSwitch'
    }

    attribute_map = {
        'argo_workflow': 'argoWorkflow',
        'aws_lambda': 'awsLambda',
        'conditions': 'conditions',
        'custom': 'custom',
        'http': 'http',
        'k8s': 'k8s',
        'kafka': 'kafka',
        'name': 'name',
        'nats': 'nats',
        'open_whisk': 'openWhisk',
        'slack': 'slack',
        'switch': 'switch'
    }

    def __init__(self, argo_workflow=None, aws_lambda=None, conditions=None, custom=None, http=None, k8s=None, kafka=None, name=None, nats=None, open_whisk=None, slack=None, switch=None, local_vars_configuration=None):  # noqa: E501
        """V1alpha1TriggerTemplate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._argo_workflow = None
        self._aws_lambda = None
        self._conditions = None
        self._custom = None
        self._http = None
        self._k8s = None
        self._kafka = None
        self._name = None
        self._nats = None
        self._open_whisk = None
        self._slack = None
        self._switch = None
        self.discriminator = None

        if argo_workflow is not None:
            self.argo_workflow = argo_workflow
        if aws_lambda is not None:
            self.aws_lambda = aws_lambda
        if conditions is not None:
            self.conditions = conditions
        if custom is not None:
            self.custom = custom
        if http is not None:
            self.http = http
        if k8s is not None:
            self.k8s = k8s
        if kafka is not None:
            self.kafka = kafka
        self.name = name
        if nats is not None:
            self.nats = nats
        if open_whisk is not None:
            self.open_whisk = open_whisk
        if slack is not None:
            self.slack = slack
        if switch is not None:
            self.switch = switch

    @property
    def argo_workflow(self):
        """Gets the argo_workflow of this V1alpha1TriggerTemplate.  # noqa: E501


        :return: The argo_workflow of this V1alpha1TriggerTemplate.  # noqa: E501
        :rtype: V1alpha1ArgoWorkflowTrigger
        """
        return self._argo_workflow

    @argo_workflow.setter
    def argo_workflow(self, argo_workflow):
        """Sets the argo_workflow of this V1alpha1TriggerTemplate.


        :param argo_workflow: The argo_workflow of this V1alpha1TriggerTemplate.  # noqa: E501
        :type: V1alpha1ArgoWorkflowTrigger
        """

        self._argo_workflow = argo_workflow

    @property
    def aws_lambda(self):
        """Gets the aws_lambda of this V1alpha1TriggerTemplate.  # noqa: E501


        :return: The aws_lambda of this V1alpha1TriggerTemplate.  # noqa: E501
        :rtype: V1alpha1AWSLambdaTrigger
        """
        return self._aws_lambda

    @aws_lambda.setter
    def aws_lambda(self, aws_lambda):
        """Sets the aws_lambda of this V1alpha1TriggerTemplate.


        :param aws_lambda: The aws_lambda of this V1alpha1TriggerTemplate.  # noqa: E501
        :type: V1alpha1AWSLambdaTrigger
        """

        self._aws_lambda = aws_lambda

    @property
    def conditions(self):
        """Gets the conditions of this V1alpha1TriggerTemplate.  # noqa: E501

        Conditions is the conditions to execute the trigger. For example: \"(dep01 || dep02) && dep04\"  # noqa: E501

        :return: The conditions of this V1alpha1TriggerTemplate.  # noqa: E501
        :rtype: str
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this V1alpha1TriggerTemplate.

        Conditions is the conditions to execute the trigger. For example: \"(dep01 || dep02) && dep04\"  # noqa: E501

        :param conditions: The conditions of this V1alpha1TriggerTemplate.  # noqa: E501
        :type: str
        """

        self._conditions = conditions

    @property
    def custom(self):
        """Gets the custom of this V1alpha1TriggerTemplate.  # noqa: E501


        :return: The custom of this V1alpha1TriggerTemplate.  # noqa: E501
        :rtype: V1alpha1CustomTrigger
        """
        return self._custom

    @custom.setter
    def custom(self, custom):
        """Sets the custom of this V1alpha1TriggerTemplate.


        :param custom: The custom of this V1alpha1TriggerTemplate.  # noqa: E501
        :type: V1alpha1CustomTrigger
        """

        self._custom = custom

    @property
    def http(self):
        """Gets the http of this V1alpha1TriggerTemplate.  # noqa: E501


        :return: The http of this V1alpha1TriggerTemplate.  # noqa: E501
        :rtype: V1alpha1HTTPTrigger
        """
        return self._http

    @http.setter
    def http(self, http):
        """Sets the http of this V1alpha1TriggerTemplate.


        :param http: The http of this V1alpha1TriggerTemplate.  # noqa: E501
        :type: V1alpha1HTTPTrigger
        """

        self._http = http

    @property
    def k8s(self):
        """Gets the k8s of this V1alpha1TriggerTemplate.  # noqa: E501


        :return: The k8s of this V1alpha1TriggerTemplate.  # noqa: E501
        :rtype: V1alpha1StandardK8STrigger
        """
        return self._k8s

    @k8s.setter
    def k8s(self, k8s):
        """Sets the k8s of this V1alpha1TriggerTemplate.


        :param k8s: The k8s of this V1alpha1TriggerTemplate.  # noqa: E501
        :type: V1alpha1StandardK8STrigger
        """

        self._k8s = k8s

    @property
    def kafka(self):
        """Gets the kafka of this V1alpha1TriggerTemplate.  # noqa: E501


        :return: The kafka of this V1alpha1TriggerTemplate.  # noqa: E501
        :rtype: V1alpha1KafkaTrigger
        """
        return self._kafka

    @kafka.setter
    def kafka(self, kafka):
        """Sets the kafka of this V1alpha1TriggerTemplate.


        :param kafka: The kafka of this V1alpha1TriggerTemplate.  # noqa: E501
        :type: V1alpha1KafkaTrigger
        """

        self._kafka = kafka

    @property
    def name(self):
        """Gets the name of this V1alpha1TriggerTemplate.  # noqa: E501

        Name is a unique name of the action to take.  # noqa: E501

        :return: The name of this V1alpha1TriggerTemplate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1alpha1TriggerTemplate.

        Name is a unique name of the action to take.  # noqa: E501

        :param name: The name of this V1alpha1TriggerTemplate.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def nats(self):
        """Gets the nats of this V1alpha1TriggerTemplate.  # noqa: E501


        :return: The nats of this V1alpha1TriggerTemplate.  # noqa: E501
        :rtype: V1alpha1NATSTrigger
        """
        return self._nats

    @nats.setter
    def nats(self, nats):
        """Sets the nats of this V1alpha1TriggerTemplate.


        :param nats: The nats of this V1alpha1TriggerTemplate.  # noqa: E501
        :type: V1alpha1NATSTrigger
        """

        self._nats = nats

    @property
    def open_whisk(self):
        """Gets the open_whisk of this V1alpha1TriggerTemplate.  # noqa: E501


        :return: The open_whisk of this V1alpha1TriggerTemplate.  # noqa: E501
        :rtype: V1alpha1OpenWhiskTrigger
        """
        return self._open_whisk

    @open_whisk.setter
    def open_whisk(self, open_whisk):
        """Sets the open_whisk of this V1alpha1TriggerTemplate.


        :param open_whisk: The open_whisk of this V1alpha1TriggerTemplate.  # noqa: E501
        :type: V1alpha1OpenWhiskTrigger
        """

        self._open_whisk = open_whisk

    @property
    def slack(self):
        """Gets the slack of this V1alpha1TriggerTemplate.  # noqa: E501


        :return: The slack of this V1alpha1TriggerTemplate.  # noqa: E501
        :rtype: V1alpha1SlackTrigger
        """
        return self._slack

    @slack.setter
    def slack(self, slack):
        """Sets the slack of this V1alpha1TriggerTemplate.


        :param slack: The slack of this V1alpha1TriggerTemplate.  # noqa: E501
        :type: V1alpha1SlackTrigger
        """

        self._slack = slack

    @property
    def switch(self):
        """Gets the switch of this V1alpha1TriggerTemplate.  # noqa: E501


        :return: The switch of this V1alpha1TriggerTemplate.  # noqa: E501
        :rtype: V1alpha1TriggerSwitch
        """
        return self._switch

    @switch.setter
    def switch(self, switch):
        """Sets the switch of this V1alpha1TriggerTemplate.


        :param switch: The switch of this V1alpha1TriggerTemplate.  # noqa: E501
        :type: V1alpha1TriggerSwitch
        """

        self._switch = switch

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1TriggerTemplate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alpha1TriggerTemplate):
            return True

        return self.to_dict() != other.to_dict()
