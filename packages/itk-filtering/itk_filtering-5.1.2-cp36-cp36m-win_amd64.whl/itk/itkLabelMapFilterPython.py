# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKLabelMapPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkLabelMapFilterPython
else:
    import _itkLabelMapFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkLabelMapFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkLabelMapFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkStatisticsLabelObjectPython
import itk.itkHistogramPython
import itk.itkSamplePython
import itk.itkArrayPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.ITKCommonBasePython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkCovariantVectorPython
import itk.itkShapeLabelObjectPython
import itk.itkLabelObjectPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkLabelObjectLinePython
import itk.itkAffineTransformPython
import itk.itkMatrixOffsetTransformBasePython
import itk.itkVariableLengthVectorPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkDiffusionTensor3DPython
import itk.itkArray2DPython
import itk.itkOptimizerParametersPython
import itk.itkTransformBasePython
import itk.itkImageRegionPython
import itk.ITKLabelMapBasePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython

def itkLabelMapFilterLM2ID2_New():
    return itkLabelMapFilterLM2ID2.New()

class itkLabelMapFilterLM2ID2(itk.ITKLabelMapBasePython.itkImageToImageFilterLM2ID2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    LabelMapFilter is the base class for all process objects whose are
    using a LabelMapFilter as input. It manage several threads, and run a
    method ThreadedGenerateData() for each object in the LabelMapFilter.
    With that class, the developer doesn't need to take care of iterating
    over all the objects in the image, or to manage by hand the threads.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/1926/584
    orhttp://www.insight-journal.org/browse/publication/176

    See:   LabelMapToBinaryImageFilter, LabelMapToLabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabelMapFilterPython.itkLabelMapFilterLM2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkLabelMapFilterPython.itkLabelMapFilterLM2ID2_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkLabelMapFilterPython.itkLabelMapFilterLM2ID2_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkLabelMapFilterPython.delete_itkLabelMapFilterLM2ID2
    cast = _swig_new_static_method(_itkLabelMapFilterPython.itkLabelMapFilterLM2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkLabelMapFilterLM2ID2

        Create a new object of the class itkLabelMapFilterLM2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelMapFilterLM2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelMapFilterLM2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelMapFilterLM2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelMapFilterLM2ID2 in _itkLabelMapFilterPython:
_itkLabelMapFilterPython.itkLabelMapFilterLM2ID2_swigregister(itkLabelMapFilterLM2ID2)
itkLabelMapFilterLM2ID2___New_orig__ = _itkLabelMapFilterPython.itkLabelMapFilterLM2ID2___New_orig__
itkLabelMapFilterLM2ID2_cast = _itkLabelMapFilterPython.itkLabelMapFilterLM2ID2_cast


def itkLabelMapFilterLM2IF2_New():
    return itkLabelMapFilterLM2IF2.New()

class itkLabelMapFilterLM2IF2(itk.ITKLabelMapBasePython.itkImageToImageFilterLM2IF2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    LabelMapFilter is the base class for all process objects whose are
    using a LabelMapFilter as input. It manage several threads, and run a
    method ThreadedGenerateData() for each object in the LabelMapFilter.
    With that class, the developer doesn't need to take care of iterating
    over all the objects in the image, or to manage by hand the threads.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/1926/584
    orhttp://www.insight-journal.org/browse/publication/176

    See:   LabelMapToBinaryImageFilter, LabelMapToLabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabelMapFilterPython.itkLabelMapFilterLM2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkLabelMapFilterPython.itkLabelMapFilterLM2IF2_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkLabelMapFilterPython.itkLabelMapFilterLM2IF2_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkLabelMapFilterPython.delete_itkLabelMapFilterLM2IF2
    cast = _swig_new_static_method(_itkLabelMapFilterPython.itkLabelMapFilterLM2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkLabelMapFilterLM2IF2

        Create a new object of the class itkLabelMapFilterLM2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelMapFilterLM2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelMapFilterLM2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelMapFilterLM2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelMapFilterLM2IF2 in _itkLabelMapFilterPython:
_itkLabelMapFilterPython.itkLabelMapFilterLM2IF2_swigregister(itkLabelMapFilterLM2IF2)
itkLabelMapFilterLM2IF2___New_orig__ = _itkLabelMapFilterPython.itkLabelMapFilterLM2IF2___New_orig__
itkLabelMapFilterLM2IF2_cast = _itkLabelMapFilterPython.itkLabelMapFilterLM2IF2_cast


def itkLabelMapFilterLM2IRGBUC2_New():
    return itkLabelMapFilterLM2IRGBUC2.New()

class itkLabelMapFilterLM2IRGBUC2(itk.ITKLabelMapBasePython.itkImageToImageFilterLM2IRGBUC2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    LabelMapFilter is the base class for all process objects whose are
    using a LabelMapFilter as input. It manage several threads, and run a
    method ThreadedGenerateData() for each object in the LabelMapFilter.
    With that class, the developer doesn't need to take care of iterating
    over all the objects in the image, or to manage by hand the threads.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/1926/584
    orhttp://www.insight-journal.org/browse/publication/176

    See:   LabelMapToBinaryImageFilter, LabelMapToLabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabelMapFilterPython.itkLabelMapFilterLM2IRGBUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkLabelMapFilterPython.itkLabelMapFilterLM2IRGBUC2_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkLabelMapFilterPython.itkLabelMapFilterLM2IRGBUC2_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkLabelMapFilterPython.delete_itkLabelMapFilterLM2IRGBUC2
    cast = _swig_new_static_method(_itkLabelMapFilterPython.itkLabelMapFilterLM2IRGBUC2_cast)

    def New(*args, **kargs):
        """New() -> itkLabelMapFilterLM2IRGBUC2

        Create a new object of the class itkLabelMapFilterLM2IRGBUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelMapFilterLM2IRGBUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelMapFilterLM2IRGBUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelMapFilterLM2IRGBUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelMapFilterLM2IRGBUC2 in _itkLabelMapFilterPython:
_itkLabelMapFilterPython.itkLabelMapFilterLM2IRGBUC2_swigregister(itkLabelMapFilterLM2IRGBUC2)
itkLabelMapFilterLM2IRGBUC2___New_orig__ = _itkLabelMapFilterPython.itkLabelMapFilterLM2IRGBUC2___New_orig__
itkLabelMapFilterLM2IRGBUC2_cast = _itkLabelMapFilterPython.itkLabelMapFilterLM2IRGBUC2_cast


def itkLabelMapFilterLM2ISS2_New():
    return itkLabelMapFilterLM2ISS2.New()

class itkLabelMapFilterLM2ISS2(itk.ITKLabelMapBasePython.itkImageToImageFilterLM2ISS2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    LabelMapFilter is the base class for all process objects whose are
    using a LabelMapFilter as input. It manage several threads, and run a
    method ThreadedGenerateData() for each object in the LabelMapFilter.
    With that class, the developer doesn't need to take care of iterating
    over all the objects in the image, or to manage by hand the threads.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/1926/584
    orhttp://www.insight-journal.org/browse/publication/176

    See:   LabelMapToBinaryImageFilter, LabelMapToLabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabelMapFilterPython.itkLabelMapFilterLM2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkLabelMapFilterPython.itkLabelMapFilterLM2ISS2_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkLabelMapFilterPython.itkLabelMapFilterLM2ISS2_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkLabelMapFilterPython.delete_itkLabelMapFilterLM2ISS2
    cast = _swig_new_static_method(_itkLabelMapFilterPython.itkLabelMapFilterLM2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkLabelMapFilterLM2ISS2

        Create a new object of the class itkLabelMapFilterLM2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelMapFilterLM2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelMapFilterLM2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelMapFilterLM2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelMapFilterLM2ISS2 in _itkLabelMapFilterPython:
_itkLabelMapFilterPython.itkLabelMapFilterLM2ISS2_swigregister(itkLabelMapFilterLM2ISS2)
itkLabelMapFilterLM2ISS2___New_orig__ = _itkLabelMapFilterPython.itkLabelMapFilterLM2ISS2___New_orig__
itkLabelMapFilterLM2ISS2_cast = _itkLabelMapFilterPython.itkLabelMapFilterLM2ISS2_cast


def itkLabelMapFilterLM2IUC2_New():
    return itkLabelMapFilterLM2IUC2.New()

class itkLabelMapFilterLM2IUC2(itk.ITKLabelMapBasePython.itkImageToImageFilterLM2IUC2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    LabelMapFilter is the base class for all process objects whose are
    using a LabelMapFilter as input. It manage several threads, and run a
    method ThreadedGenerateData() for each object in the LabelMapFilter.
    With that class, the developer doesn't need to take care of iterating
    over all the objects in the image, or to manage by hand the threads.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/1926/584
    orhttp://www.insight-journal.org/browse/publication/176

    See:   LabelMapToBinaryImageFilter, LabelMapToLabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabelMapFilterPython.itkLabelMapFilterLM2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkLabelMapFilterPython.itkLabelMapFilterLM2IUC2_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkLabelMapFilterPython.itkLabelMapFilterLM2IUC2_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkLabelMapFilterPython.delete_itkLabelMapFilterLM2IUC2
    cast = _swig_new_static_method(_itkLabelMapFilterPython.itkLabelMapFilterLM2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkLabelMapFilterLM2IUC2

        Create a new object of the class itkLabelMapFilterLM2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelMapFilterLM2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelMapFilterLM2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelMapFilterLM2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelMapFilterLM2IUC2 in _itkLabelMapFilterPython:
_itkLabelMapFilterPython.itkLabelMapFilterLM2IUC2_swigregister(itkLabelMapFilterLM2IUC2)
itkLabelMapFilterLM2IUC2___New_orig__ = _itkLabelMapFilterPython.itkLabelMapFilterLM2IUC2___New_orig__
itkLabelMapFilterLM2IUC2_cast = _itkLabelMapFilterPython.itkLabelMapFilterLM2IUC2_cast


def itkLabelMapFilterLM2IUS2_New():
    return itkLabelMapFilterLM2IUS2.New()

class itkLabelMapFilterLM2IUS2(itk.ITKLabelMapBasePython.itkImageToImageFilterLM2IUS2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    LabelMapFilter is the base class for all process objects whose are
    using a LabelMapFilter as input. It manage several threads, and run a
    method ThreadedGenerateData() for each object in the LabelMapFilter.
    With that class, the developer doesn't need to take care of iterating
    over all the objects in the image, or to manage by hand the threads.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/1926/584
    orhttp://www.insight-journal.org/browse/publication/176

    See:   LabelMapToBinaryImageFilter, LabelMapToLabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabelMapFilterPython.itkLabelMapFilterLM2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkLabelMapFilterPython.itkLabelMapFilterLM2IUS2_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkLabelMapFilterPython.itkLabelMapFilterLM2IUS2_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkLabelMapFilterPython.delete_itkLabelMapFilterLM2IUS2
    cast = _swig_new_static_method(_itkLabelMapFilterPython.itkLabelMapFilterLM2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkLabelMapFilterLM2IUS2

        Create a new object of the class itkLabelMapFilterLM2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelMapFilterLM2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelMapFilterLM2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelMapFilterLM2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelMapFilterLM2IUS2 in _itkLabelMapFilterPython:
_itkLabelMapFilterPython.itkLabelMapFilterLM2IUS2_swigregister(itkLabelMapFilterLM2IUS2)
itkLabelMapFilterLM2IUS2___New_orig__ = _itkLabelMapFilterPython.itkLabelMapFilterLM2IUS2___New_orig__
itkLabelMapFilterLM2IUS2_cast = _itkLabelMapFilterPython.itkLabelMapFilterLM2IUS2_cast


def itkLabelMapFilterLM2LM2_New():
    return itkLabelMapFilterLM2LM2.New()

class itkLabelMapFilterLM2LM2(itk.ITKLabelMapBasePython.itkImageToImageFilterLM2LM2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    LabelMapFilter is the base class for all process objects whose are
    using a LabelMapFilter as input. It manage several threads, and run a
    method ThreadedGenerateData() for each object in the LabelMapFilter.
    With that class, the developer doesn't need to take care of iterating
    over all the objects in the image, or to manage by hand the threads.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/1926/584
    orhttp://www.insight-journal.org/browse/publication/176

    See:   LabelMapToBinaryImageFilter, LabelMapToLabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabelMapFilterPython.itkLabelMapFilterLM2LM2___New_orig__)
    Clone = _swig_new_instance_method(_itkLabelMapFilterPython.itkLabelMapFilterLM2LM2_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkLabelMapFilterPython.itkLabelMapFilterLM2LM2_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkLabelMapFilterPython.delete_itkLabelMapFilterLM2LM2
    cast = _swig_new_static_method(_itkLabelMapFilterPython.itkLabelMapFilterLM2LM2_cast)

    def New(*args, **kargs):
        """New() -> itkLabelMapFilterLM2LM2

        Create a new object of the class itkLabelMapFilterLM2LM2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelMapFilterLM2LM2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelMapFilterLM2LM2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelMapFilterLM2LM2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelMapFilterLM2LM2 in _itkLabelMapFilterPython:
_itkLabelMapFilterPython.itkLabelMapFilterLM2LM2_swigregister(itkLabelMapFilterLM2LM2)
itkLabelMapFilterLM2LM2___New_orig__ = _itkLabelMapFilterPython.itkLabelMapFilterLM2LM2___New_orig__
itkLabelMapFilterLM2LM2_cast = _itkLabelMapFilterPython.itkLabelMapFilterLM2LM2_cast


def itkLabelMapFilterLM3ID3_New():
    return itkLabelMapFilterLM3ID3.New()

class itkLabelMapFilterLM3ID3(itk.ITKLabelMapBasePython.itkImageToImageFilterLM3ID3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    LabelMapFilter is the base class for all process objects whose are
    using a LabelMapFilter as input. It manage several threads, and run a
    method ThreadedGenerateData() for each object in the LabelMapFilter.
    With that class, the developer doesn't need to take care of iterating
    over all the objects in the image, or to manage by hand the threads.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/1926/584
    orhttp://www.insight-journal.org/browse/publication/176

    See:   LabelMapToBinaryImageFilter, LabelMapToLabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabelMapFilterPython.itkLabelMapFilterLM3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkLabelMapFilterPython.itkLabelMapFilterLM3ID3_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkLabelMapFilterPython.itkLabelMapFilterLM3ID3_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkLabelMapFilterPython.delete_itkLabelMapFilterLM3ID3
    cast = _swig_new_static_method(_itkLabelMapFilterPython.itkLabelMapFilterLM3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkLabelMapFilterLM3ID3

        Create a new object of the class itkLabelMapFilterLM3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelMapFilterLM3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelMapFilterLM3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelMapFilterLM3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelMapFilterLM3ID3 in _itkLabelMapFilterPython:
_itkLabelMapFilterPython.itkLabelMapFilterLM3ID3_swigregister(itkLabelMapFilterLM3ID3)
itkLabelMapFilterLM3ID3___New_orig__ = _itkLabelMapFilterPython.itkLabelMapFilterLM3ID3___New_orig__
itkLabelMapFilterLM3ID3_cast = _itkLabelMapFilterPython.itkLabelMapFilterLM3ID3_cast


def itkLabelMapFilterLM3IF3_New():
    return itkLabelMapFilterLM3IF3.New()

class itkLabelMapFilterLM3IF3(itk.ITKLabelMapBasePython.itkImageToImageFilterLM3IF3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    LabelMapFilter is the base class for all process objects whose are
    using a LabelMapFilter as input. It manage several threads, and run a
    method ThreadedGenerateData() for each object in the LabelMapFilter.
    With that class, the developer doesn't need to take care of iterating
    over all the objects in the image, or to manage by hand the threads.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/1926/584
    orhttp://www.insight-journal.org/browse/publication/176

    See:   LabelMapToBinaryImageFilter, LabelMapToLabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabelMapFilterPython.itkLabelMapFilterLM3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkLabelMapFilterPython.itkLabelMapFilterLM3IF3_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkLabelMapFilterPython.itkLabelMapFilterLM3IF3_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkLabelMapFilterPython.delete_itkLabelMapFilterLM3IF3
    cast = _swig_new_static_method(_itkLabelMapFilterPython.itkLabelMapFilterLM3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkLabelMapFilterLM3IF3

        Create a new object of the class itkLabelMapFilterLM3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelMapFilterLM3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelMapFilterLM3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelMapFilterLM3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelMapFilterLM3IF3 in _itkLabelMapFilterPython:
_itkLabelMapFilterPython.itkLabelMapFilterLM3IF3_swigregister(itkLabelMapFilterLM3IF3)
itkLabelMapFilterLM3IF3___New_orig__ = _itkLabelMapFilterPython.itkLabelMapFilterLM3IF3___New_orig__
itkLabelMapFilterLM3IF3_cast = _itkLabelMapFilterPython.itkLabelMapFilterLM3IF3_cast


def itkLabelMapFilterLM3IRGBUC3_New():
    return itkLabelMapFilterLM3IRGBUC3.New()

class itkLabelMapFilterLM3IRGBUC3(itk.ITKLabelMapBasePython.itkImageToImageFilterLM3IRGBUC3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    LabelMapFilter is the base class for all process objects whose are
    using a LabelMapFilter as input. It manage several threads, and run a
    method ThreadedGenerateData() for each object in the LabelMapFilter.
    With that class, the developer doesn't need to take care of iterating
    over all the objects in the image, or to manage by hand the threads.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/1926/584
    orhttp://www.insight-journal.org/browse/publication/176

    See:   LabelMapToBinaryImageFilter, LabelMapToLabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabelMapFilterPython.itkLabelMapFilterLM3IRGBUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkLabelMapFilterPython.itkLabelMapFilterLM3IRGBUC3_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkLabelMapFilterPython.itkLabelMapFilterLM3IRGBUC3_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkLabelMapFilterPython.delete_itkLabelMapFilterLM3IRGBUC3
    cast = _swig_new_static_method(_itkLabelMapFilterPython.itkLabelMapFilterLM3IRGBUC3_cast)

    def New(*args, **kargs):
        """New() -> itkLabelMapFilterLM3IRGBUC3

        Create a new object of the class itkLabelMapFilterLM3IRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelMapFilterLM3IRGBUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelMapFilterLM3IRGBUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelMapFilterLM3IRGBUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelMapFilterLM3IRGBUC3 in _itkLabelMapFilterPython:
_itkLabelMapFilterPython.itkLabelMapFilterLM3IRGBUC3_swigregister(itkLabelMapFilterLM3IRGBUC3)
itkLabelMapFilterLM3IRGBUC3___New_orig__ = _itkLabelMapFilterPython.itkLabelMapFilterLM3IRGBUC3___New_orig__
itkLabelMapFilterLM3IRGBUC3_cast = _itkLabelMapFilterPython.itkLabelMapFilterLM3IRGBUC3_cast


def itkLabelMapFilterLM3ISS3_New():
    return itkLabelMapFilterLM3ISS3.New()

class itkLabelMapFilterLM3ISS3(itk.ITKLabelMapBasePython.itkImageToImageFilterLM3ISS3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    LabelMapFilter is the base class for all process objects whose are
    using a LabelMapFilter as input. It manage several threads, and run a
    method ThreadedGenerateData() for each object in the LabelMapFilter.
    With that class, the developer doesn't need to take care of iterating
    over all the objects in the image, or to manage by hand the threads.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/1926/584
    orhttp://www.insight-journal.org/browse/publication/176

    See:   LabelMapToBinaryImageFilter, LabelMapToLabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabelMapFilterPython.itkLabelMapFilterLM3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkLabelMapFilterPython.itkLabelMapFilterLM3ISS3_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkLabelMapFilterPython.itkLabelMapFilterLM3ISS3_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkLabelMapFilterPython.delete_itkLabelMapFilterLM3ISS3
    cast = _swig_new_static_method(_itkLabelMapFilterPython.itkLabelMapFilterLM3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkLabelMapFilterLM3ISS3

        Create a new object of the class itkLabelMapFilterLM3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelMapFilterLM3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelMapFilterLM3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelMapFilterLM3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelMapFilterLM3ISS3 in _itkLabelMapFilterPython:
_itkLabelMapFilterPython.itkLabelMapFilterLM3ISS3_swigregister(itkLabelMapFilterLM3ISS3)
itkLabelMapFilterLM3ISS3___New_orig__ = _itkLabelMapFilterPython.itkLabelMapFilterLM3ISS3___New_orig__
itkLabelMapFilterLM3ISS3_cast = _itkLabelMapFilterPython.itkLabelMapFilterLM3ISS3_cast


def itkLabelMapFilterLM3IUC3_New():
    return itkLabelMapFilterLM3IUC3.New()

class itkLabelMapFilterLM3IUC3(itk.ITKLabelMapBasePython.itkImageToImageFilterLM3IUC3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    LabelMapFilter is the base class for all process objects whose are
    using a LabelMapFilter as input. It manage several threads, and run a
    method ThreadedGenerateData() for each object in the LabelMapFilter.
    With that class, the developer doesn't need to take care of iterating
    over all the objects in the image, or to manage by hand the threads.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/1926/584
    orhttp://www.insight-journal.org/browse/publication/176

    See:   LabelMapToBinaryImageFilter, LabelMapToLabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabelMapFilterPython.itkLabelMapFilterLM3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkLabelMapFilterPython.itkLabelMapFilterLM3IUC3_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkLabelMapFilterPython.itkLabelMapFilterLM3IUC3_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkLabelMapFilterPython.delete_itkLabelMapFilterLM3IUC3
    cast = _swig_new_static_method(_itkLabelMapFilterPython.itkLabelMapFilterLM3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkLabelMapFilterLM3IUC3

        Create a new object of the class itkLabelMapFilterLM3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelMapFilterLM3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelMapFilterLM3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelMapFilterLM3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelMapFilterLM3IUC3 in _itkLabelMapFilterPython:
_itkLabelMapFilterPython.itkLabelMapFilterLM3IUC3_swigregister(itkLabelMapFilterLM3IUC3)
itkLabelMapFilterLM3IUC3___New_orig__ = _itkLabelMapFilterPython.itkLabelMapFilterLM3IUC3___New_orig__
itkLabelMapFilterLM3IUC3_cast = _itkLabelMapFilterPython.itkLabelMapFilterLM3IUC3_cast


def itkLabelMapFilterLM3IUS3_New():
    return itkLabelMapFilterLM3IUS3.New()

class itkLabelMapFilterLM3IUS3(itk.ITKLabelMapBasePython.itkImageToImageFilterLM3IUS3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    LabelMapFilter is the base class for all process objects whose are
    using a LabelMapFilter as input. It manage several threads, and run a
    method ThreadedGenerateData() for each object in the LabelMapFilter.
    With that class, the developer doesn't need to take care of iterating
    over all the objects in the image, or to manage by hand the threads.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/1926/584
    orhttp://www.insight-journal.org/browse/publication/176

    See:   LabelMapToBinaryImageFilter, LabelMapToLabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabelMapFilterPython.itkLabelMapFilterLM3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkLabelMapFilterPython.itkLabelMapFilterLM3IUS3_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkLabelMapFilterPython.itkLabelMapFilterLM3IUS3_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkLabelMapFilterPython.delete_itkLabelMapFilterLM3IUS3
    cast = _swig_new_static_method(_itkLabelMapFilterPython.itkLabelMapFilterLM3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkLabelMapFilterLM3IUS3

        Create a new object of the class itkLabelMapFilterLM3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelMapFilterLM3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelMapFilterLM3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelMapFilterLM3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelMapFilterLM3IUS3 in _itkLabelMapFilterPython:
_itkLabelMapFilterPython.itkLabelMapFilterLM3IUS3_swigregister(itkLabelMapFilterLM3IUS3)
itkLabelMapFilterLM3IUS3___New_orig__ = _itkLabelMapFilterPython.itkLabelMapFilterLM3IUS3___New_orig__
itkLabelMapFilterLM3IUS3_cast = _itkLabelMapFilterPython.itkLabelMapFilterLM3IUS3_cast


def itkLabelMapFilterLM3LM3_New():
    return itkLabelMapFilterLM3LM3.New()

class itkLabelMapFilterLM3LM3(itk.ITKLabelMapBasePython.itkImageToImageFilterLM3LM3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    LabelMapFilter is the base class for all process objects whose are
    using a LabelMapFilter as input. It manage several threads, and run a
    method ThreadedGenerateData() for each object in the LabelMapFilter.
    With that class, the developer doesn't need to take care of iterating
    over all the objects in the image, or to manage by hand the threads.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/1926/584
    orhttp://www.insight-journal.org/browse/publication/176

    See:   LabelMapToBinaryImageFilter, LabelMapToLabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabelMapFilterPython.itkLabelMapFilterLM3LM3___New_orig__)
    Clone = _swig_new_instance_method(_itkLabelMapFilterPython.itkLabelMapFilterLM3LM3_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkLabelMapFilterPython.itkLabelMapFilterLM3LM3_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkLabelMapFilterPython.delete_itkLabelMapFilterLM3LM3
    cast = _swig_new_static_method(_itkLabelMapFilterPython.itkLabelMapFilterLM3LM3_cast)

    def New(*args, **kargs):
        """New() -> itkLabelMapFilterLM3LM3

        Create a new object of the class itkLabelMapFilterLM3LM3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelMapFilterLM3LM3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelMapFilterLM3LM3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelMapFilterLM3LM3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelMapFilterLM3LM3 in _itkLabelMapFilterPython:
_itkLabelMapFilterPython.itkLabelMapFilterLM3LM3_swigregister(itkLabelMapFilterLM3LM3)
itkLabelMapFilterLM3LM3___New_orig__ = _itkLabelMapFilterPython.itkLabelMapFilterLM3LM3___New_orig__
itkLabelMapFilterLM3LM3_cast = _itkLabelMapFilterPython.itkLabelMapFilterLM3LM3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def label_map_filter(*args, **kwargs):
    """Procedural interface for LabelMapFilter"""
    import itk
    instance = itk.LabelMapFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def label_map_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.LabelMapFilter, itkTemplate.itkTemplate):
        filter_object = itk.LabelMapFilter.values()[0]
    else:
        filter_object = itk.LabelMapFilter

    label_map_filter.__doc__ = filter_object.__doc__
    label_map_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    label_map_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.LabelMapFilter, itkTemplate.itkTemplate):
        label_map_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        label_map_filter.__doc__ += "\n"
        label_map_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        label_map_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



