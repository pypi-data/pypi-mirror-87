# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKVTKPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkVTKImageImportPython
else:
    import _itkVTKImageImportPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkVTKImageImportPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkVTKImageImportPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImageSourcePython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.itkSizePython
import itk.itkCovariantVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkRGBPixelPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.ITKCommonBasePython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourceCommonPython

def itkVTKImageImportICVF22_New():
    return itkVTKImageImportICVF22.New()

class itkVTKImageImportICVF22(itk.itkImageSourcePython.itkImageSourceICVF22):
    r"""


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportICVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportICVF22_Clone)
    SetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportICVF22_SetCallbackUserData)
    GetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportICVF22_GetCallbackUserData)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportICVF22
    cast = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportICVF22_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportICVF22

        Create a new object of the class itkVTKImageImportICVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportICVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportICVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportICVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportICVF22 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportICVF22_swigregister(itkVTKImageImportICVF22)
itkVTKImageImportICVF22___New_orig__ = _itkVTKImageImportPython.itkVTKImageImportICVF22___New_orig__
itkVTKImageImportICVF22_cast = _itkVTKImageImportPython.itkVTKImageImportICVF22_cast


def itkVTKImageImportICVF23_New():
    return itkVTKImageImportICVF23.New()

class itkVTKImageImportICVF23(itk.itkImageSourcePython.itkImageSourceICVF23):
    r"""


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportICVF23___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportICVF23_Clone)
    SetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportICVF23_SetCallbackUserData)
    GetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportICVF23_GetCallbackUserData)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportICVF23
    cast = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportICVF23_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportICVF23

        Create a new object of the class itkVTKImageImportICVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportICVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportICVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportICVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportICVF23 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportICVF23_swigregister(itkVTKImageImportICVF23)
itkVTKImageImportICVF23___New_orig__ = _itkVTKImageImportPython.itkVTKImageImportICVF23___New_orig__
itkVTKImageImportICVF23_cast = _itkVTKImageImportPython.itkVTKImageImportICVF23_cast


def itkVTKImageImportICVF32_New():
    return itkVTKImageImportICVF32.New()

class itkVTKImageImportICVF32(itk.itkImageSourcePython.itkImageSourceICVF32):
    r"""


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportICVF32___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportICVF32_Clone)
    SetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportICVF32_SetCallbackUserData)
    GetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportICVF32_GetCallbackUserData)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportICVF32
    cast = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportICVF32_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportICVF32

        Create a new object of the class itkVTKImageImportICVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportICVF32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportICVF32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportICVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportICVF32 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportICVF32_swigregister(itkVTKImageImportICVF32)
itkVTKImageImportICVF32___New_orig__ = _itkVTKImageImportPython.itkVTKImageImportICVF32___New_orig__
itkVTKImageImportICVF32_cast = _itkVTKImageImportPython.itkVTKImageImportICVF32_cast


def itkVTKImageImportICVF33_New():
    return itkVTKImageImportICVF33.New()

class itkVTKImageImportICVF33(itk.itkImageSourcePython.itkImageSourceICVF33):
    r"""


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportICVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportICVF33_Clone)
    SetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportICVF33_SetCallbackUserData)
    GetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportICVF33_GetCallbackUserData)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportICVF33
    cast = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportICVF33_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportICVF33

        Create a new object of the class itkVTKImageImportICVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportICVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportICVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportICVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportICVF33 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportICVF33_swigregister(itkVTKImageImportICVF33)
itkVTKImageImportICVF33___New_orig__ = _itkVTKImageImportPython.itkVTKImageImportICVF33___New_orig__
itkVTKImageImportICVF33_cast = _itkVTKImageImportPython.itkVTKImageImportICVF33_cast


def itkVTKImageImportICVF42_New():
    return itkVTKImageImportICVF42.New()

class itkVTKImageImportICVF42(itk.itkImageSourcePython.itkImageSourceICVF42):
    r"""


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportICVF42___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportICVF42_Clone)
    SetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportICVF42_SetCallbackUserData)
    GetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportICVF42_GetCallbackUserData)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportICVF42
    cast = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportICVF42_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportICVF42

        Create a new object of the class itkVTKImageImportICVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportICVF42.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportICVF42.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportICVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportICVF42 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportICVF42_swigregister(itkVTKImageImportICVF42)
itkVTKImageImportICVF42___New_orig__ = _itkVTKImageImportPython.itkVTKImageImportICVF42___New_orig__
itkVTKImageImportICVF42_cast = _itkVTKImageImportPython.itkVTKImageImportICVF42_cast


def itkVTKImageImportICVF43_New():
    return itkVTKImageImportICVF43.New()

class itkVTKImageImportICVF43(itk.itkImageSourcePython.itkImageSourceICVF43):
    r"""


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportICVF43___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportICVF43_Clone)
    SetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportICVF43_SetCallbackUserData)
    GetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportICVF43_GetCallbackUserData)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportICVF43
    cast = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportICVF43_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportICVF43

        Create a new object of the class itkVTKImageImportICVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportICVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportICVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportICVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportICVF43 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportICVF43_swigregister(itkVTKImageImportICVF43)
itkVTKImageImportICVF43___New_orig__ = _itkVTKImageImportPython.itkVTKImageImportICVF43___New_orig__
itkVTKImageImportICVF43_cast = _itkVTKImageImportPython.itkVTKImageImportICVF43_cast


def itkVTKImageImportID2_New():
    return itkVTKImageImportID2.New()

class itkVTKImageImportID2(itk.itkImageSourcePython.itkImageSourceID2):
    r"""


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportID2___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportID2_Clone)
    SetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportID2_SetCallbackUserData)
    GetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportID2_GetCallbackUserData)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportID2
    cast = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportID2_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportID2

        Create a new object of the class itkVTKImageImportID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportID2 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportID2_swigregister(itkVTKImageImportID2)
itkVTKImageImportID2___New_orig__ = _itkVTKImageImportPython.itkVTKImageImportID2___New_orig__
itkVTKImageImportID2_cast = _itkVTKImageImportPython.itkVTKImageImportID2_cast


def itkVTKImageImportID3_New():
    return itkVTKImageImportID3.New()

class itkVTKImageImportID3(itk.itkImageSourcePython.itkImageSourceID3):
    r"""


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportID3___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportID3_Clone)
    SetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportID3_SetCallbackUserData)
    GetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportID3_GetCallbackUserData)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportID3
    cast = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportID3_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportID3

        Create a new object of the class itkVTKImageImportID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportID3 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportID3_swigregister(itkVTKImageImportID3)
itkVTKImageImportID3___New_orig__ = _itkVTKImageImportPython.itkVTKImageImportID3___New_orig__
itkVTKImageImportID3_cast = _itkVTKImageImportPython.itkVTKImageImportID3_cast


def itkVTKImageImportIF2_New():
    return itkVTKImageImportIF2.New()

class itkVTKImageImportIF2(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportIF2___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIF2_Clone)
    SetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIF2_SetCallbackUserData)
    GetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIF2_GetCallbackUserData)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIF2
    cast = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportIF2_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIF2

        Create a new object of the class itkVTKImageImportIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportIF2 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportIF2_swigregister(itkVTKImageImportIF2)
itkVTKImageImportIF2___New_orig__ = _itkVTKImageImportPython.itkVTKImageImportIF2___New_orig__
itkVTKImageImportIF2_cast = _itkVTKImageImportPython.itkVTKImageImportIF2_cast


def itkVTKImageImportIF3_New():
    return itkVTKImageImportIF3.New()

class itkVTKImageImportIF3(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportIF3___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIF3_Clone)
    SetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIF3_SetCallbackUserData)
    GetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIF3_GetCallbackUserData)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIF3
    cast = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportIF3_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIF3

        Create a new object of the class itkVTKImageImportIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportIF3 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportIF3_swigregister(itkVTKImageImportIF3)
itkVTKImageImportIF3___New_orig__ = _itkVTKImageImportPython.itkVTKImageImportIF3___New_orig__
itkVTKImageImportIF3_cast = _itkVTKImageImportPython.itkVTKImageImportIF3_cast


def itkVTKImageImportIRGBAUC2_New():
    return itkVTKImageImportIRGBAUC2.New()

class itkVTKImageImportIRGBAUC2(itk.itkImageSourcePython.itkImageSourceIRGBAUC2):
    r"""


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportIRGBAUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIRGBAUC2_Clone)
    SetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIRGBAUC2_SetCallbackUserData)
    GetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIRGBAUC2_GetCallbackUserData)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIRGBAUC2
    cast = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportIRGBAUC2_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIRGBAUC2

        Create a new object of the class itkVTKImageImportIRGBAUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIRGBAUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIRGBAUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportIRGBAUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportIRGBAUC2 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportIRGBAUC2_swigregister(itkVTKImageImportIRGBAUC2)
itkVTKImageImportIRGBAUC2___New_orig__ = _itkVTKImageImportPython.itkVTKImageImportIRGBAUC2___New_orig__
itkVTKImageImportIRGBAUC2_cast = _itkVTKImageImportPython.itkVTKImageImportIRGBAUC2_cast


def itkVTKImageImportIRGBAUC3_New():
    return itkVTKImageImportIRGBAUC3.New()

class itkVTKImageImportIRGBAUC3(itk.itkImageSourcePython.itkImageSourceIRGBAUC3):
    r"""


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportIRGBAUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIRGBAUC3_Clone)
    SetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIRGBAUC3_SetCallbackUserData)
    GetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIRGBAUC3_GetCallbackUserData)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIRGBAUC3
    cast = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportIRGBAUC3_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIRGBAUC3

        Create a new object of the class itkVTKImageImportIRGBAUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIRGBAUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIRGBAUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportIRGBAUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportIRGBAUC3 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportIRGBAUC3_swigregister(itkVTKImageImportIRGBAUC3)
itkVTKImageImportIRGBAUC3___New_orig__ = _itkVTKImageImportPython.itkVTKImageImportIRGBAUC3___New_orig__
itkVTKImageImportIRGBAUC3_cast = _itkVTKImageImportPython.itkVTKImageImportIRGBAUC3_cast


def itkVTKImageImportIRGBUC2_New():
    return itkVTKImageImportIRGBUC2.New()

class itkVTKImageImportIRGBUC2(itk.itkImageSourcePython.itkImageSourceIRGBUC2):
    r"""


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportIRGBUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIRGBUC2_Clone)
    SetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIRGBUC2_SetCallbackUserData)
    GetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIRGBUC2_GetCallbackUserData)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIRGBUC2
    cast = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportIRGBUC2_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIRGBUC2

        Create a new object of the class itkVTKImageImportIRGBUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIRGBUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIRGBUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportIRGBUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportIRGBUC2 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportIRGBUC2_swigregister(itkVTKImageImportIRGBUC2)
itkVTKImageImportIRGBUC2___New_orig__ = _itkVTKImageImportPython.itkVTKImageImportIRGBUC2___New_orig__
itkVTKImageImportIRGBUC2_cast = _itkVTKImageImportPython.itkVTKImageImportIRGBUC2_cast


def itkVTKImageImportIRGBUC3_New():
    return itkVTKImageImportIRGBUC3.New()

class itkVTKImageImportIRGBUC3(itk.itkImageSourcePython.itkImageSourceIRGBUC3):
    r"""


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportIRGBUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIRGBUC3_Clone)
    SetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIRGBUC3_SetCallbackUserData)
    GetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIRGBUC3_GetCallbackUserData)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIRGBUC3
    cast = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportIRGBUC3_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIRGBUC3

        Create a new object of the class itkVTKImageImportIRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIRGBUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIRGBUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportIRGBUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportIRGBUC3 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportIRGBUC3_swigregister(itkVTKImageImportIRGBUC3)
itkVTKImageImportIRGBUC3___New_orig__ = _itkVTKImageImportPython.itkVTKImageImportIRGBUC3___New_orig__
itkVTKImageImportIRGBUC3_cast = _itkVTKImageImportPython.itkVTKImageImportIRGBUC3_cast


def itkVTKImageImportISS2_New():
    return itkVTKImageImportISS2.New()

class itkVTKImageImportISS2(itk.itkImageSourcePython.itkImageSourceISS2):
    r"""


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportISS2_Clone)
    SetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportISS2_SetCallbackUserData)
    GetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportISS2_GetCallbackUserData)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportISS2
    cast = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportISS2_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportISS2

        Create a new object of the class itkVTKImageImportISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportISS2 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportISS2_swigregister(itkVTKImageImportISS2)
itkVTKImageImportISS2___New_orig__ = _itkVTKImageImportPython.itkVTKImageImportISS2___New_orig__
itkVTKImageImportISS2_cast = _itkVTKImageImportPython.itkVTKImageImportISS2_cast


def itkVTKImageImportISS3_New():
    return itkVTKImageImportISS3.New()

class itkVTKImageImportISS3(itk.itkImageSourcePython.itkImageSourceISS3):
    r"""


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportISS3_Clone)
    SetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportISS3_SetCallbackUserData)
    GetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportISS3_GetCallbackUserData)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportISS3
    cast = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportISS3_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportISS3

        Create a new object of the class itkVTKImageImportISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportISS3 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportISS3_swigregister(itkVTKImageImportISS3)
itkVTKImageImportISS3___New_orig__ = _itkVTKImageImportPython.itkVTKImageImportISS3___New_orig__
itkVTKImageImportISS3_cast = _itkVTKImageImportPython.itkVTKImageImportISS3_cast


def itkVTKImageImportIUC2_New():
    return itkVTKImageImportIUC2.New()

class itkVTKImageImportIUC2(itk.itkImageSourcePython.itkImageSourceIUC2):
    r"""


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportIUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIUC2_Clone)
    SetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIUC2_SetCallbackUserData)
    GetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIUC2_GetCallbackUserData)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIUC2
    cast = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportIUC2_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIUC2

        Create a new object of the class itkVTKImageImportIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportIUC2 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportIUC2_swigregister(itkVTKImageImportIUC2)
itkVTKImageImportIUC2___New_orig__ = _itkVTKImageImportPython.itkVTKImageImportIUC2___New_orig__
itkVTKImageImportIUC2_cast = _itkVTKImageImportPython.itkVTKImageImportIUC2_cast


def itkVTKImageImportIUC3_New():
    return itkVTKImageImportIUC3.New()

class itkVTKImageImportIUC3(itk.itkImageSourcePython.itkImageSourceIUC3):
    r"""


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportIUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIUC3_Clone)
    SetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIUC3_SetCallbackUserData)
    GetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIUC3_GetCallbackUserData)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIUC3
    cast = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportIUC3_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIUC3

        Create a new object of the class itkVTKImageImportIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportIUC3 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportIUC3_swigregister(itkVTKImageImportIUC3)
itkVTKImageImportIUC3___New_orig__ = _itkVTKImageImportPython.itkVTKImageImportIUC3___New_orig__
itkVTKImageImportIUC3_cast = _itkVTKImageImportPython.itkVTKImageImportIUC3_cast


def itkVTKImageImportIUL2_New():
    return itkVTKImageImportIUL2.New()

class itkVTKImageImportIUL2(itk.itkImageSourcePython.itkImageSourceIUL2):
    r"""


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportIUL2___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIUL2_Clone)
    SetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIUL2_SetCallbackUserData)
    GetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIUL2_GetCallbackUserData)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIUL2
    cast = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportIUL2_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIUL2

        Create a new object of the class itkVTKImageImportIUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIUL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIUL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportIUL2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportIUL2 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportIUL2_swigregister(itkVTKImageImportIUL2)
itkVTKImageImportIUL2___New_orig__ = _itkVTKImageImportPython.itkVTKImageImportIUL2___New_orig__
itkVTKImageImportIUL2_cast = _itkVTKImageImportPython.itkVTKImageImportIUL2_cast


def itkVTKImageImportIUL3_New():
    return itkVTKImageImportIUL3.New()

class itkVTKImageImportIUL3(itk.itkImageSourcePython.itkImageSourceIUL3):
    r"""


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportIUL3___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIUL3_Clone)
    SetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIUL3_SetCallbackUserData)
    GetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIUL3_GetCallbackUserData)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIUL3
    cast = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportIUL3_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIUL3

        Create a new object of the class itkVTKImageImportIUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIUL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIUL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportIUL3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportIUL3 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportIUL3_swigregister(itkVTKImageImportIUL3)
itkVTKImageImportIUL3___New_orig__ = _itkVTKImageImportPython.itkVTKImageImportIUL3___New_orig__
itkVTKImageImportIUL3_cast = _itkVTKImageImportPython.itkVTKImageImportIUL3_cast


def itkVTKImageImportIUS2_New():
    return itkVTKImageImportIUS2.New()

class itkVTKImageImportIUS2(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportIUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIUS2_Clone)
    SetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIUS2_SetCallbackUserData)
    GetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIUS2_GetCallbackUserData)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIUS2
    cast = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportIUS2_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIUS2

        Create a new object of the class itkVTKImageImportIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportIUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportIUS2 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportIUS2_swigregister(itkVTKImageImportIUS2)
itkVTKImageImportIUS2___New_orig__ = _itkVTKImageImportPython.itkVTKImageImportIUS2___New_orig__
itkVTKImageImportIUS2_cast = _itkVTKImageImportPython.itkVTKImageImportIUS2_cast


def itkVTKImageImportIUS3_New():
    return itkVTKImageImportIUS3.New()

class itkVTKImageImportIUS3(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportIUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIUS3_Clone)
    SetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIUS3_SetCallbackUserData)
    GetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIUS3_GetCallbackUserData)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIUS3
    cast = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportIUS3_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIUS3

        Create a new object of the class itkVTKImageImportIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportIUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportIUS3 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportIUS3_swigregister(itkVTKImageImportIUS3)
itkVTKImageImportIUS3___New_orig__ = _itkVTKImageImportPython.itkVTKImageImportIUS3___New_orig__
itkVTKImageImportIUS3_cast = _itkVTKImageImportPython.itkVTKImageImportIUS3_cast


def itkVTKImageImportIVF22_New():
    return itkVTKImageImportIVF22.New()

class itkVTKImageImportIVF22(itk.itkImageSourcePython.itkImageSourceIVF22):
    r"""


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportIVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIVF22_Clone)
    SetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIVF22_SetCallbackUserData)
    GetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIVF22_GetCallbackUserData)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIVF22
    cast = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportIVF22_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIVF22

        Create a new object of the class itkVTKImageImportIVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportIVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportIVF22 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportIVF22_swigregister(itkVTKImageImportIVF22)
itkVTKImageImportIVF22___New_orig__ = _itkVTKImageImportPython.itkVTKImageImportIVF22___New_orig__
itkVTKImageImportIVF22_cast = _itkVTKImageImportPython.itkVTKImageImportIVF22_cast


def itkVTKImageImportIVF23_New():
    return itkVTKImageImportIVF23.New()

class itkVTKImageImportIVF23(itk.itkImageSourcePython.itkImageSourceIVF23):
    r"""


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportIVF23___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIVF23_Clone)
    SetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIVF23_SetCallbackUserData)
    GetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIVF23_GetCallbackUserData)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIVF23
    cast = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportIVF23_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIVF23

        Create a new object of the class itkVTKImageImportIVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportIVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportIVF23 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportIVF23_swigregister(itkVTKImageImportIVF23)
itkVTKImageImportIVF23___New_orig__ = _itkVTKImageImportPython.itkVTKImageImportIVF23___New_orig__
itkVTKImageImportIVF23_cast = _itkVTKImageImportPython.itkVTKImageImportIVF23_cast


def itkVTKImageImportIVF32_New():
    return itkVTKImageImportIVF32.New()

class itkVTKImageImportIVF32(itk.itkImageSourcePython.itkImageSourceIVF32):
    r"""


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportIVF32___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIVF32_Clone)
    SetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIVF32_SetCallbackUserData)
    GetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIVF32_GetCallbackUserData)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIVF32
    cast = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportIVF32_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIVF32

        Create a new object of the class itkVTKImageImportIVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIVF32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIVF32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportIVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportIVF32 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportIVF32_swigregister(itkVTKImageImportIVF32)
itkVTKImageImportIVF32___New_orig__ = _itkVTKImageImportPython.itkVTKImageImportIVF32___New_orig__
itkVTKImageImportIVF32_cast = _itkVTKImageImportPython.itkVTKImageImportIVF32_cast


def itkVTKImageImportIVF33_New():
    return itkVTKImageImportIVF33.New()

class itkVTKImageImportIVF33(itk.itkImageSourcePython.itkImageSourceIVF33):
    r"""


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportIVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIVF33_Clone)
    SetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIVF33_SetCallbackUserData)
    GetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIVF33_GetCallbackUserData)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIVF33
    cast = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportIVF33_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIVF33

        Create a new object of the class itkVTKImageImportIVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportIVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportIVF33 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportIVF33_swigregister(itkVTKImageImportIVF33)
itkVTKImageImportIVF33___New_orig__ = _itkVTKImageImportPython.itkVTKImageImportIVF33___New_orig__
itkVTKImageImportIVF33_cast = _itkVTKImageImportPython.itkVTKImageImportIVF33_cast


def itkVTKImageImportIVF42_New():
    return itkVTKImageImportIVF42.New()

class itkVTKImageImportIVF42(itk.itkImageSourcePython.itkImageSourceIVF42):
    r"""


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportIVF42___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIVF42_Clone)
    SetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIVF42_SetCallbackUserData)
    GetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIVF42_GetCallbackUserData)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIVF42
    cast = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportIVF42_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIVF42

        Create a new object of the class itkVTKImageImportIVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIVF42.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIVF42.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportIVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportIVF42 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportIVF42_swigregister(itkVTKImageImportIVF42)
itkVTKImageImportIVF42___New_orig__ = _itkVTKImageImportPython.itkVTKImageImportIVF42___New_orig__
itkVTKImageImportIVF42_cast = _itkVTKImageImportPython.itkVTKImageImportIVF42_cast


def itkVTKImageImportIVF43_New():
    return itkVTKImageImportIVF43.New()

class itkVTKImageImportIVF43(itk.itkImageSourcePython.itkImageSourceIVF43):
    r"""


    Connect the end of an VTK pipeline to an ITK image pipeline.

    VTKImageImport can be used at the beginning of an ITK image pipeline
    to connect with a VTK pipeline that ends with vtkImageExport.
    Callbacks provided by VTKImageImport are registered with
    vtkImageExport to connect the pipeline execution together. Once
    connected, update requests coming through the ITK pipeline are
    automatically propagated to the VTK pipeline.

    Note that the VTK images are assumed to be of 1, 2, or 3 dimensions.
    Scalar value types can be one of: float, double, char, unsigned char,
    short, unsigned short, int, unsigned int, long, unsigned long. The
    images can also have pixel types with more than one component.

    See:   VTKImageImport 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportIVF43___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIVF43_Clone)
    SetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIVF43_SetCallbackUserData)
    GetCallbackUserData = _swig_new_instance_method(_itkVTKImageImportPython.itkVTKImageImportIVF43_GetCallbackUserData)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIVF43
    cast = _swig_new_static_method(_itkVTKImageImportPython.itkVTKImageImportIVF43_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIVF43

        Create a new object of the class itkVTKImageImportIVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportIVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportIVF43 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportIVF43_swigregister(itkVTKImageImportIVF43)
itkVTKImageImportIVF43___New_orig__ = _itkVTKImageImportPython.itkVTKImageImportIVF43___New_orig__
itkVTKImageImportIVF43_cast = _itkVTKImageImportPython.itkVTKImageImportIVF43_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def vtk_image_import(*args, **kwargs):
    """Procedural interface for VTKImageImport"""
    import itk
    instance = itk.VTKImageImport.New(*args, **kwargs)
    return instance.__internal_call__()

def vtk_image_import_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.VTKImageImport, itkTemplate.itkTemplate):
        filter_object = itk.VTKImageImport.values()[0]
    else:
        filter_object = itk.VTKImageImport

    vtk_image_import.__doc__ = filter_object.__doc__
    vtk_image_import.__doc__ += "\n Args are Input(s) to the filter.\n"
    vtk_image_import.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.VTKImageImport, itkTemplate.itkTemplate):
        vtk_image_import.__doc__ += itkHelpers.filter_args(filter_object)[0]
        vtk_image_import.__doc__ += "\n"
        vtk_image_import.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        vtk_image_import.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



