# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKLevelSetsPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkBinaryMaskToNarrowBandPointSetFilterPython
else:
    import _itkBinaryMaskToNarrowBandPointSetFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkBinaryMaskToNarrowBandPointSetFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkBinaryMaskToNarrowBandPointSetFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImagePython
import itk.itkSizePython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkOffsetPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkIndexPython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.itkImageToMeshFilterPython
import itk.itkMeshBasePython
import itk.itkMapContainerPython
import itk.itkVectorContainerPython
import itk.itkContinuousIndexPython
import itk.itkBoundingBoxPython
import itk.itkPointSetPython
import itk.itkArrayPython
import itk.itkMeshSourcePython

def itkBinaryMaskToNarrowBandPointSetFilterISS2MD2_New():
    return itkBinaryMaskToNarrowBandPointSetFilterISS2MD2.New()

class itkBinaryMaskToNarrowBandPointSetFilterISS2MD2(itk.itkImageToMeshFilterPython.itkImageToMeshFilterISS2MD2):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2MD2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2MD2_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2MD2_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2MD2_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2MD2_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterISS2MD2
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2MD2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterISS2MD2

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterISS2MD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterISS2MD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterISS2MD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterISS2MD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterISS2MD2 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2MD2_swigregister(itkBinaryMaskToNarrowBandPointSetFilterISS2MD2)
itkBinaryMaskToNarrowBandPointSetFilterISS2MD2___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2MD2___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterISS2MD2_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2MD2_cast


def itkBinaryMaskToNarrowBandPointSetFilterISS2MF2_New():
    return itkBinaryMaskToNarrowBandPointSetFilterISS2MF2.New()

class itkBinaryMaskToNarrowBandPointSetFilterISS2MF2(itk.itkImageToMeshFilterPython.itkImageToMeshFilterISS2MF2):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2MF2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2MF2_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2MF2_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2MF2_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2MF2_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterISS2MF2
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2MF2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterISS2MF2

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterISS2MF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterISS2MF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterISS2MF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterISS2MF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterISS2MF2 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2MF2_swigregister(itkBinaryMaskToNarrowBandPointSetFilterISS2MF2)
itkBinaryMaskToNarrowBandPointSetFilterISS2MF2___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2MF2___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterISS2MF2_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2MF2_cast


def itkBinaryMaskToNarrowBandPointSetFilterISS2MSS2_New():
    return itkBinaryMaskToNarrowBandPointSetFilterISS2MSS2.New()

class itkBinaryMaskToNarrowBandPointSetFilterISS2MSS2(itk.itkImageToMeshFilterPython.itkImageToMeshFilterISS2MSS2):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2MSS2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2MSS2_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2MSS2_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2MSS2_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2MSS2_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterISS2MSS2
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2MSS2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterISS2MSS2

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterISS2MSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterISS2MSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterISS2MSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterISS2MSS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterISS2MSS2 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2MSS2_swigregister(itkBinaryMaskToNarrowBandPointSetFilterISS2MSS2)
itkBinaryMaskToNarrowBandPointSetFilterISS2MSS2___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2MSS2___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterISS2MSS2_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2MSS2_cast


def itkBinaryMaskToNarrowBandPointSetFilterISS2MUC2_New():
    return itkBinaryMaskToNarrowBandPointSetFilterISS2MUC2.New()

class itkBinaryMaskToNarrowBandPointSetFilterISS2MUC2(itk.itkImageToMeshFilterPython.itkImageToMeshFilterISS2MUC2):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2MUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2MUC2_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2MUC2_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2MUC2_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2MUC2_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterISS2MUC2
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2MUC2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterISS2MUC2

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterISS2MUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterISS2MUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterISS2MUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterISS2MUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterISS2MUC2 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2MUC2_swigregister(itkBinaryMaskToNarrowBandPointSetFilterISS2MUC2)
itkBinaryMaskToNarrowBandPointSetFilterISS2MUC2___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2MUC2___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterISS2MUC2_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2MUC2_cast


def itkBinaryMaskToNarrowBandPointSetFilterISS2MUS2_New():
    return itkBinaryMaskToNarrowBandPointSetFilterISS2MUS2.New()

class itkBinaryMaskToNarrowBandPointSetFilterISS2MUS2(itk.itkImageToMeshFilterPython.itkImageToMeshFilterISS2MUS2):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2MUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2MUS2_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2MUS2_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2MUS2_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2MUS2_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterISS2MUS2
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2MUS2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterISS2MUS2

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterISS2MUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterISS2MUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterISS2MUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterISS2MUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterISS2MUS2 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2MUS2_swigregister(itkBinaryMaskToNarrowBandPointSetFilterISS2MUS2)
itkBinaryMaskToNarrowBandPointSetFilterISS2MUS2___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2MUS2___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterISS2MUS2_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2MUS2_cast


def itkBinaryMaskToNarrowBandPointSetFilterISS2PSD2_New():
    return itkBinaryMaskToNarrowBandPointSetFilterISS2PSD2.New()

class itkBinaryMaskToNarrowBandPointSetFilterISS2PSD2(itk.itkImageToMeshFilterPython.itkImageToMeshFilterISS2PSD2):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2PSD2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2PSD2_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2PSD2_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2PSD2_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2PSD2_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterISS2PSD2
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2PSD2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterISS2PSD2

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterISS2PSD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterISS2PSD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterISS2PSD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterISS2PSD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterISS2PSD2 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2PSD2_swigregister(itkBinaryMaskToNarrowBandPointSetFilterISS2PSD2)
itkBinaryMaskToNarrowBandPointSetFilterISS2PSD2___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2PSD2___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterISS2PSD2_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2PSD2_cast


def itkBinaryMaskToNarrowBandPointSetFilterISS2PSF2_New():
    return itkBinaryMaskToNarrowBandPointSetFilterISS2PSF2.New()

class itkBinaryMaskToNarrowBandPointSetFilterISS2PSF2(itk.itkImageToMeshFilterPython.itkImageToMeshFilterISS2PSF2):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2PSF2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2PSF2_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2PSF2_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2PSF2_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2PSF2_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterISS2PSF2
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2PSF2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterISS2PSF2

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterISS2PSF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterISS2PSF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterISS2PSF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterISS2PSF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterISS2PSF2 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2PSF2_swigregister(itkBinaryMaskToNarrowBandPointSetFilterISS2PSF2)
itkBinaryMaskToNarrowBandPointSetFilterISS2PSF2___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2PSF2___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterISS2PSF2_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2PSF2_cast


def itkBinaryMaskToNarrowBandPointSetFilterISS2PSSS2_New():
    return itkBinaryMaskToNarrowBandPointSetFilterISS2PSSS2.New()

class itkBinaryMaskToNarrowBandPointSetFilterISS2PSSS2(itk.itkImageToMeshFilterPython.itkImageToMeshFilterISS2PSSS2):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2PSSS2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2PSSS2_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2PSSS2_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2PSSS2_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2PSSS2_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterISS2PSSS2
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2PSSS2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterISS2PSSS2

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterISS2PSSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterISS2PSSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterISS2PSSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterISS2PSSS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterISS2PSSS2 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2PSSS2_swigregister(itkBinaryMaskToNarrowBandPointSetFilterISS2PSSS2)
itkBinaryMaskToNarrowBandPointSetFilterISS2PSSS2___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2PSSS2___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterISS2PSSS2_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2PSSS2_cast


def itkBinaryMaskToNarrowBandPointSetFilterISS2PSUC2_New():
    return itkBinaryMaskToNarrowBandPointSetFilterISS2PSUC2.New()

class itkBinaryMaskToNarrowBandPointSetFilterISS2PSUC2(itk.itkImageToMeshFilterPython.itkImageToMeshFilterISS2PSUC2):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2PSUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2PSUC2_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2PSUC2_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2PSUC2_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2PSUC2_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterISS2PSUC2
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2PSUC2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterISS2PSUC2

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterISS2PSUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterISS2PSUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterISS2PSUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterISS2PSUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterISS2PSUC2 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2PSUC2_swigregister(itkBinaryMaskToNarrowBandPointSetFilterISS2PSUC2)
itkBinaryMaskToNarrowBandPointSetFilterISS2PSUC2___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2PSUC2___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterISS2PSUC2_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2PSUC2_cast


def itkBinaryMaskToNarrowBandPointSetFilterISS2PSUS2_New():
    return itkBinaryMaskToNarrowBandPointSetFilterISS2PSUS2.New()

class itkBinaryMaskToNarrowBandPointSetFilterISS2PSUS2(itk.itkImageToMeshFilterPython.itkImageToMeshFilterISS2PSUS2):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2PSUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2PSUS2_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2PSUS2_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2PSUS2_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2PSUS2_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterISS2PSUS2
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2PSUS2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterISS2PSUS2

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterISS2PSUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterISS2PSUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterISS2PSUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterISS2PSUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterISS2PSUS2 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2PSUS2_swigregister(itkBinaryMaskToNarrowBandPointSetFilterISS2PSUS2)
itkBinaryMaskToNarrowBandPointSetFilterISS2PSUS2___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2PSUS2___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterISS2PSUS2_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS2PSUS2_cast


def itkBinaryMaskToNarrowBandPointSetFilterISS3MD3_New():
    return itkBinaryMaskToNarrowBandPointSetFilterISS3MD3.New()

class itkBinaryMaskToNarrowBandPointSetFilterISS3MD3(itk.itkImageToMeshFilterPython.itkImageToMeshFilterISS3MD3):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3MD3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3MD3_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3MD3_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3MD3_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3MD3_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterISS3MD3
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3MD3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterISS3MD3

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterISS3MD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterISS3MD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterISS3MD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterISS3MD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterISS3MD3 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3MD3_swigregister(itkBinaryMaskToNarrowBandPointSetFilterISS3MD3)
itkBinaryMaskToNarrowBandPointSetFilterISS3MD3___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3MD3___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterISS3MD3_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3MD3_cast


def itkBinaryMaskToNarrowBandPointSetFilterISS3MF3_New():
    return itkBinaryMaskToNarrowBandPointSetFilterISS3MF3.New()

class itkBinaryMaskToNarrowBandPointSetFilterISS3MF3(itk.itkImageToMeshFilterPython.itkImageToMeshFilterISS3MF3):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3MF3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3MF3_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3MF3_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3MF3_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3MF3_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterISS3MF3
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3MF3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterISS3MF3

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterISS3MF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterISS3MF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterISS3MF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterISS3MF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterISS3MF3 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3MF3_swigregister(itkBinaryMaskToNarrowBandPointSetFilterISS3MF3)
itkBinaryMaskToNarrowBandPointSetFilterISS3MF3___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3MF3___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterISS3MF3_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3MF3_cast


def itkBinaryMaskToNarrowBandPointSetFilterISS3MSS3_New():
    return itkBinaryMaskToNarrowBandPointSetFilterISS3MSS3.New()

class itkBinaryMaskToNarrowBandPointSetFilterISS3MSS3(itk.itkImageToMeshFilterPython.itkImageToMeshFilterISS3MSS3):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3MSS3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3MSS3_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3MSS3_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3MSS3_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3MSS3_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterISS3MSS3
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3MSS3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterISS3MSS3

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterISS3MSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterISS3MSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterISS3MSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterISS3MSS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterISS3MSS3 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3MSS3_swigregister(itkBinaryMaskToNarrowBandPointSetFilterISS3MSS3)
itkBinaryMaskToNarrowBandPointSetFilterISS3MSS3___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3MSS3___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterISS3MSS3_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3MSS3_cast


def itkBinaryMaskToNarrowBandPointSetFilterISS3MUC3_New():
    return itkBinaryMaskToNarrowBandPointSetFilterISS3MUC3.New()

class itkBinaryMaskToNarrowBandPointSetFilterISS3MUC3(itk.itkImageToMeshFilterPython.itkImageToMeshFilterISS3MUC3):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3MUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3MUC3_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3MUC3_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3MUC3_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3MUC3_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterISS3MUC3
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3MUC3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterISS3MUC3

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterISS3MUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterISS3MUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterISS3MUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterISS3MUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterISS3MUC3 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3MUC3_swigregister(itkBinaryMaskToNarrowBandPointSetFilterISS3MUC3)
itkBinaryMaskToNarrowBandPointSetFilterISS3MUC3___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3MUC3___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterISS3MUC3_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3MUC3_cast


def itkBinaryMaskToNarrowBandPointSetFilterISS3MUS3_New():
    return itkBinaryMaskToNarrowBandPointSetFilterISS3MUS3.New()

class itkBinaryMaskToNarrowBandPointSetFilterISS3MUS3(itk.itkImageToMeshFilterPython.itkImageToMeshFilterISS3MUS3):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3MUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3MUS3_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3MUS3_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3MUS3_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3MUS3_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterISS3MUS3
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3MUS3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterISS3MUS3

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterISS3MUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterISS3MUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterISS3MUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterISS3MUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterISS3MUS3 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3MUS3_swigregister(itkBinaryMaskToNarrowBandPointSetFilterISS3MUS3)
itkBinaryMaskToNarrowBandPointSetFilterISS3MUS3___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3MUS3___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterISS3MUS3_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3MUS3_cast


def itkBinaryMaskToNarrowBandPointSetFilterISS3PSD3_New():
    return itkBinaryMaskToNarrowBandPointSetFilterISS3PSD3.New()

class itkBinaryMaskToNarrowBandPointSetFilterISS3PSD3(itk.itkImageToMeshFilterPython.itkImageToMeshFilterISS3PSD3):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3PSD3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3PSD3_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3PSD3_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3PSD3_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3PSD3_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterISS3PSD3
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3PSD3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterISS3PSD3

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterISS3PSD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterISS3PSD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterISS3PSD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterISS3PSD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterISS3PSD3 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3PSD3_swigregister(itkBinaryMaskToNarrowBandPointSetFilterISS3PSD3)
itkBinaryMaskToNarrowBandPointSetFilterISS3PSD3___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3PSD3___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterISS3PSD3_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3PSD3_cast


def itkBinaryMaskToNarrowBandPointSetFilterISS3PSF3_New():
    return itkBinaryMaskToNarrowBandPointSetFilterISS3PSF3.New()

class itkBinaryMaskToNarrowBandPointSetFilterISS3PSF3(itk.itkImageToMeshFilterPython.itkImageToMeshFilterISS3PSF3):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3PSF3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3PSF3_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3PSF3_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3PSF3_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3PSF3_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterISS3PSF3
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3PSF3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterISS3PSF3

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterISS3PSF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterISS3PSF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterISS3PSF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterISS3PSF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterISS3PSF3 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3PSF3_swigregister(itkBinaryMaskToNarrowBandPointSetFilterISS3PSF3)
itkBinaryMaskToNarrowBandPointSetFilterISS3PSF3___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3PSF3___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterISS3PSF3_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3PSF3_cast


def itkBinaryMaskToNarrowBandPointSetFilterISS3PSSS3_New():
    return itkBinaryMaskToNarrowBandPointSetFilterISS3PSSS3.New()

class itkBinaryMaskToNarrowBandPointSetFilterISS3PSSS3(itk.itkImageToMeshFilterPython.itkImageToMeshFilterISS3PSSS3):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3PSSS3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3PSSS3_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3PSSS3_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3PSSS3_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3PSSS3_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterISS3PSSS3
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3PSSS3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterISS3PSSS3

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterISS3PSSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterISS3PSSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterISS3PSSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterISS3PSSS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterISS3PSSS3 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3PSSS3_swigregister(itkBinaryMaskToNarrowBandPointSetFilterISS3PSSS3)
itkBinaryMaskToNarrowBandPointSetFilterISS3PSSS3___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3PSSS3___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterISS3PSSS3_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3PSSS3_cast


def itkBinaryMaskToNarrowBandPointSetFilterISS3PSUC3_New():
    return itkBinaryMaskToNarrowBandPointSetFilterISS3PSUC3.New()

class itkBinaryMaskToNarrowBandPointSetFilterISS3PSUC3(itk.itkImageToMeshFilterPython.itkImageToMeshFilterISS3PSUC3):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3PSUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3PSUC3_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3PSUC3_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3PSUC3_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3PSUC3_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterISS3PSUC3
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3PSUC3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterISS3PSUC3

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterISS3PSUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterISS3PSUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterISS3PSUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterISS3PSUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterISS3PSUC3 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3PSUC3_swigregister(itkBinaryMaskToNarrowBandPointSetFilterISS3PSUC3)
itkBinaryMaskToNarrowBandPointSetFilterISS3PSUC3___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3PSUC3___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterISS3PSUC3_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3PSUC3_cast


def itkBinaryMaskToNarrowBandPointSetFilterISS3PSUS3_New():
    return itkBinaryMaskToNarrowBandPointSetFilterISS3PSUS3.New()

class itkBinaryMaskToNarrowBandPointSetFilterISS3PSUS3(itk.itkImageToMeshFilterPython.itkImageToMeshFilterISS3PSUS3):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3PSUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3PSUS3_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3PSUS3_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3PSUS3_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3PSUS3_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterISS3PSUS3
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3PSUS3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterISS3PSUS3

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterISS3PSUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterISS3PSUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterISS3PSUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterISS3PSUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterISS3PSUS3 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3PSUS3_swigregister(itkBinaryMaskToNarrowBandPointSetFilterISS3PSUS3)
itkBinaryMaskToNarrowBandPointSetFilterISS3PSUS3___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3PSUS3___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterISS3PSUS3_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterISS3PSUS3_cast


def itkBinaryMaskToNarrowBandPointSetFilterIUC2MD2_New():
    return itkBinaryMaskToNarrowBandPointSetFilterIUC2MD2.New()

class itkBinaryMaskToNarrowBandPointSetFilterIUC2MD2(itk.itkImageToMeshFilterPython.itkImageToMeshFilterIUC2MD2):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2MD2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2MD2_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2MD2_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2MD2_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2MD2_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterIUC2MD2
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2MD2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterIUC2MD2

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterIUC2MD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterIUC2MD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterIUC2MD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterIUC2MD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterIUC2MD2 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2MD2_swigregister(itkBinaryMaskToNarrowBandPointSetFilterIUC2MD2)
itkBinaryMaskToNarrowBandPointSetFilterIUC2MD2___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2MD2___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterIUC2MD2_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2MD2_cast


def itkBinaryMaskToNarrowBandPointSetFilterIUC2MF2_New():
    return itkBinaryMaskToNarrowBandPointSetFilterIUC2MF2.New()

class itkBinaryMaskToNarrowBandPointSetFilterIUC2MF2(itk.itkImageToMeshFilterPython.itkImageToMeshFilterIUC2MF2):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2MF2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2MF2_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2MF2_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2MF2_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2MF2_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterIUC2MF2
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2MF2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterIUC2MF2

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterIUC2MF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterIUC2MF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterIUC2MF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterIUC2MF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterIUC2MF2 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2MF2_swigregister(itkBinaryMaskToNarrowBandPointSetFilterIUC2MF2)
itkBinaryMaskToNarrowBandPointSetFilterIUC2MF2___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2MF2___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterIUC2MF2_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2MF2_cast


def itkBinaryMaskToNarrowBandPointSetFilterIUC2MSS2_New():
    return itkBinaryMaskToNarrowBandPointSetFilterIUC2MSS2.New()

class itkBinaryMaskToNarrowBandPointSetFilterIUC2MSS2(itk.itkImageToMeshFilterPython.itkImageToMeshFilterIUC2MSS2):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2MSS2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2MSS2_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2MSS2_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2MSS2_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2MSS2_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterIUC2MSS2
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2MSS2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterIUC2MSS2

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterIUC2MSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterIUC2MSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterIUC2MSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterIUC2MSS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterIUC2MSS2 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2MSS2_swigregister(itkBinaryMaskToNarrowBandPointSetFilterIUC2MSS2)
itkBinaryMaskToNarrowBandPointSetFilterIUC2MSS2___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2MSS2___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterIUC2MSS2_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2MSS2_cast


def itkBinaryMaskToNarrowBandPointSetFilterIUC2MUC2_New():
    return itkBinaryMaskToNarrowBandPointSetFilterIUC2MUC2.New()

class itkBinaryMaskToNarrowBandPointSetFilterIUC2MUC2(itk.itkImageToMeshFilterPython.itkImageToMeshFilterIUC2MUC2):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2MUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2MUC2_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2MUC2_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2MUC2_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2MUC2_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterIUC2MUC2
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2MUC2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterIUC2MUC2

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterIUC2MUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterIUC2MUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterIUC2MUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterIUC2MUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterIUC2MUC2 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2MUC2_swigregister(itkBinaryMaskToNarrowBandPointSetFilterIUC2MUC2)
itkBinaryMaskToNarrowBandPointSetFilterIUC2MUC2___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2MUC2___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterIUC2MUC2_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2MUC2_cast


def itkBinaryMaskToNarrowBandPointSetFilterIUC2MUS2_New():
    return itkBinaryMaskToNarrowBandPointSetFilterIUC2MUS2.New()

class itkBinaryMaskToNarrowBandPointSetFilterIUC2MUS2(itk.itkImageToMeshFilterPython.itkImageToMeshFilterIUC2MUS2):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2MUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2MUS2_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2MUS2_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2MUS2_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2MUS2_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterIUC2MUS2
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2MUS2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterIUC2MUS2

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterIUC2MUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterIUC2MUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterIUC2MUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterIUC2MUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterIUC2MUS2 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2MUS2_swigregister(itkBinaryMaskToNarrowBandPointSetFilterIUC2MUS2)
itkBinaryMaskToNarrowBandPointSetFilterIUC2MUS2___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2MUS2___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterIUC2MUS2_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2MUS2_cast


def itkBinaryMaskToNarrowBandPointSetFilterIUC2PSD2_New():
    return itkBinaryMaskToNarrowBandPointSetFilterIUC2PSD2.New()

class itkBinaryMaskToNarrowBandPointSetFilterIUC2PSD2(itk.itkImageToMeshFilterPython.itkImageToMeshFilterIUC2PSD2):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2PSD2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2PSD2_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2PSD2_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2PSD2_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2PSD2_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterIUC2PSD2
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2PSD2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterIUC2PSD2

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterIUC2PSD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterIUC2PSD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterIUC2PSD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterIUC2PSD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterIUC2PSD2 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2PSD2_swigregister(itkBinaryMaskToNarrowBandPointSetFilterIUC2PSD2)
itkBinaryMaskToNarrowBandPointSetFilterIUC2PSD2___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2PSD2___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterIUC2PSD2_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2PSD2_cast


def itkBinaryMaskToNarrowBandPointSetFilterIUC2PSF2_New():
    return itkBinaryMaskToNarrowBandPointSetFilterIUC2PSF2.New()

class itkBinaryMaskToNarrowBandPointSetFilterIUC2PSF2(itk.itkImageToMeshFilterPython.itkImageToMeshFilterIUC2PSF2):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2PSF2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2PSF2_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2PSF2_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2PSF2_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2PSF2_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterIUC2PSF2
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2PSF2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterIUC2PSF2

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterIUC2PSF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterIUC2PSF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterIUC2PSF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterIUC2PSF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterIUC2PSF2 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2PSF2_swigregister(itkBinaryMaskToNarrowBandPointSetFilterIUC2PSF2)
itkBinaryMaskToNarrowBandPointSetFilterIUC2PSF2___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2PSF2___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterIUC2PSF2_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2PSF2_cast


def itkBinaryMaskToNarrowBandPointSetFilterIUC2PSSS2_New():
    return itkBinaryMaskToNarrowBandPointSetFilterIUC2PSSS2.New()

class itkBinaryMaskToNarrowBandPointSetFilterIUC2PSSS2(itk.itkImageToMeshFilterPython.itkImageToMeshFilterIUC2PSSS2):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2PSSS2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2PSSS2_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2PSSS2_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2PSSS2_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2PSSS2_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterIUC2PSSS2
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2PSSS2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterIUC2PSSS2

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterIUC2PSSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterIUC2PSSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterIUC2PSSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterIUC2PSSS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterIUC2PSSS2 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2PSSS2_swigregister(itkBinaryMaskToNarrowBandPointSetFilterIUC2PSSS2)
itkBinaryMaskToNarrowBandPointSetFilterIUC2PSSS2___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2PSSS2___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterIUC2PSSS2_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2PSSS2_cast


def itkBinaryMaskToNarrowBandPointSetFilterIUC2PSUC2_New():
    return itkBinaryMaskToNarrowBandPointSetFilterIUC2PSUC2.New()

class itkBinaryMaskToNarrowBandPointSetFilterIUC2PSUC2(itk.itkImageToMeshFilterPython.itkImageToMeshFilterIUC2PSUC2):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2PSUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2PSUC2_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2PSUC2_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2PSUC2_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2PSUC2_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterIUC2PSUC2
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2PSUC2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterIUC2PSUC2

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterIUC2PSUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterIUC2PSUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterIUC2PSUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterIUC2PSUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterIUC2PSUC2 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2PSUC2_swigregister(itkBinaryMaskToNarrowBandPointSetFilterIUC2PSUC2)
itkBinaryMaskToNarrowBandPointSetFilterIUC2PSUC2___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2PSUC2___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterIUC2PSUC2_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2PSUC2_cast


def itkBinaryMaskToNarrowBandPointSetFilterIUC2PSUS2_New():
    return itkBinaryMaskToNarrowBandPointSetFilterIUC2PSUS2.New()

class itkBinaryMaskToNarrowBandPointSetFilterIUC2PSUS2(itk.itkImageToMeshFilterPython.itkImageToMeshFilterIUC2PSUS2):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2PSUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2PSUS2_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2PSUS2_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2PSUS2_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2PSUS2_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterIUC2PSUS2
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2PSUS2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterIUC2PSUS2

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterIUC2PSUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterIUC2PSUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterIUC2PSUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterIUC2PSUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterIUC2PSUS2 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2PSUS2_swigregister(itkBinaryMaskToNarrowBandPointSetFilterIUC2PSUS2)
itkBinaryMaskToNarrowBandPointSetFilterIUC2PSUS2___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2PSUS2___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterIUC2PSUS2_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC2PSUS2_cast


def itkBinaryMaskToNarrowBandPointSetFilterIUC3MD3_New():
    return itkBinaryMaskToNarrowBandPointSetFilterIUC3MD3.New()

class itkBinaryMaskToNarrowBandPointSetFilterIUC3MD3(itk.itkImageToMeshFilterPython.itkImageToMeshFilterIUC3MD3):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3MD3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3MD3_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3MD3_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3MD3_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3MD3_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterIUC3MD3
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3MD3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterIUC3MD3

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterIUC3MD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterIUC3MD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterIUC3MD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterIUC3MD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterIUC3MD3 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3MD3_swigregister(itkBinaryMaskToNarrowBandPointSetFilterIUC3MD3)
itkBinaryMaskToNarrowBandPointSetFilterIUC3MD3___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3MD3___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterIUC3MD3_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3MD3_cast


def itkBinaryMaskToNarrowBandPointSetFilterIUC3MF3_New():
    return itkBinaryMaskToNarrowBandPointSetFilterIUC3MF3.New()

class itkBinaryMaskToNarrowBandPointSetFilterIUC3MF3(itk.itkImageToMeshFilterPython.itkImageToMeshFilterIUC3MF3):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3MF3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3MF3_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3MF3_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3MF3_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3MF3_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterIUC3MF3
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3MF3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterIUC3MF3

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterIUC3MF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterIUC3MF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterIUC3MF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterIUC3MF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterIUC3MF3 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3MF3_swigregister(itkBinaryMaskToNarrowBandPointSetFilterIUC3MF3)
itkBinaryMaskToNarrowBandPointSetFilterIUC3MF3___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3MF3___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterIUC3MF3_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3MF3_cast


def itkBinaryMaskToNarrowBandPointSetFilterIUC3MSS3_New():
    return itkBinaryMaskToNarrowBandPointSetFilterIUC3MSS3.New()

class itkBinaryMaskToNarrowBandPointSetFilterIUC3MSS3(itk.itkImageToMeshFilterPython.itkImageToMeshFilterIUC3MSS3):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3MSS3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3MSS3_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3MSS3_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3MSS3_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3MSS3_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterIUC3MSS3
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3MSS3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterIUC3MSS3

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterIUC3MSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterIUC3MSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterIUC3MSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterIUC3MSS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterIUC3MSS3 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3MSS3_swigregister(itkBinaryMaskToNarrowBandPointSetFilterIUC3MSS3)
itkBinaryMaskToNarrowBandPointSetFilterIUC3MSS3___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3MSS3___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterIUC3MSS3_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3MSS3_cast


def itkBinaryMaskToNarrowBandPointSetFilterIUC3MUC3_New():
    return itkBinaryMaskToNarrowBandPointSetFilterIUC3MUC3.New()

class itkBinaryMaskToNarrowBandPointSetFilterIUC3MUC3(itk.itkImageToMeshFilterPython.itkImageToMeshFilterIUC3MUC3):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3MUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3MUC3_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3MUC3_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3MUC3_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3MUC3_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterIUC3MUC3
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3MUC3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterIUC3MUC3

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterIUC3MUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterIUC3MUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterIUC3MUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterIUC3MUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterIUC3MUC3 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3MUC3_swigregister(itkBinaryMaskToNarrowBandPointSetFilterIUC3MUC3)
itkBinaryMaskToNarrowBandPointSetFilterIUC3MUC3___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3MUC3___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterIUC3MUC3_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3MUC3_cast


def itkBinaryMaskToNarrowBandPointSetFilterIUC3MUS3_New():
    return itkBinaryMaskToNarrowBandPointSetFilterIUC3MUS3.New()

class itkBinaryMaskToNarrowBandPointSetFilterIUC3MUS3(itk.itkImageToMeshFilterPython.itkImageToMeshFilterIUC3MUS3):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3MUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3MUS3_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3MUS3_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3MUS3_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3MUS3_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterIUC3MUS3
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3MUS3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterIUC3MUS3

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterIUC3MUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterIUC3MUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterIUC3MUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterIUC3MUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterIUC3MUS3 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3MUS3_swigregister(itkBinaryMaskToNarrowBandPointSetFilterIUC3MUS3)
itkBinaryMaskToNarrowBandPointSetFilterIUC3MUS3___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3MUS3___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterIUC3MUS3_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3MUS3_cast


def itkBinaryMaskToNarrowBandPointSetFilterIUC3PSD3_New():
    return itkBinaryMaskToNarrowBandPointSetFilterIUC3PSD3.New()

class itkBinaryMaskToNarrowBandPointSetFilterIUC3PSD3(itk.itkImageToMeshFilterPython.itkImageToMeshFilterIUC3PSD3):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3PSD3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3PSD3_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3PSD3_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3PSD3_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3PSD3_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterIUC3PSD3
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3PSD3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterIUC3PSD3

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterIUC3PSD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterIUC3PSD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterIUC3PSD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterIUC3PSD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterIUC3PSD3 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3PSD3_swigregister(itkBinaryMaskToNarrowBandPointSetFilterIUC3PSD3)
itkBinaryMaskToNarrowBandPointSetFilterIUC3PSD3___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3PSD3___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterIUC3PSD3_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3PSD3_cast


def itkBinaryMaskToNarrowBandPointSetFilterIUC3PSF3_New():
    return itkBinaryMaskToNarrowBandPointSetFilterIUC3PSF3.New()

class itkBinaryMaskToNarrowBandPointSetFilterIUC3PSF3(itk.itkImageToMeshFilterPython.itkImageToMeshFilterIUC3PSF3):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3PSF3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3PSF3_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3PSF3_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3PSF3_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3PSF3_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterIUC3PSF3
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3PSF3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterIUC3PSF3

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterIUC3PSF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterIUC3PSF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterIUC3PSF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterIUC3PSF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterIUC3PSF3 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3PSF3_swigregister(itkBinaryMaskToNarrowBandPointSetFilterIUC3PSF3)
itkBinaryMaskToNarrowBandPointSetFilterIUC3PSF3___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3PSF3___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterIUC3PSF3_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3PSF3_cast


def itkBinaryMaskToNarrowBandPointSetFilterIUC3PSSS3_New():
    return itkBinaryMaskToNarrowBandPointSetFilterIUC3PSSS3.New()

class itkBinaryMaskToNarrowBandPointSetFilterIUC3PSSS3(itk.itkImageToMeshFilterPython.itkImageToMeshFilterIUC3PSSS3):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3PSSS3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3PSSS3_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3PSSS3_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3PSSS3_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3PSSS3_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterIUC3PSSS3
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3PSSS3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterIUC3PSSS3

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterIUC3PSSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterIUC3PSSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterIUC3PSSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterIUC3PSSS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterIUC3PSSS3 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3PSSS3_swigregister(itkBinaryMaskToNarrowBandPointSetFilterIUC3PSSS3)
itkBinaryMaskToNarrowBandPointSetFilterIUC3PSSS3___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3PSSS3___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterIUC3PSSS3_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3PSSS3_cast


def itkBinaryMaskToNarrowBandPointSetFilterIUC3PSUC3_New():
    return itkBinaryMaskToNarrowBandPointSetFilterIUC3PSUC3.New()

class itkBinaryMaskToNarrowBandPointSetFilterIUC3PSUC3(itk.itkImageToMeshFilterPython.itkImageToMeshFilterIUC3PSUC3):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3PSUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3PSUC3_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3PSUC3_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3PSUC3_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3PSUC3_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterIUC3PSUC3
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3PSUC3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterIUC3PSUC3

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterIUC3PSUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterIUC3PSUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterIUC3PSUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterIUC3PSUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterIUC3PSUC3 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3PSUC3_swigregister(itkBinaryMaskToNarrowBandPointSetFilterIUC3PSUC3)
itkBinaryMaskToNarrowBandPointSetFilterIUC3PSUC3___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3PSUC3___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterIUC3PSUC3_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3PSUC3_cast


def itkBinaryMaskToNarrowBandPointSetFilterIUC3PSUS3_New():
    return itkBinaryMaskToNarrowBandPointSetFilterIUC3PSUS3.New()

class itkBinaryMaskToNarrowBandPointSetFilterIUC3PSUS3(itk.itkImageToMeshFilterPython.itkImageToMeshFilterIUC3PSUS3):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3PSUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3PSUS3_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3PSUS3_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3PSUS3_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3PSUS3_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterIUC3PSUS3
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3PSUS3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterIUC3PSUS3

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterIUC3PSUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterIUC3PSUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterIUC3PSUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterIUC3PSUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterIUC3PSUS3 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3PSUS3_swigregister(itkBinaryMaskToNarrowBandPointSetFilterIUC3PSUS3)
itkBinaryMaskToNarrowBandPointSetFilterIUC3PSUS3___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3PSUS3___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterIUC3PSUS3_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUC3PSUS3_cast


def itkBinaryMaskToNarrowBandPointSetFilterIUS2MD2_New():
    return itkBinaryMaskToNarrowBandPointSetFilterIUS2MD2.New()

class itkBinaryMaskToNarrowBandPointSetFilterIUS2MD2(itk.itkImageToMeshFilterPython.itkImageToMeshFilterIUS2MD2):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2MD2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2MD2_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2MD2_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2MD2_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2MD2_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterIUS2MD2
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2MD2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterIUS2MD2

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterIUS2MD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterIUS2MD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterIUS2MD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterIUS2MD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterIUS2MD2 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2MD2_swigregister(itkBinaryMaskToNarrowBandPointSetFilterIUS2MD2)
itkBinaryMaskToNarrowBandPointSetFilterIUS2MD2___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2MD2___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterIUS2MD2_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2MD2_cast


def itkBinaryMaskToNarrowBandPointSetFilterIUS2MF2_New():
    return itkBinaryMaskToNarrowBandPointSetFilterIUS2MF2.New()

class itkBinaryMaskToNarrowBandPointSetFilterIUS2MF2(itk.itkImageToMeshFilterPython.itkImageToMeshFilterIUS2MF2):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2MF2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2MF2_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2MF2_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2MF2_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2MF2_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterIUS2MF2
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2MF2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterIUS2MF2

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterIUS2MF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterIUS2MF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterIUS2MF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterIUS2MF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterIUS2MF2 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2MF2_swigregister(itkBinaryMaskToNarrowBandPointSetFilterIUS2MF2)
itkBinaryMaskToNarrowBandPointSetFilterIUS2MF2___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2MF2___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterIUS2MF2_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2MF2_cast


def itkBinaryMaskToNarrowBandPointSetFilterIUS2MSS2_New():
    return itkBinaryMaskToNarrowBandPointSetFilterIUS2MSS2.New()

class itkBinaryMaskToNarrowBandPointSetFilterIUS2MSS2(itk.itkImageToMeshFilterPython.itkImageToMeshFilterIUS2MSS2):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2MSS2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2MSS2_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2MSS2_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2MSS2_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2MSS2_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterIUS2MSS2
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2MSS2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterIUS2MSS2

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterIUS2MSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterIUS2MSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterIUS2MSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterIUS2MSS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterIUS2MSS2 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2MSS2_swigregister(itkBinaryMaskToNarrowBandPointSetFilterIUS2MSS2)
itkBinaryMaskToNarrowBandPointSetFilterIUS2MSS2___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2MSS2___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterIUS2MSS2_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2MSS2_cast


def itkBinaryMaskToNarrowBandPointSetFilterIUS2MUC2_New():
    return itkBinaryMaskToNarrowBandPointSetFilterIUS2MUC2.New()

class itkBinaryMaskToNarrowBandPointSetFilterIUS2MUC2(itk.itkImageToMeshFilterPython.itkImageToMeshFilterIUS2MUC2):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2MUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2MUC2_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2MUC2_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2MUC2_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2MUC2_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterIUS2MUC2
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2MUC2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterIUS2MUC2

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterIUS2MUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterIUS2MUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterIUS2MUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterIUS2MUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterIUS2MUC2 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2MUC2_swigregister(itkBinaryMaskToNarrowBandPointSetFilterIUS2MUC2)
itkBinaryMaskToNarrowBandPointSetFilterIUS2MUC2___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2MUC2___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterIUS2MUC2_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2MUC2_cast


def itkBinaryMaskToNarrowBandPointSetFilterIUS2MUS2_New():
    return itkBinaryMaskToNarrowBandPointSetFilterIUS2MUS2.New()

class itkBinaryMaskToNarrowBandPointSetFilterIUS2MUS2(itk.itkImageToMeshFilterPython.itkImageToMeshFilterIUS2MUS2):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2MUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2MUS2_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2MUS2_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2MUS2_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2MUS2_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterIUS2MUS2
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2MUS2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterIUS2MUS2

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterIUS2MUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterIUS2MUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterIUS2MUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterIUS2MUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterIUS2MUS2 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2MUS2_swigregister(itkBinaryMaskToNarrowBandPointSetFilterIUS2MUS2)
itkBinaryMaskToNarrowBandPointSetFilterIUS2MUS2___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2MUS2___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterIUS2MUS2_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2MUS2_cast


def itkBinaryMaskToNarrowBandPointSetFilterIUS2PSD2_New():
    return itkBinaryMaskToNarrowBandPointSetFilterIUS2PSD2.New()

class itkBinaryMaskToNarrowBandPointSetFilterIUS2PSD2(itk.itkImageToMeshFilterPython.itkImageToMeshFilterIUS2PSD2):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2PSD2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2PSD2_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2PSD2_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2PSD2_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2PSD2_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterIUS2PSD2
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2PSD2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterIUS2PSD2

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterIUS2PSD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterIUS2PSD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterIUS2PSD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterIUS2PSD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterIUS2PSD2 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2PSD2_swigregister(itkBinaryMaskToNarrowBandPointSetFilterIUS2PSD2)
itkBinaryMaskToNarrowBandPointSetFilterIUS2PSD2___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2PSD2___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterIUS2PSD2_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2PSD2_cast


def itkBinaryMaskToNarrowBandPointSetFilterIUS2PSF2_New():
    return itkBinaryMaskToNarrowBandPointSetFilterIUS2PSF2.New()

class itkBinaryMaskToNarrowBandPointSetFilterIUS2PSF2(itk.itkImageToMeshFilterPython.itkImageToMeshFilterIUS2PSF2):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2PSF2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2PSF2_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2PSF2_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2PSF2_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2PSF2_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterIUS2PSF2
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2PSF2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterIUS2PSF2

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterIUS2PSF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterIUS2PSF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterIUS2PSF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterIUS2PSF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterIUS2PSF2 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2PSF2_swigregister(itkBinaryMaskToNarrowBandPointSetFilterIUS2PSF2)
itkBinaryMaskToNarrowBandPointSetFilterIUS2PSF2___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2PSF2___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterIUS2PSF2_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2PSF2_cast


def itkBinaryMaskToNarrowBandPointSetFilterIUS2PSSS2_New():
    return itkBinaryMaskToNarrowBandPointSetFilterIUS2PSSS2.New()

class itkBinaryMaskToNarrowBandPointSetFilterIUS2PSSS2(itk.itkImageToMeshFilterPython.itkImageToMeshFilterIUS2PSSS2):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2PSSS2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2PSSS2_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2PSSS2_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2PSSS2_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2PSSS2_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterIUS2PSSS2
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2PSSS2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterIUS2PSSS2

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterIUS2PSSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterIUS2PSSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterIUS2PSSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterIUS2PSSS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterIUS2PSSS2 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2PSSS2_swigregister(itkBinaryMaskToNarrowBandPointSetFilterIUS2PSSS2)
itkBinaryMaskToNarrowBandPointSetFilterIUS2PSSS2___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2PSSS2___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterIUS2PSSS2_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2PSSS2_cast


def itkBinaryMaskToNarrowBandPointSetFilterIUS2PSUC2_New():
    return itkBinaryMaskToNarrowBandPointSetFilterIUS2PSUC2.New()

class itkBinaryMaskToNarrowBandPointSetFilterIUS2PSUC2(itk.itkImageToMeshFilterPython.itkImageToMeshFilterIUS2PSUC2):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2PSUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2PSUC2_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2PSUC2_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2PSUC2_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2PSUC2_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterIUS2PSUC2
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2PSUC2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterIUS2PSUC2

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterIUS2PSUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterIUS2PSUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterIUS2PSUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterIUS2PSUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterIUS2PSUC2 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2PSUC2_swigregister(itkBinaryMaskToNarrowBandPointSetFilterIUS2PSUC2)
itkBinaryMaskToNarrowBandPointSetFilterIUS2PSUC2___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2PSUC2___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterIUS2PSUC2_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2PSUC2_cast


def itkBinaryMaskToNarrowBandPointSetFilterIUS2PSUS2_New():
    return itkBinaryMaskToNarrowBandPointSetFilterIUS2PSUS2.New()

class itkBinaryMaskToNarrowBandPointSetFilterIUS2PSUS2(itk.itkImageToMeshFilterPython.itkImageToMeshFilterIUS2PSUS2):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2PSUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2PSUS2_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2PSUS2_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2PSUS2_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2PSUS2_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterIUS2PSUS2
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2PSUS2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterIUS2PSUS2

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterIUS2PSUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterIUS2PSUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterIUS2PSUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterIUS2PSUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterIUS2PSUS2 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2PSUS2_swigregister(itkBinaryMaskToNarrowBandPointSetFilterIUS2PSUS2)
itkBinaryMaskToNarrowBandPointSetFilterIUS2PSUS2___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2PSUS2___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterIUS2PSUS2_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS2PSUS2_cast


def itkBinaryMaskToNarrowBandPointSetFilterIUS3MD3_New():
    return itkBinaryMaskToNarrowBandPointSetFilterIUS3MD3.New()

class itkBinaryMaskToNarrowBandPointSetFilterIUS3MD3(itk.itkImageToMeshFilterPython.itkImageToMeshFilterIUS3MD3):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3MD3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3MD3_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3MD3_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3MD3_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3MD3_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterIUS3MD3
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3MD3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterIUS3MD3

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterIUS3MD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterIUS3MD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterIUS3MD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterIUS3MD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterIUS3MD3 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3MD3_swigregister(itkBinaryMaskToNarrowBandPointSetFilterIUS3MD3)
itkBinaryMaskToNarrowBandPointSetFilterIUS3MD3___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3MD3___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterIUS3MD3_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3MD3_cast


def itkBinaryMaskToNarrowBandPointSetFilterIUS3MF3_New():
    return itkBinaryMaskToNarrowBandPointSetFilterIUS3MF3.New()

class itkBinaryMaskToNarrowBandPointSetFilterIUS3MF3(itk.itkImageToMeshFilterPython.itkImageToMeshFilterIUS3MF3):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3MF3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3MF3_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3MF3_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3MF3_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3MF3_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterIUS3MF3
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3MF3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterIUS3MF3

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterIUS3MF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterIUS3MF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterIUS3MF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterIUS3MF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterIUS3MF3 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3MF3_swigregister(itkBinaryMaskToNarrowBandPointSetFilterIUS3MF3)
itkBinaryMaskToNarrowBandPointSetFilterIUS3MF3___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3MF3___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterIUS3MF3_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3MF3_cast


def itkBinaryMaskToNarrowBandPointSetFilterIUS3MSS3_New():
    return itkBinaryMaskToNarrowBandPointSetFilterIUS3MSS3.New()

class itkBinaryMaskToNarrowBandPointSetFilterIUS3MSS3(itk.itkImageToMeshFilterPython.itkImageToMeshFilterIUS3MSS3):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3MSS3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3MSS3_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3MSS3_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3MSS3_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3MSS3_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterIUS3MSS3
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3MSS3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterIUS3MSS3

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterIUS3MSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterIUS3MSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterIUS3MSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterIUS3MSS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterIUS3MSS3 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3MSS3_swigregister(itkBinaryMaskToNarrowBandPointSetFilterIUS3MSS3)
itkBinaryMaskToNarrowBandPointSetFilterIUS3MSS3___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3MSS3___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterIUS3MSS3_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3MSS3_cast


def itkBinaryMaskToNarrowBandPointSetFilterIUS3MUC3_New():
    return itkBinaryMaskToNarrowBandPointSetFilterIUS3MUC3.New()

class itkBinaryMaskToNarrowBandPointSetFilterIUS3MUC3(itk.itkImageToMeshFilterPython.itkImageToMeshFilterIUS3MUC3):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3MUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3MUC3_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3MUC3_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3MUC3_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3MUC3_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterIUS3MUC3
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3MUC3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterIUS3MUC3

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterIUS3MUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterIUS3MUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterIUS3MUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterIUS3MUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterIUS3MUC3 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3MUC3_swigregister(itkBinaryMaskToNarrowBandPointSetFilterIUS3MUC3)
itkBinaryMaskToNarrowBandPointSetFilterIUS3MUC3___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3MUC3___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterIUS3MUC3_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3MUC3_cast


def itkBinaryMaskToNarrowBandPointSetFilterIUS3MUS3_New():
    return itkBinaryMaskToNarrowBandPointSetFilterIUS3MUS3.New()

class itkBinaryMaskToNarrowBandPointSetFilterIUS3MUS3(itk.itkImageToMeshFilterPython.itkImageToMeshFilterIUS3MUS3):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3MUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3MUS3_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3MUS3_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3MUS3_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3MUS3_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterIUS3MUS3
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3MUS3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterIUS3MUS3

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterIUS3MUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterIUS3MUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterIUS3MUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterIUS3MUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterIUS3MUS3 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3MUS3_swigregister(itkBinaryMaskToNarrowBandPointSetFilterIUS3MUS3)
itkBinaryMaskToNarrowBandPointSetFilterIUS3MUS3___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3MUS3___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterIUS3MUS3_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3MUS3_cast


def itkBinaryMaskToNarrowBandPointSetFilterIUS3PSD3_New():
    return itkBinaryMaskToNarrowBandPointSetFilterIUS3PSD3.New()

class itkBinaryMaskToNarrowBandPointSetFilterIUS3PSD3(itk.itkImageToMeshFilterPython.itkImageToMeshFilterIUS3PSD3):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3PSD3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3PSD3_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3PSD3_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3PSD3_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3PSD3_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterIUS3PSD3
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3PSD3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterIUS3PSD3

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterIUS3PSD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterIUS3PSD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterIUS3PSD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterIUS3PSD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterIUS3PSD3 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3PSD3_swigregister(itkBinaryMaskToNarrowBandPointSetFilterIUS3PSD3)
itkBinaryMaskToNarrowBandPointSetFilterIUS3PSD3___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3PSD3___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterIUS3PSD3_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3PSD3_cast


def itkBinaryMaskToNarrowBandPointSetFilterIUS3PSF3_New():
    return itkBinaryMaskToNarrowBandPointSetFilterIUS3PSF3.New()

class itkBinaryMaskToNarrowBandPointSetFilterIUS3PSF3(itk.itkImageToMeshFilterPython.itkImageToMeshFilterIUS3PSF3):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3PSF3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3PSF3_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3PSF3_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3PSF3_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3PSF3_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterIUS3PSF3
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3PSF3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterIUS3PSF3

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterIUS3PSF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterIUS3PSF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterIUS3PSF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterIUS3PSF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterIUS3PSF3 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3PSF3_swigregister(itkBinaryMaskToNarrowBandPointSetFilterIUS3PSF3)
itkBinaryMaskToNarrowBandPointSetFilterIUS3PSF3___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3PSF3___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterIUS3PSF3_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3PSF3_cast


def itkBinaryMaskToNarrowBandPointSetFilterIUS3PSSS3_New():
    return itkBinaryMaskToNarrowBandPointSetFilterIUS3PSSS3.New()

class itkBinaryMaskToNarrowBandPointSetFilterIUS3PSSS3(itk.itkImageToMeshFilterPython.itkImageToMeshFilterIUS3PSSS3):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3PSSS3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3PSSS3_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3PSSS3_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3PSSS3_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3PSSS3_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterIUS3PSSS3
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3PSSS3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterIUS3PSSS3

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterIUS3PSSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterIUS3PSSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterIUS3PSSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterIUS3PSSS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterIUS3PSSS3 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3PSSS3_swigregister(itkBinaryMaskToNarrowBandPointSetFilterIUS3PSSS3)
itkBinaryMaskToNarrowBandPointSetFilterIUS3PSSS3___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3PSSS3___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterIUS3PSSS3_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3PSSS3_cast


def itkBinaryMaskToNarrowBandPointSetFilterIUS3PSUC3_New():
    return itkBinaryMaskToNarrowBandPointSetFilterIUS3PSUC3.New()

class itkBinaryMaskToNarrowBandPointSetFilterIUS3PSUC3(itk.itkImageToMeshFilterPython.itkImageToMeshFilterIUS3PSUC3):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3PSUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3PSUC3_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3PSUC3_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3PSUC3_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3PSUC3_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterIUS3PSUC3
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3PSUC3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterIUS3PSUC3

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterIUS3PSUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterIUS3PSUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterIUS3PSUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterIUS3PSUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterIUS3PSUC3 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3PSUC3_swigregister(itkBinaryMaskToNarrowBandPointSetFilterIUS3PSUC3)
itkBinaryMaskToNarrowBandPointSetFilterIUS3PSUC3___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3PSUC3___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterIUS3PSUC3_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3PSUC3_cast


def itkBinaryMaskToNarrowBandPointSetFilterIUS3PSUS3_New():
    return itkBinaryMaskToNarrowBandPointSetFilterIUS3PSUS3.New()

class itkBinaryMaskToNarrowBandPointSetFilterIUS3PSUS3(itk.itkImageToMeshFilterPython.itkImageToMeshFilterIUS3PSUS3):
    r"""


    Generate a PointSet containing the narrow band around the edges of a
    input binary image.

    BinaryMaskToNarrowBandPointSetFilter takes a binary image as input and
    generates a PointSet as output. The point set contains points around
    the contours of the binary mask in the image. The pixel values of the
    point set are obtained as the distances from the point to the edge of
    the binary mask.

    This filter is intended to be used for initializing the process of
    NarrowBand-to-Image Registration.

    The filter is templated over the input image type and the output mesh
    type. The only restriction is that the dimension of points in the mesh
    should be equal to the input image dimension. The PixelType in the
    mesh should be capable to represent distance values.

    See:  ReinitializeImageFilter

    See:  PointSetToImageRegistrationMethod 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3PSUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3PSUS3_Clone)
    SetInput = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3PSUS3_SetInput)
    SetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3PSUS3_SetBandWidth)
    GetBandWidth = _swig_new_instance_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3PSUS3_GetBandWidth)
    __swig_destroy__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.delete_itkBinaryMaskToNarrowBandPointSetFilterIUS3PSUS3
    cast = _swig_new_static_method(_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3PSUS3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMaskToNarrowBandPointSetFilterIUS3PSUS3

        Create a new object of the class itkBinaryMaskToNarrowBandPointSetFilterIUS3PSUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMaskToNarrowBandPointSetFilterIUS3PSUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMaskToNarrowBandPointSetFilterIUS3PSUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMaskToNarrowBandPointSetFilterIUS3PSUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMaskToNarrowBandPointSetFilterIUS3PSUS3 in _itkBinaryMaskToNarrowBandPointSetFilterPython:
_itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3PSUS3_swigregister(itkBinaryMaskToNarrowBandPointSetFilterIUS3PSUS3)
itkBinaryMaskToNarrowBandPointSetFilterIUS3PSUS3___New_orig__ = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3PSUS3___New_orig__
itkBinaryMaskToNarrowBandPointSetFilterIUS3PSUS3_cast = _itkBinaryMaskToNarrowBandPointSetFilterPython.itkBinaryMaskToNarrowBandPointSetFilterIUS3PSUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def binary_mask_to_narrow_band_point_set_filter(*args, **kwargs):
    """Procedural interface for BinaryMaskToNarrowBandPointSetFilter"""
    import itk
    instance = itk.BinaryMaskToNarrowBandPointSetFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def binary_mask_to_narrow_band_point_set_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.BinaryMaskToNarrowBandPointSetFilter, itkTemplate.itkTemplate):
        filter_object = itk.BinaryMaskToNarrowBandPointSetFilter.values()[0]
    else:
        filter_object = itk.BinaryMaskToNarrowBandPointSetFilter

    binary_mask_to_narrow_band_point_set_filter.__doc__ = filter_object.__doc__
    binary_mask_to_narrow_band_point_set_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    binary_mask_to_narrow_band_point_set_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.BinaryMaskToNarrowBandPointSetFilter, itkTemplate.itkTemplate):
        binary_mask_to_narrow_band_point_set_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        binary_mask_to_narrow_band_point_set_filter.__doc__ += "\n"
        binary_mask_to_narrow_band_point_set_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        binary_mask_to_narrow_band_point_set_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



