# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKDeconvolutionPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkRichardsonLucyDeconvolutionImageFilterPython
else:
    import _itkRichardsonLucyDeconvolutionImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkRichardsonLucyDeconvolutionImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkRichardsonLucyDeconvolutionImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkIterativeDeconvolutionImageFilterPython
import itk.itkImagePython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkRGBPixelPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImageRegionPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkFFTConvolutionImageFilterPython
import itk.itkConvolutionImageFilterBasePython
import itk.itkImageBoundaryConditionPython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython

def itkRichardsonLucyDeconvolutionImageFilterID2ID2_New():
    return itkRichardsonLucyDeconvolutionImageFilterID2ID2.New()

class itkRichardsonLucyDeconvolutionImageFilterID2ID2(itk.itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterID2ID2):
    r"""


    Deconvolve an image using the Richardson-Lucy deconvolution algorithm.

    This filter implements the Richardson-Lucy deconvolution algorithm as
    defined in Bertero M and Boccacci P, "Introduction to Inverse
    Problems in Imaging", 1998. The algorithm assumes that the input
    image has been formed by a linear shift-invariant system with a known
    kernel.

    The Richardson-Lucy algorithm assumes that noise in the image follows
    a Poisson distribution and that the distribution for each pixel is
    independent of the other pixels.

    This code was adapted from the Insight Journal contribution:

    "Deconvolution: infrastructure and reference algorithms" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3207

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill

    See:   IterativeDeconvolutionImageFilter

    See:   LandweberDeconvolutionImageFilter

    See:   ProjectedLandweberDeconvolutionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterID2ID2_Clone)
    __swig_destroy__ = _itkRichardsonLucyDeconvolutionImageFilterPython.delete_itkRichardsonLucyDeconvolutionImageFilterID2ID2
    cast = _swig_new_static_method(_itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkRichardsonLucyDeconvolutionImageFilterID2ID2

        Create a new object of the class itkRichardsonLucyDeconvolutionImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRichardsonLucyDeconvolutionImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRichardsonLucyDeconvolutionImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRichardsonLucyDeconvolutionImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRichardsonLucyDeconvolutionImageFilterID2ID2 in _itkRichardsonLucyDeconvolutionImageFilterPython:
_itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterID2ID2_swigregister(itkRichardsonLucyDeconvolutionImageFilterID2ID2)
itkRichardsonLucyDeconvolutionImageFilterID2ID2___New_orig__ = _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterID2ID2___New_orig__
itkRichardsonLucyDeconvolutionImageFilterID2ID2_cast = _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterID2ID2_cast


def itkRichardsonLucyDeconvolutionImageFilterID3ID3_New():
    return itkRichardsonLucyDeconvolutionImageFilterID3ID3.New()

class itkRichardsonLucyDeconvolutionImageFilterID3ID3(itk.itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterID3ID3):
    r"""


    Deconvolve an image using the Richardson-Lucy deconvolution algorithm.

    This filter implements the Richardson-Lucy deconvolution algorithm as
    defined in Bertero M and Boccacci P, "Introduction to Inverse
    Problems in Imaging", 1998. The algorithm assumes that the input
    image has been formed by a linear shift-invariant system with a known
    kernel.

    The Richardson-Lucy algorithm assumes that noise in the image follows
    a Poisson distribution and that the distribution for each pixel is
    independent of the other pixels.

    This code was adapted from the Insight Journal contribution:

    "Deconvolution: infrastructure and reference algorithms" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3207

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill

    See:   IterativeDeconvolutionImageFilter

    See:   LandweberDeconvolutionImageFilter

    See:   ProjectedLandweberDeconvolutionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterID3ID3_Clone)
    __swig_destroy__ = _itkRichardsonLucyDeconvolutionImageFilterPython.delete_itkRichardsonLucyDeconvolutionImageFilterID3ID3
    cast = _swig_new_static_method(_itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkRichardsonLucyDeconvolutionImageFilterID3ID3

        Create a new object of the class itkRichardsonLucyDeconvolutionImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRichardsonLucyDeconvolutionImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRichardsonLucyDeconvolutionImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRichardsonLucyDeconvolutionImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRichardsonLucyDeconvolutionImageFilterID3ID3 in _itkRichardsonLucyDeconvolutionImageFilterPython:
_itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterID3ID3_swigregister(itkRichardsonLucyDeconvolutionImageFilterID3ID3)
itkRichardsonLucyDeconvolutionImageFilterID3ID3___New_orig__ = _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterID3ID3___New_orig__
itkRichardsonLucyDeconvolutionImageFilterID3ID3_cast = _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterID3ID3_cast


def itkRichardsonLucyDeconvolutionImageFilterIF2IF2_New():
    return itkRichardsonLucyDeconvolutionImageFilterIF2IF2.New()

class itkRichardsonLucyDeconvolutionImageFilterIF2IF2(itk.itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIF2IF2):
    r"""


    Deconvolve an image using the Richardson-Lucy deconvolution algorithm.

    This filter implements the Richardson-Lucy deconvolution algorithm as
    defined in Bertero M and Boccacci P, "Introduction to Inverse
    Problems in Imaging", 1998. The algorithm assumes that the input
    image has been formed by a linear shift-invariant system with a known
    kernel.

    The Richardson-Lucy algorithm assumes that noise in the image follows
    a Poisson distribution and that the distribution for each pixel is
    independent of the other pixels.

    This code was adapted from the Insight Journal contribution:

    "Deconvolution: infrastructure and reference algorithms" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3207

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill

    See:   IterativeDeconvolutionImageFilter

    See:   LandweberDeconvolutionImageFilter

    See:   ProjectedLandweberDeconvolutionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIF2IF2_Clone)
    __swig_destroy__ = _itkRichardsonLucyDeconvolutionImageFilterPython.delete_itkRichardsonLucyDeconvolutionImageFilterIF2IF2
    cast = _swig_new_static_method(_itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkRichardsonLucyDeconvolutionImageFilterIF2IF2

        Create a new object of the class itkRichardsonLucyDeconvolutionImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRichardsonLucyDeconvolutionImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRichardsonLucyDeconvolutionImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRichardsonLucyDeconvolutionImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRichardsonLucyDeconvolutionImageFilterIF2IF2 in _itkRichardsonLucyDeconvolutionImageFilterPython:
_itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIF2IF2_swigregister(itkRichardsonLucyDeconvolutionImageFilterIF2IF2)
itkRichardsonLucyDeconvolutionImageFilterIF2IF2___New_orig__ = _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIF2IF2___New_orig__
itkRichardsonLucyDeconvolutionImageFilterIF2IF2_cast = _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIF2IF2_cast


def itkRichardsonLucyDeconvolutionImageFilterIF3IF3_New():
    return itkRichardsonLucyDeconvolutionImageFilterIF3IF3.New()

class itkRichardsonLucyDeconvolutionImageFilterIF3IF3(itk.itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIF3IF3):
    r"""


    Deconvolve an image using the Richardson-Lucy deconvolution algorithm.

    This filter implements the Richardson-Lucy deconvolution algorithm as
    defined in Bertero M and Boccacci P, "Introduction to Inverse
    Problems in Imaging", 1998. The algorithm assumes that the input
    image has been formed by a linear shift-invariant system with a known
    kernel.

    The Richardson-Lucy algorithm assumes that noise in the image follows
    a Poisson distribution and that the distribution for each pixel is
    independent of the other pixels.

    This code was adapted from the Insight Journal contribution:

    "Deconvolution: infrastructure and reference algorithms" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3207

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill

    See:   IterativeDeconvolutionImageFilter

    See:   LandweberDeconvolutionImageFilter

    See:   ProjectedLandweberDeconvolutionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIF3IF3_Clone)
    __swig_destroy__ = _itkRichardsonLucyDeconvolutionImageFilterPython.delete_itkRichardsonLucyDeconvolutionImageFilterIF3IF3
    cast = _swig_new_static_method(_itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkRichardsonLucyDeconvolutionImageFilterIF3IF3

        Create a new object of the class itkRichardsonLucyDeconvolutionImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRichardsonLucyDeconvolutionImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRichardsonLucyDeconvolutionImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRichardsonLucyDeconvolutionImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRichardsonLucyDeconvolutionImageFilterIF3IF3 in _itkRichardsonLucyDeconvolutionImageFilterPython:
_itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIF3IF3_swigregister(itkRichardsonLucyDeconvolutionImageFilterIF3IF3)
itkRichardsonLucyDeconvolutionImageFilterIF3IF3___New_orig__ = _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIF3IF3___New_orig__
itkRichardsonLucyDeconvolutionImageFilterIF3IF3_cast = _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIF3IF3_cast


def itkRichardsonLucyDeconvolutionImageFilterISS2ISS2_New():
    return itkRichardsonLucyDeconvolutionImageFilterISS2ISS2.New()

class itkRichardsonLucyDeconvolutionImageFilterISS2ISS2(itk.itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterISS2ISS2):
    r"""


    Deconvolve an image using the Richardson-Lucy deconvolution algorithm.

    This filter implements the Richardson-Lucy deconvolution algorithm as
    defined in Bertero M and Boccacci P, "Introduction to Inverse
    Problems in Imaging", 1998. The algorithm assumes that the input
    image has been formed by a linear shift-invariant system with a known
    kernel.

    The Richardson-Lucy algorithm assumes that noise in the image follows
    a Poisson distribution and that the distribution for each pixel is
    independent of the other pixels.

    This code was adapted from the Insight Journal contribution:

    "Deconvolution: infrastructure and reference algorithms" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3207

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill

    See:   IterativeDeconvolutionImageFilter

    See:   LandweberDeconvolutionImageFilter

    See:   ProjectedLandweberDeconvolutionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterISS2ISS2_Clone)
    __swig_destroy__ = _itkRichardsonLucyDeconvolutionImageFilterPython.delete_itkRichardsonLucyDeconvolutionImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkRichardsonLucyDeconvolutionImageFilterISS2ISS2

        Create a new object of the class itkRichardsonLucyDeconvolutionImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRichardsonLucyDeconvolutionImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRichardsonLucyDeconvolutionImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRichardsonLucyDeconvolutionImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRichardsonLucyDeconvolutionImageFilterISS2ISS2 in _itkRichardsonLucyDeconvolutionImageFilterPython:
_itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterISS2ISS2_swigregister(itkRichardsonLucyDeconvolutionImageFilterISS2ISS2)
itkRichardsonLucyDeconvolutionImageFilterISS2ISS2___New_orig__ = _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterISS2ISS2___New_orig__
itkRichardsonLucyDeconvolutionImageFilterISS2ISS2_cast = _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterISS2ISS2_cast


def itkRichardsonLucyDeconvolutionImageFilterISS3ISS3_New():
    return itkRichardsonLucyDeconvolutionImageFilterISS3ISS3.New()

class itkRichardsonLucyDeconvolutionImageFilterISS3ISS3(itk.itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterISS3ISS3):
    r"""


    Deconvolve an image using the Richardson-Lucy deconvolution algorithm.

    This filter implements the Richardson-Lucy deconvolution algorithm as
    defined in Bertero M and Boccacci P, "Introduction to Inverse
    Problems in Imaging", 1998. The algorithm assumes that the input
    image has been formed by a linear shift-invariant system with a known
    kernel.

    The Richardson-Lucy algorithm assumes that noise in the image follows
    a Poisson distribution and that the distribution for each pixel is
    independent of the other pixels.

    This code was adapted from the Insight Journal contribution:

    "Deconvolution: infrastructure and reference algorithms" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3207

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill

    See:   IterativeDeconvolutionImageFilter

    See:   LandweberDeconvolutionImageFilter

    See:   ProjectedLandweberDeconvolutionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterISS3ISS3_Clone)
    __swig_destroy__ = _itkRichardsonLucyDeconvolutionImageFilterPython.delete_itkRichardsonLucyDeconvolutionImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkRichardsonLucyDeconvolutionImageFilterISS3ISS3

        Create a new object of the class itkRichardsonLucyDeconvolutionImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRichardsonLucyDeconvolutionImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRichardsonLucyDeconvolutionImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRichardsonLucyDeconvolutionImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRichardsonLucyDeconvolutionImageFilterISS3ISS3 in _itkRichardsonLucyDeconvolutionImageFilterPython:
_itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterISS3ISS3_swigregister(itkRichardsonLucyDeconvolutionImageFilterISS3ISS3)
itkRichardsonLucyDeconvolutionImageFilterISS3ISS3___New_orig__ = _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterISS3ISS3___New_orig__
itkRichardsonLucyDeconvolutionImageFilterISS3ISS3_cast = _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterISS3ISS3_cast


def itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2_New():
    return itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2.New()

class itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2(itk.itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUC2IUC2):
    r"""


    Deconvolve an image using the Richardson-Lucy deconvolution algorithm.

    This filter implements the Richardson-Lucy deconvolution algorithm as
    defined in Bertero M and Boccacci P, "Introduction to Inverse
    Problems in Imaging", 1998. The algorithm assumes that the input
    image has been formed by a linear shift-invariant system with a known
    kernel.

    The Richardson-Lucy algorithm assumes that noise in the image follows
    a Poisson distribution and that the distribution for each pixel is
    independent of the other pixels.

    This code was adapted from the Insight Journal contribution:

    "Deconvolution: infrastructure and reference algorithms" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3207

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill

    See:   IterativeDeconvolutionImageFilter

    See:   LandweberDeconvolutionImageFilter

    See:   ProjectedLandweberDeconvolutionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2_Clone)
    __swig_destroy__ = _itkRichardsonLucyDeconvolutionImageFilterPython.delete_itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2

        Create a new object of the class itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2 in _itkRichardsonLucyDeconvolutionImageFilterPython:
_itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2_swigregister(itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2)
itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2___New_orig__ = _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2___New_orig__
itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2_cast = _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2_cast


def itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3_New():
    return itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3.New()

class itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3(itk.itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUC3IUC3):
    r"""


    Deconvolve an image using the Richardson-Lucy deconvolution algorithm.

    This filter implements the Richardson-Lucy deconvolution algorithm as
    defined in Bertero M and Boccacci P, "Introduction to Inverse
    Problems in Imaging", 1998. The algorithm assumes that the input
    image has been formed by a linear shift-invariant system with a known
    kernel.

    The Richardson-Lucy algorithm assumes that noise in the image follows
    a Poisson distribution and that the distribution for each pixel is
    independent of the other pixels.

    This code was adapted from the Insight Journal contribution:

    "Deconvolution: infrastructure and reference algorithms" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3207

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill

    See:   IterativeDeconvolutionImageFilter

    See:   LandweberDeconvolutionImageFilter

    See:   ProjectedLandweberDeconvolutionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3_Clone)
    __swig_destroy__ = _itkRichardsonLucyDeconvolutionImageFilterPython.delete_itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3

        Create a new object of the class itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3 in _itkRichardsonLucyDeconvolutionImageFilterPython:
_itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3_swigregister(itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3)
itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3___New_orig__ = _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3___New_orig__
itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3_cast = _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3_cast


def itkRichardsonLucyDeconvolutionImageFilterIUS2IUS2_New():
    return itkRichardsonLucyDeconvolutionImageFilterIUS2IUS2.New()

class itkRichardsonLucyDeconvolutionImageFilterIUS2IUS2(itk.itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUS2IUS2):
    r"""


    Deconvolve an image using the Richardson-Lucy deconvolution algorithm.

    This filter implements the Richardson-Lucy deconvolution algorithm as
    defined in Bertero M and Boccacci P, "Introduction to Inverse
    Problems in Imaging", 1998. The algorithm assumes that the input
    image has been formed by a linear shift-invariant system with a known
    kernel.

    The Richardson-Lucy algorithm assumes that noise in the image follows
    a Poisson distribution and that the distribution for each pixel is
    independent of the other pixels.

    This code was adapted from the Insight Journal contribution:

    "Deconvolution: infrastructure and reference algorithms" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3207

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill

    See:   IterativeDeconvolutionImageFilter

    See:   LandweberDeconvolutionImageFilter

    See:   ProjectedLandweberDeconvolutionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIUS2IUS2_Clone)
    __swig_destroy__ = _itkRichardsonLucyDeconvolutionImageFilterPython.delete_itkRichardsonLucyDeconvolutionImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkRichardsonLucyDeconvolutionImageFilterIUS2IUS2

        Create a new object of the class itkRichardsonLucyDeconvolutionImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRichardsonLucyDeconvolutionImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRichardsonLucyDeconvolutionImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRichardsonLucyDeconvolutionImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRichardsonLucyDeconvolutionImageFilterIUS2IUS2 in _itkRichardsonLucyDeconvolutionImageFilterPython:
_itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIUS2IUS2_swigregister(itkRichardsonLucyDeconvolutionImageFilterIUS2IUS2)
itkRichardsonLucyDeconvolutionImageFilterIUS2IUS2___New_orig__ = _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIUS2IUS2___New_orig__
itkRichardsonLucyDeconvolutionImageFilterIUS2IUS2_cast = _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIUS2IUS2_cast


def itkRichardsonLucyDeconvolutionImageFilterIUS3IUS3_New():
    return itkRichardsonLucyDeconvolutionImageFilterIUS3IUS3.New()

class itkRichardsonLucyDeconvolutionImageFilterIUS3IUS3(itk.itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUS3IUS3):
    r"""


    Deconvolve an image using the Richardson-Lucy deconvolution algorithm.

    This filter implements the Richardson-Lucy deconvolution algorithm as
    defined in Bertero M and Boccacci P, "Introduction to Inverse
    Problems in Imaging", 1998. The algorithm assumes that the input
    image has been formed by a linear shift-invariant system with a known
    kernel.

    The Richardson-Lucy algorithm assumes that noise in the image follows
    a Poisson distribution and that the distribution for each pixel is
    independent of the other pixels.

    This code was adapted from the Insight Journal contribution:

    "Deconvolution: infrastructure and reference algorithms" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3207

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill

    See:   IterativeDeconvolutionImageFilter

    See:   LandweberDeconvolutionImageFilter

    See:   ProjectedLandweberDeconvolutionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIUS3IUS3_Clone)
    __swig_destroy__ = _itkRichardsonLucyDeconvolutionImageFilterPython.delete_itkRichardsonLucyDeconvolutionImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkRichardsonLucyDeconvolutionImageFilterIUS3IUS3

        Create a new object of the class itkRichardsonLucyDeconvolutionImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRichardsonLucyDeconvolutionImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRichardsonLucyDeconvolutionImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRichardsonLucyDeconvolutionImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRichardsonLucyDeconvolutionImageFilterIUS3IUS3 in _itkRichardsonLucyDeconvolutionImageFilterPython:
_itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIUS3IUS3_swigregister(itkRichardsonLucyDeconvolutionImageFilterIUS3IUS3)
itkRichardsonLucyDeconvolutionImageFilterIUS3IUS3___New_orig__ = _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIUS3IUS3___New_orig__
itkRichardsonLucyDeconvolutionImageFilterIUS3IUS3_cast = _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def richardson_lucy_deconvolution_image_filter(*args, **kwargs):
    """Procedural interface for RichardsonLucyDeconvolutionImageFilter"""
    import itk
    instance = itk.RichardsonLucyDeconvolutionImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def richardson_lucy_deconvolution_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.RichardsonLucyDeconvolutionImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.RichardsonLucyDeconvolutionImageFilter.values()[0]
    else:
        filter_object = itk.RichardsonLucyDeconvolutionImageFilter

    richardson_lucy_deconvolution_image_filter.__doc__ = filter_object.__doc__
    richardson_lucy_deconvolution_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    richardson_lucy_deconvolution_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.RichardsonLucyDeconvolutionImageFilter, itkTemplate.itkTemplate):
        richardson_lucy_deconvolution_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        richardson_lucy_deconvolution_image_filter.__doc__ += "\n"
        richardson_lucy_deconvolution_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        richardson_lucy_deconvolution_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



