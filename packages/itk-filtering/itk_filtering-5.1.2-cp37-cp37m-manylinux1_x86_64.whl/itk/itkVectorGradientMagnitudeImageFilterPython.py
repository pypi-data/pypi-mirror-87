# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageGradientPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkVectorGradientMagnitudeImageFilterPython
else:
    import _itkVectorGradientMagnitudeImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkVectorGradientMagnitudeImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkVectorGradientMagnitudeImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkFixedArrayPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.stdcomplexPython
import itk.itkRGBAPixelPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.itkCovariantVectorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageToImageFilterBPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython

def itkVectorGradientMagnitudeImageFilterIVF22D_New():
    return itkVectorGradientMagnitudeImageFilterIVF22D.New()

class itkVectorGradientMagnitudeImageFilterIVF22D(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF22ID2):
    r"""


    Computes a scalar, gradient magnitude image from a multiple channel
    (pixels are vectors) input.

    Overview This filter has two calculation modes. The first (default)
    mode calculates gradient magnitude as the difference between the
    largest two singular values in a singular value decomposition (SVD) of
    the partial derivatives [1]. The gradient is then based on the
    direction of maximal change, and is a characterization of how
    "elongated" the point-spread of the analysis is found to be.  The
    second, more heuristic, calculation mode finds gradient magnitude as
    the square-root of the sum of the * individual weighted vector
    component derivative sums squared. That is, * $ \\mathbf{magnitude}
    = \\left( \\sum_{i=0}^n \\sum_{j=0}^m \\frac{\\delta *
    \\phi_j}{\\delta \\mathbf{x}_{i}}^2 \\right)^{\\frac{1}{2}}
    $, where $\\phi_j$ * is the $j^{\\mathbf{th}}$ channel of vector
    image $\\phi$ of dimension $n$. * Weighting terms are applied to
    each vector component.

    The second mode is computationally much faster than the first and has
    the advantage that it is automatically multi-threaded (some vnl
    functions used in the first mode are not thread-safe). The first mode,
    however, tends to give intuitively better results with less (or no)
    parameter tuning.

    Template Parameters (Input and Output) This filter has one required
    template parameter which defines the input image type. The pixel type
    of the input image is assumed to be a vector (e.g., itk::Vector,
    itk::FixedArray). The scalar type of the vector components must be
    castable to floating point. Instantiating with an image of RGBPixel is
    not allowed but the image can be converted/adapted to Vector for
    processing.  The second template parameter, TRealType, can be
    optionally specified to define the scalar numerical type used in
    calculations. This is the component type of the output image. The
    default type of TRealType is float. For extra precision, you may
    safely change this parameter to double.

    The third template parameter is the output image type. The third
    parameter will be automatically constructed from the first and second
    parameters, so it is not necessary (or advisable) to set this
    parameter explicitly. Given an M-channel input image with
    dimensionality N, and a numerical type specified as TRealType, the
    output image will be of type itk::Image<TRealType, N>.

    Filter Parameters The methods Set/GetUsePrincipleComponents and
    SetUsePrincipleComponentsOn/Off determine controls the calculation
    mode that is used.  The method SetUseImageSpacingOn will cause
    derivatives in the image to be scaled (inversely) with the pixel size
    of the input image, effectively taking derivatives in world
    coordinates (versus isotropic image space). SetUseImageSpacingOff
    turns this functionality off. Default is UseImageSpacingOn. The
    parameter UseImageSpacing can be set directly with the method
    SetUseImageSpacing(bool).

    Weights can be applied to the derivatives directly using the
    SetDerivativeWeights method. Note that if UseImageSpacing is set to
    TRUE (ON), then these weights will be overridden by weights derived
    from the image spacing when the filter is updated. The argument to
    this method is a C array of TRealValue type.

    Weights can be applied to each vector component of the image when the
    component derivative values are summed during computation. Specify
    these weights using the SetComponentWeights method. The argument to
    this method is a C array of TRealValue type.

    Constraints The filter requires an image with at least two dimensions
    and a vector length of at least 2. The theory supports extension to
    scalar images, but the implementation of the itk vector classes do not
    The template parameter TRealType must be floating point (float or
    double) or a user-defined "real" numerical type with arithmetic
    operations defined sufficient to compute derivatives.

    Performance This filter will automatically multithread if run with
    SetUsePrincipleComponents=Off or on 3D data in
    UsePrincipleComponents=On mode. Unfortunately the ND eigen solver used
    is not thread safe (a special 3D solver is), so it cannot multithread
    for data other than 3D in UsePrincipleComponents=On mode. References
    [1] G. Sapiro and D. Ringach, "Anisotropic Diffusion of Multivalued
    Images  with Application to Color Filtering," IEEE Transactions on
    Image Processing, Vol 5, No. 11 pp. 1582-1586, 1996

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_GenerateInputRequestedRegion)
    SetUseImageSpacingOn = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_SetUseImageSpacingOn)
    SetUseImageSpacingOff = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_SetUseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_GetUseImageSpacing)
    SetDerivativeWeights = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_SetDerivativeWeights)
    GetDerivativeWeights = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_GetDerivativeWeights)
    SetComponentWeights = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_SetComponentWeights)
    GetComponentWeights = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_GetComponentWeights)
    SetUsePrincipleComponents = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_SetUsePrincipleComponents)
    GetUsePrincipleComponents = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_GetUsePrincipleComponents)
    SetUsePrincipleComponentsOn = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_SetUsePrincipleComponentsOn)
    SetUsePrincipleComponentsOff = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_SetUsePrincipleComponentsOff)
    CubicSolver = _swig_new_static_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_CubicSolver)
    InputHasNumericTraitsCheck = _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_InputHasNumericTraitsCheck
    
    RealTypeHasNumericTraitsCheck = _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_RealTypeHasNumericTraitsCheck
    
    __swig_destroy__ = _itkVectorGradientMagnitudeImageFilterPython.delete_itkVectorGradientMagnitudeImageFilterIVF22D
    cast = _swig_new_static_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_cast)

    def New(*args, **kargs):
        """New() -> itkVectorGradientMagnitudeImageFilterIVF22D

        Create a new object of the class itkVectorGradientMagnitudeImageFilterIVF22D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorGradientMagnitudeImageFilterIVF22D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorGradientMagnitudeImageFilterIVF22D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorGradientMagnitudeImageFilterIVF22D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorGradientMagnitudeImageFilterIVF22D in _itkVectorGradientMagnitudeImageFilterPython:
_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_swigregister(itkVectorGradientMagnitudeImageFilterIVF22D)
itkVectorGradientMagnitudeImageFilterIVF22D___New_orig__ = _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D___New_orig__
itkVectorGradientMagnitudeImageFilterIVF22D_CubicSolver = _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_CubicSolver
itkVectorGradientMagnitudeImageFilterIVF22D_cast = _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_cast


def itkVectorGradientMagnitudeImageFilterIVF22F_New():
    return itkVectorGradientMagnitudeImageFilterIVF22F.New()

class itkVectorGradientMagnitudeImageFilterIVF22F(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF22IF2):
    r"""


    Computes a scalar, gradient magnitude image from a multiple channel
    (pixels are vectors) input.

    Overview This filter has two calculation modes. The first (default)
    mode calculates gradient magnitude as the difference between the
    largest two singular values in a singular value decomposition (SVD) of
    the partial derivatives [1]. The gradient is then based on the
    direction of maximal change, and is a characterization of how
    "elongated" the point-spread of the analysis is found to be.  The
    second, more heuristic, calculation mode finds gradient magnitude as
    the square-root of the sum of the * individual weighted vector
    component derivative sums squared. That is, * $ \\mathbf{magnitude}
    = \\left( \\sum_{i=0}^n \\sum_{j=0}^m \\frac{\\delta *
    \\phi_j}{\\delta \\mathbf{x}_{i}}^2 \\right)^{\\frac{1}{2}}
    $, where $\\phi_j$ * is the $j^{\\mathbf{th}}$ channel of vector
    image $\\phi$ of dimension $n$. * Weighting terms are applied to
    each vector component.

    The second mode is computationally much faster than the first and has
    the advantage that it is automatically multi-threaded (some vnl
    functions used in the first mode are not thread-safe). The first mode,
    however, tends to give intuitively better results with less (or no)
    parameter tuning.

    Template Parameters (Input and Output) This filter has one required
    template parameter which defines the input image type. The pixel type
    of the input image is assumed to be a vector (e.g., itk::Vector,
    itk::FixedArray). The scalar type of the vector components must be
    castable to floating point. Instantiating with an image of RGBPixel is
    not allowed but the image can be converted/adapted to Vector for
    processing.  The second template parameter, TRealType, can be
    optionally specified to define the scalar numerical type used in
    calculations. This is the component type of the output image. The
    default type of TRealType is float. For extra precision, you may
    safely change this parameter to double.

    The third template parameter is the output image type. The third
    parameter will be automatically constructed from the first and second
    parameters, so it is not necessary (or advisable) to set this
    parameter explicitly. Given an M-channel input image with
    dimensionality N, and a numerical type specified as TRealType, the
    output image will be of type itk::Image<TRealType, N>.

    Filter Parameters The methods Set/GetUsePrincipleComponents and
    SetUsePrincipleComponentsOn/Off determine controls the calculation
    mode that is used.  The method SetUseImageSpacingOn will cause
    derivatives in the image to be scaled (inversely) with the pixel size
    of the input image, effectively taking derivatives in world
    coordinates (versus isotropic image space). SetUseImageSpacingOff
    turns this functionality off. Default is UseImageSpacingOn. The
    parameter UseImageSpacing can be set directly with the method
    SetUseImageSpacing(bool).

    Weights can be applied to the derivatives directly using the
    SetDerivativeWeights method. Note that if UseImageSpacing is set to
    TRUE (ON), then these weights will be overridden by weights derived
    from the image spacing when the filter is updated. The argument to
    this method is a C array of TRealValue type.

    Weights can be applied to each vector component of the image when the
    component derivative values are summed during computation. Specify
    these weights using the SetComponentWeights method. The argument to
    this method is a C array of TRealValue type.

    Constraints The filter requires an image with at least two dimensions
    and a vector length of at least 2. The theory supports extension to
    scalar images, but the implementation of the itk vector classes do not
    The template parameter TRealType must be floating point (float or
    double) or a user-defined "real" numerical type with arithmetic
    operations defined sufficient to compute derivatives.

    Performance This filter will automatically multithread if run with
    SetUsePrincipleComponents=Off or on 3D data in
    UsePrincipleComponents=On mode. Unfortunately the ND eigen solver used
    is not thread safe (a special 3D solver is), so it cannot multithread
    for data other than 3D in UsePrincipleComponents=On mode. References
    [1] G. Sapiro and D. Ringach, "Anisotropic Diffusion of Multivalued
    Images  with Application to Color Filtering," IEEE Transactions on
    Image Processing, Vol 5, No. 11 pp. 1582-1586, 1996

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_GenerateInputRequestedRegion)
    SetUseImageSpacingOn = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_SetUseImageSpacingOn)
    SetUseImageSpacingOff = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_SetUseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_GetUseImageSpacing)
    SetDerivativeWeights = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_SetDerivativeWeights)
    GetDerivativeWeights = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_GetDerivativeWeights)
    SetComponentWeights = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_SetComponentWeights)
    GetComponentWeights = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_GetComponentWeights)
    SetUsePrincipleComponents = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_SetUsePrincipleComponents)
    GetUsePrincipleComponents = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_GetUsePrincipleComponents)
    SetUsePrincipleComponentsOn = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_SetUsePrincipleComponentsOn)
    SetUsePrincipleComponentsOff = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_SetUsePrincipleComponentsOff)
    CubicSolver = _swig_new_static_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_CubicSolver)
    InputHasNumericTraitsCheck = _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_InputHasNumericTraitsCheck
    
    RealTypeHasNumericTraitsCheck = _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_RealTypeHasNumericTraitsCheck
    
    __swig_destroy__ = _itkVectorGradientMagnitudeImageFilterPython.delete_itkVectorGradientMagnitudeImageFilterIVF22F
    cast = _swig_new_static_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_cast)

    def New(*args, **kargs):
        """New() -> itkVectorGradientMagnitudeImageFilterIVF22F

        Create a new object of the class itkVectorGradientMagnitudeImageFilterIVF22F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorGradientMagnitudeImageFilterIVF22F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorGradientMagnitudeImageFilterIVF22F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorGradientMagnitudeImageFilterIVF22F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorGradientMagnitudeImageFilterIVF22F in _itkVectorGradientMagnitudeImageFilterPython:
_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_swigregister(itkVectorGradientMagnitudeImageFilterIVF22F)
itkVectorGradientMagnitudeImageFilterIVF22F___New_orig__ = _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F___New_orig__
itkVectorGradientMagnitudeImageFilterIVF22F_CubicSolver = _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_CubicSolver
itkVectorGradientMagnitudeImageFilterIVF22F_cast = _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_cast


def itkVectorGradientMagnitudeImageFilterIVF33D_New():
    return itkVectorGradientMagnitudeImageFilterIVF33D.New()

class itkVectorGradientMagnitudeImageFilterIVF33D(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF33ID3):
    r"""


    Computes a scalar, gradient magnitude image from a multiple channel
    (pixels are vectors) input.

    Overview This filter has two calculation modes. The first (default)
    mode calculates gradient magnitude as the difference between the
    largest two singular values in a singular value decomposition (SVD) of
    the partial derivatives [1]. The gradient is then based on the
    direction of maximal change, and is a characterization of how
    "elongated" the point-spread of the analysis is found to be.  The
    second, more heuristic, calculation mode finds gradient magnitude as
    the square-root of the sum of the * individual weighted vector
    component derivative sums squared. That is, * $ \\mathbf{magnitude}
    = \\left( \\sum_{i=0}^n \\sum_{j=0}^m \\frac{\\delta *
    \\phi_j}{\\delta \\mathbf{x}_{i}}^2 \\right)^{\\frac{1}{2}}
    $, where $\\phi_j$ * is the $j^{\\mathbf{th}}$ channel of vector
    image $\\phi$ of dimension $n$. * Weighting terms are applied to
    each vector component.

    The second mode is computationally much faster than the first and has
    the advantage that it is automatically multi-threaded (some vnl
    functions used in the first mode are not thread-safe). The first mode,
    however, tends to give intuitively better results with less (or no)
    parameter tuning.

    Template Parameters (Input and Output) This filter has one required
    template parameter which defines the input image type. The pixel type
    of the input image is assumed to be a vector (e.g., itk::Vector,
    itk::FixedArray). The scalar type of the vector components must be
    castable to floating point. Instantiating with an image of RGBPixel is
    not allowed but the image can be converted/adapted to Vector for
    processing.  The second template parameter, TRealType, can be
    optionally specified to define the scalar numerical type used in
    calculations. This is the component type of the output image. The
    default type of TRealType is float. For extra precision, you may
    safely change this parameter to double.

    The third template parameter is the output image type. The third
    parameter will be automatically constructed from the first and second
    parameters, so it is not necessary (or advisable) to set this
    parameter explicitly. Given an M-channel input image with
    dimensionality N, and a numerical type specified as TRealType, the
    output image will be of type itk::Image<TRealType, N>.

    Filter Parameters The methods Set/GetUsePrincipleComponents and
    SetUsePrincipleComponentsOn/Off determine controls the calculation
    mode that is used.  The method SetUseImageSpacingOn will cause
    derivatives in the image to be scaled (inversely) with the pixel size
    of the input image, effectively taking derivatives in world
    coordinates (versus isotropic image space). SetUseImageSpacingOff
    turns this functionality off. Default is UseImageSpacingOn. The
    parameter UseImageSpacing can be set directly with the method
    SetUseImageSpacing(bool).

    Weights can be applied to the derivatives directly using the
    SetDerivativeWeights method. Note that if UseImageSpacing is set to
    TRUE (ON), then these weights will be overridden by weights derived
    from the image spacing when the filter is updated. The argument to
    this method is a C array of TRealValue type.

    Weights can be applied to each vector component of the image when the
    component derivative values are summed during computation. Specify
    these weights using the SetComponentWeights method. The argument to
    this method is a C array of TRealValue type.

    Constraints The filter requires an image with at least two dimensions
    and a vector length of at least 2. The theory supports extension to
    scalar images, but the implementation of the itk vector classes do not
    The template parameter TRealType must be floating point (float or
    double) or a user-defined "real" numerical type with arithmetic
    operations defined sufficient to compute derivatives.

    Performance This filter will automatically multithread if run with
    SetUsePrincipleComponents=Off or on 3D data in
    UsePrincipleComponents=On mode. Unfortunately the ND eigen solver used
    is not thread safe (a special 3D solver is), so it cannot multithread
    for data other than 3D in UsePrincipleComponents=On mode. References
    [1] G. Sapiro and D. Ringach, "Anisotropic Diffusion of Multivalued
    Images  with Application to Color Filtering," IEEE Transactions on
    Image Processing, Vol 5, No. 11 pp. 1582-1586, 1996

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_GenerateInputRequestedRegion)
    SetUseImageSpacingOn = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_SetUseImageSpacingOn)
    SetUseImageSpacingOff = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_SetUseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_GetUseImageSpacing)
    SetDerivativeWeights = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_SetDerivativeWeights)
    GetDerivativeWeights = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_GetDerivativeWeights)
    SetComponentWeights = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_SetComponentWeights)
    GetComponentWeights = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_GetComponentWeights)
    SetUsePrincipleComponents = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_SetUsePrincipleComponents)
    GetUsePrincipleComponents = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_GetUsePrincipleComponents)
    SetUsePrincipleComponentsOn = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_SetUsePrincipleComponentsOn)
    SetUsePrincipleComponentsOff = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_SetUsePrincipleComponentsOff)
    CubicSolver = _swig_new_static_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_CubicSolver)
    InputHasNumericTraitsCheck = _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_InputHasNumericTraitsCheck
    
    RealTypeHasNumericTraitsCheck = _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_RealTypeHasNumericTraitsCheck
    
    __swig_destroy__ = _itkVectorGradientMagnitudeImageFilterPython.delete_itkVectorGradientMagnitudeImageFilterIVF33D
    cast = _swig_new_static_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_cast)

    def New(*args, **kargs):
        """New() -> itkVectorGradientMagnitudeImageFilterIVF33D

        Create a new object of the class itkVectorGradientMagnitudeImageFilterIVF33D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorGradientMagnitudeImageFilterIVF33D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorGradientMagnitudeImageFilterIVF33D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorGradientMagnitudeImageFilterIVF33D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorGradientMagnitudeImageFilterIVF33D in _itkVectorGradientMagnitudeImageFilterPython:
_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_swigregister(itkVectorGradientMagnitudeImageFilterIVF33D)
itkVectorGradientMagnitudeImageFilterIVF33D___New_orig__ = _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D___New_orig__
itkVectorGradientMagnitudeImageFilterIVF33D_CubicSolver = _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_CubicSolver
itkVectorGradientMagnitudeImageFilterIVF33D_cast = _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_cast


def itkVectorGradientMagnitudeImageFilterIVF33F_New():
    return itkVectorGradientMagnitudeImageFilterIVF33F.New()

class itkVectorGradientMagnitudeImageFilterIVF33F(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF33IF3):
    r"""


    Computes a scalar, gradient magnitude image from a multiple channel
    (pixels are vectors) input.

    Overview This filter has two calculation modes. The first (default)
    mode calculates gradient magnitude as the difference between the
    largest two singular values in a singular value decomposition (SVD) of
    the partial derivatives [1]. The gradient is then based on the
    direction of maximal change, and is a characterization of how
    "elongated" the point-spread of the analysis is found to be.  The
    second, more heuristic, calculation mode finds gradient magnitude as
    the square-root of the sum of the * individual weighted vector
    component derivative sums squared. That is, * $ \\mathbf{magnitude}
    = \\left( \\sum_{i=0}^n \\sum_{j=0}^m \\frac{\\delta *
    \\phi_j}{\\delta \\mathbf{x}_{i}}^2 \\right)^{\\frac{1}{2}}
    $, where $\\phi_j$ * is the $j^{\\mathbf{th}}$ channel of vector
    image $\\phi$ of dimension $n$. * Weighting terms are applied to
    each vector component.

    The second mode is computationally much faster than the first and has
    the advantage that it is automatically multi-threaded (some vnl
    functions used in the first mode are not thread-safe). The first mode,
    however, tends to give intuitively better results with less (or no)
    parameter tuning.

    Template Parameters (Input and Output) This filter has one required
    template parameter which defines the input image type. The pixel type
    of the input image is assumed to be a vector (e.g., itk::Vector,
    itk::FixedArray). The scalar type of the vector components must be
    castable to floating point. Instantiating with an image of RGBPixel is
    not allowed but the image can be converted/adapted to Vector for
    processing.  The second template parameter, TRealType, can be
    optionally specified to define the scalar numerical type used in
    calculations. This is the component type of the output image. The
    default type of TRealType is float. For extra precision, you may
    safely change this parameter to double.

    The third template parameter is the output image type. The third
    parameter will be automatically constructed from the first and second
    parameters, so it is not necessary (or advisable) to set this
    parameter explicitly. Given an M-channel input image with
    dimensionality N, and a numerical type specified as TRealType, the
    output image will be of type itk::Image<TRealType, N>.

    Filter Parameters The methods Set/GetUsePrincipleComponents and
    SetUsePrincipleComponentsOn/Off determine controls the calculation
    mode that is used.  The method SetUseImageSpacingOn will cause
    derivatives in the image to be scaled (inversely) with the pixel size
    of the input image, effectively taking derivatives in world
    coordinates (versus isotropic image space). SetUseImageSpacingOff
    turns this functionality off. Default is UseImageSpacingOn. The
    parameter UseImageSpacing can be set directly with the method
    SetUseImageSpacing(bool).

    Weights can be applied to the derivatives directly using the
    SetDerivativeWeights method. Note that if UseImageSpacing is set to
    TRUE (ON), then these weights will be overridden by weights derived
    from the image spacing when the filter is updated. The argument to
    this method is a C array of TRealValue type.

    Weights can be applied to each vector component of the image when the
    component derivative values are summed during computation. Specify
    these weights using the SetComponentWeights method. The argument to
    this method is a C array of TRealValue type.

    Constraints The filter requires an image with at least two dimensions
    and a vector length of at least 2. The theory supports extension to
    scalar images, but the implementation of the itk vector classes do not
    The template parameter TRealType must be floating point (float or
    double) or a user-defined "real" numerical type with arithmetic
    operations defined sufficient to compute derivatives.

    Performance This filter will automatically multithread if run with
    SetUsePrincipleComponents=Off or on 3D data in
    UsePrincipleComponents=On mode. Unfortunately the ND eigen solver used
    is not thread safe (a special 3D solver is), so it cannot multithread
    for data other than 3D in UsePrincipleComponents=On mode. References
    [1] G. Sapiro and D. Ringach, "Anisotropic Diffusion of Multivalued
    Images  with Application to Color Filtering," IEEE Transactions on
    Image Processing, Vol 5, No. 11 pp. 1582-1586, 1996

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_GenerateInputRequestedRegion)
    SetUseImageSpacingOn = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_SetUseImageSpacingOn)
    SetUseImageSpacingOff = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_SetUseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_GetUseImageSpacing)
    SetDerivativeWeights = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_SetDerivativeWeights)
    GetDerivativeWeights = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_GetDerivativeWeights)
    SetComponentWeights = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_SetComponentWeights)
    GetComponentWeights = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_GetComponentWeights)
    SetUsePrincipleComponents = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_SetUsePrincipleComponents)
    GetUsePrincipleComponents = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_GetUsePrincipleComponents)
    SetUsePrincipleComponentsOn = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_SetUsePrincipleComponentsOn)
    SetUsePrincipleComponentsOff = _swig_new_instance_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_SetUsePrincipleComponentsOff)
    CubicSolver = _swig_new_static_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_CubicSolver)
    InputHasNumericTraitsCheck = _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_InputHasNumericTraitsCheck
    
    RealTypeHasNumericTraitsCheck = _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_RealTypeHasNumericTraitsCheck
    
    __swig_destroy__ = _itkVectorGradientMagnitudeImageFilterPython.delete_itkVectorGradientMagnitudeImageFilterIVF33F
    cast = _swig_new_static_method(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_cast)

    def New(*args, **kargs):
        """New() -> itkVectorGradientMagnitudeImageFilterIVF33F

        Create a new object of the class itkVectorGradientMagnitudeImageFilterIVF33F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorGradientMagnitudeImageFilterIVF33F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorGradientMagnitudeImageFilterIVF33F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorGradientMagnitudeImageFilterIVF33F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorGradientMagnitudeImageFilterIVF33F in _itkVectorGradientMagnitudeImageFilterPython:
_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_swigregister(itkVectorGradientMagnitudeImageFilterIVF33F)
itkVectorGradientMagnitudeImageFilterIVF33F___New_orig__ = _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F___New_orig__
itkVectorGradientMagnitudeImageFilterIVF33F_CubicSolver = _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_CubicSolver
itkVectorGradientMagnitudeImageFilterIVF33F_cast = _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def vector_gradient_magnitude_image_filter(*args, **kwargs):
    """Procedural interface for VectorGradientMagnitudeImageFilter"""
    import itk
    instance = itk.VectorGradientMagnitudeImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def vector_gradient_magnitude_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.VectorGradientMagnitudeImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.VectorGradientMagnitudeImageFilter.values()[0]
    else:
        filter_object = itk.VectorGradientMagnitudeImageFilter

    vector_gradient_magnitude_image_filter.__doc__ = filter_object.__doc__
    vector_gradient_magnitude_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    vector_gradient_magnitude_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.VectorGradientMagnitudeImageFilter, itkTemplate.itkTemplate):
        vector_gradient_magnitude_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        vector_gradient_magnitude_image_filter.__doc__ += "\n"
        vector_gradient_magnitude_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        vector_gradient_magnitude_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



