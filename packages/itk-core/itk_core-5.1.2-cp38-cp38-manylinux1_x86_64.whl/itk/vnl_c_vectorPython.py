# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _vnl_c_vectorPython
else:
    import _vnl_c_vectorPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _vnl_c_vectorPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _vnl_c_vectorPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.stdcomplexPython
import itk.pyBasePython
class vnl_c_vectorCF(object):
    r"""Proxy of C++ vnl_c_vectorCF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sum = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorCF_sum)
    squared_magnitude = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorCF_squared_magnitude)
    normalize = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorCF_normalize)
    copy = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorCF_copy)
    scale = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorCF_scale)
    add = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorCF_add)
    subtract = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorCF_subtract)
    multiply = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorCF_multiply)
    divide = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorCF_divide)
    negate = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorCF_negate)
    invert = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorCF_invert)
    saxpy = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorCF_saxpy)
    fill = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorCF_fill)
    reverse = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorCF_reverse)
    dot_product = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorCF_dot_product)
    inner_product = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorCF_inner_product)
    conjugate = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorCF_conjugate)
    max_value = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorCF_max_value)
    min_value = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorCF_min_value)
    arg_max = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorCF_arg_max)
    arg_min = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorCF_arg_min)
    mean = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorCF_mean)
    std = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorCF_std)
    sum_sq_diff_means = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorCF_sum_sq_diff_means)
    one_norm = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorCF_one_norm)
    two_norm = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorCF_two_norm)
    inf_norm = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorCF_inf_norm)
    two_nrm2 = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorCF_two_nrm2)
    rms_norm = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorCF_rms_norm)
    euclid_dist_sq = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorCF_euclid_dist_sq)
    allocate_Tptr = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorCF_allocate_Tptr)
    allocate_T = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorCF_allocate_T)
    deallocate = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorCF_deallocate)

    def __init__(self, *args):
        r"""
        __init__(vnl_c_vectorCF self) -> vnl_c_vectorCF
        __init__(vnl_c_vectorCF self, vnl_c_vectorCF arg0) -> vnl_c_vectorCF
        """
        _vnl_c_vectorPython.vnl_c_vectorCF_swiginit(self, _vnl_c_vectorPython.new_vnl_c_vectorCF(*args))
    __swig_destroy__ = _vnl_c_vectorPython.delete_vnl_c_vectorCF

# Register vnl_c_vectorCF in _vnl_c_vectorPython:
_vnl_c_vectorPython.vnl_c_vectorCF_swigregister(vnl_c_vectorCF)
vnl_c_vectorCF_sum = _vnl_c_vectorPython.vnl_c_vectorCF_sum
vnl_c_vectorCF_squared_magnitude = _vnl_c_vectorPython.vnl_c_vectorCF_squared_magnitude
vnl_c_vectorCF_normalize = _vnl_c_vectorPython.vnl_c_vectorCF_normalize
vnl_c_vectorCF_copy = _vnl_c_vectorPython.vnl_c_vectorCF_copy
vnl_c_vectorCF_scale = _vnl_c_vectorPython.vnl_c_vectorCF_scale
vnl_c_vectorCF_add = _vnl_c_vectorPython.vnl_c_vectorCF_add
vnl_c_vectorCF_subtract = _vnl_c_vectorPython.vnl_c_vectorCF_subtract
vnl_c_vectorCF_multiply = _vnl_c_vectorPython.vnl_c_vectorCF_multiply
vnl_c_vectorCF_divide = _vnl_c_vectorPython.vnl_c_vectorCF_divide
vnl_c_vectorCF_negate = _vnl_c_vectorPython.vnl_c_vectorCF_negate
vnl_c_vectorCF_invert = _vnl_c_vectorPython.vnl_c_vectorCF_invert
vnl_c_vectorCF_saxpy = _vnl_c_vectorPython.vnl_c_vectorCF_saxpy
vnl_c_vectorCF_fill = _vnl_c_vectorPython.vnl_c_vectorCF_fill
vnl_c_vectorCF_reverse = _vnl_c_vectorPython.vnl_c_vectorCF_reverse
vnl_c_vectorCF_dot_product = _vnl_c_vectorPython.vnl_c_vectorCF_dot_product
vnl_c_vectorCF_inner_product = _vnl_c_vectorPython.vnl_c_vectorCF_inner_product
vnl_c_vectorCF_conjugate = _vnl_c_vectorPython.vnl_c_vectorCF_conjugate
vnl_c_vectorCF_max_value = _vnl_c_vectorPython.vnl_c_vectorCF_max_value
vnl_c_vectorCF_min_value = _vnl_c_vectorPython.vnl_c_vectorCF_min_value
vnl_c_vectorCF_arg_max = _vnl_c_vectorPython.vnl_c_vectorCF_arg_max
vnl_c_vectorCF_arg_min = _vnl_c_vectorPython.vnl_c_vectorCF_arg_min
vnl_c_vectorCF_mean = _vnl_c_vectorPython.vnl_c_vectorCF_mean
vnl_c_vectorCF_std = _vnl_c_vectorPython.vnl_c_vectorCF_std
vnl_c_vectorCF_sum_sq_diff_means = _vnl_c_vectorPython.vnl_c_vectorCF_sum_sq_diff_means
vnl_c_vectorCF_one_norm = _vnl_c_vectorPython.vnl_c_vectorCF_one_norm
vnl_c_vectorCF_two_norm = _vnl_c_vectorPython.vnl_c_vectorCF_two_norm
vnl_c_vectorCF_inf_norm = _vnl_c_vectorPython.vnl_c_vectorCF_inf_norm
vnl_c_vectorCF_two_nrm2 = _vnl_c_vectorPython.vnl_c_vectorCF_two_nrm2
vnl_c_vectorCF_rms_norm = _vnl_c_vectorPython.vnl_c_vectorCF_rms_norm
vnl_c_vectorCF_euclid_dist_sq = _vnl_c_vectorPython.vnl_c_vectorCF_euclid_dist_sq
vnl_c_vectorCF_allocate_Tptr = _vnl_c_vectorPython.vnl_c_vectorCF_allocate_Tptr
vnl_c_vectorCF_allocate_T = _vnl_c_vectorPython.vnl_c_vectorCF_allocate_T
vnl_c_vectorCF_deallocate = _vnl_c_vectorPython.vnl_c_vectorCF_deallocate

class vnl_c_vectorD(object):
    r"""Proxy of C++ vnl_c_vectorD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sum = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorD_sum)
    squared_magnitude = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorD_squared_magnitude)
    normalize = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorD_normalize)
    copy = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorD_copy)
    scale = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorD_scale)
    add = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorD_add)
    subtract = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorD_subtract)
    multiply = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorD_multiply)
    divide = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorD_divide)
    negate = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorD_negate)
    invert = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorD_invert)
    saxpy = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorD_saxpy)
    fill = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorD_fill)
    reverse = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorD_reverse)
    dot_product = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorD_dot_product)
    inner_product = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorD_inner_product)
    conjugate = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorD_conjugate)
    max_value = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorD_max_value)
    min_value = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorD_min_value)
    arg_max = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorD_arg_max)
    arg_min = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorD_arg_min)
    mean = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorD_mean)
    std = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorD_std)
    sum_sq_diff_means = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorD_sum_sq_diff_means)
    one_norm = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorD_one_norm)
    two_norm = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorD_two_norm)
    inf_norm = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorD_inf_norm)
    two_nrm2 = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorD_two_nrm2)
    rms_norm = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorD_rms_norm)
    euclid_dist_sq = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorD_euclid_dist_sq)
    allocate_Tptr = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorD_allocate_Tptr)
    allocate_T = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorD_allocate_T)
    deallocate = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorD_deallocate)

    def __init__(self, *args):
        r"""
        __init__(vnl_c_vectorD self) -> vnl_c_vectorD
        __init__(vnl_c_vectorD self, vnl_c_vectorD arg0) -> vnl_c_vectorD
        """
        _vnl_c_vectorPython.vnl_c_vectorD_swiginit(self, _vnl_c_vectorPython.new_vnl_c_vectorD(*args))
    __swig_destroy__ = _vnl_c_vectorPython.delete_vnl_c_vectorD

# Register vnl_c_vectorD in _vnl_c_vectorPython:
_vnl_c_vectorPython.vnl_c_vectorD_swigregister(vnl_c_vectorD)
vnl_c_vectorD_sum = _vnl_c_vectorPython.vnl_c_vectorD_sum
vnl_c_vectorD_squared_magnitude = _vnl_c_vectorPython.vnl_c_vectorD_squared_magnitude
vnl_c_vectorD_normalize = _vnl_c_vectorPython.vnl_c_vectorD_normalize
vnl_c_vectorD_copy = _vnl_c_vectorPython.vnl_c_vectorD_copy
vnl_c_vectorD_scale = _vnl_c_vectorPython.vnl_c_vectorD_scale
vnl_c_vectorD_add = _vnl_c_vectorPython.vnl_c_vectorD_add
vnl_c_vectorD_subtract = _vnl_c_vectorPython.vnl_c_vectorD_subtract
vnl_c_vectorD_multiply = _vnl_c_vectorPython.vnl_c_vectorD_multiply
vnl_c_vectorD_divide = _vnl_c_vectorPython.vnl_c_vectorD_divide
vnl_c_vectorD_negate = _vnl_c_vectorPython.vnl_c_vectorD_negate
vnl_c_vectorD_invert = _vnl_c_vectorPython.vnl_c_vectorD_invert
vnl_c_vectorD_saxpy = _vnl_c_vectorPython.vnl_c_vectorD_saxpy
vnl_c_vectorD_fill = _vnl_c_vectorPython.vnl_c_vectorD_fill
vnl_c_vectorD_reverse = _vnl_c_vectorPython.vnl_c_vectorD_reverse
vnl_c_vectorD_dot_product = _vnl_c_vectorPython.vnl_c_vectorD_dot_product
vnl_c_vectorD_inner_product = _vnl_c_vectorPython.vnl_c_vectorD_inner_product
vnl_c_vectorD_conjugate = _vnl_c_vectorPython.vnl_c_vectorD_conjugate
vnl_c_vectorD_max_value = _vnl_c_vectorPython.vnl_c_vectorD_max_value
vnl_c_vectorD_min_value = _vnl_c_vectorPython.vnl_c_vectorD_min_value
vnl_c_vectorD_arg_max = _vnl_c_vectorPython.vnl_c_vectorD_arg_max
vnl_c_vectorD_arg_min = _vnl_c_vectorPython.vnl_c_vectorD_arg_min
vnl_c_vectorD_mean = _vnl_c_vectorPython.vnl_c_vectorD_mean
vnl_c_vectorD_std = _vnl_c_vectorPython.vnl_c_vectorD_std
vnl_c_vectorD_sum_sq_diff_means = _vnl_c_vectorPython.vnl_c_vectorD_sum_sq_diff_means
vnl_c_vectorD_one_norm = _vnl_c_vectorPython.vnl_c_vectorD_one_norm
vnl_c_vectorD_two_norm = _vnl_c_vectorPython.vnl_c_vectorD_two_norm
vnl_c_vectorD_inf_norm = _vnl_c_vectorPython.vnl_c_vectorD_inf_norm
vnl_c_vectorD_two_nrm2 = _vnl_c_vectorPython.vnl_c_vectorD_two_nrm2
vnl_c_vectorD_rms_norm = _vnl_c_vectorPython.vnl_c_vectorD_rms_norm
vnl_c_vectorD_euclid_dist_sq = _vnl_c_vectorPython.vnl_c_vectorD_euclid_dist_sq
vnl_c_vectorD_allocate_Tptr = _vnl_c_vectorPython.vnl_c_vectorD_allocate_Tptr
vnl_c_vectorD_allocate_T = _vnl_c_vectorPython.vnl_c_vectorD_allocate_T
vnl_c_vectorD_deallocate = _vnl_c_vectorPython.vnl_c_vectorD_deallocate

class vnl_c_vectorF(object):
    r"""Proxy of C++ vnl_c_vectorF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sum = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorF_sum)
    squared_magnitude = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorF_squared_magnitude)
    normalize = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorF_normalize)
    copy = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorF_copy)
    scale = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorF_scale)
    add = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorF_add)
    subtract = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorF_subtract)
    multiply = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorF_multiply)
    divide = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorF_divide)
    negate = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorF_negate)
    invert = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorF_invert)
    saxpy = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorF_saxpy)
    fill = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorF_fill)
    reverse = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorF_reverse)
    dot_product = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorF_dot_product)
    inner_product = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorF_inner_product)
    conjugate = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorF_conjugate)
    max_value = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorF_max_value)
    min_value = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorF_min_value)
    arg_max = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorF_arg_max)
    arg_min = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorF_arg_min)
    mean = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorF_mean)
    std = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorF_std)
    sum_sq_diff_means = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorF_sum_sq_diff_means)
    one_norm = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorF_one_norm)
    two_norm = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorF_two_norm)
    inf_norm = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorF_inf_norm)
    two_nrm2 = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorF_two_nrm2)
    rms_norm = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorF_rms_norm)
    euclid_dist_sq = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorF_euclid_dist_sq)
    allocate_Tptr = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorF_allocate_Tptr)
    allocate_T = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorF_allocate_T)
    deallocate = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorF_deallocate)

    def __init__(self, *args):
        r"""
        __init__(vnl_c_vectorF self) -> vnl_c_vectorF
        __init__(vnl_c_vectorF self, vnl_c_vectorF arg0) -> vnl_c_vectorF
        """
        _vnl_c_vectorPython.vnl_c_vectorF_swiginit(self, _vnl_c_vectorPython.new_vnl_c_vectorF(*args))
    __swig_destroy__ = _vnl_c_vectorPython.delete_vnl_c_vectorF

# Register vnl_c_vectorF in _vnl_c_vectorPython:
_vnl_c_vectorPython.vnl_c_vectorF_swigregister(vnl_c_vectorF)
vnl_c_vectorF_sum = _vnl_c_vectorPython.vnl_c_vectorF_sum
vnl_c_vectorF_squared_magnitude = _vnl_c_vectorPython.vnl_c_vectorF_squared_magnitude
vnl_c_vectorF_normalize = _vnl_c_vectorPython.vnl_c_vectorF_normalize
vnl_c_vectorF_copy = _vnl_c_vectorPython.vnl_c_vectorF_copy
vnl_c_vectorF_scale = _vnl_c_vectorPython.vnl_c_vectorF_scale
vnl_c_vectorF_add = _vnl_c_vectorPython.vnl_c_vectorF_add
vnl_c_vectorF_subtract = _vnl_c_vectorPython.vnl_c_vectorF_subtract
vnl_c_vectorF_multiply = _vnl_c_vectorPython.vnl_c_vectorF_multiply
vnl_c_vectorF_divide = _vnl_c_vectorPython.vnl_c_vectorF_divide
vnl_c_vectorF_negate = _vnl_c_vectorPython.vnl_c_vectorF_negate
vnl_c_vectorF_invert = _vnl_c_vectorPython.vnl_c_vectorF_invert
vnl_c_vectorF_saxpy = _vnl_c_vectorPython.vnl_c_vectorF_saxpy
vnl_c_vectorF_fill = _vnl_c_vectorPython.vnl_c_vectorF_fill
vnl_c_vectorF_reverse = _vnl_c_vectorPython.vnl_c_vectorF_reverse
vnl_c_vectorF_dot_product = _vnl_c_vectorPython.vnl_c_vectorF_dot_product
vnl_c_vectorF_inner_product = _vnl_c_vectorPython.vnl_c_vectorF_inner_product
vnl_c_vectorF_conjugate = _vnl_c_vectorPython.vnl_c_vectorF_conjugate
vnl_c_vectorF_max_value = _vnl_c_vectorPython.vnl_c_vectorF_max_value
vnl_c_vectorF_min_value = _vnl_c_vectorPython.vnl_c_vectorF_min_value
vnl_c_vectorF_arg_max = _vnl_c_vectorPython.vnl_c_vectorF_arg_max
vnl_c_vectorF_arg_min = _vnl_c_vectorPython.vnl_c_vectorF_arg_min
vnl_c_vectorF_mean = _vnl_c_vectorPython.vnl_c_vectorF_mean
vnl_c_vectorF_std = _vnl_c_vectorPython.vnl_c_vectorF_std
vnl_c_vectorF_sum_sq_diff_means = _vnl_c_vectorPython.vnl_c_vectorF_sum_sq_diff_means
vnl_c_vectorF_one_norm = _vnl_c_vectorPython.vnl_c_vectorF_one_norm
vnl_c_vectorF_two_norm = _vnl_c_vectorPython.vnl_c_vectorF_two_norm
vnl_c_vectorF_inf_norm = _vnl_c_vectorPython.vnl_c_vectorF_inf_norm
vnl_c_vectorF_two_nrm2 = _vnl_c_vectorPython.vnl_c_vectorF_two_nrm2
vnl_c_vectorF_rms_norm = _vnl_c_vectorPython.vnl_c_vectorF_rms_norm
vnl_c_vectorF_euclid_dist_sq = _vnl_c_vectorPython.vnl_c_vectorF_euclid_dist_sq
vnl_c_vectorF_allocate_Tptr = _vnl_c_vectorPython.vnl_c_vectorF_allocate_Tptr
vnl_c_vectorF_allocate_T = _vnl_c_vectorPython.vnl_c_vectorF_allocate_T
vnl_c_vectorF_deallocate = _vnl_c_vectorPython.vnl_c_vectorF_deallocate

class vnl_c_vectorLD(object):
    r"""Proxy of C++ vnl_c_vectorLD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sum = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorLD_sum)
    squared_magnitude = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorLD_squared_magnitude)
    normalize = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorLD_normalize)
    copy = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorLD_copy)
    scale = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorLD_scale)
    add = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorLD_add)
    subtract = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorLD_subtract)
    multiply = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorLD_multiply)
    divide = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorLD_divide)
    negate = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorLD_negate)
    invert = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorLD_invert)
    saxpy = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorLD_saxpy)
    fill = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorLD_fill)
    reverse = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorLD_reverse)
    dot_product = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorLD_dot_product)
    inner_product = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorLD_inner_product)
    conjugate = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorLD_conjugate)
    max_value = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorLD_max_value)
    min_value = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorLD_min_value)
    arg_max = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorLD_arg_max)
    arg_min = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorLD_arg_min)
    mean = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorLD_mean)
    std = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorLD_std)
    sum_sq_diff_means = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorLD_sum_sq_diff_means)
    one_norm = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorLD_one_norm)
    two_norm = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorLD_two_norm)
    inf_norm = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorLD_inf_norm)
    two_nrm2 = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorLD_two_nrm2)
    rms_norm = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorLD_rms_norm)
    euclid_dist_sq = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorLD_euclid_dist_sq)
    allocate_Tptr = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorLD_allocate_Tptr)
    allocate_T = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorLD_allocate_T)
    deallocate = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorLD_deallocate)

    def __init__(self, *args):
        r"""
        __init__(vnl_c_vectorLD self) -> vnl_c_vectorLD
        __init__(vnl_c_vectorLD self, vnl_c_vectorLD arg0) -> vnl_c_vectorLD
        """
        _vnl_c_vectorPython.vnl_c_vectorLD_swiginit(self, _vnl_c_vectorPython.new_vnl_c_vectorLD(*args))
    __swig_destroy__ = _vnl_c_vectorPython.delete_vnl_c_vectorLD

# Register vnl_c_vectorLD in _vnl_c_vectorPython:
_vnl_c_vectorPython.vnl_c_vectorLD_swigregister(vnl_c_vectorLD)
vnl_c_vectorLD_sum = _vnl_c_vectorPython.vnl_c_vectorLD_sum
vnl_c_vectorLD_squared_magnitude = _vnl_c_vectorPython.vnl_c_vectorLD_squared_magnitude
vnl_c_vectorLD_normalize = _vnl_c_vectorPython.vnl_c_vectorLD_normalize
vnl_c_vectorLD_copy = _vnl_c_vectorPython.vnl_c_vectorLD_copy
vnl_c_vectorLD_scale = _vnl_c_vectorPython.vnl_c_vectorLD_scale
vnl_c_vectorLD_add = _vnl_c_vectorPython.vnl_c_vectorLD_add
vnl_c_vectorLD_subtract = _vnl_c_vectorPython.vnl_c_vectorLD_subtract
vnl_c_vectorLD_multiply = _vnl_c_vectorPython.vnl_c_vectorLD_multiply
vnl_c_vectorLD_divide = _vnl_c_vectorPython.vnl_c_vectorLD_divide
vnl_c_vectorLD_negate = _vnl_c_vectorPython.vnl_c_vectorLD_negate
vnl_c_vectorLD_invert = _vnl_c_vectorPython.vnl_c_vectorLD_invert
vnl_c_vectorLD_saxpy = _vnl_c_vectorPython.vnl_c_vectorLD_saxpy
vnl_c_vectorLD_fill = _vnl_c_vectorPython.vnl_c_vectorLD_fill
vnl_c_vectorLD_reverse = _vnl_c_vectorPython.vnl_c_vectorLD_reverse
vnl_c_vectorLD_dot_product = _vnl_c_vectorPython.vnl_c_vectorLD_dot_product
vnl_c_vectorLD_inner_product = _vnl_c_vectorPython.vnl_c_vectorLD_inner_product
vnl_c_vectorLD_conjugate = _vnl_c_vectorPython.vnl_c_vectorLD_conjugate
vnl_c_vectorLD_max_value = _vnl_c_vectorPython.vnl_c_vectorLD_max_value
vnl_c_vectorLD_min_value = _vnl_c_vectorPython.vnl_c_vectorLD_min_value
vnl_c_vectorLD_arg_max = _vnl_c_vectorPython.vnl_c_vectorLD_arg_max
vnl_c_vectorLD_arg_min = _vnl_c_vectorPython.vnl_c_vectorLD_arg_min
vnl_c_vectorLD_mean = _vnl_c_vectorPython.vnl_c_vectorLD_mean
vnl_c_vectorLD_std = _vnl_c_vectorPython.vnl_c_vectorLD_std
vnl_c_vectorLD_sum_sq_diff_means = _vnl_c_vectorPython.vnl_c_vectorLD_sum_sq_diff_means
vnl_c_vectorLD_one_norm = _vnl_c_vectorPython.vnl_c_vectorLD_one_norm
vnl_c_vectorLD_two_norm = _vnl_c_vectorPython.vnl_c_vectorLD_two_norm
vnl_c_vectorLD_inf_norm = _vnl_c_vectorPython.vnl_c_vectorLD_inf_norm
vnl_c_vectorLD_two_nrm2 = _vnl_c_vectorPython.vnl_c_vectorLD_two_nrm2
vnl_c_vectorLD_rms_norm = _vnl_c_vectorPython.vnl_c_vectorLD_rms_norm
vnl_c_vectorLD_euclid_dist_sq = _vnl_c_vectorPython.vnl_c_vectorLD_euclid_dist_sq
vnl_c_vectorLD_allocate_Tptr = _vnl_c_vectorPython.vnl_c_vectorLD_allocate_Tptr
vnl_c_vectorLD_allocate_T = _vnl_c_vectorPython.vnl_c_vectorLD_allocate_T
vnl_c_vectorLD_deallocate = _vnl_c_vectorPython.vnl_c_vectorLD_deallocate

class vnl_c_vectorSC(object):
    r"""Proxy of C++ vnl_c_vectorSC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sum = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSC_sum)
    squared_magnitude = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSC_squared_magnitude)
    normalize = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSC_normalize)
    copy = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSC_copy)
    scale = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSC_scale)
    add = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSC_add)
    subtract = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSC_subtract)
    multiply = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSC_multiply)
    divide = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSC_divide)
    negate = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSC_negate)
    invert = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSC_invert)
    saxpy = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSC_saxpy)
    fill = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSC_fill)
    reverse = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSC_reverse)
    dot_product = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSC_dot_product)
    inner_product = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSC_inner_product)
    conjugate = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSC_conjugate)
    max_value = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSC_max_value)
    min_value = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSC_min_value)
    arg_max = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSC_arg_max)
    arg_min = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSC_arg_min)
    mean = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSC_mean)
    std = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSC_std)
    sum_sq_diff_means = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSC_sum_sq_diff_means)
    one_norm = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSC_one_norm)
    two_norm = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSC_two_norm)
    inf_norm = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSC_inf_norm)
    two_nrm2 = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSC_two_nrm2)
    rms_norm = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSC_rms_norm)
    euclid_dist_sq = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSC_euclid_dist_sq)
    allocate_Tptr = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSC_allocate_Tptr)
    allocate_T = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSC_allocate_T)
    deallocate = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSC_deallocate)

    def __init__(self, *args):
        r"""
        __init__(vnl_c_vectorSC self) -> vnl_c_vectorSC
        __init__(vnl_c_vectorSC self, vnl_c_vectorSC arg0) -> vnl_c_vectorSC
        """
        _vnl_c_vectorPython.vnl_c_vectorSC_swiginit(self, _vnl_c_vectorPython.new_vnl_c_vectorSC(*args))
    __swig_destroy__ = _vnl_c_vectorPython.delete_vnl_c_vectorSC

# Register vnl_c_vectorSC in _vnl_c_vectorPython:
_vnl_c_vectorPython.vnl_c_vectorSC_swigregister(vnl_c_vectorSC)
vnl_c_vectorSC_sum = _vnl_c_vectorPython.vnl_c_vectorSC_sum
vnl_c_vectorSC_squared_magnitude = _vnl_c_vectorPython.vnl_c_vectorSC_squared_magnitude
vnl_c_vectorSC_normalize = _vnl_c_vectorPython.vnl_c_vectorSC_normalize
vnl_c_vectorSC_copy = _vnl_c_vectorPython.vnl_c_vectorSC_copy
vnl_c_vectorSC_scale = _vnl_c_vectorPython.vnl_c_vectorSC_scale
vnl_c_vectorSC_add = _vnl_c_vectorPython.vnl_c_vectorSC_add
vnl_c_vectorSC_subtract = _vnl_c_vectorPython.vnl_c_vectorSC_subtract
vnl_c_vectorSC_multiply = _vnl_c_vectorPython.vnl_c_vectorSC_multiply
vnl_c_vectorSC_divide = _vnl_c_vectorPython.vnl_c_vectorSC_divide
vnl_c_vectorSC_negate = _vnl_c_vectorPython.vnl_c_vectorSC_negate
vnl_c_vectorSC_invert = _vnl_c_vectorPython.vnl_c_vectorSC_invert
vnl_c_vectorSC_saxpy = _vnl_c_vectorPython.vnl_c_vectorSC_saxpy
vnl_c_vectorSC_fill = _vnl_c_vectorPython.vnl_c_vectorSC_fill
vnl_c_vectorSC_reverse = _vnl_c_vectorPython.vnl_c_vectorSC_reverse
vnl_c_vectorSC_dot_product = _vnl_c_vectorPython.vnl_c_vectorSC_dot_product
vnl_c_vectorSC_inner_product = _vnl_c_vectorPython.vnl_c_vectorSC_inner_product
vnl_c_vectorSC_conjugate = _vnl_c_vectorPython.vnl_c_vectorSC_conjugate
vnl_c_vectorSC_max_value = _vnl_c_vectorPython.vnl_c_vectorSC_max_value
vnl_c_vectorSC_min_value = _vnl_c_vectorPython.vnl_c_vectorSC_min_value
vnl_c_vectorSC_arg_max = _vnl_c_vectorPython.vnl_c_vectorSC_arg_max
vnl_c_vectorSC_arg_min = _vnl_c_vectorPython.vnl_c_vectorSC_arg_min
vnl_c_vectorSC_mean = _vnl_c_vectorPython.vnl_c_vectorSC_mean
vnl_c_vectorSC_std = _vnl_c_vectorPython.vnl_c_vectorSC_std
vnl_c_vectorSC_sum_sq_diff_means = _vnl_c_vectorPython.vnl_c_vectorSC_sum_sq_diff_means
vnl_c_vectorSC_one_norm = _vnl_c_vectorPython.vnl_c_vectorSC_one_norm
vnl_c_vectorSC_two_norm = _vnl_c_vectorPython.vnl_c_vectorSC_two_norm
vnl_c_vectorSC_inf_norm = _vnl_c_vectorPython.vnl_c_vectorSC_inf_norm
vnl_c_vectorSC_two_nrm2 = _vnl_c_vectorPython.vnl_c_vectorSC_two_nrm2
vnl_c_vectorSC_rms_norm = _vnl_c_vectorPython.vnl_c_vectorSC_rms_norm
vnl_c_vectorSC_euclid_dist_sq = _vnl_c_vectorPython.vnl_c_vectorSC_euclid_dist_sq
vnl_c_vectorSC_allocate_Tptr = _vnl_c_vectorPython.vnl_c_vectorSC_allocate_Tptr
vnl_c_vectorSC_allocate_T = _vnl_c_vectorPython.vnl_c_vectorSC_allocate_T
vnl_c_vectorSC_deallocate = _vnl_c_vectorPython.vnl_c_vectorSC_deallocate

class vnl_c_vectorSI(object):
    r"""Proxy of C++ vnl_c_vectorSI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sum = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSI_sum)
    squared_magnitude = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSI_squared_magnitude)
    normalize = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSI_normalize)
    copy = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSI_copy)
    scale = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSI_scale)
    add = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSI_add)
    subtract = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSI_subtract)
    multiply = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSI_multiply)
    divide = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSI_divide)
    negate = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSI_negate)
    invert = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSI_invert)
    saxpy = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSI_saxpy)
    fill = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSI_fill)
    reverse = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSI_reverse)
    dot_product = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSI_dot_product)
    inner_product = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSI_inner_product)
    conjugate = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSI_conjugate)
    max_value = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSI_max_value)
    min_value = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSI_min_value)
    arg_max = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSI_arg_max)
    arg_min = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSI_arg_min)
    mean = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSI_mean)
    std = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSI_std)
    sum_sq_diff_means = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSI_sum_sq_diff_means)
    one_norm = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSI_one_norm)
    two_norm = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSI_two_norm)
    inf_norm = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSI_inf_norm)
    two_nrm2 = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSI_two_nrm2)
    rms_norm = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSI_rms_norm)
    euclid_dist_sq = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSI_euclid_dist_sq)
    allocate_Tptr = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSI_allocate_Tptr)
    allocate_T = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSI_allocate_T)
    deallocate = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSI_deallocate)

    def __init__(self, *args):
        r"""
        __init__(vnl_c_vectorSI self) -> vnl_c_vectorSI
        __init__(vnl_c_vectorSI self, vnl_c_vectorSI arg0) -> vnl_c_vectorSI
        """
        _vnl_c_vectorPython.vnl_c_vectorSI_swiginit(self, _vnl_c_vectorPython.new_vnl_c_vectorSI(*args))
    __swig_destroy__ = _vnl_c_vectorPython.delete_vnl_c_vectorSI

# Register vnl_c_vectorSI in _vnl_c_vectorPython:
_vnl_c_vectorPython.vnl_c_vectorSI_swigregister(vnl_c_vectorSI)
vnl_c_vectorSI_sum = _vnl_c_vectorPython.vnl_c_vectorSI_sum
vnl_c_vectorSI_squared_magnitude = _vnl_c_vectorPython.vnl_c_vectorSI_squared_magnitude
vnl_c_vectorSI_normalize = _vnl_c_vectorPython.vnl_c_vectorSI_normalize
vnl_c_vectorSI_copy = _vnl_c_vectorPython.vnl_c_vectorSI_copy
vnl_c_vectorSI_scale = _vnl_c_vectorPython.vnl_c_vectorSI_scale
vnl_c_vectorSI_add = _vnl_c_vectorPython.vnl_c_vectorSI_add
vnl_c_vectorSI_subtract = _vnl_c_vectorPython.vnl_c_vectorSI_subtract
vnl_c_vectorSI_multiply = _vnl_c_vectorPython.vnl_c_vectorSI_multiply
vnl_c_vectorSI_divide = _vnl_c_vectorPython.vnl_c_vectorSI_divide
vnl_c_vectorSI_negate = _vnl_c_vectorPython.vnl_c_vectorSI_negate
vnl_c_vectorSI_invert = _vnl_c_vectorPython.vnl_c_vectorSI_invert
vnl_c_vectorSI_saxpy = _vnl_c_vectorPython.vnl_c_vectorSI_saxpy
vnl_c_vectorSI_fill = _vnl_c_vectorPython.vnl_c_vectorSI_fill
vnl_c_vectorSI_reverse = _vnl_c_vectorPython.vnl_c_vectorSI_reverse
vnl_c_vectorSI_dot_product = _vnl_c_vectorPython.vnl_c_vectorSI_dot_product
vnl_c_vectorSI_inner_product = _vnl_c_vectorPython.vnl_c_vectorSI_inner_product
vnl_c_vectorSI_conjugate = _vnl_c_vectorPython.vnl_c_vectorSI_conjugate
vnl_c_vectorSI_max_value = _vnl_c_vectorPython.vnl_c_vectorSI_max_value
vnl_c_vectorSI_min_value = _vnl_c_vectorPython.vnl_c_vectorSI_min_value
vnl_c_vectorSI_arg_max = _vnl_c_vectorPython.vnl_c_vectorSI_arg_max
vnl_c_vectorSI_arg_min = _vnl_c_vectorPython.vnl_c_vectorSI_arg_min
vnl_c_vectorSI_mean = _vnl_c_vectorPython.vnl_c_vectorSI_mean
vnl_c_vectorSI_std = _vnl_c_vectorPython.vnl_c_vectorSI_std
vnl_c_vectorSI_sum_sq_diff_means = _vnl_c_vectorPython.vnl_c_vectorSI_sum_sq_diff_means
vnl_c_vectorSI_one_norm = _vnl_c_vectorPython.vnl_c_vectorSI_one_norm
vnl_c_vectorSI_two_norm = _vnl_c_vectorPython.vnl_c_vectorSI_two_norm
vnl_c_vectorSI_inf_norm = _vnl_c_vectorPython.vnl_c_vectorSI_inf_norm
vnl_c_vectorSI_two_nrm2 = _vnl_c_vectorPython.vnl_c_vectorSI_two_nrm2
vnl_c_vectorSI_rms_norm = _vnl_c_vectorPython.vnl_c_vectorSI_rms_norm
vnl_c_vectorSI_euclid_dist_sq = _vnl_c_vectorPython.vnl_c_vectorSI_euclid_dist_sq
vnl_c_vectorSI_allocate_Tptr = _vnl_c_vectorPython.vnl_c_vectorSI_allocate_Tptr
vnl_c_vectorSI_allocate_T = _vnl_c_vectorPython.vnl_c_vectorSI_allocate_T
vnl_c_vectorSI_deallocate = _vnl_c_vectorPython.vnl_c_vectorSI_deallocate

class vnl_c_vectorSL(object):
    r"""Proxy of C++ vnl_c_vectorSL class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sum = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSL_sum)
    squared_magnitude = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSL_squared_magnitude)
    normalize = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSL_normalize)
    copy = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSL_copy)
    scale = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSL_scale)
    add = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSL_add)
    subtract = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSL_subtract)
    multiply = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSL_multiply)
    divide = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSL_divide)
    negate = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSL_negate)
    invert = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSL_invert)
    saxpy = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSL_saxpy)
    fill = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSL_fill)
    reverse = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSL_reverse)
    dot_product = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSL_dot_product)
    inner_product = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSL_inner_product)
    conjugate = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSL_conjugate)
    max_value = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSL_max_value)
    min_value = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSL_min_value)
    arg_max = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSL_arg_max)
    arg_min = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSL_arg_min)
    mean = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSL_mean)
    std = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSL_std)
    sum_sq_diff_means = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSL_sum_sq_diff_means)
    one_norm = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSL_one_norm)
    two_norm = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSL_two_norm)
    inf_norm = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSL_inf_norm)
    two_nrm2 = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSL_two_nrm2)
    rms_norm = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSL_rms_norm)
    euclid_dist_sq = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSL_euclid_dist_sq)
    allocate_Tptr = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSL_allocate_Tptr)
    allocate_T = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSL_allocate_T)
    deallocate = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSL_deallocate)

    def __init__(self, *args):
        r"""
        __init__(vnl_c_vectorSL self) -> vnl_c_vectorSL
        __init__(vnl_c_vectorSL self, vnl_c_vectorSL arg0) -> vnl_c_vectorSL
        """
        _vnl_c_vectorPython.vnl_c_vectorSL_swiginit(self, _vnl_c_vectorPython.new_vnl_c_vectorSL(*args))
    __swig_destroy__ = _vnl_c_vectorPython.delete_vnl_c_vectorSL

# Register vnl_c_vectorSL in _vnl_c_vectorPython:
_vnl_c_vectorPython.vnl_c_vectorSL_swigregister(vnl_c_vectorSL)
vnl_c_vectorSL_sum = _vnl_c_vectorPython.vnl_c_vectorSL_sum
vnl_c_vectorSL_squared_magnitude = _vnl_c_vectorPython.vnl_c_vectorSL_squared_magnitude
vnl_c_vectorSL_normalize = _vnl_c_vectorPython.vnl_c_vectorSL_normalize
vnl_c_vectorSL_copy = _vnl_c_vectorPython.vnl_c_vectorSL_copy
vnl_c_vectorSL_scale = _vnl_c_vectorPython.vnl_c_vectorSL_scale
vnl_c_vectorSL_add = _vnl_c_vectorPython.vnl_c_vectorSL_add
vnl_c_vectorSL_subtract = _vnl_c_vectorPython.vnl_c_vectorSL_subtract
vnl_c_vectorSL_multiply = _vnl_c_vectorPython.vnl_c_vectorSL_multiply
vnl_c_vectorSL_divide = _vnl_c_vectorPython.vnl_c_vectorSL_divide
vnl_c_vectorSL_negate = _vnl_c_vectorPython.vnl_c_vectorSL_negate
vnl_c_vectorSL_invert = _vnl_c_vectorPython.vnl_c_vectorSL_invert
vnl_c_vectorSL_saxpy = _vnl_c_vectorPython.vnl_c_vectorSL_saxpy
vnl_c_vectorSL_fill = _vnl_c_vectorPython.vnl_c_vectorSL_fill
vnl_c_vectorSL_reverse = _vnl_c_vectorPython.vnl_c_vectorSL_reverse
vnl_c_vectorSL_dot_product = _vnl_c_vectorPython.vnl_c_vectorSL_dot_product
vnl_c_vectorSL_inner_product = _vnl_c_vectorPython.vnl_c_vectorSL_inner_product
vnl_c_vectorSL_conjugate = _vnl_c_vectorPython.vnl_c_vectorSL_conjugate
vnl_c_vectorSL_max_value = _vnl_c_vectorPython.vnl_c_vectorSL_max_value
vnl_c_vectorSL_min_value = _vnl_c_vectorPython.vnl_c_vectorSL_min_value
vnl_c_vectorSL_arg_max = _vnl_c_vectorPython.vnl_c_vectorSL_arg_max
vnl_c_vectorSL_arg_min = _vnl_c_vectorPython.vnl_c_vectorSL_arg_min
vnl_c_vectorSL_mean = _vnl_c_vectorPython.vnl_c_vectorSL_mean
vnl_c_vectorSL_std = _vnl_c_vectorPython.vnl_c_vectorSL_std
vnl_c_vectorSL_sum_sq_diff_means = _vnl_c_vectorPython.vnl_c_vectorSL_sum_sq_diff_means
vnl_c_vectorSL_one_norm = _vnl_c_vectorPython.vnl_c_vectorSL_one_norm
vnl_c_vectorSL_two_norm = _vnl_c_vectorPython.vnl_c_vectorSL_two_norm
vnl_c_vectorSL_inf_norm = _vnl_c_vectorPython.vnl_c_vectorSL_inf_norm
vnl_c_vectorSL_two_nrm2 = _vnl_c_vectorPython.vnl_c_vectorSL_two_nrm2
vnl_c_vectorSL_rms_norm = _vnl_c_vectorPython.vnl_c_vectorSL_rms_norm
vnl_c_vectorSL_euclid_dist_sq = _vnl_c_vectorPython.vnl_c_vectorSL_euclid_dist_sq
vnl_c_vectorSL_allocate_Tptr = _vnl_c_vectorPython.vnl_c_vectorSL_allocate_Tptr
vnl_c_vectorSL_allocate_T = _vnl_c_vectorPython.vnl_c_vectorSL_allocate_T
vnl_c_vectorSL_deallocate = _vnl_c_vectorPython.vnl_c_vectorSL_deallocate

class vnl_c_vectorSLL(object):
    r"""Proxy of C++ vnl_c_vectorSLL class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sum = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSLL_sum)
    squared_magnitude = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSLL_squared_magnitude)
    normalize = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSLL_normalize)
    copy = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSLL_copy)
    scale = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSLL_scale)
    add = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSLL_add)
    subtract = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSLL_subtract)
    multiply = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSLL_multiply)
    divide = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSLL_divide)
    negate = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSLL_negate)
    invert = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSLL_invert)
    saxpy = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSLL_saxpy)
    fill = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSLL_fill)
    reverse = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSLL_reverse)
    dot_product = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSLL_dot_product)
    inner_product = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSLL_inner_product)
    conjugate = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSLL_conjugate)
    max_value = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSLL_max_value)
    min_value = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSLL_min_value)
    arg_max = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSLL_arg_max)
    arg_min = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSLL_arg_min)
    mean = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSLL_mean)
    std = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSLL_std)
    sum_sq_diff_means = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSLL_sum_sq_diff_means)
    one_norm = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSLL_one_norm)
    two_norm = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSLL_two_norm)
    inf_norm = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSLL_inf_norm)
    two_nrm2 = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSLL_two_nrm2)
    rms_norm = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSLL_rms_norm)
    euclid_dist_sq = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSLL_euclid_dist_sq)
    allocate_Tptr = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSLL_allocate_Tptr)
    allocate_T = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSLL_allocate_T)
    deallocate = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorSLL_deallocate)

    def __init__(self, *args):
        r"""
        __init__(vnl_c_vectorSLL self) -> vnl_c_vectorSLL
        __init__(vnl_c_vectorSLL self, vnl_c_vectorSLL arg0) -> vnl_c_vectorSLL
        """
        _vnl_c_vectorPython.vnl_c_vectorSLL_swiginit(self, _vnl_c_vectorPython.new_vnl_c_vectorSLL(*args))
    __swig_destroy__ = _vnl_c_vectorPython.delete_vnl_c_vectorSLL

# Register vnl_c_vectorSLL in _vnl_c_vectorPython:
_vnl_c_vectorPython.vnl_c_vectorSLL_swigregister(vnl_c_vectorSLL)
vnl_c_vectorSLL_sum = _vnl_c_vectorPython.vnl_c_vectorSLL_sum
vnl_c_vectorSLL_squared_magnitude = _vnl_c_vectorPython.vnl_c_vectorSLL_squared_magnitude
vnl_c_vectorSLL_normalize = _vnl_c_vectorPython.vnl_c_vectorSLL_normalize
vnl_c_vectorSLL_copy = _vnl_c_vectorPython.vnl_c_vectorSLL_copy
vnl_c_vectorSLL_scale = _vnl_c_vectorPython.vnl_c_vectorSLL_scale
vnl_c_vectorSLL_add = _vnl_c_vectorPython.vnl_c_vectorSLL_add
vnl_c_vectorSLL_subtract = _vnl_c_vectorPython.vnl_c_vectorSLL_subtract
vnl_c_vectorSLL_multiply = _vnl_c_vectorPython.vnl_c_vectorSLL_multiply
vnl_c_vectorSLL_divide = _vnl_c_vectorPython.vnl_c_vectorSLL_divide
vnl_c_vectorSLL_negate = _vnl_c_vectorPython.vnl_c_vectorSLL_negate
vnl_c_vectorSLL_invert = _vnl_c_vectorPython.vnl_c_vectorSLL_invert
vnl_c_vectorSLL_saxpy = _vnl_c_vectorPython.vnl_c_vectorSLL_saxpy
vnl_c_vectorSLL_fill = _vnl_c_vectorPython.vnl_c_vectorSLL_fill
vnl_c_vectorSLL_reverse = _vnl_c_vectorPython.vnl_c_vectorSLL_reverse
vnl_c_vectorSLL_dot_product = _vnl_c_vectorPython.vnl_c_vectorSLL_dot_product
vnl_c_vectorSLL_inner_product = _vnl_c_vectorPython.vnl_c_vectorSLL_inner_product
vnl_c_vectorSLL_conjugate = _vnl_c_vectorPython.vnl_c_vectorSLL_conjugate
vnl_c_vectorSLL_max_value = _vnl_c_vectorPython.vnl_c_vectorSLL_max_value
vnl_c_vectorSLL_min_value = _vnl_c_vectorPython.vnl_c_vectorSLL_min_value
vnl_c_vectorSLL_arg_max = _vnl_c_vectorPython.vnl_c_vectorSLL_arg_max
vnl_c_vectorSLL_arg_min = _vnl_c_vectorPython.vnl_c_vectorSLL_arg_min
vnl_c_vectorSLL_mean = _vnl_c_vectorPython.vnl_c_vectorSLL_mean
vnl_c_vectorSLL_std = _vnl_c_vectorPython.vnl_c_vectorSLL_std
vnl_c_vectorSLL_sum_sq_diff_means = _vnl_c_vectorPython.vnl_c_vectorSLL_sum_sq_diff_means
vnl_c_vectorSLL_one_norm = _vnl_c_vectorPython.vnl_c_vectorSLL_one_norm
vnl_c_vectorSLL_two_norm = _vnl_c_vectorPython.vnl_c_vectorSLL_two_norm
vnl_c_vectorSLL_inf_norm = _vnl_c_vectorPython.vnl_c_vectorSLL_inf_norm
vnl_c_vectorSLL_two_nrm2 = _vnl_c_vectorPython.vnl_c_vectorSLL_two_nrm2
vnl_c_vectorSLL_rms_norm = _vnl_c_vectorPython.vnl_c_vectorSLL_rms_norm
vnl_c_vectorSLL_euclid_dist_sq = _vnl_c_vectorPython.vnl_c_vectorSLL_euclid_dist_sq
vnl_c_vectorSLL_allocate_Tptr = _vnl_c_vectorPython.vnl_c_vectorSLL_allocate_Tptr
vnl_c_vectorSLL_allocate_T = _vnl_c_vectorPython.vnl_c_vectorSLL_allocate_T
vnl_c_vectorSLL_deallocate = _vnl_c_vectorPython.vnl_c_vectorSLL_deallocate

class vnl_c_vectorUC(object):
    r"""Proxy of C++ vnl_c_vectorUC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sum = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUC_sum)
    squared_magnitude = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUC_squared_magnitude)
    normalize = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUC_normalize)
    copy = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUC_copy)
    scale = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUC_scale)
    add = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUC_add)
    subtract = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUC_subtract)
    multiply = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUC_multiply)
    divide = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUC_divide)
    negate = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUC_negate)
    invert = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUC_invert)
    saxpy = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUC_saxpy)
    fill = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUC_fill)
    reverse = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUC_reverse)
    dot_product = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUC_dot_product)
    inner_product = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUC_inner_product)
    conjugate = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUC_conjugate)
    max_value = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUC_max_value)
    min_value = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUC_min_value)
    arg_max = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUC_arg_max)
    arg_min = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUC_arg_min)
    mean = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUC_mean)
    std = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUC_std)
    sum_sq_diff_means = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUC_sum_sq_diff_means)
    one_norm = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUC_one_norm)
    two_norm = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUC_two_norm)
    inf_norm = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUC_inf_norm)
    two_nrm2 = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUC_two_nrm2)
    rms_norm = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUC_rms_norm)
    euclid_dist_sq = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUC_euclid_dist_sq)
    allocate_Tptr = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUC_allocate_Tptr)
    allocate_T = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUC_allocate_T)
    deallocate = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUC_deallocate)

    def __init__(self, *args):
        r"""
        __init__(vnl_c_vectorUC self) -> vnl_c_vectorUC
        __init__(vnl_c_vectorUC self, vnl_c_vectorUC arg0) -> vnl_c_vectorUC
        """
        _vnl_c_vectorPython.vnl_c_vectorUC_swiginit(self, _vnl_c_vectorPython.new_vnl_c_vectorUC(*args))
    __swig_destroy__ = _vnl_c_vectorPython.delete_vnl_c_vectorUC

# Register vnl_c_vectorUC in _vnl_c_vectorPython:
_vnl_c_vectorPython.vnl_c_vectorUC_swigregister(vnl_c_vectorUC)
vnl_c_vectorUC_sum = _vnl_c_vectorPython.vnl_c_vectorUC_sum
vnl_c_vectorUC_squared_magnitude = _vnl_c_vectorPython.vnl_c_vectorUC_squared_magnitude
vnl_c_vectorUC_normalize = _vnl_c_vectorPython.vnl_c_vectorUC_normalize
vnl_c_vectorUC_copy = _vnl_c_vectorPython.vnl_c_vectorUC_copy
vnl_c_vectorUC_scale = _vnl_c_vectorPython.vnl_c_vectorUC_scale
vnl_c_vectorUC_add = _vnl_c_vectorPython.vnl_c_vectorUC_add
vnl_c_vectorUC_subtract = _vnl_c_vectorPython.vnl_c_vectorUC_subtract
vnl_c_vectorUC_multiply = _vnl_c_vectorPython.vnl_c_vectorUC_multiply
vnl_c_vectorUC_divide = _vnl_c_vectorPython.vnl_c_vectorUC_divide
vnl_c_vectorUC_negate = _vnl_c_vectorPython.vnl_c_vectorUC_negate
vnl_c_vectorUC_invert = _vnl_c_vectorPython.vnl_c_vectorUC_invert
vnl_c_vectorUC_saxpy = _vnl_c_vectorPython.vnl_c_vectorUC_saxpy
vnl_c_vectorUC_fill = _vnl_c_vectorPython.vnl_c_vectorUC_fill
vnl_c_vectorUC_reverse = _vnl_c_vectorPython.vnl_c_vectorUC_reverse
vnl_c_vectorUC_dot_product = _vnl_c_vectorPython.vnl_c_vectorUC_dot_product
vnl_c_vectorUC_inner_product = _vnl_c_vectorPython.vnl_c_vectorUC_inner_product
vnl_c_vectorUC_conjugate = _vnl_c_vectorPython.vnl_c_vectorUC_conjugate
vnl_c_vectorUC_max_value = _vnl_c_vectorPython.vnl_c_vectorUC_max_value
vnl_c_vectorUC_min_value = _vnl_c_vectorPython.vnl_c_vectorUC_min_value
vnl_c_vectorUC_arg_max = _vnl_c_vectorPython.vnl_c_vectorUC_arg_max
vnl_c_vectorUC_arg_min = _vnl_c_vectorPython.vnl_c_vectorUC_arg_min
vnl_c_vectorUC_mean = _vnl_c_vectorPython.vnl_c_vectorUC_mean
vnl_c_vectorUC_std = _vnl_c_vectorPython.vnl_c_vectorUC_std
vnl_c_vectorUC_sum_sq_diff_means = _vnl_c_vectorPython.vnl_c_vectorUC_sum_sq_diff_means
vnl_c_vectorUC_one_norm = _vnl_c_vectorPython.vnl_c_vectorUC_one_norm
vnl_c_vectorUC_two_norm = _vnl_c_vectorPython.vnl_c_vectorUC_two_norm
vnl_c_vectorUC_inf_norm = _vnl_c_vectorPython.vnl_c_vectorUC_inf_norm
vnl_c_vectorUC_two_nrm2 = _vnl_c_vectorPython.vnl_c_vectorUC_two_nrm2
vnl_c_vectorUC_rms_norm = _vnl_c_vectorPython.vnl_c_vectorUC_rms_norm
vnl_c_vectorUC_euclid_dist_sq = _vnl_c_vectorPython.vnl_c_vectorUC_euclid_dist_sq
vnl_c_vectorUC_allocate_Tptr = _vnl_c_vectorPython.vnl_c_vectorUC_allocate_Tptr
vnl_c_vectorUC_allocate_T = _vnl_c_vectorPython.vnl_c_vectorUC_allocate_T
vnl_c_vectorUC_deallocate = _vnl_c_vectorPython.vnl_c_vectorUC_deallocate

class vnl_c_vectorUI(object):
    r"""Proxy of C++ vnl_c_vectorUI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sum = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUI_sum)
    squared_magnitude = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUI_squared_magnitude)
    normalize = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUI_normalize)
    copy = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUI_copy)
    scale = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUI_scale)
    add = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUI_add)
    subtract = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUI_subtract)
    multiply = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUI_multiply)
    divide = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUI_divide)
    negate = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUI_negate)
    invert = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUI_invert)
    saxpy = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUI_saxpy)
    fill = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUI_fill)
    reverse = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUI_reverse)
    dot_product = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUI_dot_product)
    inner_product = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUI_inner_product)
    conjugate = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUI_conjugate)
    max_value = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUI_max_value)
    min_value = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUI_min_value)
    arg_max = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUI_arg_max)
    arg_min = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUI_arg_min)
    mean = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUI_mean)
    std = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUI_std)
    sum_sq_diff_means = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUI_sum_sq_diff_means)
    one_norm = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUI_one_norm)
    two_norm = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUI_two_norm)
    inf_norm = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUI_inf_norm)
    two_nrm2 = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUI_two_nrm2)
    rms_norm = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUI_rms_norm)
    euclid_dist_sq = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUI_euclid_dist_sq)
    allocate_Tptr = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUI_allocate_Tptr)
    allocate_T = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUI_allocate_T)
    deallocate = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUI_deallocate)

    def __init__(self, *args):
        r"""
        __init__(vnl_c_vectorUI self) -> vnl_c_vectorUI
        __init__(vnl_c_vectorUI self, vnl_c_vectorUI arg0) -> vnl_c_vectorUI
        """
        _vnl_c_vectorPython.vnl_c_vectorUI_swiginit(self, _vnl_c_vectorPython.new_vnl_c_vectorUI(*args))
    __swig_destroy__ = _vnl_c_vectorPython.delete_vnl_c_vectorUI

# Register vnl_c_vectorUI in _vnl_c_vectorPython:
_vnl_c_vectorPython.vnl_c_vectorUI_swigregister(vnl_c_vectorUI)
vnl_c_vectorUI_sum = _vnl_c_vectorPython.vnl_c_vectorUI_sum
vnl_c_vectorUI_squared_magnitude = _vnl_c_vectorPython.vnl_c_vectorUI_squared_magnitude
vnl_c_vectorUI_normalize = _vnl_c_vectorPython.vnl_c_vectorUI_normalize
vnl_c_vectorUI_copy = _vnl_c_vectorPython.vnl_c_vectorUI_copy
vnl_c_vectorUI_scale = _vnl_c_vectorPython.vnl_c_vectorUI_scale
vnl_c_vectorUI_add = _vnl_c_vectorPython.vnl_c_vectorUI_add
vnl_c_vectorUI_subtract = _vnl_c_vectorPython.vnl_c_vectorUI_subtract
vnl_c_vectorUI_multiply = _vnl_c_vectorPython.vnl_c_vectorUI_multiply
vnl_c_vectorUI_divide = _vnl_c_vectorPython.vnl_c_vectorUI_divide
vnl_c_vectorUI_negate = _vnl_c_vectorPython.vnl_c_vectorUI_negate
vnl_c_vectorUI_invert = _vnl_c_vectorPython.vnl_c_vectorUI_invert
vnl_c_vectorUI_saxpy = _vnl_c_vectorPython.vnl_c_vectorUI_saxpy
vnl_c_vectorUI_fill = _vnl_c_vectorPython.vnl_c_vectorUI_fill
vnl_c_vectorUI_reverse = _vnl_c_vectorPython.vnl_c_vectorUI_reverse
vnl_c_vectorUI_dot_product = _vnl_c_vectorPython.vnl_c_vectorUI_dot_product
vnl_c_vectorUI_inner_product = _vnl_c_vectorPython.vnl_c_vectorUI_inner_product
vnl_c_vectorUI_conjugate = _vnl_c_vectorPython.vnl_c_vectorUI_conjugate
vnl_c_vectorUI_max_value = _vnl_c_vectorPython.vnl_c_vectorUI_max_value
vnl_c_vectorUI_min_value = _vnl_c_vectorPython.vnl_c_vectorUI_min_value
vnl_c_vectorUI_arg_max = _vnl_c_vectorPython.vnl_c_vectorUI_arg_max
vnl_c_vectorUI_arg_min = _vnl_c_vectorPython.vnl_c_vectorUI_arg_min
vnl_c_vectorUI_mean = _vnl_c_vectorPython.vnl_c_vectorUI_mean
vnl_c_vectorUI_std = _vnl_c_vectorPython.vnl_c_vectorUI_std
vnl_c_vectorUI_sum_sq_diff_means = _vnl_c_vectorPython.vnl_c_vectorUI_sum_sq_diff_means
vnl_c_vectorUI_one_norm = _vnl_c_vectorPython.vnl_c_vectorUI_one_norm
vnl_c_vectorUI_two_norm = _vnl_c_vectorPython.vnl_c_vectorUI_two_norm
vnl_c_vectorUI_inf_norm = _vnl_c_vectorPython.vnl_c_vectorUI_inf_norm
vnl_c_vectorUI_two_nrm2 = _vnl_c_vectorPython.vnl_c_vectorUI_two_nrm2
vnl_c_vectorUI_rms_norm = _vnl_c_vectorPython.vnl_c_vectorUI_rms_norm
vnl_c_vectorUI_euclid_dist_sq = _vnl_c_vectorPython.vnl_c_vectorUI_euclid_dist_sq
vnl_c_vectorUI_allocate_Tptr = _vnl_c_vectorPython.vnl_c_vectorUI_allocate_Tptr
vnl_c_vectorUI_allocate_T = _vnl_c_vectorPython.vnl_c_vectorUI_allocate_T
vnl_c_vectorUI_deallocate = _vnl_c_vectorPython.vnl_c_vectorUI_deallocate

class vnl_c_vectorUL(object):
    r"""Proxy of C++ vnl_c_vectorUL class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sum = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUL_sum)
    squared_magnitude = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUL_squared_magnitude)
    normalize = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUL_normalize)
    copy = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUL_copy)
    scale = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUL_scale)
    add = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUL_add)
    subtract = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUL_subtract)
    multiply = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUL_multiply)
    divide = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUL_divide)
    negate = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUL_negate)
    invert = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUL_invert)
    saxpy = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUL_saxpy)
    fill = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUL_fill)
    reverse = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUL_reverse)
    dot_product = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUL_dot_product)
    inner_product = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUL_inner_product)
    conjugate = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUL_conjugate)
    max_value = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUL_max_value)
    min_value = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUL_min_value)
    arg_max = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUL_arg_max)
    arg_min = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUL_arg_min)
    mean = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUL_mean)
    std = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUL_std)
    sum_sq_diff_means = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUL_sum_sq_diff_means)
    one_norm = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUL_one_norm)
    two_norm = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUL_two_norm)
    inf_norm = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUL_inf_norm)
    two_nrm2 = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUL_two_nrm2)
    rms_norm = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUL_rms_norm)
    euclid_dist_sq = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUL_euclid_dist_sq)
    allocate_Tptr = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUL_allocate_Tptr)
    allocate_T = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUL_allocate_T)
    deallocate = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorUL_deallocate)

    def __init__(self, *args):
        r"""
        __init__(vnl_c_vectorUL self) -> vnl_c_vectorUL
        __init__(vnl_c_vectorUL self, vnl_c_vectorUL arg0) -> vnl_c_vectorUL
        """
        _vnl_c_vectorPython.vnl_c_vectorUL_swiginit(self, _vnl_c_vectorPython.new_vnl_c_vectorUL(*args))
    __swig_destroy__ = _vnl_c_vectorPython.delete_vnl_c_vectorUL

# Register vnl_c_vectorUL in _vnl_c_vectorPython:
_vnl_c_vectorPython.vnl_c_vectorUL_swigregister(vnl_c_vectorUL)
vnl_c_vectorUL_sum = _vnl_c_vectorPython.vnl_c_vectorUL_sum
vnl_c_vectorUL_squared_magnitude = _vnl_c_vectorPython.vnl_c_vectorUL_squared_magnitude
vnl_c_vectorUL_normalize = _vnl_c_vectorPython.vnl_c_vectorUL_normalize
vnl_c_vectorUL_copy = _vnl_c_vectorPython.vnl_c_vectorUL_copy
vnl_c_vectorUL_scale = _vnl_c_vectorPython.vnl_c_vectorUL_scale
vnl_c_vectorUL_add = _vnl_c_vectorPython.vnl_c_vectorUL_add
vnl_c_vectorUL_subtract = _vnl_c_vectorPython.vnl_c_vectorUL_subtract
vnl_c_vectorUL_multiply = _vnl_c_vectorPython.vnl_c_vectorUL_multiply
vnl_c_vectorUL_divide = _vnl_c_vectorPython.vnl_c_vectorUL_divide
vnl_c_vectorUL_negate = _vnl_c_vectorPython.vnl_c_vectorUL_negate
vnl_c_vectorUL_invert = _vnl_c_vectorPython.vnl_c_vectorUL_invert
vnl_c_vectorUL_saxpy = _vnl_c_vectorPython.vnl_c_vectorUL_saxpy
vnl_c_vectorUL_fill = _vnl_c_vectorPython.vnl_c_vectorUL_fill
vnl_c_vectorUL_reverse = _vnl_c_vectorPython.vnl_c_vectorUL_reverse
vnl_c_vectorUL_dot_product = _vnl_c_vectorPython.vnl_c_vectorUL_dot_product
vnl_c_vectorUL_inner_product = _vnl_c_vectorPython.vnl_c_vectorUL_inner_product
vnl_c_vectorUL_conjugate = _vnl_c_vectorPython.vnl_c_vectorUL_conjugate
vnl_c_vectorUL_max_value = _vnl_c_vectorPython.vnl_c_vectorUL_max_value
vnl_c_vectorUL_min_value = _vnl_c_vectorPython.vnl_c_vectorUL_min_value
vnl_c_vectorUL_arg_max = _vnl_c_vectorPython.vnl_c_vectorUL_arg_max
vnl_c_vectorUL_arg_min = _vnl_c_vectorPython.vnl_c_vectorUL_arg_min
vnl_c_vectorUL_mean = _vnl_c_vectorPython.vnl_c_vectorUL_mean
vnl_c_vectorUL_std = _vnl_c_vectorPython.vnl_c_vectorUL_std
vnl_c_vectorUL_sum_sq_diff_means = _vnl_c_vectorPython.vnl_c_vectorUL_sum_sq_diff_means
vnl_c_vectorUL_one_norm = _vnl_c_vectorPython.vnl_c_vectorUL_one_norm
vnl_c_vectorUL_two_norm = _vnl_c_vectorPython.vnl_c_vectorUL_two_norm
vnl_c_vectorUL_inf_norm = _vnl_c_vectorPython.vnl_c_vectorUL_inf_norm
vnl_c_vectorUL_two_nrm2 = _vnl_c_vectorPython.vnl_c_vectorUL_two_nrm2
vnl_c_vectorUL_rms_norm = _vnl_c_vectorPython.vnl_c_vectorUL_rms_norm
vnl_c_vectorUL_euclid_dist_sq = _vnl_c_vectorPython.vnl_c_vectorUL_euclid_dist_sq
vnl_c_vectorUL_allocate_Tptr = _vnl_c_vectorPython.vnl_c_vectorUL_allocate_Tptr
vnl_c_vectorUL_allocate_T = _vnl_c_vectorPython.vnl_c_vectorUL_allocate_T
vnl_c_vectorUL_deallocate = _vnl_c_vectorPython.vnl_c_vectorUL_deallocate

class vnl_c_vectorULL(object):
    r"""Proxy of C++ vnl_c_vectorULL class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sum = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorULL_sum)
    squared_magnitude = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorULL_squared_magnitude)
    normalize = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorULL_normalize)
    copy = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorULL_copy)
    scale = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorULL_scale)
    add = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorULL_add)
    subtract = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorULL_subtract)
    multiply = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorULL_multiply)
    divide = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorULL_divide)
    negate = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorULL_negate)
    invert = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorULL_invert)
    saxpy = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorULL_saxpy)
    fill = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorULL_fill)
    reverse = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorULL_reverse)
    dot_product = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorULL_dot_product)
    inner_product = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorULL_inner_product)
    conjugate = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorULL_conjugate)
    max_value = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorULL_max_value)
    min_value = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorULL_min_value)
    arg_max = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorULL_arg_max)
    arg_min = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorULL_arg_min)
    mean = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorULL_mean)
    std = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorULL_std)
    sum_sq_diff_means = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorULL_sum_sq_diff_means)
    one_norm = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorULL_one_norm)
    two_norm = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorULL_two_norm)
    inf_norm = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorULL_inf_norm)
    two_nrm2 = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorULL_two_nrm2)
    rms_norm = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorULL_rms_norm)
    euclid_dist_sq = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorULL_euclid_dist_sq)
    allocate_Tptr = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorULL_allocate_Tptr)
    allocate_T = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorULL_allocate_T)
    deallocate = _swig_new_static_method(_vnl_c_vectorPython.vnl_c_vectorULL_deallocate)

    def __init__(self, *args):
        r"""
        __init__(vnl_c_vectorULL self) -> vnl_c_vectorULL
        __init__(vnl_c_vectorULL self, vnl_c_vectorULL arg0) -> vnl_c_vectorULL
        """
        _vnl_c_vectorPython.vnl_c_vectorULL_swiginit(self, _vnl_c_vectorPython.new_vnl_c_vectorULL(*args))
    __swig_destroy__ = _vnl_c_vectorPython.delete_vnl_c_vectorULL

# Register vnl_c_vectorULL in _vnl_c_vectorPython:
_vnl_c_vectorPython.vnl_c_vectorULL_swigregister(vnl_c_vectorULL)
vnl_c_vectorULL_sum = _vnl_c_vectorPython.vnl_c_vectorULL_sum
vnl_c_vectorULL_squared_magnitude = _vnl_c_vectorPython.vnl_c_vectorULL_squared_magnitude
vnl_c_vectorULL_normalize = _vnl_c_vectorPython.vnl_c_vectorULL_normalize
vnl_c_vectorULL_copy = _vnl_c_vectorPython.vnl_c_vectorULL_copy
vnl_c_vectorULL_scale = _vnl_c_vectorPython.vnl_c_vectorULL_scale
vnl_c_vectorULL_add = _vnl_c_vectorPython.vnl_c_vectorULL_add
vnl_c_vectorULL_subtract = _vnl_c_vectorPython.vnl_c_vectorULL_subtract
vnl_c_vectorULL_multiply = _vnl_c_vectorPython.vnl_c_vectorULL_multiply
vnl_c_vectorULL_divide = _vnl_c_vectorPython.vnl_c_vectorULL_divide
vnl_c_vectorULL_negate = _vnl_c_vectorPython.vnl_c_vectorULL_negate
vnl_c_vectorULL_invert = _vnl_c_vectorPython.vnl_c_vectorULL_invert
vnl_c_vectorULL_saxpy = _vnl_c_vectorPython.vnl_c_vectorULL_saxpy
vnl_c_vectorULL_fill = _vnl_c_vectorPython.vnl_c_vectorULL_fill
vnl_c_vectorULL_reverse = _vnl_c_vectorPython.vnl_c_vectorULL_reverse
vnl_c_vectorULL_dot_product = _vnl_c_vectorPython.vnl_c_vectorULL_dot_product
vnl_c_vectorULL_inner_product = _vnl_c_vectorPython.vnl_c_vectorULL_inner_product
vnl_c_vectorULL_conjugate = _vnl_c_vectorPython.vnl_c_vectorULL_conjugate
vnl_c_vectorULL_max_value = _vnl_c_vectorPython.vnl_c_vectorULL_max_value
vnl_c_vectorULL_min_value = _vnl_c_vectorPython.vnl_c_vectorULL_min_value
vnl_c_vectorULL_arg_max = _vnl_c_vectorPython.vnl_c_vectorULL_arg_max
vnl_c_vectorULL_arg_min = _vnl_c_vectorPython.vnl_c_vectorULL_arg_min
vnl_c_vectorULL_mean = _vnl_c_vectorPython.vnl_c_vectorULL_mean
vnl_c_vectorULL_std = _vnl_c_vectorPython.vnl_c_vectorULL_std
vnl_c_vectorULL_sum_sq_diff_means = _vnl_c_vectorPython.vnl_c_vectorULL_sum_sq_diff_means
vnl_c_vectorULL_one_norm = _vnl_c_vectorPython.vnl_c_vectorULL_one_norm
vnl_c_vectorULL_two_norm = _vnl_c_vectorPython.vnl_c_vectorULL_two_norm
vnl_c_vectorULL_inf_norm = _vnl_c_vectorPython.vnl_c_vectorULL_inf_norm
vnl_c_vectorULL_two_nrm2 = _vnl_c_vectorPython.vnl_c_vectorULL_two_nrm2
vnl_c_vectorULL_rms_norm = _vnl_c_vectorPython.vnl_c_vectorULL_rms_norm
vnl_c_vectorULL_euclid_dist_sq = _vnl_c_vectorPython.vnl_c_vectorULL_euclid_dist_sq
vnl_c_vectorULL_allocate_Tptr = _vnl_c_vectorPython.vnl_c_vectorULL_allocate_Tptr
vnl_c_vectorULL_allocate_T = _vnl_c_vectorPython.vnl_c_vectorULL_allocate_T
vnl_c_vectorULL_deallocate = _vnl_c_vectorPython.vnl_c_vectorULL_deallocate



