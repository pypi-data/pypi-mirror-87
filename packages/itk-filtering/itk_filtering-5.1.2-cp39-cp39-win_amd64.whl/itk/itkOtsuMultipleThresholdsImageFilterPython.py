# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKThresholdingPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkOtsuMultipleThresholdsImageFilterPython
else:
    import _itkOtsuMultipleThresholdsImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkOtsuMultipleThresholdsImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkOtsuMultipleThresholdsImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImageToImageFilterAPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.itkPointPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkSymmetricSecondRankTensorPython
import itk.ITKCommonBasePython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkRGBPixelPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython

def itkOtsuMultipleThresholdsImageFilterID2ID2_New():
    return itkOtsuMultipleThresholdsImageFilterID2ID2.New()

class itkOtsuMultipleThresholdsImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""


    Threshold an image using multiple Otsu Thresholds.

    This filter creates a labeled image that separates the input image
    into various classes. The filter computes the thresholds using the
    OtsuMultipleThresholdsCalculator and applies those thresholds to the
    input image using the ThresholdLabelerImageFilter. The
    NumberOfHistogramBins and NumberOfThresholds can be set for the
    Calculator. The LabelOffset can be set for the
    ThresholdLabelerImageFilter.

    This filter also includes an option to use the valley emphasis
    algorithm from H.F. Ng, "Automatic thresholding for defect
    detection", Pattern Recognition Letters, (27): 1644-1649, 2006. The
    valley emphasis algorithm is particularly effective when the object to
    be thresholded is small. See the following tests for examples:
    itkOtsuMultipleThresholdsImageFilterTest3 and
    itkOtsuMultipleThresholdsImageFilterTest4 To use this algorithm,
    simple call the setter: SetValleyEmphasis(true) It is turned off by
    default.

    See:  ScalarImageToHistogramGenerator

    See:  OtsuMultipleThresholdsCalculator

    See:   ThresholdLabelerImageFilter
    {Filtering/Thresholding/ThresholdAnImageUsingOtsu,Threshold An Image
    Using Otsu} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterID2ID2_Clone)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterID2ID2_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterID2ID2_GetNumberOfHistogramBins)
    SetNumberOfThresholds = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterID2ID2_SetNumberOfThresholds)
    GetNumberOfThresholds = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterID2ID2_GetNumberOfThresholds)
    SetLabelOffset = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterID2ID2_SetLabelOffset)
    GetLabelOffset = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterID2ID2_GetLabelOffset)
    SetValleyEmphasis = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterID2ID2_SetValleyEmphasis)
    GetValleyEmphasis = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterID2ID2_GetValleyEmphasis)
    ValleyEmphasisOn = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterID2ID2_ValleyEmphasisOn)
    ValleyEmphasisOff = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterID2ID2_ValleyEmphasisOff)
    SetReturnBinMidpoint = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterID2ID2_SetReturnBinMidpoint)
    GetReturnBinMidpoint = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterID2ID2_GetReturnBinMidpoint)
    ReturnBinMidpointOn = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterID2ID2_ReturnBinMidpointOn)
    ReturnBinMidpointOff = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterID2ID2_ReturnBinMidpointOff)
    GetThresholds = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterID2ID2_GetThresholds)
    OutputComparableCheck = _itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterID2ID2_OutputComparableCheck
    
    OutputOStreamWritableCheck = _itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterID2ID2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkOtsuMultipleThresholdsImageFilterPython.delete_itkOtsuMultipleThresholdsImageFilterID2ID2
    cast = _swig_new_static_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkOtsuMultipleThresholdsImageFilterID2ID2

        Create a new object of the class itkOtsuMultipleThresholdsImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkOtsuMultipleThresholdsImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkOtsuMultipleThresholdsImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkOtsuMultipleThresholdsImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkOtsuMultipleThresholdsImageFilterID2ID2 in _itkOtsuMultipleThresholdsImageFilterPython:
_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterID2ID2_swigregister(itkOtsuMultipleThresholdsImageFilterID2ID2)
itkOtsuMultipleThresholdsImageFilterID2ID2___New_orig__ = _itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterID2ID2___New_orig__
itkOtsuMultipleThresholdsImageFilterID2ID2_cast = _itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterID2ID2_cast


def itkOtsuMultipleThresholdsImageFilterID3ID3_New():
    return itkOtsuMultipleThresholdsImageFilterID3ID3.New()

class itkOtsuMultipleThresholdsImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""


    Threshold an image using multiple Otsu Thresholds.

    This filter creates a labeled image that separates the input image
    into various classes. The filter computes the thresholds using the
    OtsuMultipleThresholdsCalculator and applies those thresholds to the
    input image using the ThresholdLabelerImageFilter. The
    NumberOfHistogramBins and NumberOfThresholds can be set for the
    Calculator. The LabelOffset can be set for the
    ThresholdLabelerImageFilter.

    This filter also includes an option to use the valley emphasis
    algorithm from H.F. Ng, "Automatic thresholding for defect
    detection", Pattern Recognition Letters, (27): 1644-1649, 2006. The
    valley emphasis algorithm is particularly effective when the object to
    be thresholded is small. See the following tests for examples:
    itkOtsuMultipleThresholdsImageFilterTest3 and
    itkOtsuMultipleThresholdsImageFilterTest4 To use this algorithm,
    simple call the setter: SetValleyEmphasis(true) It is turned off by
    default.

    See:  ScalarImageToHistogramGenerator

    See:  OtsuMultipleThresholdsCalculator

    See:   ThresholdLabelerImageFilter
    {Filtering/Thresholding/ThresholdAnImageUsingOtsu,Threshold An Image
    Using Otsu} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterID3ID3_Clone)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterID3ID3_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterID3ID3_GetNumberOfHistogramBins)
    SetNumberOfThresholds = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterID3ID3_SetNumberOfThresholds)
    GetNumberOfThresholds = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterID3ID3_GetNumberOfThresholds)
    SetLabelOffset = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterID3ID3_SetLabelOffset)
    GetLabelOffset = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterID3ID3_GetLabelOffset)
    SetValleyEmphasis = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterID3ID3_SetValleyEmphasis)
    GetValleyEmphasis = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterID3ID3_GetValleyEmphasis)
    ValleyEmphasisOn = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterID3ID3_ValleyEmphasisOn)
    ValleyEmphasisOff = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterID3ID3_ValleyEmphasisOff)
    SetReturnBinMidpoint = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterID3ID3_SetReturnBinMidpoint)
    GetReturnBinMidpoint = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterID3ID3_GetReturnBinMidpoint)
    ReturnBinMidpointOn = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterID3ID3_ReturnBinMidpointOn)
    ReturnBinMidpointOff = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterID3ID3_ReturnBinMidpointOff)
    GetThresholds = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterID3ID3_GetThresholds)
    OutputComparableCheck = _itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterID3ID3_OutputComparableCheck
    
    OutputOStreamWritableCheck = _itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterID3ID3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkOtsuMultipleThresholdsImageFilterPython.delete_itkOtsuMultipleThresholdsImageFilterID3ID3
    cast = _swig_new_static_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkOtsuMultipleThresholdsImageFilterID3ID3

        Create a new object of the class itkOtsuMultipleThresholdsImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkOtsuMultipleThresholdsImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkOtsuMultipleThresholdsImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkOtsuMultipleThresholdsImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkOtsuMultipleThresholdsImageFilterID3ID3 in _itkOtsuMultipleThresholdsImageFilterPython:
_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterID3ID3_swigregister(itkOtsuMultipleThresholdsImageFilterID3ID3)
itkOtsuMultipleThresholdsImageFilterID3ID3___New_orig__ = _itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterID3ID3___New_orig__
itkOtsuMultipleThresholdsImageFilterID3ID3_cast = _itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterID3ID3_cast


def itkOtsuMultipleThresholdsImageFilterIF2IF2_New():
    return itkOtsuMultipleThresholdsImageFilterIF2IF2.New()

class itkOtsuMultipleThresholdsImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""


    Threshold an image using multiple Otsu Thresholds.

    This filter creates a labeled image that separates the input image
    into various classes. The filter computes the thresholds using the
    OtsuMultipleThresholdsCalculator and applies those thresholds to the
    input image using the ThresholdLabelerImageFilter. The
    NumberOfHistogramBins and NumberOfThresholds can be set for the
    Calculator. The LabelOffset can be set for the
    ThresholdLabelerImageFilter.

    This filter also includes an option to use the valley emphasis
    algorithm from H.F. Ng, "Automatic thresholding for defect
    detection", Pattern Recognition Letters, (27): 1644-1649, 2006. The
    valley emphasis algorithm is particularly effective when the object to
    be thresholded is small. See the following tests for examples:
    itkOtsuMultipleThresholdsImageFilterTest3 and
    itkOtsuMultipleThresholdsImageFilterTest4 To use this algorithm,
    simple call the setter: SetValleyEmphasis(true) It is turned off by
    default.

    See:  ScalarImageToHistogramGenerator

    See:  OtsuMultipleThresholdsCalculator

    See:   ThresholdLabelerImageFilter
    {Filtering/Thresholding/ThresholdAnImageUsingOtsu,Threshold An Image
    Using Otsu} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIF2IF2_Clone)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIF2IF2_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIF2IF2_GetNumberOfHistogramBins)
    SetNumberOfThresholds = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIF2IF2_SetNumberOfThresholds)
    GetNumberOfThresholds = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIF2IF2_GetNumberOfThresholds)
    SetLabelOffset = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIF2IF2_SetLabelOffset)
    GetLabelOffset = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIF2IF2_GetLabelOffset)
    SetValleyEmphasis = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIF2IF2_SetValleyEmphasis)
    GetValleyEmphasis = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIF2IF2_GetValleyEmphasis)
    ValleyEmphasisOn = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIF2IF2_ValleyEmphasisOn)
    ValleyEmphasisOff = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIF2IF2_ValleyEmphasisOff)
    SetReturnBinMidpoint = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIF2IF2_SetReturnBinMidpoint)
    GetReturnBinMidpoint = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIF2IF2_GetReturnBinMidpoint)
    ReturnBinMidpointOn = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIF2IF2_ReturnBinMidpointOn)
    ReturnBinMidpointOff = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIF2IF2_ReturnBinMidpointOff)
    GetThresholds = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIF2IF2_GetThresholds)
    OutputComparableCheck = _itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIF2IF2_OutputComparableCheck
    
    OutputOStreamWritableCheck = _itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIF2IF2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkOtsuMultipleThresholdsImageFilterPython.delete_itkOtsuMultipleThresholdsImageFilterIF2IF2
    cast = _swig_new_static_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkOtsuMultipleThresholdsImageFilterIF2IF2

        Create a new object of the class itkOtsuMultipleThresholdsImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkOtsuMultipleThresholdsImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkOtsuMultipleThresholdsImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkOtsuMultipleThresholdsImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkOtsuMultipleThresholdsImageFilterIF2IF2 in _itkOtsuMultipleThresholdsImageFilterPython:
_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIF2IF2_swigregister(itkOtsuMultipleThresholdsImageFilterIF2IF2)
itkOtsuMultipleThresholdsImageFilterIF2IF2___New_orig__ = _itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIF2IF2___New_orig__
itkOtsuMultipleThresholdsImageFilterIF2IF2_cast = _itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIF2IF2_cast


def itkOtsuMultipleThresholdsImageFilterIF3IF3_New():
    return itkOtsuMultipleThresholdsImageFilterIF3IF3.New()

class itkOtsuMultipleThresholdsImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""


    Threshold an image using multiple Otsu Thresholds.

    This filter creates a labeled image that separates the input image
    into various classes. The filter computes the thresholds using the
    OtsuMultipleThresholdsCalculator and applies those thresholds to the
    input image using the ThresholdLabelerImageFilter. The
    NumberOfHistogramBins and NumberOfThresholds can be set for the
    Calculator. The LabelOffset can be set for the
    ThresholdLabelerImageFilter.

    This filter also includes an option to use the valley emphasis
    algorithm from H.F. Ng, "Automatic thresholding for defect
    detection", Pattern Recognition Letters, (27): 1644-1649, 2006. The
    valley emphasis algorithm is particularly effective when the object to
    be thresholded is small. See the following tests for examples:
    itkOtsuMultipleThresholdsImageFilterTest3 and
    itkOtsuMultipleThresholdsImageFilterTest4 To use this algorithm,
    simple call the setter: SetValleyEmphasis(true) It is turned off by
    default.

    See:  ScalarImageToHistogramGenerator

    See:  OtsuMultipleThresholdsCalculator

    See:   ThresholdLabelerImageFilter
    {Filtering/Thresholding/ThresholdAnImageUsingOtsu,Threshold An Image
    Using Otsu} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIF3IF3_Clone)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIF3IF3_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIF3IF3_GetNumberOfHistogramBins)
    SetNumberOfThresholds = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIF3IF3_SetNumberOfThresholds)
    GetNumberOfThresholds = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIF3IF3_GetNumberOfThresholds)
    SetLabelOffset = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIF3IF3_SetLabelOffset)
    GetLabelOffset = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIF3IF3_GetLabelOffset)
    SetValleyEmphasis = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIF3IF3_SetValleyEmphasis)
    GetValleyEmphasis = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIF3IF3_GetValleyEmphasis)
    ValleyEmphasisOn = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIF3IF3_ValleyEmphasisOn)
    ValleyEmphasisOff = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIF3IF3_ValleyEmphasisOff)
    SetReturnBinMidpoint = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIF3IF3_SetReturnBinMidpoint)
    GetReturnBinMidpoint = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIF3IF3_GetReturnBinMidpoint)
    ReturnBinMidpointOn = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIF3IF3_ReturnBinMidpointOn)
    ReturnBinMidpointOff = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIF3IF3_ReturnBinMidpointOff)
    GetThresholds = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIF3IF3_GetThresholds)
    OutputComparableCheck = _itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIF3IF3_OutputComparableCheck
    
    OutputOStreamWritableCheck = _itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIF3IF3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkOtsuMultipleThresholdsImageFilterPython.delete_itkOtsuMultipleThresholdsImageFilterIF3IF3
    cast = _swig_new_static_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkOtsuMultipleThresholdsImageFilterIF3IF3

        Create a new object of the class itkOtsuMultipleThresholdsImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkOtsuMultipleThresholdsImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkOtsuMultipleThresholdsImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkOtsuMultipleThresholdsImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkOtsuMultipleThresholdsImageFilterIF3IF3 in _itkOtsuMultipleThresholdsImageFilterPython:
_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIF3IF3_swigregister(itkOtsuMultipleThresholdsImageFilterIF3IF3)
itkOtsuMultipleThresholdsImageFilterIF3IF3___New_orig__ = _itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIF3IF3___New_orig__
itkOtsuMultipleThresholdsImageFilterIF3IF3_cast = _itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIF3IF3_cast


def itkOtsuMultipleThresholdsImageFilterISS2ISS2_New():
    return itkOtsuMultipleThresholdsImageFilterISS2ISS2.New()

class itkOtsuMultipleThresholdsImageFilterISS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""


    Threshold an image using multiple Otsu Thresholds.

    This filter creates a labeled image that separates the input image
    into various classes. The filter computes the thresholds using the
    OtsuMultipleThresholdsCalculator and applies those thresholds to the
    input image using the ThresholdLabelerImageFilter. The
    NumberOfHistogramBins and NumberOfThresholds can be set for the
    Calculator. The LabelOffset can be set for the
    ThresholdLabelerImageFilter.

    This filter also includes an option to use the valley emphasis
    algorithm from H.F. Ng, "Automatic thresholding for defect
    detection", Pattern Recognition Letters, (27): 1644-1649, 2006. The
    valley emphasis algorithm is particularly effective when the object to
    be thresholded is small. See the following tests for examples:
    itkOtsuMultipleThresholdsImageFilterTest3 and
    itkOtsuMultipleThresholdsImageFilterTest4 To use this algorithm,
    simple call the setter: SetValleyEmphasis(true) It is turned off by
    default.

    See:  ScalarImageToHistogramGenerator

    See:  OtsuMultipleThresholdsCalculator

    See:   ThresholdLabelerImageFilter
    {Filtering/Thresholding/ThresholdAnImageUsingOtsu,Threshold An Image
    Using Otsu} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterISS2ISS2_Clone)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterISS2ISS2_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterISS2ISS2_GetNumberOfHistogramBins)
    SetNumberOfThresholds = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterISS2ISS2_SetNumberOfThresholds)
    GetNumberOfThresholds = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterISS2ISS2_GetNumberOfThresholds)
    SetLabelOffset = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterISS2ISS2_SetLabelOffset)
    GetLabelOffset = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterISS2ISS2_GetLabelOffset)
    SetValleyEmphasis = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterISS2ISS2_SetValleyEmphasis)
    GetValleyEmphasis = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterISS2ISS2_GetValleyEmphasis)
    ValleyEmphasisOn = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterISS2ISS2_ValleyEmphasisOn)
    ValleyEmphasisOff = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterISS2ISS2_ValleyEmphasisOff)
    SetReturnBinMidpoint = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterISS2ISS2_SetReturnBinMidpoint)
    GetReturnBinMidpoint = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterISS2ISS2_GetReturnBinMidpoint)
    ReturnBinMidpointOn = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterISS2ISS2_ReturnBinMidpointOn)
    ReturnBinMidpointOff = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterISS2ISS2_ReturnBinMidpointOff)
    GetThresholds = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterISS2ISS2_GetThresholds)
    OutputComparableCheck = _itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterISS2ISS2_OutputComparableCheck
    
    OutputOStreamWritableCheck = _itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterISS2ISS2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkOtsuMultipleThresholdsImageFilterPython.delete_itkOtsuMultipleThresholdsImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkOtsuMultipleThresholdsImageFilterISS2ISS2

        Create a new object of the class itkOtsuMultipleThresholdsImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkOtsuMultipleThresholdsImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkOtsuMultipleThresholdsImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkOtsuMultipleThresholdsImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkOtsuMultipleThresholdsImageFilterISS2ISS2 in _itkOtsuMultipleThresholdsImageFilterPython:
_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterISS2ISS2_swigregister(itkOtsuMultipleThresholdsImageFilterISS2ISS2)
itkOtsuMultipleThresholdsImageFilterISS2ISS2___New_orig__ = _itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterISS2ISS2___New_orig__
itkOtsuMultipleThresholdsImageFilterISS2ISS2_cast = _itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterISS2ISS2_cast


def itkOtsuMultipleThresholdsImageFilterISS3ISS3_New():
    return itkOtsuMultipleThresholdsImageFilterISS3ISS3.New()

class itkOtsuMultipleThresholdsImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""


    Threshold an image using multiple Otsu Thresholds.

    This filter creates a labeled image that separates the input image
    into various classes. The filter computes the thresholds using the
    OtsuMultipleThresholdsCalculator and applies those thresholds to the
    input image using the ThresholdLabelerImageFilter. The
    NumberOfHistogramBins and NumberOfThresholds can be set for the
    Calculator. The LabelOffset can be set for the
    ThresholdLabelerImageFilter.

    This filter also includes an option to use the valley emphasis
    algorithm from H.F. Ng, "Automatic thresholding for defect
    detection", Pattern Recognition Letters, (27): 1644-1649, 2006. The
    valley emphasis algorithm is particularly effective when the object to
    be thresholded is small. See the following tests for examples:
    itkOtsuMultipleThresholdsImageFilterTest3 and
    itkOtsuMultipleThresholdsImageFilterTest4 To use this algorithm,
    simple call the setter: SetValleyEmphasis(true) It is turned off by
    default.

    See:  ScalarImageToHistogramGenerator

    See:  OtsuMultipleThresholdsCalculator

    See:   ThresholdLabelerImageFilter
    {Filtering/Thresholding/ThresholdAnImageUsingOtsu,Threshold An Image
    Using Otsu} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterISS3ISS3_Clone)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterISS3ISS3_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterISS3ISS3_GetNumberOfHistogramBins)
    SetNumberOfThresholds = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterISS3ISS3_SetNumberOfThresholds)
    GetNumberOfThresholds = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterISS3ISS3_GetNumberOfThresholds)
    SetLabelOffset = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterISS3ISS3_SetLabelOffset)
    GetLabelOffset = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterISS3ISS3_GetLabelOffset)
    SetValleyEmphasis = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterISS3ISS3_SetValleyEmphasis)
    GetValleyEmphasis = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterISS3ISS3_GetValleyEmphasis)
    ValleyEmphasisOn = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterISS3ISS3_ValleyEmphasisOn)
    ValleyEmphasisOff = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterISS3ISS3_ValleyEmphasisOff)
    SetReturnBinMidpoint = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterISS3ISS3_SetReturnBinMidpoint)
    GetReturnBinMidpoint = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterISS3ISS3_GetReturnBinMidpoint)
    ReturnBinMidpointOn = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterISS3ISS3_ReturnBinMidpointOn)
    ReturnBinMidpointOff = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterISS3ISS3_ReturnBinMidpointOff)
    GetThresholds = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterISS3ISS3_GetThresholds)
    OutputComparableCheck = _itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterISS3ISS3_OutputComparableCheck
    
    OutputOStreamWritableCheck = _itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterISS3ISS3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkOtsuMultipleThresholdsImageFilterPython.delete_itkOtsuMultipleThresholdsImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkOtsuMultipleThresholdsImageFilterISS3ISS3

        Create a new object of the class itkOtsuMultipleThresholdsImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkOtsuMultipleThresholdsImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkOtsuMultipleThresholdsImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkOtsuMultipleThresholdsImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkOtsuMultipleThresholdsImageFilterISS3ISS3 in _itkOtsuMultipleThresholdsImageFilterPython:
_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterISS3ISS3_swigregister(itkOtsuMultipleThresholdsImageFilterISS3ISS3)
itkOtsuMultipleThresholdsImageFilterISS3ISS3___New_orig__ = _itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterISS3ISS3___New_orig__
itkOtsuMultipleThresholdsImageFilterISS3ISS3_cast = _itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterISS3ISS3_cast


def itkOtsuMultipleThresholdsImageFilterIUC2IUC2_New():
    return itkOtsuMultipleThresholdsImageFilterIUC2IUC2.New()

class itkOtsuMultipleThresholdsImageFilterIUC2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""


    Threshold an image using multiple Otsu Thresholds.

    This filter creates a labeled image that separates the input image
    into various classes. The filter computes the thresholds using the
    OtsuMultipleThresholdsCalculator and applies those thresholds to the
    input image using the ThresholdLabelerImageFilter. The
    NumberOfHistogramBins and NumberOfThresholds can be set for the
    Calculator. The LabelOffset can be set for the
    ThresholdLabelerImageFilter.

    This filter also includes an option to use the valley emphasis
    algorithm from H.F. Ng, "Automatic thresholding for defect
    detection", Pattern Recognition Letters, (27): 1644-1649, 2006. The
    valley emphasis algorithm is particularly effective when the object to
    be thresholded is small. See the following tests for examples:
    itkOtsuMultipleThresholdsImageFilterTest3 and
    itkOtsuMultipleThresholdsImageFilterTest4 To use this algorithm,
    simple call the setter: SetValleyEmphasis(true) It is turned off by
    default.

    See:  ScalarImageToHistogramGenerator

    See:  OtsuMultipleThresholdsCalculator

    See:   ThresholdLabelerImageFilter
    {Filtering/Thresholding/ThresholdAnImageUsingOtsu,Threshold An Image
    Using Otsu} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUC2IUC2_Clone)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUC2IUC2_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUC2IUC2_GetNumberOfHistogramBins)
    SetNumberOfThresholds = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUC2IUC2_SetNumberOfThresholds)
    GetNumberOfThresholds = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUC2IUC2_GetNumberOfThresholds)
    SetLabelOffset = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUC2IUC2_SetLabelOffset)
    GetLabelOffset = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUC2IUC2_GetLabelOffset)
    SetValleyEmphasis = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUC2IUC2_SetValleyEmphasis)
    GetValleyEmphasis = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUC2IUC2_GetValleyEmphasis)
    ValleyEmphasisOn = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUC2IUC2_ValleyEmphasisOn)
    ValleyEmphasisOff = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUC2IUC2_ValleyEmphasisOff)
    SetReturnBinMidpoint = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUC2IUC2_SetReturnBinMidpoint)
    GetReturnBinMidpoint = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUC2IUC2_GetReturnBinMidpoint)
    ReturnBinMidpointOn = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUC2IUC2_ReturnBinMidpointOn)
    ReturnBinMidpointOff = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUC2IUC2_ReturnBinMidpointOff)
    GetThresholds = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUC2IUC2_GetThresholds)
    OutputComparableCheck = _itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUC2IUC2_OutputComparableCheck
    
    OutputOStreamWritableCheck = _itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUC2IUC2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkOtsuMultipleThresholdsImageFilterPython.delete_itkOtsuMultipleThresholdsImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkOtsuMultipleThresholdsImageFilterIUC2IUC2

        Create a new object of the class itkOtsuMultipleThresholdsImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkOtsuMultipleThresholdsImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkOtsuMultipleThresholdsImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkOtsuMultipleThresholdsImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkOtsuMultipleThresholdsImageFilterIUC2IUC2 in _itkOtsuMultipleThresholdsImageFilterPython:
_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUC2IUC2_swigregister(itkOtsuMultipleThresholdsImageFilterIUC2IUC2)
itkOtsuMultipleThresholdsImageFilterIUC2IUC2___New_orig__ = _itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUC2IUC2___New_orig__
itkOtsuMultipleThresholdsImageFilterIUC2IUC2_cast = _itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUC2IUC2_cast


def itkOtsuMultipleThresholdsImageFilterIUC3IUC3_New():
    return itkOtsuMultipleThresholdsImageFilterIUC3IUC3.New()

class itkOtsuMultipleThresholdsImageFilterIUC3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""


    Threshold an image using multiple Otsu Thresholds.

    This filter creates a labeled image that separates the input image
    into various classes. The filter computes the thresholds using the
    OtsuMultipleThresholdsCalculator and applies those thresholds to the
    input image using the ThresholdLabelerImageFilter. The
    NumberOfHistogramBins and NumberOfThresholds can be set for the
    Calculator. The LabelOffset can be set for the
    ThresholdLabelerImageFilter.

    This filter also includes an option to use the valley emphasis
    algorithm from H.F. Ng, "Automatic thresholding for defect
    detection", Pattern Recognition Letters, (27): 1644-1649, 2006. The
    valley emphasis algorithm is particularly effective when the object to
    be thresholded is small. See the following tests for examples:
    itkOtsuMultipleThresholdsImageFilterTest3 and
    itkOtsuMultipleThresholdsImageFilterTest4 To use this algorithm,
    simple call the setter: SetValleyEmphasis(true) It is turned off by
    default.

    See:  ScalarImageToHistogramGenerator

    See:  OtsuMultipleThresholdsCalculator

    See:   ThresholdLabelerImageFilter
    {Filtering/Thresholding/ThresholdAnImageUsingOtsu,Threshold An Image
    Using Otsu} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUC3IUC3_Clone)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUC3IUC3_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUC3IUC3_GetNumberOfHistogramBins)
    SetNumberOfThresholds = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUC3IUC3_SetNumberOfThresholds)
    GetNumberOfThresholds = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUC3IUC3_GetNumberOfThresholds)
    SetLabelOffset = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUC3IUC3_SetLabelOffset)
    GetLabelOffset = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUC3IUC3_GetLabelOffset)
    SetValleyEmphasis = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUC3IUC3_SetValleyEmphasis)
    GetValleyEmphasis = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUC3IUC3_GetValleyEmphasis)
    ValleyEmphasisOn = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUC3IUC3_ValleyEmphasisOn)
    ValleyEmphasisOff = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUC3IUC3_ValleyEmphasisOff)
    SetReturnBinMidpoint = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUC3IUC3_SetReturnBinMidpoint)
    GetReturnBinMidpoint = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUC3IUC3_GetReturnBinMidpoint)
    ReturnBinMidpointOn = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUC3IUC3_ReturnBinMidpointOn)
    ReturnBinMidpointOff = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUC3IUC3_ReturnBinMidpointOff)
    GetThresholds = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUC3IUC3_GetThresholds)
    OutputComparableCheck = _itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUC3IUC3_OutputComparableCheck
    
    OutputOStreamWritableCheck = _itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUC3IUC3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkOtsuMultipleThresholdsImageFilterPython.delete_itkOtsuMultipleThresholdsImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkOtsuMultipleThresholdsImageFilterIUC3IUC3

        Create a new object of the class itkOtsuMultipleThresholdsImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkOtsuMultipleThresholdsImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkOtsuMultipleThresholdsImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkOtsuMultipleThresholdsImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkOtsuMultipleThresholdsImageFilterIUC3IUC3 in _itkOtsuMultipleThresholdsImageFilterPython:
_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUC3IUC3_swigregister(itkOtsuMultipleThresholdsImageFilterIUC3IUC3)
itkOtsuMultipleThresholdsImageFilterIUC3IUC3___New_orig__ = _itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUC3IUC3___New_orig__
itkOtsuMultipleThresholdsImageFilterIUC3IUC3_cast = _itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUC3IUC3_cast


def itkOtsuMultipleThresholdsImageFilterIUS2IUS2_New():
    return itkOtsuMultipleThresholdsImageFilterIUS2IUS2.New()

class itkOtsuMultipleThresholdsImageFilterIUS2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""


    Threshold an image using multiple Otsu Thresholds.

    This filter creates a labeled image that separates the input image
    into various classes. The filter computes the thresholds using the
    OtsuMultipleThresholdsCalculator and applies those thresholds to the
    input image using the ThresholdLabelerImageFilter. The
    NumberOfHistogramBins and NumberOfThresholds can be set for the
    Calculator. The LabelOffset can be set for the
    ThresholdLabelerImageFilter.

    This filter also includes an option to use the valley emphasis
    algorithm from H.F. Ng, "Automatic thresholding for defect
    detection", Pattern Recognition Letters, (27): 1644-1649, 2006. The
    valley emphasis algorithm is particularly effective when the object to
    be thresholded is small. See the following tests for examples:
    itkOtsuMultipleThresholdsImageFilterTest3 and
    itkOtsuMultipleThresholdsImageFilterTest4 To use this algorithm,
    simple call the setter: SetValleyEmphasis(true) It is turned off by
    default.

    See:  ScalarImageToHistogramGenerator

    See:  OtsuMultipleThresholdsCalculator

    See:   ThresholdLabelerImageFilter
    {Filtering/Thresholding/ThresholdAnImageUsingOtsu,Threshold An Image
    Using Otsu} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUS2IUS2_Clone)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUS2IUS2_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUS2IUS2_GetNumberOfHistogramBins)
    SetNumberOfThresholds = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUS2IUS2_SetNumberOfThresholds)
    GetNumberOfThresholds = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUS2IUS2_GetNumberOfThresholds)
    SetLabelOffset = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUS2IUS2_SetLabelOffset)
    GetLabelOffset = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUS2IUS2_GetLabelOffset)
    SetValleyEmphasis = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUS2IUS2_SetValleyEmphasis)
    GetValleyEmphasis = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUS2IUS2_GetValleyEmphasis)
    ValleyEmphasisOn = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUS2IUS2_ValleyEmphasisOn)
    ValleyEmphasisOff = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUS2IUS2_ValleyEmphasisOff)
    SetReturnBinMidpoint = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUS2IUS2_SetReturnBinMidpoint)
    GetReturnBinMidpoint = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUS2IUS2_GetReturnBinMidpoint)
    ReturnBinMidpointOn = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUS2IUS2_ReturnBinMidpointOn)
    ReturnBinMidpointOff = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUS2IUS2_ReturnBinMidpointOff)
    GetThresholds = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUS2IUS2_GetThresholds)
    OutputComparableCheck = _itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUS2IUS2_OutputComparableCheck
    
    OutputOStreamWritableCheck = _itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUS2IUS2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkOtsuMultipleThresholdsImageFilterPython.delete_itkOtsuMultipleThresholdsImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkOtsuMultipleThresholdsImageFilterIUS2IUS2

        Create a new object of the class itkOtsuMultipleThresholdsImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkOtsuMultipleThresholdsImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkOtsuMultipleThresholdsImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkOtsuMultipleThresholdsImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkOtsuMultipleThresholdsImageFilterIUS2IUS2 in _itkOtsuMultipleThresholdsImageFilterPython:
_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUS2IUS2_swigregister(itkOtsuMultipleThresholdsImageFilterIUS2IUS2)
itkOtsuMultipleThresholdsImageFilterIUS2IUS2___New_orig__ = _itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUS2IUS2___New_orig__
itkOtsuMultipleThresholdsImageFilterIUS2IUS2_cast = _itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUS2IUS2_cast


def itkOtsuMultipleThresholdsImageFilterIUS3IUS3_New():
    return itkOtsuMultipleThresholdsImageFilterIUS3IUS3.New()

class itkOtsuMultipleThresholdsImageFilterIUS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""


    Threshold an image using multiple Otsu Thresholds.

    This filter creates a labeled image that separates the input image
    into various classes. The filter computes the thresholds using the
    OtsuMultipleThresholdsCalculator and applies those thresholds to the
    input image using the ThresholdLabelerImageFilter. The
    NumberOfHistogramBins and NumberOfThresholds can be set for the
    Calculator. The LabelOffset can be set for the
    ThresholdLabelerImageFilter.

    This filter also includes an option to use the valley emphasis
    algorithm from H.F. Ng, "Automatic thresholding for defect
    detection", Pattern Recognition Letters, (27): 1644-1649, 2006. The
    valley emphasis algorithm is particularly effective when the object to
    be thresholded is small. See the following tests for examples:
    itkOtsuMultipleThresholdsImageFilterTest3 and
    itkOtsuMultipleThresholdsImageFilterTest4 To use this algorithm,
    simple call the setter: SetValleyEmphasis(true) It is turned off by
    default.

    See:  ScalarImageToHistogramGenerator

    See:  OtsuMultipleThresholdsCalculator

    See:   ThresholdLabelerImageFilter
    {Filtering/Thresholding/ThresholdAnImageUsingOtsu,Threshold An Image
    Using Otsu} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUS3IUS3_Clone)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUS3IUS3_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUS3IUS3_GetNumberOfHistogramBins)
    SetNumberOfThresholds = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUS3IUS3_SetNumberOfThresholds)
    GetNumberOfThresholds = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUS3IUS3_GetNumberOfThresholds)
    SetLabelOffset = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUS3IUS3_SetLabelOffset)
    GetLabelOffset = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUS3IUS3_GetLabelOffset)
    SetValleyEmphasis = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUS3IUS3_SetValleyEmphasis)
    GetValleyEmphasis = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUS3IUS3_GetValleyEmphasis)
    ValleyEmphasisOn = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUS3IUS3_ValleyEmphasisOn)
    ValleyEmphasisOff = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUS3IUS3_ValleyEmphasisOff)
    SetReturnBinMidpoint = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUS3IUS3_SetReturnBinMidpoint)
    GetReturnBinMidpoint = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUS3IUS3_GetReturnBinMidpoint)
    ReturnBinMidpointOn = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUS3IUS3_ReturnBinMidpointOn)
    ReturnBinMidpointOff = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUS3IUS3_ReturnBinMidpointOff)
    GetThresholds = _swig_new_instance_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUS3IUS3_GetThresholds)
    OutputComparableCheck = _itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUS3IUS3_OutputComparableCheck
    
    OutputOStreamWritableCheck = _itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUS3IUS3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkOtsuMultipleThresholdsImageFilterPython.delete_itkOtsuMultipleThresholdsImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkOtsuMultipleThresholdsImageFilterIUS3IUS3

        Create a new object of the class itkOtsuMultipleThresholdsImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkOtsuMultipleThresholdsImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkOtsuMultipleThresholdsImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkOtsuMultipleThresholdsImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkOtsuMultipleThresholdsImageFilterIUS3IUS3 in _itkOtsuMultipleThresholdsImageFilterPython:
_itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUS3IUS3_swigregister(itkOtsuMultipleThresholdsImageFilterIUS3IUS3)
itkOtsuMultipleThresholdsImageFilterIUS3IUS3___New_orig__ = _itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUS3IUS3___New_orig__
itkOtsuMultipleThresholdsImageFilterIUS3IUS3_cast = _itkOtsuMultipleThresholdsImageFilterPython.itkOtsuMultipleThresholdsImageFilterIUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def otsu_multiple_thresholds_image_filter(*args, **kwargs):
    """Procedural interface for OtsuMultipleThresholdsImageFilter"""
    import itk
    instance = itk.OtsuMultipleThresholdsImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def otsu_multiple_thresholds_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.OtsuMultipleThresholdsImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.OtsuMultipleThresholdsImageFilter.values()[0]
    else:
        filter_object = itk.OtsuMultipleThresholdsImageFilter

    otsu_multiple_thresholds_image_filter.__doc__ = filter_object.__doc__
    otsu_multiple_thresholds_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    otsu_multiple_thresholds_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.OtsuMultipleThresholdsImageFilter, itkTemplate.itkTemplate):
        otsu_multiple_thresholds_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        otsu_multiple_thresholds_image_filter.__doc__ += "\n"
        otsu_multiple_thresholds_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        otsu_multiple_thresholds_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



