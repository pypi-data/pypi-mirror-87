# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageComparePython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkCheckerBoardImageFilterPython
else:
    import _itkCheckerBoardImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkCheckerBoardImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkCheckerBoardImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImageToImageFilterBPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkImagePython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.ITKCommonBasePython
import itk.itkPointPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkRGBAPixelPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterAPython

def itkCheckerBoardImageFilterICF2_New():
    return itkCheckerBoardImageFilterICF2.New()

class itkCheckerBoardImageFilterICF2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF2):
    r"""


    Combines two images in a checkerboard pattern.

    CheckerBoardImageFilter takes two input images that must have the same
    dimension, size, origin and spacing and produces an output image of
    the same size by combining the pixels from the two input images in a
    checkerboard pattern. This filter is commonly used for visually
    comparing two images, in particular for evaluating the results of an
    image registration process.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    {Filtering/ImageCompare/CombineTwoImagesWithCheckerBoardPattern,Combin
    e Two Images With Checker Board Pattern} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICF2___New_orig__)
    Clone = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICF2_Clone)
    SetInput1 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICF2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICF2_SetInput2)
    SetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICF2_SetCheckerPattern)
    GetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICF2_GetCheckerPattern)
    __swig_destroy__ = _itkCheckerBoardImageFilterPython.delete_itkCheckerBoardImageFilterICF2
    cast = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICF2_cast)

    def New(*args, **kargs):
        """New() -> itkCheckerBoardImageFilterICF2

        Create a new object of the class itkCheckerBoardImageFilterICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCheckerBoardImageFilterICF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCheckerBoardImageFilterICF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCheckerBoardImageFilterICF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCheckerBoardImageFilterICF2 in _itkCheckerBoardImageFilterPython:
_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICF2_swigregister(itkCheckerBoardImageFilterICF2)
itkCheckerBoardImageFilterICF2___New_orig__ = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICF2___New_orig__
itkCheckerBoardImageFilterICF2_cast = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICF2_cast


def itkCheckerBoardImageFilterICF3_New():
    return itkCheckerBoardImageFilterICF3.New()

class itkCheckerBoardImageFilterICF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF3):
    r"""


    Combines two images in a checkerboard pattern.

    CheckerBoardImageFilter takes two input images that must have the same
    dimension, size, origin and spacing and produces an output image of
    the same size by combining the pixels from the two input images in a
    checkerboard pattern. This filter is commonly used for visually
    comparing two images, in particular for evaluating the results of an
    image registration process.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    {Filtering/ImageCompare/CombineTwoImagesWithCheckerBoardPattern,Combin
    e Two Images With Checker Board Pattern} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICF3___New_orig__)
    Clone = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICF3_Clone)
    SetInput1 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICF3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICF3_SetInput2)
    SetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICF3_SetCheckerPattern)
    GetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICF3_GetCheckerPattern)
    __swig_destroy__ = _itkCheckerBoardImageFilterPython.delete_itkCheckerBoardImageFilterICF3
    cast = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICF3_cast)

    def New(*args, **kargs):
        """New() -> itkCheckerBoardImageFilterICF3

        Create a new object of the class itkCheckerBoardImageFilterICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCheckerBoardImageFilterICF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCheckerBoardImageFilterICF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCheckerBoardImageFilterICF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCheckerBoardImageFilterICF3 in _itkCheckerBoardImageFilterPython:
_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICF3_swigregister(itkCheckerBoardImageFilterICF3)
itkCheckerBoardImageFilterICF3___New_orig__ = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICF3___New_orig__
itkCheckerBoardImageFilterICF3_cast = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICF3_cast


def itkCheckerBoardImageFilterICVF22_New():
    return itkCheckerBoardImageFilterICVF22.New()

class itkCheckerBoardImageFilterICVF22(itk.itkImageToImageFilterAPython.itkImageToImageFilterICVF22ICVF22):
    r"""


    Combines two images in a checkerboard pattern.

    CheckerBoardImageFilter takes two input images that must have the same
    dimension, size, origin and spacing and produces an output image of
    the same size by combining the pixels from the two input images in a
    checkerboard pattern. This filter is commonly used for visually
    comparing two images, in particular for evaluating the results of an
    image registration process.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    {Filtering/ImageCompare/CombineTwoImagesWithCheckerBoardPattern,Combin
    e Two Images With Checker Board Pattern} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF22_Clone)
    SetInput1 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF22_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF22_SetInput2)
    SetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF22_SetCheckerPattern)
    GetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF22_GetCheckerPattern)
    __swig_destroy__ = _itkCheckerBoardImageFilterPython.delete_itkCheckerBoardImageFilterICVF22
    cast = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF22_cast)

    def New(*args, **kargs):
        """New() -> itkCheckerBoardImageFilterICVF22

        Create a new object of the class itkCheckerBoardImageFilterICVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCheckerBoardImageFilterICVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCheckerBoardImageFilterICVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCheckerBoardImageFilterICVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCheckerBoardImageFilterICVF22 in _itkCheckerBoardImageFilterPython:
_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF22_swigregister(itkCheckerBoardImageFilterICVF22)
itkCheckerBoardImageFilterICVF22___New_orig__ = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF22___New_orig__
itkCheckerBoardImageFilterICVF22_cast = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF22_cast


def itkCheckerBoardImageFilterICVF23_New():
    return itkCheckerBoardImageFilterICVF23.New()

class itkCheckerBoardImageFilterICVF23(itk.itkImageToImageFilterAPython.itkImageToImageFilterICVF23ICVF23):
    r"""


    Combines two images in a checkerboard pattern.

    CheckerBoardImageFilter takes two input images that must have the same
    dimension, size, origin and spacing and produces an output image of
    the same size by combining the pixels from the two input images in a
    checkerboard pattern. This filter is commonly used for visually
    comparing two images, in particular for evaluating the results of an
    image registration process.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    {Filtering/ImageCompare/CombineTwoImagesWithCheckerBoardPattern,Combin
    e Two Images With Checker Board Pattern} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF23___New_orig__)
    Clone = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF23_Clone)
    SetInput1 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF23_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF23_SetInput2)
    SetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF23_SetCheckerPattern)
    GetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF23_GetCheckerPattern)
    __swig_destroy__ = _itkCheckerBoardImageFilterPython.delete_itkCheckerBoardImageFilterICVF23
    cast = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF23_cast)

    def New(*args, **kargs):
        """New() -> itkCheckerBoardImageFilterICVF23

        Create a new object of the class itkCheckerBoardImageFilterICVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCheckerBoardImageFilterICVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCheckerBoardImageFilterICVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCheckerBoardImageFilterICVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCheckerBoardImageFilterICVF23 in _itkCheckerBoardImageFilterPython:
_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF23_swigregister(itkCheckerBoardImageFilterICVF23)
itkCheckerBoardImageFilterICVF23___New_orig__ = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF23___New_orig__
itkCheckerBoardImageFilterICVF23_cast = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF23_cast


def itkCheckerBoardImageFilterICVF32_New():
    return itkCheckerBoardImageFilterICVF32.New()

class itkCheckerBoardImageFilterICVF32(itk.itkImageToImageFilterAPython.itkImageToImageFilterICVF32ICVF32):
    r"""


    Combines two images in a checkerboard pattern.

    CheckerBoardImageFilter takes two input images that must have the same
    dimension, size, origin and spacing and produces an output image of
    the same size by combining the pixels from the two input images in a
    checkerboard pattern. This filter is commonly used for visually
    comparing two images, in particular for evaluating the results of an
    image registration process.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    {Filtering/ImageCompare/CombineTwoImagesWithCheckerBoardPattern,Combin
    e Two Images With Checker Board Pattern} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF32___New_orig__)
    Clone = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF32_Clone)
    SetInput1 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF32_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF32_SetInput2)
    SetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF32_SetCheckerPattern)
    GetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF32_GetCheckerPattern)
    __swig_destroy__ = _itkCheckerBoardImageFilterPython.delete_itkCheckerBoardImageFilterICVF32
    cast = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF32_cast)

    def New(*args, **kargs):
        """New() -> itkCheckerBoardImageFilterICVF32

        Create a new object of the class itkCheckerBoardImageFilterICVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCheckerBoardImageFilterICVF32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCheckerBoardImageFilterICVF32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCheckerBoardImageFilterICVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCheckerBoardImageFilterICVF32 in _itkCheckerBoardImageFilterPython:
_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF32_swigregister(itkCheckerBoardImageFilterICVF32)
itkCheckerBoardImageFilterICVF32___New_orig__ = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF32___New_orig__
itkCheckerBoardImageFilterICVF32_cast = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF32_cast


def itkCheckerBoardImageFilterICVF33_New():
    return itkCheckerBoardImageFilterICVF33.New()

class itkCheckerBoardImageFilterICVF33(itk.itkImageToImageFilterAPython.itkImageToImageFilterICVF33ICVF33):
    r"""


    Combines two images in a checkerboard pattern.

    CheckerBoardImageFilter takes two input images that must have the same
    dimension, size, origin and spacing and produces an output image of
    the same size by combining the pixels from the two input images in a
    checkerboard pattern. This filter is commonly used for visually
    comparing two images, in particular for evaluating the results of an
    image registration process.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    {Filtering/ImageCompare/CombineTwoImagesWithCheckerBoardPattern,Combin
    e Two Images With Checker Board Pattern} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF33_Clone)
    SetInput1 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF33_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF33_SetInput2)
    SetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF33_SetCheckerPattern)
    GetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF33_GetCheckerPattern)
    __swig_destroy__ = _itkCheckerBoardImageFilterPython.delete_itkCheckerBoardImageFilterICVF33
    cast = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF33_cast)

    def New(*args, **kargs):
        """New() -> itkCheckerBoardImageFilterICVF33

        Create a new object of the class itkCheckerBoardImageFilterICVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCheckerBoardImageFilterICVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCheckerBoardImageFilterICVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCheckerBoardImageFilterICVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCheckerBoardImageFilterICVF33 in _itkCheckerBoardImageFilterPython:
_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF33_swigregister(itkCheckerBoardImageFilterICVF33)
itkCheckerBoardImageFilterICVF33___New_orig__ = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF33___New_orig__
itkCheckerBoardImageFilterICVF33_cast = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF33_cast


def itkCheckerBoardImageFilterICVF42_New():
    return itkCheckerBoardImageFilterICVF42.New()

class itkCheckerBoardImageFilterICVF42(itk.itkImageToImageFilterAPython.itkImageToImageFilterICVF42ICVF42):
    r"""


    Combines two images in a checkerboard pattern.

    CheckerBoardImageFilter takes two input images that must have the same
    dimension, size, origin and spacing and produces an output image of
    the same size by combining the pixels from the two input images in a
    checkerboard pattern. This filter is commonly used for visually
    comparing two images, in particular for evaluating the results of an
    image registration process.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    {Filtering/ImageCompare/CombineTwoImagesWithCheckerBoardPattern,Combin
    e Two Images With Checker Board Pattern} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF42___New_orig__)
    Clone = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF42_Clone)
    SetInput1 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF42_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF42_SetInput2)
    SetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF42_SetCheckerPattern)
    GetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF42_GetCheckerPattern)
    __swig_destroy__ = _itkCheckerBoardImageFilterPython.delete_itkCheckerBoardImageFilterICVF42
    cast = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF42_cast)

    def New(*args, **kargs):
        """New() -> itkCheckerBoardImageFilterICVF42

        Create a new object of the class itkCheckerBoardImageFilterICVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCheckerBoardImageFilterICVF42.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCheckerBoardImageFilterICVF42.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCheckerBoardImageFilterICVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCheckerBoardImageFilterICVF42 in _itkCheckerBoardImageFilterPython:
_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF42_swigregister(itkCheckerBoardImageFilterICVF42)
itkCheckerBoardImageFilterICVF42___New_orig__ = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF42___New_orig__
itkCheckerBoardImageFilterICVF42_cast = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF42_cast


def itkCheckerBoardImageFilterICVF43_New():
    return itkCheckerBoardImageFilterICVF43.New()

class itkCheckerBoardImageFilterICVF43(itk.itkImageToImageFilterAPython.itkImageToImageFilterICVF43ICVF43):
    r"""


    Combines two images in a checkerboard pattern.

    CheckerBoardImageFilter takes two input images that must have the same
    dimension, size, origin and spacing and produces an output image of
    the same size by combining the pixels from the two input images in a
    checkerboard pattern. This filter is commonly used for visually
    comparing two images, in particular for evaluating the results of an
    image registration process.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    {Filtering/ImageCompare/CombineTwoImagesWithCheckerBoardPattern,Combin
    e Two Images With Checker Board Pattern} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF43___New_orig__)
    Clone = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF43_Clone)
    SetInput1 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF43_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF43_SetInput2)
    SetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF43_SetCheckerPattern)
    GetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF43_GetCheckerPattern)
    __swig_destroy__ = _itkCheckerBoardImageFilterPython.delete_itkCheckerBoardImageFilterICVF43
    cast = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF43_cast)

    def New(*args, **kargs):
        """New() -> itkCheckerBoardImageFilterICVF43

        Create a new object of the class itkCheckerBoardImageFilterICVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCheckerBoardImageFilterICVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCheckerBoardImageFilterICVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCheckerBoardImageFilterICVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCheckerBoardImageFilterICVF43 in _itkCheckerBoardImageFilterPython:
_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF43_swigregister(itkCheckerBoardImageFilterICVF43)
itkCheckerBoardImageFilterICVF43___New_orig__ = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF43___New_orig__
itkCheckerBoardImageFilterICVF43_cast = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterICVF43_cast


def itkCheckerBoardImageFilterID2_New():
    return itkCheckerBoardImageFilterID2.New()

class itkCheckerBoardImageFilterID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""


    Combines two images in a checkerboard pattern.

    CheckerBoardImageFilter takes two input images that must have the same
    dimension, size, origin and spacing and produces an output image of
    the same size by combining the pixels from the two input images in a
    checkerboard pattern. This filter is commonly used for visually
    comparing two images, in particular for evaluating the results of an
    image registration process.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    {Filtering/ImageCompare/CombineTwoImagesWithCheckerBoardPattern,Combin
    e Two Images With Checker Board Pattern} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterID2___New_orig__)
    Clone = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterID2_Clone)
    SetInput1 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterID2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterID2_SetInput2)
    SetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterID2_SetCheckerPattern)
    GetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterID2_GetCheckerPattern)
    __swig_destroy__ = _itkCheckerBoardImageFilterPython.delete_itkCheckerBoardImageFilterID2
    cast = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterID2_cast)

    def New(*args, **kargs):
        """New() -> itkCheckerBoardImageFilterID2

        Create a new object of the class itkCheckerBoardImageFilterID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCheckerBoardImageFilterID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCheckerBoardImageFilterID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCheckerBoardImageFilterID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCheckerBoardImageFilterID2 in _itkCheckerBoardImageFilterPython:
_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterID2_swigregister(itkCheckerBoardImageFilterID2)
itkCheckerBoardImageFilterID2___New_orig__ = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterID2___New_orig__
itkCheckerBoardImageFilterID2_cast = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterID2_cast


def itkCheckerBoardImageFilterID3_New():
    return itkCheckerBoardImageFilterID3.New()

class itkCheckerBoardImageFilterID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""


    Combines two images in a checkerboard pattern.

    CheckerBoardImageFilter takes two input images that must have the same
    dimension, size, origin and spacing and produces an output image of
    the same size by combining the pixels from the two input images in a
    checkerboard pattern. This filter is commonly used for visually
    comparing two images, in particular for evaluating the results of an
    image registration process.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    {Filtering/ImageCompare/CombineTwoImagesWithCheckerBoardPattern,Combin
    e Two Images With Checker Board Pattern} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterID3___New_orig__)
    Clone = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterID3_Clone)
    SetInput1 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterID3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterID3_SetInput2)
    SetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterID3_SetCheckerPattern)
    GetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterID3_GetCheckerPattern)
    __swig_destroy__ = _itkCheckerBoardImageFilterPython.delete_itkCheckerBoardImageFilterID3
    cast = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterID3_cast)

    def New(*args, **kargs):
        """New() -> itkCheckerBoardImageFilterID3

        Create a new object of the class itkCheckerBoardImageFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCheckerBoardImageFilterID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCheckerBoardImageFilterID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCheckerBoardImageFilterID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCheckerBoardImageFilterID3 in _itkCheckerBoardImageFilterPython:
_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterID3_swigregister(itkCheckerBoardImageFilterID3)
itkCheckerBoardImageFilterID3___New_orig__ = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterID3___New_orig__
itkCheckerBoardImageFilterID3_cast = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterID3_cast


def itkCheckerBoardImageFilterIF2_New():
    return itkCheckerBoardImageFilterIF2.New()

class itkCheckerBoardImageFilterIF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""


    Combines two images in a checkerboard pattern.

    CheckerBoardImageFilter takes two input images that must have the same
    dimension, size, origin and spacing and produces an output image of
    the same size by combining the pixels from the two input images in a
    checkerboard pattern. This filter is commonly used for visually
    comparing two images, in particular for evaluating the results of an
    image registration process.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    {Filtering/ImageCompare/CombineTwoImagesWithCheckerBoardPattern,Combin
    e Two Images With Checker Board Pattern} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIF2___New_orig__)
    Clone = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIF2_Clone)
    SetInput1 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIF2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIF2_SetInput2)
    SetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIF2_SetCheckerPattern)
    GetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIF2_GetCheckerPattern)
    __swig_destroy__ = _itkCheckerBoardImageFilterPython.delete_itkCheckerBoardImageFilterIF2
    cast = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIF2_cast)

    def New(*args, **kargs):
        """New() -> itkCheckerBoardImageFilterIF2

        Create a new object of the class itkCheckerBoardImageFilterIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCheckerBoardImageFilterIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCheckerBoardImageFilterIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCheckerBoardImageFilterIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCheckerBoardImageFilterIF2 in _itkCheckerBoardImageFilterPython:
_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIF2_swigregister(itkCheckerBoardImageFilterIF2)
itkCheckerBoardImageFilterIF2___New_orig__ = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIF2___New_orig__
itkCheckerBoardImageFilterIF2_cast = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIF2_cast


def itkCheckerBoardImageFilterIF3_New():
    return itkCheckerBoardImageFilterIF3.New()

class itkCheckerBoardImageFilterIF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""


    Combines two images in a checkerboard pattern.

    CheckerBoardImageFilter takes two input images that must have the same
    dimension, size, origin and spacing and produces an output image of
    the same size by combining the pixels from the two input images in a
    checkerboard pattern. This filter is commonly used for visually
    comparing two images, in particular for evaluating the results of an
    image registration process.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    {Filtering/ImageCompare/CombineTwoImagesWithCheckerBoardPattern,Combin
    e Two Images With Checker Board Pattern} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIF3___New_orig__)
    Clone = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIF3_Clone)
    SetInput1 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIF3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIF3_SetInput2)
    SetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIF3_SetCheckerPattern)
    GetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIF3_GetCheckerPattern)
    __swig_destroy__ = _itkCheckerBoardImageFilterPython.delete_itkCheckerBoardImageFilterIF3
    cast = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIF3_cast)

    def New(*args, **kargs):
        """New() -> itkCheckerBoardImageFilterIF3

        Create a new object of the class itkCheckerBoardImageFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCheckerBoardImageFilterIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCheckerBoardImageFilterIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCheckerBoardImageFilterIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCheckerBoardImageFilterIF3 in _itkCheckerBoardImageFilterPython:
_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIF3_swigregister(itkCheckerBoardImageFilterIF3)
itkCheckerBoardImageFilterIF3___New_orig__ = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIF3___New_orig__
itkCheckerBoardImageFilterIF3_cast = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIF3_cast


def itkCheckerBoardImageFilterIRGBAUC2_New():
    return itkCheckerBoardImageFilterIRGBAUC2.New()

class itkCheckerBoardImageFilterIRGBAUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIRGBAUC2IRGBAUC2):
    r"""


    Combines two images in a checkerboard pattern.

    CheckerBoardImageFilter takes two input images that must have the same
    dimension, size, origin and spacing and produces an output image of
    the same size by combining the pixels from the two input images in a
    checkerboard pattern. This filter is commonly used for visually
    comparing two images, in particular for evaluating the results of an
    image registration process.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    {Filtering/ImageCompare/CombineTwoImagesWithCheckerBoardPattern,Combin
    e Two Images With Checker Board Pattern} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIRGBAUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIRGBAUC2_Clone)
    SetInput1 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIRGBAUC2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIRGBAUC2_SetInput2)
    SetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIRGBAUC2_SetCheckerPattern)
    GetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIRGBAUC2_GetCheckerPattern)
    __swig_destroy__ = _itkCheckerBoardImageFilterPython.delete_itkCheckerBoardImageFilterIRGBAUC2
    cast = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIRGBAUC2_cast)

    def New(*args, **kargs):
        """New() -> itkCheckerBoardImageFilterIRGBAUC2

        Create a new object of the class itkCheckerBoardImageFilterIRGBAUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCheckerBoardImageFilterIRGBAUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCheckerBoardImageFilterIRGBAUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCheckerBoardImageFilterIRGBAUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCheckerBoardImageFilterIRGBAUC2 in _itkCheckerBoardImageFilterPython:
_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIRGBAUC2_swigregister(itkCheckerBoardImageFilterIRGBAUC2)
itkCheckerBoardImageFilterIRGBAUC2___New_orig__ = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIRGBAUC2___New_orig__
itkCheckerBoardImageFilterIRGBAUC2_cast = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIRGBAUC2_cast


def itkCheckerBoardImageFilterIRGBAUC3_New():
    return itkCheckerBoardImageFilterIRGBAUC3.New()

class itkCheckerBoardImageFilterIRGBAUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIRGBAUC3IRGBAUC3):
    r"""


    Combines two images in a checkerboard pattern.

    CheckerBoardImageFilter takes two input images that must have the same
    dimension, size, origin and spacing and produces an output image of
    the same size by combining the pixels from the two input images in a
    checkerboard pattern. This filter is commonly used for visually
    comparing two images, in particular for evaluating the results of an
    image registration process.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    {Filtering/ImageCompare/CombineTwoImagesWithCheckerBoardPattern,Combin
    e Two Images With Checker Board Pattern} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIRGBAUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIRGBAUC3_Clone)
    SetInput1 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIRGBAUC3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIRGBAUC3_SetInput2)
    SetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIRGBAUC3_SetCheckerPattern)
    GetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIRGBAUC3_GetCheckerPattern)
    __swig_destroy__ = _itkCheckerBoardImageFilterPython.delete_itkCheckerBoardImageFilterIRGBAUC3
    cast = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIRGBAUC3_cast)

    def New(*args, **kargs):
        """New() -> itkCheckerBoardImageFilterIRGBAUC3

        Create a new object of the class itkCheckerBoardImageFilterIRGBAUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCheckerBoardImageFilterIRGBAUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCheckerBoardImageFilterIRGBAUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCheckerBoardImageFilterIRGBAUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCheckerBoardImageFilterIRGBAUC3 in _itkCheckerBoardImageFilterPython:
_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIRGBAUC3_swigregister(itkCheckerBoardImageFilterIRGBAUC3)
itkCheckerBoardImageFilterIRGBAUC3___New_orig__ = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIRGBAUC3___New_orig__
itkCheckerBoardImageFilterIRGBAUC3_cast = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIRGBAUC3_cast


def itkCheckerBoardImageFilterIRGBUC2_New():
    return itkCheckerBoardImageFilterIRGBUC2.New()

class itkCheckerBoardImageFilterIRGBUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIRGBUC2IRGBUC2):
    r"""


    Combines two images in a checkerboard pattern.

    CheckerBoardImageFilter takes two input images that must have the same
    dimension, size, origin and spacing and produces an output image of
    the same size by combining the pixels from the two input images in a
    checkerboard pattern. This filter is commonly used for visually
    comparing two images, in particular for evaluating the results of an
    image registration process.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    {Filtering/ImageCompare/CombineTwoImagesWithCheckerBoardPattern,Combin
    e Two Images With Checker Board Pattern} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIRGBUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIRGBUC2_Clone)
    SetInput1 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIRGBUC2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIRGBUC2_SetInput2)
    SetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIRGBUC2_SetCheckerPattern)
    GetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIRGBUC2_GetCheckerPattern)
    __swig_destroy__ = _itkCheckerBoardImageFilterPython.delete_itkCheckerBoardImageFilterIRGBUC2
    cast = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIRGBUC2_cast)

    def New(*args, **kargs):
        """New() -> itkCheckerBoardImageFilterIRGBUC2

        Create a new object of the class itkCheckerBoardImageFilterIRGBUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCheckerBoardImageFilterIRGBUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCheckerBoardImageFilterIRGBUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCheckerBoardImageFilterIRGBUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCheckerBoardImageFilterIRGBUC2 in _itkCheckerBoardImageFilterPython:
_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIRGBUC2_swigregister(itkCheckerBoardImageFilterIRGBUC2)
itkCheckerBoardImageFilterIRGBUC2___New_orig__ = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIRGBUC2___New_orig__
itkCheckerBoardImageFilterIRGBUC2_cast = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIRGBUC2_cast


def itkCheckerBoardImageFilterIRGBUC3_New():
    return itkCheckerBoardImageFilterIRGBUC3.New()

class itkCheckerBoardImageFilterIRGBUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIRGBUC3IRGBUC3):
    r"""


    Combines two images in a checkerboard pattern.

    CheckerBoardImageFilter takes two input images that must have the same
    dimension, size, origin and spacing and produces an output image of
    the same size by combining the pixels from the two input images in a
    checkerboard pattern. This filter is commonly used for visually
    comparing two images, in particular for evaluating the results of an
    image registration process.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    {Filtering/ImageCompare/CombineTwoImagesWithCheckerBoardPattern,Combin
    e Two Images With Checker Board Pattern} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIRGBUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIRGBUC3_Clone)
    SetInput1 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIRGBUC3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIRGBUC3_SetInput2)
    SetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIRGBUC3_SetCheckerPattern)
    GetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIRGBUC3_GetCheckerPattern)
    __swig_destroy__ = _itkCheckerBoardImageFilterPython.delete_itkCheckerBoardImageFilterIRGBUC3
    cast = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIRGBUC3_cast)

    def New(*args, **kargs):
        """New() -> itkCheckerBoardImageFilterIRGBUC3

        Create a new object of the class itkCheckerBoardImageFilterIRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCheckerBoardImageFilterIRGBUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCheckerBoardImageFilterIRGBUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCheckerBoardImageFilterIRGBUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCheckerBoardImageFilterIRGBUC3 in _itkCheckerBoardImageFilterPython:
_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIRGBUC3_swigregister(itkCheckerBoardImageFilterIRGBUC3)
itkCheckerBoardImageFilterIRGBUC3___New_orig__ = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIRGBUC3___New_orig__
itkCheckerBoardImageFilterIRGBUC3_cast = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIRGBUC3_cast


def itkCheckerBoardImageFilterISS2_New():
    return itkCheckerBoardImageFilterISS2.New()

class itkCheckerBoardImageFilterISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""


    Combines two images in a checkerboard pattern.

    CheckerBoardImageFilter takes two input images that must have the same
    dimension, size, origin and spacing and produces an output image of
    the same size by combining the pixels from the two input images in a
    checkerboard pattern. This filter is commonly used for visually
    comparing two images, in particular for evaluating the results of an
    image registration process.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    {Filtering/ImageCompare/CombineTwoImagesWithCheckerBoardPattern,Combin
    e Two Images With Checker Board Pattern} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterISS2_Clone)
    SetInput1 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterISS2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterISS2_SetInput2)
    SetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterISS2_SetCheckerPattern)
    GetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterISS2_GetCheckerPattern)
    __swig_destroy__ = _itkCheckerBoardImageFilterPython.delete_itkCheckerBoardImageFilterISS2
    cast = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterISS2_cast)

    def New(*args, **kargs):
        """New() -> itkCheckerBoardImageFilterISS2

        Create a new object of the class itkCheckerBoardImageFilterISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCheckerBoardImageFilterISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCheckerBoardImageFilterISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCheckerBoardImageFilterISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCheckerBoardImageFilterISS2 in _itkCheckerBoardImageFilterPython:
_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterISS2_swigregister(itkCheckerBoardImageFilterISS2)
itkCheckerBoardImageFilterISS2___New_orig__ = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterISS2___New_orig__
itkCheckerBoardImageFilterISS2_cast = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterISS2_cast


def itkCheckerBoardImageFilterISS3_New():
    return itkCheckerBoardImageFilterISS3.New()

class itkCheckerBoardImageFilterISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""


    Combines two images in a checkerboard pattern.

    CheckerBoardImageFilter takes two input images that must have the same
    dimension, size, origin and spacing and produces an output image of
    the same size by combining the pixels from the two input images in a
    checkerboard pattern. This filter is commonly used for visually
    comparing two images, in particular for evaluating the results of an
    image registration process.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    {Filtering/ImageCompare/CombineTwoImagesWithCheckerBoardPattern,Combin
    e Two Images With Checker Board Pattern} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterISS3_Clone)
    SetInput1 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterISS3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterISS3_SetInput2)
    SetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterISS3_SetCheckerPattern)
    GetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterISS3_GetCheckerPattern)
    __swig_destroy__ = _itkCheckerBoardImageFilterPython.delete_itkCheckerBoardImageFilterISS3
    cast = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterISS3_cast)

    def New(*args, **kargs):
        """New() -> itkCheckerBoardImageFilterISS3

        Create a new object of the class itkCheckerBoardImageFilterISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCheckerBoardImageFilterISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCheckerBoardImageFilterISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCheckerBoardImageFilterISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCheckerBoardImageFilterISS3 in _itkCheckerBoardImageFilterPython:
_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterISS3_swigregister(itkCheckerBoardImageFilterISS3)
itkCheckerBoardImageFilterISS3___New_orig__ = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterISS3___New_orig__
itkCheckerBoardImageFilterISS3_cast = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterISS3_cast


def itkCheckerBoardImageFilterIUC2_New():
    return itkCheckerBoardImageFilterIUC2.New()

class itkCheckerBoardImageFilterIUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""


    Combines two images in a checkerboard pattern.

    CheckerBoardImageFilter takes two input images that must have the same
    dimension, size, origin and spacing and produces an output image of
    the same size by combining the pixels from the two input images in a
    checkerboard pattern. This filter is commonly used for visually
    comparing two images, in particular for evaluating the results of an
    image registration process.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    {Filtering/ImageCompare/CombineTwoImagesWithCheckerBoardPattern,Combin
    e Two Images With Checker Board Pattern} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIUC2_Clone)
    SetInput1 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIUC2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIUC2_SetInput2)
    SetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIUC2_SetCheckerPattern)
    GetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIUC2_GetCheckerPattern)
    __swig_destroy__ = _itkCheckerBoardImageFilterPython.delete_itkCheckerBoardImageFilterIUC2
    cast = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIUC2_cast)

    def New(*args, **kargs):
        """New() -> itkCheckerBoardImageFilterIUC2

        Create a new object of the class itkCheckerBoardImageFilterIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCheckerBoardImageFilterIUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCheckerBoardImageFilterIUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCheckerBoardImageFilterIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCheckerBoardImageFilterIUC2 in _itkCheckerBoardImageFilterPython:
_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIUC2_swigregister(itkCheckerBoardImageFilterIUC2)
itkCheckerBoardImageFilterIUC2___New_orig__ = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIUC2___New_orig__
itkCheckerBoardImageFilterIUC2_cast = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIUC2_cast


def itkCheckerBoardImageFilterIUC3_New():
    return itkCheckerBoardImageFilterIUC3.New()

class itkCheckerBoardImageFilterIUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""


    Combines two images in a checkerboard pattern.

    CheckerBoardImageFilter takes two input images that must have the same
    dimension, size, origin and spacing and produces an output image of
    the same size by combining the pixels from the two input images in a
    checkerboard pattern. This filter is commonly used for visually
    comparing two images, in particular for evaluating the results of an
    image registration process.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    {Filtering/ImageCompare/CombineTwoImagesWithCheckerBoardPattern,Combin
    e Two Images With Checker Board Pattern} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIUC3_Clone)
    SetInput1 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIUC3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIUC3_SetInput2)
    SetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIUC3_SetCheckerPattern)
    GetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIUC3_GetCheckerPattern)
    __swig_destroy__ = _itkCheckerBoardImageFilterPython.delete_itkCheckerBoardImageFilterIUC3
    cast = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIUC3_cast)

    def New(*args, **kargs):
        """New() -> itkCheckerBoardImageFilterIUC3

        Create a new object of the class itkCheckerBoardImageFilterIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCheckerBoardImageFilterIUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCheckerBoardImageFilterIUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCheckerBoardImageFilterIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCheckerBoardImageFilterIUC3 in _itkCheckerBoardImageFilterPython:
_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIUC3_swigregister(itkCheckerBoardImageFilterIUC3)
itkCheckerBoardImageFilterIUC3___New_orig__ = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIUC3___New_orig__
itkCheckerBoardImageFilterIUC3_cast = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIUC3_cast


def itkCheckerBoardImageFilterIUS2_New():
    return itkCheckerBoardImageFilterIUS2.New()

class itkCheckerBoardImageFilterIUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""


    Combines two images in a checkerboard pattern.

    CheckerBoardImageFilter takes two input images that must have the same
    dimension, size, origin and spacing and produces an output image of
    the same size by combining the pixels from the two input images in a
    checkerboard pattern. This filter is commonly used for visually
    comparing two images, in particular for evaluating the results of an
    image registration process.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    {Filtering/ImageCompare/CombineTwoImagesWithCheckerBoardPattern,Combin
    e Two Images With Checker Board Pattern} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIUS2_Clone)
    SetInput1 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIUS2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIUS2_SetInput2)
    SetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIUS2_SetCheckerPattern)
    GetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIUS2_GetCheckerPattern)
    __swig_destroy__ = _itkCheckerBoardImageFilterPython.delete_itkCheckerBoardImageFilterIUS2
    cast = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIUS2_cast)

    def New(*args, **kargs):
        """New() -> itkCheckerBoardImageFilterIUS2

        Create a new object of the class itkCheckerBoardImageFilterIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCheckerBoardImageFilterIUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCheckerBoardImageFilterIUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCheckerBoardImageFilterIUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCheckerBoardImageFilterIUS2 in _itkCheckerBoardImageFilterPython:
_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIUS2_swigregister(itkCheckerBoardImageFilterIUS2)
itkCheckerBoardImageFilterIUS2___New_orig__ = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIUS2___New_orig__
itkCheckerBoardImageFilterIUS2_cast = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIUS2_cast


def itkCheckerBoardImageFilterIUS3_New():
    return itkCheckerBoardImageFilterIUS3.New()

class itkCheckerBoardImageFilterIUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""


    Combines two images in a checkerboard pattern.

    CheckerBoardImageFilter takes two input images that must have the same
    dimension, size, origin and spacing and produces an output image of
    the same size by combining the pixels from the two input images in a
    checkerboard pattern. This filter is commonly used for visually
    comparing two images, in particular for evaluating the results of an
    image registration process.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    {Filtering/ImageCompare/CombineTwoImagesWithCheckerBoardPattern,Combin
    e Two Images With Checker Board Pattern} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIUS3_Clone)
    SetInput1 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIUS3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIUS3_SetInput2)
    SetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIUS3_SetCheckerPattern)
    GetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIUS3_GetCheckerPattern)
    __swig_destroy__ = _itkCheckerBoardImageFilterPython.delete_itkCheckerBoardImageFilterIUS3
    cast = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIUS3_cast)

    def New(*args, **kargs):
        """New() -> itkCheckerBoardImageFilterIUS3

        Create a new object of the class itkCheckerBoardImageFilterIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCheckerBoardImageFilterIUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCheckerBoardImageFilterIUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCheckerBoardImageFilterIUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCheckerBoardImageFilterIUS3 in _itkCheckerBoardImageFilterPython:
_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIUS3_swigregister(itkCheckerBoardImageFilterIUS3)
itkCheckerBoardImageFilterIUS3___New_orig__ = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIUS3___New_orig__
itkCheckerBoardImageFilterIUS3_cast = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIUS3_cast


def itkCheckerBoardImageFilterIVF22_New():
    return itkCheckerBoardImageFilterIVF22.New()

class itkCheckerBoardImageFilterIVF22(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF22IVF22):
    r"""


    Combines two images in a checkerboard pattern.

    CheckerBoardImageFilter takes two input images that must have the same
    dimension, size, origin and spacing and produces an output image of
    the same size by combining the pixels from the two input images in a
    checkerboard pattern. This filter is commonly used for visually
    comparing two images, in particular for evaluating the results of an
    image registration process.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    {Filtering/ImageCompare/CombineTwoImagesWithCheckerBoardPattern,Combin
    e Two Images With Checker Board Pattern} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF22_Clone)
    SetInput1 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF22_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF22_SetInput2)
    SetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF22_SetCheckerPattern)
    GetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF22_GetCheckerPattern)
    __swig_destroy__ = _itkCheckerBoardImageFilterPython.delete_itkCheckerBoardImageFilterIVF22
    cast = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF22_cast)

    def New(*args, **kargs):
        """New() -> itkCheckerBoardImageFilterIVF22

        Create a new object of the class itkCheckerBoardImageFilterIVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCheckerBoardImageFilterIVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCheckerBoardImageFilterIVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCheckerBoardImageFilterIVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCheckerBoardImageFilterIVF22 in _itkCheckerBoardImageFilterPython:
_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF22_swigregister(itkCheckerBoardImageFilterIVF22)
itkCheckerBoardImageFilterIVF22___New_orig__ = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF22___New_orig__
itkCheckerBoardImageFilterIVF22_cast = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF22_cast


def itkCheckerBoardImageFilterIVF23_New():
    return itkCheckerBoardImageFilterIVF23.New()

class itkCheckerBoardImageFilterIVF23(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF23IVF23):
    r"""


    Combines two images in a checkerboard pattern.

    CheckerBoardImageFilter takes two input images that must have the same
    dimension, size, origin and spacing and produces an output image of
    the same size by combining the pixels from the two input images in a
    checkerboard pattern. This filter is commonly used for visually
    comparing two images, in particular for evaluating the results of an
    image registration process.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    {Filtering/ImageCompare/CombineTwoImagesWithCheckerBoardPattern,Combin
    e Two Images With Checker Board Pattern} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF23___New_orig__)
    Clone = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF23_Clone)
    SetInput1 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF23_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF23_SetInput2)
    SetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF23_SetCheckerPattern)
    GetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF23_GetCheckerPattern)
    __swig_destroy__ = _itkCheckerBoardImageFilterPython.delete_itkCheckerBoardImageFilterIVF23
    cast = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF23_cast)

    def New(*args, **kargs):
        """New() -> itkCheckerBoardImageFilterIVF23

        Create a new object of the class itkCheckerBoardImageFilterIVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCheckerBoardImageFilterIVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCheckerBoardImageFilterIVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCheckerBoardImageFilterIVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCheckerBoardImageFilterIVF23 in _itkCheckerBoardImageFilterPython:
_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF23_swigregister(itkCheckerBoardImageFilterIVF23)
itkCheckerBoardImageFilterIVF23___New_orig__ = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF23___New_orig__
itkCheckerBoardImageFilterIVF23_cast = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF23_cast


def itkCheckerBoardImageFilterIVF32_New():
    return itkCheckerBoardImageFilterIVF32.New()

class itkCheckerBoardImageFilterIVF32(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF32IVF32):
    r"""


    Combines two images in a checkerboard pattern.

    CheckerBoardImageFilter takes two input images that must have the same
    dimension, size, origin and spacing and produces an output image of
    the same size by combining the pixels from the two input images in a
    checkerboard pattern. This filter is commonly used for visually
    comparing two images, in particular for evaluating the results of an
    image registration process.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    {Filtering/ImageCompare/CombineTwoImagesWithCheckerBoardPattern,Combin
    e Two Images With Checker Board Pattern} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF32___New_orig__)
    Clone = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF32_Clone)
    SetInput1 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF32_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF32_SetInput2)
    SetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF32_SetCheckerPattern)
    GetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF32_GetCheckerPattern)
    __swig_destroy__ = _itkCheckerBoardImageFilterPython.delete_itkCheckerBoardImageFilterIVF32
    cast = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF32_cast)

    def New(*args, **kargs):
        """New() -> itkCheckerBoardImageFilterIVF32

        Create a new object of the class itkCheckerBoardImageFilterIVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCheckerBoardImageFilterIVF32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCheckerBoardImageFilterIVF32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCheckerBoardImageFilterIVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCheckerBoardImageFilterIVF32 in _itkCheckerBoardImageFilterPython:
_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF32_swigregister(itkCheckerBoardImageFilterIVF32)
itkCheckerBoardImageFilterIVF32___New_orig__ = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF32___New_orig__
itkCheckerBoardImageFilterIVF32_cast = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF32_cast


def itkCheckerBoardImageFilterIVF33_New():
    return itkCheckerBoardImageFilterIVF33.New()

class itkCheckerBoardImageFilterIVF33(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF33IVF33):
    r"""


    Combines two images in a checkerboard pattern.

    CheckerBoardImageFilter takes two input images that must have the same
    dimension, size, origin and spacing and produces an output image of
    the same size by combining the pixels from the two input images in a
    checkerboard pattern. This filter is commonly used for visually
    comparing two images, in particular for evaluating the results of an
    image registration process.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    {Filtering/ImageCompare/CombineTwoImagesWithCheckerBoardPattern,Combin
    e Two Images With Checker Board Pattern} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF33_Clone)
    SetInput1 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF33_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF33_SetInput2)
    SetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF33_SetCheckerPattern)
    GetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF33_GetCheckerPattern)
    __swig_destroy__ = _itkCheckerBoardImageFilterPython.delete_itkCheckerBoardImageFilterIVF33
    cast = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF33_cast)

    def New(*args, **kargs):
        """New() -> itkCheckerBoardImageFilterIVF33

        Create a new object of the class itkCheckerBoardImageFilterIVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCheckerBoardImageFilterIVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCheckerBoardImageFilterIVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCheckerBoardImageFilterIVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCheckerBoardImageFilterIVF33 in _itkCheckerBoardImageFilterPython:
_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF33_swigregister(itkCheckerBoardImageFilterIVF33)
itkCheckerBoardImageFilterIVF33___New_orig__ = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF33___New_orig__
itkCheckerBoardImageFilterIVF33_cast = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF33_cast


def itkCheckerBoardImageFilterIVF42_New():
    return itkCheckerBoardImageFilterIVF42.New()

class itkCheckerBoardImageFilterIVF42(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF42IVF42):
    r"""


    Combines two images in a checkerboard pattern.

    CheckerBoardImageFilter takes two input images that must have the same
    dimension, size, origin and spacing and produces an output image of
    the same size by combining the pixels from the two input images in a
    checkerboard pattern. This filter is commonly used for visually
    comparing two images, in particular for evaluating the results of an
    image registration process.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    {Filtering/ImageCompare/CombineTwoImagesWithCheckerBoardPattern,Combin
    e Two Images With Checker Board Pattern} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF42___New_orig__)
    Clone = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF42_Clone)
    SetInput1 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF42_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF42_SetInput2)
    SetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF42_SetCheckerPattern)
    GetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF42_GetCheckerPattern)
    __swig_destroy__ = _itkCheckerBoardImageFilterPython.delete_itkCheckerBoardImageFilterIVF42
    cast = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF42_cast)

    def New(*args, **kargs):
        """New() -> itkCheckerBoardImageFilterIVF42

        Create a new object of the class itkCheckerBoardImageFilterIVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCheckerBoardImageFilterIVF42.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCheckerBoardImageFilterIVF42.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCheckerBoardImageFilterIVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCheckerBoardImageFilterIVF42 in _itkCheckerBoardImageFilterPython:
_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF42_swigregister(itkCheckerBoardImageFilterIVF42)
itkCheckerBoardImageFilterIVF42___New_orig__ = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF42___New_orig__
itkCheckerBoardImageFilterIVF42_cast = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF42_cast


def itkCheckerBoardImageFilterIVF43_New():
    return itkCheckerBoardImageFilterIVF43.New()

class itkCheckerBoardImageFilterIVF43(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF43IVF43):
    r"""


    Combines two images in a checkerboard pattern.

    CheckerBoardImageFilter takes two input images that must have the same
    dimension, size, origin and spacing and produces an output image of
    the same size by combining the pixels from the two input images in a
    checkerboard pattern. This filter is commonly used for visually
    comparing two images, in particular for evaluating the results of an
    image registration process.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    {Filtering/ImageCompare/CombineTwoImagesWithCheckerBoardPattern,Combin
    e Two Images With Checker Board Pattern} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF43___New_orig__)
    Clone = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF43_Clone)
    SetInput1 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF43_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF43_SetInput2)
    SetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF43_SetCheckerPattern)
    GetCheckerPattern = _swig_new_instance_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF43_GetCheckerPattern)
    __swig_destroy__ = _itkCheckerBoardImageFilterPython.delete_itkCheckerBoardImageFilterIVF43
    cast = _swig_new_static_method(_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF43_cast)

    def New(*args, **kargs):
        """New() -> itkCheckerBoardImageFilterIVF43

        Create a new object of the class itkCheckerBoardImageFilterIVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCheckerBoardImageFilterIVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCheckerBoardImageFilterIVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCheckerBoardImageFilterIVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCheckerBoardImageFilterIVF43 in _itkCheckerBoardImageFilterPython:
_itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF43_swigregister(itkCheckerBoardImageFilterIVF43)
itkCheckerBoardImageFilterIVF43___New_orig__ = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF43___New_orig__
itkCheckerBoardImageFilterIVF43_cast = _itkCheckerBoardImageFilterPython.itkCheckerBoardImageFilterIVF43_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def checker_board_image_filter(*args, **kwargs):
    """Procedural interface for CheckerBoardImageFilter"""
    import itk
    instance = itk.CheckerBoardImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def checker_board_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.CheckerBoardImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.CheckerBoardImageFilter.values()[0]
    else:
        filter_object = itk.CheckerBoardImageFilter

    checker_board_image_filter.__doc__ = filter_object.__doc__
    checker_board_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    checker_board_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.CheckerBoardImageFilter, itkTemplate.itkTemplate):
        checker_board_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        checker_board_image_filter.__doc__ += "\n"
        checker_board_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        checker_board_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



