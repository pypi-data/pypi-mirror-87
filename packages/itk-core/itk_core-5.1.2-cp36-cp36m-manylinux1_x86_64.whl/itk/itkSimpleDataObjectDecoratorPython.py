# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkSimpleDataObjectDecoratorPython
else:
    import _itkSimpleDataObjectDecoratorPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkSimpleDataObjectDecoratorPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkSimpleDataObjectDecoratorPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkArrayPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkRGBAPixelPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkRGBPixelPython

def itkSimpleDataObjectDecoratorAD_New():
    return itkSimpleDataObjectDecoratorAD.New()

class itkSimpleDataObjectDecoratorAD(itk.ITKCommonBasePython.itkDataObject):
    r"""


    Decorates any "simple" data type (data types without smart pointers)
    with a DataObject API.

    SimpleDataObjectDecorator decorates an object with a DataObject API.
    This allows simple objects to be encapsulated into objects that can be
    passed as down the pipeline. This decorator is intended to be used on
    native types (float, int, etc.) or any objects not derived from
    itkObject. To decorate a subclass of itkObject, see
    DataObjectDecorator.

    The decorator provides two methods Set() and Get() to access the
    decorated object (referred internally as the component).

    Note that when an instance of SimpleDataObjectDecorator is created,
    the component is initialized with its default constructor.

    SimpleDataObjectDecorator can decorate any simple data type. Two other
    decorators are provided for decorating pointers. DataObjectDecorator
    will decorate pointers to subclasses of itkObject (internally storing
    the pointer in a SmartPointer). AutoPointerDataObjectDecorator will
    decorate any other pointer and manage the memory deallocating of the
    component.

    See:   DataObjectDecorator

    See:  AutoPointerDataObjectDecorator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAD___New_orig__)
    Clone = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAD_Clone)
    Set = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAD_Set)
    Get = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAD_Get)
    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorAD
    cast = _swig_new_static_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAD_cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorAD

        Create a new object of the class itkSimpleDataObjectDecoratorAD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorAD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorAD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimpleDataObjectDecoratorAD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimpleDataObjectDecoratorAD in _itkSimpleDataObjectDecoratorPython:
_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAD_swigregister(itkSimpleDataObjectDecoratorAD)
itkSimpleDataObjectDecoratorAD___New_orig__ = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAD___New_orig__
itkSimpleDataObjectDecoratorAD_cast = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAD_cast


def itkSimpleDataObjectDecoratorAF_New():
    return itkSimpleDataObjectDecoratorAF.New()

class itkSimpleDataObjectDecoratorAF(itk.ITKCommonBasePython.itkDataObject):
    r"""


    Decorates any "simple" data type (data types without smart pointers)
    with a DataObject API.

    SimpleDataObjectDecorator decorates an object with a DataObject API.
    This allows simple objects to be encapsulated into objects that can be
    passed as down the pipeline. This decorator is intended to be used on
    native types (float, int, etc.) or any objects not derived from
    itkObject. To decorate a subclass of itkObject, see
    DataObjectDecorator.

    The decorator provides two methods Set() and Get() to access the
    decorated object (referred internally as the component).

    Note that when an instance of SimpleDataObjectDecorator is created,
    the component is initialized with its default constructor.

    SimpleDataObjectDecorator can decorate any simple data type. Two other
    decorators are provided for decorating pointers. DataObjectDecorator
    will decorate pointers to subclasses of itkObject (internally storing
    the pointer in a SmartPointer). AutoPointerDataObjectDecorator will
    decorate any other pointer and manage the memory deallocating of the
    component.

    See:   DataObjectDecorator

    See:  AutoPointerDataObjectDecorator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAF___New_orig__)
    Clone = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAF_Clone)
    Set = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAF_Set)
    Get = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAF_Get)
    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorAF
    cast = _swig_new_static_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAF_cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorAF

        Create a new object of the class itkSimpleDataObjectDecoratorAF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorAF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorAF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimpleDataObjectDecoratorAF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimpleDataObjectDecoratorAF in _itkSimpleDataObjectDecoratorPython:
_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAF_swigregister(itkSimpleDataObjectDecoratorAF)
itkSimpleDataObjectDecoratorAF___New_orig__ = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAF___New_orig__
itkSimpleDataObjectDecoratorAF_cast = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAF_cast


def itkSimpleDataObjectDecoratorAUL_New():
    return itkSimpleDataObjectDecoratorAUL.New()

class itkSimpleDataObjectDecoratorAUL(itk.ITKCommonBasePython.itkDataObject):
    r"""


    Decorates any "simple" data type (data types without smart pointers)
    with a DataObject API.

    SimpleDataObjectDecorator decorates an object with a DataObject API.
    This allows simple objects to be encapsulated into objects that can be
    passed as down the pipeline. This decorator is intended to be used on
    native types (float, int, etc.) or any objects not derived from
    itkObject. To decorate a subclass of itkObject, see
    DataObjectDecorator.

    The decorator provides two methods Set() and Get() to access the
    decorated object (referred internally as the component).

    Note that when an instance of SimpleDataObjectDecorator is created,
    the component is initialized with its default constructor.

    SimpleDataObjectDecorator can decorate any simple data type. Two other
    decorators are provided for decorating pointers. DataObjectDecorator
    will decorate pointers to subclasses of itkObject (internally storing
    the pointer in a SmartPointer). AutoPointerDataObjectDecorator will
    decorate any other pointer and manage the memory deallocating of the
    component.

    See:   DataObjectDecorator

    See:  AutoPointerDataObjectDecorator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAUL___New_orig__)
    Clone = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAUL_Clone)
    Set = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAUL_Set)
    Get = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAUL_Get)
    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorAUL
    cast = _swig_new_static_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAUL_cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorAUL

        Create a new object of the class itkSimpleDataObjectDecoratorAUL and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorAUL.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorAUL.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimpleDataObjectDecoratorAUL.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimpleDataObjectDecoratorAUL in _itkSimpleDataObjectDecoratorPython:
_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAUL_swigregister(itkSimpleDataObjectDecoratorAUL)
itkSimpleDataObjectDecoratorAUL___New_orig__ = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAUL___New_orig__
itkSimpleDataObjectDecoratorAUL_cast = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAUL_cast


def itkSimpleDataObjectDecoratorAULL_New():
    return itkSimpleDataObjectDecoratorAULL.New()

class itkSimpleDataObjectDecoratorAULL(itk.ITKCommonBasePython.itkDataObject):
    r"""


    Decorates any "simple" data type (data types without smart pointers)
    with a DataObject API.

    SimpleDataObjectDecorator decorates an object with a DataObject API.
    This allows simple objects to be encapsulated into objects that can be
    passed as down the pipeline. This decorator is intended to be used on
    native types (float, int, etc.) or any objects not derived from
    itkObject. To decorate a subclass of itkObject, see
    DataObjectDecorator.

    The decorator provides two methods Set() and Get() to access the
    decorated object (referred internally as the component).

    Note that when an instance of SimpleDataObjectDecorator is created,
    the component is initialized with its default constructor.

    SimpleDataObjectDecorator can decorate any simple data type. Two other
    decorators are provided for decorating pointers. DataObjectDecorator
    will decorate pointers to subclasses of itkObject (internally storing
    the pointer in a SmartPointer). AutoPointerDataObjectDecorator will
    decorate any other pointer and manage the memory deallocating of the
    component.

    See:   DataObjectDecorator

    See:  AutoPointerDataObjectDecorator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAULL___New_orig__)
    Clone = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAULL_Clone)
    Set = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAULL_Set)
    Get = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAULL_Get)
    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorAULL
    cast = _swig_new_static_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAULL_cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorAULL

        Create a new object of the class itkSimpleDataObjectDecoratorAULL and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorAULL.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorAULL.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimpleDataObjectDecoratorAULL.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimpleDataObjectDecoratorAULL in _itkSimpleDataObjectDecoratorPython:
_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAULL_swigregister(itkSimpleDataObjectDecoratorAULL)
itkSimpleDataObjectDecoratorAULL___New_orig__ = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAULL___New_orig__
itkSimpleDataObjectDecoratorAULL_cast = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAULL_cast


def itkSimpleDataObjectDecoratorB_New():
    return itkSimpleDataObjectDecoratorB.New()

class itkSimpleDataObjectDecoratorB(itk.ITKCommonBasePython.itkDataObject):
    r"""


    Decorates any "simple" data type (data types without smart pointers)
    with a DataObject API.

    SimpleDataObjectDecorator decorates an object with a DataObject API.
    This allows simple objects to be encapsulated into objects that can be
    passed as down the pipeline. This decorator is intended to be used on
    native types (float, int, etc.) or any objects not derived from
    itkObject. To decorate a subclass of itkObject, see
    DataObjectDecorator.

    The decorator provides two methods Set() and Get() to access the
    decorated object (referred internally as the component).

    Note that when an instance of SimpleDataObjectDecorator is created,
    the component is initialized with its default constructor.

    SimpleDataObjectDecorator can decorate any simple data type. Two other
    decorators are provided for decorating pointers. DataObjectDecorator
    will decorate pointers to subclasses of itkObject (internally storing
    the pointer in a SmartPointer). AutoPointerDataObjectDecorator will
    decorate any other pointer and manage the memory deallocating of the
    component.

    See:   DataObjectDecorator

    See:  AutoPointerDataObjectDecorator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorB___New_orig__)
    Clone = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorB_Clone)
    Set = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorB_Set)
    Get = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorB_Get)
    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorB
    cast = _swig_new_static_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorB_cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorB

        Create a new object of the class itkSimpleDataObjectDecoratorB and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorB.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorB.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimpleDataObjectDecoratorB.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimpleDataObjectDecoratorB in _itkSimpleDataObjectDecoratorPython:
_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorB_swigregister(itkSimpleDataObjectDecoratorB)
itkSimpleDataObjectDecoratorB___New_orig__ = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorB___New_orig__
itkSimpleDataObjectDecoratorB_cast = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorB_cast


def itkSimpleDataObjectDecoratorCF_New():
    return itkSimpleDataObjectDecoratorCF.New()

class itkSimpleDataObjectDecoratorCF(itk.ITKCommonBasePython.itkDataObject):
    r"""


    Decorates any "simple" data type (data types without smart pointers)
    with a DataObject API.

    SimpleDataObjectDecorator decorates an object with a DataObject API.
    This allows simple objects to be encapsulated into objects that can be
    passed as down the pipeline. This decorator is intended to be used on
    native types (float, int, etc.) or any objects not derived from
    itkObject. To decorate a subclass of itkObject, see
    DataObjectDecorator.

    The decorator provides two methods Set() and Get() to access the
    decorated object (referred internally as the component).

    Note that when an instance of SimpleDataObjectDecorator is created,
    the component is initialized with its default constructor.

    SimpleDataObjectDecorator can decorate any simple data type. Two other
    decorators are provided for decorating pointers. DataObjectDecorator
    will decorate pointers to subclasses of itkObject (internally storing
    the pointer in a SmartPointer). AutoPointerDataObjectDecorator will
    decorate any other pointer and manage the memory deallocating of the
    component.

    See:   DataObjectDecorator

    See:  AutoPointerDataObjectDecorator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCF___New_orig__)
    Clone = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCF_Clone)
    Set = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCF_Set)
    Get = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCF_Get)
    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorCF
    cast = _swig_new_static_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCF_cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorCF

        Create a new object of the class itkSimpleDataObjectDecoratorCF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorCF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorCF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimpleDataObjectDecoratorCF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimpleDataObjectDecoratorCF in _itkSimpleDataObjectDecoratorPython:
_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCF_swigregister(itkSimpleDataObjectDecoratorCF)
itkSimpleDataObjectDecoratorCF___New_orig__ = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCF___New_orig__
itkSimpleDataObjectDecoratorCF_cast = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCF_cast


def itkSimpleDataObjectDecoratorCVF2_New():
    return itkSimpleDataObjectDecoratorCVF2.New()

class itkSimpleDataObjectDecoratorCVF2(itk.ITKCommonBasePython.itkDataObject):
    r"""


    Decorates any "simple" data type (data types without smart pointers)
    with a DataObject API.

    SimpleDataObjectDecorator decorates an object with a DataObject API.
    This allows simple objects to be encapsulated into objects that can be
    passed as down the pipeline. This decorator is intended to be used on
    native types (float, int, etc.) or any objects not derived from
    itkObject. To decorate a subclass of itkObject, see
    DataObjectDecorator.

    The decorator provides two methods Set() and Get() to access the
    decorated object (referred internally as the component).

    Note that when an instance of SimpleDataObjectDecorator is created,
    the component is initialized with its default constructor.

    SimpleDataObjectDecorator can decorate any simple data type. Two other
    decorators are provided for decorating pointers. DataObjectDecorator
    will decorate pointers to subclasses of itkObject (internally storing
    the pointer in a SmartPointer). AutoPointerDataObjectDecorator will
    decorate any other pointer and manage the memory deallocating of the
    component.

    See:   DataObjectDecorator

    See:  AutoPointerDataObjectDecorator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF2___New_orig__)
    Clone = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF2_Clone)
    Set = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF2_Set)
    Get = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF2_Get)
    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorCVF2
    cast = _swig_new_static_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF2_cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorCVF2

        Create a new object of the class itkSimpleDataObjectDecoratorCVF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorCVF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorCVF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimpleDataObjectDecoratorCVF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimpleDataObjectDecoratorCVF2 in _itkSimpleDataObjectDecoratorPython:
_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF2_swigregister(itkSimpleDataObjectDecoratorCVF2)
itkSimpleDataObjectDecoratorCVF2___New_orig__ = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF2___New_orig__
itkSimpleDataObjectDecoratorCVF2_cast = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF2_cast


def itkSimpleDataObjectDecoratorCVF3_New():
    return itkSimpleDataObjectDecoratorCVF3.New()

class itkSimpleDataObjectDecoratorCVF3(itk.ITKCommonBasePython.itkDataObject):
    r"""


    Decorates any "simple" data type (data types without smart pointers)
    with a DataObject API.

    SimpleDataObjectDecorator decorates an object with a DataObject API.
    This allows simple objects to be encapsulated into objects that can be
    passed as down the pipeline. This decorator is intended to be used on
    native types (float, int, etc.) or any objects not derived from
    itkObject. To decorate a subclass of itkObject, see
    DataObjectDecorator.

    The decorator provides two methods Set() and Get() to access the
    decorated object (referred internally as the component).

    Note that when an instance of SimpleDataObjectDecorator is created,
    the component is initialized with its default constructor.

    SimpleDataObjectDecorator can decorate any simple data type. Two other
    decorators are provided for decorating pointers. DataObjectDecorator
    will decorate pointers to subclasses of itkObject (internally storing
    the pointer in a SmartPointer). AutoPointerDataObjectDecorator will
    decorate any other pointer and manage the memory deallocating of the
    component.

    See:   DataObjectDecorator

    See:  AutoPointerDataObjectDecorator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF3___New_orig__)
    Clone = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF3_Clone)
    Set = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF3_Set)
    Get = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF3_Get)
    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorCVF3
    cast = _swig_new_static_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF3_cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorCVF3

        Create a new object of the class itkSimpleDataObjectDecoratorCVF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorCVF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorCVF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimpleDataObjectDecoratorCVF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimpleDataObjectDecoratorCVF3 in _itkSimpleDataObjectDecoratorPython:
_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF3_swigregister(itkSimpleDataObjectDecoratorCVF3)
itkSimpleDataObjectDecoratorCVF3___New_orig__ = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF3___New_orig__
itkSimpleDataObjectDecoratorCVF3_cast = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF3_cast


def itkSimpleDataObjectDecoratorCVF4_New():
    return itkSimpleDataObjectDecoratorCVF4.New()

class itkSimpleDataObjectDecoratorCVF4(itk.ITKCommonBasePython.itkDataObject):
    r"""


    Decorates any "simple" data type (data types without smart pointers)
    with a DataObject API.

    SimpleDataObjectDecorator decorates an object with a DataObject API.
    This allows simple objects to be encapsulated into objects that can be
    passed as down the pipeline. This decorator is intended to be used on
    native types (float, int, etc.) or any objects not derived from
    itkObject. To decorate a subclass of itkObject, see
    DataObjectDecorator.

    The decorator provides two methods Set() and Get() to access the
    decorated object (referred internally as the component).

    Note that when an instance of SimpleDataObjectDecorator is created,
    the component is initialized with its default constructor.

    SimpleDataObjectDecorator can decorate any simple data type. Two other
    decorators are provided for decorating pointers. DataObjectDecorator
    will decorate pointers to subclasses of itkObject (internally storing
    the pointer in a SmartPointer). AutoPointerDataObjectDecorator will
    decorate any other pointer and manage the memory deallocating of the
    component.

    See:   DataObjectDecorator

    See:  AutoPointerDataObjectDecorator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF4___New_orig__)
    Clone = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF4_Clone)
    Set = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF4_Set)
    Get = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF4_Get)
    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorCVF4
    cast = _swig_new_static_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF4_cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorCVF4

        Create a new object of the class itkSimpleDataObjectDecoratorCVF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorCVF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorCVF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimpleDataObjectDecoratorCVF4.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimpleDataObjectDecoratorCVF4 in _itkSimpleDataObjectDecoratorPython:
_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF4_swigregister(itkSimpleDataObjectDecoratorCVF4)
itkSimpleDataObjectDecoratorCVF4___New_orig__ = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF4___New_orig__
itkSimpleDataObjectDecoratorCVF4_cast = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF4_cast


def itkSimpleDataObjectDecoratorD_New():
    return itkSimpleDataObjectDecoratorD.New()

class itkSimpleDataObjectDecoratorD(itk.ITKCommonBasePython.itkDataObject):
    r"""


    Decorates any "simple" data type (data types without smart pointers)
    with a DataObject API.

    SimpleDataObjectDecorator decorates an object with a DataObject API.
    This allows simple objects to be encapsulated into objects that can be
    passed as down the pipeline. This decorator is intended to be used on
    native types (float, int, etc.) or any objects not derived from
    itkObject. To decorate a subclass of itkObject, see
    DataObjectDecorator.

    The decorator provides two methods Set() and Get() to access the
    decorated object (referred internally as the component).

    Note that when an instance of SimpleDataObjectDecorator is created,
    the component is initialized with its default constructor.

    SimpleDataObjectDecorator can decorate any simple data type. Two other
    decorators are provided for decorating pointers. DataObjectDecorator
    will decorate pointers to subclasses of itkObject (internally storing
    the pointer in a SmartPointer). AutoPointerDataObjectDecorator will
    decorate any other pointer and manage the memory deallocating of the
    component.

    See:   DataObjectDecorator

    See:  AutoPointerDataObjectDecorator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorD___New_orig__)
    Clone = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorD_Clone)
    Set = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorD_Set)
    Get = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorD_Get)
    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorD
    cast = _swig_new_static_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorD_cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorD

        Create a new object of the class itkSimpleDataObjectDecoratorD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimpleDataObjectDecoratorD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimpleDataObjectDecoratorD in _itkSimpleDataObjectDecoratorPython:
_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorD_swigregister(itkSimpleDataObjectDecoratorD)
itkSimpleDataObjectDecoratorD___New_orig__ = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorD___New_orig__
itkSimpleDataObjectDecoratorD_cast = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorD_cast


def itkSimpleDataObjectDecoratorF_New():
    return itkSimpleDataObjectDecoratorF.New()

class itkSimpleDataObjectDecoratorF(itk.ITKCommonBasePython.itkDataObject):
    r"""


    Decorates any "simple" data type (data types without smart pointers)
    with a DataObject API.

    SimpleDataObjectDecorator decorates an object with a DataObject API.
    This allows simple objects to be encapsulated into objects that can be
    passed as down the pipeline. This decorator is intended to be used on
    native types (float, int, etc.) or any objects not derived from
    itkObject. To decorate a subclass of itkObject, see
    DataObjectDecorator.

    The decorator provides two methods Set() and Get() to access the
    decorated object (referred internally as the component).

    Note that when an instance of SimpleDataObjectDecorator is created,
    the component is initialized with its default constructor.

    SimpleDataObjectDecorator can decorate any simple data type. Two other
    decorators are provided for decorating pointers. DataObjectDecorator
    will decorate pointers to subclasses of itkObject (internally storing
    the pointer in a SmartPointer). AutoPointerDataObjectDecorator will
    decorate any other pointer and manage the memory deallocating of the
    component.

    See:   DataObjectDecorator

    See:  AutoPointerDataObjectDecorator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorF___New_orig__)
    Clone = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorF_Clone)
    Set = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorF_Set)
    Get = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorF_Get)
    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorF
    cast = _swig_new_static_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorF_cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorF

        Create a new object of the class itkSimpleDataObjectDecoratorF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimpleDataObjectDecoratorF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimpleDataObjectDecoratorF in _itkSimpleDataObjectDecoratorPython:
_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorF_swigregister(itkSimpleDataObjectDecoratorF)
itkSimpleDataObjectDecoratorF___New_orig__ = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorF___New_orig__
itkSimpleDataObjectDecoratorF_cast = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorF_cast


def itkSimpleDataObjectDecoratorRGBAUC_New():
    return itkSimpleDataObjectDecoratorRGBAUC.New()

class itkSimpleDataObjectDecoratorRGBAUC(itk.ITKCommonBasePython.itkDataObject):
    r"""


    Decorates any "simple" data type (data types without smart pointers)
    with a DataObject API.

    SimpleDataObjectDecorator decorates an object with a DataObject API.
    This allows simple objects to be encapsulated into objects that can be
    passed as down the pipeline. This decorator is intended to be used on
    native types (float, int, etc.) or any objects not derived from
    itkObject. To decorate a subclass of itkObject, see
    DataObjectDecorator.

    The decorator provides two methods Set() and Get() to access the
    decorated object (referred internally as the component).

    Note that when an instance of SimpleDataObjectDecorator is created,
    the component is initialized with its default constructor.

    SimpleDataObjectDecorator can decorate any simple data type. Two other
    decorators are provided for decorating pointers. DataObjectDecorator
    will decorate pointers to subclasses of itkObject (internally storing
    the pointer in a SmartPointer). AutoPointerDataObjectDecorator will
    decorate any other pointer and manage the memory deallocating of the
    component.

    See:   DataObjectDecorator

    See:  AutoPointerDataObjectDecorator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorRGBAUC___New_orig__)
    Clone = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorRGBAUC_Clone)
    Set = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorRGBAUC_Set)
    Get = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorRGBAUC_Get)
    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorRGBAUC
    cast = _swig_new_static_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorRGBAUC_cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorRGBAUC

        Create a new object of the class itkSimpleDataObjectDecoratorRGBAUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorRGBAUC.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorRGBAUC.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimpleDataObjectDecoratorRGBAUC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimpleDataObjectDecoratorRGBAUC in _itkSimpleDataObjectDecoratorPython:
_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorRGBAUC_swigregister(itkSimpleDataObjectDecoratorRGBAUC)
itkSimpleDataObjectDecoratorRGBAUC___New_orig__ = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorRGBAUC___New_orig__
itkSimpleDataObjectDecoratorRGBAUC_cast = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorRGBAUC_cast


def itkSimpleDataObjectDecoratorRGBUC_New():
    return itkSimpleDataObjectDecoratorRGBUC.New()

class itkSimpleDataObjectDecoratorRGBUC(itk.ITKCommonBasePython.itkDataObject):
    r"""


    Decorates any "simple" data type (data types without smart pointers)
    with a DataObject API.

    SimpleDataObjectDecorator decorates an object with a DataObject API.
    This allows simple objects to be encapsulated into objects that can be
    passed as down the pipeline. This decorator is intended to be used on
    native types (float, int, etc.) or any objects not derived from
    itkObject. To decorate a subclass of itkObject, see
    DataObjectDecorator.

    The decorator provides two methods Set() and Get() to access the
    decorated object (referred internally as the component).

    Note that when an instance of SimpleDataObjectDecorator is created,
    the component is initialized with its default constructor.

    SimpleDataObjectDecorator can decorate any simple data type. Two other
    decorators are provided for decorating pointers. DataObjectDecorator
    will decorate pointers to subclasses of itkObject (internally storing
    the pointer in a SmartPointer). AutoPointerDataObjectDecorator will
    decorate any other pointer and manage the memory deallocating of the
    component.

    See:   DataObjectDecorator

    See:  AutoPointerDataObjectDecorator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorRGBUC___New_orig__)
    Clone = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorRGBUC_Clone)
    Set = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorRGBUC_Set)
    Get = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorRGBUC_Get)
    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorRGBUC
    cast = _swig_new_static_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorRGBUC_cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorRGBUC

        Create a new object of the class itkSimpleDataObjectDecoratorRGBUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorRGBUC.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorRGBUC.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimpleDataObjectDecoratorRGBUC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimpleDataObjectDecoratorRGBUC in _itkSimpleDataObjectDecoratorPython:
_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorRGBUC_swigregister(itkSimpleDataObjectDecoratorRGBUC)
itkSimpleDataObjectDecoratorRGBUC___New_orig__ = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorRGBUC___New_orig__
itkSimpleDataObjectDecoratorRGBUC_cast = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorRGBUC_cast


def itkSimpleDataObjectDecoratorSC_New():
    return itkSimpleDataObjectDecoratorSC.New()

class itkSimpleDataObjectDecoratorSC(itk.ITKCommonBasePython.itkDataObject):
    r"""


    Decorates any "simple" data type (data types without smart pointers)
    with a DataObject API.

    SimpleDataObjectDecorator decorates an object with a DataObject API.
    This allows simple objects to be encapsulated into objects that can be
    passed as down the pipeline. This decorator is intended to be used on
    native types (float, int, etc.) or any objects not derived from
    itkObject. To decorate a subclass of itkObject, see
    DataObjectDecorator.

    The decorator provides two methods Set() and Get() to access the
    decorated object (referred internally as the component).

    Note that when an instance of SimpleDataObjectDecorator is created,
    the component is initialized with its default constructor.

    SimpleDataObjectDecorator can decorate any simple data type. Two other
    decorators are provided for decorating pointers. DataObjectDecorator
    will decorate pointers to subclasses of itkObject (internally storing
    the pointer in a SmartPointer). AutoPointerDataObjectDecorator will
    decorate any other pointer and manage the memory deallocating of the
    component.

    See:   DataObjectDecorator

    See:  AutoPointerDataObjectDecorator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSC___New_orig__)
    Clone = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSC_Clone)
    Set = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSC_Set)
    Get = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSC_Get)
    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorSC
    cast = _swig_new_static_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSC_cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorSC

        Create a new object of the class itkSimpleDataObjectDecoratorSC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorSC.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorSC.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimpleDataObjectDecoratorSC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimpleDataObjectDecoratorSC in _itkSimpleDataObjectDecoratorPython:
_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSC_swigregister(itkSimpleDataObjectDecoratorSC)
itkSimpleDataObjectDecoratorSC___New_orig__ = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSC___New_orig__
itkSimpleDataObjectDecoratorSC_cast = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSC_cast


def itkSimpleDataObjectDecoratorSL_New():
    return itkSimpleDataObjectDecoratorSL.New()

class itkSimpleDataObjectDecoratorSL(itk.ITKCommonBasePython.itkDataObject):
    r"""


    Decorates any "simple" data type (data types without smart pointers)
    with a DataObject API.

    SimpleDataObjectDecorator decorates an object with a DataObject API.
    This allows simple objects to be encapsulated into objects that can be
    passed as down the pipeline. This decorator is intended to be used on
    native types (float, int, etc.) or any objects not derived from
    itkObject. To decorate a subclass of itkObject, see
    DataObjectDecorator.

    The decorator provides two methods Set() and Get() to access the
    decorated object (referred internally as the component).

    Note that when an instance of SimpleDataObjectDecorator is created,
    the component is initialized with its default constructor.

    SimpleDataObjectDecorator can decorate any simple data type. Two other
    decorators are provided for decorating pointers. DataObjectDecorator
    will decorate pointers to subclasses of itkObject (internally storing
    the pointer in a SmartPointer). AutoPointerDataObjectDecorator will
    decorate any other pointer and manage the memory deallocating of the
    component.

    See:   DataObjectDecorator

    See:  AutoPointerDataObjectDecorator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSL___New_orig__)
    Clone = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSL_Clone)
    Set = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSL_Set)
    Get = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSL_Get)
    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorSL
    cast = _swig_new_static_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSL_cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorSL

        Create a new object of the class itkSimpleDataObjectDecoratorSL and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorSL.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorSL.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimpleDataObjectDecoratorSL.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimpleDataObjectDecoratorSL in _itkSimpleDataObjectDecoratorPython:
_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSL_swigregister(itkSimpleDataObjectDecoratorSL)
itkSimpleDataObjectDecoratorSL___New_orig__ = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSL___New_orig__
itkSimpleDataObjectDecoratorSL_cast = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSL_cast


def itkSimpleDataObjectDecoratorSLL_New():
    return itkSimpleDataObjectDecoratorSLL.New()

class itkSimpleDataObjectDecoratorSLL(itk.ITKCommonBasePython.itkDataObject):
    r"""


    Decorates any "simple" data type (data types without smart pointers)
    with a DataObject API.

    SimpleDataObjectDecorator decorates an object with a DataObject API.
    This allows simple objects to be encapsulated into objects that can be
    passed as down the pipeline. This decorator is intended to be used on
    native types (float, int, etc.) or any objects not derived from
    itkObject. To decorate a subclass of itkObject, see
    DataObjectDecorator.

    The decorator provides two methods Set() and Get() to access the
    decorated object (referred internally as the component).

    Note that when an instance of SimpleDataObjectDecorator is created,
    the component is initialized with its default constructor.

    SimpleDataObjectDecorator can decorate any simple data type. Two other
    decorators are provided for decorating pointers. DataObjectDecorator
    will decorate pointers to subclasses of itkObject (internally storing
    the pointer in a SmartPointer). AutoPointerDataObjectDecorator will
    decorate any other pointer and manage the memory deallocating of the
    component.

    See:   DataObjectDecorator

    See:  AutoPointerDataObjectDecorator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSLL___New_orig__)
    Clone = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSLL_Clone)
    Set = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSLL_Set)
    Get = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSLL_Get)
    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorSLL
    cast = _swig_new_static_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSLL_cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorSLL

        Create a new object of the class itkSimpleDataObjectDecoratorSLL and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorSLL.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorSLL.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimpleDataObjectDecoratorSLL.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimpleDataObjectDecoratorSLL in _itkSimpleDataObjectDecoratorPython:
_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSLL_swigregister(itkSimpleDataObjectDecoratorSLL)
itkSimpleDataObjectDecoratorSLL___New_orig__ = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSLL___New_orig__
itkSimpleDataObjectDecoratorSLL_cast = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSLL_cast


def itkSimpleDataObjectDecoratorSS_New():
    return itkSimpleDataObjectDecoratorSS.New()

class itkSimpleDataObjectDecoratorSS(itk.ITKCommonBasePython.itkDataObject):
    r"""


    Decorates any "simple" data type (data types without smart pointers)
    with a DataObject API.

    SimpleDataObjectDecorator decorates an object with a DataObject API.
    This allows simple objects to be encapsulated into objects that can be
    passed as down the pipeline. This decorator is intended to be used on
    native types (float, int, etc.) or any objects not derived from
    itkObject. To decorate a subclass of itkObject, see
    DataObjectDecorator.

    The decorator provides two methods Set() and Get() to access the
    decorated object (referred internally as the component).

    Note that when an instance of SimpleDataObjectDecorator is created,
    the component is initialized with its default constructor.

    SimpleDataObjectDecorator can decorate any simple data type. Two other
    decorators are provided for decorating pointers. DataObjectDecorator
    will decorate pointers to subclasses of itkObject (internally storing
    the pointer in a SmartPointer). AutoPointerDataObjectDecorator will
    decorate any other pointer and manage the memory deallocating of the
    component.

    See:   DataObjectDecorator

    See:  AutoPointerDataObjectDecorator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSS___New_orig__)
    Clone = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSS_Clone)
    Set = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSS_Set)
    Get = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSS_Get)
    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorSS
    cast = _swig_new_static_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSS_cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorSS

        Create a new object of the class itkSimpleDataObjectDecoratorSS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorSS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorSS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimpleDataObjectDecoratorSS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimpleDataObjectDecoratorSS in _itkSimpleDataObjectDecoratorPython:
_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSS_swigregister(itkSimpleDataObjectDecoratorSS)
itkSimpleDataObjectDecoratorSS___New_orig__ = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSS___New_orig__
itkSimpleDataObjectDecoratorSS_cast = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSS_cast


def itkSimpleDataObjectDecoratorUC_New():
    return itkSimpleDataObjectDecoratorUC.New()

class itkSimpleDataObjectDecoratorUC(itk.ITKCommonBasePython.itkDataObject):
    r"""


    Decorates any "simple" data type (data types without smart pointers)
    with a DataObject API.

    SimpleDataObjectDecorator decorates an object with a DataObject API.
    This allows simple objects to be encapsulated into objects that can be
    passed as down the pipeline. This decorator is intended to be used on
    native types (float, int, etc.) or any objects not derived from
    itkObject. To decorate a subclass of itkObject, see
    DataObjectDecorator.

    The decorator provides two methods Set() and Get() to access the
    decorated object (referred internally as the component).

    Note that when an instance of SimpleDataObjectDecorator is created,
    the component is initialized with its default constructor.

    SimpleDataObjectDecorator can decorate any simple data type. Two other
    decorators are provided for decorating pointers. DataObjectDecorator
    will decorate pointers to subclasses of itkObject (internally storing
    the pointer in a SmartPointer). AutoPointerDataObjectDecorator will
    decorate any other pointer and manage the memory deallocating of the
    component.

    See:   DataObjectDecorator

    See:  AutoPointerDataObjectDecorator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUC___New_orig__)
    Clone = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUC_Clone)
    Set = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUC_Set)
    Get = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUC_Get)
    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorUC
    cast = _swig_new_static_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUC_cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorUC

        Create a new object of the class itkSimpleDataObjectDecoratorUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorUC.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorUC.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimpleDataObjectDecoratorUC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimpleDataObjectDecoratorUC in _itkSimpleDataObjectDecoratorPython:
_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUC_swigregister(itkSimpleDataObjectDecoratorUC)
itkSimpleDataObjectDecoratorUC___New_orig__ = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUC___New_orig__
itkSimpleDataObjectDecoratorUC_cast = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUC_cast


def itkSimpleDataObjectDecoratorUL_New():
    return itkSimpleDataObjectDecoratorUL.New()

class itkSimpleDataObjectDecoratorUL(itk.ITKCommonBasePython.itkDataObject):
    r"""


    Decorates any "simple" data type (data types without smart pointers)
    with a DataObject API.

    SimpleDataObjectDecorator decorates an object with a DataObject API.
    This allows simple objects to be encapsulated into objects that can be
    passed as down the pipeline. This decorator is intended to be used on
    native types (float, int, etc.) or any objects not derived from
    itkObject. To decorate a subclass of itkObject, see
    DataObjectDecorator.

    The decorator provides two methods Set() and Get() to access the
    decorated object (referred internally as the component).

    Note that when an instance of SimpleDataObjectDecorator is created,
    the component is initialized with its default constructor.

    SimpleDataObjectDecorator can decorate any simple data type. Two other
    decorators are provided for decorating pointers. DataObjectDecorator
    will decorate pointers to subclasses of itkObject (internally storing
    the pointer in a SmartPointer). AutoPointerDataObjectDecorator will
    decorate any other pointer and manage the memory deallocating of the
    component.

    See:   DataObjectDecorator

    See:  AutoPointerDataObjectDecorator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUL___New_orig__)
    Clone = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUL_Clone)
    Set = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUL_Set)
    Get = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUL_Get)
    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorUL
    cast = _swig_new_static_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUL_cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorUL

        Create a new object of the class itkSimpleDataObjectDecoratorUL and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorUL.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorUL.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimpleDataObjectDecoratorUL.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimpleDataObjectDecoratorUL in _itkSimpleDataObjectDecoratorPython:
_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUL_swigregister(itkSimpleDataObjectDecoratorUL)
itkSimpleDataObjectDecoratorUL___New_orig__ = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUL___New_orig__
itkSimpleDataObjectDecoratorUL_cast = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUL_cast


def itkSimpleDataObjectDecoratorULL_New():
    return itkSimpleDataObjectDecoratorULL.New()

class itkSimpleDataObjectDecoratorULL(itk.ITKCommonBasePython.itkDataObject):
    r"""


    Decorates any "simple" data type (data types without smart pointers)
    with a DataObject API.

    SimpleDataObjectDecorator decorates an object with a DataObject API.
    This allows simple objects to be encapsulated into objects that can be
    passed as down the pipeline. This decorator is intended to be used on
    native types (float, int, etc.) or any objects not derived from
    itkObject. To decorate a subclass of itkObject, see
    DataObjectDecorator.

    The decorator provides two methods Set() and Get() to access the
    decorated object (referred internally as the component).

    Note that when an instance of SimpleDataObjectDecorator is created,
    the component is initialized with its default constructor.

    SimpleDataObjectDecorator can decorate any simple data type. Two other
    decorators are provided for decorating pointers. DataObjectDecorator
    will decorate pointers to subclasses of itkObject (internally storing
    the pointer in a SmartPointer). AutoPointerDataObjectDecorator will
    decorate any other pointer and manage the memory deallocating of the
    component.

    See:   DataObjectDecorator

    See:  AutoPointerDataObjectDecorator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorULL___New_orig__)
    Clone = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorULL_Clone)
    Set = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorULL_Set)
    Get = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorULL_Get)
    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorULL
    cast = _swig_new_static_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorULL_cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorULL

        Create a new object of the class itkSimpleDataObjectDecoratorULL and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorULL.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorULL.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimpleDataObjectDecoratorULL.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimpleDataObjectDecoratorULL in _itkSimpleDataObjectDecoratorPython:
_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorULL_swigregister(itkSimpleDataObjectDecoratorULL)
itkSimpleDataObjectDecoratorULL___New_orig__ = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorULL___New_orig__
itkSimpleDataObjectDecoratorULL_cast = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorULL_cast


def itkSimpleDataObjectDecoratorUS_New():
    return itkSimpleDataObjectDecoratorUS.New()

class itkSimpleDataObjectDecoratorUS(itk.ITKCommonBasePython.itkDataObject):
    r"""


    Decorates any "simple" data type (data types without smart pointers)
    with a DataObject API.

    SimpleDataObjectDecorator decorates an object with a DataObject API.
    This allows simple objects to be encapsulated into objects that can be
    passed as down the pipeline. This decorator is intended to be used on
    native types (float, int, etc.) or any objects not derived from
    itkObject. To decorate a subclass of itkObject, see
    DataObjectDecorator.

    The decorator provides two methods Set() and Get() to access the
    decorated object (referred internally as the component).

    Note that when an instance of SimpleDataObjectDecorator is created,
    the component is initialized with its default constructor.

    SimpleDataObjectDecorator can decorate any simple data type. Two other
    decorators are provided for decorating pointers. DataObjectDecorator
    will decorate pointers to subclasses of itkObject (internally storing
    the pointer in a SmartPointer). AutoPointerDataObjectDecorator will
    decorate any other pointer and manage the memory deallocating of the
    component.

    See:   DataObjectDecorator

    See:  AutoPointerDataObjectDecorator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUS___New_orig__)
    Clone = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUS_Clone)
    Set = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUS_Set)
    Get = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUS_Get)
    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorUS
    cast = _swig_new_static_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUS_cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorUS

        Create a new object of the class itkSimpleDataObjectDecoratorUS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorUS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorUS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimpleDataObjectDecoratorUS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimpleDataObjectDecoratorUS in _itkSimpleDataObjectDecoratorPython:
_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUS_swigregister(itkSimpleDataObjectDecoratorUS)
itkSimpleDataObjectDecoratorUS___New_orig__ = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUS___New_orig__
itkSimpleDataObjectDecoratorUS_cast = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUS_cast


def itkSimpleDataObjectDecoratorVF2_New():
    return itkSimpleDataObjectDecoratorVF2.New()

class itkSimpleDataObjectDecoratorVF2(itk.ITKCommonBasePython.itkDataObject):
    r"""


    Decorates any "simple" data type (data types without smart pointers)
    with a DataObject API.

    SimpleDataObjectDecorator decorates an object with a DataObject API.
    This allows simple objects to be encapsulated into objects that can be
    passed as down the pipeline. This decorator is intended to be used on
    native types (float, int, etc.) or any objects not derived from
    itkObject. To decorate a subclass of itkObject, see
    DataObjectDecorator.

    The decorator provides two methods Set() and Get() to access the
    decorated object (referred internally as the component).

    Note that when an instance of SimpleDataObjectDecorator is created,
    the component is initialized with its default constructor.

    SimpleDataObjectDecorator can decorate any simple data type. Two other
    decorators are provided for decorating pointers. DataObjectDecorator
    will decorate pointers to subclasses of itkObject (internally storing
    the pointer in a SmartPointer). AutoPointerDataObjectDecorator will
    decorate any other pointer and manage the memory deallocating of the
    component.

    See:   DataObjectDecorator

    See:  AutoPointerDataObjectDecorator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF2___New_orig__)
    Clone = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF2_Clone)
    Set = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF2_Set)
    Get = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF2_Get)
    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorVF2
    cast = _swig_new_static_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF2_cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorVF2

        Create a new object of the class itkSimpleDataObjectDecoratorVF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorVF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorVF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimpleDataObjectDecoratorVF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimpleDataObjectDecoratorVF2 in _itkSimpleDataObjectDecoratorPython:
_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF2_swigregister(itkSimpleDataObjectDecoratorVF2)
itkSimpleDataObjectDecoratorVF2___New_orig__ = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF2___New_orig__
itkSimpleDataObjectDecoratorVF2_cast = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF2_cast


def itkSimpleDataObjectDecoratorVF3_New():
    return itkSimpleDataObjectDecoratorVF3.New()

class itkSimpleDataObjectDecoratorVF3(itk.ITKCommonBasePython.itkDataObject):
    r"""


    Decorates any "simple" data type (data types without smart pointers)
    with a DataObject API.

    SimpleDataObjectDecorator decorates an object with a DataObject API.
    This allows simple objects to be encapsulated into objects that can be
    passed as down the pipeline. This decorator is intended to be used on
    native types (float, int, etc.) or any objects not derived from
    itkObject. To decorate a subclass of itkObject, see
    DataObjectDecorator.

    The decorator provides two methods Set() and Get() to access the
    decorated object (referred internally as the component).

    Note that when an instance of SimpleDataObjectDecorator is created,
    the component is initialized with its default constructor.

    SimpleDataObjectDecorator can decorate any simple data type. Two other
    decorators are provided for decorating pointers. DataObjectDecorator
    will decorate pointers to subclasses of itkObject (internally storing
    the pointer in a SmartPointer). AutoPointerDataObjectDecorator will
    decorate any other pointer and manage the memory deallocating of the
    component.

    See:   DataObjectDecorator

    See:  AutoPointerDataObjectDecorator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF3___New_orig__)
    Clone = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF3_Clone)
    Set = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF3_Set)
    Get = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF3_Get)
    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorVF3
    cast = _swig_new_static_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF3_cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorVF3

        Create a new object of the class itkSimpleDataObjectDecoratorVF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorVF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorVF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimpleDataObjectDecoratorVF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimpleDataObjectDecoratorVF3 in _itkSimpleDataObjectDecoratorPython:
_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF3_swigregister(itkSimpleDataObjectDecoratorVF3)
itkSimpleDataObjectDecoratorVF3___New_orig__ = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF3___New_orig__
itkSimpleDataObjectDecoratorVF3_cast = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF3_cast


def itkSimpleDataObjectDecoratorVF4_New():
    return itkSimpleDataObjectDecoratorVF4.New()

class itkSimpleDataObjectDecoratorVF4(itk.ITKCommonBasePython.itkDataObject):
    r"""


    Decorates any "simple" data type (data types without smart pointers)
    with a DataObject API.

    SimpleDataObjectDecorator decorates an object with a DataObject API.
    This allows simple objects to be encapsulated into objects that can be
    passed as down the pipeline. This decorator is intended to be used on
    native types (float, int, etc.) or any objects not derived from
    itkObject. To decorate a subclass of itkObject, see
    DataObjectDecorator.

    The decorator provides two methods Set() and Get() to access the
    decorated object (referred internally as the component).

    Note that when an instance of SimpleDataObjectDecorator is created,
    the component is initialized with its default constructor.

    SimpleDataObjectDecorator can decorate any simple data type. Two other
    decorators are provided for decorating pointers. DataObjectDecorator
    will decorate pointers to subclasses of itkObject (internally storing
    the pointer in a SmartPointer). AutoPointerDataObjectDecorator will
    decorate any other pointer and manage the memory deallocating of the
    component.

    See:   DataObjectDecorator

    See:  AutoPointerDataObjectDecorator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF4___New_orig__)
    Clone = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF4_Clone)
    Set = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF4_Set)
    Get = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF4_Get)
    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorVF4
    cast = _swig_new_static_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF4_cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorVF4

        Create a new object of the class itkSimpleDataObjectDecoratorVF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorVF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorVF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimpleDataObjectDecoratorVF4.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimpleDataObjectDecoratorVF4 in _itkSimpleDataObjectDecoratorPython:
_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF4_swigregister(itkSimpleDataObjectDecoratorVF4)
itkSimpleDataObjectDecoratorVF4___New_orig__ = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF4___New_orig__
itkSimpleDataObjectDecoratorVF4_cast = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF4_cast


def itkSimpleDataObjectDecoratorstring_New():
    return itkSimpleDataObjectDecoratorstring.New()

class itkSimpleDataObjectDecoratorstring(itk.ITKCommonBasePython.itkDataObject):
    r"""


    Decorates any "simple" data type (data types without smart pointers)
    with a DataObject API.

    SimpleDataObjectDecorator decorates an object with a DataObject API.
    This allows simple objects to be encapsulated into objects that can be
    passed as down the pipeline. This decorator is intended to be used on
    native types (float, int, etc.) or any objects not derived from
    itkObject. To decorate a subclass of itkObject, see
    DataObjectDecorator.

    The decorator provides two methods Set() and Get() to access the
    decorated object (referred internally as the component).

    Note that when an instance of SimpleDataObjectDecorator is created,
    the component is initialized with its default constructor.

    SimpleDataObjectDecorator can decorate any simple data type. Two other
    decorators are provided for decorating pointers. DataObjectDecorator
    will decorate pointers to subclasses of itkObject (internally storing
    the pointer in a SmartPointer). AutoPointerDataObjectDecorator will
    decorate any other pointer and manage the memory deallocating of the
    component.

    See:   DataObjectDecorator

    See:  AutoPointerDataObjectDecorator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorstring___New_orig__)
    Clone = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorstring_Clone)
    Set = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorstring_Set)
    Get = _swig_new_instance_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorstring_Get)
    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorstring
    cast = _swig_new_static_method(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorstring_cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorstring

        Create a new object of the class itkSimpleDataObjectDecoratorstring and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorstring.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorstring.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimpleDataObjectDecoratorstring.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimpleDataObjectDecoratorstring in _itkSimpleDataObjectDecoratorPython:
_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorstring_swigregister(itkSimpleDataObjectDecoratorstring)
itkSimpleDataObjectDecoratorstring___New_orig__ = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorstring___New_orig__
itkSimpleDataObjectDecoratorstring_cast = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorstring_cast



