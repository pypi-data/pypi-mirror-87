# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKAnisotropicSmoothingPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkVectorGradientAnisotropicDiffusionImageFilterPython
else:
    import _itkVectorGradientAnisotropicDiffusionImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkVectorGradientAnisotropicDiffusionImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkVectorGradientAnisotropicDiffusionImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkAnisotropicDiffusionImageFilterPython
import itk.itkDenseFiniteDifferenceImageFilterPython
import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkImagePython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkFiniteDifferenceImageFilterPython
import itk.itkFiniteDifferenceFunctionPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
import itk.itkImageToImageFilterCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterBPython

def itkVectorGradientAnisotropicDiffusionImageFilterICVF22ICVF22_New():
    return itkVectorGradientAnisotropicDiffusionImageFilterICVF22ICVF22.New()

class itkVectorGradientAnisotropicDiffusionImageFilterICVF22ICVF22(itk.itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF22ICVF22):
    r"""


    This filter performs anisotropic diffusion on a vector itk::Image
    using the anisotropic diffusion function implemented implemented in
    itkVectorGradientNDAnisotropicDiffusionFunction. For detailed
    information on anisotropic diffusion see
    itkAnisotropicDiffusionFunction,
    itkVectorGradientNDAnisotropicDiffusionFunction, and
    itkGradientAnisotropicDiffusionFunction.

    Inputs and Outputs The input to this filter must be an itk::Image with
    pixel type which is either an itk::Vector, or a subclass of an
    itk::Vector. Additionally, the component type of the vector should be
    a numerical type (float or double, or a user defined type which
    correctly defines arithmetic operations with floating point accuracy).
    The output image type also has these requirements. Parameters Please
    read all the documentation found in AnisotropicDiffusionImageFilter
    and AnisotropicDiffusionFunction. Also see
    VectorGradientNDAnisotropicDiffusionFunction.  The maximum allowable
    time step for this filter is 1/2^N, where N is the dimensionality of
    the image. For 2D images any value below 0.250 is stable, and for 3D
    images, any value below 0.125 is stable.

    {Filtering/AnisotropicSmoothing/SmoothImageWhilePreservingEdges,Smooth
    Image While Preserving Edges} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterICVF22ICVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterICVF22ICVF22_Clone)
    InputHasNumericTraitsCheck = _itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterICVF22ICVF22_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterICVF22ICVF22_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkVectorGradientAnisotropicDiffusionImageFilterPython.delete_itkVectorGradientAnisotropicDiffusionImageFilterICVF22ICVF22
    cast = _swig_new_static_method(_itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterICVF22ICVF22_cast)

    def New(*args, **kargs):
        """New() -> itkVectorGradientAnisotropicDiffusionImageFilterICVF22ICVF22

        Create a new object of the class itkVectorGradientAnisotropicDiffusionImageFilterICVF22ICVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorGradientAnisotropicDiffusionImageFilterICVF22ICVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorGradientAnisotropicDiffusionImageFilterICVF22ICVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorGradientAnisotropicDiffusionImageFilterICVF22ICVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorGradientAnisotropicDiffusionImageFilterICVF22ICVF22 in _itkVectorGradientAnisotropicDiffusionImageFilterPython:
_itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterICVF22ICVF22_swigregister(itkVectorGradientAnisotropicDiffusionImageFilterICVF22ICVF22)
itkVectorGradientAnisotropicDiffusionImageFilterICVF22ICVF22___New_orig__ = _itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterICVF22ICVF22___New_orig__
itkVectorGradientAnisotropicDiffusionImageFilterICVF22ICVF22_cast = _itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterICVF22ICVF22_cast


def itkVectorGradientAnisotropicDiffusionImageFilterICVF23ICVF23_New():
    return itkVectorGradientAnisotropicDiffusionImageFilterICVF23ICVF23.New()

class itkVectorGradientAnisotropicDiffusionImageFilterICVF23ICVF23(itk.itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF23ICVF23):
    r"""


    This filter performs anisotropic diffusion on a vector itk::Image
    using the anisotropic diffusion function implemented implemented in
    itkVectorGradientNDAnisotropicDiffusionFunction. For detailed
    information on anisotropic diffusion see
    itkAnisotropicDiffusionFunction,
    itkVectorGradientNDAnisotropicDiffusionFunction, and
    itkGradientAnisotropicDiffusionFunction.

    Inputs and Outputs The input to this filter must be an itk::Image with
    pixel type which is either an itk::Vector, or a subclass of an
    itk::Vector. Additionally, the component type of the vector should be
    a numerical type (float or double, or a user defined type which
    correctly defines arithmetic operations with floating point accuracy).
    The output image type also has these requirements. Parameters Please
    read all the documentation found in AnisotropicDiffusionImageFilter
    and AnisotropicDiffusionFunction. Also see
    VectorGradientNDAnisotropicDiffusionFunction.  The maximum allowable
    time step for this filter is 1/2^N, where N is the dimensionality of
    the image. For 2D images any value below 0.250 is stable, and for 3D
    images, any value below 0.125 is stable.

    {Filtering/AnisotropicSmoothing/SmoothImageWhilePreservingEdges,Smooth
    Image While Preserving Edges} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterICVF23ICVF23___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterICVF23ICVF23_Clone)
    InputHasNumericTraitsCheck = _itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterICVF23ICVF23_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterICVF23ICVF23_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkVectorGradientAnisotropicDiffusionImageFilterPython.delete_itkVectorGradientAnisotropicDiffusionImageFilterICVF23ICVF23
    cast = _swig_new_static_method(_itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterICVF23ICVF23_cast)

    def New(*args, **kargs):
        """New() -> itkVectorGradientAnisotropicDiffusionImageFilterICVF23ICVF23

        Create a new object of the class itkVectorGradientAnisotropicDiffusionImageFilterICVF23ICVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorGradientAnisotropicDiffusionImageFilterICVF23ICVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorGradientAnisotropicDiffusionImageFilterICVF23ICVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorGradientAnisotropicDiffusionImageFilterICVF23ICVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorGradientAnisotropicDiffusionImageFilterICVF23ICVF23 in _itkVectorGradientAnisotropicDiffusionImageFilterPython:
_itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterICVF23ICVF23_swigregister(itkVectorGradientAnisotropicDiffusionImageFilterICVF23ICVF23)
itkVectorGradientAnisotropicDiffusionImageFilterICVF23ICVF23___New_orig__ = _itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterICVF23ICVF23___New_orig__
itkVectorGradientAnisotropicDiffusionImageFilterICVF23ICVF23_cast = _itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterICVF23ICVF23_cast


def itkVectorGradientAnisotropicDiffusionImageFilterICVF32ICVF32_New():
    return itkVectorGradientAnisotropicDiffusionImageFilterICVF32ICVF32.New()

class itkVectorGradientAnisotropicDiffusionImageFilterICVF32ICVF32(itk.itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF32ICVF32):
    r"""


    This filter performs anisotropic diffusion on a vector itk::Image
    using the anisotropic diffusion function implemented implemented in
    itkVectorGradientNDAnisotropicDiffusionFunction. For detailed
    information on anisotropic diffusion see
    itkAnisotropicDiffusionFunction,
    itkVectorGradientNDAnisotropicDiffusionFunction, and
    itkGradientAnisotropicDiffusionFunction.

    Inputs and Outputs The input to this filter must be an itk::Image with
    pixel type which is either an itk::Vector, or a subclass of an
    itk::Vector. Additionally, the component type of the vector should be
    a numerical type (float or double, or a user defined type which
    correctly defines arithmetic operations with floating point accuracy).
    The output image type also has these requirements. Parameters Please
    read all the documentation found in AnisotropicDiffusionImageFilter
    and AnisotropicDiffusionFunction. Also see
    VectorGradientNDAnisotropicDiffusionFunction.  The maximum allowable
    time step for this filter is 1/2^N, where N is the dimensionality of
    the image. For 2D images any value below 0.250 is stable, and for 3D
    images, any value below 0.125 is stable.

    {Filtering/AnisotropicSmoothing/SmoothImageWhilePreservingEdges,Smooth
    Image While Preserving Edges} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterICVF32ICVF32___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterICVF32ICVF32_Clone)
    InputHasNumericTraitsCheck = _itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterICVF32ICVF32_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterICVF32ICVF32_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkVectorGradientAnisotropicDiffusionImageFilterPython.delete_itkVectorGradientAnisotropicDiffusionImageFilterICVF32ICVF32
    cast = _swig_new_static_method(_itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterICVF32ICVF32_cast)

    def New(*args, **kargs):
        """New() -> itkVectorGradientAnisotropicDiffusionImageFilterICVF32ICVF32

        Create a new object of the class itkVectorGradientAnisotropicDiffusionImageFilterICVF32ICVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorGradientAnisotropicDiffusionImageFilterICVF32ICVF32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorGradientAnisotropicDiffusionImageFilterICVF32ICVF32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorGradientAnisotropicDiffusionImageFilterICVF32ICVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorGradientAnisotropicDiffusionImageFilterICVF32ICVF32 in _itkVectorGradientAnisotropicDiffusionImageFilterPython:
_itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterICVF32ICVF32_swigregister(itkVectorGradientAnisotropicDiffusionImageFilterICVF32ICVF32)
itkVectorGradientAnisotropicDiffusionImageFilterICVF32ICVF32___New_orig__ = _itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterICVF32ICVF32___New_orig__
itkVectorGradientAnisotropicDiffusionImageFilterICVF32ICVF32_cast = _itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterICVF32ICVF32_cast


def itkVectorGradientAnisotropicDiffusionImageFilterICVF33ICVF33_New():
    return itkVectorGradientAnisotropicDiffusionImageFilterICVF33ICVF33.New()

class itkVectorGradientAnisotropicDiffusionImageFilterICVF33ICVF33(itk.itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF33ICVF33):
    r"""


    This filter performs anisotropic diffusion on a vector itk::Image
    using the anisotropic diffusion function implemented implemented in
    itkVectorGradientNDAnisotropicDiffusionFunction. For detailed
    information on anisotropic diffusion see
    itkAnisotropicDiffusionFunction,
    itkVectorGradientNDAnisotropicDiffusionFunction, and
    itkGradientAnisotropicDiffusionFunction.

    Inputs and Outputs The input to this filter must be an itk::Image with
    pixel type which is either an itk::Vector, or a subclass of an
    itk::Vector. Additionally, the component type of the vector should be
    a numerical type (float or double, or a user defined type which
    correctly defines arithmetic operations with floating point accuracy).
    The output image type also has these requirements. Parameters Please
    read all the documentation found in AnisotropicDiffusionImageFilter
    and AnisotropicDiffusionFunction. Also see
    VectorGradientNDAnisotropicDiffusionFunction.  The maximum allowable
    time step for this filter is 1/2^N, where N is the dimensionality of
    the image. For 2D images any value below 0.250 is stable, and for 3D
    images, any value below 0.125 is stable.

    {Filtering/AnisotropicSmoothing/SmoothImageWhilePreservingEdges,Smooth
    Image While Preserving Edges} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterICVF33ICVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterICVF33ICVF33_Clone)
    InputHasNumericTraitsCheck = _itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterICVF33ICVF33_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterICVF33ICVF33_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkVectorGradientAnisotropicDiffusionImageFilterPython.delete_itkVectorGradientAnisotropicDiffusionImageFilterICVF33ICVF33
    cast = _swig_new_static_method(_itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterICVF33ICVF33_cast)

    def New(*args, **kargs):
        """New() -> itkVectorGradientAnisotropicDiffusionImageFilterICVF33ICVF33

        Create a new object of the class itkVectorGradientAnisotropicDiffusionImageFilterICVF33ICVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorGradientAnisotropicDiffusionImageFilterICVF33ICVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorGradientAnisotropicDiffusionImageFilterICVF33ICVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorGradientAnisotropicDiffusionImageFilterICVF33ICVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorGradientAnisotropicDiffusionImageFilterICVF33ICVF33 in _itkVectorGradientAnisotropicDiffusionImageFilterPython:
_itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterICVF33ICVF33_swigregister(itkVectorGradientAnisotropicDiffusionImageFilterICVF33ICVF33)
itkVectorGradientAnisotropicDiffusionImageFilterICVF33ICVF33___New_orig__ = _itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterICVF33ICVF33___New_orig__
itkVectorGradientAnisotropicDiffusionImageFilterICVF33ICVF33_cast = _itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterICVF33ICVF33_cast


def itkVectorGradientAnisotropicDiffusionImageFilterICVF42ICVF42_New():
    return itkVectorGradientAnisotropicDiffusionImageFilterICVF42ICVF42.New()

class itkVectorGradientAnisotropicDiffusionImageFilterICVF42ICVF42(itk.itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF42ICVF42):
    r"""


    This filter performs anisotropic diffusion on a vector itk::Image
    using the anisotropic diffusion function implemented implemented in
    itkVectorGradientNDAnisotropicDiffusionFunction. For detailed
    information on anisotropic diffusion see
    itkAnisotropicDiffusionFunction,
    itkVectorGradientNDAnisotropicDiffusionFunction, and
    itkGradientAnisotropicDiffusionFunction.

    Inputs and Outputs The input to this filter must be an itk::Image with
    pixel type which is either an itk::Vector, or a subclass of an
    itk::Vector. Additionally, the component type of the vector should be
    a numerical type (float or double, or a user defined type which
    correctly defines arithmetic operations with floating point accuracy).
    The output image type also has these requirements. Parameters Please
    read all the documentation found in AnisotropicDiffusionImageFilter
    and AnisotropicDiffusionFunction. Also see
    VectorGradientNDAnisotropicDiffusionFunction.  The maximum allowable
    time step for this filter is 1/2^N, where N is the dimensionality of
    the image. For 2D images any value below 0.250 is stable, and for 3D
    images, any value below 0.125 is stable.

    {Filtering/AnisotropicSmoothing/SmoothImageWhilePreservingEdges,Smooth
    Image While Preserving Edges} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterICVF42ICVF42___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterICVF42ICVF42_Clone)
    InputHasNumericTraitsCheck = _itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterICVF42ICVF42_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterICVF42ICVF42_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkVectorGradientAnisotropicDiffusionImageFilterPython.delete_itkVectorGradientAnisotropicDiffusionImageFilterICVF42ICVF42
    cast = _swig_new_static_method(_itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterICVF42ICVF42_cast)

    def New(*args, **kargs):
        """New() -> itkVectorGradientAnisotropicDiffusionImageFilterICVF42ICVF42

        Create a new object of the class itkVectorGradientAnisotropicDiffusionImageFilterICVF42ICVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorGradientAnisotropicDiffusionImageFilterICVF42ICVF42.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorGradientAnisotropicDiffusionImageFilterICVF42ICVF42.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorGradientAnisotropicDiffusionImageFilterICVF42ICVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorGradientAnisotropicDiffusionImageFilterICVF42ICVF42 in _itkVectorGradientAnisotropicDiffusionImageFilterPython:
_itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterICVF42ICVF42_swigregister(itkVectorGradientAnisotropicDiffusionImageFilterICVF42ICVF42)
itkVectorGradientAnisotropicDiffusionImageFilterICVF42ICVF42___New_orig__ = _itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterICVF42ICVF42___New_orig__
itkVectorGradientAnisotropicDiffusionImageFilterICVF42ICVF42_cast = _itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterICVF42ICVF42_cast


def itkVectorGradientAnisotropicDiffusionImageFilterICVF43ICVF43_New():
    return itkVectorGradientAnisotropicDiffusionImageFilterICVF43ICVF43.New()

class itkVectorGradientAnisotropicDiffusionImageFilterICVF43ICVF43(itk.itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF43ICVF43):
    r"""


    This filter performs anisotropic diffusion on a vector itk::Image
    using the anisotropic diffusion function implemented implemented in
    itkVectorGradientNDAnisotropicDiffusionFunction. For detailed
    information on anisotropic diffusion see
    itkAnisotropicDiffusionFunction,
    itkVectorGradientNDAnisotropicDiffusionFunction, and
    itkGradientAnisotropicDiffusionFunction.

    Inputs and Outputs The input to this filter must be an itk::Image with
    pixel type which is either an itk::Vector, or a subclass of an
    itk::Vector. Additionally, the component type of the vector should be
    a numerical type (float or double, or a user defined type which
    correctly defines arithmetic operations with floating point accuracy).
    The output image type also has these requirements. Parameters Please
    read all the documentation found in AnisotropicDiffusionImageFilter
    and AnisotropicDiffusionFunction. Also see
    VectorGradientNDAnisotropicDiffusionFunction.  The maximum allowable
    time step for this filter is 1/2^N, where N is the dimensionality of
    the image. For 2D images any value below 0.250 is stable, and for 3D
    images, any value below 0.125 is stable.

    {Filtering/AnisotropicSmoothing/SmoothImageWhilePreservingEdges,Smooth
    Image While Preserving Edges} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterICVF43ICVF43___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterICVF43ICVF43_Clone)
    InputHasNumericTraitsCheck = _itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterICVF43ICVF43_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterICVF43ICVF43_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkVectorGradientAnisotropicDiffusionImageFilterPython.delete_itkVectorGradientAnisotropicDiffusionImageFilterICVF43ICVF43
    cast = _swig_new_static_method(_itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterICVF43ICVF43_cast)

    def New(*args, **kargs):
        """New() -> itkVectorGradientAnisotropicDiffusionImageFilterICVF43ICVF43

        Create a new object of the class itkVectorGradientAnisotropicDiffusionImageFilterICVF43ICVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorGradientAnisotropicDiffusionImageFilterICVF43ICVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorGradientAnisotropicDiffusionImageFilterICVF43ICVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorGradientAnisotropicDiffusionImageFilterICVF43ICVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorGradientAnisotropicDiffusionImageFilterICVF43ICVF43 in _itkVectorGradientAnisotropicDiffusionImageFilterPython:
_itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterICVF43ICVF43_swigregister(itkVectorGradientAnisotropicDiffusionImageFilterICVF43ICVF43)
itkVectorGradientAnisotropicDiffusionImageFilterICVF43ICVF43___New_orig__ = _itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterICVF43ICVF43___New_orig__
itkVectorGradientAnisotropicDiffusionImageFilterICVF43ICVF43_cast = _itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterICVF43ICVF43_cast


def itkVectorGradientAnisotropicDiffusionImageFilterIVF22IVF22_New():
    return itkVectorGradientAnisotropicDiffusionImageFilterIVF22IVF22.New()

class itkVectorGradientAnisotropicDiffusionImageFilterIVF22IVF22(itk.itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF22IVF22):
    r"""


    This filter performs anisotropic diffusion on a vector itk::Image
    using the anisotropic diffusion function implemented implemented in
    itkVectorGradientNDAnisotropicDiffusionFunction. For detailed
    information on anisotropic diffusion see
    itkAnisotropicDiffusionFunction,
    itkVectorGradientNDAnisotropicDiffusionFunction, and
    itkGradientAnisotropicDiffusionFunction.

    Inputs and Outputs The input to this filter must be an itk::Image with
    pixel type which is either an itk::Vector, or a subclass of an
    itk::Vector. Additionally, the component type of the vector should be
    a numerical type (float or double, or a user defined type which
    correctly defines arithmetic operations with floating point accuracy).
    The output image type also has these requirements. Parameters Please
    read all the documentation found in AnisotropicDiffusionImageFilter
    and AnisotropicDiffusionFunction. Also see
    VectorGradientNDAnisotropicDiffusionFunction.  The maximum allowable
    time step for this filter is 1/2^N, where N is the dimensionality of
    the image. For 2D images any value below 0.250 is stable, and for 3D
    images, any value below 0.125 is stable.

    {Filtering/AnisotropicSmoothing/SmoothImageWhilePreservingEdges,Smooth
    Image While Preserving Edges} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterIVF22IVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterIVF22IVF22_Clone)
    InputHasNumericTraitsCheck = _itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterIVF22IVF22_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterIVF22IVF22_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkVectorGradientAnisotropicDiffusionImageFilterPython.delete_itkVectorGradientAnisotropicDiffusionImageFilterIVF22IVF22
    cast = _swig_new_static_method(_itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterIVF22IVF22_cast)

    def New(*args, **kargs):
        """New() -> itkVectorGradientAnisotropicDiffusionImageFilterIVF22IVF22

        Create a new object of the class itkVectorGradientAnisotropicDiffusionImageFilterIVF22IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorGradientAnisotropicDiffusionImageFilterIVF22IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorGradientAnisotropicDiffusionImageFilterIVF22IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorGradientAnisotropicDiffusionImageFilterIVF22IVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorGradientAnisotropicDiffusionImageFilterIVF22IVF22 in _itkVectorGradientAnisotropicDiffusionImageFilterPython:
_itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterIVF22IVF22_swigregister(itkVectorGradientAnisotropicDiffusionImageFilterIVF22IVF22)
itkVectorGradientAnisotropicDiffusionImageFilterIVF22IVF22___New_orig__ = _itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterIVF22IVF22___New_orig__
itkVectorGradientAnisotropicDiffusionImageFilterIVF22IVF22_cast = _itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterIVF22IVF22_cast


def itkVectorGradientAnisotropicDiffusionImageFilterIVF23IVF23_New():
    return itkVectorGradientAnisotropicDiffusionImageFilterIVF23IVF23.New()

class itkVectorGradientAnisotropicDiffusionImageFilterIVF23IVF23(itk.itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF23IVF23):
    r"""


    This filter performs anisotropic diffusion on a vector itk::Image
    using the anisotropic diffusion function implemented implemented in
    itkVectorGradientNDAnisotropicDiffusionFunction. For detailed
    information on anisotropic diffusion see
    itkAnisotropicDiffusionFunction,
    itkVectorGradientNDAnisotropicDiffusionFunction, and
    itkGradientAnisotropicDiffusionFunction.

    Inputs and Outputs The input to this filter must be an itk::Image with
    pixel type which is either an itk::Vector, or a subclass of an
    itk::Vector. Additionally, the component type of the vector should be
    a numerical type (float or double, or a user defined type which
    correctly defines arithmetic operations with floating point accuracy).
    The output image type also has these requirements. Parameters Please
    read all the documentation found in AnisotropicDiffusionImageFilter
    and AnisotropicDiffusionFunction. Also see
    VectorGradientNDAnisotropicDiffusionFunction.  The maximum allowable
    time step for this filter is 1/2^N, where N is the dimensionality of
    the image. For 2D images any value below 0.250 is stable, and for 3D
    images, any value below 0.125 is stable.

    {Filtering/AnisotropicSmoothing/SmoothImageWhilePreservingEdges,Smooth
    Image While Preserving Edges} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterIVF23IVF23___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterIVF23IVF23_Clone)
    InputHasNumericTraitsCheck = _itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterIVF23IVF23_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterIVF23IVF23_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkVectorGradientAnisotropicDiffusionImageFilterPython.delete_itkVectorGradientAnisotropicDiffusionImageFilterIVF23IVF23
    cast = _swig_new_static_method(_itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterIVF23IVF23_cast)

    def New(*args, **kargs):
        """New() -> itkVectorGradientAnisotropicDiffusionImageFilterIVF23IVF23

        Create a new object of the class itkVectorGradientAnisotropicDiffusionImageFilterIVF23IVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorGradientAnisotropicDiffusionImageFilterIVF23IVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorGradientAnisotropicDiffusionImageFilterIVF23IVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorGradientAnisotropicDiffusionImageFilterIVF23IVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorGradientAnisotropicDiffusionImageFilterIVF23IVF23 in _itkVectorGradientAnisotropicDiffusionImageFilterPython:
_itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterIVF23IVF23_swigregister(itkVectorGradientAnisotropicDiffusionImageFilterIVF23IVF23)
itkVectorGradientAnisotropicDiffusionImageFilterIVF23IVF23___New_orig__ = _itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterIVF23IVF23___New_orig__
itkVectorGradientAnisotropicDiffusionImageFilterIVF23IVF23_cast = _itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterIVF23IVF23_cast


def itkVectorGradientAnisotropicDiffusionImageFilterIVF32IVF32_New():
    return itkVectorGradientAnisotropicDiffusionImageFilterIVF32IVF32.New()

class itkVectorGradientAnisotropicDiffusionImageFilterIVF32IVF32(itk.itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF32IVF32):
    r"""


    This filter performs anisotropic diffusion on a vector itk::Image
    using the anisotropic diffusion function implemented implemented in
    itkVectorGradientNDAnisotropicDiffusionFunction. For detailed
    information on anisotropic diffusion see
    itkAnisotropicDiffusionFunction,
    itkVectorGradientNDAnisotropicDiffusionFunction, and
    itkGradientAnisotropicDiffusionFunction.

    Inputs and Outputs The input to this filter must be an itk::Image with
    pixel type which is either an itk::Vector, or a subclass of an
    itk::Vector. Additionally, the component type of the vector should be
    a numerical type (float or double, or a user defined type which
    correctly defines arithmetic operations with floating point accuracy).
    The output image type also has these requirements. Parameters Please
    read all the documentation found in AnisotropicDiffusionImageFilter
    and AnisotropicDiffusionFunction. Also see
    VectorGradientNDAnisotropicDiffusionFunction.  The maximum allowable
    time step for this filter is 1/2^N, where N is the dimensionality of
    the image. For 2D images any value below 0.250 is stable, and for 3D
    images, any value below 0.125 is stable.

    {Filtering/AnisotropicSmoothing/SmoothImageWhilePreservingEdges,Smooth
    Image While Preserving Edges} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterIVF32IVF32___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterIVF32IVF32_Clone)
    InputHasNumericTraitsCheck = _itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterIVF32IVF32_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterIVF32IVF32_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkVectorGradientAnisotropicDiffusionImageFilterPython.delete_itkVectorGradientAnisotropicDiffusionImageFilterIVF32IVF32
    cast = _swig_new_static_method(_itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterIVF32IVF32_cast)

    def New(*args, **kargs):
        """New() -> itkVectorGradientAnisotropicDiffusionImageFilterIVF32IVF32

        Create a new object of the class itkVectorGradientAnisotropicDiffusionImageFilterIVF32IVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorGradientAnisotropicDiffusionImageFilterIVF32IVF32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorGradientAnisotropicDiffusionImageFilterIVF32IVF32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorGradientAnisotropicDiffusionImageFilterIVF32IVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorGradientAnisotropicDiffusionImageFilterIVF32IVF32 in _itkVectorGradientAnisotropicDiffusionImageFilterPython:
_itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterIVF32IVF32_swigregister(itkVectorGradientAnisotropicDiffusionImageFilterIVF32IVF32)
itkVectorGradientAnisotropicDiffusionImageFilterIVF32IVF32___New_orig__ = _itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterIVF32IVF32___New_orig__
itkVectorGradientAnisotropicDiffusionImageFilterIVF32IVF32_cast = _itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterIVF32IVF32_cast


def itkVectorGradientAnisotropicDiffusionImageFilterIVF33IVF33_New():
    return itkVectorGradientAnisotropicDiffusionImageFilterIVF33IVF33.New()

class itkVectorGradientAnisotropicDiffusionImageFilterIVF33IVF33(itk.itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF33IVF33):
    r"""


    This filter performs anisotropic diffusion on a vector itk::Image
    using the anisotropic diffusion function implemented implemented in
    itkVectorGradientNDAnisotropicDiffusionFunction. For detailed
    information on anisotropic diffusion see
    itkAnisotropicDiffusionFunction,
    itkVectorGradientNDAnisotropicDiffusionFunction, and
    itkGradientAnisotropicDiffusionFunction.

    Inputs and Outputs The input to this filter must be an itk::Image with
    pixel type which is either an itk::Vector, or a subclass of an
    itk::Vector. Additionally, the component type of the vector should be
    a numerical type (float or double, or a user defined type which
    correctly defines arithmetic operations with floating point accuracy).
    The output image type also has these requirements. Parameters Please
    read all the documentation found in AnisotropicDiffusionImageFilter
    and AnisotropicDiffusionFunction. Also see
    VectorGradientNDAnisotropicDiffusionFunction.  The maximum allowable
    time step for this filter is 1/2^N, where N is the dimensionality of
    the image. For 2D images any value below 0.250 is stable, and for 3D
    images, any value below 0.125 is stable.

    {Filtering/AnisotropicSmoothing/SmoothImageWhilePreservingEdges,Smooth
    Image While Preserving Edges} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterIVF33IVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterIVF33IVF33_Clone)
    InputHasNumericTraitsCheck = _itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterIVF33IVF33_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterIVF33IVF33_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkVectorGradientAnisotropicDiffusionImageFilterPython.delete_itkVectorGradientAnisotropicDiffusionImageFilterIVF33IVF33
    cast = _swig_new_static_method(_itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterIVF33IVF33_cast)

    def New(*args, **kargs):
        """New() -> itkVectorGradientAnisotropicDiffusionImageFilterIVF33IVF33

        Create a new object of the class itkVectorGradientAnisotropicDiffusionImageFilterIVF33IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorGradientAnisotropicDiffusionImageFilterIVF33IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorGradientAnisotropicDiffusionImageFilterIVF33IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorGradientAnisotropicDiffusionImageFilterIVF33IVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorGradientAnisotropicDiffusionImageFilterIVF33IVF33 in _itkVectorGradientAnisotropicDiffusionImageFilterPython:
_itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterIVF33IVF33_swigregister(itkVectorGradientAnisotropicDiffusionImageFilterIVF33IVF33)
itkVectorGradientAnisotropicDiffusionImageFilterIVF33IVF33___New_orig__ = _itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterIVF33IVF33___New_orig__
itkVectorGradientAnisotropicDiffusionImageFilterIVF33IVF33_cast = _itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterIVF33IVF33_cast


def itkVectorGradientAnisotropicDiffusionImageFilterIVF42IVF42_New():
    return itkVectorGradientAnisotropicDiffusionImageFilterIVF42IVF42.New()

class itkVectorGradientAnisotropicDiffusionImageFilterIVF42IVF42(itk.itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF42IVF42):
    r"""


    This filter performs anisotropic diffusion on a vector itk::Image
    using the anisotropic diffusion function implemented implemented in
    itkVectorGradientNDAnisotropicDiffusionFunction. For detailed
    information on anisotropic diffusion see
    itkAnisotropicDiffusionFunction,
    itkVectorGradientNDAnisotropicDiffusionFunction, and
    itkGradientAnisotropicDiffusionFunction.

    Inputs and Outputs The input to this filter must be an itk::Image with
    pixel type which is either an itk::Vector, or a subclass of an
    itk::Vector. Additionally, the component type of the vector should be
    a numerical type (float or double, or a user defined type which
    correctly defines arithmetic operations with floating point accuracy).
    The output image type also has these requirements. Parameters Please
    read all the documentation found in AnisotropicDiffusionImageFilter
    and AnisotropicDiffusionFunction. Also see
    VectorGradientNDAnisotropicDiffusionFunction.  The maximum allowable
    time step for this filter is 1/2^N, where N is the dimensionality of
    the image. For 2D images any value below 0.250 is stable, and for 3D
    images, any value below 0.125 is stable.

    {Filtering/AnisotropicSmoothing/SmoothImageWhilePreservingEdges,Smooth
    Image While Preserving Edges} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterIVF42IVF42___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterIVF42IVF42_Clone)
    InputHasNumericTraitsCheck = _itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterIVF42IVF42_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterIVF42IVF42_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkVectorGradientAnisotropicDiffusionImageFilterPython.delete_itkVectorGradientAnisotropicDiffusionImageFilterIVF42IVF42
    cast = _swig_new_static_method(_itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterIVF42IVF42_cast)

    def New(*args, **kargs):
        """New() -> itkVectorGradientAnisotropicDiffusionImageFilterIVF42IVF42

        Create a new object of the class itkVectorGradientAnisotropicDiffusionImageFilterIVF42IVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorGradientAnisotropicDiffusionImageFilterIVF42IVF42.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorGradientAnisotropicDiffusionImageFilterIVF42IVF42.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorGradientAnisotropicDiffusionImageFilterIVF42IVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorGradientAnisotropicDiffusionImageFilterIVF42IVF42 in _itkVectorGradientAnisotropicDiffusionImageFilterPython:
_itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterIVF42IVF42_swigregister(itkVectorGradientAnisotropicDiffusionImageFilterIVF42IVF42)
itkVectorGradientAnisotropicDiffusionImageFilterIVF42IVF42___New_orig__ = _itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterIVF42IVF42___New_orig__
itkVectorGradientAnisotropicDiffusionImageFilterIVF42IVF42_cast = _itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterIVF42IVF42_cast


def itkVectorGradientAnisotropicDiffusionImageFilterIVF43IVF43_New():
    return itkVectorGradientAnisotropicDiffusionImageFilterIVF43IVF43.New()

class itkVectorGradientAnisotropicDiffusionImageFilterIVF43IVF43(itk.itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF43IVF43):
    r"""


    This filter performs anisotropic diffusion on a vector itk::Image
    using the anisotropic diffusion function implemented implemented in
    itkVectorGradientNDAnisotropicDiffusionFunction. For detailed
    information on anisotropic diffusion see
    itkAnisotropicDiffusionFunction,
    itkVectorGradientNDAnisotropicDiffusionFunction, and
    itkGradientAnisotropicDiffusionFunction.

    Inputs and Outputs The input to this filter must be an itk::Image with
    pixel type which is either an itk::Vector, or a subclass of an
    itk::Vector. Additionally, the component type of the vector should be
    a numerical type (float or double, or a user defined type which
    correctly defines arithmetic operations with floating point accuracy).
    The output image type also has these requirements. Parameters Please
    read all the documentation found in AnisotropicDiffusionImageFilter
    and AnisotropicDiffusionFunction. Also see
    VectorGradientNDAnisotropicDiffusionFunction.  The maximum allowable
    time step for this filter is 1/2^N, where N is the dimensionality of
    the image. For 2D images any value below 0.250 is stable, and for 3D
    images, any value below 0.125 is stable.

    {Filtering/AnisotropicSmoothing/SmoothImageWhilePreservingEdges,Smooth
    Image While Preserving Edges} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterIVF43IVF43___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterIVF43IVF43_Clone)
    InputHasNumericTraitsCheck = _itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterIVF43IVF43_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterIVF43IVF43_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkVectorGradientAnisotropicDiffusionImageFilterPython.delete_itkVectorGradientAnisotropicDiffusionImageFilterIVF43IVF43
    cast = _swig_new_static_method(_itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterIVF43IVF43_cast)

    def New(*args, **kargs):
        """New() -> itkVectorGradientAnisotropicDiffusionImageFilterIVF43IVF43

        Create a new object of the class itkVectorGradientAnisotropicDiffusionImageFilterIVF43IVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorGradientAnisotropicDiffusionImageFilterIVF43IVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorGradientAnisotropicDiffusionImageFilterIVF43IVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorGradientAnisotropicDiffusionImageFilterIVF43IVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorGradientAnisotropicDiffusionImageFilterIVF43IVF43 in _itkVectorGradientAnisotropicDiffusionImageFilterPython:
_itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterIVF43IVF43_swigregister(itkVectorGradientAnisotropicDiffusionImageFilterIVF43IVF43)
itkVectorGradientAnisotropicDiffusionImageFilterIVF43IVF43___New_orig__ = _itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterIVF43IVF43___New_orig__
itkVectorGradientAnisotropicDiffusionImageFilterIVF43IVF43_cast = _itkVectorGradientAnisotropicDiffusionImageFilterPython.itkVectorGradientAnisotropicDiffusionImageFilterIVF43IVF43_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def vector_gradient_anisotropic_diffusion_image_filter(*args, **kwargs):
    """Procedural interface for VectorGradientAnisotropicDiffusionImageFilter"""
    import itk
    instance = itk.VectorGradientAnisotropicDiffusionImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def vector_gradient_anisotropic_diffusion_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.VectorGradientAnisotropicDiffusionImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.VectorGradientAnisotropicDiffusionImageFilter.values()[0]
    else:
        filter_object = itk.VectorGradientAnisotropicDiffusionImageFilter

    vector_gradient_anisotropic_diffusion_image_filter.__doc__ = filter_object.__doc__
    vector_gradient_anisotropic_diffusion_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    vector_gradient_anisotropic_diffusion_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.VectorGradientAnisotropicDiffusionImageFilter, itkTemplate.itkTemplate):
        vector_gradient_anisotropic_diffusion_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        vector_gradient_anisotropic_diffusion_image_filter.__doc__ += "\n"
        vector_gradient_anisotropic_diffusion_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        vector_gradient_anisotropic_diffusion_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



