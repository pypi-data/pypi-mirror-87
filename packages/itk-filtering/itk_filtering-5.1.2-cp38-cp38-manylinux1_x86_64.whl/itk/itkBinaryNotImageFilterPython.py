# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKLabelMapPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkBinaryNotImageFilterPython
else:
    import _itkBinaryNotImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkBinaryNotImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkBinaryNotImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkFixedArrayPython
import itk.itkPointPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterAPython

def itkBinaryNotImageFilterISS2_Superclass_New():
    return itkBinaryNotImageFilterISS2_Superclass.New()

class itkBinaryNotImageFilterISS2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2ISS2):
    r"""Proxy of C++ itkBinaryNotImageFilterISS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS2_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS2_Superclass_SetFunctor)
    __swig_destroy__ = _itkBinaryNotImageFilterPython.delete_itkBinaryNotImageFilterISS2_Superclass
    cast = _swig_new_static_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryNotImageFilterISS2_Superclass

        Create a new object of the class itkBinaryNotImageFilterISS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryNotImageFilterISS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryNotImageFilterISS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryNotImageFilterISS2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryNotImageFilterISS2_Superclass in _itkBinaryNotImageFilterPython:
_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS2_Superclass_swigregister(itkBinaryNotImageFilterISS2_Superclass)
itkBinaryNotImageFilterISS2_Superclass___New_orig__ = _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS2_Superclass___New_orig__
itkBinaryNotImageFilterISS2_Superclass_cast = _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS2_Superclass_cast


def itkBinaryNotImageFilterISS3_Superclass_New():
    return itkBinaryNotImageFilterISS3_Superclass.New()

class itkBinaryNotImageFilterISS3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3ISS3):
    r"""Proxy of C++ itkBinaryNotImageFilterISS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS3_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS3_Superclass_SetFunctor)
    __swig_destroy__ = _itkBinaryNotImageFilterPython.delete_itkBinaryNotImageFilterISS3_Superclass
    cast = _swig_new_static_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryNotImageFilterISS3_Superclass

        Create a new object of the class itkBinaryNotImageFilterISS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryNotImageFilterISS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryNotImageFilterISS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryNotImageFilterISS3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryNotImageFilterISS3_Superclass in _itkBinaryNotImageFilterPython:
_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS3_Superclass_swigregister(itkBinaryNotImageFilterISS3_Superclass)
itkBinaryNotImageFilterISS3_Superclass___New_orig__ = _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS3_Superclass___New_orig__
itkBinaryNotImageFilterISS3_Superclass_cast = _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS3_Superclass_cast


def itkBinaryNotImageFilterIUC2_Superclass_New():
    return itkBinaryNotImageFilterIUC2_Superclass.New()

class itkBinaryNotImageFilterIUC2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUC2):
    r"""Proxy of C++ itkBinaryNotImageFilterIUC2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC2_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC2_Superclass_SetFunctor)
    __swig_destroy__ = _itkBinaryNotImageFilterPython.delete_itkBinaryNotImageFilterIUC2_Superclass
    cast = _swig_new_static_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryNotImageFilterIUC2_Superclass

        Create a new object of the class itkBinaryNotImageFilterIUC2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryNotImageFilterIUC2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryNotImageFilterIUC2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryNotImageFilterIUC2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryNotImageFilterIUC2_Superclass in _itkBinaryNotImageFilterPython:
_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC2_Superclass_swigregister(itkBinaryNotImageFilterIUC2_Superclass)
itkBinaryNotImageFilterIUC2_Superclass___New_orig__ = _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC2_Superclass___New_orig__
itkBinaryNotImageFilterIUC2_Superclass_cast = _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC2_Superclass_cast


def itkBinaryNotImageFilterIUC3_Superclass_New():
    return itkBinaryNotImageFilterIUC3_Superclass.New()

class itkBinaryNotImageFilterIUC3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUC3):
    r"""Proxy of C++ itkBinaryNotImageFilterIUC3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC3_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC3_Superclass_SetFunctor)
    __swig_destroy__ = _itkBinaryNotImageFilterPython.delete_itkBinaryNotImageFilterIUC3_Superclass
    cast = _swig_new_static_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryNotImageFilterIUC3_Superclass

        Create a new object of the class itkBinaryNotImageFilterIUC3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryNotImageFilterIUC3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryNotImageFilterIUC3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryNotImageFilterIUC3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryNotImageFilterIUC3_Superclass in _itkBinaryNotImageFilterPython:
_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC3_Superclass_swigregister(itkBinaryNotImageFilterIUC3_Superclass)
itkBinaryNotImageFilterIUC3_Superclass___New_orig__ = _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC3_Superclass___New_orig__
itkBinaryNotImageFilterIUC3_Superclass_cast = _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC3_Superclass_cast


def itkBinaryNotImageFilterIUS2_Superclass_New():
    return itkBinaryNotImageFilterIUS2_Superclass.New()

class itkBinaryNotImageFilterIUS2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUS2):
    r"""Proxy of C++ itkBinaryNotImageFilterIUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS2_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS2_Superclass_SetFunctor)
    __swig_destroy__ = _itkBinaryNotImageFilterPython.delete_itkBinaryNotImageFilterIUS2_Superclass
    cast = _swig_new_static_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryNotImageFilterIUS2_Superclass

        Create a new object of the class itkBinaryNotImageFilterIUS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryNotImageFilterIUS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryNotImageFilterIUS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryNotImageFilterIUS2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryNotImageFilterIUS2_Superclass in _itkBinaryNotImageFilterPython:
_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS2_Superclass_swigregister(itkBinaryNotImageFilterIUS2_Superclass)
itkBinaryNotImageFilterIUS2_Superclass___New_orig__ = _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS2_Superclass___New_orig__
itkBinaryNotImageFilterIUS2_Superclass_cast = _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS2_Superclass_cast


def itkBinaryNotImageFilterIUS3_Superclass_New():
    return itkBinaryNotImageFilterIUS3_Superclass.New()

class itkBinaryNotImageFilterIUS3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUS3):
    r"""Proxy of C++ itkBinaryNotImageFilterIUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS3_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS3_Superclass_SetFunctor)
    __swig_destroy__ = _itkBinaryNotImageFilterPython.delete_itkBinaryNotImageFilterIUS3_Superclass
    cast = _swig_new_static_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryNotImageFilterIUS3_Superclass

        Create a new object of the class itkBinaryNotImageFilterIUS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryNotImageFilterIUS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryNotImageFilterIUS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryNotImageFilterIUS3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryNotImageFilterIUS3_Superclass in _itkBinaryNotImageFilterPython:
_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS3_Superclass_swigregister(itkBinaryNotImageFilterIUS3_Superclass)
itkBinaryNotImageFilterIUS3_Superclass___New_orig__ = _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS3_Superclass___New_orig__
itkBinaryNotImageFilterIUS3_Superclass_cast = _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS3_Superclass_cast


def itkBinaryNotImageFilterISS2_New():
    return itkBinaryNotImageFilterISS2.New()

class itkBinaryNotImageFilterISS2(itkBinaryNotImageFilterISS2_Superclass):
    r"""


    Implements the BinaryNot logical operator pixel-wise between two
    images.

    This class is parameterized over the types of the two input images and
    the type of the output image. Numeric conversions (castings) are done
    by the C++ defaults.

    The total operation over one pixel will be

    output_pixel = static_cast<PixelType>( input1_pixel != input2_pixel )

    Where "!=" is the equality operator in C++.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/1926/584
    orhttp://www.insight-journal.org/browse/publication/176 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS2_Clone)
    SetForegroundValue = _swig_new_instance_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS2_SetForegroundValue)
    GetForegroundValue = _swig_new_instance_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS2_GetForegroundValue)
    SetBackgroundValue = _swig_new_instance_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS2_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS2_GetBackgroundValue)
    __swig_destroy__ = _itkBinaryNotImageFilterPython.delete_itkBinaryNotImageFilterISS2
    cast = _swig_new_static_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryNotImageFilterISS2

        Create a new object of the class itkBinaryNotImageFilterISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryNotImageFilterISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryNotImageFilterISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryNotImageFilterISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryNotImageFilterISS2 in _itkBinaryNotImageFilterPython:
_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS2_swigregister(itkBinaryNotImageFilterISS2)
itkBinaryNotImageFilterISS2___New_orig__ = _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS2___New_orig__
itkBinaryNotImageFilterISS2_cast = _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS2_cast


def itkBinaryNotImageFilterISS3_New():
    return itkBinaryNotImageFilterISS3.New()

class itkBinaryNotImageFilterISS3(itkBinaryNotImageFilterISS3_Superclass):
    r"""


    Implements the BinaryNot logical operator pixel-wise between two
    images.

    This class is parameterized over the types of the two input images and
    the type of the output image. Numeric conversions (castings) are done
    by the C++ defaults.

    The total operation over one pixel will be

    output_pixel = static_cast<PixelType>( input1_pixel != input2_pixel )

    Where "!=" is the equality operator in C++.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/1926/584
    orhttp://www.insight-journal.org/browse/publication/176 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS3_Clone)
    SetForegroundValue = _swig_new_instance_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS3_SetForegroundValue)
    GetForegroundValue = _swig_new_instance_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS3_GetForegroundValue)
    SetBackgroundValue = _swig_new_instance_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS3_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS3_GetBackgroundValue)
    __swig_destroy__ = _itkBinaryNotImageFilterPython.delete_itkBinaryNotImageFilterISS3
    cast = _swig_new_static_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryNotImageFilterISS3

        Create a new object of the class itkBinaryNotImageFilterISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryNotImageFilterISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryNotImageFilterISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryNotImageFilterISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryNotImageFilterISS3 in _itkBinaryNotImageFilterPython:
_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS3_swigregister(itkBinaryNotImageFilterISS3)
itkBinaryNotImageFilterISS3___New_orig__ = _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS3___New_orig__
itkBinaryNotImageFilterISS3_cast = _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS3_cast


def itkBinaryNotImageFilterIUC2_New():
    return itkBinaryNotImageFilterIUC2.New()

class itkBinaryNotImageFilterIUC2(itkBinaryNotImageFilterIUC2_Superclass):
    r"""


    Implements the BinaryNot logical operator pixel-wise between two
    images.

    This class is parameterized over the types of the two input images and
    the type of the output image. Numeric conversions (castings) are done
    by the C++ defaults.

    The total operation over one pixel will be

    output_pixel = static_cast<PixelType>( input1_pixel != input2_pixel )

    Where "!=" is the equality operator in C++.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/1926/584
    orhttp://www.insight-journal.org/browse/publication/176 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC2_Clone)
    SetForegroundValue = _swig_new_instance_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC2_SetForegroundValue)
    GetForegroundValue = _swig_new_instance_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC2_GetForegroundValue)
    SetBackgroundValue = _swig_new_instance_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC2_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC2_GetBackgroundValue)
    __swig_destroy__ = _itkBinaryNotImageFilterPython.delete_itkBinaryNotImageFilterIUC2
    cast = _swig_new_static_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryNotImageFilterIUC2

        Create a new object of the class itkBinaryNotImageFilterIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryNotImageFilterIUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryNotImageFilterIUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryNotImageFilterIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryNotImageFilterIUC2 in _itkBinaryNotImageFilterPython:
_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC2_swigregister(itkBinaryNotImageFilterIUC2)
itkBinaryNotImageFilterIUC2___New_orig__ = _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC2___New_orig__
itkBinaryNotImageFilterIUC2_cast = _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC2_cast


def itkBinaryNotImageFilterIUC3_New():
    return itkBinaryNotImageFilterIUC3.New()

class itkBinaryNotImageFilterIUC3(itkBinaryNotImageFilterIUC3_Superclass):
    r"""


    Implements the BinaryNot logical operator pixel-wise between two
    images.

    This class is parameterized over the types of the two input images and
    the type of the output image. Numeric conversions (castings) are done
    by the C++ defaults.

    The total operation over one pixel will be

    output_pixel = static_cast<PixelType>( input1_pixel != input2_pixel )

    Where "!=" is the equality operator in C++.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/1926/584
    orhttp://www.insight-journal.org/browse/publication/176 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC3_Clone)
    SetForegroundValue = _swig_new_instance_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC3_SetForegroundValue)
    GetForegroundValue = _swig_new_instance_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC3_GetForegroundValue)
    SetBackgroundValue = _swig_new_instance_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC3_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC3_GetBackgroundValue)
    __swig_destroy__ = _itkBinaryNotImageFilterPython.delete_itkBinaryNotImageFilterIUC3
    cast = _swig_new_static_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryNotImageFilterIUC3

        Create a new object of the class itkBinaryNotImageFilterIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryNotImageFilterIUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryNotImageFilterIUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryNotImageFilterIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryNotImageFilterIUC3 in _itkBinaryNotImageFilterPython:
_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC3_swigregister(itkBinaryNotImageFilterIUC3)
itkBinaryNotImageFilterIUC3___New_orig__ = _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC3___New_orig__
itkBinaryNotImageFilterIUC3_cast = _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC3_cast


def itkBinaryNotImageFilterIUS2_New():
    return itkBinaryNotImageFilterIUS2.New()

class itkBinaryNotImageFilterIUS2(itkBinaryNotImageFilterIUS2_Superclass):
    r"""


    Implements the BinaryNot logical operator pixel-wise between two
    images.

    This class is parameterized over the types of the two input images and
    the type of the output image. Numeric conversions (castings) are done
    by the C++ defaults.

    The total operation over one pixel will be

    output_pixel = static_cast<PixelType>( input1_pixel != input2_pixel )

    Where "!=" is the equality operator in C++.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/1926/584
    orhttp://www.insight-journal.org/browse/publication/176 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS2_Clone)
    SetForegroundValue = _swig_new_instance_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS2_SetForegroundValue)
    GetForegroundValue = _swig_new_instance_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS2_GetForegroundValue)
    SetBackgroundValue = _swig_new_instance_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS2_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS2_GetBackgroundValue)
    __swig_destroy__ = _itkBinaryNotImageFilterPython.delete_itkBinaryNotImageFilterIUS2
    cast = _swig_new_static_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryNotImageFilterIUS2

        Create a new object of the class itkBinaryNotImageFilterIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryNotImageFilterIUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryNotImageFilterIUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryNotImageFilterIUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryNotImageFilterIUS2 in _itkBinaryNotImageFilterPython:
_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS2_swigregister(itkBinaryNotImageFilterIUS2)
itkBinaryNotImageFilterIUS2___New_orig__ = _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS2___New_orig__
itkBinaryNotImageFilterIUS2_cast = _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS2_cast


def itkBinaryNotImageFilterIUS3_New():
    return itkBinaryNotImageFilterIUS3.New()

class itkBinaryNotImageFilterIUS3(itkBinaryNotImageFilterIUS3_Superclass):
    r"""


    Implements the BinaryNot logical operator pixel-wise between two
    images.

    This class is parameterized over the types of the two input images and
    the type of the output image. Numeric conversions (castings) are done
    by the C++ defaults.

    The total operation over one pixel will be

    output_pixel = static_cast<PixelType>( input1_pixel != input2_pixel )

    Where "!=" is the equality operator in C++.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/1926/584
    orhttp://www.insight-journal.org/browse/publication/176 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS3_Clone)
    SetForegroundValue = _swig_new_instance_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS3_SetForegroundValue)
    GetForegroundValue = _swig_new_instance_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS3_GetForegroundValue)
    SetBackgroundValue = _swig_new_instance_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS3_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS3_GetBackgroundValue)
    __swig_destroy__ = _itkBinaryNotImageFilterPython.delete_itkBinaryNotImageFilterIUS3
    cast = _swig_new_static_method(_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryNotImageFilterIUS3

        Create a new object of the class itkBinaryNotImageFilterIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryNotImageFilterIUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryNotImageFilterIUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryNotImageFilterIUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryNotImageFilterIUS3 in _itkBinaryNotImageFilterPython:
_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS3_swigregister(itkBinaryNotImageFilterIUS3)
itkBinaryNotImageFilterIUS3___New_orig__ = _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS3___New_orig__
itkBinaryNotImageFilterIUS3_cast = _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def binary_not_image_filter(*args, **kwargs):
    """Procedural interface for BinaryNotImageFilter"""
    import itk
    instance = itk.BinaryNotImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def binary_not_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.BinaryNotImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.BinaryNotImageFilter.values()[0]
    else:
        filter_object = itk.BinaryNotImageFilter

    binary_not_image_filter.__doc__ = filter_object.__doc__
    binary_not_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    binary_not_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.BinaryNotImageFilter, itkTemplate.itkTemplate):
        binary_not_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        binary_not_image_filter.__doc__ += "\n"
        binary_not_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        binary_not_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])
import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def unary_functor_image_filter(*args, **kwargs):
    """Procedural interface for UnaryFunctorImageFilter"""
    import itk
    instance = itk.UnaryFunctorImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def unary_functor_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.UnaryFunctorImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.UnaryFunctorImageFilter.values()[0]
    else:
        filter_object = itk.UnaryFunctorImageFilter

    unary_functor_image_filter.__doc__ = filter_object.__doc__
    unary_functor_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    unary_functor_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.UnaryFunctorImageFilter, itkTemplate.itkTemplate):
        unary_functor_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        unary_functor_image_filter.__doc__ += "\n"
        unary_functor_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        unary_functor_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



