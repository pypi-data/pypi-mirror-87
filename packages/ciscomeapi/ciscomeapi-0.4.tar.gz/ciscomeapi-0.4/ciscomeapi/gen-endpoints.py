# -*- coding: utf-8 -*-

"""
gen-endpoints
~~~~~~~~~~~~~~~~~~~

Programmatically generate a Cisco Mobility Express API based on HTTP calls made from the 
front to the back-end
"""


import argparse
import re
import sys
from dataclasses import dataclass

import requests
from bs4 import BeautifulSoup
from jinja2 import Template
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

import function_templates


endpoints = {}

@dataclass
class Endpoint:
    url: str
    parameters: list


def friendly_function_name(name: str) -> str:
    # Generate a valid Python function name from an endpoint
    func_name = name.replace('/', '_')
    func_name = func_name.replace('-', '_')
    return '_' + func_name


def find_endpoints(script_src: str):
    # Find endpoints of the form "/data/..."
    regex_map = {
        '/data/': re.compile(r'\/data\/(.*)(\.html)(\?.*")?'),
        '/screens/webui/resource/': re.compile(r'["|\'](.*)(\.json|\.jsp)'),
    }
    for url_base, regex in regex_map.items():
        for line in script_src.splitlines():
            matches = re.finditer(regex, line)
            for match in matches:
                name = match.groups()[0]
                # Remove the leading base url from the name if it exists
                name = name.replace(url_base, '')
                function_name = friendly_function_name(name)
                url = url_base + name + match.groups()[1]
                # Were parameters previously discovered for this endpoint? If so don't overwrite.
                try:
                    if endpoints[function_name].parameters:
                        continue
                except KeyError:
                    pass
                parameters = match.groups()[2] if len(match.groups()) == 3 else []
                if parameters:
                    # This looks brittle, and wouldn't handle multiple parameters if that ever happens
                    parameters = [parameters.split('=')[0][1:]]
                else:
                    parameters = []
                # Skip invalid function names. Use better parsing to catch these in the future. 
                if '..' in function_name:
                    continue
                endpoints[function_name] = Endpoint(url, parameters)


def main(me_url, username, password, output):
    base_url = me_url + '/screens/dashboard.html'
    session = requests.Session()
    session.auth = (username, password)
    session.verify = False
    with session as s:
        response = session.get(base_url)
        if response.status_code == 401:
            response = session.get(base_url)

        soup = BeautifulSoup(response.text, 'html.parser')
        scripts = soup.find_all('script')
        for script in scripts:
            try:
                if '/javascript/controllers' in script['src']:
                    url = me_url + script['src'][2:]
                    response = session.get(url)
                    find_endpoints(response.text)
            except KeyError:
                continue

    # Generate the functions from templates
    with open(output, 'w') as f:
        f.write('''# -*- coding: utf-8 -*-

"""
_me_api
~~~~~~~~~~~~~~~~~~~

Autogenerated, do not edit
"""

from .helpers import request


'''
        )

        sorted_endpoints = sorted(list(endpoints.items()), key=lambda s: s[0].lower())
        standard_template = Template(function_templates.standard_function)
        parameter_template = Template(function_templates.parameter_function)

        for name, endpoint in sorted_endpoints:
            print(f'{name}: {endpoint.url} {endpoint.parameters}')
            if endpoint.parameters:
                function_definition = parameter_template.render(name=name, url=endpoint.url, parameter1=endpoint.parameters[0])
                # TODO, handle multiple parameters as kwargs in function definition
            else:
                function_definition = standard_template.render(name=name, url=endpoint.url)
            f.write(function_definition)

    print(f'\n{len(endpoints)} functions generated')

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Generate a file of endpoint functions derived from the Cisco Mobility Express Web UI.')
    parser.add_argument('--url',
                        required=True,
                        help='The URL of Cisco Mobility Express')
    parser.add_argument('-u', '--username',
                        required=True,
                        help='Mobility Express administrator username')
    parser.add_argument('-p', '--password',
                        required=True,
                        help='Mobility Express administrator password')
    parser.add_argument('-o', '--outfile',
                        default='_me_api.py',
                        help='Endpoint file to generate')
    

    args = parser.parse_args()
    main(args.url, args.username, args.password, args.outfile)
