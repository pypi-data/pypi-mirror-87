# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class UserCorporationWithLocationsChild(Model):
    """UserCorporationWithLocationsChild.

    All required parameters must be populated in order to send to Azure.

    :param corporation_id: Required.
    :type corporation_id: str
    :param corporation_name: Required.
    :type corporation_name: str
    :param corporation_abbreviation:
    :type corporation_abbreviation: str
    :param corporation_user_role: Possible values include: 'Sentry',
     'Invalid', 'SaasAdmin', 'AccountAdmin', 'ApplicationUser', 'Technician',
     'User', 'SystemProcess', 'Sales', 'CorporationAdmin', 'CorporationUser',
     'CorporationNone'
    :type corporation_user_role: str or ~smartdiagnostics_sdk.models.enum
    :param locations:
    :type locations: list[~smartdiagnostics_sdk.models.UserLocationChild]
    """

    _validation = {
        'corporation_id': {'required': True},
        'corporation_name': {'required': True},
    }

    _attribute_map = {
        'corporation_id': {'key': 'CorporationId', 'type': 'str'},
        'corporation_name': {'key': 'CorporationName', 'type': 'str'},
        'corporation_abbreviation': {'key': 'CorporationAbbreviation', 'type': 'str'},
        'corporation_user_role': {'key': 'CorporationUserRole', 'type': 'str'},
        'locations': {'key': 'Locations', 'type': '[UserLocationChild]'},
    }

    def __init__(self, **kwargs):
        super(UserCorporationWithLocationsChild, self).__init__(**kwargs)
        self.corporation_id = kwargs.get('corporation_id', None)
        self.corporation_name = kwargs.get('corporation_name', None)
        self.corporation_abbreviation = kwargs.get('corporation_abbreviation', None)
        self.corporation_user_role = kwargs.get('corporation_user_role', None)
        self.locations = kwargs.get('locations', None)
