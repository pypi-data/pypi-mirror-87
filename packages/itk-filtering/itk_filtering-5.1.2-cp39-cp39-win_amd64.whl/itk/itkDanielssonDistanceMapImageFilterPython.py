# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKDistanceMapPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkDanielssonDistanceMapImageFilterPython
else:
    import _itkDanielssonDistanceMapImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkDanielssonDistanceMapImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkDanielssonDistanceMapImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.itkPointPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkSymmetricSecondRankTensorPython
import itk.ITKCommonBasePython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkRGBPixelPython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython

def itkDanielssonDistanceMapImageFilterID2ID2_New():
    return itkDanielssonDistanceMapImageFilterID2ID2.New()

class itkDanielssonDistanceMapImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""


    This filter computes the distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    Parameters:
    -----------

    TInputImage:  Input Image Type

    TOutputImage:  Output Image Type

    TVoronoiImage:  Voronoi Image Type. Note the default value is
    TInputImage.

    The input is assumed to contain numeric codes defining objects. The
    filter will produce as output the following images:

    A Voronoi partition using the same numeric codes as the input.

    A distance map with the approximation to the euclidean distance. from
    a particular pixel to the nearest object to this pixel in the input
    image.

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used.  This filter is N-dimensional and
    known to be efficient in computational time. The algorithm is the
    N-dimensional version of the 4SED algorithm given for two dimensions
    in:

    Danielsson, Per-Erik. Euclidean Distance Mapping. Computer Graphics
    and Image Processing 14, 227-248 (1980). 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_Clone)
    SetSquaredDistance = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_SetSquaredDistance)
    GetSquaredDistance = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_GetSquaredDistance)
    SquaredDistanceOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_SquaredDistanceOn)
    SquaredDistanceOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_SquaredDistanceOff)
    SetInputIsBinary = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_SetInputIsBinary)
    GetInputIsBinary = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_GetInputIsBinary)
    InputIsBinaryOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_InputIsBinaryOn)
    InputIsBinaryOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_InputIsBinaryOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_UseImageSpacingOff)
    GetVoronoiMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_GetVoronoiMap)
    GetDistanceMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_GetDistanceMap)
    GetVectorDistanceMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_GetVectorDistanceMap)
    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_InputOutputSameDimensionCheck
    
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_InputVoronoiSameDimensionCheck
    
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_DoubleConvertibleToOutputCheck
    
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterID2ID2
    cast = _swig_new_static_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterID2ID2

        Create a new object of the class itkDanielssonDistanceMapImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDanielssonDistanceMapImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDanielssonDistanceMapImageFilterID2ID2 in _itkDanielssonDistanceMapImageFilterPython:
_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_swigregister(itkDanielssonDistanceMapImageFilterID2ID2)
itkDanielssonDistanceMapImageFilterID2ID2___New_orig__ = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2___New_orig__
itkDanielssonDistanceMapImageFilterID2ID2_cast = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_cast


def itkDanielssonDistanceMapImageFilterID3ID3_New():
    return itkDanielssonDistanceMapImageFilterID3ID3.New()

class itkDanielssonDistanceMapImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""


    This filter computes the distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    Parameters:
    -----------

    TInputImage:  Input Image Type

    TOutputImage:  Output Image Type

    TVoronoiImage:  Voronoi Image Type. Note the default value is
    TInputImage.

    The input is assumed to contain numeric codes defining objects. The
    filter will produce as output the following images:

    A Voronoi partition using the same numeric codes as the input.

    A distance map with the approximation to the euclidean distance. from
    a particular pixel to the nearest object to this pixel in the input
    image.

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used.  This filter is N-dimensional and
    known to be efficient in computational time. The algorithm is the
    N-dimensional version of the 4SED algorithm given for two dimensions
    in:

    Danielsson, Per-Erik. Euclidean Distance Mapping. Computer Graphics
    and Image Processing 14, 227-248 (1980). 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_Clone)
    SetSquaredDistance = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_SetSquaredDistance)
    GetSquaredDistance = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_GetSquaredDistance)
    SquaredDistanceOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_SquaredDistanceOn)
    SquaredDistanceOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_SquaredDistanceOff)
    SetInputIsBinary = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_SetInputIsBinary)
    GetInputIsBinary = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_GetInputIsBinary)
    InputIsBinaryOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_InputIsBinaryOn)
    InputIsBinaryOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_InputIsBinaryOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_UseImageSpacingOff)
    GetVoronoiMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_GetVoronoiMap)
    GetDistanceMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_GetDistanceMap)
    GetVectorDistanceMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_GetVectorDistanceMap)
    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_InputOutputSameDimensionCheck
    
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_InputVoronoiSameDimensionCheck
    
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_DoubleConvertibleToOutputCheck
    
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterID3ID3
    cast = _swig_new_static_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterID3ID3

        Create a new object of the class itkDanielssonDistanceMapImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDanielssonDistanceMapImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDanielssonDistanceMapImageFilterID3ID3 in _itkDanielssonDistanceMapImageFilterPython:
_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_swigregister(itkDanielssonDistanceMapImageFilterID3ID3)
itkDanielssonDistanceMapImageFilterID3ID3___New_orig__ = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3___New_orig__
itkDanielssonDistanceMapImageFilterID3ID3_cast = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_cast


def itkDanielssonDistanceMapImageFilterIF2IF2_New():
    return itkDanielssonDistanceMapImageFilterIF2IF2.New()

class itkDanielssonDistanceMapImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""


    This filter computes the distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    Parameters:
    -----------

    TInputImage:  Input Image Type

    TOutputImage:  Output Image Type

    TVoronoiImage:  Voronoi Image Type. Note the default value is
    TInputImage.

    The input is assumed to contain numeric codes defining objects. The
    filter will produce as output the following images:

    A Voronoi partition using the same numeric codes as the input.

    A distance map with the approximation to the euclidean distance. from
    a particular pixel to the nearest object to this pixel in the input
    image.

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used.  This filter is N-dimensional and
    known to be efficient in computational time. The algorithm is the
    N-dimensional version of the 4SED algorithm given for two dimensions
    in:

    Danielsson, Per-Erik. Euclidean Distance Mapping. Computer Graphics
    and Image Processing 14, 227-248 (1980). 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_Clone)
    SetSquaredDistance = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_SetSquaredDistance)
    GetSquaredDistance = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_GetSquaredDistance)
    SquaredDistanceOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_SquaredDistanceOn)
    SquaredDistanceOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_SquaredDistanceOff)
    SetInputIsBinary = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_SetInputIsBinary)
    GetInputIsBinary = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_GetInputIsBinary)
    InputIsBinaryOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_InputIsBinaryOn)
    InputIsBinaryOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_InputIsBinaryOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_UseImageSpacingOff)
    GetVoronoiMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_GetVoronoiMap)
    GetDistanceMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_GetDistanceMap)
    GetVectorDistanceMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_GetVectorDistanceMap)
    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_InputOutputSameDimensionCheck
    
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_InputVoronoiSameDimensionCheck
    
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_DoubleConvertibleToOutputCheck
    
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterIF2IF2
    cast = _swig_new_static_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterIF2IF2

        Create a new object of the class itkDanielssonDistanceMapImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDanielssonDistanceMapImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDanielssonDistanceMapImageFilterIF2IF2 in _itkDanielssonDistanceMapImageFilterPython:
_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_swigregister(itkDanielssonDistanceMapImageFilterIF2IF2)
itkDanielssonDistanceMapImageFilterIF2IF2___New_orig__ = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2___New_orig__
itkDanielssonDistanceMapImageFilterIF2IF2_cast = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_cast


def itkDanielssonDistanceMapImageFilterIF3IF3_New():
    return itkDanielssonDistanceMapImageFilterIF3IF3.New()

class itkDanielssonDistanceMapImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""


    This filter computes the distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    Parameters:
    -----------

    TInputImage:  Input Image Type

    TOutputImage:  Output Image Type

    TVoronoiImage:  Voronoi Image Type. Note the default value is
    TInputImage.

    The input is assumed to contain numeric codes defining objects. The
    filter will produce as output the following images:

    A Voronoi partition using the same numeric codes as the input.

    A distance map with the approximation to the euclidean distance. from
    a particular pixel to the nearest object to this pixel in the input
    image.

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used.  This filter is N-dimensional and
    known to be efficient in computational time. The algorithm is the
    N-dimensional version of the 4SED algorithm given for two dimensions
    in:

    Danielsson, Per-Erik. Euclidean Distance Mapping. Computer Graphics
    and Image Processing 14, 227-248 (1980). 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_Clone)
    SetSquaredDistance = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_SetSquaredDistance)
    GetSquaredDistance = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_GetSquaredDistance)
    SquaredDistanceOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_SquaredDistanceOn)
    SquaredDistanceOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_SquaredDistanceOff)
    SetInputIsBinary = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_SetInputIsBinary)
    GetInputIsBinary = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_GetInputIsBinary)
    InputIsBinaryOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_InputIsBinaryOn)
    InputIsBinaryOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_InputIsBinaryOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_UseImageSpacingOff)
    GetVoronoiMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_GetVoronoiMap)
    GetDistanceMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_GetDistanceMap)
    GetVectorDistanceMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_GetVectorDistanceMap)
    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_InputOutputSameDimensionCheck
    
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_InputVoronoiSameDimensionCheck
    
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_DoubleConvertibleToOutputCheck
    
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterIF3IF3
    cast = _swig_new_static_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterIF3IF3

        Create a new object of the class itkDanielssonDistanceMapImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDanielssonDistanceMapImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDanielssonDistanceMapImageFilterIF3IF3 in _itkDanielssonDistanceMapImageFilterPython:
_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_swigregister(itkDanielssonDistanceMapImageFilterIF3IF3)
itkDanielssonDistanceMapImageFilterIF3IF3___New_orig__ = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3___New_orig__
itkDanielssonDistanceMapImageFilterIF3IF3_cast = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_cast


def itkDanielssonDistanceMapImageFilterISS2ISS2_New():
    return itkDanielssonDistanceMapImageFilterISS2ISS2.New()

class itkDanielssonDistanceMapImageFilterISS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""


    This filter computes the distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    Parameters:
    -----------

    TInputImage:  Input Image Type

    TOutputImage:  Output Image Type

    TVoronoiImage:  Voronoi Image Type. Note the default value is
    TInputImage.

    The input is assumed to contain numeric codes defining objects. The
    filter will produce as output the following images:

    A Voronoi partition using the same numeric codes as the input.

    A distance map with the approximation to the euclidean distance. from
    a particular pixel to the nearest object to this pixel in the input
    image.

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used.  This filter is N-dimensional and
    known to be efficient in computational time. The algorithm is the
    N-dimensional version of the 4SED algorithm given for two dimensions
    in:

    Danielsson, Per-Erik. Euclidean Distance Mapping. Computer Graphics
    and Image Processing 14, 227-248 (1980). 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_Clone)
    SetSquaredDistance = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_SetSquaredDistance)
    GetSquaredDistance = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_GetSquaredDistance)
    SquaredDistanceOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_SquaredDistanceOn)
    SquaredDistanceOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_SquaredDistanceOff)
    SetInputIsBinary = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_SetInputIsBinary)
    GetInputIsBinary = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_GetInputIsBinary)
    InputIsBinaryOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_InputIsBinaryOn)
    InputIsBinaryOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_InputIsBinaryOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_UseImageSpacingOff)
    GetVoronoiMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_GetVoronoiMap)
    GetDistanceMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_GetDistanceMap)
    GetVectorDistanceMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_GetVectorDistanceMap)
    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_InputOutputSameDimensionCheck
    
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_InputVoronoiSameDimensionCheck
    
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_DoubleConvertibleToOutputCheck
    
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterISS2ISS2

        Create a new object of the class itkDanielssonDistanceMapImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDanielssonDistanceMapImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDanielssonDistanceMapImageFilterISS2ISS2 in _itkDanielssonDistanceMapImageFilterPython:
_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_swigregister(itkDanielssonDistanceMapImageFilterISS2ISS2)
itkDanielssonDistanceMapImageFilterISS2ISS2___New_orig__ = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2___New_orig__
itkDanielssonDistanceMapImageFilterISS2ISS2_cast = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_cast


def itkDanielssonDistanceMapImageFilterISS3ISS3_New():
    return itkDanielssonDistanceMapImageFilterISS3ISS3.New()

class itkDanielssonDistanceMapImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""


    This filter computes the distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    Parameters:
    -----------

    TInputImage:  Input Image Type

    TOutputImage:  Output Image Type

    TVoronoiImage:  Voronoi Image Type. Note the default value is
    TInputImage.

    The input is assumed to contain numeric codes defining objects. The
    filter will produce as output the following images:

    A Voronoi partition using the same numeric codes as the input.

    A distance map with the approximation to the euclidean distance. from
    a particular pixel to the nearest object to this pixel in the input
    image.

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used.  This filter is N-dimensional and
    known to be efficient in computational time. The algorithm is the
    N-dimensional version of the 4SED algorithm given for two dimensions
    in:

    Danielsson, Per-Erik. Euclidean Distance Mapping. Computer Graphics
    and Image Processing 14, 227-248 (1980). 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_Clone)
    SetSquaredDistance = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_SetSquaredDistance)
    GetSquaredDistance = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_GetSquaredDistance)
    SquaredDistanceOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_SquaredDistanceOn)
    SquaredDistanceOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_SquaredDistanceOff)
    SetInputIsBinary = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_SetInputIsBinary)
    GetInputIsBinary = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_GetInputIsBinary)
    InputIsBinaryOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_InputIsBinaryOn)
    InputIsBinaryOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_InputIsBinaryOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_UseImageSpacingOff)
    GetVoronoiMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_GetVoronoiMap)
    GetDistanceMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_GetDistanceMap)
    GetVectorDistanceMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_GetVectorDistanceMap)
    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_InputOutputSameDimensionCheck
    
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_InputVoronoiSameDimensionCheck
    
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_DoubleConvertibleToOutputCheck
    
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterISS3ISS3

        Create a new object of the class itkDanielssonDistanceMapImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDanielssonDistanceMapImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDanielssonDistanceMapImageFilterISS3ISS3 in _itkDanielssonDistanceMapImageFilterPython:
_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_swigregister(itkDanielssonDistanceMapImageFilterISS3ISS3)
itkDanielssonDistanceMapImageFilterISS3ISS3___New_orig__ = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3___New_orig__
itkDanielssonDistanceMapImageFilterISS3ISS3_cast = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_cast


def itkDanielssonDistanceMapImageFilterIUC2ID2_New():
    return itkDanielssonDistanceMapImageFilterIUC2ID2.New()

class itkDanielssonDistanceMapImageFilterIUC2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2ID2):
    r"""


    This filter computes the distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    Parameters:
    -----------

    TInputImage:  Input Image Type

    TOutputImage:  Output Image Type

    TVoronoiImage:  Voronoi Image Type. Note the default value is
    TInputImage.

    The input is assumed to contain numeric codes defining objects. The
    filter will produce as output the following images:

    A Voronoi partition using the same numeric codes as the input.

    A distance map with the approximation to the euclidean distance. from
    a particular pixel to the nearest object to this pixel in the input
    image.

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used.  This filter is N-dimensional and
    known to be efficient in computational time. The algorithm is the
    N-dimensional version of the 4SED algorithm given for two dimensions
    in:

    Danielsson, Per-Erik. Euclidean Distance Mapping. Computer Graphics
    and Image Processing 14, 227-248 (1980). 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_Clone)
    SetSquaredDistance = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_SetSquaredDistance)
    GetSquaredDistance = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_GetSquaredDistance)
    SquaredDistanceOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_SquaredDistanceOn)
    SquaredDistanceOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_SquaredDistanceOff)
    SetInputIsBinary = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_SetInputIsBinary)
    GetInputIsBinary = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_GetInputIsBinary)
    InputIsBinaryOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_InputIsBinaryOn)
    InputIsBinaryOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_InputIsBinaryOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_UseImageSpacingOff)
    GetVoronoiMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_GetVoronoiMap)
    GetDistanceMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_GetDistanceMap)
    GetVectorDistanceMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_GetVectorDistanceMap)
    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_InputOutputSameDimensionCheck
    
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_InputVoronoiSameDimensionCheck
    
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_DoubleConvertibleToOutputCheck
    
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterIUC2ID2
    cast = _swig_new_static_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterIUC2ID2

        Create a new object of the class itkDanielssonDistanceMapImageFilterIUC2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterIUC2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterIUC2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDanielssonDistanceMapImageFilterIUC2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDanielssonDistanceMapImageFilterIUC2ID2 in _itkDanielssonDistanceMapImageFilterPython:
_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_swigregister(itkDanielssonDistanceMapImageFilterIUC2ID2)
itkDanielssonDistanceMapImageFilterIUC2ID2___New_orig__ = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2___New_orig__
itkDanielssonDistanceMapImageFilterIUC2ID2_cast = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_cast


def itkDanielssonDistanceMapImageFilterIUC2IF2_New():
    return itkDanielssonDistanceMapImageFilterIUC2IF2.New()

class itkDanielssonDistanceMapImageFilterIUC2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IF2):
    r"""


    This filter computes the distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    Parameters:
    -----------

    TInputImage:  Input Image Type

    TOutputImage:  Output Image Type

    TVoronoiImage:  Voronoi Image Type. Note the default value is
    TInputImage.

    The input is assumed to contain numeric codes defining objects. The
    filter will produce as output the following images:

    A Voronoi partition using the same numeric codes as the input.

    A distance map with the approximation to the euclidean distance. from
    a particular pixel to the nearest object to this pixel in the input
    image.

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used.  This filter is N-dimensional and
    known to be efficient in computational time. The algorithm is the
    N-dimensional version of the 4SED algorithm given for two dimensions
    in:

    Danielsson, Per-Erik. Euclidean Distance Mapping. Computer Graphics
    and Image Processing 14, 227-248 (1980). 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_Clone)
    SetSquaredDistance = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_SetSquaredDistance)
    GetSquaredDistance = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_GetSquaredDistance)
    SquaredDistanceOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_SquaredDistanceOn)
    SquaredDistanceOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_SquaredDistanceOff)
    SetInputIsBinary = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_SetInputIsBinary)
    GetInputIsBinary = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_GetInputIsBinary)
    InputIsBinaryOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_InputIsBinaryOn)
    InputIsBinaryOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_InputIsBinaryOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_UseImageSpacingOff)
    GetVoronoiMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_GetVoronoiMap)
    GetDistanceMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_GetDistanceMap)
    GetVectorDistanceMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_GetVectorDistanceMap)
    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_InputOutputSameDimensionCheck
    
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_InputVoronoiSameDimensionCheck
    
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_DoubleConvertibleToOutputCheck
    
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterIUC2IF2
    cast = _swig_new_static_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterIUC2IF2

        Create a new object of the class itkDanielssonDistanceMapImageFilterIUC2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterIUC2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterIUC2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDanielssonDistanceMapImageFilterIUC2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDanielssonDistanceMapImageFilterIUC2IF2 in _itkDanielssonDistanceMapImageFilterPython:
_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_swigregister(itkDanielssonDistanceMapImageFilterIUC2IF2)
itkDanielssonDistanceMapImageFilterIUC2IF2___New_orig__ = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2___New_orig__
itkDanielssonDistanceMapImageFilterIUC2IF2_cast = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_cast


def itkDanielssonDistanceMapImageFilterIUC2IUC2_New():
    return itkDanielssonDistanceMapImageFilterIUC2IUC2.New()

class itkDanielssonDistanceMapImageFilterIUC2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""


    This filter computes the distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    Parameters:
    -----------

    TInputImage:  Input Image Type

    TOutputImage:  Output Image Type

    TVoronoiImage:  Voronoi Image Type. Note the default value is
    TInputImage.

    The input is assumed to contain numeric codes defining objects. The
    filter will produce as output the following images:

    A Voronoi partition using the same numeric codes as the input.

    A distance map with the approximation to the euclidean distance. from
    a particular pixel to the nearest object to this pixel in the input
    image.

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used.  This filter is N-dimensional and
    known to be efficient in computational time. The algorithm is the
    N-dimensional version of the 4SED algorithm given for two dimensions
    in:

    Danielsson, Per-Erik. Euclidean Distance Mapping. Computer Graphics
    and Image Processing 14, 227-248 (1980). 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_Clone)
    SetSquaredDistance = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_SetSquaredDistance)
    GetSquaredDistance = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_GetSquaredDistance)
    SquaredDistanceOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_SquaredDistanceOn)
    SquaredDistanceOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_SquaredDistanceOff)
    SetInputIsBinary = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_SetInputIsBinary)
    GetInputIsBinary = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_GetInputIsBinary)
    InputIsBinaryOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_InputIsBinaryOn)
    InputIsBinaryOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_InputIsBinaryOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_UseImageSpacingOff)
    GetVoronoiMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_GetVoronoiMap)
    GetDistanceMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_GetDistanceMap)
    GetVectorDistanceMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_GetVectorDistanceMap)
    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_InputOutputSameDimensionCheck
    
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_InputVoronoiSameDimensionCheck
    
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_DoubleConvertibleToOutputCheck
    
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterIUC2IUC2

        Create a new object of the class itkDanielssonDistanceMapImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDanielssonDistanceMapImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDanielssonDistanceMapImageFilterIUC2IUC2 in _itkDanielssonDistanceMapImageFilterPython:
_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_swigregister(itkDanielssonDistanceMapImageFilterIUC2IUC2)
itkDanielssonDistanceMapImageFilterIUC2IUC2___New_orig__ = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2___New_orig__
itkDanielssonDistanceMapImageFilterIUC2IUC2_cast = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_cast


def itkDanielssonDistanceMapImageFilterIUC3ID3_New():
    return itkDanielssonDistanceMapImageFilterIUC3ID3.New()

class itkDanielssonDistanceMapImageFilterIUC3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3ID3):
    r"""


    This filter computes the distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    Parameters:
    -----------

    TInputImage:  Input Image Type

    TOutputImage:  Output Image Type

    TVoronoiImage:  Voronoi Image Type. Note the default value is
    TInputImage.

    The input is assumed to contain numeric codes defining objects. The
    filter will produce as output the following images:

    A Voronoi partition using the same numeric codes as the input.

    A distance map with the approximation to the euclidean distance. from
    a particular pixel to the nearest object to this pixel in the input
    image.

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used.  This filter is N-dimensional and
    known to be efficient in computational time. The algorithm is the
    N-dimensional version of the 4SED algorithm given for two dimensions
    in:

    Danielsson, Per-Erik. Euclidean Distance Mapping. Computer Graphics
    and Image Processing 14, 227-248 (1980). 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_Clone)
    SetSquaredDistance = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_SetSquaredDistance)
    GetSquaredDistance = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_GetSquaredDistance)
    SquaredDistanceOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_SquaredDistanceOn)
    SquaredDistanceOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_SquaredDistanceOff)
    SetInputIsBinary = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_SetInputIsBinary)
    GetInputIsBinary = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_GetInputIsBinary)
    InputIsBinaryOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_InputIsBinaryOn)
    InputIsBinaryOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_InputIsBinaryOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_UseImageSpacingOff)
    GetVoronoiMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_GetVoronoiMap)
    GetDistanceMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_GetDistanceMap)
    GetVectorDistanceMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_GetVectorDistanceMap)
    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_InputOutputSameDimensionCheck
    
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_InputVoronoiSameDimensionCheck
    
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_DoubleConvertibleToOutputCheck
    
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterIUC3ID3
    cast = _swig_new_static_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterIUC3ID3

        Create a new object of the class itkDanielssonDistanceMapImageFilterIUC3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterIUC3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterIUC3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDanielssonDistanceMapImageFilterIUC3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDanielssonDistanceMapImageFilterIUC3ID3 in _itkDanielssonDistanceMapImageFilterPython:
_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_swigregister(itkDanielssonDistanceMapImageFilterIUC3ID3)
itkDanielssonDistanceMapImageFilterIUC3ID3___New_orig__ = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3___New_orig__
itkDanielssonDistanceMapImageFilterIUC3ID3_cast = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_cast


def itkDanielssonDistanceMapImageFilterIUC3IF3_New():
    return itkDanielssonDistanceMapImageFilterIUC3IF3.New()

class itkDanielssonDistanceMapImageFilterIUC3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IF3):
    r"""


    This filter computes the distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    Parameters:
    -----------

    TInputImage:  Input Image Type

    TOutputImage:  Output Image Type

    TVoronoiImage:  Voronoi Image Type. Note the default value is
    TInputImage.

    The input is assumed to contain numeric codes defining objects. The
    filter will produce as output the following images:

    A Voronoi partition using the same numeric codes as the input.

    A distance map with the approximation to the euclidean distance. from
    a particular pixel to the nearest object to this pixel in the input
    image.

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used.  This filter is N-dimensional and
    known to be efficient in computational time. The algorithm is the
    N-dimensional version of the 4SED algorithm given for two dimensions
    in:

    Danielsson, Per-Erik. Euclidean Distance Mapping. Computer Graphics
    and Image Processing 14, 227-248 (1980). 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_Clone)
    SetSquaredDistance = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_SetSquaredDistance)
    GetSquaredDistance = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_GetSquaredDistance)
    SquaredDistanceOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_SquaredDistanceOn)
    SquaredDistanceOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_SquaredDistanceOff)
    SetInputIsBinary = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_SetInputIsBinary)
    GetInputIsBinary = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_GetInputIsBinary)
    InputIsBinaryOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_InputIsBinaryOn)
    InputIsBinaryOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_InputIsBinaryOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_UseImageSpacingOff)
    GetVoronoiMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_GetVoronoiMap)
    GetDistanceMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_GetDistanceMap)
    GetVectorDistanceMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_GetVectorDistanceMap)
    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_InputOutputSameDimensionCheck
    
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_InputVoronoiSameDimensionCheck
    
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_DoubleConvertibleToOutputCheck
    
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterIUC3IF3
    cast = _swig_new_static_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterIUC3IF3

        Create a new object of the class itkDanielssonDistanceMapImageFilterIUC3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterIUC3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterIUC3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDanielssonDistanceMapImageFilterIUC3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDanielssonDistanceMapImageFilterIUC3IF3 in _itkDanielssonDistanceMapImageFilterPython:
_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_swigregister(itkDanielssonDistanceMapImageFilterIUC3IF3)
itkDanielssonDistanceMapImageFilterIUC3IF3___New_orig__ = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3___New_orig__
itkDanielssonDistanceMapImageFilterIUC3IF3_cast = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_cast


def itkDanielssonDistanceMapImageFilterIUC3IUC3_New():
    return itkDanielssonDistanceMapImageFilterIUC3IUC3.New()

class itkDanielssonDistanceMapImageFilterIUC3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""


    This filter computes the distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    Parameters:
    -----------

    TInputImage:  Input Image Type

    TOutputImage:  Output Image Type

    TVoronoiImage:  Voronoi Image Type. Note the default value is
    TInputImage.

    The input is assumed to contain numeric codes defining objects. The
    filter will produce as output the following images:

    A Voronoi partition using the same numeric codes as the input.

    A distance map with the approximation to the euclidean distance. from
    a particular pixel to the nearest object to this pixel in the input
    image.

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used.  This filter is N-dimensional and
    known to be efficient in computational time. The algorithm is the
    N-dimensional version of the 4SED algorithm given for two dimensions
    in:

    Danielsson, Per-Erik. Euclidean Distance Mapping. Computer Graphics
    and Image Processing 14, 227-248 (1980). 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_Clone)
    SetSquaredDistance = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_SetSquaredDistance)
    GetSquaredDistance = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_GetSquaredDistance)
    SquaredDistanceOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_SquaredDistanceOn)
    SquaredDistanceOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_SquaredDistanceOff)
    SetInputIsBinary = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_SetInputIsBinary)
    GetInputIsBinary = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_GetInputIsBinary)
    InputIsBinaryOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_InputIsBinaryOn)
    InputIsBinaryOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_InputIsBinaryOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_UseImageSpacingOff)
    GetVoronoiMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_GetVoronoiMap)
    GetDistanceMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_GetDistanceMap)
    GetVectorDistanceMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_GetVectorDistanceMap)
    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_InputOutputSameDimensionCheck
    
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_InputVoronoiSameDimensionCheck
    
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_DoubleConvertibleToOutputCheck
    
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterIUC3IUC3

        Create a new object of the class itkDanielssonDistanceMapImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDanielssonDistanceMapImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDanielssonDistanceMapImageFilterIUC3IUC3 in _itkDanielssonDistanceMapImageFilterPython:
_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_swigregister(itkDanielssonDistanceMapImageFilterIUC3IUC3)
itkDanielssonDistanceMapImageFilterIUC3IUC3___New_orig__ = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3___New_orig__
itkDanielssonDistanceMapImageFilterIUC3IUC3_cast = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_cast


def itkDanielssonDistanceMapImageFilterIUS2ID2_New():
    return itkDanielssonDistanceMapImageFilterIUS2ID2.New()

class itkDanielssonDistanceMapImageFilterIUS2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2ID2):
    r"""


    This filter computes the distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    Parameters:
    -----------

    TInputImage:  Input Image Type

    TOutputImage:  Output Image Type

    TVoronoiImage:  Voronoi Image Type. Note the default value is
    TInputImage.

    The input is assumed to contain numeric codes defining objects. The
    filter will produce as output the following images:

    A Voronoi partition using the same numeric codes as the input.

    A distance map with the approximation to the euclidean distance. from
    a particular pixel to the nearest object to this pixel in the input
    image.

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used.  This filter is N-dimensional and
    known to be efficient in computational time. The algorithm is the
    N-dimensional version of the 4SED algorithm given for two dimensions
    in:

    Danielsson, Per-Erik. Euclidean Distance Mapping. Computer Graphics
    and Image Processing 14, 227-248 (1980). 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_Clone)
    SetSquaredDistance = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_SetSquaredDistance)
    GetSquaredDistance = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_GetSquaredDistance)
    SquaredDistanceOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_SquaredDistanceOn)
    SquaredDistanceOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_SquaredDistanceOff)
    SetInputIsBinary = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_SetInputIsBinary)
    GetInputIsBinary = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_GetInputIsBinary)
    InputIsBinaryOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_InputIsBinaryOn)
    InputIsBinaryOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_InputIsBinaryOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_UseImageSpacingOff)
    GetVoronoiMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_GetVoronoiMap)
    GetDistanceMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_GetDistanceMap)
    GetVectorDistanceMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_GetVectorDistanceMap)
    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_InputOutputSameDimensionCheck
    
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_InputVoronoiSameDimensionCheck
    
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_DoubleConvertibleToOutputCheck
    
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterIUS2ID2
    cast = _swig_new_static_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterIUS2ID2

        Create a new object of the class itkDanielssonDistanceMapImageFilterIUS2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterIUS2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterIUS2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDanielssonDistanceMapImageFilterIUS2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDanielssonDistanceMapImageFilterIUS2ID2 in _itkDanielssonDistanceMapImageFilterPython:
_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_swigregister(itkDanielssonDistanceMapImageFilterIUS2ID2)
itkDanielssonDistanceMapImageFilterIUS2ID2___New_orig__ = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2___New_orig__
itkDanielssonDistanceMapImageFilterIUS2ID2_cast = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_cast


def itkDanielssonDistanceMapImageFilterIUS2IF2_New():
    return itkDanielssonDistanceMapImageFilterIUS2IF2.New()

class itkDanielssonDistanceMapImageFilterIUS2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IF2):
    r"""


    This filter computes the distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    Parameters:
    -----------

    TInputImage:  Input Image Type

    TOutputImage:  Output Image Type

    TVoronoiImage:  Voronoi Image Type. Note the default value is
    TInputImage.

    The input is assumed to contain numeric codes defining objects. The
    filter will produce as output the following images:

    A Voronoi partition using the same numeric codes as the input.

    A distance map with the approximation to the euclidean distance. from
    a particular pixel to the nearest object to this pixel in the input
    image.

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used.  This filter is N-dimensional and
    known to be efficient in computational time. The algorithm is the
    N-dimensional version of the 4SED algorithm given for two dimensions
    in:

    Danielsson, Per-Erik. Euclidean Distance Mapping. Computer Graphics
    and Image Processing 14, 227-248 (1980). 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_Clone)
    SetSquaredDistance = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_SetSquaredDistance)
    GetSquaredDistance = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_GetSquaredDistance)
    SquaredDistanceOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_SquaredDistanceOn)
    SquaredDistanceOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_SquaredDistanceOff)
    SetInputIsBinary = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_SetInputIsBinary)
    GetInputIsBinary = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_GetInputIsBinary)
    InputIsBinaryOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_InputIsBinaryOn)
    InputIsBinaryOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_InputIsBinaryOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_UseImageSpacingOff)
    GetVoronoiMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_GetVoronoiMap)
    GetDistanceMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_GetDistanceMap)
    GetVectorDistanceMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_GetVectorDistanceMap)
    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_InputOutputSameDimensionCheck
    
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_InputVoronoiSameDimensionCheck
    
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_DoubleConvertibleToOutputCheck
    
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterIUS2IF2
    cast = _swig_new_static_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterIUS2IF2

        Create a new object of the class itkDanielssonDistanceMapImageFilterIUS2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterIUS2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterIUS2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDanielssonDistanceMapImageFilterIUS2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDanielssonDistanceMapImageFilterIUS2IF2 in _itkDanielssonDistanceMapImageFilterPython:
_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_swigregister(itkDanielssonDistanceMapImageFilterIUS2IF2)
itkDanielssonDistanceMapImageFilterIUS2IF2___New_orig__ = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2___New_orig__
itkDanielssonDistanceMapImageFilterIUS2IF2_cast = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_cast


def itkDanielssonDistanceMapImageFilterIUS2IUS2_New():
    return itkDanielssonDistanceMapImageFilterIUS2IUS2.New()

class itkDanielssonDistanceMapImageFilterIUS2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""


    This filter computes the distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    Parameters:
    -----------

    TInputImage:  Input Image Type

    TOutputImage:  Output Image Type

    TVoronoiImage:  Voronoi Image Type. Note the default value is
    TInputImage.

    The input is assumed to contain numeric codes defining objects. The
    filter will produce as output the following images:

    A Voronoi partition using the same numeric codes as the input.

    A distance map with the approximation to the euclidean distance. from
    a particular pixel to the nearest object to this pixel in the input
    image.

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used.  This filter is N-dimensional and
    known to be efficient in computational time. The algorithm is the
    N-dimensional version of the 4SED algorithm given for two dimensions
    in:

    Danielsson, Per-Erik. Euclidean Distance Mapping. Computer Graphics
    and Image Processing 14, 227-248 (1980). 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_Clone)
    SetSquaredDistance = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_SetSquaredDistance)
    GetSquaredDistance = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_GetSquaredDistance)
    SquaredDistanceOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_SquaredDistanceOn)
    SquaredDistanceOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_SquaredDistanceOff)
    SetInputIsBinary = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_SetInputIsBinary)
    GetInputIsBinary = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_GetInputIsBinary)
    InputIsBinaryOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_InputIsBinaryOn)
    InputIsBinaryOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_InputIsBinaryOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_UseImageSpacingOff)
    GetVoronoiMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_GetVoronoiMap)
    GetDistanceMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_GetDistanceMap)
    GetVectorDistanceMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_GetVectorDistanceMap)
    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_InputOutputSameDimensionCheck
    
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_InputVoronoiSameDimensionCheck
    
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_DoubleConvertibleToOutputCheck
    
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterIUS2IUS2

        Create a new object of the class itkDanielssonDistanceMapImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDanielssonDistanceMapImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDanielssonDistanceMapImageFilterIUS2IUS2 in _itkDanielssonDistanceMapImageFilterPython:
_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_swigregister(itkDanielssonDistanceMapImageFilterIUS2IUS2)
itkDanielssonDistanceMapImageFilterIUS2IUS2___New_orig__ = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2___New_orig__
itkDanielssonDistanceMapImageFilterIUS2IUS2_cast = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_cast


def itkDanielssonDistanceMapImageFilterIUS3ID3_New():
    return itkDanielssonDistanceMapImageFilterIUS3ID3.New()

class itkDanielssonDistanceMapImageFilterIUS3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3ID3):
    r"""


    This filter computes the distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    Parameters:
    -----------

    TInputImage:  Input Image Type

    TOutputImage:  Output Image Type

    TVoronoiImage:  Voronoi Image Type. Note the default value is
    TInputImage.

    The input is assumed to contain numeric codes defining objects. The
    filter will produce as output the following images:

    A Voronoi partition using the same numeric codes as the input.

    A distance map with the approximation to the euclidean distance. from
    a particular pixel to the nearest object to this pixel in the input
    image.

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used.  This filter is N-dimensional and
    known to be efficient in computational time. The algorithm is the
    N-dimensional version of the 4SED algorithm given for two dimensions
    in:

    Danielsson, Per-Erik. Euclidean Distance Mapping. Computer Graphics
    and Image Processing 14, 227-248 (1980). 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_Clone)
    SetSquaredDistance = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_SetSquaredDistance)
    GetSquaredDistance = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_GetSquaredDistance)
    SquaredDistanceOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_SquaredDistanceOn)
    SquaredDistanceOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_SquaredDistanceOff)
    SetInputIsBinary = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_SetInputIsBinary)
    GetInputIsBinary = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_GetInputIsBinary)
    InputIsBinaryOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_InputIsBinaryOn)
    InputIsBinaryOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_InputIsBinaryOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_UseImageSpacingOff)
    GetVoronoiMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_GetVoronoiMap)
    GetDistanceMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_GetDistanceMap)
    GetVectorDistanceMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_GetVectorDistanceMap)
    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_InputOutputSameDimensionCheck
    
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_InputVoronoiSameDimensionCheck
    
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_DoubleConvertibleToOutputCheck
    
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterIUS3ID3
    cast = _swig_new_static_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterIUS3ID3

        Create a new object of the class itkDanielssonDistanceMapImageFilterIUS3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterIUS3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterIUS3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDanielssonDistanceMapImageFilterIUS3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDanielssonDistanceMapImageFilterIUS3ID3 in _itkDanielssonDistanceMapImageFilterPython:
_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_swigregister(itkDanielssonDistanceMapImageFilterIUS3ID3)
itkDanielssonDistanceMapImageFilterIUS3ID3___New_orig__ = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3___New_orig__
itkDanielssonDistanceMapImageFilterIUS3ID3_cast = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_cast


def itkDanielssonDistanceMapImageFilterIUS3IF3_New():
    return itkDanielssonDistanceMapImageFilterIUS3IF3.New()

class itkDanielssonDistanceMapImageFilterIUS3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IF3):
    r"""


    This filter computes the distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    Parameters:
    -----------

    TInputImage:  Input Image Type

    TOutputImage:  Output Image Type

    TVoronoiImage:  Voronoi Image Type. Note the default value is
    TInputImage.

    The input is assumed to contain numeric codes defining objects. The
    filter will produce as output the following images:

    A Voronoi partition using the same numeric codes as the input.

    A distance map with the approximation to the euclidean distance. from
    a particular pixel to the nearest object to this pixel in the input
    image.

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used.  This filter is N-dimensional and
    known to be efficient in computational time. The algorithm is the
    N-dimensional version of the 4SED algorithm given for two dimensions
    in:

    Danielsson, Per-Erik. Euclidean Distance Mapping. Computer Graphics
    and Image Processing 14, 227-248 (1980). 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_Clone)
    SetSquaredDistance = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_SetSquaredDistance)
    GetSquaredDistance = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_GetSquaredDistance)
    SquaredDistanceOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_SquaredDistanceOn)
    SquaredDistanceOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_SquaredDistanceOff)
    SetInputIsBinary = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_SetInputIsBinary)
    GetInputIsBinary = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_GetInputIsBinary)
    InputIsBinaryOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_InputIsBinaryOn)
    InputIsBinaryOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_InputIsBinaryOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_UseImageSpacingOff)
    GetVoronoiMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_GetVoronoiMap)
    GetDistanceMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_GetDistanceMap)
    GetVectorDistanceMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_GetVectorDistanceMap)
    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_InputOutputSameDimensionCheck
    
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_InputVoronoiSameDimensionCheck
    
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_DoubleConvertibleToOutputCheck
    
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterIUS3IF3
    cast = _swig_new_static_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterIUS3IF3

        Create a new object of the class itkDanielssonDistanceMapImageFilterIUS3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterIUS3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterIUS3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDanielssonDistanceMapImageFilterIUS3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDanielssonDistanceMapImageFilterIUS3IF3 in _itkDanielssonDistanceMapImageFilterPython:
_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_swigregister(itkDanielssonDistanceMapImageFilterIUS3IF3)
itkDanielssonDistanceMapImageFilterIUS3IF3___New_orig__ = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3___New_orig__
itkDanielssonDistanceMapImageFilterIUS3IF3_cast = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_cast


def itkDanielssonDistanceMapImageFilterIUS3IUS3_New():
    return itkDanielssonDistanceMapImageFilterIUS3IUS3.New()

class itkDanielssonDistanceMapImageFilterIUS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""


    This filter computes the distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    Parameters:
    -----------

    TInputImage:  Input Image Type

    TOutputImage:  Output Image Type

    TVoronoiImage:  Voronoi Image Type. Note the default value is
    TInputImage.

    The input is assumed to contain numeric codes defining objects. The
    filter will produce as output the following images:

    A Voronoi partition using the same numeric codes as the input.

    A distance map with the approximation to the euclidean distance. from
    a particular pixel to the nearest object to this pixel in the input
    image.

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used.  This filter is N-dimensional and
    known to be efficient in computational time. The algorithm is the
    N-dimensional version of the 4SED algorithm given for two dimensions
    in:

    Danielsson, Per-Erik. Euclidean Distance Mapping. Computer Graphics
    and Image Processing 14, 227-248 (1980). 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_Clone)
    SetSquaredDistance = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_SetSquaredDistance)
    GetSquaredDistance = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_GetSquaredDistance)
    SquaredDistanceOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_SquaredDistanceOn)
    SquaredDistanceOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_SquaredDistanceOff)
    SetInputIsBinary = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_SetInputIsBinary)
    GetInputIsBinary = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_GetInputIsBinary)
    InputIsBinaryOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_InputIsBinaryOn)
    InputIsBinaryOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_InputIsBinaryOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_UseImageSpacingOff)
    GetVoronoiMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_GetVoronoiMap)
    GetDistanceMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_GetDistanceMap)
    GetVectorDistanceMap = _swig_new_instance_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_GetVectorDistanceMap)
    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_InputOutputSameDimensionCheck
    
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_InputVoronoiSameDimensionCheck
    
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_DoubleConvertibleToOutputCheck
    
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterIUS3IUS3

        Create a new object of the class itkDanielssonDistanceMapImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDanielssonDistanceMapImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDanielssonDistanceMapImageFilterIUS3IUS3 in _itkDanielssonDistanceMapImageFilterPython:
_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_swigregister(itkDanielssonDistanceMapImageFilterIUS3IUS3)
itkDanielssonDistanceMapImageFilterIUS3IUS3___New_orig__ = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3___New_orig__
itkDanielssonDistanceMapImageFilterIUS3IUS3_cast = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def danielsson_distance_map_image_filter(*args, **kwargs):
    """Procedural interface for DanielssonDistanceMapImageFilter"""
    import itk
    instance = itk.DanielssonDistanceMapImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def danielsson_distance_map_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.DanielssonDistanceMapImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.DanielssonDistanceMapImageFilter.values()[0]
    else:
        filter_object = itk.DanielssonDistanceMapImageFilter

    danielsson_distance_map_image_filter.__doc__ = filter_object.__doc__
    danielsson_distance_map_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    danielsson_distance_map_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.DanielssonDistanceMapImageFilter, itkTemplate.itkTemplate):
        danielsson_distance_map_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        danielsson_distance_map_image_filter.__doc__ += "\n"
        danielsson_distance_map_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        danielsson_distance_map_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



