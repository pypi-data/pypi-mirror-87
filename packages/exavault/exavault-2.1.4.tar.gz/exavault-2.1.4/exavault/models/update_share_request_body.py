# coding: utf-8

"""
    ExaVault API

    See our API reference documentation at https://www.exavault.com/developer/api-docs/  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@exavault.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateShareRequestBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'resources': 'list[str]',
        'access_mode': 'AccessMode',
        'embed': 'bool',
        'recipients': 'list[SharesRecipients]',
        'expiration': 'datetime',
        'has_notification': 'bool',
        'is_public': 'bool',
        'message_body': 'str',
        'notification_emails': 'list[str]',
        'password': 'str',
        'require_email': 'bool',
        'message_subject': 'str',
        'file_drop_create_folders': 'bool',
        'status': 'int'
    }

    attribute_map = {
        'name': 'name',
        'resources': 'resources',
        'access_mode': 'accessMode',
        'embed': 'embed',
        'recipients': 'recipients',
        'expiration': 'expiration',
        'has_notification': 'hasNotification',
        'is_public': 'isPublic',
        'message_body': 'messageBody',
        'notification_emails': 'notificationEmails',
        'password': 'password',
        'require_email': 'requireEmail',
        'message_subject': 'messageSubject',
        'file_drop_create_folders': 'fileDropCreateFolders',
        'status': 'status'
    }

    def __init__(self, name=None, resources=None, access_mode=None, embed=None, recipients=None, expiration=None, has_notification=None, is_public=None, message_body=None, notification_emails=None, password=None, require_email=None, message_subject=None, file_drop_create_folders=None, status=None):  # noqa: E501
        """UpdateShareRequestBody - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._resources = None
        self._access_mode = None
        self._embed = None
        self._recipients = None
        self._expiration = None
        self._has_notification = None
        self._is_public = None
        self._message_body = None
        self._notification_emails = None
        self._password = None
        self._require_email = None
        self._message_subject = None
        self._file_drop_create_folders = None
        self._status = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if resources is not None:
            self.resources = resources
        if access_mode is not None:
            self.access_mode = access_mode
        if embed is not None:
            self.embed = embed
        if recipients is not None:
            self.recipients = recipients
        if expiration is not None:
            self.expiration = expiration
        if has_notification is not None:
            self.has_notification = has_notification
        if is_public is not None:
            self.is_public = is_public
        if message_body is not None:
            self.message_body = message_body
        if notification_emails is not None:
            self.notification_emails = notification_emails
        if password is not None:
            self.password = password
        if require_email is not None:
            self.require_email = require_email
        if message_subject is not None:
            self.message_subject = message_subject
        if file_drop_create_folders is not None:
            self.file_drop_create_folders = file_drop_create_folders
        if status is not None:
            self.status = status

    @property
    def name(self):
        """Gets the name of this UpdateShareRequestBody.  # noqa: E501

        Name of the share.  # noqa: E501

        :return: The name of this UpdateShareRequestBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateShareRequestBody.

        Name of the share.  # noqa: E501

        :param name: The name of this UpdateShareRequestBody.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def resources(self):
        """Gets the resources of this UpdateShareRequestBody.  # noqa: E501

        Array of resources for this share. See details on [how to specify resources](#section/Identifying-Resources) above.  **shared_folder** and **receive** shares must have only one `resource`, which is a directory that does not have a current share attached.  **send** shares may have multiple `resource` parameters.   **NOTE**: Sending this parameter will **REPLACE** the existing resources with the resources included in this request.  # noqa: E501

        :return: The resources of this UpdateShareRequestBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this UpdateShareRequestBody.

        Array of resources for this share. See details on [how to specify resources](#section/Identifying-Resources) above.  **shared_folder** and **receive** shares must have only one `resource`, which is a directory that does not have a current share attached.  **send** shares may have multiple `resource` parameters.   **NOTE**: Sending this parameter will **REPLACE** the existing resources with the resources included in this request.  # noqa: E501

        :param resources: The resources of this UpdateShareRequestBody.  # noqa: E501
        :type: list[str]
        """

        self._resources = resources

    @property
    def access_mode(self):
        """Gets the access_mode of this UpdateShareRequestBody.  # noqa: E501


        :return: The access_mode of this UpdateShareRequestBody.  # noqa: E501
        :rtype: AccessMode
        """
        return self._access_mode

    @access_mode.setter
    def access_mode(self, access_mode):
        """Sets the access_mode of this UpdateShareRequestBody.


        :param access_mode: The access_mode of this UpdateShareRequestBody.  # noqa: E501
        :type: AccessMode
        """

        self._access_mode = access_mode

    @property
    def embed(self):
        """Gets the embed of this UpdateShareRequestBody.  # noqa: E501

        Whether the share can be embedded in another web page.  # noqa: E501

        :return: The embed of this UpdateShareRequestBody.  # noqa: E501
        :rtype: bool
        """
        return self._embed

    @embed.setter
    def embed(self, embed):
        """Sets the embed of this UpdateShareRequestBody.

        Whether the share can be embedded in another web page.  # noqa: E501

        :param embed: The embed of this UpdateShareRequestBody.  # noqa: E501
        :type: bool
        """

        self._embed = embed

    @property
    def recipients(self):
        """Gets the recipients of this UpdateShareRequestBody.  # noqa: E501

        People you want to invite to the share.   **Note**: unless you also set the `subject` and `message` for the new share, invitation emails will not be sent to these recipients.  **Note**: Recipients in this list will **REPLACE** the recipients already assigned to this share.   # noqa: E501

        :return: The recipients of this UpdateShareRequestBody.  # noqa: E501
        :rtype: list[SharesRecipients]
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """Sets the recipients of this UpdateShareRequestBody.

        People you want to invite to the share.   **Note**: unless you also set the `subject` and `message` for the new share, invitation emails will not be sent to these recipients.  **Note**: Recipients in this list will **REPLACE** the recipients already assigned to this share.   # noqa: E501

        :param recipients: The recipients of this UpdateShareRequestBody.  # noqa: E501
        :type: list[SharesRecipients]
        """

        self._recipients = recipients

    @property
    def expiration(self):
        """Gets the expiration of this UpdateShareRequestBody.  # noqa: E501

        New expiration date and time for the share  # noqa: E501

        :return: The expiration of this UpdateShareRequestBody.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this UpdateShareRequestBody.

        New expiration date and time for the share  # noqa: E501

        :param expiration: The expiration of this UpdateShareRequestBody.  # noqa: E501
        :type: datetime
        """

        self._expiration = expiration

    @property
    def has_notification(self):
        """Gets the has_notification of this UpdateShareRequestBody.  # noqa: E501

        Whether delivery receipts should be sent for this share.  # noqa: E501

        :return: The has_notification of this UpdateShareRequestBody.  # noqa: E501
        :rtype: bool
        """
        return self._has_notification

    @has_notification.setter
    def has_notification(self, has_notification):
        """Sets the has_notification of this UpdateShareRequestBody.

        Whether delivery receipts should be sent for this share.  # noqa: E501

        :param has_notification: The has_notification of this UpdateShareRequestBody.  # noqa: E501
        :type: bool
        """

        self._has_notification = has_notification

    @property
    def is_public(self):
        """Gets the is_public of this UpdateShareRequestBody.  # noqa: E501

        Whether people can visit the share without following a link from an invitation email  # noqa: E501

        :return: The is_public of this UpdateShareRequestBody.  # noqa: E501
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this UpdateShareRequestBody.

        Whether people can visit the share without following a link from an invitation email  # noqa: E501

        :param is_public: The is_public of this UpdateShareRequestBody.  # noqa: E501
        :type: bool
        """

        self._is_public = is_public

    @property
    def message_body(self):
        """Gets the message_body of this UpdateShareRequestBody.  # noqa: E501

        Message content to use for emails inviting recipients to the share. Ignored if you have not also provided `recipients` and a `subject`  # noqa: E501

        :return: The message_body of this UpdateShareRequestBody.  # noqa: E501
        :rtype: str
        """
        return self._message_body

    @message_body.setter
    def message_body(self, message_body):
        """Sets the message_body of this UpdateShareRequestBody.

        Message content to use for emails inviting recipients to the share. Ignored if you have not also provided `recipients` and a `subject`  # noqa: E501

        :param message_body: The message_body of this UpdateShareRequestBody.  # noqa: E501
        :type: str
        """

        self._message_body = message_body

    @property
    def notification_emails(self):
        """Gets the notification_emails of this UpdateShareRequestBody.  # noqa: E501

        List of email addresses to send delivery receipts to. Ignored if `hasNotification` is false.   # noqa: E501

        :return: The notification_emails of this UpdateShareRequestBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._notification_emails

    @notification_emails.setter
    def notification_emails(self, notification_emails):
        """Sets the notification_emails of this UpdateShareRequestBody.

        List of email addresses to send delivery receipts to. Ignored if `hasNotification` is false.   # noqa: E501

        :param notification_emails: The notification_emails of this UpdateShareRequestBody.  # noqa: E501
        :type: list[str]
        """

        self._notification_emails = notification_emails

    @property
    def password(self):
        """Gets the password of this UpdateShareRequestBody.  # noqa: E501

        New password for the share. To leave the password unchanged, do not send this parameter.  # noqa: E501

        :return: The password of this UpdateShareRequestBody.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UpdateShareRequestBody.

        New password for the share. To leave the password unchanged, do not send this parameter.  # noqa: E501

        :param password: The password of this UpdateShareRequestBody.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def require_email(self):
        """Gets the require_email of this UpdateShareRequestBody.  # noqa: E501

        Whether visitors to the share will be required to enter their email in order to access the share.  # noqa: E501

        :return: The require_email of this UpdateShareRequestBody.  # noqa: E501
        :rtype: bool
        """
        return self._require_email

    @require_email.setter
    def require_email(self, require_email):
        """Sets the require_email of this UpdateShareRequestBody.

        Whether visitors to the share will be required to enter their email in order to access the share.  # noqa: E501

        :param require_email: The require_email of this UpdateShareRequestBody.  # noqa: E501
        :type: bool
        """

        self._require_email = require_email

    @property
    def message_subject(self):
        """Gets the message_subject of this UpdateShareRequestBody.  # noqa: E501

        Subject to use on emails inviting recipients to the share. Ignored if you have not also provided `recipients` and a `message`  # noqa: E501

        :return: The message_subject of this UpdateShareRequestBody.  # noqa: E501
        :rtype: str
        """
        return self._message_subject

    @message_subject.setter
    def message_subject(self, message_subject):
        """Sets the message_subject of this UpdateShareRequestBody.

        Subject to use on emails inviting recipients to the share. Ignored if you have not also provided `recipients` and a `message`  # noqa: E501

        :param message_subject: The message_subject of this UpdateShareRequestBody.  # noqa: E501
        :type: str
        """

        self._message_subject = message_subject

    @property
    def file_drop_create_folders(self):
        """Gets the file_drop_create_folders of this UpdateShareRequestBody.  # noqa: E501

        Whether uploads to a receive folder should be automatically placed into subfolders. See our [receive folder documentation](/docs/account/05-file-sharing/05-form-builder#advanced-form-settings)  # noqa: E501

        :return: The file_drop_create_folders of this UpdateShareRequestBody.  # noqa: E501
        :rtype: bool
        """
        return self._file_drop_create_folders

    @file_drop_create_folders.setter
    def file_drop_create_folders(self, file_drop_create_folders):
        """Sets the file_drop_create_folders of this UpdateShareRequestBody.

        Whether uploads to a receive folder should be automatically placed into subfolders. See our [receive folder documentation](/docs/account/05-file-sharing/05-form-builder#advanced-form-settings)  # noqa: E501

        :param file_drop_create_folders: The file_drop_create_folders of this UpdateShareRequestBody.  # noqa: E501
        :type: bool
        """

        self._file_drop_create_folders = file_drop_create_folders

    @property
    def status(self):
        """Gets the status of this UpdateShareRequestBody.  # noqa: E501

        New status for the share. You can set an active share to inactive by setting the status to **0**  # noqa: E501

        :return: The status of this UpdateShareRequestBody.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UpdateShareRequestBody.

        New status for the share. You can set an active share to inactive by setting the status to **0**  # noqa: E501

        :param status: The status of this UpdateShareRequestBody.  # noqa: E501
        :type: int
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateShareRequestBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateShareRequestBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
