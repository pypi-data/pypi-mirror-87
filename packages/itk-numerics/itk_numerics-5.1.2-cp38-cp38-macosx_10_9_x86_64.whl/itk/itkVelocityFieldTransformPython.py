# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKDisplacementFieldPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkVelocityFieldTransformPython
else:
    import _itkVelocityFieldTransformPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkVelocityFieldTransformPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkVelocityFieldTransformPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkTransformBasePython
import itk.itkArrayPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkArray2DPython
import itk.itkVariableLengthVectorPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.ITKCommonBasePython
import itk.vnl_matrix_fixedPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.itkOptimizerParametersPython
import itk.itkDiffusionTensor3DPython
import itk.itkImagePython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkImageRegionPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkDisplacementFieldTransformPython

def itkVelocityFieldTransformD2_New():
    return itkVelocityFieldTransformD2.New()

class itkVelocityFieldTransformD2(itk.itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2):
    r"""


    Provides local/dense/high-dimensionality transformation via a a
    velocity field.

    Nick Tustison

    Brian Avants 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVelocityFieldTransformPython.itkVelocityFieldTransformD2___New_orig__)
    Clone = _swig_new_instance_method(_itkVelocityFieldTransformPython.itkVelocityFieldTransformD2_Clone)
    SetVelocityField = _swig_new_instance_method(_itkVelocityFieldTransformPython.itkVelocityFieldTransformD2_SetVelocityField)
    GetModifiableVelocityField = _swig_new_instance_method(_itkVelocityFieldTransformPython.itkVelocityFieldTransformD2_GetModifiableVelocityField)
    GetVelocityField = _swig_new_instance_method(_itkVelocityFieldTransformPython.itkVelocityFieldTransformD2_GetVelocityField)
    SetVelocityFieldInterpolator = _swig_new_instance_method(_itkVelocityFieldTransformPython.itkVelocityFieldTransformD2_SetVelocityFieldInterpolator)
    GetModifiableVelocityFieldInterpolator = _swig_new_instance_method(_itkVelocityFieldTransformPython.itkVelocityFieldTransformD2_GetModifiableVelocityFieldInterpolator)
    GetVelocityFieldInterpolator = _swig_new_instance_method(_itkVelocityFieldTransformPython.itkVelocityFieldTransformD2_GetVelocityFieldInterpolator)
    GetVelocityFieldSetTime = _swig_new_instance_method(_itkVelocityFieldTransformPython.itkVelocityFieldTransformD2_GetVelocityFieldSetTime)
    UpdateTransformParameters = _swig_new_instance_method(_itkVelocityFieldTransformPython.itkVelocityFieldTransformD2_UpdateTransformParameters)
    GetInverse = _swig_new_instance_method(_itkVelocityFieldTransformPython.itkVelocityFieldTransformD2_GetInverse)
    IntegrateVelocityField = _swig_new_instance_method(_itkVelocityFieldTransformPython.itkVelocityFieldTransformD2_IntegrateVelocityField)
    SetLowerTimeBound = _swig_new_instance_method(_itkVelocityFieldTransformPython.itkVelocityFieldTransformD2_SetLowerTimeBound)
    GetLowerTimeBound = _swig_new_instance_method(_itkVelocityFieldTransformPython.itkVelocityFieldTransformD2_GetLowerTimeBound)
    SetUpperTimeBound = _swig_new_instance_method(_itkVelocityFieldTransformPython.itkVelocityFieldTransformD2_SetUpperTimeBound)
    GetUpperTimeBound = _swig_new_instance_method(_itkVelocityFieldTransformPython.itkVelocityFieldTransformD2_GetUpperTimeBound)
    SetNumberOfIntegrationSteps = _swig_new_instance_method(_itkVelocityFieldTransformPython.itkVelocityFieldTransformD2_SetNumberOfIntegrationSteps)
    GetNumberOfIntegrationSteps = _swig_new_instance_method(_itkVelocityFieldTransformPython.itkVelocityFieldTransformD2_GetNumberOfIntegrationSteps)
    __swig_destroy__ = _itkVelocityFieldTransformPython.delete_itkVelocityFieldTransformD2
    cast = _swig_new_static_method(_itkVelocityFieldTransformPython.itkVelocityFieldTransformD2_cast)

    def New(*args, **kargs):
        """New() -> itkVelocityFieldTransformD2

        Create a new object of the class itkVelocityFieldTransformD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVelocityFieldTransformD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVelocityFieldTransformD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVelocityFieldTransformD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVelocityFieldTransformD2 in _itkVelocityFieldTransformPython:
_itkVelocityFieldTransformPython.itkVelocityFieldTransformD2_swigregister(itkVelocityFieldTransformD2)
itkVelocityFieldTransformD2___New_orig__ = _itkVelocityFieldTransformPython.itkVelocityFieldTransformD2___New_orig__
itkVelocityFieldTransformD2_cast = _itkVelocityFieldTransformPython.itkVelocityFieldTransformD2_cast


def itkVelocityFieldTransformD3_New():
    return itkVelocityFieldTransformD3.New()

class itkVelocityFieldTransformD3(itk.itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3):
    r"""


    Provides local/dense/high-dimensionality transformation via a a
    velocity field.

    Nick Tustison

    Brian Avants 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVelocityFieldTransformPython.itkVelocityFieldTransformD3___New_orig__)
    Clone = _swig_new_instance_method(_itkVelocityFieldTransformPython.itkVelocityFieldTransformD3_Clone)
    SetVelocityField = _swig_new_instance_method(_itkVelocityFieldTransformPython.itkVelocityFieldTransformD3_SetVelocityField)
    GetModifiableVelocityField = _swig_new_instance_method(_itkVelocityFieldTransformPython.itkVelocityFieldTransformD3_GetModifiableVelocityField)
    GetVelocityField = _swig_new_instance_method(_itkVelocityFieldTransformPython.itkVelocityFieldTransformD3_GetVelocityField)
    SetVelocityFieldInterpolator = _swig_new_instance_method(_itkVelocityFieldTransformPython.itkVelocityFieldTransformD3_SetVelocityFieldInterpolator)
    GetModifiableVelocityFieldInterpolator = _swig_new_instance_method(_itkVelocityFieldTransformPython.itkVelocityFieldTransformD3_GetModifiableVelocityFieldInterpolator)
    GetVelocityFieldInterpolator = _swig_new_instance_method(_itkVelocityFieldTransformPython.itkVelocityFieldTransformD3_GetVelocityFieldInterpolator)
    GetVelocityFieldSetTime = _swig_new_instance_method(_itkVelocityFieldTransformPython.itkVelocityFieldTransformD3_GetVelocityFieldSetTime)
    UpdateTransformParameters = _swig_new_instance_method(_itkVelocityFieldTransformPython.itkVelocityFieldTransformD3_UpdateTransformParameters)
    GetInverse = _swig_new_instance_method(_itkVelocityFieldTransformPython.itkVelocityFieldTransformD3_GetInverse)
    IntegrateVelocityField = _swig_new_instance_method(_itkVelocityFieldTransformPython.itkVelocityFieldTransformD3_IntegrateVelocityField)
    SetLowerTimeBound = _swig_new_instance_method(_itkVelocityFieldTransformPython.itkVelocityFieldTransformD3_SetLowerTimeBound)
    GetLowerTimeBound = _swig_new_instance_method(_itkVelocityFieldTransformPython.itkVelocityFieldTransformD3_GetLowerTimeBound)
    SetUpperTimeBound = _swig_new_instance_method(_itkVelocityFieldTransformPython.itkVelocityFieldTransformD3_SetUpperTimeBound)
    GetUpperTimeBound = _swig_new_instance_method(_itkVelocityFieldTransformPython.itkVelocityFieldTransformD3_GetUpperTimeBound)
    SetNumberOfIntegrationSteps = _swig_new_instance_method(_itkVelocityFieldTransformPython.itkVelocityFieldTransformD3_SetNumberOfIntegrationSteps)
    GetNumberOfIntegrationSteps = _swig_new_instance_method(_itkVelocityFieldTransformPython.itkVelocityFieldTransformD3_GetNumberOfIntegrationSteps)
    __swig_destroy__ = _itkVelocityFieldTransformPython.delete_itkVelocityFieldTransformD3
    cast = _swig_new_static_method(_itkVelocityFieldTransformPython.itkVelocityFieldTransformD3_cast)

    def New(*args, **kargs):
        """New() -> itkVelocityFieldTransformD3

        Create a new object of the class itkVelocityFieldTransformD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVelocityFieldTransformD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVelocityFieldTransformD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVelocityFieldTransformD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVelocityFieldTransformD3 in _itkVelocityFieldTransformPython:
_itkVelocityFieldTransformPython.itkVelocityFieldTransformD3_swigregister(itkVelocityFieldTransformD3)
itkVelocityFieldTransformD3___New_orig__ = _itkVelocityFieldTransformPython.itkVelocityFieldTransformD3___New_orig__
itkVelocityFieldTransformD3_cast = _itkVelocityFieldTransformPython.itkVelocityFieldTransformD3_cast



