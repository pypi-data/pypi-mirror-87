# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageGridPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkWarpImageFilterPython
else:
    import _itkWarpImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkWarpImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkWarpImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkFixedArrayPython
import itk.itkPointPython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.ITKCommonBasePython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkInterpolateImageFunctionPython
import itk.itkContinuousIndexPython
import itk.itkImageFunctionBasePython
import itk.itkFunctionBasePython
import itk.itkArrayPython

def itkWarpImageFilterID2ID2IVF22_New():
    return itkWarpImageFilterID2ID2IVF22.New()

class itkWarpImageFilterID2ID2IVF22(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""


    Warps an image using an input displacement field.

    WarpImageFilter warps an existing image with respect to a given
    displacement field.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the input image. The vector type must support element access via
    operator [].

    The output image is produced by inverse mapping: the output pixels are
    mapped back onto the input image. This scheme avoids the creation of
    any holes and overlaps in the output image.

    Each vector in the displacement field represent the distance between a
    geometric point in the input space and a point in the output space
    such that:

    \\[ p_{in} = p_{out} + d \\]

    Typically the mapped position does not correspond to an integer pixel
    position in the input image. Interpolation via an image function is
    used to compute values at non-integer positions. The default
    interpolation typed used is the LinearInterpolateImageFunction. The
    user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    Position mapped to outside of the input image buffer are assigned a
    edge padding value.

    The LargetPossibleRegion for the output is inherited from the input
    displacement field. The output image spacing, origin and orientation
    may be set via SetOutputSpacing, SetOutputOrigin and
    SetOutputDirection. The default are respectively a vector of 1's, a
    vector of 0's and an identity matrix.

    This class is templated over the type of the input image, the type of
    the output image and the type of the displacement field.

    The input image is set via SetInput. The input displacement field is
    set via SetDisplacementField.

    This filter is implemented as a multithreaded filter.

    WARNING:  This filter assumes that the input type, output type and
    displacement field type all have the same number of dimensions.
    example{Filtering/ImageGrid/WarpAnImageUsingADeformationField,Warp An
    Image Using A Deformation Field} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF22_Clone)
    SetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF22_SetDisplacementField)
    GetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF22_GetDisplacementField)
    SetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF22_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF22_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF22_GetInterpolator)
    SetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF22_SetOutputSpacing)
    GetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF22_GetOutputSpacing)
    SetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF22_SetOutputOrigin)
    GetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF22_GetOutputOrigin)
    SetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF22_SetOutputDirection)
    GetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF22_GetOutputDirection)
    SetOutputParametersFromImage = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF22_SetOutputParametersFromImage)
    SetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF22_SetOutputStartIndex)
    GetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF22_GetOutputStartIndex)
    SetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF22_SetOutputSize)
    GetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF22_GetOutputSize)
    SetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF22_SetEdgePaddingValue)
    GetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF22_GetEdgePaddingValue)
    GenerateOutputInformation = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF22_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF22_GenerateInputRequestedRegion)
    BeforeThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF22_BeforeThreadedGenerateData)
    AfterThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF22_AfterThreadedGenerateData)
    SameDimensionCheck1 = _itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF22_SameDimensionCheck1
    
    SameDimensionCheck2 = _itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF22_SameDimensionCheck2
    
    InputHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF22_InputHasNumericTraitsCheck
    
    DisplacementFieldHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF22_DisplacementFieldHasNumericTraitsCheck
    
    __swig_destroy__ = _itkWarpImageFilterPython.delete_itkWarpImageFilterID2ID2IVF22
    cast = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF22_cast)

    def New(*args, **kargs):
        """New() -> itkWarpImageFilterID2ID2IVF22

        Create a new object of the class itkWarpImageFilterID2ID2IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWarpImageFilterID2ID2IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWarpImageFilterID2ID2IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWarpImageFilterID2ID2IVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWarpImageFilterID2ID2IVF22 in _itkWarpImageFilterPython:
_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF22_swigregister(itkWarpImageFilterID2ID2IVF22)
itkWarpImageFilterID2ID2IVF22___New_orig__ = _itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF22___New_orig__
itkWarpImageFilterID2ID2IVF22_cast = _itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF22_cast


def itkWarpImageFilterID2ID2IVF32_New():
    return itkWarpImageFilterID2ID2IVF32.New()

class itkWarpImageFilterID2ID2IVF32(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""


    Warps an image using an input displacement field.

    WarpImageFilter warps an existing image with respect to a given
    displacement field.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the input image. The vector type must support element access via
    operator [].

    The output image is produced by inverse mapping: the output pixels are
    mapped back onto the input image. This scheme avoids the creation of
    any holes and overlaps in the output image.

    Each vector in the displacement field represent the distance between a
    geometric point in the input space and a point in the output space
    such that:

    \\[ p_{in} = p_{out} + d \\]

    Typically the mapped position does not correspond to an integer pixel
    position in the input image. Interpolation via an image function is
    used to compute values at non-integer positions. The default
    interpolation typed used is the LinearInterpolateImageFunction. The
    user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    Position mapped to outside of the input image buffer are assigned a
    edge padding value.

    The LargetPossibleRegion for the output is inherited from the input
    displacement field. The output image spacing, origin and orientation
    may be set via SetOutputSpacing, SetOutputOrigin and
    SetOutputDirection. The default are respectively a vector of 1's, a
    vector of 0's and an identity matrix.

    This class is templated over the type of the input image, the type of
    the output image and the type of the displacement field.

    The input image is set via SetInput. The input displacement field is
    set via SetDisplacementField.

    This filter is implemented as a multithreaded filter.

    WARNING:  This filter assumes that the input type, output type and
    displacement field type all have the same number of dimensions.
    example{Filtering/ImageGrid/WarpAnImageUsingADeformationField,Warp An
    Image Using A Deformation Field} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF32___New_orig__)
    Clone = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF32_Clone)
    SetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF32_SetDisplacementField)
    GetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF32_GetDisplacementField)
    SetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF32_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF32_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF32_GetInterpolator)
    SetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF32_SetOutputSpacing)
    GetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF32_GetOutputSpacing)
    SetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF32_SetOutputOrigin)
    GetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF32_GetOutputOrigin)
    SetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF32_SetOutputDirection)
    GetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF32_GetOutputDirection)
    SetOutputParametersFromImage = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF32_SetOutputParametersFromImage)
    SetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF32_SetOutputStartIndex)
    GetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF32_GetOutputStartIndex)
    SetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF32_SetOutputSize)
    GetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF32_GetOutputSize)
    SetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF32_SetEdgePaddingValue)
    GetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF32_GetEdgePaddingValue)
    GenerateOutputInformation = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF32_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF32_GenerateInputRequestedRegion)
    BeforeThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF32_BeforeThreadedGenerateData)
    AfterThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF32_AfterThreadedGenerateData)
    SameDimensionCheck1 = _itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF32_SameDimensionCheck1
    
    SameDimensionCheck2 = _itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF32_SameDimensionCheck2
    
    InputHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF32_InputHasNumericTraitsCheck
    
    DisplacementFieldHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF32_DisplacementFieldHasNumericTraitsCheck
    
    __swig_destroy__ = _itkWarpImageFilterPython.delete_itkWarpImageFilterID2ID2IVF32
    cast = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF32_cast)

    def New(*args, **kargs):
        """New() -> itkWarpImageFilterID2ID2IVF32

        Create a new object of the class itkWarpImageFilterID2ID2IVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWarpImageFilterID2ID2IVF32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWarpImageFilterID2ID2IVF32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWarpImageFilterID2ID2IVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWarpImageFilterID2ID2IVF32 in _itkWarpImageFilterPython:
_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF32_swigregister(itkWarpImageFilterID2ID2IVF32)
itkWarpImageFilterID2ID2IVF32___New_orig__ = _itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF32___New_orig__
itkWarpImageFilterID2ID2IVF32_cast = _itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF32_cast


def itkWarpImageFilterID2ID2IVF42_New():
    return itkWarpImageFilterID2ID2IVF42.New()

class itkWarpImageFilterID2ID2IVF42(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""


    Warps an image using an input displacement field.

    WarpImageFilter warps an existing image with respect to a given
    displacement field.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the input image. The vector type must support element access via
    operator [].

    The output image is produced by inverse mapping: the output pixels are
    mapped back onto the input image. This scheme avoids the creation of
    any holes and overlaps in the output image.

    Each vector in the displacement field represent the distance between a
    geometric point in the input space and a point in the output space
    such that:

    \\[ p_{in} = p_{out} + d \\]

    Typically the mapped position does not correspond to an integer pixel
    position in the input image. Interpolation via an image function is
    used to compute values at non-integer positions. The default
    interpolation typed used is the LinearInterpolateImageFunction. The
    user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    Position mapped to outside of the input image buffer are assigned a
    edge padding value.

    The LargetPossibleRegion for the output is inherited from the input
    displacement field. The output image spacing, origin and orientation
    may be set via SetOutputSpacing, SetOutputOrigin and
    SetOutputDirection. The default are respectively a vector of 1's, a
    vector of 0's and an identity matrix.

    This class is templated over the type of the input image, the type of
    the output image and the type of the displacement field.

    The input image is set via SetInput. The input displacement field is
    set via SetDisplacementField.

    This filter is implemented as a multithreaded filter.

    WARNING:  This filter assumes that the input type, output type and
    displacement field type all have the same number of dimensions.
    example{Filtering/ImageGrid/WarpAnImageUsingADeformationField,Warp An
    Image Using A Deformation Field} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF42___New_orig__)
    Clone = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF42_Clone)
    SetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF42_SetDisplacementField)
    GetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF42_GetDisplacementField)
    SetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF42_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF42_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF42_GetInterpolator)
    SetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF42_SetOutputSpacing)
    GetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF42_GetOutputSpacing)
    SetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF42_SetOutputOrigin)
    GetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF42_GetOutputOrigin)
    SetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF42_SetOutputDirection)
    GetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF42_GetOutputDirection)
    SetOutputParametersFromImage = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF42_SetOutputParametersFromImage)
    SetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF42_SetOutputStartIndex)
    GetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF42_GetOutputStartIndex)
    SetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF42_SetOutputSize)
    GetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF42_GetOutputSize)
    SetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF42_SetEdgePaddingValue)
    GetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF42_GetEdgePaddingValue)
    GenerateOutputInformation = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF42_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF42_GenerateInputRequestedRegion)
    BeforeThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF42_BeforeThreadedGenerateData)
    AfterThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF42_AfterThreadedGenerateData)
    SameDimensionCheck1 = _itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF42_SameDimensionCheck1
    
    SameDimensionCheck2 = _itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF42_SameDimensionCheck2
    
    InputHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF42_InputHasNumericTraitsCheck
    
    DisplacementFieldHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF42_DisplacementFieldHasNumericTraitsCheck
    
    __swig_destroy__ = _itkWarpImageFilterPython.delete_itkWarpImageFilterID2ID2IVF42
    cast = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF42_cast)

    def New(*args, **kargs):
        """New() -> itkWarpImageFilterID2ID2IVF42

        Create a new object of the class itkWarpImageFilterID2ID2IVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWarpImageFilterID2ID2IVF42.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWarpImageFilterID2ID2IVF42.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWarpImageFilterID2ID2IVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWarpImageFilterID2ID2IVF42 in _itkWarpImageFilterPython:
_itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF42_swigregister(itkWarpImageFilterID2ID2IVF42)
itkWarpImageFilterID2ID2IVF42___New_orig__ = _itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF42___New_orig__
itkWarpImageFilterID2ID2IVF42_cast = _itkWarpImageFilterPython.itkWarpImageFilterID2ID2IVF42_cast


def itkWarpImageFilterID3ID3IVF23_New():
    return itkWarpImageFilterID3ID3IVF23.New()

class itkWarpImageFilterID3ID3IVF23(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""


    Warps an image using an input displacement field.

    WarpImageFilter warps an existing image with respect to a given
    displacement field.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the input image. The vector type must support element access via
    operator [].

    The output image is produced by inverse mapping: the output pixels are
    mapped back onto the input image. This scheme avoids the creation of
    any holes and overlaps in the output image.

    Each vector in the displacement field represent the distance between a
    geometric point in the input space and a point in the output space
    such that:

    \\[ p_{in} = p_{out} + d \\]

    Typically the mapped position does not correspond to an integer pixel
    position in the input image. Interpolation via an image function is
    used to compute values at non-integer positions. The default
    interpolation typed used is the LinearInterpolateImageFunction. The
    user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    Position mapped to outside of the input image buffer are assigned a
    edge padding value.

    The LargetPossibleRegion for the output is inherited from the input
    displacement field. The output image spacing, origin and orientation
    may be set via SetOutputSpacing, SetOutputOrigin and
    SetOutputDirection. The default are respectively a vector of 1's, a
    vector of 0's and an identity matrix.

    This class is templated over the type of the input image, the type of
    the output image and the type of the displacement field.

    The input image is set via SetInput. The input displacement field is
    set via SetDisplacementField.

    This filter is implemented as a multithreaded filter.

    WARNING:  This filter assumes that the input type, output type and
    displacement field type all have the same number of dimensions.
    example{Filtering/ImageGrid/WarpAnImageUsingADeformationField,Warp An
    Image Using A Deformation Field} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF23___New_orig__)
    Clone = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF23_Clone)
    SetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF23_SetDisplacementField)
    GetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF23_GetDisplacementField)
    SetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF23_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF23_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF23_GetInterpolator)
    SetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF23_SetOutputSpacing)
    GetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF23_GetOutputSpacing)
    SetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF23_SetOutputOrigin)
    GetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF23_GetOutputOrigin)
    SetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF23_SetOutputDirection)
    GetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF23_GetOutputDirection)
    SetOutputParametersFromImage = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF23_SetOutputParametersFromImage)
    SetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF23_SetOutputStartIndex)
    GetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF23_GetOutputStartIndex)
    SetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF23_SetOutputSize)
    GetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF23_GetOutputSize)
    SetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF23_SetEdgePaddingValue)
    GetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF23_GetEdgePaddingValue)
    GenerateOutputInformation = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF23_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF23_GenerateInputRequestedRegion)
    BeforeThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF23_BeforeThreadedGenerateData)
    AfterThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF23_AfterThreadedGenerateData)
    SameDimensionCheck1 = _itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF23_SameDimensionCheck1
    
    SameDimensionCheck2 = _itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF23_SameDimensionCheck2
    
    InputHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF23_InputHasNumericTraitsCheck
    
    DisplacementFieldHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF23_DisplacementFieldHasNumericTraitsCheck
    
    __swig_destroy__ = _itkWarpImageFilterPython.delete_itkWarpImageFilterID3ID3IVF23
    cast = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF23_cast)

    def New(*args, **kargs):
        """New() -> itkWarpImageFilterID3ID3IVF23

        Create a new object of the class itkWarpImageFilterID3ID3IVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWarpImageFilterID3ID3IVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWarpImageFilterID3ID3IVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWarpImageFilterID3ID3IVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWarpImageFilterID3ID3IVF23 in _itkWarpImageFilterPython:
_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF23_swigregister(itkWarpImageFilterID3ID3IVF23)
itkWarpImageFilterID3ID3IVF23___New_orig__ = _itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF23___New_orig__
itkWarpImageFilterID3ID3IVF23_cast = _itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF23_cast


def itkWarpImageFilterID3ID3IVF33_New():
    return itkWarpImageFilterID3ID3IVF33.New()

class itkWarpImageFilterID3ID3IVF33(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""


    Warps an image using an input displacement field.

    WarpImageFilter warps an existing image with respect to a given
    displacement field.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the input image. The vector type must support element access via
    operator [].

    The output image is produced by inverse mapping: the output pixels are
    mapped back onto the input image. This scheme avoids the creation of
    any holes and overlaps in the output image.

    Each vector in the displacement field represent the distance between a
    geometric point in the input space and a point in the output space
    such that:

    \\[ p_{in} = p_{out} + d \\]

    Typically the mapped position does not correspond to an integer pixel
    position in the input image. Interpolation via an image function is
    used to compute values at non-integer positions. The default
    interpolation typed used is the LinearInterpolateImageFunction. The
    user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    Position mapped to outside of the input image buffer are assigned a
    edge padding value.

    The LargetPossibleRegion for the output is inherited from the input
    displacement field. The output image spacing, origin and orientation
    may be set via SetOutputSpacing, SetOutputOrigin and
    SetOutputDirection. The default are respectively a vector of 1's, a
    vector of 0's and an identity matrix.

    This class is templated over the type of the input image, the type of
    the output image and the type of the displacement field.

    The input image is set via SetInput. The input displacement field is
    set via SetDisplacementField.

    This filter is implemented as a multithreaded filter.

    WARNING:  This filter assumes that the input type, output type and
    displacement field type all have the same number of dimensions.
    example{Filtering/ImageGrid/WarpAnImageUsingADeformationField,Warp An
    Image Using A Deformation Field} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF33_Clone)
    SetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF33_SetDisplacementField)
    GetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF33_GetDisplacementField)
    SetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF33_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF33_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF33_GetInterpolator)
    SetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF33_SetOutputSpacing)
    GetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF33_GetOutputSpacing)
    SetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF33_SetOutputOrigin)
    GetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF33_GetOutputOrigin)
    SetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF33_SetOutputDirection)
    GetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF33_GetOutputDirection)
    SetOutputParametersFromImage = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF33_SetOutputParametersFromImage)
    SetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF33_SetOutputStartIndex)
    GetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF33_GetOutputStartIndex)
    SetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF33_SetOutputSize)
    GetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF33_GetOutputSize)
    SetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF33_SetEdgePaddingValue)
    GetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF33_GetEdgePaddingValue)
    GenerateOutputInformation = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF33_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF33_GenerateInputRequestedRegion)
    BeforeThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF33_BeforeThreadedGenerateData)
    AfterThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF33_AfterThreadedGenerateData)
    SameDimensionCheck1 = _itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF33_SameDimensionCheck1
    
    SameDimensionCheck2 = _itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF33_SameDimensionCheck2
    
    InputHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF33_InputHasNumericTraitsCheck
    
    DisplacementFieldHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF33_DisplacementFieldHasNumericTraitsCheck
    
    __swig_destroy__ = _itkWarpImageFilterPython.delete_itkWarpImageFilterID3ID3IVF33
    cast = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF33_cast)

    def New(*args, **kargs):
        """New() -> itkWarpImageFilterID3ID3IVF33

        Create a new object of the class itkWarpImageFilterID3ID3IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWarpImageFilterID3ID3IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWarpImageFilterID3ID3IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWarpImageFilterID3ID3IVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWarpImageFilterID3ID3IVF33 in _itkWarpImageFilterPython:
_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF33_swigregister(itkWarpImageFilterID3ID3IVF33)
itkWarpImageFilterID3ID3IVF33___New_orig__ = _itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF33___New_orig__
itkWarpImageFilterID3ID3IVF33_cast = _itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF33_cast


def itkWarpImageFilterID3ID3IVF43_New():
    return itkWarpImageFilterID3ID3IVF43.New()

class itkWarpImageFilterID3ID3IVF43(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""


    Warps an image using an input displacement field.

    WarpImageFilter warps an existing image with respect to a given
    displacement field.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the input image. The vector type must support element access via
    operator [].

    The output image is produced by inverse mapping: the output pixels are
    mapped back onto the input image. This scheme avoids the creation of
    any holes and overlaps in the output image.

    Each vector in the displacement field represent the distance between a
    geometric point in the input space and a point in the output space
    such that:

    \\[ p_{in} = p_{out} + d \\]

    Typically the mapped position does not correspond to an integer pixel
    position in the input image. Interpolation via an image function is
    used to compute values at non-integer positions. The default
    interpolation typed used is the LinearInterpolateImageFunction. The
    user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    Position mapped to outside of the input image buffer are assigned a
    edge padding value.

    The LargetPossibleRegion for the output is inherited from the input
    displacement field. The output image spacing, origin and orientation
    may be set via SetOutputSpacing, SetOutputOrigin and
    SetOutputDirection. The default are respectively a vector of 1's, a
    vector of 0's and an identity matrix.

    This class is templated over the type of the input image, the type of
    the output image and the type of the displacement field.

    The input image is set via SetInput. The input displacement field is
    set via SetDisplacementField.

    This filter is implemented as a multithreaded filter.

    WARNING:  This filter assumes that the input type, output type and
    displacement field type all have the same number of dimensions.
    example{Filtering/ImageGrid/WarpAnImageUsingADeformationField,Warp An
    Image Using A Deformation Field} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF43___New_orig__)
    Clone = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF43_Clone)
    SetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF43_SetDisplacementField)
    GetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF43_GetDisplacementField)
    SetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF43_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF43_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF43_GetInterpolator)
    SetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF43_SetOutputSpacing)
    GetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF43_GetOutputSpacing)
    SetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF43_SetOutputOrigin)
    GetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF43_GetOutputOrigin)
    SetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF43_SetOutputDirection)
    GetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF43_GetOutputDirection)
    SetOutputParametersFromImage = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF43_SetOutputParametersFromImage)
    SetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF43_SetOutputStartIndex)
    GetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF43_GetOutputStartIndex)
    SetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF43_SetOutputSize)
    GetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF43_GetOutputSize)
    SetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF43_SetEdgePaddingValue)
    GetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF43_GetEdgePaddingValue)
    GenerateOutputInformation = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF43_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF43_GenerateInputRequestedRegion)
    BeforeThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF43_BeforeThreadedGenerateData)
    AfterThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF43_AfterThreadedGenerateData)
    SameDimensionCheck1 = _itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF43_SameDimensionCheck1
    
    SameDimensionCheck2 = _itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF43_SameDimensionCheck2
    
    InputHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF43_InputHasNumericTraitsCheck
    
    DisplacementFieldHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF43_DisplacementFieldHasNumericTraitsCheck
    
    __swig_destroy__ = _itkWarpImageFilterPython.delete_itkWarpImageFilterID3ID3IVF43
    cast = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF43_cast)

    def New(*args, **kargs):
        """New() -> itkWarpImageFilterID3ID3IVF43

        Create a new object of the class itkWarpImageFilterID3ID3IVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWarpImageFilterID3ID3IVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWarpImageFilterID3ID3IVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWarpImageFilterID3ID3IVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWarpImageFilterID3ID3IVF43 in _itkWarpImageFilterPython:
_itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF43_swigregister(itkWarpImageFilterID3ID3IVF43)
itkWarpImageFilterID3ID3IVF43___New_orig__ = _itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF43___New_orig__
itkWarpImageFilterID3ID3IVF43_cast = _itkWarpImageFilterPython.itkWarpImageFilterID3ID3IVF43_cast


def itkWarpImageFilterIF2IF2IVF22_New():
    return itkWarpImageFilterIF2IF2IVF22.New()

class itkWarpImageFilterIF2IF2IVF22(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""


    Warps an image using an input displacement field.

    WarpImageFilter warps an existing image with respect to a given
    displacement field.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the input image. The vector type must support element access via
    operator [].

    The output image is produced by inverse mapping: the output pixels are
    mapped back onto the input image. This scheme avoids the creation of
    any holes and overlaps in the output image.

    Each vector in the displacement field represent the distance between a
    geometric point in the input space and a point in the output space
    such that:

    \\[ p_{in} = p_{out} + d \\]

    Typically the mapped position does not correspond to an integer pixel
    position in the input image. Interpolation via an image function is
    used to compute values at non-integer positions. The default
    interpolation typed used is the LinearInterpolateImageFunction. The
    user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    Position mapped to outside of the input image buffer are assigned a
    edge padding value.

    The LargetPossibleRegion for the output is inherited from the input
    displacement field. The output image spacing, origin and orientation
    may be set via SetOutputSpacing, SetOutputOrigin and
    SetOutputDirection. The default are respectively a vector of 1's, a
    vector of 0's and an identity matrix.

    This class is templated over the type of the input image, the type of
    the output image and the type of the displacement field.

    The input image is set via SetInput. The input displacement field is
    set via SetDisplacementField.

    This filter is implemented as a multithreaded filter.

    WARNING:  This filter assumes that the input type, output type and
    displacement field type all have the same number of dimensions.
    example{Filtering/ImageGrid/WarpAnImageUsingADeformationField,Warp An
    Image Using A Deformation Field} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF22_Clone)
    SetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF22_SetDisplacementField)
    GetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF22_GetDisplacementField)
    SetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF22_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF22_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF22_GetInterpolator)
    SetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF22_SetOutputSpacing)
    GetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF22_GetOutputSpacing)
    SetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF22_SetOutputOrigin)
    GetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF22_GetOutputOrigin)
    SetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF22_SetOutputDirection)
    GetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF22_GetOutputDirection)
    SetOutputParametersFromImage = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF22_SetOutputParametersFromImage)
    SetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF22_SetOutputStartIndex)
    GetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF22_GetOutputStartIndex)
    SetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF22_SetOutputSize)
    GetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF22_GetOutputSize)
    SetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF22_SetEdgePaddingValue)
    GetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF22_GetEdgePaddingValue)
    GenerateOutputInformation = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF22_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF22_GenerateInputRequestedRegion)
    BeforeThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF22_BeforeThreadedGenerateData)
    AfterThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF22_AfterThreadedGenerateData)
    SameDimensionCheck1 = _itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF22_SameDimensionCheck1
    
    SameDimensionCheck2 = _itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF22_SameDimensionCheck2
    
    InputHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF22_InputHasNumericTraitsCheck
    
    DisplacementFieldHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF22_DisplacementFieldHasNumericTraitsCheck
    
    __swig_destroy__ = _itkWarpImageFilterPython.delete_itkWarpImageFilterIF2IF2IVF22
    cast = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF22_cast)

    def New(*args, **kargs):
        """New() -> itkWarpImageFilterIF2IF2IVF22

        Create a new object of the class itkWarpImageFilterIF2IF2IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWarpImageFilterIF2IF2IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWarpImageFilterIF2IF2IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWarpImageFilterIF2IF2IVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWarpImageFilterIF2IF2IVF22 in _itkWarpImageFilterPython:
_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF22_swigregister(itkWarpImageFilterIF2IF2IVF22)
itkWarpImageFilterIF2IF2IVF22___New_orig__ = _itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF22___New_orig__
itkWarpImageFilterIF2IF2IVF22_cast = _itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF22_cast


def itkWarpImageFilterIF2IF2IVF32_New():
    return itkWarpImageFilterIF2IF2IVF32.New()

class itkWarpImageFilterIF2IF2IVF32(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""


    Warps an image using an input displacement field.

    WarpImageFilter warps an existing image with respect to a given
    displacement field.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the input image. The vector type must support element access via
    operator [].

    The output image is produced by inverse mapping: the output pixels are
    mapped back onto the input image. This scheme avoids the creation of
    any holes and overlaps in the output image.

    Each vector in the displacement field represent the distance between a
    geometric point in the input space and a point in the output space
    such that:

    \\[ p_{in} = p_{out} + d \\]

    Typically the mapped position does not correspond to an integer pixel
    position in the input image. Interpolation via an image function is
    used to compute values at non-integer positions. The default
    interpolation typed used is the LinearInterpolateImageFunction. The
    user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    Position mapped to outside of the input image buffer are assigned a
    edge padding value.

    The LargetPossibleRegion for the output is inherited from the input
    displacement field. The output image spacing, origin and orientation
    may be set via SetOutputSpacing, SetOutputOrigin and
    SetOutputDirection. The default are respectively a vector of 1's, a
    vector of 0's and an identity matrix.

    This class is templated over the type of the input image, the type of
    the output image and the type of the displacement field.

    The input image is set via SetInput. The input displacement field is
    set via SetDisplacementField.

    This filter is implemented as a multithreaded filter.

    WARNING:  This filter assumes that the input type, output type and
    displacement field type all have the same number of dimensions.
    example{Filtering/ImageGrid/WarpAnImageUsingADeformationField,Warp An
    Image Using A Deformation Field} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF32___New_orig__)
    Clone = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF32_Clone)
    SetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF32_SetDisplacementField)
    GetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF32_GetDisplacementField)
    SetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF32_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF32_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF32_GetInterpolator)
    SetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF32_SetOutputSpacing)
    GetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF32_GetOutputSpacing)
    SetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF32_SetOutputOrigin)
    GetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF32_GetOutputOrigin)
    SetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF32_SetOutputDirection)
    GetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF32_GetOutputDirection)
    SetOutputParametersFromImage = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF32_SetOutputParametersFromImage)
    SetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF32_SetOutputStartIndex)
    GetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF32_GetOutputStartIndex)
    SetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF32_SetOutputSize)
    GetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF32_GetOutputSize)
    SetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF32_SetEdgePaddingValue)
    GetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF32_GetEdgePaddingValue)
    GenerateOutputInformation = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF32_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF32_GenerateInputRequestedRegion)
    BeforeThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF32_BeforeThreadedGenerateData)
    AfterThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF32_AfterThreadedGenerateData)
    SameDimensionCheck1 = _itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF32_SameDimensionCheck1
    
    SameDimensionCheck2 = _itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF32_SameDimensionCheck2
    
    InputHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF32_InputHasNumericTraitsCheck
    
    DisplacementFieldHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF32_DisplacementFieldHasNumericTraitsCheck
    
    __swig_destroy__ = _itkWarpImageFilterPython.delete_itkWarpImageFilterIF2IF2IVF32
    cast = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF32_cast)

    def New(*args, **kargs):
        """New() -> itkWarpImageFilterIF2IF2IVF32

        Create a new object of the class itkWarpImageFilterIF2IF2IVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWarpImageFilterIF2IF2IVF32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWarpImageFilterIF2IF2IVF32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWarpImageFilterIF2IF2IVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWarpImageFilterIF2IF2IVF32 in _itkWarpImageFilterPython:
_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF32_swigregister(itkWarpImageFilterIF2IF2IVF32)
itkWarpImageFilterIF2IF2IVF32___New_orig__ = _itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF32___New_orig__
itkWarpImageFilterIF2IF2IVF32_cast = _itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF32_cast


def itkWarpImageFilterIF2IF2IVF42_New():
    return itkWarpImageFilterIF2IF2IVF42.New()

class itkWarpImageFilterIF2IF2IVF42(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""


    Warps an image using an input displacement field.

    WarpImageFilter warps an existing image with respect to a given
    displacement field.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the input image. The vector type must support element access via
    operator [].

    The output image is produced by inverse mapping: the output pixels are
    mapped back onto the input image. This scheme avoids the creation of
    any holes and overlaps in the output image.

    Each vector in the displacement field represent the distance between a
    geometric point in the input space and a point in the output space
    such that:

    \\[ p_{in} = p_{out} + d \\]

    Typically the mapped position does not correspond to an integer pixel
    position in the input image. Interpolation via an image function is
    used to compute values at non-integer positions. The default
    interpolation typed used is the LinearInterpolateImageFunction. The
    user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    Position mapped to outside of the input image buffer are assigned a
    edge padding value.

    The LargetPossibleRegion for the output is inherited from the input
    displacement field. The output image spacing, origin and orientation
    may be set via SetOutputSpacing, SetOutputOrigin and
    SetOutputDirection. The default are respectively a vector of 1's, a
    vector of 0's and an identity matrix.

    This class is templated over the type of the input image, the type of
    the output image and the type of the displacement field.

    The input image is set via SetInput. The input displacement field is
    set via SetDisplacementField.

    This filter is implemented as a multithreaded filter.

    WARNING:  This filter assumes that the input type, output type and
    displacement field type all have the same number of dimensions.
    example{Filtering/ImageGrid/WarpAnImageUsingADeformationField,Warp An
    Image Using A Deformation Field} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF42___New_orig__)
    Clone = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF42_Clone)
    SetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF42_SetDisplacementField)
    GetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF42_GetDisplacementField)
    SetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF42_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF42_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF42_GetInterpolator)
    SetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF42_SetOutputSpacing)
    GetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF42_GetOutputSpacing)
    SetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF42_SetOutputOrigin)
    GetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF42_GetOutputOrigin)
    SetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF42_SetOutputDirection)
    GetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF42_GetOutputDirection)
    SetOutputParametersFromImage = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF42_SetOutputParametersFromImage)
    SetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF42_SetOutputStartIndex)
    GetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF42_GetOutputStartIndex)
    SetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF42_SetOutputSize)
    GetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF42_GetOutputSize)
    SetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF42_SetEdgePaddingValue)
    GetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF42_GetEdgePaddingValue)
    GenerateOutputInformation = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF42_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF42_GenerateInputRequestedRegion)
    BeforeThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF42_BeforeThreadedGenerateData)
    AfterThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF42_AfterThreadedGenerateData)
    SameDimensionCheck1 = _itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF42_SameDimensionCheck1
    
    SameDimensionCheck2 = _itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF42_SameDimensionCheck2
    
    InputHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF42_InputHasNumericTraitsCheck
    
    DisplacementFieldHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF42_DisplacementFieldHasNumericTraitsCheck
    
    __swig_destroy__ = _itkWarpImageFilterPython.delete_itkWarpImageFilterIF2IF2IVF42
    cast = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF42_cast)

    def New(*args, **kargs):
        """New() -> itkWarpImageFilterIF2IF2IVF42

        Create a new object of the class itkWarpImageFilterIF2IF2IVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWarpImageFilterIF2IF2IVF42.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWarpImageFilterIF2IF2IVF42.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWarpImageFilterIF2IF2IVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWarpImageFilterIF2IF2IVF42 in _itkWarpImageFilterPython:
_itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF42_swigregister(itkWarpImageFilterIF2IF2IVF42)
itkWarpImageFilterIF2IF2IVF42___New_orig__ = _itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF42___New_orig__
itkWarpImageFilterIF2IF2IVF42_cast = _itkWarpImageFilterPython.itkWarpImageFilterIF2IF2IVF42_cast


def itkWarpImageFilterIF3IF3IVF23_New():
    return itkWarpImageFilterIF3IF3IVF23.New()

class itkWarpImageFilterIF3IF3IVF23(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""


    Warps an image using an input displacement field.

    WarpImageFilter warps an existing image with respect to a given
    displacement field.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the input image. The vector type must support element access via
    operator [].

    The output image is produced by inverse mapping: the output pixels are
    mapped back onto the input image. This scheme avoids the creation of
    any holes and overlaps in the output image.

    Each vector in the displacement field represent the distance between a
    geometric point in the input space and a point in the output space
    such that:

    \\[ p_{in} = p_{out} + d \\]

    Typically the mapped position does not correspond to an integer pixel
    position in the input image. Interpolation via an image function is
    used to compute values at non-integer positions. The default
    interpolation typed used is the LinearInterpolateImageFunction. The
    user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    Position mapped to outside of the input image buffer are assigned a
    edge padding value.

    The LargetPossibleRegion for the output is inherited from the input
    displacement field. The output image spacing, origin and orientation
    may be set via SetOutputSpacing, SetOutputOrigin and
    SetOutputDirection. The default are respectively a vector of 1's, a
    vector of 0's and an identity matrix.

    This class is templated over the type of the input image, the type of
    the output image and the type of the displacement field.

    The input image is set via SetInput. The input displacement field is
    set via SetDisplacementField.

    This filter is implemented as a multithreaded filter.

    WARNING:  This filter assumes that the input type, output type and
    displacement field type all have the same number of dimensions.
    example{Filtering/ImageGrid/WarpAnImageUsingADeformationField,Warp An
    Image Using A Deformation Field} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF23___New_orig__)
    Clone = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF23_Clone)
    SetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF23_SetDisplacementField)
    GetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF23_GetDisplacementField)
    SetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF23_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF23_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF23_GetInterpolator)
    SetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF23_SetOutputSpacing)
    GetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF23_GetOutputSpacing)
    SetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF23_SetOutputOrigin)
    GetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF23_GetOutputOrigin)
    SetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF23_SetOutputDirection)
    GetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF23_GetOutputDirection)
    SetOutputParametersFromImage = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF23_SetOutputParametersFromImage)
    SetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF23_SetOutputStartIndex)
    GetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF23_GetOutputStartIndex)
    SetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF23_SetOutputSize)
    GetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF23_GetOutputSize)
    SetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF23_SetEdgePaddingValue)
    GetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF23_GetEdgePaddingValue)
    GenerateOutputInformation = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF23_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF23_GenerateInputRequestedRegion)
    BeforeThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF23_BeforeThreadedGenerateData)
    AfterThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF23_AfterThreadedGenerateData)
    SameDimensionCheck1 = _itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF23_SameDimensionCheck1
    
    SameDimensionCheck2 = _itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF23_SameDimensionCheck2
    
    InputHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF23_InputHasNumericTraitsCheck
    
    DisplacementFieldHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF23_DisplacementFieldHasNumericTraitsCheck
    
    __swig_destroy__ = _itkWarpImageFilterPython.delete_itkWarpImageFilterIF3IF3IVF23
    cast = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF23_cast)

    def New(*args, **kargs):
        """New() -> itkWarpImageFilterIF3IF3IVF23

        Create a new object of the class itkWarpImageFilterIF3IF3IVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWarpImageFilterIF3IF3IVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWarpImageFilterIF3IF3IVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWarpImageFilterIF3IF3IVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWarpImageFilterIF3IF3IVF23 in _itkWarpImageFilterPython:
_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF23_swigregister(itkWarpImageFilterIF3IF3IVF23)
itkWarpImageFilterIF3IF3IVF23___New_orig__ = _itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF23___New_orig__
itkWarpImageFilterIF3IF3IVF23_cast = _itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF23_cast


def itkWarpImageFilterIF3IF3IVF33_New():
    return itkWarpImageFilterIF3IF3IVF33.New()

class itkWarpImageFilterIF3IF3IVF33(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""


    Warps an image using an input displacement field.

    WarpImageFilter warps an existing image with respect to a given
    displacement field.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the input image. The vector type must support element access via
    operator [].

    The output image is produced by inverse mapping: the output pixels are
    mapped back onto the input image. This scheme avoids the creation of
    any holes and overlaps in the output image.

    Each vector in the displacement field represent the distance between a
    geometric point in the input space and a point in the output space
    such that:

    \\[ p_{in} = p_{out} + d \\]

    Typically the mapped position does not correspond to an integer pixel
    position in the input image. Interpolation via an image function is
    used to compute values at non-integer positions. The default
    interpolation typed used is the LinearInterpolateImageFunction. The
    user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    Position mapped to outside of the input image buffer are assigned a
    edge padding value.

    The LargetPossibleRegion for the output is inherited from the input
    displacement field. The output image spacing, origin and orientation
    may be set via SetOutputSpacing, SetOutputOrigin and
    SetOutputDirection. The default are respectively a vector of 1's, a
    vector of 0's and an identity matrix.

    This class is templated over the type of the input image, the type of
    the output image and the type of the displacement field.

    The input image is set via SetInput. The input displacement field is
    set via SetDisplacementField.

    This filter is implemented as a multithreaded filter.

    WARNING:  This filter assumes that the input type, output type and
    displacement field type all have the same number of dimensions.
    example{Filtering/ImageGrid/WarpAnImageUsingADeformationField,Warp An
    Image Using A Deformation Field} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF33_Clone)
    SetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF33_SetDisplacementField)
    GetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF33_GetDisplacementField)
    SetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF33_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF33_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF33_GetInterpolator)
    SetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF33_SetOutputSpacing)
    GetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF33_GetOutputSpacing)
    SetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF33_SetOutputOrigin)
    GetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF33_GetOutputOrigin)
    SetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF33_SetOutputDirection)
    GetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF33_GetOutputDirection)
    SetOutputParametersFromImage = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF33_SetOutputParametersFromImage)
    SetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF33_SetOutputStartIndex)
    GetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF33_GetOutputStartIndex)
    SetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF33_SetOutputSize)
    GetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF33_GetOutputSize)
    SetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF33_SetEdgePaddingValue)
    GetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF33_GetEdgePaddingValue)
    GenerateOutputInformation = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF33_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF33_GenerateInputRequestedRegion)
    BeforeThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF33_BeforeThreadedGenerateData)
    AfterThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF33_AfterThreadedGenerateData)
    SameDimensionCheck1 = _itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF33_SameDimensionCheck1
    
    SameDimensionCheck2 = _itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF33_SameDimensionCheck2
    
    InputHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF33_InputHasNumericTraitsCheck
    
    DisplacementFieldHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF33_DisplacementFieldHasNumericTraitsCheck
    
    __swig_destroy__ = _itkWarpImageFilterPython.delete_itkWarpImageFilterIF3IF3IVF33
    cast = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF33_cast)

    def New(*args, **kargs):
        """New() -> itkWarpImageFilterIF3IF3IVF33

        Create a new object of the class itkWarpImageFilterIF3IF3IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWarpImageFilterIF3IF3IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWarpImageFilterIF3IF3IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWarpImageFilterIF3IF3IVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWarpImageFilterIF3IF3IVF33 in _itkWarpImageFilterPython:
_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF33_swigregister(itkWarpImageFilterIF3IF3IVF33)
itkWarpImageFilterIF3IF3IVF33___New_orig__ = _itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF33___New_orig__
itkWarpImageFilterIF3IF3IVF33_cast = _itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF33_cast


def itkWarpImageFilterIF3IF3IVF43_New():
    return itkWarpImageFilterIF3IF3IVF43.New()

class itkWarpImageFilterIF3IF3IVF43(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""


    Warps an image using an input displacement field.

    WarpImageFilter warps an existing image with respect to a given
    displacement field.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the input image. The vector type must support element access via
    operator [].

    The output image is produced by inverse mapping: the output pixels are
    mapped back onto the input image. This scheme avoids the creation of
    any holes and overlaps in the output image.

    Each vector in the displacement field represent the distance between a
    geometric point in the input space and a point in the output space
    such that:

    \\[ p_{in} = p_{out} + d \\]

    Typically the mapped position does not correspond to an integer pixel
    position in the input image. Interpolation via an image function is
    used to compute values at non-integer positions. The default
    interpolation typed used is the LinearInterpolateImageFunction. The
    user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    Position mapped to outside of the input image buffer are assigned a
    edge padding value.

    The LargetPossibleRegion for the output is inherited from the input
    displacement field. The output image spacing, origin and orientation
    may be set via SetOutputSpacing, SetOutputOrigin and
    SetOutputDirection. The default are respectively a vector of 1's, a
    vector of 0's and an identity matrix.

    This class is templated over the type of the input image, the type of
    the output image and the type of the displacement field.

    The input image is set via SetInput. The input displacement field is
    set via SetDisplacementField.

    This filter is implemented as a multithreaded filter.

    WARNING:  This filter assumes that the input type, output type and
    displacement field type all have the same number of dimensions.
    example{Filtering/ImageGrid/WarpAnImageUsingADeformationField,Warp An
    Image Using A Deformation Field} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF43___New_orig__)
    Clone = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF43_Clone)
    SetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF43_SetDisplacementField)
    GetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF43_GetDisplacementField)
    SetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF43_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF43_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF43_GetInterpolator)
    SetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF43_SetOutputSpacing)
    GetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF43_GetOutputSpacing)
    SetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF43_SetOutputOrigin)
    GetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF43_GetOutputOrigin)
    SetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF43_SetOutputDirection)
    GetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF43_GetOutputDirection)
    SetOutputParametersFromImage = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF43_SetOutputParametersFromImage)
    SetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF43_SetOutputStartIndex)
    GetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF43_GetOutputStartIndex)
    SetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF43_SetOutputSize)
    GetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF43_GetOutputSize)
    SetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF43_SetEdgePaddingValue)
    GetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF43_GetEdgePaddingValue)
    GenerateOutputInformation = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF43_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF43_GenerateInputRequestedRegion)
    BeforeThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF43_BeforeThreadedGenerateData)
    AfterThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF43_AfterThreadedGenerateData)
    SameDimensionCheck1 = _itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF43_SameDimensionCheck1
    
    SameDimensionCheck2 = _itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF43_SameDimensionCheck2
    
    InputHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF43_InputHasNumericTraitsCheck
    
    DisplacementFieldHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF43_DisplacementFieldHasNumericTraitsCheck
    
    __swig_destroy__ = _itkWarpImageFilterPython.delete_itkWarpImageFilterIF3IF3IVF43
    cast = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF43_cast)

    def New(*args, **kargs):
        """New() -> itkWarpImageFilterIF3IF3IVF43

        Create a new object of the class itkWarpImageFilterIF3IF3IVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWarpImageFilterIF3IF3IVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWarpImageFilterIF3IF3IVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWarpImageFilterIF3IF3IVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWarpImageFilterIF3IF3IVF43 in _itkWarpImageFilterPython:
_itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF43_swigregister(itkWarpImageFilterIF3IF3IVF43)
itkWarpImageFilterIF3IF3IVF43___New_orig__ = _itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF43___New_orig__
itkWarpImageFilterIF3IF3IVF43_cast = _itkWarpImageFilterPython.itkWarpImageFilterIF3IF3IVF43_cast


def itkWarpImageFilterISS2ISS2IVF22_New():
    return itkWarpImageFilterISS2ISS2IVF22.New()

class itkWarpImageFilterISS2ISS2IVF22(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""


    Warps an image using an input displacement field.

    WarpImageFilter warps an existing image with respect to a given
    displacement field.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the input image. The vector type must support element access via
    operator [].

    The output image is produced by inverse mapping: the output pixels are
    mapped back onto the input image. This scheme avoids the creation of
    any holes and overlaps in the output image.

    Each vector in the displacement field represent the distance between a
    geometric point in the input space and a point in the output space
    such that:

    \\[ p_{in} = p_{out} + d \\]

    Typically the mapped position does not correspond to an integer pixel
    position in the input image. Interpolation via an image function is
    used to compute values at non-integer positions. The default
    interpolation typed used is the LinearInterpolateImageFunction. The
    user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    Position mapped to outside of the input image buffer are assigned a
    edge padding value.

    The LargetPossibleRegion for the output is inherited from the input
    displacement field. The output image spacing, origin and orientation
    may be set via SetOutputSpacing, SetOutputOrigin and
    SetOutputDirection. The default are respectively a vector of 1's, a
    vector of 0's and an identity matrix.

    This class is templated over the type of the input image, the type of
    the output image and the type of the displacement field.

    The input image is set via SetInput. The input displacement field is
    set via SetDisplacementField.

    This filter is implemented as a multithreaded filter.

    WARNING:  This filter assumes that the input type, output type and
    displacement field type all have the same number of dimensions.
    example{Filtering/ImageGrid/WarpAnImageUsingADeformationField,Warp An
    Image Using A Deformation Field} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF22_Clone)
    SetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF22_SetDisplacementField)
    GetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF22_GetDisplacementField)
    SetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF22_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF22_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF22_GetInterpolator)
    SetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF22_SetOutputSpacing)
    GetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF22_GetOutputSpacing)
    SetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF22_SetOutputOrigin)
    GetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF22_GetOutputOrigin)
    SetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF22_SetOutputDirection)
    GetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF22_GetOutputDirection)
    SetOutputParametersFromImage = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF22_SetOutputParametersFromImage)
    SetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF22_SetOutputStartIndex)
    GetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF22_GetOutputStartIndex)
    SetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF22_SetOutputSize)
    GetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF22_GetOutputSize)
    SetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF22_SetEdgePaddingValue)
    GetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF22_GetEdgePaddingValue)
    GenerateOutputInformation = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF22_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF22_GenerateInputRequestedRegion)
    BeforeThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF22_BeforeThreadedGenerateData)
    AfterThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF22_AfterThreadedGenerateData)
    SameDimensionCheck1 = _itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF22_SameDimensionCheck1
    
    SameDimensionCheck2 = _itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF22_SameDimensionCheck2
    
    InputHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF22_InputHasNumericTraitsCheck
    
    DisplacementFieldHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF22_DisplacementFieldHasNumericTraitsCheck
    
    __swig_destroy__ = _itkWarpImageFilterPython.delete_itkWarpImageFilterISS2ISS2IVF22
    cast = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF22_cast)

    def New(*args, **kargs):
        """New() -> itkWarpImageFilterISS2ISS2IVF22

        Create a new object of the class itkWarpImageFilterISS2ISS2IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWarpImageFilterISS2ISS2IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWarpImageFilterISS2ISS2IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWarpImageFilterISS2ISS2IVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWarpImageFilterISS2ISS2IVF22 in _itkWarpImageFilterPython:
_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF22_swigregister(itkWarpImageFilterISS2ISS2IVF22)
itkWarpImageFilterISS2ISS2IVF22___New_orig__ = _itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF22___New_orig__
itkWarpImageFilterISS2ISS2IVF22_cast = _itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF22_cast


def itkWarpImageFilterISS2ISS2IVF32_New():
    return itkWarpImageFilterISS2ISS2IVF32.New()

class itkWarpImageFilterISS2ISS2IVF32(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""


    Warps an image using an input displacement field.

    WarpImageFilter warps an existing image with respect to a given
    displacement field.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the input image. The vector type must support element access via
    operator [].

    The output image is produced by inverse mapping: the output pixels are
    mapped back onto the input image. This scheme avoids the creation of
    any holes and overlaps in the output image.

    Each vector in the displacement field represent the distance between a
    geometric point in the input space and a point in the output space
    such that:

    \\[ p_{in} = p_{out} + d \\]

    Typically the mapped position does not correspond to an integer pixel
    position in the input image. Interpolation via an image function is
    used to compute values at non-integer positions. The default
    interpolation typed used is the LinearInterpolateImageFunction. The
    user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    Position mapped to outside of the input image buffer are assigned a
    edge padding value.

    The LargetPossibleRegion for the output is inherited from the input
    displacement field. The output image spacing, origin and orientation
    may be set via SetOutputSpacing, SetOutputOrigin and
    SetOutputDirection. The default are respectively a vector of 1's, a
    vector of 0's and an identity matrix.

    This class is templated over the type of the input image, the type of
    the output image and the type of the displacement field.

    The input image is set via SetInput. The input displacement field is
    set via SetDisplacementField.

    This filter is implemented as a multithreaded filter.

    WARNING:  This filter assumes that the input type, output type and
    displacement field type all have the same number of dimensions.
    example{Filtering/ImageGrid/WarpAnImageUsingADeformationField,Warp An
    Image Using A Deformation Field} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF32___New_orig__)
    Clone = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF32_Clone)
    SetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF32_SetDisplacementField)
    GetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF32_GetDisplacementField)
    SetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF32_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF32_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF32_GetInterpolator)
    SetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF32_SetOutputSpacing)
    GetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF32_GetOutputSpacing)
    SetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF32_SetOutputOrigin)
    GetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF32_GetOutputOrigin)
    SetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF32_SetOutputDirection)
    GetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF32_GetOutputDirection)
    SetOutputParametersFromImage = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF32_SetOutputParametersFromImage)
    SetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF32_SetOutputStartIndex)
    GetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF32_GetOutputStartIndex)
    SetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF32_SetOutputSize)
    GetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF32_GetOutputSize)
    SetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF32_SetEdgePaddingValue)
    GetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF32_GetEdgePaddingValue)
    GenerateOutputInformation = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF32_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF32_GenerateInputRequestedRegion)
    BeforeThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF32_BeforeThreadedGenerateData)
    AfterThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF32_AfterThreadedGenerateData)
    SameDimensionCheck1 = _itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF32_SameDimensionCheck1
    
    SameDimensionCheck2 = _itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF32_SameDimensionCheck2
    
    InputHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF32_InputHasNumericTraitsCheck
    
    DisplacementFieldHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF32_DisplacementFieldHasNumericTraitsCheck
    
    __swig_destroy__ = _itkWarpImageFilterPython.delete_itkWarpImageFilterISS2ISS2IVF32
    cast = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF32_cast)

    def New(*args, **kargs):
        """New() -> itkWarpImageFilterISS2ISS2IVF32

        Create a new object of the class itkWarpImageFilterISS2ISS2IVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWarpImageFilterISS2ISS2IVF32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWarpImageFilterISS2ISS2IVF32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWarpImageFilterISS2ISS2IVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWarpImageFilterISS2ISS2IVF32 in _itkWarpImageFilterPython:
_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF32_swigregister(itkWarpImageFilterISS2ISS2IVF32)
itkWarpImageFilterISS2ISS2IVF32___New_orig__ = _itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF32___New_orig__
itkWarpImageFilterISS2ISS2IVF32_cast = _itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF32_cast


def itkWarpImageFilterISS2ISS2IVF42_New():
    return itkWarpImageFilterISS2ISS2IVF42.New()

class itkWarpImageFilterISS2ISS2IVF42(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""


    Warps an image using an input displacement field.

    WarpImageFilter warps an existing image with respect to a given
    displacement field.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the input image. The vector type must support element access via
    operator [].

    The output image is produced by inverse mapping: the output pixels are
    mapped back onto the input image. This scheme avoids the creation of
    any holes and overlaps in the output image.

    Each vector in the displacement field represent the distance between a
    geometric point in the input space and a point in the output space
    such that:

    \\[ p_{in} = p_{out} + d \\]

    Typically the mapped position does not correspond to an integer pixel
    position in the input image. Interpolation via an image function is
    used to compute values at non-integer positions. The default
    interpolation typed used is the LinearInterpolateImageFunction. The
    user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    Position mapped to outside of the input image buffer are assigned a
    edge padding value.

    The LargetPossibleRegion for the output is inherited from the input
    displacement field. The output image spacing, origin and orientation
    may be set via SetOutputSpacing, SetOutputOrigin and
    SetOutputDirection. The default are respectively a vector of 1's, a
    vector of 0's and an identity matrix.

    This class is templated over the type of the input image, the type of
    the output image and the type of the displacement field.

    The input image is set via SetInput. The input displacement field is
    set via SetDisplacementField.

    This filter is implemented as a multithreaded filter.

    WARNING:  This filter assumes that the input type, output type and
    displacement field type all have the same number of dimensions.
    example{Filtering/ImageGrid/WarpAnImageUsingADeformationField,Warp An
    Image Using A Deformation Field} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF42___New_orig__)
    Clone = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF42_Clone)
    SetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF42_SetDisplacementField)
    GetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF42_GetDisplacementField)
    SetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF42_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF42_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF42_GetInterpolator)
    SetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF42_SetOutputSpacing)
    GetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF42_GetOutputSpacing)
    SetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF42_SetOutputOrigin)
    GetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF42_GetOutputOrigin)
    SetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF42_SetOutputDirection)
    GetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF42_GetOutputDirection)
    SetOutputParametersFromImage = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF42_SetOutputParametersFromImage)
    SetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF42_SetOutputStartIndex)
    GetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF42_GetOutputStartIndex)
    SetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF42_SetOutputSize)
    GetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF42_GetOutputSize)
    SetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF42_SetEdgePaddingValue)
    GetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF42_GetEdgePaddingValue)
    GenerateOutputInformation = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF42_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF42_GenerateInputRequestedRegion)
    BeforeThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF42_BeforeThreadedGenerateData)
    AfterThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF42_AfterThreadedGenerateData)
    SameDimensionCheck1 = _itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF42_SameDimensionCheck1
    
    SameDimensionCheck2 = _itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF42_SameDimensionCheck2
    
    InputHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF42_InputHasNumericTraitsCheck
    
    DisplacementFieldHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF42_DisplacementFieldHasNumericTraitsCheck
    
    __swig_destroy__ = _itkWarpImageFilterPython.delete_itkWarpImageFilterISS2ISS2IVF42
    cast = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF42_cast)

    def New(*args, **kargs):
        """New() -> itkWarpImageFilterISS2ISS2IVF42

        Create a new object of the class itkWarpImageFilterISS2ISS2IVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWarpImageFilterISS2ISS2IVF42.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWarpImageFilterISS2ISS2IVF42.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWarpImageFilterISS2ISS2IVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWarpImageFilterISS2ISS2IVF42 in _itkWarpImageFilterPython:
_itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF42_swigregister(itkWarpImageFilterISS2ISS2IVF42)
itkWarpImageFilterISS2ISS2IVF42___New_orig__ = _itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF42___New_orig__
itkWarpImageFilterISS2ISS2IVF42_cast = _itkWarpImageFilterPython.itkWarpImageFilterISS2ISS2IVF42_cast


def itkWarpImageFilterISS3ISS3IVF23_New():
    return itkWarpImageFilterISS3ISS3IVF23.New()

class itkWarpImageFilterISS3ISS3IVF23(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""


    Warps an image using an input displacement field.

    WarpImageFilter warps an existing image with respect to a given
    displacement field.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the input image. The vector type must support element access via
    operator [].

    The output image is produced by inverse mapping: the output pixels are
    mapped back onto the input image. This scheme avoids the creation of
    any holes and overlaps in the output image.

    Each vector in the displacement field represent the distance between a
    geometric point in the input space and a point in the output space
    such that:

    \\[ p_{in} = p_{out} + d \\]

    Typically the mapped position does not correspond to an integer pixel
    position in the input image. Interpolation via an image function is
    used to compute values at non-integer positions. The default
    interpolation typed used is the LinearInterpolateImageFunction. The
    user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    Position mapped to outside of the input image buffer are assigned a
    edge padding value.

    The LargetPossibleRegion for the output is inherited from the input
    displacement field. The output image spacing, origin and orientation
    may be set via SetOutputSpacing, SetOutputOrigin and
    SetOutputDirection. The default are respectively a vector of 1's, a
    vector of 0's and an identity matrix.

    This class is templated over the type of the input image, the type of
    the output image and the type of the displacement field.

    The input image is set via SetInput. The input displacement field is
    set via SetDisplacementField.

    This filter is implemented as a multithreaded filter.

    WARNING:  This filter assumes that the input type, output type and
    displacement field type all have the same number of dimensions.
    example{Filtering/ImageGrid/WarpAnImageUsingADeformationField,Warp An
    Image Using A Deformation Field} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF23___New_orig__)
    Clone = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF23_Clone)
    SetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF23_SetDisplacementField)
    GetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF23_GetDisplacementField)
    SetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF23_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF23_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF23_GetInterpolator)
    SetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF23_SetOutputSpacing)
    GetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF23_GetOutputSpacing)
    SetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF23_SetOutputOrigin)
    GetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF23_GetOutputOrigin)
    SetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF23_SetOutputDirection)
    GetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF23_GetOutputDirection)
    SetOutputParametersFromImage = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF23_SetOutputParametersFromImage)
    SetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF23_SetOutputStartIndex)
    GetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF23_GetOutputStartIndex)
    SetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF23_SetOutputSize)
    GetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF23_GetOutputSize)
    SetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF23_SetEdgePaddingValue)
    GetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF23_GetEdgePaddingValue)
    GenerateOutputInformation = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF23_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF23_GenerateInputRequestedRegion)
    BeforeThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF23_BeforeThreadedGenerateData)
    AfterThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF23_AfterThreadedGenerateData)
    SameDimensionCheck1 = _itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF23_SameDimensionCheck1
    
    SameDimensionCheck2 = _itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF23_SameDimensionCheck2
    
    InputHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF23_InputHasNumericTraitsCheck
    
    DisplacementFieldHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF23_DisplacementFieldHasNumericTraitsCheck
    
    __swig_destroy__ = _itkWarpImageFilterPython.delete_itkWarpImageFilterISS3ISS3IVF23
    cast = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF23_cast)

    def New(*args, **kargs):
        """New() -> itkWarpImageFilterISS3ISS3IVF23

        Create a new object of the class itkWarpImageFilterISS3ISS3IVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWarpImageFilterISS3ISS3IVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWarpImageFilterISS3ISS3IVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWarpImageFilterISS3ISS3IVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWarpImageFilterISS3ISS3IVF23 in _itkWarpImageFilterPython:
_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF23_swigregister(itkWarpImageFilterISS3ISS3IVF23)
itkWarpImageFilterISS3ISS3IVF23___New_orig__ = _itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF23___New_orig__
itkWarpImageFilterISS3ISS3IVF23_cast = _itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF23_cast


def itkWarpImageFilterISS3ISS3IVF33_New():
    return itkWarpImageFilterISS3ISS3IVF33.New()

class itkWarpImageFilterISS3ISS3IVF33(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""


    Warps an image using an input displacement field.

    WarpImageFilter warps an existing image with respect to a given
    displacement field.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the input image. The vector type must support element access via
    operator [].

    The output image is produced by inverse mapping: the output pixels are
    mapped back onto the input image. This scheme avoids the creation of
    any holes and overlaps in the output image.

    Each vector in the displacement field represent the distance between a
    geometric point in the input space and a point in the output space
    such that:

    \\[ p_{in} = p_{out} + d \\]

    Typically the mapped position does not correspond to an integer pixel
    position in the input image. Interpolation via an image function is
    used to compute values at non-integer positions. The default
    interpolation typed used is the LinearInterpolateImageFunction. The
    user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    Position mapped to outside of the input image buffer are assigned a
    edge padding value.

    The LargetPossibleRegion for the output is inherited from the input
    displacement field. The output image spacing, origin and orientation
    may be set via SetOutputSpacing, SetOutputOrigin and
    SetOutputDirection. The default are respectively a vector of 1's, a
    vector of 0's and an identity matrix.

    This class is templated over the type of the input image, the type of
    the output image and the type of the displacement field.

    The input image is set via SetInput. The input displacement field is
    set via SetDisplacementField.

    This filter is implemented as a multithreaded filter.

    WARNING:  This filter assumes that the input type, output type and
    displacement field type all have the same number of dimensions.
    example{Filtering/ImageGrid/WarpAnImageUsingADeformationField,Warp An
    Image Using A Deformation Field} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF33_Clone)
    SetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF33_SetDisplacementField)
    GetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF33_GetDisplacementField)
    SetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF33_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF33_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF33_GetInterpolator)
    SetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF33_SetOutputSpacing)
    GetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF33_GetOutputSpacing)
    SetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF33_SetOutputOrigin)
    GetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF33_GetOutputOrigin)
    SetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF33_SetOutputDirection)
    GetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF33_GetOutputDirection)
    SetOutputParametersFromImage = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF33_SetOutputParametersFromImage)
    SetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF33_SetOutputStartIndex)
    GetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF33_GetOutputStartIndex)
    SetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF33_SetOutputSize)
    GetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF33_GetOutputSize)
    SetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF33_SetEdgePaddingValue)
    GetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF33_GetEdgePaddingValue)
    GenerateOutputInformation = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF33_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF33_GenerateInputRequestedRegion)
    BeforeThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF33_BeforeThreadedGenerateData)
    AfterThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF33_AfterThreadedGenerateData)
    SameDimensionCheck1 = _itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF33_SameDimensionCheck1
    
    SameDimensionCheck2 = _itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF33_SameDimensionCheck2
    
    InputHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF33_InputHasNumericTraitsCheck
    
    DisplacementFieldHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF33_DisplacementFieldHasNumericTraitsCheck
    
    __swig_destroy__ = _itkWarpImageFilterPython.delete_itkWarpImageFilterISS3ISS3IVF33
    cast = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF33_cast)

    def New(*args, **kargs):
        """New() -> itkWarpImageFilterISS3ISS3IVF33

        Create a new object of the class itkWarpImageFilterISS3ISS3IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWarpImageFilterISS3ISS3IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWarpImageFilterISS3ISS3IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWarpImageFilterISS3ISS3IVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWarpImageFilterISS3ISS3IVF33 in _itkWarpImageFilterPython:
_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF33_swigregister(itkWarpImageFilterISS3ISS3IVF33)
itkWarpImageFilterISS3ISS3IVF33___New_orig__ = _itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF33___New_orig__
itkWarpImageFilterISS3ISS3IVF33_cast = _itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF33_cast


def itkWarpImageFilterISS3ISS3IVF43_New():
    return itkWarpImageFilterISS3ISS3IVF43.New()

class itkWarpImageFilterISS3ISS3IVF43(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""


    Warps an image using an input displacement field.

    WarpImageFilter warps an existing image with respect to a given
    displacement field.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the input image. The vector type must support element access via
    operator [].

    The output image is produced by inverse mapping: the output pixels are
    mapped back onto the input image. This scheme avoids the creation of
    any holes and overlaps in the output image.

    Each vector in the displacement field represent the distance between a
    geometric point in the input space and a point in the output space
    such that:

    \\[ p_{in} = p_{out} + d \\]

    Typically the mapped position does not correspond to an integer pixel
    position in the input image. Interpolation via an image function is
    used to compute values at non-integer positions. The default
    interpolation typed used is the LinearInterpolateImageFunction. The
    user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    Position mapped to outside of the input image buffer are assigned a
    edge padding value.

    The LargetPossibleRegion for the output is inherited from the input
    displacement field. The output image spacing, origin and orientation
    may be set via SetOutputSpacing, SetOutputOrigin and
    SetOutputDirection. The default are respectively a vector of 1's, a
    vector of 0's and an identity matrix.

    This class is templated over the type of the input image, the type of
    the output image and the type of the displacement field.

    The input image is set via SetInput. The input displacement field is
    set via SetDisplacementField.

    This filter is implemented as a multithreaded filter.

    WARNING:  This filter assumes that the input type, output type and
    displacement field type all have the same number of dimensions.
    example{Filtering/ImageGrid/WarpAnImageUsingADeformationField,Warp An
    Image Using A Deformation Field} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF43___New_orig__)
    Clone = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF43_Clone)
    SetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF43_SetDisplacementField)
    GetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF43_GetDisplacementField)
    SetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF43_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF43_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF43_GetInterpolator)
    SetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF43_SetOutputSpacing)
    GetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF43_GetOutputSpacing)
    SetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF43_SetOutputOrigin)
    GetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF43_GetOutputOrigin)
    SetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF43_SetOutputDirection)
    GetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF43_GetOutputDirection)
    SetOutputParametersFromImage = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF43_SetOutputParametersFromImage)
    SetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF43_SetOutputStartIndex)
    GetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF43_GetOutputStartIndex)
    SetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF43_SetOutputSize)
    GetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF43_GetOutputSize)
    SetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF43_SetEdgePaddingValue)
    GetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF43_GetEdgePaddingValue)
    GenerateOutputInformation = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF43_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF43_GenerateInputRequestedRegion)
    BeforeThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF43_BeforeThreadedGenerateData)
    AfterThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF43_AfterThreadedGenerateData)
    SameDimensionCheck1 = _itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF43_SameDimensionCheck1
    
    SameDimensionCheck2 = _itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF43_SameDimensionCheck2
    
    InputHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF43_InputHasNumericTraitsCheck
    
    DisplacementFieldHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF43_DisplacementFieldHasNumericTraitsCheck
    
    __swig_destroy__ = _itkWarpImageFilterPython.delete_itkWarpImageFilterISS3ISS3IVF43
    cast = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF43_cast)

    def New(*args, **kargs):
        """New() -> itkWarpImageFilterISS3ISS3IVF43

        Create a new object of the class itkWarpImageFilterISS3ISS3IVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWarpImageFilterISS3ISS3IVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWarpImageFilterISS3ISS3IVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWarpImageFilterISS3ISS3IVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWarpImageFilterISS3ISS3IVF43 in _itkWarpImageFilterPython:
_itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF43_swigregister(itkWarpImageFilterISS3ISS3IVF43)
itkWarpImageFilterISS3ISS3IVF43___New_orig__ = _itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF43___New_orig__
itkWarpImageFilterISS3ISS3IVF43_cast = _itkWarpImageFilterPython.itkWarpImageFilterISS3ISS3IVF43_cast


def itkWarpImageFilterIUC2IUC2IVF22_New():
    return itkWarpImageFilterIUC2IUC2IVF22.New()

class itkWarpImageFilterIUC2IUC2IVF22(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""


    Warps an image using an input displacement field.

    WarpImageFilter warps an existing image with respect to a given
    displacement field.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the input image. The vector type must support element access via
    operator [].

    The output image is produced by inverse mapping: the output pixels are
    mapped back onto the input image. This scheme avoids the creation of
    any holes and overlaps in the output image.

    Each vector in the displacement field represent the distance between a
    geometric point in the input space and a point in the output space
    such that:

    \\[ p_{in} = p_{out} + d \\]

    Typically the mapped position does not correspond to an integer pixel
    position in the input image. Interpolation via an image function is
    used to compute values at non-integer positions. The default
    interpolation typed used is the LinearInterpolateImageFunction. The
    user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    Position mapped to outside of the input image buffer are assigned a
    edge padding value.

    The LargetPossibleRegion for the output is inherited from the input
    displacement field. The output image spacing, origin and orientation
    may be set via SetOutputSpacing, SetOutputOrigin and
    SetOutputDirection. The default are respectively a vector of 1's, a
    vector of 0's and an identity matrix.

    This class is templated over the type of the input image, the type of
    the output image and the type of the displacement field.

    The input image is set via SetInput. The input displacement field is
    set via SetDisplacementField.

    This filter is implemented as a multithreaded filter.

    WARNING:  This filter assumes that the input type, output type and
    displacement field type all have the same number of dimensions.
    example{Filtering/ImageGrid/WarpAnImageUsingADeformationField,Warp An
    Image Using A Deformation Field} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF22_Clone)
    SetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF22_SetDisplacementField)
    GetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF22_GetDisplacementField)
    SetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF22_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF22_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF22_GetInterpolator)
    SetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF22_SetOutputSpacing)
    GetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF22_GetOutputSpacing)
    SetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF22_SetOutputOrigin)
    GetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF22_GetOutputOrigin)
    SetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF22_SetOutputDirection)
    GetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF22_GetOutputDirection)
    SetOutputParametersFromImage = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF22_SetOutputParametersFromImage)
    SetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF22_SetOutputStartIndex)
    GetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF22_GetOutputStartIndex)
    SetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF22_SetOutputSize)
    GetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF22_GetOutputSize)
    SetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF22_SetEdgePaddingValue)
    GetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF22_GetEdgePaddingValue)
    GenerateOutputInformation = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF22_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF22_GenerateInputRequestedRegion)
    BeforeThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF22_BeforeThreadedGenerateData)
    AfterThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF22_AfterThreadedGenerateData)
    SameDimensionCheck1 = _itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF22_SameDimensionCheck1
    
    SameDimensionCheck2 = _itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF22_SameDimensionCheck2
    
    InputHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF22_InputHasNumericTraitsCheck
    
    DisplacementFieldHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF22_DisplacementFieldHasNumericTraitsCheck
    
    __swig_destroy__ = _itkWarpImageFilterPython.delete_itkWarpImageFilterIUC2IUC2IVF22
    cast = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF22_cast)

    def New(*args, **kargs):
        """New() -> itkWarpImageFilterIUC2IUC2IVF22

        Create a new object of the class itkWarpImageFilterIUC2IUC2IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWarpImageFilterIUC2IUC2IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWarpImageFilterIUC2IUC2IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWarpImageFilterIUC2IUC2IVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWarpImageFilterIUC2IUC2IVF22 in _itkWarpImageFilterPython:
_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF22_swigregister(itkWarpImageFilterIUC2IUC2IVF22)
itkWarpImageFilterIUC2IUC2IVF22___New_orig__ = _itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF22___New_orig__
itkWarpImageFilterIUC2IUC2IVF22_cast = _itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF22_cast


def itkWarpImageFilterIUC2IUC2IVF32_New():
    return itkWarpImageFilterIUC2IUC2IVF32.New()

class itkWarpImageFilterIUC2IUC2IVF32(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""


    Warps an image using an input displacement field.

    WarpImageFilter warps an existing image with respect to a given
    displacement field.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the input image. The vector type must support element access via
    operator [].

    The output image is produced by inverse mapping: the output pixels are
    mapped back onto the input image. This scheme avoids the creation of
    any holes and overlaps in the output image.

    Each vector in the displacement field represent the distance between a
    geometric point in the input space and a point in the output space
    such that:

    \\[ p_{in} = p_{out} + d \\]

    Typically the mapped position does not correspond to an integer pixel
    position in the input image. Interpolation via an image function is
    used to compute values at non-integer positions. The default
    interpolation typed used is the LinearInterpolateImageFunction. The
    user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    Position mapped to outside of the input image buffer are assigned a
    edge padding value.

    The LargetPossibleRegion for the output is inherited from the input
    displacement field. The output image spacing, origin and orientation
    may be set via SetOutputSpacing, SetOutputOrigin and
    SetOutputDirection. The default are respectively a vector of 1's, a
    vector of 0's and an identity matrix.

    This class is templated over the type of the input image, the type of
    the output image and the type of the displacement field.

    The input image is set via SetInput. The input displacement field is
    set via SetDisplacementField.

    This filter is implemented as a multithreaded filter.

    WARNING:  This filter assumes that the input type, output type and
    displacement field type all have the same number of dimensions.
    example{Filtering/ImageGrid/WarpAnImageUsingADeformationField,Warp An
    Image Using A Deformation Field} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF32___New_orig__)
    Clone = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF32_Clone)
    SetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF32_SetDisplacementField)
    GetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF32_GetDisplacementField)
    SetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF32_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF32_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF32_GetInterpolator)
    SetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF32_SetOutputSpacing)
    GetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF32_GetOutputSpacing)
    SetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF32_SetOutputOrigin)
    GetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF32_GetOutputOrigin)
    SetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF32_SetOutputDirection)
    GetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF32_GetOutputDirection)
    SetOutputParametersFromImage = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF32_SetOutputParametersFromImage)
    SetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF32_SetOutputStartIndex)
    GetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF32_GetOutputStartIndex)
    SetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF32_SetOutputSize)
    GetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF32_GetOutputSize)
    SetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF32_SetEdgePaddingValue)
    GetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF32_GetEdgePaddingValue)
    GenerateOutputInformation = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF32_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF32_GenerateInputRequestedRegion)
    BeforeThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF32_BeforeThreadedGenerateData)
    AfterThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF32_AfterThreadedGenerateData)
    SameDimensionCheck1 = _itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF32_SameDimensionCheck1
    
    SameDimensionCheck2 = _itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF32_SameDimensionCheck2
    
    InputHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF32_InputHasNumericTraitsCheck
    
    DisplacementFieldHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF32_DisplacementFieldHasNumericTraitsCheck
    
    __swig_destroy__ = _itkWarpImageFilterPython.delete_itkWarpImageFilterIUC2IUC2IVF32
    cast = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF32_cast)

    def New(*args, **kargs):
        """New() -> itkWarpImageFilterIUC2IUC2IVF32

        Create a new object of the class itkWarpImageFilterIUC2IUC2IVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWarpImageFilterIUC2IUC2IVF32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWarpImageFilterIUC2IUC2IVF32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWarpImageFilterIUC2IUC2IVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWarpImageFilterIUC2IUC2IVF32 in _itkWarpImageFilterPython:
_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF32_swigregister(itkWarpImageFilterIUC2IUC2IVF32)
itkWarpImageFilterIUC2IUC2IVF32___New_orig__ = _itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF32___New_orig__
itkWarpImageFilterIUC2IUC2IVF32_cast = _itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF32_cast


def itkWarpImageFilterIUC2IUC2IVF42_New():
    return itkWarpImageFilterIUC2IUC2IVF42.New()

class itkWarpImageFilterIUC2IUC2IVF42(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""


    Warps an image using an input displacement field.

    WarpImageFilter warps an existing image with respect to a given
    displacement field.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the input image. The vector type must support element access via
    operator [].

    The output image is produced by inverse mapping: the output pixels are
    mapped back onto the input image. This scheme avoids the creation of
    any holes and overlaps in the output image.

    Each vector in the displacement field represent the distance between a
    geometric point in the input space and a point in the output space
    such that:

    \\[ p_{in} = p_{out} + d \\]

    Typically the mapped position does not correspond to an integer pixel
    position in the input image. Interpolation via an image function is
    used to compute values at non-integer positions. The default
    interpolation typed used is the LinearInterpolateImageFunction. The
    user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    Position mapped to outside of the input image buffer are assigned a
    edge padding value.

    The LargetPossibleRegion for the output is inherited from the input
    displacement field. The output image spacing, origin and orientation
    may be set via SetOutputSpacing, SetOutputOrigin and
    SetOutputDirection. The default are respectively a vector of 1's, a
    vector of 0's and an identity matrix.

    This class is templated over the type of the input image, the type of
    the output image and the type of the displacement field.

    The input image is set via SetInput. The input displacement field is
    set via SetDisplacementField.

    This filter is implemented as a multithreaded filter.

    WARNING:  This filter assumes that the input type, output type and
    displacement field type all have the same number of dimensions.
    example{Filtering/ImageGrid/WarpAnImageUsingADeformationField,Warp An
    Image Using A Deformation Field} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF42___New_orig__)
    Clone = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF42_Clone)
    SetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF42_SetDisplacementField)
    GetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF42_GetDisplacementField)
    SetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF42_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF42_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF42_GetInterpolator)
    SetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF42_SetOutputSpacing)
    GetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF42_GetOutputSpacing)
    SetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF42_SetOutputOrigin)
    GetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF42_GetOutputOrigin)
    SetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF42_SetOutputDirection)
    GetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF42_GetOutputDirection)
    SetOutputParametersFromImage = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF42_SetOutputParametersFromImage)
    SetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF42_SetOutputStartIndex)
    GetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF42_GetOutputStartIndex)
    SetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF42_SetOutputSize)
    GetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF42_GetOutputSize)
    SetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF42_SetEdgePaddingValue)
    GetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF42_GetEdgePaddingValue)
    GenerateOutputInformation = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF42_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF42_GenerateInputRequestedRegion)
    BeforeThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF42_BeforeThreadedGenerateData)
    AfterThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF42_AfterThreadedGenerateData)
    SameDimensionCheck1 = _itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF42_SameDimensionCheck1
    
    SameDimensionCheck2 = _itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF42_SameDimensionCheck2
    
    InputHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF42_InputHasNumericTraitsCheck
    
    DisplacementFieldHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF42_DisplacementFieldHasNumericTraitsCheck
    
    __swig_destroy__ = _itkWarpImageFilterPython.delete_itkWarpImageFilterIUC2IUC2IVF42
    cast = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF42_cast)

    def New(*args, **kargs):
        """New() -> itkWarpImageFilterIUC2IUC2IVF42

        Create a new object of the class itkWarpImageFilterIUC2IUC2IVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWarpImageFilterIUC2IUC2IVF42.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWarpImageFilterIUC2IUC2IVF42.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWarpImageFilterIUC2IUC2IVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWarpImageFilterIUC2IUC2IVF42 in _itkWarpImageFilterPython:
_itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF42_swigregister(itkWarpImageFilterIUC2IUC2IVF42)
itkWarpImageFilterIUC2IUC2IVF42___New_orig__ = _itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF42___New_orig__
itkWarpImageFilterIUC2IUC2IVF42_cast = _itkWarpImageFilterPython.itkWarpImageFilterIUC2IUC2IVF42_cast


def itkWarpImageFilterIUC3IUC3IVF23_New():
    return itkWarpImageFilterIUC3IUC3IVF23.New()

class itkWarpImageFilterIUC3IUC3IVF23(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""


    Warps an image using an input displacement field.

    WarpImageFilter warps an existing image with respect to a given
    displacement field.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the input image. The vector type must support element access via
    operator [].

    The output image is produced by inverse mapping: the output pixels are
    mapped back onto the input image. This scheme avoids the creation of
    any holes and overlaps in the output image.

    Each vector in the displacement field represent the distance between a
    geometric point in the input space and a point in the output space
    such that:

    \\[ p_{in} = p_{out} + d \\]

    Typically the mapped position does not correspond to an integer pixel
    position in the input image. Interpolation via an image function is
    used to compute values at non-integer positions. The default
    interpolation typed used is the LinearInterpolateImageFunction. The
    user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    Position mapped to outside of the input image buffer are assigned a
    edge padding value.

    The LargetPossibleRegion for the output is inherited from the input
    displacement field. The output image spacing, origin and orientation
    may be set via SetOutputSpacing, SetOutputOrigin and
    SetOutputDirection. The default are respectively a vector of 1's, a
    vector of 0's and an identity matrix.

    This class is templated over the type of the input image, the type of
    the output image and the type of the displacement field.

    The input image is set via SetInput. The input displacement field is
    set via SetDisplacementField.

    This filter is implemented as a multithreaded filter.

    WARNING:  This filter assumes that the input type, output type and
    displacement field type all have the same number of dimensions.
    example{Filtering/ImageGrid/WarpAnImageUsingADeformationField,Warp An
    Image Using A Deformation Field} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF23___New_orig__)
    Clone = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF23_Clone)
    SetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF23_SetDisplacementField)
    GetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF23_GetDisplacementField)
    SetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF23_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF23_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF23_GetInterpolator)
    SetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF23_SetOutputSpacing)
    GetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF23_GetOutputSpacing)
    SetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF23_SetOutputOrigin)
    GetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF23_GetOutputOrigin)
    SetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF23_SetOutputDirection)
    GetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF23_GetOutputDirection)
    SetOutputParametersFromImage = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF23_SetOutputParametersFromImage)
    SetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF23_SetOutputStartIndex)
    GetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF23_GetOutputStartIndex)
    SetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF23_SetOutputSize)
    GetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF23_GetOutputSize)
    SetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF23_SetEdgePaddingValue)
    GetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF23_GetEdgePaddingValue)
    GenerateOutputInformation = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF23_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF23_GenerateInputRequestedRegion)
    BeforeThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF23_BeforeThreadedGenerateData)
    AfterThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF23_AfterThreadedGenerateData)
    SameDimensionCheck1 = _itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF23_SameDimensionCheck1
    
    SameDimensionCheck2 = _itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF23_SameDimensionCheck2
    
    InputHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF23_InputHasNumericTraitsCheck
    
    DisplacementFieldHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF23_DisplacementFieldHasNumericTraitsCheck
    
    __swig_destroy__ = _itkWarpImageFilterPython.delete_itkWarpImageFilterIUC3IUC3IVF23
    cast = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF23_cast)

    def New(*args, **kargs):
        """New() -> itkWarpImageFilterIUC3IUC3IVF23

        Create a new object of the class itkWarpImageFilterIUC3IUC3IVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWarpImageFilterIUC3IUC3IVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWarpImageFilterIUC3IUC3IVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWarpImageFilterIUC3IUC3IVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWarpImageFilterIUC3IUC3IVF23 in _itkWarpImageFilterPython:
_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF23_swigregister(itkWarpImageFilterIUC3IUC3IVF23)
itkWarpImageFilterIUC3IUC3IVF23___New_orig__ = _itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF23___New_orig__
itkWarpImageFilterIUC3IUC3IVF23_cast = _itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF23_cast


def itkWarpImageFilterIUC3IUC3IVF33_New():
    return itkWarpImageFilterIUC3IUC3IVF33.New()

class itkWarpImageFilterIUC3IUC3IVF33(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""


    Warps an image using an input displacement field.

    WarpImageFilter warps an existing image with respect to a given
    displacement field.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the input image. The vector type must support element access via
    operator [].

    The output image is produced by inverse mapping: the output pixels are
    mapped back onto the input image. This scheme avoids the creation of
    any holes and overlaps in the output image.

    Each vector in the displacement field represent the distance between a
    geometric point in the input space and a point in the output space
    such that:

    \\[ p_{in} = p_{out} + d \\]

    Typically the mapped position does not correspond to an integer pixel
    position in the input image. Interpolation via an image function is
    used to compute values at non-integer positions. The default
    interpolation typed used is the LinearInterpolateImageFunction. The
    user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    Position mapped to outside of the input image buffer are assigned a
    edge padding value.

    The LargetPossibleRegion for the output is inherited from the input
    displacement field. The output image spacing, origin and orientation
    may be set via SetOutputSpacing, SetOutputOrigin and
    SetOutputDirection. The default are respectively a vector of 1's, a
    vector of 0's and an identity matrix.

    This class is templated over the type of the input image, the type of
    the output image and the type of the displacement field.

    The input image is set via SetInput. The input displacement field is
    set via SetDisplacementField.

    This filter is implemented as a multithreaded filter.

    WARNING:  This filter assumes that the input type, output type and
    displacement field type all have the same number of dimensions.
    example{Filtering/ImageGrid/WarpAnImageUsingADeformationField,Warp An
    Image Using A Deformation Field} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF33_Clone)
    SetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF33_SetDisplacementField)
    GetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF33_GetDisplacementField)
    SetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF33_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF33_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF33_GetInterpolator)
    SetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF33_SetOutputSpacing)
    GetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF33_GetOutputSpacing)
    SetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF33_SetOutputOrigin)
    GetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF33_GetOutputOrigin)
    SetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF33_SetOutputDirection)
    GetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF33_GetOutputDirection)
    SetOutputParametersFromImage = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF33_SetOutputParametersFromImage)
    SetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF33_SetOutputStartIndex)
    GetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF33_GetOutputStartIndex)
    SetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF33_SetOutputSize)
    GetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF33_GetOutputSize)
    SetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF33_SetEdgePaddingValue)
    GetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF33_GetEdgePaddingValue)
    GenerateOutputInformation = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF33_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF33_GenerateInputRequestedRegion)
    BeforeThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF33_BeforeThreadedGenerateData)
    AfterThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF33_AfterThreadedGenerateData)
    SameDimensionCheck1 = _itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF33_SameDimensionCheck1
    
    SameDimensionCheck2 = _itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF33_SameDimensionCheck2
    
    InputHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF33_InputHasNumericTraitsCheck
    
    DisplacementFieldHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF33_DisplacementFieldHasNumericTraitsCheck
    
    __swig_destroy__ = _itkWarpImageFilterPython.delete_itkWarpImageFilterIUC3IUC3IVF33
    cast = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF33_cast)

    def New(*args, **kargs):
        """New() -> itkWarpImageFilterIUC3IUC3IVF33

        Create a new object of the class itkWarpImageFilterIUC3IUC3IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWarpImageFilterIUC3IUC3IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWarpImageFilterIUC3IUC3IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWarpImageFilterIUC3IUC3IVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWarpImageFilterIUC3IUC3IVF33 in _itkWarpImageFilterPython:
_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF33_swigregister(itkWarpImageFilterIUC3IUC3IVF33)
itkWarpImageFilterIUC3IUC3IVF33___New_orig__ = _itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF33___New_orig__
itkWarpImageFilterIUC3IUC3IVF33_cast = _itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF33_cast


def itkWarpImageFilterIUC3IUC3IVF43_New():
    return itkWarpImageFilterIUC3IUC3IVF43.New()

class itkWarpImageFilterIUC3IUC3IVF43(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""


    Warps an image using an input displacement field.

    WarpImageFilter warps an existing image with respect to a given
    displacement field.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the input image. The vector type must support element access via
    operator [].

    The output image is produced by inverse mapping: the output pixels are
    mapped back onto the input image. This scheme avoids the creation of
    any holes and overlaps in the output image.

    Each vector in the displacement field represent the distance between a
    geometric point in the input space and a point in the output space
    such that:

    \\[ p_{in} = p_{out} + d \\]

    Typically the mapped position does not correspond to an integer pixel
    position in the input image. Interpolation via an image function is
    used to compute values at non-integer positions. The default
    interpolation typed used is the LinearInterpolateImageFunction. The
    user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    Position mapped to outside of the input image buffer are assigned a
    edge padding value.

    The LargetPossibleRegion for the output is inherited from the input
    displacement field. The output image spacing, origin and orientation
    may be set via SetOutputSpacing, SetOutputOrigin and
    SetOutputDirection. The default are respectively a vector of 1's, a
    vector of 0's and an identity matrix.

    This class is templated over the type of the input image, the type of
    the output image and the type of the displacement field.

    The input image is set via SetInput. The input displacement field is
    set via SetDisplacementField.

    This filter is implemented as a multithreaded filter.

    WARNING:  This filter assumes that the input type, output type and
    displacement field type all have the same number of dimensions.
    example{Filtering/ImageGrid/WarpAnImageUsingADeformationField,Warp An
    Image Using A Deformation Field} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF43___New_orig__)
    Clone = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF43_Clone)
    SetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF43_SetDisplacementField)
    GetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF43_GetDisplacementField)
    SetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF43_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF43_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF43_GetInterpolator)
    SetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF43_SetOutputSpacing)
    GetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF43_GetOutputSpacing)
    SetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF43_SetOutputOrigin)
    GetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF43_GetOutputOrigin)
    SetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF43_SetOutputDirection)
    GetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF43_GetOutputDirection)
    SetOutputParametersFromImage = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF43_SetOutputParametersFromImage)
    SetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF43_SetOutputStartIndex)
    GetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF43_GetOutputStartIndex)
    SetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF43_SetOutputSize)
    GetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF43_GetOutputSize)
    SetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF43_SetEdgePaddingValue)
    GetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF43_GetEdgePaddingValue)
    GenerateOutputInformation = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF43_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF43_GenerateInputRequestedRegion)
    BeforeThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF43_BeforeThreadedGenerateData)
    AfterThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF43_AfterThreadedGenerateData)
    SameDimensionCheck1 = _itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF43_SameDimensionCheck1
    
    SameDimensionCheck2 = _itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF43_SameDimensionCheck2
    
    InputHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF43_InputHasNumericTraitsCheck
    
    DisplacementFieldHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF43_DisplacementFieldHasNumericTraitsCheck
    
    __swig_destroy__ = _itkWarpImageFilterPython.delete_itkWarpImageFilterIUC3IUC3IVF43
    cast = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF43_cast)

    def New(*args, **kargs):
        """New() -> itkWarpImageFilterIUC3IUC3IVF43

        Create a new object of the class itkWarpImageFilterIUC3IUC3IVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWarpImageFilterIUC3IUC3IVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWarpImageFilterIUC3IUC3IVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWarpImageFilterIUC3IUC3IVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWarpImageFilterIUC3IUC3IVF43 in _itkWarpImageFilterPython:
_itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF43_swigregister(itkWarpImageFilterIUC3IUC3IVF43)
itkWarpImageFilterIUC3IUC3IVF43___New_orig__ = _itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF43___New_orig__
itkWarpImageFilterIUC3IUC3IVF43_cast = _itkWarpImageFilterPython.itkWarpImageFilterIUC3IUC3IVF43_cast


def itkWarpImageFilterIUS2IUS2IVF22_New():
    return itkWarpImageFilterIUS2IUS2IVF22.New()

class itkWarpImageFilterIUS2IUS2IVF22(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""


    Warps an image using an input displacement field.

    WarpImageFilter warps an existing image with respect to a given
    displacement field.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the input image. The vector type must support element access via
    operator [].

    The output image is produced by inverse mapping: the output pixels are
    mapped back onto the input image. This scheme avoids the creation of
    any holes and overlaps in the output image.

    Each vector in the displacement field represent the distance between a
    geometric point in the input space and a point in the output space
    such that:

    \\[ p_{in} = p_{out} + d \\]

    Typically the mapped position does not correspond to an integer pixel
    position in the input image. Interpolation via an image function is
    used to compute values at non-integer positions. The default
    interpolation typed used is the LinearInterpolateImageFunction. The
    user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    Position mapped to outside of the input image buffer are assigned a
    edge padding value.

    The LargetPossibleRegion for the output is inherited from the input
    displacement field. The output image spacing, origin and orientation
    may be set via SetOutputSpacing, SetOutputOrigin and
    SetOutputDirection. The default are respectively a vector of 1's, a
    vector of 0's and an identity matrix.

    This class is templated over the type of the input image, the type of
    the output image and the type of the displacement field.

    The input image is set via SetInput. The input displacement field is
    set via SetDisplacementField.

    This filter is implemented as a multithreaded filter.

    WARNING:  This filter assumes that the input type, output type and
    displacement field type all have the same number of dimensions.
    example{Filtering/ImageGrid/WarpAnImageUsingADeformationField,Warp An
    Image Using A Deformation Field} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF22_Clone)
    SetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF22_SetDisplacementField)
    GetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF22_GetDisplacementField)
    SetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF22_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF22_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF22_GetInterpolator)
    SetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF22_SetOutputSpacing)
    GetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF22_GetOutputSpacing)
    SetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF22_SetOutputOrigin)
    GetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF22_GetOutputOrigin)
    SetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF22_SetOutputDirection)
    GetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF22_GetOutputDirection)
    SetOutputParametersFromImage = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF22_SetOutputParametersFromImage)
    SetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF22_SetOutputStartIndex)
    GetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF22_GetOutputStartIndex)
    SetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF22_SetOutputSize)
    GetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF22_GetOutputSize)
    SetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF22_SetEdgePaddingValue)
    GetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF22_GetEdgePaddingValue)
    GenerateOutputInformation = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF22_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF22_GenerateInputRequestedRegion)
    BeforeThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF22_BeforeThreadedGenerateData)
    AfterThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF22_AfterThreadedGenerateData)
    SameDimensionCheck1 = _itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF22_SameDimensionCheck1
    
    SameDimensionCheck2 = _itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF22_SameDimensionCheck2
    
    InputHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF22_InputHasNumericTraitsCheck
    
    DisplacementFieldHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF22_DisplacementFieldHasNumericTraitsCheck
    
    __swig_destroy__ = _itkWarpImageFilterPython.delete_itkWarpImageFilterIUS2IUS2IVF22
    cast = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF22_cast)

    def New(*args, **kargs):
        """New() -> itkWarpImageFilterIUS2IUS2IVF22

        Create a new object of the class itkWarpImageFilterIUS2IUS2IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWarpImageFilterIUS2IUS2IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWarpImageFilterIUS2IUS2IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWarpImageFilterIUS2IUS2IVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWarpImageFilterIUS2IUS2IVF22 in _itkWarpImageFilterPython:
_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF22_swigregister(itkWarpImageFilterIUS2IUS2IVF22)
itkWarpImageFilterIUS2IUS2IVF22___New_orig__ = _itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF22___New_orig__
itkWarpImageFilterIUS2IUS2IVF22_cast = _itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF22_cast


def itkWarpImageFilterIUS2IUS2IVF32_New():
    return itkWarpImageFilterIUS2IUS2IVF32.New()

class itkWarpImageFilterIUS2IUS2IVF32(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""


    Warps an image using an input displacement field.

    WarpImageFilter warps an existing image with respect to a given
    displacement field.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the input image. The vector type must support element access via
    operator [].

    The output image is produced by inverse mapping: the output pixels are
    mapped back onto the input image. This scheme avoids the creation of
    any holes and overlaps in the output image.

    Each vector in the displacement field represent the distance between a
    geometric point in the input space and a point in the output space
    such that:

    \\[ p_{in} = p_{out} + d \\]

    Typically the mapped position does not correspond to an integer pixel
    position in the input image. Interpolation via an image function is
    used to compute values at non-integer positions. The default
    interpolation typed used is the LinearInterpolateImageFunction. The
    user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    Position mapped to outside of the input image buffer are assigned a
    edge padding value.

    The LargetPossibleRegion for the output is inherited from the input
    displacement field. The output image spacing, origin and orientation
    may be set via SetOutputSpacing, SetOutputOrigin and
    SetOutputDirection. The default are respectively a vector of 1's, a
    vector of 0's and an identity matrix.

    This class is templated over the type of the input image, the type of
    the output image and the type of the displacement field.

    The input image is set via SetInput. The input displacement field is
    set via SetDisplacementField.

    This filter is implemented as a multithreaded filter.

    WARNING:  This filter assumes that the input type, output type and
    displacement field type all have the same number of dimensions.
    example{Filtering/ImageGrid/WarpAnImageUsingADeformationField,Warp An
    Image Using A Deformation Field} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF32___New_orig__)
    Clone = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF32_Clone)
    SetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF32_SetDisplacementField)
    GetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF32_GetDisplacementField)
    SetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF32_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF32_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF32_GetInterpolator)
    SetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF32_SetOutputSpacing)
    GetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF32_GetOutputSpacing)
    SetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF32_SetOutputOrigin)
    GetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF32_GetOutputOrigin)
    SetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF32_SetOutputDirection)
    GetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF32_GetOutputDirection)
    SetOutputParametersFromImage = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF32_SetOutputParametersFromImage)
    SetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF32_SetOutputStartIndex)
    GetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF32_GetOutputStartIndex)
    SetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF32_SetOutputSize)
    GetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF32_GetOutputSize)
    SetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF32_SetEdgePaddingValue)
    GetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF32_GetEdgePaddingValue)
    GenerateOutputInformation = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF32_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF32_GenerateInputRequestedRegion)
    BeforeThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF32_BeforeThreadedGenerateData)
    AfterThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF32_AfterThreadedGenerateData)
    SameDimensionCheck1 = _itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF32_SameDimensionCheck1
    
    SameDimensionCheck2 = _itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF32_SameDimensionCheck2
    
    InputHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF32_InputHasNumericTraitsCheck
    
    DisplacementFieldHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF32_DisplacementFieldHasNumericTraitsCheck
    
    __swig_destroy__ = _itkWarpImageFilterPython.delete_itkWarpImageFilterIUS2IUS2IVF32
    cast = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF32_cast)

    def New(*args, **kargs):
        """New() -> itkWarpImageFilterIUS2IUS2IVF32

        Create a new object of the class itkWarpImageFilterIUS2IUS2IVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWarpImageFilterIUS2IUS2IVF32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWarpImageFilterIUS2IUS2IVF32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWarpImageFilterIUS2IUS2IVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWarpImageFilterIUS2IUS2IVF32 in _itkWarpImageFilterPython:
_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF32_swigregister(itkWarpImageFilterIUS2IUS2IVF32)
itkWarpImageFilterIUS2IUS2IVF32___New_orig__ = _itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF32___New_orig__
itkWarpImageFilterIUS2IUS2IVF32_cast = _itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF32_cast


def itkWarpImageFilterIUS2IUS2IVF42_New():
    return itkWarpImageFilterIUS2IUS2IVF42.New()

class itkWarpImageFilterIUS2IUS2IVF42(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""


    Warps an image using an input displacement field.

    WarpImageFilter warps an existing image with respect to a given
    displacement field.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the input image. The vector type must support element access via
    operator [].

    The output image is produced by inverse mapping: the output pixels are
    mapped back onto the input image. This scheme avoids the creation of
    any holes and overlaps in the output image.

    Each vector in the displacement field represent the distance between a
    geometric point in the input space and a point in the output space
    such that:

    \\[ p_{in} = p_{out} + d \\]

    Typically the mapped position does not correspond to an integer pixel
    position in the input image. Interpolation via an image function is
    used to compute values at non-integer positions. The default
    interpolation typed used is the LinearInterpolateImageFunction. The
    user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    Position mapped to outside of the input image buffer are assigned a
    edge padding value.

    The LargetPossibleRegion for the output is inherited from the input
    displacement field. The output image spacing, origin and orientation
    may be set via SetOutputSpacing, SetOutputOrigin and
    SetOutputDirection. The default are respectively a vector of 1's, a
    vector of 0's and an identity matrix.

    This class is templated over the type of the input image, the type of
    the output image and the type of the displacement field.

    The input image is set via SetInput. The input displacement field is
    set via SetDisplacementField.

    This filter is implemented as a multithreaded filter.

    WARNING:  This filter assumes that the input type, output type and
    displacement field type all have the same number of dimensions.
    example{Filtering/ImageGrid/WarpAnImageUsingADeformationField,Warp An
    Image Using A Deformation Field} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF42___New_orig__)
    Clone = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF42_Clone)
    SetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF42_SetDisplacementField)
    GetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF42_GetDisplacementField)
    SetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF42_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF42_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF42_GetInterpolator)
    SetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF42_SetOutputSpacing)
    GetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF42_GetOutputSpacing)
    SetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF42_SetOutputOrigin)
    GetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF42_GetOutputOrigin)
    SetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF42_SetOutputDirection)
    GetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF42_GetOutputDirection)
    SetOutputParametersFromImage = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF42_SetOutputParametersFromImage)
    SetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF42_SetOutputStartIndex)
    GetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF42_GetOutputStartIndex)
    SetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF42_SetOutputSize)
    GetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF42_GetOutputSize)
    SetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF42_SetEdgePaddingValue)
    GetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF42_GetEdgePaddingValue)
    GenerateOutputInformation = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF42_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF42_GenerateInputRequestedRegion)
    BeforeThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF42_BeforeThreadedGenerateData)
    AfterThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF42_AfterThreadedGenerateData)
    SameDimensionCheck1 = _itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF42_SameDimensionCheck1
    
    SameDimensionCheck2 = _itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF42_SameDimensionCheck2
    
    InputHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF42_InputHasNumericTraitsCheck
    
    DisplacementFieldHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF42_DisplacementFieldHasNumericTraitsCheck
    
    __swig_destroy__ = _itkWarpImageFilterPython.delete_itkWarpImageFilterIUS2IUS2IVF42
    cast = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF42_cast)

    def New(*args, **kargs):
        """New() -> itkWarpImageFilterIUS2IUS2IVF42

        Create a new object of the class itkWarpImageFilterIUS2IUS2IVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWarpImageFilterIUS2IUS2IVF42.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWarpImageFilterIUS2IUS2IVF42.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWarpImageFilterIUS2IUS2IVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWarpImageFilterIUS2IUS2IVF42 in _itkWarpImageFilterPython:
_itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF42_swigregister(itkWarpImageFilterIUS2IUS2IVF42)
itkWarpImageFilterIUS2IUS2IVF42___New_orig__ = _itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF42___New_orig__
itkWarpImageFilterIUS2IUS2IVF42_cast = _itkWarpImageFilterPython.itkWarpImageFilterIUS2IUS2IVF42_cast


def itkWarpImageFilterIUS3IUS3IVF23_New():
    return itkWarpImageFilterIUS3IUS3IVF23.New()

class itkWarpImageFilterIUS3IUS3IVF23(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""


    Warps an image using an input displacement field.

    WarpImageFilter warps an existing image with respect to a given
    displacement field.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the input image. The vector type must support element access via
    operator [].

    The output image is produced by inverse mapping: the output pixels are
    mapped back onto the input image. This scheme avoids the creation of
    any holes and overlaps in the output image.

    Each vector in the displacement field represent the distance between a
    geometric point in the input space and a point in the output space
    such that:

    \\[ p_{in} = p_{out} + d \\]

    Typically the mapped position does not correspond to an integer pixel
    position in the input image. Interpolation via an image function is
    used to compute values at non-integer positions. The default
    interpolation typed used is the LinearInterpolateImageFunction. The
    user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    Position mapped to outside of the input image buffer are assigned a
    edge padding value.

    The LargetPossibleRegion for the output is inherited from the input
    displacement field. The output image spacing, origin and orientation
    may be set via SetOutputSpacing, SetOutputOrigin and
    SetOutputDirection. The default are respectively a vector of 1's, a
    vector of 0's and an identity matrix.

    This class is templated over the type of the input image, the type of
    the output image and the type of the displacement field.

    The input image is set via SetInput. The input displacement field is
    set via SetDisplacementField.

    This filter is implemented as a multithreaded filter.

    WARNING:  This filter assumes that the input type, output type and
    displacement field type all have the same number of dimensions.
    example{Filtering/ImageGrid/WarpAnImageUsingADeformationField,Warp An
    Image Using A Deformation Field} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF23___New_orig__)
    Clone = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF23_Clone)
    SetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF23_SetDisplacementField)
    GetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF23_GetDisplacementField)
    SetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF23_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF23_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF23_GetInterpolator)
    SetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF23_SetOutputSpacing)
    GetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF23_GetOutputSpacing)
    SetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF23_SetOutputOrigin)
    GetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF23_GetOutputOrigin)
    SetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF23_SetOutputDirection)
    GetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF23_GetOutputDirection)
    SetOutputParametersFromImage = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF23_SetOutputParametersFromImage)
    SetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF23_SetOutputStartIndex)
    GetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF23_GetOutputStartIndex)
    SetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF23_SetOutputSize)
    GetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF23_GetOutputSize)
    SetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF23_SetEdgePaddingValue)
    GetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF23_GetEdgePaddingValue)
    GenerateOutputInformation = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF23_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF23_GenerateInputRequestedRegion)
    BeforeThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF23_BeforeThreadedGenerateData)
    AfterThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF23_AfterThreadedGenerateData)
    SameDimensionCheck1 = _itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF23_SameDimensionCheck1
    
    SameDimensionCheck2 = _itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF23_SameDimensionCheck2
    
    InputHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF23_InputHasNumericTraitsCheck
    
    DisplacementFieldHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF23_DisplacementFieldHasNumericTraitsCheck
    
    __swig_destroy__ = _itkWarpImageFilterPython.delete_itkWarpImageFilterIUS3IUS3IVF23
    cast = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF23_cast)

    def New(*args, **kargs):
        """New() -> itkWarpImageFilterIUS3IUS3IVF23

        Create a new object of the class itkWarpImageFilterIUS3IUS3IVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWarpImageFilterIUS3IUS3IVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWarpImageFilterIUS3IUS3IVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWarpImageFilterIUS3IUS3IVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWarpImageFilterIUS3IUS3IVF23 in _itkWarpImageFilterPython:
_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF23_swigregister(itkWarpImageFilterIUS3IUS3IVF23)
itkWarpImageFilterIUS3IUS3IVF23___New_orig__ = _itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF23___New_orig__
itkWarpImageFilterIUS3IUS3IVF23_cast = _itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF23_cast


def itkWarpImageFilterIUS3IUS3IVF33_New():
    return itkWarpImageFilterIUS3IUS3IVF33.New()

class itkWarpImageFilterIUS3IUS3IVF33(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""


    Warps an image using an input displacement field.

    WarpImageFilter warps an existing image with respect to a given
    displacement field.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the input image. The vector type must support element access via
    operator [].

    The output image is produced by inverse mapping: the output pixels are
    mapped back onto the input image. This scheme avoids the creation of
    any holes and overlaps in the output image.

    Each vector in the displacement field represent the distance between a
    geometric point in the input space and a point in the output space
    such that:

    \\[ p_{in} = p_{out} + d \\]

    Typically the mapped position does not correspond to an integer pixel
    position in the input image. Interpolation via an image function is
    used to compute values at non-integer positions. The default
    interpolation typed used is the LinearInterpolateImageFunction. The
    user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    Position mapped to outside of the input image buffer are assigned a
    edge padding value.

    The LargetPossibleRegion for the output is inherited from the input
    displacement field. The output image spacing, origin and orientation
    may be set via SetOutputSpacing, SetOutputOrigin and
    SetOutputDirection. The default are respectively a vector of 1's, a
    vector of 0's and an identity matrix.

    This class is templated over the type of the input image, the type of
    the output image and the type of the displacement field.

    The input image is set via SetInput. The input displacement field is
    set via SetDisplacementField.

    This filter is implemented as a multithreaded filter.

    WARNING:  This filter assumes that the input type, output type and
    displacement field type all have the same number of dimensions.
    example{Filtering/ImageGrid/WarpAnImageUsingADeformationField,Warp An
    Image Using A Deformation Field} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF33_Clone)
    SetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF33_SetDisplacementField)
    GetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF33_GetDisplacementField)
    SetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF33_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF33_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF33_GetInterpolator)
    SetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF33_SetOutputSpacing)
    GetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF33_GetOutputSpacing)
    SetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF33_SetOutputOrigin)
    GetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF33_GetOutputOrigin)
    SetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF33_SetOutputDirection)
    GetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF33_GetOutputDirection)
    SetOutputParametersFromImage = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF33_SetOutputParametersFromImage)
    SetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF33_SetOutputStartIndex)
    GetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF33_GetOutputStartIndex)
    SetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF33_SetOutputSize)
    GetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF33_GetOutputSize)
    SetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF33_SetEdgePaddingValue)
    GetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF33_GetEdgePaddingValue)
    GenerateOutputInformation = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF33_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF33_GenerateInputRequestedRegion)
    BeforeThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF33_BeforeThreadedGenerateData)
    AfterThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF33_AfterThreadedGenerateData)
    SameDimensionCheck1 = _itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF33_SameDimensionCheck1
    
    SameDimensionCheck2 = _itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF33_SameDimensionCheck2
    
    InputHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF33_InputHasNumericTraitsCheck
    
    DisplacementFieldHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF33_DisplacementFieldHasNumericTraitsCheck
    
    __swig_destroy__ = _itkWarpImageFilterPython.delete_itkWarpImageFilterIUS3IUS3IVF33
    cast = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF33_cast)

    def New(*args, **kargs):
        """New() -> itkWarpImageFilterIUS3IUS3IVF33

        Create a new object of the class itkWarpImageFilterIUS3IUS3IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWarpImageFilterIUS3IUS3IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWarpImageFilterIUS3IUS3IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWarpImageFilterIUS3IUS3IVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWarpImageFilterIUS3IUS3IVF33 in _itkWarpImageFilterPython:
_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF33_swigregister(itkWarpImageFilterIUS3IUS3IVF33)
itkWarpImageFilterIUS3IUS3IVF33___New_orig__ = _itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF33___New_orig__
itkWarpImageFilterIUS3IUS3IVF33_cast = _itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF33_cast


def itkWarpImageFilterIUS3IUS3IVF43_New():
    return itkWarpImageFilterIUS3IUS3IVF43.New()

class itkWarpImageFilterIUS3IUS3IVF43(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""


    Warps an image using an input displacement field.

    WarpImageFilter warps an existing image with respect to a given
    displacement field.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the input image. The vector type must support element access via
    operator [].

    The output image is produced by inverse mapping: the output pixels are
    mapped back onto the input image. This scheme avoids the creation of
    any holes and overlaps in the output image.

    Each vector in the displacement field represent the distance between a
    geometric point in the input space and a point in the output space
    such that:

    \\[ p_{in} = p_{out} + d \\]

    Typically the mapped position does not correspond to an integer pixel
    position in the input image. Interpolation via an image function is
    used to compute values at non-integer positions. The default
    interpolation typed used is the LinearInterpolateImageFunction. The
    user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    Position mapped to outside of the input image buffer are assigned a
    edge padding value.

    The LargetPossibleRegion for the output is inherited from the input
    displacement field. The output image spacing, origin and orientation
    may be set via SetOutputSpacing, SetOutputOrigin and
    SetOutputDirection. The default are respectively a vector of 1's, a
    vector of 0's and an identity matrix.

    This class is templated over the type of the input image, the type of
    the output image and the type of the displacement field.

    The input image is set via SetInput. The input displacement field is
    set via SetDisplacementField.

    This filter is implemented as a multithreaded filter.

    WARNING:  This filter assumes that the input type, output type and
    displacement field type all have the same number of dimensions.
    example{Filtering/ImageGrid/WarpAnImageUsingADeformationField,Warp An
    Image Using A Deformation Field} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF43___New_orig__)
    Clone = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF43_Clone)
    SetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF43_SetDisplacementField)
    GetDisplacementField = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF43_GetDisplacementField)
    SetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF43_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF43_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF43_GetInterpolator)
    SetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF43_SetOutputSpacing)
    GetOutputSpacing = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF43_GetOutputSpacing)
    SetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF43_SetOutputOrigin)
    GetOutputOrigin = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF43_GetOutputOrigin)
    SetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF43_SetOutputDirection)
    GetOutputDirection = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF43_GetOutputDirection)
    SetOutputParametersFromImage = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF43_SetOutputParametersFromImage)
    SetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF43_SetOutputStartIndex)
    GetOutputStartIndex = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF43_GetOutputStartIndex)
    SetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF43_SetOutputSize)
    GetOutputSize = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF43_GetOutputSize)
    SetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF43_SetEdgePaddingValue)
    GetEdgePaddingValue = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF43_GetEdgePaddingValue)
    GenerateOutputInformation = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF43_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF43_GenerateInputRequestedRegion)
    BeforeThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF43_BeforeThreadedGenerateData)
    AfterThreadedGenerateData = _swig_new_instance_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF43_AfterThreadedGenerateData)
    SameDimensionCheck1 = _itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF43_SameDimensionCheck1
    
    SameDimensionCheck2 = _itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF43_SameDimensionCheck2
    
    InputHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF43_InputHasNumericTraitsCheck
    
    DisplacementFieldHasNumericTraitsCheck = _itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF43_DisplacementFieldHasNumericTraitsCheck
    
    __swig_destroy__ = _itkWarpImageFilterPython.delete_itkWarpImageFilterIUS3IUS3IVF43
    cast = _swig_new_static_method(_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF43_cast)

    def New(*args, **kargs):
        """New() -> itkWarpImageFilterIUS3IUS3IVF43

        Create a new object of the class itkWarpImageFilterIUS3IUS3IVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWarpImageFilterIUS3IUS3IVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWarpImageFilterIUS3IUS3IVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWarpImageFilterIUS3IUS3IVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWarpImageFilterIUS3IUS3IVF43 in _itkWarpImageFilterPython:
_itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF43_swigregister(itkWarpImageFilterIUS3IUS3IVF43)
itkWarpImageFilterIUS3IUS3IVF43___New_orig__ = _itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF43___New_orig__
itkWarpImageFilterIUS3IUS3IVF43_cast = _itkWarpImageFilterPython.itkWarpImageFilterIUS3IUS3IVF43_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def warp_image_filter(*args, **kwargs):
    """Procedural interface for WarpImageFilter"""
    import itk
    instance = itk.WarpImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def warp_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.WarpImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.WarpImageFilter.values()[0]
    else:
        filter_object = itk.WarpImageFilter

    warp_image_filter.__doc__ = filter_object.__doc__
    warp_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    warp_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.WarpImageFilter, itkTemplate.itkTemplate):
        warp_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        warp_image_filter.__doc__ += "\n"
        warp_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        warp_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



