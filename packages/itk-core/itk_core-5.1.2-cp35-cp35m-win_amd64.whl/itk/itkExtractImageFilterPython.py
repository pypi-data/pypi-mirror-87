# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkExtractImageFilterPython
else:
    import _itkExtractImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkExtractImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkExtractImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkFixedArrayPython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterBPython
import itk.itkInPlaceImageFilterBPython
class itkExtractImageFilterEnums(object):
    r"""Proxy of C++ itkExtractImageFilterEnums class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DirectionCollapseStrategy_DIRECTIONCOLLAPSETOUNKOWN = _itkExtractImageFilterPython.itkExtractImageFilterEnums_DirectionCollapseStrategy_DIRECTIONCOLLAPSETOUNKOWN
    
    DirectionCollapseStrategy_DIRECTIONCOLLAPSETOIDENTITY = _itkExtractImageFilterPython.itkExtractImageFilterEnums_DirectionCollapseStrategy_DIRECTIONCOLLAPSETOIDENTITY
    
    DirectionCollapseStrategy_DIRECTIONCOLLAPSETOSUBMATRIX = _itkExtractImageFilterPython.itkExtractImageFilterEnums_DirectionCollapseStrategy_DIRECTIONCOLLAPSETOSUBMATRIX
    
    DirectionCollapseStrategy_DIRECTIONCOLLAPSETOGUESS = _itkExtractImageFilterPython.itkExtractImageFilterEnums_DirectionCollapseStrategy_DIRECTIONCOLLAPSETOGUESS
    

    def __init__(self, *args):
        r"""
        __init__(itkExtractImageFilterEnums self) -> itkExtractImageFilterEnums
        __init__(itkExtractImageFilterEnums self, itkExtractImageFilterEnums arg0) -> itkExtractImageFilterEnums
        """
        _itkExtractImageFilterPython.itkExtractImageFilterEnums_swiginit(self, _itkExtractImageFilterPython.new_itkExtractImageFilterEnums(*args))
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterEnums

# Register itkExtractImageFilterEnums in _itkExtractImageFilterPython:
_itkExtractImageFilterPython.itkExtractImageFilterEnums_swigregister(itkExtractImageFilterEnums)


def itkExtractImageFilterICF2ICF2_New():
    return itkExtractImageFilterICF2ICF2.New()

class itkExtractImageFilterICF2ICF2(itk.itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2ICF2):
    r"""


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. For
    example, we have a image 4D = a 4x4x4x4 image, and we want to get a 3D
    image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter  {Core/Common/CropImageBySpecifyingRegion,Crop
    Image By Specifying Region} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterICF2ICF2___New_orig__)
    Clone = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICF2ICF2_Clone)
    SetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICF2ICF2_SetDirectionCollapseToStrategy)
    GetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICF2ICF2_GetDirectionCollapseToStrategy)
    SetDirectionCollapseToGuess = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICF2ICF2_SetDirectionCollapseToGuess)
    SetDirectionCollapseToIdentity = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICF2ICF2_SetDirectionCollapseToIdentity)
    SetDirectionCollapseToSubmatrix = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICF2ICF2_SetDirectionCollapseToSubmatrix)
    SetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICF2ICF2_SetExtractionRegion)
    GetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICF2ICF2_GetExtractionRegion)
    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterICF2ICF2_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterICF2ICF2
    cast = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterICF2ICF2_cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterICF2ICF2

        Create a new object of the class itkExtractImageFilterICF2ICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterICF2ICF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterICF2ICF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExtractImageFilterICF2ICF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExtractImageFilterICF2ICF2 in _itkExtractImageFilterPython:
_itkExtractImageFilterPython.itkExtractImageFilterICF2ICF2_swigregister(itkExtractImageFilterICF2ICF2)
itkExtractImageFilterICF2ICF2___New_orig__ = _itkExtractImageFilterPython.itkExtractImageFilterICF2ICF2___New_orig__
itkExtractImageFilterICF2ICF2_cast = _itkExtractImageFilterPython.itkExtractImageFilterICF2ICF2_cast


def itkExtractImageFilterICF3ICF2_New():
    return itkExtractImageFilterICF3ICF2.New()

class itkExtractImageFilterICF3ICF2(itk.itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3ICF2):
    r"""


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. For
    example, we have a image 4D = a 4x4x4x4 image, and we want to get a 3D
    image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter  {Core/Common/CropImageBySpecifyingRegion,Crop
    Image By Specifying Region} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterICF3ICF2___New_orig__)
    Clone = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICF3ICF2_Clone)
    SetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICF3ICF2_SetDirectionCollapseToStrategy)
    GetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICF3ICF2_GetDirectionCollapseToStrategy)
    SetDirectionCollapseToGuess = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICF3ICF2_SetDirectionCollapseToGuess)
    SetDirectionCollapseToIdentity = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICF3ICF2_SetDirectionCollapseToIdentity)
    SetDirectionCollapseToSubmatrix = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICF3ICF2_SetDirectionCollapseToSubmatrix)
    SetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICF3ICF2_SetExtractionRegion)
    GetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICF3ICF2_GetExtractionRegion)
    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterICF3ICF2_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterICF3ICF2
    cast = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterICF3ICF2_cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterICF3ICF2

        Create a new object of the class itkExtractImageFilterICF3ICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterICF3ICF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterICF3ICF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExtractImageFilterICF3ICF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExtractImageFilterICF3ICF2 in _itkExtractImageFilterPython:
_itkExtractImageFilterPython.itkExtractImageFilterICF3ICF2_swigregister(itkExtractImageFilterICF3ICF2)
itkExtractImageFilterICF3ICF2___New_orig__ = _itkExtractImageFilterPython.itkExtractImageFilterICF3ICF2___New_orig__
itkExtractImageFilterICF3ICF2_cast = _itkExtractImageFilterPython.itkExtractImageFilterICF3ICF2_cast


def itkExtractImageFilterICF3ICF3_New():
    return itkExtractImageFilterICF3ICF3.New()

class itkExtractImageFilterICF3ICF3(itk.itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3ICF3):
    r"""


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. For
    example, we have a image 4D = a 4x4x4x4 image, and we want to get a 3D
    image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter  {Core/Common/CropImageBySpecifyingRegion,Crop
    Image By Specifying Region} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterICF3ICF3___New_orig__)
    Clone = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICF3ICF3_Clone)
    SetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICF3ICF3_SetDirectionCollapseToStrategy)
    GetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICF3ICF3_GetDirectionCollapseToStrategy)
    SetDirectionCollapseToGuess = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICF3ICF3_SetDirectionCollapseToGuess)
    SetDirectionCollapseToIdentity = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICF3ICF3_SetDirectionCollapseToIdentity)
    SetDirectionCollapseToSubmatrix = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICF3ICF3_SetDirectionCollapseToSubmatrix)
    SetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICF3ICF3_SetExtractionRegion)
    GetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICF3ICF3_GetExtractionRegion)
    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterICF3ICF3_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterICF3ICF3
    cast = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterICF3ICF3_cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterICF3ICF3

        Create a new object of the class itkExtractImageFilterICF3ICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterICF3ICF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterICF3ICF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExtractImageFilterICF3ICF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExtractImageFilterICF3ICF3 in _itkExtractImageFilterPython:
_itkExtractImageFilterPython.itkExtractImageFilterICF3ICF3_swigregister(itkExtractImageFilterICF3ICF3)
itkExtractImageFilterICF3ICF3___New_orig__ = _itkExtractImageFilterPython.itkExtractImageFilterICF3ICF3___New_orig__
itkExtractImageFilterICF3ICF3_cast = _itkExtractImageFilterPython.itkExtractImageFilterICF3ICF3_cast


def itkExtractImageFilterICVF22ICVF22_New():
    return itkExtractImageFilterICVF22ICVF22.New()

class itkExtractImageFilterICVF22ICVF22(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF22ICVF22):
    r"""


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. For
    example, we have a image 4D = a 4x4x4x4 image, and we want to get a 3D
    image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter  {Core/Common/CropImageBySpecifyingRegion,Crop
    Image By Specifying Region} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF22ICVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF22ICVF22_Clone)
    SetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF22ICVF22_SetDirectionCollapseToStrategy)
    GetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF22ICVF22_GetDirectionCollapseToStrategy)
    SetDirectionCollapseToGuess = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF22ICVF22_SetDirectionCollapseToGuess)
    SetDirectionCollapseToIdentity = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF22ICVF22_SetDirectionCollapseToIdentity)
    SetDirectionCollapseToSubmatrix = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF22ICVF22_SetDirectionCollapseToSubmatrix)
    SetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF22ICVF22_SetExtractionRegion)
    GetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF22ICVF22_GetExtractionRegion)
    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterICVF22ICVF22_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterICVF22ICVF22
    cast = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF22ICVF22_cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterICVF22ICVF22

        Create a new object of the class itkExtractImageFilterICVF22ICVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterICVF22ICVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterICVF22ICVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExtractImageFilterICVF22ICVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExtractImageFilterICVF22ICVF22 in _itkExtractImageFilterPython:
_itkExtractImageFilterPython.itkExtractImageFilterICVF22ICVF22_swigregister(itkExtractImageFilterICVF22ICVF22)
itkExtractImageFilterICVF22ICVF22___New_orig__ = _itkExtractImageFilterPython.itkExtractImageFilterICVF22ICVF22___New_orig__
itkExtractImageFilterICVF22ICVF22_cast = _itkExtractImageFilterPython.itkExtractImageFilterICVF22ICVF22_cast


def itkExtractImageFilterICVF23ICVF23_New():
    return itkExtractImageFilterICVF23ICVF23.New()

class itkExtractImageFilterICVF23ICVF23(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF23ICVF23):
    r"""


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. For
    example, we have a image 4D = a 4x4x4x4 image, and we want to get a 3D
    image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter  {Core/Common/CropImageBySpecifyingRegion,Crop
    Image By Specifying Region} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF23ICVF23___New_orig__)
    Clone = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF23ICVF23_Clone)
    SetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF23ICVF23_SetDirectionCollapseToStrategy)
    GetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF23ICVF23_GetDirectionCollapseToStrategy)
    SetDirectionCollapseToGuess = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF23ICVF23_SetDirectionCollapseToGuess)
    SetDirectionCollapseToIdentity = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF23ICVF23_SetDirectionCollapseToIdentity)
    SetDirectionCollapseToSubmatrix = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF23ICVF23_SetDirectionCollapseToSubmatrix)
    SetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF23ICVF23_SetExtractionRegion)
    GetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF23ICVF23_GetExtractionRegion)
    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterICVF23ICVF23_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterICVF23ICVF23
    cast = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF23ICVF23_cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterICVF23ICVF23

        Create a new object of the class itkExtractImageFilterICVF23ICVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterICVF23ICVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterICVF23ICVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExtractImageFilterICVF23ICVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExtractImageFilterICVF23ICVF23 in _itkExtractImageFilterPython:
_itkExtractImageFilterPython.itkExtractImageFilterICVF23ICVF23_swigregister(itkExtractImageFilterICVF23ICVF23)
itkExtractImageFilterICVF23ICVF23___New_orig__ = _itkExtractImageFilterPython.itkExtractImageFilterICVF23ICVF23___New_orig__
itkExtractImageFilterICVF23ICVF23_cast = _itkExtractImageFilterPython.itkExtractImageFilterICVF23ICVF23_cast


def itkExtractImageFilterICVF32ICVF32_New():
    return itkExtractImageFilterICVF32ICVF32.New()

class itkExtractImageFilterICVF32ICVF32(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF32ICVF32):
    r"""


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. For
    example, we have a image 4D = a 4x4x4x4 image, and we want to get a 3D
    image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter  {Core/Common/CropImageBySpecifyingRegion,Crop
    Image By Specifying Region} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF32ICVF32___New_orig__)
    Clone = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF32ICVF32_Clone)
    SetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF32ICVF32_SetDirectionCollapseToStrategy)
    GetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF32ICVF32_GetDirectionCollapseToStrategy)
    SetDirectionCollapseToGuess = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF32ICVF32_SetDirectionCollapseToGuess)
    SetDirectionCollapseToIdentity = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF32ICVF32_SetDirectionCollapseToIdentity)
    SetDirectionCollapseToSubmatrix = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF32ICVF32_SetDirectionCollapseToSubmatrix)
    SetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF32ICVF32_SetExtractionRegion)
    GetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF32ICVF32_GetExtractionRegion)
    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterICVF32ICVF32_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterICVF32ICVF32
    cast = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF32ICVF32_cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterICVF32ICVF32

        Create a new object of the class itkExtractImageFilterICVF32ICVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterICVF32ICVF32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterICVF32ICVF32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExtractImageFilterICVF32ICVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExtractImageFilterICVF32ICVF32 in _itkExtractImageFilterPython:
_itkExtractImageFilterPython.itkExtractImageFilterICVF32ICVF32_swigregister(itkExtractImageFilterICVF32ICVF32)
itkExtractImageFilterICVF32ICVF32___New_orig__ = _itkExtractImageFilterPython.itkExtractImageFilterICVF32ICVF32___New_orig__
itkExtractImageFilterICVF32ICVF32_cast = _itkExtractImageFilterPython.itkExtractImageFilterICVF32ICVF32_cast


def itkExtractImageFilterICVF33ICVF33_New():
    return itkExtractImageFilterICVF33ICVF33.New()

class itkExtractImageFilterICVF33ICVF33(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF33ICVF33):
    r"""


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. For
    example, we have a image 4D = a 4x4x4x4 image, and we want to get a 3D
    image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter  {Core/Common/CropImageBySpecifyingRegion,Crop
    Image By Specifying Region} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF33ICVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF33ICVF33_Clone)
    SetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF33ICVF33_SetDirectionCollapseToStrategy)
    GetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF33ICVF33_GetDirectionCollapseToStrategy)
    SetDirectionCollapseToGuess = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF33ICVF33_SetDirectionCollapseToGuess)
    SetDirectionCollapseToIdentity = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF33ICVF33_SetDirectionCollapseToIdentity)
    SetDirectionCollapseToSubmatrix = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF33ICVF33_SetDirectionCollapseToSubmatrix)
    SetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF33ICVF33_SetExtractionRegion)
    GetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF33ICVF33_GetExtractionRegion)
    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterICVF33ICVF33_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterICVF33ICVF33
    cast = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF33ICVF33_cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterICVF33ICVF33

        Create a new object of the class itkExtractImageFilterICVF33ICVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterICVF33ICVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterICVF33ICVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExtractImageFilterICVF33ICVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExtractImageFilterICVF33ICVF33 in _itkExtractImageFilterPython:
_itkExtractImageFilterPython.itkExtractImageFilterICVF33ICVF33_swigregister(itkExtractImageFilterICVF33ICVF33)
itkExtractImageFilterICVF33ICVF33___New_orig__ = _itkExtractImageFilterPython.itkExtractImageFilterICVF33ICVF33___New_orig__
itkExtractImageFilterICVF33ICVF33_cast = _itkExtractImageFilterPython.itkExtractImageFilterICVF33ICVF33_cast


def itkExtractImageFilterICVF42ICVF42_New():
    return itkExtractImageFilterICVF42ICVF42.New()

class itkExtractImageFilterICVF42ICVF42(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF42ICVF42):
    r"""


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. For
    example, we have a image 4D = a 4x4x4x4 image, and we want to get a 3D
    image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter  {Core/Common/CropImageBySpecifyingRegion,Crop
    Image By Specifying Region} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF42ICVF42___New_orig__)
    Clone = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF42ICVF42_Clone)
    SetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF42ICVF42_SetDirectionCollapseToStrategy)
    GetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF42ICVF42_GetDirectionCollapseToStrategy)
    SetDirectionCollapseToGuess = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF42ICVF42_SetDirectionCollapseToGuess)
    SetDirectionCollapseToIdentity = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF42ICVF42_SetDirectionCollapseToIdentity)
    SetDirectionCollapseToSubmatrix = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF42ICVF42_SetDirectionCollapseToSubmatrix)
    SetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF42ICVF42_SetExtractionRegion)
    GetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF42ICVF42_GetExtractionRegion)
    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterICVF42ICVF42_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterICVF42ICVF42
    cast = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF42ICVF42_cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterICVF42ICVF42

        Create a new object of the class itkExtractImageFilterICVF42ICVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterICVF42ICVF42.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterICVF42ICVF42.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExtractImageFilterICVF42ICVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExtractImageFilterICVF42ICVF42 in _itkExtractImageFilterPython:
_itkExtractImageFilterPython.itkExtractImageFilterICVF42ICVF42_swigregister(itkExtractImageFilterICVF42ICVF42)
itkExtractImageFilterICVF42ICVF42___New_orig__ = _itkExtractImageFilterPython.itkExtractImageFilterICVF42ICVF42___New_orig__
itkExtractImageFilterICVF42ICVF42_cast = _itkExtractImageFilterPython.itkExtractImageFilterICVF42ICVF42_cast


def itkExtractImageFilterICVF43ICVF43_New():
    return itkExtractImageFilterICVF43ICVF43.New()

class itkExtractImageFilterICVF43ICVF43(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF43ICVF43):
    r"""


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. For
    example, we have a image 4D = a 4x4x4x4 image, and we want to get a 3D
    image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter  {Core/Common/CropImageBySpecifyingRegion,Crop
    Image By Specifying Region} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF43ICVF43___New_orig__)
    Clone = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF43ICVF43_Clone)
    SetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF43ICVF43_SetDirectionCollapseToStrategy)
    GetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF43ICVF43_GetDirectionCollapseToStrategy)
    SetDirectionCollapseToGuess = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF43ICVF43_SetDirectionCollapseToGuess)
    SetDirectionCollapseToIdentity = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF43ICVF43_SetDirectionCollapseToIdentity)
    SetDirectionCollapseToSubmatrix = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF43ICVF43_SetDirectionCollapseToSubmatrix)
    SetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF43ICVF43_SetExtractionRegion)
    GetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF43ICVF43_GetExtractionRegion)
    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterICVF43ICVF43_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterICVF43ICVF43
    cast = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterICVF43ICVF43_cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterICVF43ICVF43

        Create a new object of the class itkExtractImageFilterICVF43ICVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterICVF43ICVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterICVF43ICVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExtractImageFilterICVF43ICVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExtractImageFilterICVF43ICVF43 in _itkExtractImageFilterPython:
_itkExtractImageFilterPython.itkExtractImageFilterICVF43ICVF43_swigregister(itkExtractImageFilterICVF43ICVF43)
itkExtractImageFilterICVF43ICVF43___New_orig__ = _itkExtractImageFilterPython.itkExtractImageFilterICVF43ICVF43___New_orig__
itkExtractImageFilterICVF43ICVF43_cast = _itkExtractImageFilterPython.itkExtractImageFilterICVF43ICVF43_cast


def itkExtractImageFilterID2ID2_New():
    return itkExtractImageFilterID2ID2.New()

class itkExtractImageFilterID2ID2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2ID2):
    r"""


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. For
    example, we have a image 4D = a 4x4x4x4 image, and we want to get a 3D
    image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter  {Core/Common/CropImageBySpecifyingRegion,Crop
    Image By Specifying Region} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterID2ID2_Clone)
    SetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterID2ID2_SetDirectionCollapseToStrategy)
    GetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterID2ID2_GetDirectionCollapseToStrategy)
    SetDirectionCollapseToGuess = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterID2ID2_SetDirectionCollapseToGuess)
    SetDirectionCollapseToIdentity = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterID2ID2_SetDirectionCollapseToIdentity)
    SetDirectionCollapseToSubmatrix = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterID2ID2_SetDirectionCollapseToSubmatrix)
    SetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterID2ID2_SetExtractionRegion)
    GetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterID2ID2_GetExtractionRegion)
    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterID2ID2_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterID2ID2
    cast = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterID2ID2

        Create a new object of the class itkExtractImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExtractImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExtractImageFilterID2ID2 in _itkExtractImageFilterPython:
_itkExtractImageFilterPython.itkExtractImageFilterID2ID2_swigregister(itkExtractImageFilterID2ID2)
itkExtractImageFilterID2ID2___New_orig__ = _itkExtractImageFilterPython.itkExtractImageFilterID2ID2___New_orig__
itkExtractImageFilterID2ID2_cast = _itkExtractImageFilterPython.itkExtractImageFilterID2ID2_cast


def itkExtractImageFilterID3ID2_New():
    return itkExtractImageFilterID3ID2.New()

class itkExtractImageFilterID3ID2(itk.itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3ID2):
    r"""


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. For
    example, we have a image 4D = a 4x4x4x4 image, and we want to get a 3D
    image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter  {Core/Common/CropImageBySpecifyingRegion,Crop
    Image By Specifying Region} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterID3ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterID3ID2_Clone)
    SetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterID3ID2_SetDirectionCollapseToStrategy)
    GetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterID3ID2_GetDirectionCollapseToStrategy)
    SetDirectionCollapseToGuess = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterID3ID2_SetDirectionCollapseToGuess)
    SetDirectionCollapseToIdentity = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterID3ID2_SetDirectionCollapseToIdentity)
    SetDirectionCollapseToSubmatrix = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterID3ID2_SetDirectionCollapseToSubmatrix)
    SetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterID3ID2_SetExtractionRegion)
    GetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterID3ID2_GetExtractionRegion)
    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterID3ID2_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterID3ID2
    cast = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterID3ID2_cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterID3ID2

        Create a new object of the class itkExtractImageFilterID3ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterID3ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterID3ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExtractImageFilterID3ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExtractImageFilterID3ID2 in _itkExtractImageFilterPython:
_itkExtractImageFilterPython.itkExtractImageFilterID3ID2_swigregister(itkExtractImageFilterID3ID2)
itkExtractImageFilterID3ID2___New_orig__ = _itkExtractImageFilterPython.itkExtractImageFilterID3ID2___New_orig__
itkExtractImageFilterID3ID2_cast = _itkExtractImageFilterPython.itkExtractImageFilterID3ID2_cast


def itkExtractImageFilterID3ID3_New():
    return itkExtractImageFilterID3ID3.New()

class itkExtractImageFilterID3ID3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3):
    r"""


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. For
    example, we have a image 4D = a 4x4x4x4 image, and we want to get a 3D
    image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter  {Core/Common/CropImageBySpecifyingRegion,Crop
    Image By Specifying Region} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterID3ID3_Clone)
    SetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterID3ID3_SetDirectionCollapseToStrategy)
    GetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterID3ID3_GetDirectionCollapseToStrategy)
    SetDirectionCollapseToGuess = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterID3ID3_SetDirectionCollapseToGuess)
    SetDirectionCollapseToIdentity = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterID3ID3_SetDirectionCollapseToIdentity)
    SetDirectionCollapseToSubmatrix = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterID3ID3_SetDirectionCollapseToSubmatrix)
    SetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterID3ID3_SetExtractionRegion)
    GetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterID3ID3_GetExtractionRegion)
    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterID3ID3_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterID3ID3
    cast = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterID3ID3

        Create a new object of the class itkExtractImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExtractImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExtractImageFilterID3ID3 in _itkExtractImageFilterPython:
_itkExtractImageFilterPython.itkExtractImageFilterID3ID3_swigregister(itkExtractImageFilterID3ID3)
itkExtractImageFilterID3ID3___New_orig__ = _itkExtractImageFilterPython.itkExtractImageFilterID3ID3___New_orig__
itkExtractImageFilterID3ID3_cast = _itkExtractImageFilterPython.itkExtractImageFilterID3ID3_cast


def itkExtractImageFilterIF2IF2_New():
    return itkExtractImageFilterIF2IF2.New()

class itkExtractImageFilterIF2IF2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IF2):
    r"""


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. For
    example, we have a image 4D = a 4x4x4x4 image, and we want to get a 3D
    image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter  {Core/Common/CropImageBySpecifyingRegion,Crop
    Image By Specifying Region} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIF2IF2_Clone)
    SetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIF2IF2_SetDirectionCollapseToStrategy)
    GetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIF2IF2_GetDirectionCollapseToStrategy)
    SetDirectionCollapseToGuess = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIF2IF2_SetDirectionCollapseToGuess)
    SetDirectionCollapseToIdentity = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIF2IF2_SetDirectionCollapseToIdentity)
    SetDirectionCollapseToSubmatrix = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIF2IF2_SetDirectionCollapseToSubmatrix)
    SetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIF2IF2_SetExtractionRegion)
    GetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIF2IF2_GetExtractionRegion)
    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterIF2IF2_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterIF2IF2
    cast = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterIF2IF2

        Create a new object of the class itkExtractImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExtractImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExtractImageFilterIF2IF2 in _itkExtractImageFilterPython:
_itkExtractImageFilterPython.itkExtractImageFilterIF2IF2_swigregister(itkExtractImageFilterIF2IF2)
itkExtractImageFilterIF2IF2___New_orig__ = _itkExtractImageFilterPython.itkExtractImageFilterIF2IF2___New_orig__
itkExtractImageFilterIF2IF2_cast = _itkExtractImageFilterPython.itkExtractImageFilterIF2IF2_cast


def itkExtractImageFilterIF3IF2_New():
    return itkExtractImageFilterIF3IF2.New()

class itkExtractImageFilterIF3IF2(itk.itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3IF2):
    r"""


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. For
    example, we have a image 4D = a 4x4x4x4 image, and we want to get a 3D
    image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter  {Core/Common/CropImageBySpecifyingRegion,Crop
    Image By Specifying Region} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterIF3IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIF3IF2_Clone)
    SetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIF3IF2_SetDirectionCollapseToStrategy)
    GetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIF3IF2_GetDirectionCollapseToStrategy)
    SetDirectionCollapseToGuess = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIF3IF2_SetDirectionCollapseToGuess)
    SetDirectionCollapseToIdentity = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIF3IF2_SetDirectionCollapseToIdentity)
    SetDirectionCollapseToSubmatrix = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIF3IF2_SetDirectionCollapseToSubmatrix)
    SetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIF3IF2_SetExtractionRegion)
    GetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIF3IF2_GetExtractionRegion)
    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterIF3IF2_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterIF3IF2
    cast = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterIF3IF2_cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterIF3IF2

        Create a new object of the class itkExtractImageFilterIF3IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterIF3IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterIF3IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExtractImageFilterIF3IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExtractImageFilterIF3IF2 in _itkExtractImageFilterPython:
_itkExtractImageFilterPython.itkExtractImageFilterIF3IF2_swigregister(itkExtractImageFilterIF3IF2)
itkExtractImageFilterIF3IF2___New_orig__ = _itkExtractImageFilterPython.itkExtractImageFilterIF3IF2___New_orig__
itkExtractImageFilterIF3IF2_cast = _itkExtractImageFilterPython.itkExtractImageFilterIF3IF2_cast


def itkExtractImageFilterIF3IF3_New():
    return itkExtractImageFilterIF3IF3.New()

class itkExtractImageFilterIF3IF3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    r"""


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. For
    example, we have a image 4D = a 4x4x4x4 image, and we want to get a 3D
    image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter  {Core/Common/CropImageBySpecifyingRegion,Crop
    Image By Specifying Region} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIF3IF3_Clone)
    SetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIF3IF3_SetDirectionCollapseToStrategy)
    GetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIF3IF3_GetDirectionCollapseToStrategy)
    SetDirectionCollapseToGuess = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIF3IF3_SetDirectionCollapseToGuess)
    SetDirectionCollapseToIdentity = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIF3IF3_SetDirectionCollapseToIdentity)
    SetDirectionCollapseToSubmatrix = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIF3IF3_SetDirectionCollapseToSubmatrix)
    SetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIF3IF3_SetExtractionRegion)
    GetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIF3IF3_GetExtractionRegion)
    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterIF3IF3_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterIF3IF3
    cast = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterIF3IF3

        Create a new object of the class itkExtractImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExtractImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExtractImageFilterIF3IF3 in _itkExtractImageFilterPython:
_itkExtractImageFilterPython.itkExtractImageFilterIF3IF3_swigregister(itkExtractImageFilterIF3IF3)
itkExtractImageFilterIF3IF3___New_orig__ = _itkExtractImageFilterPython.itkExtractImageFilterIF3IF3___New_orig__
itkExtractImageFilterIF3IF3_cast = _itkExtractImageFilterPython.itkExtractImageFilterIF3IF3_cast


def itkExtractImageFilterIRGBAUC2IRGBAUC2_New():
    return itkExtractImageFilterIRGBAUC2IRGBAUC2.New()

class itkExtractImageFilterIRGBAUC2IRGBAUC2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBAUC2IRGBAUC2):
    r"""


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. For
    example, we have a image 4D = a 4x4x4x4 image, and we want to get a 3D
    image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter  {Core/Common/CropImageBySpecifyingRegion,Crop
    Image By Specifying Region} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC2IRGBAUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC2IRGBAUC2_Clone)
    SetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC2IRGBAUC2_SetDirectionCollapseToStrategy)
    GetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC2IRGBAUC2_GetDirectionCollapseToStrategy)
    SetDirectionCollapseToGuess = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC2IRGBAUC2_SetDirectionCollapseToGuess)
    SetDirectionCollapseToIdentity = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC2IRGBAUC2_SetDirectionCollapseToIdentity)
    SetDirectionCollapseToSubmatrix = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC2IRGBAUC2_SetDirectionCollapseToSubmatrix)
    SetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC2IRGBAUC2_SetExtractionRegion)
    GetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC2IRGBAUC2_GetExtractionRegion)
    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC2IRGBAUC2_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterIRGBAUC2IRGBAUC2
    cast = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC2IRGBAUC2_cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterIRGBAUC2IRGBAUC2

        Create a new object of the class itkExtractImageFilterIRGBAUC2IRGBAUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterIRGBAUC2IRGBAUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterIRGBAUC2IRGBAUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExtractImageFilterIRGBAUC2IRGBAUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExtractImageFilterIRGBAUC2IRGBAUC2 in _itkExtractImageFilterPython:
_itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC2IRGBAUC2_swigregister(itkExtractImageFilterIRGBAUC2IRGBAUC2)
itkExtractImageFilterIRGBAUC2IRGBAUC2___New_orig__ = _itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC2IRGBAUC2___New_orig__
itkExtractImageFilterIRGBAUC2IRGBAUC2_cast = _itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC2IRGBAUC2_cast


def itkExtractImageFilterIRGBAUC3IRGBAUC3_New():
    return itkExtractImageFilterIRGBAUC3IRGBAUC3.New()

class itkExtractImageFilterIRGBAUC3IRGBAUC3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBAUC3IRGBAUC3):
    r"""


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. For
    example, we have a image 4D = a 4x4x4x4 image, and we want to get a 3D
    image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter  {Core/Common/CropImageBySpecifyingRegion,Crop
    Image By Specifying Region} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC3IRGBAUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC3IRGBAUC3_Clone)
    SetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC3IRGBAUC3_SetDirectionCollapseToStrategy)
    GetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC3IRGBAUC3_GetDirectionCollapseToStrategy)
    SetDirectionCollapseToGuess = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC3IRGBAUC3_SetDirectionCollapseToGuess)
    SetDirectionCollapseToIdentity = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC3IRGBAUC3_SetDirectionCollapseToIdentity)
    SetDirectionCollapseToSubmatrix = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC3IRGBAUC3_SetDirectionCollapseToSubmatrix)
    SetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC3IRGBAUC3_SetExtractionRegion)
    GetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC3IRGBAUC3_GetExtractionRegion)
    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC3IRGBAUC3_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterIRGBAUC3IRGBAUC3
    cast = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC3IRGBAUC3_cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterIRGBAUC3IRGBAUC3

        Create a new object of the class itkExtractImageFilterIRGBAUC3IRGBAUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterIRGBAUC3IRGBAUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterIRGBAUC3IRGBAUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExtractImageFilterIRGBAUC3IRGBAUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExtractImageFilterIRGBAUC3IRGBAUC3 in _itkExtractImageFilterPython:
_itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC3IRGBAUC3_swigregister(itkExtractImageFilterIRGBAUC3IRGBAUC3)
itkExtractImageFilterIRGBAUC3IRGBAUC3___New_orig__ = _itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC3IRGBAUC3___New_orig__
itkExtractImageFilterIRGBAUC3IRGBAUC3_cast = _itkExtractImageFilterPython.itkExtractImageFilterIRGBAUC3IRGBAUC3_cast


def itkExtractImageFilterIRGBUC2IRGBUC2_New():
    return itkExtractImageFilterIRGBUC2IRGBUC2.New()

class itkExtractImageFilterIRGBUC2IRGBUC2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBUC2IRGBUC2):
    r"""


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. For
    example, we have a image 4D = a 4x4x4x4 image, and we want to get a 3D
    image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter  {Core/Common/CropImageBySpecifyingRegion,Crop
    Image By Specifying Region} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC2IRGBUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC2IRGBUC2_Clone)
    SetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC2IRGBUC2_SetDirectionCollapseToStrategy)
    GetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC2IRGBUC2_GetDirectionCollapseToStrategy)
    SetDirectionCollapseToGuess = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC2IRGBUC2_SetDirectionCollapseToGuess)
    SetDirectionCollapseToIdentity = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC2IRGBUC2_SetDirectionCollapseToIdentity)
    SetDirectionCollapseToSubmatrix = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC2IRGBUC2_SetDirectionCollapseToSubmatrix)
    SetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC2IRGBUC2_SetExtractionRegion)
    GetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC2IRGBUC2_GetExtractionRegion)
    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterIRGBUC2IRGBUC2_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterIRGBUC2IRGBUC2
    cast = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC2IRGBUC2_cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterIRGBUC2IRGBUC2

        Create a new object of the class itkExtractImageFilterIRGBUC2IRGBUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterIRGBUC2IRGBUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterIRGBUC2IRGBUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExtractImageFilterIRGBUC2IRGBUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExtractImageFilterIRGBUC2IRGBUC2 in _itkExtractImageFilterPython:
_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC2IRGBUC2_swigregister(itkExtractImageFilterIRGBUC2IRGBUC2)
itkExtractImageFilterIRGBUC2IRGBUC2___New_orig__ = _itkExtractImageFilterPython.itkExtractImageFilterIRGBUC2IRGBUC2___New_orig__
itkExtractImageFilterIRGBUC2IRGBUC2_cast = _itkExtractImageFilterPython.itkExtractImageFilterIRGBUC2IRGBUC2_cast


def itkExtractImageFilterIRGBUC3IRGBUC2_New():
    return itkExtractImageFilterIRGBUC3IRGBUC2.New()

class itkExtractImageFilterIRGBUC3IRGBUC2(itk.itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC3IRGBUC2):
    r"""


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. For
    example, we have a image 4D = a 4x4x4x4 image, and we want to get a 3D
    image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter  {Core/Common/CropImageBySpecifyingRegion,Crop
    Image By Specifying Region} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC2_Clone)
    SetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC2_SetDirectionCollapseToStrategy)
    GetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC2_GetDirectionCollapseToStrategy)
    SetDirectionCollapseToGuess = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC2_SetDirectionCollapseToGuess)
    SetDirectionCollapseToIdentity = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC2_SetDirectionCollapseToIdentity)
    SetDirectionCollapseToSubmatrix = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC2_SetDirectionCollapseToSubmatrix)
    SetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC2_SetExtractionRegion)
    GetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC2_GetExtractionRegion)
    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC2_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterIRGBUC3IRGBUC2
    cast = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC2_cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterIRGBUC3IRGBUC2

        Create a new object of the class itkExtractImageFilterIRGBUC3IRGBUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterIRGBUC3IRGBUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterIRGBUC3IRGBUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExtractImageFilterIRGBUC3IRGBUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExtractImageFilterIRGBUC3IRGBUC2 in _itkExtractImageFilterPython:
_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC2_swigregister(itkExtractImageFilterIRGBUC3IRGBUC2)
itkExtractImageFilterIRGBUC3IRGBUC2___New_orig__ = _itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC2___New_orig__
itkExtractImageFilterIRGBUC3IRGBUC2_cast = _itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC2_cast


def itkExtractImageFilterIRGBUC3IRGBUC3_New():
    return itkExtractImageFilterIRGBUC3IRGBUC3.New()

class itkExtractImageFilterIRGBUC3IRGBUC3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBUC3IRGBUC3):
    r"""


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. For
    example, we have a image 4D = a 4x4x4x4 image, and we want to get a 3D
    image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter  {Core/Common/CropImageBySpecifyingRegion,Crop
    Image By Specifying Region} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC3_Clone)
    SetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC3_SetDirectionCollapseToStrategy)
    GetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC3_GetDirectionCollapseToStrategy)
    SetDirectionCollapseToGuess = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC3_SetDirectionCollapseToGuess)
    SetDirectionCollapseToIdentity = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC3_SetDirectionCollapseToIdentity)
    SetDirectionCollapseToSubmatrix = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC3_SetDirectionCollapseToSubmatrix)
    SetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC3_SetExtractionRegion)
    GetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC3_GetExtractionRegion)
    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC3_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterIRGBUC3IRGBUC3
    cast = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC3_cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterIRGBUC3IRGBUC3

        Create a new object of the class itkExtractImageFilterIRGBUC3IRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterIRGBUC3IRGBUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterIRGBUC3IRGBUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExtractImageFilterIRGBUC3IRGBUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExtractImageFilterIRGBUC3IRGBUC3 in _itkExtractImageFilterPython:
_itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC3_swigregister(itkExtractImageFilterIRGBUC3IRGBUC3)
itkExtractImageFilterIRGBUC3IRGBUC3___New_orig__ = _itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC3___New_orig__
itkExtractImageFilterIRGBUC3IRGBUC3_cast = _itkExtractImageFilterPython.itkExtractImageFilterIRGBUC3IRGBUC3_cast


def itkExtractImageFilterISS2ISS2_New():
    return itkExtractImageFilterISS2ISS2.New()

class itkExtractImageFilterISS2ISS2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2ISS2):
    r"""


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. For
    example, we have a image 4D = a 4x4x4x4 image, and we want to get a 3D
    image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter  {Core/Common/CropImageBySpecifyingRegion,Crop
    Image By Specifying Region} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterISS2ISS2_Clone)
    SetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterISS2ISS2_SetDirectionCollapseToStrategy)
    GetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterISS2ISS2_GetDirectionCollapseToStrategy)
    SetDirectionCollapseToGuess = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterISS2ISS2_SetDirectionCollapseToGuess)
    SetDirectionCollapseToIdentity = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterISS2ISS2_SetDirectionCollapseToIdentity)
    SetDirectionCollapseToSubmatrix = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterISS2ISS2_SetDirectionCollapseToSubmatrix)
    SetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterISS2ISS2_SetExtractionRegion)
    GetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterISS2ISS2_GetExtractionRegion)
    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterISS2ISS2_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterISS2ISS2

        Create a new object of the class itkExtractImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExtractImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExtractImageFilterISS2ISS2 in _itkExtractImageFilterPython:
_itkExtractImageFilterPython.itkExtractImageFilterISS2ISS2_swigregister(itkExtractImageFilterISS2ISS2)
itkExtractImageFilterISS2ISS2___New_orig__ = _itkExtractImageFilterPython.itkExtractImageFilterISS2ISS2___New_orig__
itkExtractImageFilterISS2ISS2_cast = _itkExtractImageFilterPython.itkExtractImageFilterISS2ISS2_cast


def itkExtractImageFilterISS3ISS2_New():
    return itkExtractImageFilterISS3ISS2.New()

class itkExtractImageFilterISS3ISS2(itk.itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3ISS2):
    r"""


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. For
    example, we have a image 4D = a 4x4x4x4 image, and we want to get a 3D
    image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter  {Core/Common/CropImageBySpecifyingRegion,Crop
    Image By Specifying Region} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterISS3ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterISS3ISS2_Clone)
    SetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterISS3ISS2_SetDirectionCollapseToStrategy)
    GetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterISS3ISS2_GetDirectionCollapseToStrategy)
    SetDirectionCollapseToGuess = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterISS3ISS2_SetDirectionCollapseToGuess)
    SetDirectionCollapseToIdentity = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterISS3ISS2_SetDirectionCollapseToIdentity)
    SetDirectionCollapseToSubmatrix = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterISS3ISS2_SetDirectionCollapseToSubmatrix)
    SetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterISS3ISS2_SetExtractionRegion)
    GetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterISS3ISS2_GetExtractionRegion)
    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterISS3ISS2_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterISS3ISS2
    cast = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterISS3ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterISS3ISS2

        Create a new object of the class itkExtractImageFilterISS3ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterISS3ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterISS3ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExtractImageFilterISS3ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExtractImageFilterISS3ISS2 in _itkExtractImageFilterPython:
_itkExtractImageFilterPython.itkExtractImageFilterISS3ISS2_swigregister(itkExtractImageFilterISS3ISS2)
itkExtractImageFilterISS3ISS2___New_orig__ = _itkExtractImageFilterPython.itkExtractImageFilterISS3ISS2___New_orig__
itkExtractImageFilterISS3ISS2_cast = _itkExtractImageFilterPython.itkExtractImageFilterISS3ISS2_cast


def itkExtractImageFilterISS3ISS3_New():
    return itkExtractImageFilterISS3ISS3.New()

class itkExtractImageFilterISS3ISS3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3ISS3):
    r"""


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. For
    example, we have a image 4D = a 4x4x4x4 image, and we want to get a 3D
    image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter  {Core/Common/CropImageBySpecifyingRegion,Crop
    Image By Specifying Region} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterISS3ISS3_Clone)
    SetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterISS3ISS3_SetDirectionCollapseToStrategy)
    GetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterISS3ISS3_GetDirectionCollapseToStrategy)
    SetDirectionCollapseToGuess = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterISS3ISS3_SetDirectionCollapseToGuess)
    SetDirectionCollapseToIdentity = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterISS3ISS3_SetDirectionCollapseToIdentity)
    SetDirectionCollapseToSubmatrix = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterISS3ISS3_SetDirectionCollapseToSubmatrix)
    SetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterISS3ISS3_SetExtractionRegion)
    GetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterISS3ISS3_GetExtractionRegion)
    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterISS3ISS3_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterISS3ISS3

        Create a new object of the class itkExtractImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExtractImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExtractImageFilterISS3ISS3 in _itkExtractImageFilterPython:
_itkExtractImageFilterPython.itkExtractImageFilterISS3ISS3_swigregister(itkExtractImageFilterISS3ISS3)
itkExtractImageFilterISS3ISS3___New_orig__ = _itkExtractImageFilterPython.itkExtractImageFilterISS3ISS3___New_orig__
itkExtractImageFilterISS3ISS3_cast = _itkExtractImageFilterPython.itkExtractImageFilterISS3ISS3_cast


def itkExtractImageFilterIUC2IUC2_New():
    return itkExtractImageFilterIUC2IUC2.New()

class itkExtractImageFilterIUC2IUC2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUC2):
    r"""


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. For
    example, we have a image 4D = a 4x4x4x4 image, and we want to get a 3D
    image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter  {Core/Common/CropImageBySpecifyingRegion,Crop
    Image By Specifying Region} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUC2IUC2_Clone)
    SetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUC2IUC2_SetDirectionCollapseToStrategy)
    GetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUC2IUC2_GetDirectionCollapseToStrategy)
    SetDirectionCollapseToGuess = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUC2IUC2_SetDirectionCollapseToGuess)
    SetDirectionCollapseToIdentity = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUC2IUC2_SetDirectionCollapseToIdentity)
    SetDirectionCollapseToSubmatrix = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUC2IUC2_SetDirectionCollapseToSubmatrix)
    SetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUC2IUC2_SetExtractionRegion)
    GetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUC2IUC2_GetExtractionRegion)
    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterIUC2IUC2_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterIUC2IUC2

        Create a new object of the class itkExtractImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExtractImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExtractImageFilterIUC2IUC2 in _itkExtractImageFilterPython:
_itkExtractImageFilterPython.itkExtractImageFilterIUC2IUC2_swigregister(itkExtractImageFilterIUC2IUC2)
itkExtractImageFilterIUC2IUC2___New_orig__ = _itkExtractImageFilterPython.itkExtractImageFilterIUC2IUC2___New_orig__
itkExtractImageFilterIUC2IUC2_cast = _itkExtractImageFilterPython.itkExtractImageFilterIUC2IUC2_cast


def itkExtractImageFilterIUC3IUC2_New():
    return itkExtractImageFilterIUC3IUC2.New()

class itkExtractImageFilterIUC3IUC2(itk.itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3IUC2):
    r"""


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. For
    example, we have a image 4D = a 4x4x4x4 image, and we want to get a 3D
    image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter  {Core/Common/CropImageBySpecifyingRegion,Crop
    Image By Specifying Region} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC2_Clone)
    SetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC2_SetDirectionCollapseToStrategy)
    GetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC2_GetDirectionCollapseToStrategy)
    SetDirectionCollapseToGuess = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC2_SetDirectionCollapseToGuess)
    SetDirectionCollapseToIdentity = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC2_SetDirectionCollapseToIdentity)
    SetDirectionCollapseToSubmatrix = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC2_SetDirectionCollapseToSubmatrix)
    SetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC2_SetExtractionRegion)
    GetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC2_GetExtractionRegion)
    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC2_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterIUC3IUC2
    cast = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterIUC3IUC2

        Create a new object of the class itkExtractImageFilterIUC3IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterIUC3IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterIUC3IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExtractImageFilterIUC3IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExtractImageFilterIUC3IUC2 in _itkExtractImageFilterPython:
_itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC2_swigregister(itkExtractImageFilterIUC3IUC2)
itkExtractImageFilterIUC3IUC2___New_orig__ = _itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC2___New_orig__
itkExtractImageFilterIUC3IUC2_cast = _itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC2_cast


def itkExtractImageFilterIUC3IUC3_New():
    return itkExtractImageFilterIUC3IUC3.New()

class itkExtractImageFilterIUC3IUC3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUC3):
    r"""


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. For
    example, we have a image 4D = a 4x4x4x4 image, and we want to get a 3D
    image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter  {Core/Common/CropImageBySpecifyingRegion,Crop
    Image By Specifying Region} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC3_Clone)
    SetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC3_SetDirectionCollapseToStrategy)
    GetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC3_GetDirectionCollapseToStrategy)
    SetDirectionCollapseToGuess = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC3_SetDirectionCollapseToGuess)
    SetDirectionCollapseToIdentity = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC3_SetDirectionCollapseToIdentity)
    SetDirectionCollapseToSubmatrix = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC3_SetDirectionCollapseToSubmatrix)
    SetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC3_SetExtractionRegion)
    GetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC3_GetExtractionRegion)
    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC3_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterIUC3IUC3

        Create a new object of the class itkExtractImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExtractImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExtractImageFilterIUC3IUC3 in _itkExtractImageFilterPython:
_itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC3_swigregister(itkExtractImageFilterIUC3IUC3)
itkExtractImageFilterIUC3IUC3___New_orig__ = _itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC3___New_orig__
itkExtractImageFilterIUC3IUC3_cast = _itkExtractImageFilterPython.itkExtractImageFilterIUC3IUC3_cast


def itkExtractImageFilterIUL2IUL2_New():
    return itkExtractImageFilterIUL2IUL2.New()

class itkExtractImageFilterIUL2IUL2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IUL2):
    r"""


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. For
    example, we have a image 4D = a 4x4x4x4 image, and we want to get a 3D
    image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter  {Core/Common/CropImageBySpecifyingRegion,Crop
    Image By Specifying Region} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterIUL2IUL2___New_orig__)
    Clone = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUL2IUL2_Clone)
    SetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUL2IUL2_SetDirectionCollapseToStrategy)
    GetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUL2IUL2_GetDirectionCollapseToStrategy)
    SetDirectionCollapseToGuess = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUL2IUL2_SetDirectionCollapseToGuess)
    SetDirectionCollapseToIdentity = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUL2IUL2_SetDirectionCollapseToIdentity)
    SetDirectionCollapseToSubmatrix = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUL2IUL2_SetDirectionCollapseToSubmatrix)
    SetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUL2IUL2_SetExtractionRegion)
    GetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUL2IUL2_GetExtractionRegion)
    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterIUL2IUL2_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterIUL2IUL2
    cast = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterIUL2IUL2_cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterIUL2IUL2

        Create a new object of the class itkExtractImageFilterIUL2IUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterIUL2IUL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterIUL2IUL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExtractImageFilterIUL2IUL2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExtractImageFilterIUL2IUL2 in _itkExtractImageFilterPython:
_itkExtractImageFilterPython.itkExtractImageFilterIUL2IUL2_swigregister(itkExtractImageFilterIUL2IUL2)
itkExtractImageFilterIUL2IUL2___New_orig__ = _itkExtractImageFilterPython.itkExtractImageFilterIUL2IUL2___New_orig__
itkExtractImageFilterIUL2IUL2_cast = _itkExtractImageFilterPython.itkExtractImageFilterIUL2IUL2_cast


def itkExtractImageFilterIUL3IUL3_New():
    return itkExtractImageFilterIUL3IUL3.New()

class itkExtractImageFilterIUL3IUL3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IUL3):
    r"""


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. For
    example, we have a image 4D = a 4x4x4x4 image, and we want to get a 3D
    image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter  {Core/Common/CropImageBySpecifyingRegion,Crop
    Image By Specifying Region} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterIUL3IUL3___New_orig__)
    Clone = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUL3IUL3_Clone)
    SetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUL3IUL3_SetDirectionCollapseToStrategy)
    GetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUL3IUL3_GetDirectionCollapseToStrategy)
    SetDirectionCollapseToGuess = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUL3IUL3_SetDirectionCollapseToGuess)
    SetDirectionCollapseToIdentity = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUL3IUL3_SetDirectionCollapseToIdentity)
    SetDirectionCollapseToSubmatrix = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUL3IUL3_SetDirectionCollapseToSubmatrix)
    SetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUL3IUL3_SetExtractionRegion)
    GetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUL3IUL3_GetExtractionRegion)
    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterIUL3IUL3_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterIUL3IUL3
    cast = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterIUL3IUL3_cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterIUL3IUL3

        Create a new object of the class itkExtractImageFilterIUL3IUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterIUL3IUL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterIUL3IUL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExtractImageFilterIUL3IUL3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExtractImageFilterIUL3IUL3 in _itkExtractImageFilterPython:
_itkExtractImageFilterPython.itkExtractImageFilterIUL3IUL3_swigregister(itkExtractImageFilterIUL3IUL3)
itkExtractImageFilterIUL3IUL3___New_orig__ = _itkExtractImageFilterPython.itkExtractImageFilterIUL3IUL3___New_orig__
itkExtractImageFilterIUL3IUL3_cast = _itkExtractImageFilterPython.itkExtractImageFilterIUL3IUL3_cast


def itkExtractImageFilterIUS2IUS2_New():
    return itkExtractImageFilterIUS2IUS2.New()

class itkExtractImageFilterIUS2IUS2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUS2):
    r"""


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. For
    example, we have a image 4D = a 4x4x4x4 image, and we want to get a 3D
    image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter  {Core/Common/CropImageBySpecifyingRegion,Crop
    Image By Specifying Region} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUS2IUS2_Clone)
    SetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUS2IUS2_SetDirectionCollapseToStrategy)
    GetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUS2IUS2_GetDirectionCollapseToStrategy)
    SetDirectionCollapseToGuess = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUS2IUS2_SetDirectionCollapseToGuess)
    SetDirectionCollapseToIdentity = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUS2IUS2_SetDirectionCollapseToIdentity)
    SetDirectionCollapseToSubmatrix = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUS2IUS2_SetDirectionCollapseToSubmatrix)
    SetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUS2IUS2_SetExtractionRegion)
    GetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUS2IUS2_GetExtractionRegion)
    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterIUS2IUS2_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterIUS2IUS2

        Create a new object of the class itkExtractImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExtractImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExtractImageFilterIUS2IUS2 in _itkExtractImageFilterPython:
_itkExtractImageFilterPython.itkExtractImageFilterIUS2IUS2_swigregister(itkExtractImageFilterIUS2IUS2)
itkExtractImageFilterIUS2IUS2___New_orig__ = _itkExtractImageFilterPython.itkExtractImageFilterIUS2IUS2___New_orig__
itkExtractImageFilterIUS2IUS2_cast = _itkExtractImageFilterPython.itkExtractImageFilterIUS2IUS2_cast


def itkExtractImageFilterIUS3IUS2_New():
    return itkExtractImageFilterIUS3IUS2.New()

class itkExtractImageFilterIUS3IUS2(itk.itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3IUS2):
    r"""


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. For
    example, we have a image 4D = a 4x4x4x4 image, and we want to get a 3D
    image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter  {Core/Common/CropImageBySpecifyingRegion,Crop
    Image By Specifying Region} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS2_Clone)
    SetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS2_SetDirectionCollapseToStrategy)
    GetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS2_GetDirectionCollapseToStrategy)
    SetDirectionCollapseToGuess = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS2_SetDirectionCollapseToGuess)
    SetDirectionCollapseToIdentity = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS2_SetDirectionCollapseToIdentity)
    SetDirectionCollapseToSubmatrix = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS2_SetDirectionCollapseToSubmatrix)
    SetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS2_SetExtractionRegion)
    GetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS2_GetExtractionRegion)
    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS2_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterIUS3IUS2
    cast = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterIUS3IUS2

        Create a new object of the class itkExtractImageFilterIUS3IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterIUS3IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterIUS3IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExtractImageFilterIUS3IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExtractImageFilterIUS3IUS2 in _itkExtractImageFilterPython:
_itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS2_swigregister(itkExtractImageFilterIUS3IUS2)
itkExtractImageFilterIUS3IUS2___New_orig__ = _itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS2___New_orig__
itkExtractImageFilterIUS3IUS2_cast = _itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS2_cast


def itkExtractImageFilterIUS3IUS3_New():
    return itkExtractImageFilterIUS3IUS3.New()

class itkExtractImageFilterIUS3IUS3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUS3):
    r"""


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. For
    example, we have a image 4D = a 4x4x4x4 image, and we want to get a 3D
    image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter  {Core/Common/CropImageBySpecifyingRegion,Crop
    Image By Specifying Region} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS3_Clone)
    SetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS3_SetDirectionCollapseToStrategy)
    GetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS3_GetDirectionCollapseToStrategy)
    SetDirectionCollapseToGuess = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS3_SetDirectionCollapseToGuess)
    SetDirectionCollapseToIdentity = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS3_SetDirectionCollapseToIdentity)
    SetDirectionCollapseToSubmatrix = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS3_SetDirectionCollapseToSubmatrix)
    SetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS3_SetExtractionRegion)
    GetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS3_GetExtractionRegion)
    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS3_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterIUS3IUS3

        Create a new object of the class itkExtractImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExtractImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExtractImageFilterIUS3IUS3 in _itkExtractImageFilterPython:
_itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS3_swigregister(itkExtractImageFilterIUS3IUS3)
itkExtractImageFilterIUS3IUS3___New_orig__ = _itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS3___New_orig__
itkExtractImageFilterIUS3IUS3_cast = _itkExtractImageFilterPython.itkExtractImageFilterIUS3IUS3_cast


def itkExtractImageFilterIVF22IVF22_New():
    return itkExtractImageFilterIVF22IVF22.New()

class itkExtractImageFilterIVF22IVF22(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF22IVF22):
    r"""


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. For
    example, we have a image 4D = a 4x4x4x4 image, and we want to get a 3D
    image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter  {Core/Common/CropImageBySpecifyingRegion,Crop
    Image By Specifying Region} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF22IVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF22IVF22_Clone)
    SetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF22IVF22_SetDirectionCollapseToStrategy)
    GetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF22IVF22_GetDirectionCollapseToStrategy)
    SetDirectionCollapseToGuess = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF22IVF22_SetDirectionCollapseToGuess)
    SetDirectionCollapseToIdentity = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF22IVF22_SetDirectionCollapseToIdentity)
    SetDirectionCollapseToSubmatrix = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF22IVF22_SetDirectionCollapseToSubmatrix)
    SetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF22IVF22_SetExtractionRegion)
    GetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF22IVF22_GetExtractionRegion)
    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterIVF22IVF22_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterIVF22IVF22
    cast = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF22IVF22_cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterIVF22IVF22

        Create a new object of the class itkExtractImageFilterIVF22IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterIVF22IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterIVF22IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExtractImageFilterIVF22IVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExtractImageFilterIVF22IVF22 in _itkExtractImageFilterPython:
_itkExtractImageFilterPython.itkExtractImageFilterIVF22IVF22_swigregister(itkExtractImageFilterIVF22IVF22)
itkExtractImageFilterIVF22IVF22___New_orig__ = _itkExtractImageFilterPython.itkExtractImageFilterIVF22IVF22___New_orig__
itkExtractImageFilterIVF22IVF22_cast = _itkExtractImageFilterPython.itkExtractImageFilterIVF22IVF22_cast


def itkExtractImageFilterIVF23IVF23_New():
    return itkExtractImageFilterIVF23IVF23.New()

class itkExtractImageFilterIVF23IVF23(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF23IVF23):
    r"""


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. For
    example, we have a image 4D = a 4x4x4x4 image, and we want to get a 3D
    image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter  {Core/Common/CropImageBySpecifyingRegion,Crop
    Image By Specifying Region} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF23IVF23___New_orig__)
    Clone = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF23IVF23_Clone)
    SetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF23IVF23_SetDirectionCollapseToStrategy)
    GetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF23IVF23_GetDirectionCollapseToStrategy)
    SetDirectionCollapseToGuess = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF23IVF23_SetDirectionCollapseToGuess)
    SetDirectionCollapseToIdentity = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF23IVF23_SetDirectionCollapseToIdentity)
    SetDirectionCollapseToSubmatrix = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF23IVF23_SetDirectionCollapseToSubmatrix)
    SetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF23IVF23_SetExtractionRegion)
    GetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF23IVF23_GetExtractionRegion)
    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterIVF23IVF23_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterIVF23IVF23
    cast = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF23IVF23_cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterIVF23IVF23

        Create a new object of the class itkExtractImageFilterIVF23IVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterIVF23IVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterIVF23IVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExtractImageFilterIVF23IVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExtractImageFilterIVF23IVF23 in _itkExtractImageFilterPython:
_itkExtractImageFilterPython.itkExtractImageFilterIVF23IVF23_swigregister(itkExtractImageFilterIVF23IVF23)
itkExtractImageFilterIVF23IVF23___New_orig__ = _itkExtractImageFilterPython.itkExtractImageFilterIVF23IVF23___New_orig__
itkExtractImageFilterIVF23IVF23_cast = _itkExtractImageFilterPython.itkExtractImageFilterIVF23IVF23_cast


def itkExtractImageFilterIVF32IVF32_New():
    return itkExtractImageFilterIVF32IVF32.New()

class itkExtractImageFilterIVF32IVF32(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF32IVF32):
    r"""


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. For
    example, we have a image 4D = a 4x4x4x4 image, and we want to get a 3D
    image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter  {Core/Common/CropImageBySpecifyingRegion,Crop
    Image By Specifying Region} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF32IVF32___New_orig__)
    Clone = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF32IVF32_Clone)
    SetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF32IVF32_SetDirectionCollapseToStrategy)
    GetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF32IVF32_GetDirectionCollapseToStrategy)
    SetDirectionCollapseToGuess = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF32IVF32_SetDirectionCollapseToGuess)
    SetDirectionCollapseToIdentity = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF32IVF32_SetDirectionCollapseToIdentity)
    SetDirectionCollapseToSubmatrix = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF32IVF32_SetDirectionCollapseToSubmatrix)
    SetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF32IVF32_SetExtractionRegion)
    GetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF32IVF32_GetExtractionRegion)
    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterIVF32IVF32_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterIVF32IVF32
    cast = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF32IVF32_cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterIVF32IVF32

        Create a new object of the class itkExtractImageFilterIVF32IVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterIVF32IVF32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterIVF32IVF32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExtractImageFilterIVF32IVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExtractImageFilterIVF32IVF32 in _itkExtractImageFilterPython:
_itkExtractImageFilterPython.itkExtractImageFilterIVF32IVF32_swigregister(itkExtractImageFilterIVF32IVF32)
itkExtractImageFilterIVF32IVF32___New_orig__ = _itkExtractImageFilterPython.itkExtractImageFilterIVF32IVF32___New_orig__
itkExtractImageFilterIVF32IVF32_cast = _itkExtractImageFilterPython.itkExtractImageFilterIVF32IVF32_cast


def itkExtractImageFilterIVF33IVF33_New():
    return itkExtractImageFilterIVF33IVF33.New()

class itkExtractImageFilterIVF33IVF33(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF33IVF33):
    r"""


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. For
    example, we have a image 4D = a 4x4x4x4 image, and we want to get a 3D
    image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter  {Core/Common/CropImageBySpecifyingRegion,Crop
    Image By Specifying Region} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF33IVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF33IVF33_Clone)
    SetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF33IVF33_SetDirectionCollapseToStrategy)
    GetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF33IVF33_GetDirectionCollapseToStrategy)
    SetDirectionCollapseToGuess = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF33IVF33_SetDirectionCollapseToGuess)
    SetDirectionCollapseToIdentity = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF33IVF33_SetDirectionCollapseToIdentity)
    SetDirectionCollapseToSubmatrix = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF33IVF33_SetDirectionCollapseToSubmatrix)
    SetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF33IVF33_SetExtractionRegion)
    GetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF33IVF33_GetExtractionRegion)
    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterIVF33IVF33_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterIVF33IVF33
    cast = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF33IVF33_cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterIVF33IVF33

        Create a new object of the class itkExtractImageFilterIVF33IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterIVF33IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterIVF33IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExtractImageFilterIVF33IVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExtractImageFilterIVF33IVF33 in _itkExtractImageFilterPython:
_itkExtractImageFilterPython.itkExtractImageFilterIVF33IVF33_swigregister(itkExtractImageFilterIVF33IVF33)
itkExtractImageFilterIVF33IVF33___New_orig__ = _itkExtractImageFilterPython.itkExtractImageFilterIVF33IVF33___New_orig__
itkExtractImageFilterIVF33IVF33_cast = _itkExtractImageFilterPython.itkExtractImageFilterIVF33IVF33_cast


def itkExtractImageFilterIVF42IVF42_New():
    return itkExtractImageFilterIVF42IVF42.New()

class itkExtractImageFilterIVF42IVF42(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF42IVF42):
    r"""


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. For
    example, we have a image 4D = a 4x4x4x4 image, and we want to get a 3D
    image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter  {Core/Common/CropImageBySpecifyingRegion,Crop
    Image By Specifying Region} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF42IVF42___New_orig__)
    Clone = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF42IVF42_Clone)
    SetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF42IVF42_SetDirectionCollapseToStrategy)
    GetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF42IVF42_GetDirectionCollapseToStrategy)
    SetDirectionCollapseToGuess = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF42IVF42_SetDirectionCollapseToGuess)
    SetDirectionCollapseToIdentity = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF42IVF42_SetDirectionCollapseToIdentity)
    SetDirectionCollapseToSubmatrix = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF42IVF42_SetDirectionCollapseToSubmatrix)
    SetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF42IVF42_SetExtractionRegion)
    GetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF42IVF42_GetExtractionRegion)
    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterIVF42IVF42_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterIVF42IVF42
    cast = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF42IVF42_cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterIVF42IVF42

        Create a new object of the class itkExtractImageFilterIVF42IVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterIVF42IVF42.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterIVF42IVF42.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExtractImageFilterIVF42IVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExtractImageFilterIVF42IVF42 in _itkExtractImageFilterPython:
_itkExtractImageFilterPython.itkExtractImageFilterIVF42IVF42_swigregister(itkExtractImageFilterIVF42IVF42)
itkExtractImageFilterIVF42IVF42___New_orig__ = _itkExtractImageFilterPython.itkExtractImageFilterIVF42IVF42___New_orig__
itkExtractImageFilterIVF42IVF42_cast = _itkExtractImageFilterPython.itkExtractImageFilterIVF42IVF42_cast


def itkExtractImageFilterIVF43IVF43_New():
    return itkExtractImageFilterIVF43IVF43.New()

class itkExtractImageFilterIVF43IVF43(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF43IVF43):
    r"""


    Decrease the image size by cropping the image to the selected region
    bounds.

    ExtractImageFilter changes the image boundary of an image by removing
    pixels outside the target region. The target region must be specified.

    ExtractImageFilter also collapses dimensions so that the input image
    may have more dimensions than the output image (i.e. 4-D input image
    to a 3-D output image). To specify what dimensions to collapse, the
    ExtractionRegion must be specified. For any dimension dim where
    ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
    to collapse on is specified by ExtractionRegion.Index[dim]. For
    example, we have a image 4D = a 4x4x4x4 image, and we want to get a 3D
    image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
    3rd "time" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
    ExtractionRegion.Index = [0,0,0,2].

    The number of dimension in ExtractionRegion.Size and Index must =
    InputImageDimension. The number of non-zero dimensions in
    ExtractionRegion.Size must = OutputImageDimension.

    The output image produced by this filter will have the same origin as
    the input image, while the ImageRegion of the output image will start
    at the starting index value provided in the ExtractRegion parameter.
    If you are looking for a filter that will re-compute the origin of the
    output image, and provide an output image region whose index is set to
    zeros, then you may want to use the RegionOfInterestImageFilter. The
    output spacing is is simply the collapsed version of the input
    spacing.

    Determining the direction of the collapsed output image from an larger
    dimensional input space is an ill defined problem in general. It is
    required that the application developer select the desired
    transformation strategy for collapsing direction cosines. It is
    REQUIRED that a strategy be explicitly requested (i.e. there is no
    working default). Direction Collapsing Strategies: 1)
    DirectionCollapseToUnknown(); This is the default and the filter can
    not run when this is set. The reason is to explicitly force the
    application developer to define their desired behavior. 1)
    DirectionCollapseToIdentity(); Output has identity direction no matter
    what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
    matrix if it is positive definite, else throw an exception.

    This filter is implemented as a multithreaded filter. It provides a
    DynamicThreadedGenerateData() method for its implementation.

    This filter is derived from InPlaceImageFilter. When the input to this
    filter matched the output requested region, like with streaming filter
    for input, then setting this filter to run in-place will result in no
    copying of the bulk pixel data.

    See:  CropImageFilter  {Core/Common/CropImageBySpecifyingRegion,Crop
    Image By Specifying Region} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF43IVF43___New_orig__)
    Clone = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF43IVF43_Clone)
    SetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF43IVF43_SetDirectionCollapseToStrategy)
    GetDirectionCollapseToStrategy = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF43IVF43_GetDirectionCollapseToStrategy)
    SetDirectionCollapseToGuess = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF43IVF43_SetDirectionCollapseToGuess)
    SetDirectionCollapseToIdentity = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF43IVF43_SetDirectionCollapseToIdentity)
    SetDirectionCollapseToSubmatrix = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF43IVF43_SetDirectionCollapseToSubmatrix)
    SetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF43IVF43_SetExtractionRegion)
    GetExtractionRegion = _swig_new_instance_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF43IVF43_GetExtractionRegion)
    InputCovertibleToOutputCheck = _itkExtractImageFilterPython.itkExtractImageFilterIVF43IVF43_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkExtractImageFilterPython.delete_itkExtractImageFilterIVF43IVF43
    cast = _swig_new_static_method(_itkExtractImageFilterPython.itkExtractImageFilterIVF43IVF43_cast)

    def New(*args, **kargs):
        """New() -> itkExtractImageFilterIVF43IVF43

        Create a new object of the class itkExtractImageFilterIVF43IVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtractImageFilterIVF43IVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExtractImageFilterIVF43IVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExtractImageFilterIVF43IVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExtractImageFilterIVF43IVF43 in _itkExtractImageFilterPython:
_itkExtractImageFilterPython.itkExtractImageFilterIVF43IVF43_swigregister(itkExtractImageFilterIVF43IVF43)
itkExtractImageFilterIVF43IVF43___New_orig__ = _itkExtractImageFilterPython.itkExtractImageFilterIVF43IVF43___New_orig__
itkExtractImageFilterIVF43IVF43_cast = _itkExtractImageFilterPython.itkExtractImageFilterIVF43IVF43_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def extract_image_filter(*args, **kwargs):
    """Procedural interface for ExtractImageFilter"""
    import itk
    instance = itk.ExtractImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def extract_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ExtractImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.ExtractImageFilter.values()[0]
    else:
        filter_object = itk.ExtractImageFilter

    extract_image_filter.__doc__ = filter_object.__doc__
    extract_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    extract_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.ExtractImageFilter, itkTemplate.itkTemplate):
        extract_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        extract_image_filter.__doc__ += "\n"
        extract_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        extract_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



