# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKStatisticsPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkNormalVariateGeneratorPython
else:
    import _itkNormalVariateGeneratorPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkNormalVariateGeneratorPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkNormalVariateGeneratorPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython

def itkNormalVariateGenerator_New():
    return itkNormalVariateGenerator.New()

class itkNormalVariateGenerator(itk.ITKCommonBasePython.itkRandomVariateGeneratorBase):
    r"""


    Normal random variate generator.

    This generation method was initially developed and implemented by
    Martin Styner, University of North Carolina at Chapel Hill, and his
    colleagues.

    You should run Initialize() function before call GetNormalVariate()
    function.

    The followings are original comments.

    Revision date 31 May 1996 This is a revised version of the algorithm
    described in

    ACM Transactions on Mathematical Software, Vol 22, No 1 March 1996, pp
    119-127.

    It is somewhat faster, and uses less memory as the vector of variates
    is updated in-situ. It has passed all the same statistical tests as
    described in the TOMS article, plus others. Seems OK so far.   Works
    well with total pool of 1024 variates, and does not need two vectors
    of this size, so does less damage to cache.            Has been tested
    for frequency of tail values which    should occur once in a million.
    OK. Other usual tests OK.    About 13 % faster than TOMS version.
    FAST GENERATOR OF PSEUDO-RANDOM UNIT NORMAL VARIATES C.S.Wallace,
    Monash University, 1994

    To use this code, files needing to call the generator should include:
    and be linked with the maths library (-lm) FastNorm.h contains
    declaration of the initialization routine 'initnorm()', definition of
    a macro 'FastGauss' used to generate variates, and three variables
    used in the macro. Read below for calling conventions.

    THIS CODE ASSUMES TWO'S-COMPLEMENT 32-BIT INTEGER ARITHMATIC. IT ALSO
    ASSUMES THE 'C' COMPILER COMPILES THE LEFT-SHIFT OPERATOR "<<" AS A
    LOGICAL SHIFT, DISCARDING THE SIGN DIGIT AND SHIFTING IN ZEROS ON THE
    RIGHT, SO " X << 1" IS EQUIVALENT TO " X+X ". IT ALSO ASSUMES THE
    RIGHT-SHIFT OPERATOR ">>" IS SIGN-PRESERVING, SO ( -2 >> 1) = -1, (
    -1>>1) = -1.

    A fast generator of pseudo-random variates from the unit Normal
    distribution. It keeps a pool of about 1000 variates, and generates
    new ones by picking 4 from the pool, rotating the 4-vector with these
    as its components, and replacing the old variates with the components
    of the rotated vector.

    The program should initialize the generator by calling initnorm(seed)
    with seed a int integer seed value. Different seed values will give
    different sequences of Normals. Then, wherever the program needs a new
    Normal variate, it should use the macro FastGauss, e.g. in statements
    like: x = FastGauss; (Sets x to a random Normal value) 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNormalVariateGeneratorPython.itkNormalVariateGenerator___New_orig__)
    Clone = _swig_new_instance_method(_itkNormalVariateGeneratorPython.itkNormalVariateGenerator_Clone)
    Initialize = _swig_new_instance_method(_itkNormalVariateGeneratorPython.itkNormalVariateGenerator_Initialize)
    __swig_destroy__ = _itkNormalVariateGeneratorPython.delete_itkNormalVariateGenerator
    cast = _swig_new_static_method(_itkNormalVariateGeneratorPython.itkNormalVariateGenerator_cast)

    def New(*args, **kargs):
        """New() -> itkNormalVariateGenerator

        Create a new object of the class itkNormalVariateGenerator and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalVariateGenerator.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalVariateGenerator.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalVariateGenerator.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalVariateGenerator in _itkNormalVariateGeneratorPython:
_itkNormalVariateGeneratorPython.itkNormalVariateGenerator_swigregister(itkNormalVariateGenerator)
itkNormalVariateGenerator___New_orig__ = _itkNormalVariateGeneratorPython.itkNormalVariateGenerator___New_orig__
itkNormalVariateGenerator_cast = _itkNormalVariateGeneratorPython.itkNormalVariateGenerator_cast



