# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKConvolutionPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkFFTConvolutionImageFilterPython
else:
    import _itkFFTConvolutionImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkFFTConvolutionImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkFFTConvolutionImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkConvolutionImageFilterBasePython
import itk.itkImagePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkImageRegionPython
import itk.ITKCommonBasePython
import itk.itkRGBPixelPython
import itk.itkFixedArrayPython
import itk.stdcomplexPython
import itk.itkRGBAPixelPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.itkCovariantVectorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageBoundaryConditionPython
import itk.itkImageToImageFilterAPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython

def itkFFTConvolutionImageFilterID2ID2_New():
    return itkFFTConvolutionImageFilterID2ID2.New()

class itkFFTConvolutionImageFilterID2ID2(itk.itkConvolutionImageFilterBasePython.itkConvolutionImageFilterBaseID2ID2):
    r"""


    Convolve a given image with an arbitrary image kernel using
    multiplication in the Fourier domain.

    This filter produces output equivalent to the output of the
    ConvolutionImageFilter. However, it takes advantage of the convolution
    theorem to accelerate the convolution computation when the kernel is
    large.

    WARNING:  This filter ignores the spacing, origin, and orientation of
    the kernel image and treats them as identical to those in the input
    image.  This code was adapted from the Insight Journal contribution:

    "FFT Based Convolution" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3154

    See:   ConvolutionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterID2ID2_Clone)
    SetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterID2ID2_SetSizeGreatestPrimeFactor)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterID2ID2_GetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkFFTConvolutionImageFilterPython.delete_itkFFTConvolutionImageFilterID2ID2
    cast = _swig_new_static_method(_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkFFTConvolutionImageFilterID2ID2

        Create a new object of the class itkFFTConvolutionImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTConvolutionImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTConvolutionImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTConvolutionImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTConvolutionImageFilterID2ID2 in _itkFFTConvolutionImageFilterPython:
_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterID2ID2_swigregister(itkFFTConvolutionImageFilterID2ID2)
itkFFTConvolutionImageFilterID2ID2___New_orig__ = _itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterID2ID2___New_orig__
itkFFTConvolutionImageFilterID2ID2_cast = _itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterID2ID2_cast


def itkFFTConvolutionImageFilterID3ID3_New():
    return itkFFTConvolutionImageFilterID3ID3.New()

class itkFFTConvolutionImageFilterID3ID3(itk.itkConvolutionImageFilterBasePython.itkConvolutionImageFilterBaseID3ID3):
    r"""


    Convolve a given image with an arbitrary image kernel using
    multiplication in the Fourier domain.

    This filter produces output equivalent to the output of the
    ConvolutionImageFilter. However, it takes advantage of the convolution
    theorem to accelerate the convolution computation when the kernel is
    large.

    WARNING:  This filter ignores the spacing, origin, and orientation of
    the kernel image and treats them as identical to those in the input
    image.  This code was adapted from the Insight Journal contribution:

    "FFT Based Convolution" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3154

    See:   ConvolutionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterID3ID3_Clone)
    SetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterID3ID3_SetSizeGreatestPrimeFactor)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterID3ID3_GetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkFFTConvolutionImageFilterPython.delete_itkFFTConvolutionImageFilterID3ID3
    cast = _swig_new_static_method(_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkFFTConvolutionImageFilterID3ID3

        Create a new object of the class itkFFTConvolutionImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTConvolutionImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTConvolutionImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTConvolutionImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTConvolutionImageFilterID3ID3 in _itkFFTConvolutionImageFilterPython:
_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterID3ID3_swigregister(itkFFTConvolutionImageFilterID3ID3)
itkFFTConvolutionImageFilterID3ID3___New_orig__ = _itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterID3ID3___New_orig__
itkFFTConvolutionImageFilterID3ID3_cast = _itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterID3ID3_cast


def itkFFTConvolutionImageFilterIF2IF2_New():
    return itkFFTConvolutionImageFilterIF2IF2.New()

class itkFFTConvolutionImageFilterIF2IF2(itk.itkConvolutionImageFilterBasePython.itkConvolutionImageFilterBaseIF2IF2):
    r"""


    Convolve a given image with an arbitrary image kernel using
    multiplication in the Fourier domain.

    This filter produces output equivalent to the output of the
    ConvolutionImageFilter. However, it takes advantage of the convolution
    theorem to accelerate the convolution computation when the kernel is
    large.

    WARNING:  This filter ignores the spacing, origin, and orientation of
    the kernel image and treats them as identical to those in the input
    image.  This code was adapted from the Insight Journal contribution:

    "FFT Based Convolution" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3154

    See:   ConvolutionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIF2IF2_Clone)
    SetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIF2IF2_SetSizeGreatestPrimeFactor)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIF2IF2_GetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkFFTConvolutionImageFilterPython.delete_itkFFTConvolutionImageFilterIF2IF2
    cast = _swig_new_static_method(_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkFFTConvolutionImageFilterIF2IF2

        Create a new object of the class itkFFTConvolutionImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTConvolutionImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTConvolutionImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTConvolutionImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTConvolutionImageFilterIF2IF2 in _itkFFTConvolutionImageFilterPython:
_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIF2IF2_swigregister(itkFFTConvolutionImageFilterIF2IF2)
itkFFTConvolutionImageFilterIF2IF2___New_orig__ = _itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIF2IF2___New_orig__
itkFFTConvolutionImageFilterIF2IF2_cast = _itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIF2IF2_cast


def itkFFTConvolutionImageFilterIF3IF3_New():
    return itkFFTConvolutionImageFilterIF3IF3.New()

class itkFFTConvolutionImageFilterIF3IF3(itk.itkConvolutionImageFilterBasePython.itkConvolutionImageFilterBaseIF3IF3):
    r"""


    Convolve a given image with an arbitrary image kernel using
    multiplication in the Fourier domain.

    This filter produces output equivalent to the output of the
    ConvolutionImageFilter. However, it takes advantage of the convolution
    theorem to accelerate the convolution computation when the kernel is
    large.

    WARNING:  This filter ignores the spacing, origin, and orientation of
    the kernel image and treats them as identical to those in the input
    image.  This code was adapted from the Insight Journal contribution:

    "FFT Based Convolution" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3154

    See:   ConvolutionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIF3IF3_Clone)
    SetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIF3IF3_SetSizeGreatestPrimeFactor)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIF3IF3_GetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkFFTConvolutionImageFilterPython.delete_itkFFTConvolutionImageFilterIF3IF3
    cast = _swig_new_static_method(_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkFFTConvolutionImageFilterIF3IF3

        Create a new object of the class itkFFTConvolutionImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTConvolutionImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTConvolutionImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTConvolutionImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTConvolutionImageFilterIF3IF3 in _itkFFTConvolutionImageFilterPython:
_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIF3IF3_swigregister(itkFFTConvolutionImageFilterIF3IF3)
itkFFTConvolutionImageFilterIF3IF3___New_orig__ = _itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIF3IF3___New_orig__
itkFFTConvolutionImageFilterIF3IF3_cast = _itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIF3IF3_cast


def itkFFTConvolutionImageFilterISS2ISS2_New():
    return itkFFTConvolutionImageFilterISS2ISS2.New()

class itkFFTConvolutionImageFilterISS2ISS2(itk.itkConvolutionImageFilterBasePython.itkConvolutionImageFilterBaseISS2ISS2):
    r"""


    Convolve a given image with an arbitrary image kernel using
    multiplication in the Fourier domain.

    This filter produces output equivalent to the output of the
    ConvolutionImageFilter. However, it takes advantage of the convolution
    theorem to accelerate the convolution computation when the kernel is
    large.

    WARNING:  This filter ignores the spacing, origin, and orientation of
    the kernel image and treats them as identical to those in the input
    image.  This code was adapted from the Insight Journal contribution:

    "FFT Based Convolution" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3154

    See:   ConvolutionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterISS2ISS2_Clone)
    SetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterISS2ISS2_SetSizeGreatestPrimeFactor)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterISS2ISS2_GetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkFFTConvolutionImageFilterPython.delete_itkFFTConvolutionImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkFFTConvolutionImageFilterISS2ISS2

        Create a new object of the class itkFFTConvolutionImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTConvolutionImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTConvolutionImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTConvolutionImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTConvolutionImageFilterISS2ISS2 in _itkFFTConvolutionImageFilterPython:
_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterISS2ISS2_swigregister(itkFFTConvolutionImageFilterISS2ISS2)
itkFFTConvolutionImageFilterISS2ISS2___New_orig__ = _itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterISS2ISS2___New_orig__
itkFFTConvolutionImageFilterISS2ISS2_cast = _itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterISS2ISS2_cast


def itkFFTConvolutionImageFilterISS3ISS3_New():
    return itkFFTConvolutionImageFilterISS3ISS3.New()

class itkFFTConvolutionImageFilterISS3ISS3(itk.itkConvolutionImageFilterBasePython.itkConvolutionImageFilterBaseISS3ISS3):
    r"""


    Convolve a given image with an arbitrary image kernel using
    multiplication in the Fourier domain.

    This filter produces output equivalent to the output of the
    ConvolutionImageFilter. However, it takes advantage of the convolution
    theorem to accelerate the convolution computation when the kernel is
    large.

    WARNING:  This filter ignores the spacing, origin, and orientation of
    the kernel image and treats them as identical to those in the input
    image.  This code was adapted from the Insight Journal contribution:

    "FFT Based Convolution" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3154

    See:   ConvolutionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterISS3ISS3_Clone)
    SetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterISS3ISS3_SetSizeGreatestPrimeFactor)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterISS3ISS3_GetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkFFTConvolutionImageFilterPython.delete_itkFFTConvolutionImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkFFTConvolutionImageFilterISS3ISS3

        Create a new object of the class itkFFTConvolutionImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTConvolutionImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTConvolutionImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTConvolutionImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTConvolutionImageFilterISS3ISS3 in _itkFFTConvolutionImageFilterPython:
_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterISS3ISS3_swigregister(itkFFTConvolutionImageFilterISS3ISS3)
itkFFTConvolutionImageFilterISS3ISS3___New_orig__ = _itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterISS3ISS3___New_orig__
itkFFTConvolutionImageFilterISS3ISS3_cast = _itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterISS3ISS3_cast


def itkFFTConvolutionImageFilterIUC2IUC2_New():
    return itkFFTConvolutionImageFilterIUC2IUC2.New()

class itkFFTConvolutionImageFilterIUC2IUC2(itk.itkConvolutionImageFilterBasePython.itkConvolutionImageFilterBaseIUC2IUC2):
    r"""


    Convolve a given image with an arbitrary image kernel using
    multiplication in the Fourier domain.

    This filter produces output equivalent to the output of the
    ConvolutionImageFilter. However, it takes advantage of the convolution
    theorem to accelerate the convolution computation when the kernel is
    large.

    WARNING:  This filter ignores the spacing, origin, and orientation of
    the kernel image and treats them as identical to those in the input
    image.  This code was adapted from the Insight Journal contribution:

    "FFT Based Convolution" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3154

    See:   ConvolutionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIUC2IUC2_Clone)
    SetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIUC2IUC2_SetSizeGreatestPrimeFactor)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIUC2IUC2_GetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkFFTConvolutionImageFilterPython.delete_itkFFTConvolutionImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkFFTConvolutionImageFilterIUC2IUC2

        Create a new object of the class itkFFTConvolutionImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTConvolutionImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTConvolutionImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTConvolutionImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTConvolutionImageFilterIUC2IUC2 in _itkFFTConvolutionImageFilterPython:
_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIUC2IUC2_swigregister(itkFFTConvolutionImageFilterIUC2IUC2)
itkFFTConvolutionImageFilterIUC2IUC2___New_orig__ = _itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIUC2IUC2___New_orig__
itkFFTConvolutionImageFilterIUC2IUC2_cast = _itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIUC2IUC2_cast


def itkFFTConvolutionImageFilterIUC3IUC3_New():
    return itkFFTConvolutionImageFilterIUC3IUC3.New()

class itkFFTConvolutionImageFilterIUC3IUC3(itk.itkConvolutionImageFilterBasePython.itkConvolutionImageFilterBaseIUC3IUC3):
    r"""


    Convolve a given image with an arbitrary image kernel using
    multiplication in the Fourier domain.

    This filter produces output equivalent to the output of the
    ConvolutionImageFilter. However, it takes advantage of the convolution
    theorem to accelerate the convolution computation when the kernel is
    large.

    WARNING:  This filter ignores the spacing, origin, and orientation of
    the kernel image and treats them as identical to those in the input
    image.  This code was adapted from the Insight Journal contribution:

    "FFT Based Convolution" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3154

    See:   ConvolutionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIUC3IUC3_Clone)
    SetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIUC3IUC3_SetSizeGreatestPrimeFactor)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIUC3IUC3_GetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkFFTConvolutionImageFilterPython.delete_itkFFTConvolutionImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkFFTConvolutionImageFilterIUC3IUC3

        Create a new object of the class itkFFTConvolutionImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTConvolutionImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTConvolutionImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTConvolutionImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTConvolutionImageFilterIUC3IUC3 in _itkFFTConvolutionImageFilterPython:
_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIUC3IUC3_swigregister(itkFFTConvolutionImageFilterIUC3IUC3)
itkFFTConvolutionImageFilterIUC3IUC3___New_orig__ = _itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIUC3IUC3___New_orig__
itkFFTConvolutionImageFilterIUC3IUC3_cast = _itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIUC3IUC3_cast


def itkFFTConvolutionImageFilterIUS2IUS2_New():
    return itkFFTConvolutionImageFilterIUS2IUS2.New()

class itkFFTConvolutionImageFilterIUS2IUS2(itk.itkConvolutionImageFilterBasePython.itkConvolutionImageFilterBaseIUS2IUS2):
    r"""


    Convolve a given image with an arbitrary image kernel using
    multiplication in the Fourier domain.

    This filter produces output equivalent to the output of the
    ConvolutionImageFilter. However, it takes advantage of the convolution
    theorem to accelerate the convolution computation when the kernel is
    large.

    WARNING:  This filter ignores the spacing, origin, and orientation of
    the kernel image and treats them as identical to those in the input
    image.  This code was adapted from the Insight Journal contribution:

    "FFT Based Convolution" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3154

    See:   ConvolutionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIUS2IUS2_Clone)
    SetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIUS2IUS2_SetSizeGreatestPrimeFactor)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIUS2IUS2_GetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkFFTConvolutionImageFilterPython.delete_itkFFTConvolutionImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkFFTConvolutionImageFilterIUS2IUS2

        Create a new object of the class itkFFTConvolutionImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTConvolutionImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTConvolutionImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTConvolutionImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTConvolutionImageFilterIUS2IUS2 in _itkFFTConvolutionImageFilterPython:
_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIUS2IUS2_swigregister(itkFFTConvolutionImageFilterIUS2IUS2)
itkFFTConvolutionImageFilterIUS2IUS2___New_orig__ = _itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIUS2IUS2___New_orig__
itkFFTConvolutionImageFilterIUS2IUS2_cast = _itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIUS2IUS2_cast


def itkFFTConvolutionImageFilterIUS3IUS3_New():
    return itkFFTConvolutionImageFilterIUS3IUS3.New()

class itkFFTConvolutionImageFilterIUS3IUS3(itk.itkConvolutionImageFilterBasePython.itkConvolutionImageFilterBaseIUS3IUS3):
    r"""


    Convolve a given image with an arbitrary image kernel using
    multiplication in the Fourier domain.

    This filter produces output equivalent to the output of the
    ConvolutionImageFilter. However, it takes advantage of the convolution
    theorem to accelerate the convolution computation when the kernel is
    large.

    WARNING:  This filter ignores the spacing, origin, and orientation of
    the kernel image and treats them as identical to those in the input
    image.  This code was adapted from the Insight Journal contribution:

    "FFT Based Convolution" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3154

    See:   ConvolutionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIUS3IUS3_Clone)
    SetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIUS3IUS3_SetSizeGreatestPrimeFactor)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIUS3IUS3_GetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkFFTConvolutionImageFilterPython.delete_itkFFTConvolutionImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkFFTConvolutionImageFilterIUS3IUS3

        Create a new object of the class itkFFTConvolutionImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTConvolutionImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTConvolutionImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTConvolutionImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTConvolutionImageFilterIUS3IUS3 in _itkFFTConvolutionImageFilterPython:
_itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIUS3IUS3_swigregister(itkFFTConvolutionImageFilterIUS3IUS3)
itkFFTConvolutionImageFilterIUS3IUS3___New_orig__ = _itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIUS3IUS3___New_orig__
itkFFTConvolutionImageFilterIUS3IUS3_cast = _itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def fft_convolution_image_filter(*args, **kwargs):
    """Procedural interface for FFTConvolutionImageFilter"""
    import itk
    instance = itk.FFTConvolutionImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def fft_convolution_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.FFTConvolutionImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.FFTConvolutionImageFilter.values()[0]
    else:
        filter_object = itk.FFTConvolutionImageFilter

    fft_convolution_image_filter.__doc__ = filter_object.__doc__
    fft_convolution_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    fft_convolution_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.FFTConvolutionImageFilter, itkTemplate.itkTemplate):
        fft_convolution_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        fft_convolution_image_filter.__doc__ += "\n"
        fft_convolution_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        fft_convolution_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



