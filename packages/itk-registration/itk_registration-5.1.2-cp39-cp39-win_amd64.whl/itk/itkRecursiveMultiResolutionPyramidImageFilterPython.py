# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKRegistrationCommonPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkRecursiveMultiResolutionPyramidImageFilterPython
else:
    import _itkRecursiveMultiResolutionPyramidImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkRecursiveMultiResolutionPyramidImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkRecursiveMultiResolutionPyramidImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkMultiResolutionPyramidImageFilterPython
import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkArray2DPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.itkImageToImageFilterAPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkFixedArrayPython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkRGBPixelPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython

def itkRecursiveMultiResolutionPyramidImageFilterID2ID2_New():
    return itkRecursiveMultiResolutionPyramidImageFilterID2ID2.New()

class itkRecursiveMultiResolutionPyramidImageFilterID2ID2(itk.itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2):
    r"""


    Creates a multi-resolution pyramid using a recursive implementation.

    RecursiveMultiResolutionPyramidImageFilter creates an image pryamid
    according to a user defined multi-resolution schedule.

    If a schedule is downward divisible, a fast recursive implementation
    is used to generate the output images. If the schedule is not downward
    divisible the superclass ( MultiResolutionPyramidImageFilter)
    implementation is used instead. A schedule is downward divisible if at
    every level, the shrink factors are divisible by the shrink factors at
    the next level for the same dimension.

    See documentation of MultiResolutionPyramidImageFilter for information
    on how to specify a multi-resolution schedule.

    Note that unlike the MultiResolutionPyramidImageFilter,
    RecursiveMultiResolutionPyramidImageFilter will not smooth the output
    at the finest level if the shrink factors are all one and the schedule
    is downward divisible.

    This class is templated over the input image type and the output image
    type.

    This filter uses multithreaded filters to perform the smoothing and
    downsampling.

    This filter supports streaming.

    See:   MultiResolutionPyramidImageFilter
    {Registration/Common/MultiresolutionPyramidFromImage,Multiresolution
    Pyramid From Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterID2ID2_Clone)
    __swig_destroy__ = _itkRecursiveMultiResolutionPyramidImageFilterPython.delete_itkRecursiveMultiResolutionPyramidImageFilterID2ID2
    cast = _swig_new_static_method(_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkRecursiveMultiResolutionPyramidImageFilterID2ID2

        Create a new object of the class itkRecursiveMultiResolutionPyramidImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveMultiResolutionPyramidImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRecursiveMultiResolutionPyramidImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRecursiveMultiResolutionPyramidImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRecursiveMultiResolutionPyramidImageFilterID2ID2 in _itkRecursiveMultiResolutionPyramidImageFilterPython:
_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterID2ID2_swigregister(itkRecursiveMultiResolutionPyramidImageFilterID2ID2)
itkRecursiveMultiResolutionPyramidImageFilterID2ID2___New_orig__ = _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterID2ID2___New_orig__
itkRecursiveMultiResolutionPyramidImageFilterID2ID2_cast = _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterID2ID2_cast


def itkRecursiveMultiResolutionPyramidImageFilterID3ID3_New():
    return itkRecursiveMultiResolutionPyramidImageFilterID3ID3.New()

class itkRecursiveMultiResolutionPyramidImageFilterID3ID3(itk.itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3):
    r"""


    Creates a multi-resolution pyramid using a recursive implementation.

    RecursiveMultiResolutionPyramidImageFilter creates an image pryamid
    according to a user defined multi-resolution schedule.

    If a schedule is downward divisible, a fast recursive implementation
    is used to generate the output images. If the schedule is not downward
    divisible the superclass ( MultiResolutionPyramidImageFilter)
    implementation is used instead. A schedule is downward divisible if at
    every level, the shrink factors are divisible by the shrink factors at
    the next level for the same dimension.

    See documentation of MultiResolutionPyramidImageFilter for information
    on how to specify a multi-resolution schedule.

    Note that unlike the MultiResolutionPyramidImageFilter,
    RecursiveMultiResolutionPyramidImageFilter will not smooth the output
    at the finest level if the shrink factors are all one and the schedule
    is downward divisible.

    This class is templated over the input image type and the output image
    type.

    This filter uses multithreaded filters to perform the smoothing and
    downsampling.

    This filter supports streaming.

    See:   MultiResolutionPyramidImageFilter
    {Registration/Common/MultiresolutionPyramidFromImage,Multiresolution
    Pyramid From Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterID3ID3_Clone)
    __swig_destroy__ = _itkRecursiveMultiResolutionPyramidImageFilterPython.delete_itkRecursiveMultiResolutionPyramidImageFilterID3ID3
    cast = _swig_new_static_method(_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkRecursiveMultiResolutionPyramidImageFilterID3ID3

        Create a new object of the class itkRecursiveMultiResolutionPyramidImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveMultiResolutionPyramidImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRecursiveMultiResolutionPyramidImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRecursiveMultiResolutionPyramidImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRecursiveMultiResolutionPyramidImageFilterID3ID3 in _itkRecursiveMultiResolutionPyramidImageFilterPython:
_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterID3ID3_swigregister(itkRecursiveMultiResolutionPyramidImageFilterID3ID3)
itkRecursiveMultiResolutionPyramidImageFilterID3ID3___New_orig__ = _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterID3ID3___New_orig__
itkRecursiveMultiResolutionPyramidImageFilterID3ID3_cast = _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterID3ID3_cast


def itkRecursiveMultiResolutionPyramidImageFilterIF2IF2_New():
    return itkRecursiveMultiResolutionPyramidImageFilterIF2IF2.New()

class itkRecursiveMultiResolutionPyramidImageFilterIF2IF2(itk.itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2):
    r"""


    Creates a multi-resolution pyramid using a recursive implementation.

    RecursiveMultiResolutionPyramidImageFilter creates an image pryamid
    according to a user defined multi-resolution schedule.

    If a schedule is downward divisible, a fast recursive implementation
    is used to generate the output images. If the schedule is not downward
    divisible the superclass ( MultiResolutionPyramidImageFilter)
    implementation is used instead. A schedule is downward divisible if at
    every level, the shrink factors are divisible by the shrink factors at
    the next level for the same dimension.

    See documentation of MultiResolutionPyramidImageFilter for information
    on how to specify a multi-resolution schedule.

    Note that unlike the MultiResolutionPyramidImageFilter,
    RecursiveMultiResolutionPyramidImageFilter will not smooth the output
    at the finest level if the shrink factors are all one and the schedule
    is downward divisible.

    This class is templated over the input image type and the output image
    type.

    This filter uses multithreaded filters to perform the smoothing and
    downsampling.

    This filter supports streaming.

    See:   MultiResolutionPyramidImageFilter
    {Registration/Common/MultiresolutionPyramidFromImage,Multiresolution
    Pyramid From Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIF2IF2_Clone)
    __swig_destroy__ = _itkRecursiveMultiResolutionPyramidImageFilterPython.delete_itkRecursiveMultiResolutionPyramidImageFilterIF2IF2
    cast = _swig_new_static_method(_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkRecursiveMultiResolutionPyramidImageFilterIF2IF2

        Create a new object of the class itkRecursiveMultiResolutionPyramidImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveMultiResolutionPyramidImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRecursiveMultiResolutionPyramidImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRecursiveMultiResolutionPyramidImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRecursiveMultiResolutionPyramidImageFilterIF2IF2 in _itkRecursiveMultiResolutionPyramidImageFilterPython:
_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIF2IF2_swigregister(itkRecursiveMultiResolutionPyramidImageFilterIF2IF2)
itkRecursiveMultiResolutionPyramidImageFilterIF2IF2___New_orig__ = _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIF2IF2___New_orig__
itkRecursiveMultiResolutionPyramidImageFilterIF2IF2_cast = _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIF2IF2_cast


def itkRecursiveMultiResolutionPyramidImageFilterIF3IF3_New():
    return itkRecursiveMultiResolutionPyramidImageFilterIF3IF3.New()

class itkRecursiveMultiResolutionPyramidImageFilterIF3IF3(itk.itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3):
    r"""


    Creates a multi-resolution pyramid using a recursive implementation.

    RecursiveMultiResolutionPyramidImageFilter creates an image pryamid
    according to a user defined multi-resolution schedule.

    If a schedule is downward divisible, a fast recursive implementation
    is used to generate the output images. If the schedule is not downward
    divisible the superclass ( MultiResolutionPyramidImageFilter)
    implementation is used instead. A schedule is downward divisible if at
    every level, the shrink factors are divisible by the shrink factors at
    the next level for the same dimension.

    See documentation of MultiResolutionPyramidImageFilter for information
    on how to specify a multi-resolution schedule.

    Note that unlike the MultiResolutionPyramidImageFilter,
    RecursiveMultiResolutionPyramidImageFilter will not smooth the output
    at the finest level if the shrink factors are all one and the schedule
    is downward divisible.

    This class is templated over the input image type and the output image
    type.

    This filter uses multithreaded filters to perform the smoothing and
    downsampling.

    This filter supports streaming.

    See:   MultiResolutionPyramidImageFilter
    {Registration/Common/MultiresolutionPyramidFromImage,Multiresolution
    Pyramid From Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIF3IF3_Clone)
    __swig_destroy__ = _itkRecursiveMultiResolutionPyramidImageFilterPython.delete_itkRecursiveMultiResolutionPyramidImageFilterIF3IF3
    cast = _swig_new_static_method(_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkRecursiveMultiResolutionPyramidImageFilterIF3IF3

        Create a new object of the class itkRecursiveMultiResolutionPyramidImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveMultiResolutionPyramidImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRecursiveMultiResolutionPyramidImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRecursiveMultiResolutionPyramidImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRecursiveMultiResolutionPyramidImageFilterIF3IF3 in _itkRecursiveMultiResolutionPyramidImageFilterPython:
_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIF3IF3_swigregister(itkRecursiveMultiResolutionPyramidImageFilterIF3IF3)
itkRecursiveMultiResolutionPyramidImageFilterIF3IF3___New_orig__ = _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIF3IF3___New_orig__
itkRecursiveMultiResolutionPyramidImageFilterIF3IF3_cast = _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIF3IF3_cast


def itkRecursiveMultiResolutionPyramidImageFilterISS2ISS2_New():
    return itkRecursiveMultiResolutionPyramidImageFilterISS2ISS2.New()

class itkRecursiveMultiResolutionPyramidImageFilterISS2ISS2(itk.itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2):
    r"""


    Creates a multi-resolution pyramid using a recursive implementation.

    RecursiveMultiResolutionPyramidImageFilter creates an image pryamid
    according to a user defined multi-resolution schedule.

    If a schedule is downward divisible, a fast recursive implementation
    is used to generate the output images. If the schedule is not downward
    divisible the superclass ( MultiResolutionPyramidImageFilter)
    implementation is used instead. A schedule is downward divisible if at
    every level, the shrink factors are divisible by the shrink factors at
    the next level for the same dimension.

    See documentation of MultiResolutionPyramidImageFilter for information
    on how to specify a multi-resolution schedule.

    Note that unlike the MultiResolutionPyramidImageFilter,
    RecursiveMultiResolutionPyramidImageFilter will not smooth the output
    at the finest level if the shrink factors are all one and the schedule
    is downward divisible.

    This class is templated over the input image type and the output image
    type.

    This filter uses multithreaded filters to perform the smoothing and
    downsampling.

    This filter supports streaming.

    See:   MultiResolutionPyramidImageFilter
    {Registration/Common/MultiresolutionPyramidFromImage,Multiresolution
    Pyramid From Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterISS2ISS2_Clone)
    __swig_destroy__ = _itkRecursiveMultiResolutionPyramidImageFilterPython.delete_itkRecursiveMultiResolutionPyramidImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkRecursiveMultiResolutionPyramidImageFilterISS2ISS2

        Create a new object of the class itkRecursiveMultiResolutionPyramidImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveMultiResolutionPyramidImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRecursiveMultiResolutionPyramidImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRecursiveMultiResolutionPyramidImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRecursiveMultiResolutionPyramidImageFilterISS2ISS2 in _itkRecursiveMultiResolutionPyramidImageFilterPython:
_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterISS2ISS2_swigregister(itkRecursiveMultiResolutionPyramidImageFilterISS2ISS2)
itkRecursiveMultiResolutionPyramidImageFilterISS2ISS2___New_orig__ = _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterISS2ISS2___New_orig__
itkRecursiveMultiResolutionPyramidImageFilterISS2ISS2_cast = _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterISS2ISS2_cast


def itkRecursiveMultiResolutionPyramidImageFilterISS3ISS3_New():
    return itkRecursiveMultiResolutionPyramidImageFilterISS3ISS3.New()

class itkRecursiveMultiResolutionPyramidImageFilterISS3ISS3(itk.itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3):
    r"""


    Creates a multi-resolution pyramid using a recursive implementation.

    RecursiveMultiResolutionPyramidImageFilter creates an image pryamid
    according to a user defined multi-resolution schedule.

    If a schedule is downward divisible, a fast recursive implementation
    is used to generate the output images. If the schedule is not downward
    divisible the superclass ( MultiResolutionPyramidImageFilter)
    implementation is used instead. A schedule is downward divisible if at
    every level, the shrink factors are divisible by the shrink factors at
    the next level for the same dimension.

    See documentation of MultiResolutionPyramidImageFilter for information
    on how to specify a multi-resolution schedule.

    Note that unlike the MultiResolutionPyramidImageFilter,
    RecursiveMultiResolutionPyramidImageFilter will not smooth the output
    at the finest level if the shrink factors are all one and the schedule
    is downward divisible.

    This class is templated over the input image type and the output image
    type.

    This filter uses multithreaded filters to perform the smoothing and
    downsampling.

    This filter supports streaming.

    See:   MultiResolutionPyramidImageFilter
    {Registration/Common/MultiresolutionPyramidFromImage,Multiresolution
    Pyramid From Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterISS3ISS3_Clone)
    __swig_destroy__ = _itkRecursiveMultiResolutionPyramidImageFilterPython.delete_itkRecursiveMultiResolutionPyramidImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkRecursiveMultiResolutionPyramidImageFilterISS3ISS3

        Create a new object of the class itkRecursiveMultiResolutionPyramidImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveMultiResolutionPyramidImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRecursiveMultiResolutionPyramidImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRecursiveMultiResolutionPyramidImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRecursiveMultiResolutionPyramidImageFilterISS3ISS3 in _itkRecursiveMultiResolutionPyramidImageFilterPython:
_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterISS3ISS3_swigregister(itkRecursiveMultiResolutionPyramidImageFilterISS3ISS3)
itkRecursiveMultiResolutionPyramidImageFilterISS3ISS3___New_orig__ = _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterISS3ISS3___New_orig__
itkRecursiveMultiResolutionPyramidImageFilterISS3ISS3_cast = _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterISS3ISS3_cast


def itkRecursiveMultiResolutionPyramidImageFilterIUC2IUC2_New():
    return itkRecursiveMultiResolutionPyramidImageFilterIUC2IUC2.New()

class itkRecursiveMultiResolutionPyramidImageFilterIUC2IUC2(itk.itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2):
    r"""


    Creates a multi-resolution pyramid using a recursive implementation.

    RecursiveMultiResolutionPyramidImageFilter creates an image pryamid
    according to a user defined multi-resolution schedule.

    If a schedule is downward divisible, a fast recursive implementation
    is used to generate the output images. If the schedule is not downward
    divisible the superclass ( MultiResolutionPyramidImageFilter)
    implementation is used instead. A schedule is downward divisible if at
    every level, the shrink factors are divisible by the shrink factors at
    the next level for the same dimension.

    See documentation of MultiResolutionPyramidImageFilter for information
    on how to specify a multi-resolution schedule.

    Note that unlike the MultiResolutionPyramidImageFilter,
    RecursiveMultiResolutionPyramidImageFilter will not smooth the output
    at the finest level if the shrink factors are all one and the schedule
    is downward divisible.

    This class is templated over the input image type and the output image
    type.

    This filter uses multithreaded filters to perform the smoothing and
    downsampling.

    This filter supports streaming.

    See:   MultiResolutionPyramidImageFilter
    {Registration/Common/MultiresolutionPyramidFromImage,Multiresolution
    Pyramid From Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIUC2IUC2_Clone)
    __swig_destroy__ = _itkRecursiveMultiResolutionPyramidImageFilterPython.delete_itkRecursiveMultiResolutionPyramidImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkRecursiveMultiResolutionPyramidImageFilterIUC2IUC2

        Create a new object of the class itkRecursiveMultiResolutionPyramidImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveMultiResolutionPyramidImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRecursiveMultiResolutionPyramidImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRecursiveMultiResolutionPyramidImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRecursiveMultiResolutionPyramidImageFilterIUC2IUC2 in _itkRecursiveMultiResolutionPyramidImageFilterPython:
_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIUC2IUC2_swigregister(itkRecursiveMultiResolutionPyramidImageFilterIUC2IUC2)
itkRecursiveMultiResolutionPyramidImageFilterIUC2IUC2___New_orig__ = _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIUC2IUC2___New_orig__
itkRecursiveMultiResolutionPyramidImageFilterIUC2IUC2_cast = _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIUC2IUC2_cast


def itkRecursiveMultiResolutionPyramidImageFilterIUC3IUC3_New():
    return itkRecursiveMultiResolutionPyramidImageFilterIUC3IUC3.New()

class itkRecursiveMultiResolutionPyramidImageFilterIUC3IUC3(itk.itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3):
    r"""


    Creates a multi-resolution pyramid using a recursive implementation.

    RecursiveMultiResolutionPyramidImageFilter creates an image pryamid
    according to a user defined multi-resolution schedule.

    If a schedule is downward divisible, a fast recursive implementation
    is used to generate the output images. If the schedule is not downward
    divisible the superclass ( MultiResolutionPyramidImageFilter)
    implementation is used instead. A schedule is downward divisible if at
    every level, the shrink factors are divisible by the shrink factors at
    the next level for the same dimension.

    See documentation of MultiResolutionPyramidImageFilter for information
    on how to specify a multi-resolution schedule.

    Note that unlike the MultiResolutionPyramidImageFilter,
    RecursiveMultiResolutionPyramidImageFilter will not smooth the output
    at the finest level if the shrink factors are all one and the schedule
    is downward divisible.

    This class is templated over the input image type and the output image
    type.

    This filter uses multithreaded filters to perform the smoothing and
    downsampling.

    This filter supports streaming.

    See:   MultiResolutionPyramidImageFilter
    {Registration/Common/MultiresolutionPyramidFromImage,Multiresolution
    Pyramid From Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIUC3IUC3_Clone)
    __swig_destroy__ = _itkRecursiveMultiResolutionPyramidImageFilterPython.delete_itkRecursiveMultiResolutionPyramidImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkRecursiveMultiResolutionPyramidImageFilterIUC3IUC3

        Create a new object of the class itkRecursiveMultiResolutionPyramidImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveMultiResolutionPyramidImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRecursiveMultiResolutionPyramidImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRecursiveMultiResolutionPyramidImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRecursiveMultiResolutionPyramidImageFilterIUC3IUC3 in _itkRecursiveMultiResolutionPyramidImageFilterPython:
_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIUC3IUC3_swigregister(itkRecursiveMultiResolutionPyramidImageFilterIUC3IUC3)
itkRecursiveMultiResolutionPyramidImageFilterIUC3IUC3___New_orig__ = _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIUC3IUC3___New_orig__
itkRecursiveMultiResolutionPyramidImageFilterIUC3IUC3_cast = _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIUC3IUC3_cast


def itkRecursiveMultiResolutionPyramidImageFilterIUS2IUS2_New():
    return itkRecursiveMultiResolutionPyramidImageFilterIUS2IUS2.New()

class itkRecursiveMultiResolutionPyramidImageFilterIUS2IUS2(itk.itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2):
    r"""


    Creates a multi-resolution pyramid using a recursive implementation.

    RecursiveMultiResolutionPyramidImageFilter creates an image pryamid
    according to a user defined multi-resolution schedule.

    If a schedule is downward divisible, a fast recursive implementation
    is used to generate the output images. If the schedule is not downward
    divisible the superclass ( MultiResolutionPyramidImageFilter)
    implementation is used instead. A schedule is downward divisible if at
    every level, the shrink factors are divisible by the shrink factors at
    the next level for the same dimension.

    See documentation of MultiResolutionPyramidImageFilter for information
    on how to specify a multi-resolution schedule.

    Note that unlike the MultiResolutionPyramidImageFilter,
    RecursiveMultiResolutionPyramidImageFilter will not smooth the output
    at the finest level if the shrink factors are all one and the schedule
    is downward divisible.

    This class is templated over the input image type and the output image
    type.

    This filter uses multithreaded filters to perform the smoothing and
    downsampling.

    This filter supports streaming.

    See:   MultiResolutionPyramidImageFilter
    {Registration/Common/MultiresolutionPyramidFromImage,Multiresolution
    Pyramid From Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIUS2IUS2_Clone)
    __swig_destroy__ = _itkRecursiveMultiResolutionPyramidImageFilterPython.delete_itkRecursiveMultiResolutionPyramidImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkRecursiveMultiResolutionPyramidImageFilterIUS2IUS2

        Create a new object of the class itkRecursiveMultiResolutionPyramidImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveMultiResolutionPyramidImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRecursiveMultiResolutionPyramidImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRecursiveMultiResolutionPyramidImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRecursiveMultiResolutionPyramidImageFilterIUS2IUS2 in _itkRecursiveMultiResolutionPyramidImageFilterPython:
_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIUS2IUS2_swigregister(itkRecursiveMultiResolutionPyramidImageFilterIUS2IUS2)
itkRecursiveMultiResolutionPyramidImageFilterIUS2IUS2___New_orig__ = _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIUS2IUS2___New_orig__
itkRecursiveMultiResolutionPyramidImageFilterIUS2IUS2_cast = _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIUS2IUS2_cast


def itkRecursiveMultiResolutionPyramidImageFilterIUS3IUS3_New():
    return itkRecursiveMultiResolutionPyramidImageFilterIUS3IUS3.New()

class itkRecursiveMultiResolutionPyramidImageFilterIUS3IUS3(itk.itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3):
    r"""


    Creates a multi-resolution pyramid using a recursive implementation.

    RecursiveMultiResolutionPyramidImageFilter creates an image pryamid
    according to a user defined multi-resolution schedule.

    If a schedule is downward divisible, a fast recursive implementation
    is used to generate the output images. If the schedule is not downward
    divisible the superclass ( MultiResolutionPyramidImageFilter)
    implementation is used instead. A schedule is downward divisible if at
    every level, the shrink factors are divisible by the shrink factors at
    the next level for the same dimension.

    See documentation of MultiResolutionPyramidImageFilter for information
    on how to specify a multi-resolution schedule.

    Note that unlike the MultiResolutionPyramidImageFilter,
    RecursiveMultiResolutionPyramidImageFilter will not smooth the output
    at the finest level if the shrink factors are all one and the schedule
    is downward divisible.

    This class is templated over the input image type and the output image
    type.

    This filter uses multithreaded filters to perform the smoothing and
    downsampling.

    This filter supports streaming.

    See:   MultiResolutionPyramidImageFilter
    {Registration/Common/MultiresolutionPyramidFromImage,Multiresolution
    Pyramid From Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIUS3IUS3_Clone)
    __swig_destroy__ = _itkRecursiveMultiResolutionPyramidImageFilterPython.delete_itkRecursiveMultiResolutionPyramidImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkRecursiveMultiResolutionPyramidImageFilterIUS3IUS3

        Create a new object of the class itkRecursiveMultiResolutionPyramidImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveMultiResolutionPyramidImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRecursiveMultiResolutionPyramidImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRecursiveMultiResolutionPyramidImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRecursiveMultiResolutionPyramidImageFilterIUS3IUS3 in _itkRecursiveMultiResolutionPyramidImageFilterPython:
_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIUS3IUS3_swigregister(itkRecursiveMultiResolutionPyramidImageFilterIUS3IUS3)
itkRecursiveMultiResolutionPyramidImageFilterIUS3IUS3___New_orig__ = _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIUS3IUS3___New_orig__
itkRecursiveMultiResolutionPyramidImageFilterIUS3IUS3_cast = _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def recursive_multi_resolution_pyramid_image_filter(*args, **kwargs):
    """Procedural interface for RecursiveMultiResolutionPyramidImageFilter"""
    import itk
    instance = itk.RecursiveMultiResolutionPyramidImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def recursive_multi_resolution_pyramid_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.RecursiveMultiResolutionPyramidImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.RecursiveMultiResolutionPyramidImageFilter.values()[0]
    else:
        filter_object = itk.RecursiveMultiResolutionPyramidImageFilter

    recursive_multi_resolution_pyramid_image_filter.__doc__ = filter_object.__doc__
    recursive_multi_resolution_pyramid_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    recursive_multi_resolution_pyramid_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.RecursiveMultiResolutionPyramidImageFilter, itkTemplate.itkTemplate):
        recursive_multi_resolution_pyramid_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        recursive_multi_resolution_pyramid_image_filter.__doc__ += "\n"
        recursive_multi_resolution_pyramid_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        recursive_multi_resolution_pyramid_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



