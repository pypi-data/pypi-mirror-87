# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKTransformPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkMatrixOffsetTransformBasePython
else:
    import _itkMatrixOffsetTransformBasePython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkMatrixOffsetTransformBasePython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkMatrixOffsetTransformBasePython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.itkOptimizerParametersPython
import itk.ITKCommonBasePython
import itk.itkArrayPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkVariableLengthVectorPython
import itk.itkCovariantVectorPython
import itk.itkDiffusionTensor3DPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.itkTransformBasePython
import itk.itkArray2DPython

def itkMatrixOffsetTransformBaseD22_New():
    return itkMatrixOffsetTransformBaseD22.New()

class itkMatrixOffsetTransformBaseD22(itk.itkTransformBasePython.itkTransformD22):
    r"""


    Matrix and Offset transformation of a vector space (e.g. space
    coordinates)

    This class serves as a base class for transforms that can be expressed
    as a linear transformation plus a constant offset (e.g., affine,
    similarity and rigid transforms). This base class also provides the
    concept of using a center of rotation and a translation instead of an
    offset.

    As derived instances of this class are specializations of an affine
    transform, any two of these transformations may be composed and the
    result is an affine transformation. However, the order is important.
    Given two affine transformations T1 and T2, we will say that
    "precomposing T1 with T2" yields the transformation which applies T1
    to the source, and then applies T2 to that result to obtain the
    target. Conversely, we will say that "postcomposing T1 with T2"
    yields the transformation which applies T2 to the source, and then
    applies T1 to that result to obtain the target. (Whether T1 or T2
    comes first lexicographically depends on whether you choose to write
    mappings from right-to-left or vice versa; we avoid the whole problem
    by referring to the order of application rather than the textual
    order.)

    Parameters:
    -----------

    TParametersValueType:  The type to be used for scalar numeric values.
    Either float or double.

    NInputDimensions:  The number of dimensions of the input vector space.

    NOutputDimensions:  The number of dimensions of the output vector
    space.

    This class provides several methods for setting the matrix and offset
    defining the transform. To support the registration framework, the
    transform parameters can also be set as an Array<TParametersValueType>
    of size (NInputDimension + 1) * NOutputDimension using method
    SetParameters(). The first (NOutputDimension x NInputDimension)
    parameters defines the matrix in row-major order (where the column
    index varies the fastest). The last NOutputDimension parameters
    defines the translation in each dimensions. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22___New_orig__)
    Clone = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_Clone)
    SetIdentity = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_SetIdentity)
    SetMatrix = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_SetMatrix)
    GetMatrix = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_GetMatrix)
    SetOffset = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_SetOffset)
    GetOffset = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_GetOffset)
    SetCenter = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_SetCenter)
    GetCenter = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_GetCenter)
    SetTranslation = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_SetTranslation)
    GetTranslation = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_GetTranslation)
    Compose = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_Compose)
    TransformVector = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_TransformVector)
    TransformCovariantVector = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_TransformCovariantVector)
    TransformDiffusionTensor3D = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_TransformDiffusionTensor3D)
    TransformSymmetricSecondRankTensor = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_TransformSymmetricSecondRankTensor)
    GetInverse = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_GetInverse)
    __swig_destroy__ = _itkMatrixOffsetTransformBasePython.delete_itkMatrixOffsetTransformBaseD22
    cast = _swig_new_static_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_cast)

    def New(*args, **kargs):
        """New() -> itkMatrixOffsetTransformBaseD22

        Create a new object of the class itkMatrixOffsetTransformBaseD22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMatrixOffsetTransformBaseD22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMatrixOffsetTransformBaseD22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMatrixOffsetTransformBaseD22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMatrixOffsetTransformBaseD22 in _itkMatrixOffsetTransformBasePython:
_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_swigregister(itkMatrixOffsetTransformBaseD22)
itkMatrixOffsetTransformBaseD22___New_orig__ = _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22___New_orig__
itkMatrixOffsetTransformBaseD22_cast = _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_cast


def itkMatrixOffsetTransformBaseD33_New():
    return itkMatrixOffsetTransformBaseD33.New()

class itkMatrixOffsetTransformBaseD33(itk.itkTransformBasePython.itkTransformD33):
    r"""


    Matrix and Offset transformation of a vector space (e.g. space
    coordinates)

    This class serves as a base class for transforms that can be expressed
    as a linear transformation plus a constant offset (e.g., affine,
    similarity and rigid transforms). This base class also provides the
    concept of using a center of rotation and a translation instead of an
    offset.

    As derived instances of this class are specializations of an affine
    transform, any two of these transformations may be composed and the
    result is an affine transformation. However, the order is important.
    Given two affine transformations T1 and T2, we will say that
    "precomposing T1 with T2" yields the transformation which applies T1
    to the source, and then applies T2 to that result to obtain the
    target. Conversely, we will say that "postcomposing T1 with T2"
    yields the transformation which applies T2 to the source, and then
    applies T1 to that result to obtain the target. (Whether T1 or T2
    comes first lexicographically depends on whether you choose to write
    mappings from right-to-left or vice versa; we avoid the whole problem
    by referring to the order of application rather than the textual
    order.)

    Parameters:
    -----------

    TParametersValueType:  The type to be used for scalar numeric values.
    Either float or double.

    NInputDimensions:  The number of dimensions of the input vector space.

    NOutputDimensions:  The number of dimensions of the output vector
    space.

    This class provides several methods for setting the matrix and offset
    defining the transform. To support the registration framework, the
    transform parameters can also be set as an Array<TParametersValueType>
    of size (NInputDimension + 1) * NOutputDimension using method
    SetParameters(). The first (NOutputDimension x NInputDimension)
    parameters defines the matrix in row-major order (where the column
    index varies the fastest). The last NOutputDimension parameters
    defines the translation in each dimensions. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33___New_orig__)
    Clone = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_Clone)
    SetIdentity = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_SetIdentity)
    SetMatrix = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_SetMatrix)
    GetMatrix = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_GetMatrix)
    SetOffset = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_SetOffset)
    GetOffset = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_GetOffset)
    SetCenter = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_SetCenter)
    GetCenter = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_GetCenter)
    SetTranslation = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_SetTranslation)
    GetTranslation = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_GetTranslation)
    Compose = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_Compose)
    TransformVector = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_TransformVector)
    TransformCovariantVector = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_TransformCovariantVector)
    TransformDiffusionTensor3D = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_TransformDiffusionTensor3D)
    TransformSymmetricSecondRankTensor = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_TransformSymmetricSecondRankTensor)
    GetInverse = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_GetInverse)
    __swig_destroy__ = _itkMatrixOffsetTransformBasePython.delete_itkMatrixOffsetTransformBaseD33
    cast = _swig_new_static_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_cast)

    def New(*args, **kargs):
        """New() -> itkMatrixOffsetTransformBaseD33

        Create a new object of the class itkMatrixOffsetTransformBaseD33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMatrixOffsetTransformBaseD33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMatrixOffsetTransformBaseD33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMatrixOffsetTransformBaseD33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMatrixOffsetTransformBaseD33 in _itkMatrixOffsetTransformBasePython:
_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_swigregister(itkMatrixOffsetTransformBaseD33)
itkMatrixOffsetTransformBaseD33___New_orig__ = _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33___New_orig__
itkMatrixOffsetTransformBaseD33_cast = _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_cast


def itkMatrixOffsetTransformBaseF22_New():
    return itkMatrixOffsetTransformBaseF22.New()

class itkMatrixOffsetTransformBaseF22(itk.itkTransformBasePython.itkTransformF22):
    r"""


    Matrix and Offset transformation of a vector space (e.g. space
    coordinates)

    This class serves as a base class for transforms that can be expressed
    as a linear transformation plus a constant offset (e.g., affine,
    similarity and rigid transforms). This base class also provides the
    concept of using a center of rotation and a translation instead of an
    offset.

    As derived instances of this class are specializations of an affine
    transform, any two of these transformations may be composed and the
    result is an affine transformation. However, the order is important.
    Given two affine transformations T1 and T2, we will say that
    "precomposing T1 with T2" yields the transformation which applies T1
    to the source, and then applies T2 to that result to obtain the
    target. Conversely, we will say that "postcomposing T1 with T2"
    yields the transformation which applies T2 to the source, and then
    applies T1 to that result to obtain the target. (Whether T1 or T2
    comes first lexicographically depends on whether you choose to write
    mappings from right-to-left or vice versa; we avoid the whole problem
    by referring to the order of application rather than the textual
    order.)

    Parameters:
    -----------

    TParametersValueType:  The type to be used for scalar numeric values.
    Either float or double.

    NInputDimensions:  The number of dimensions of the input vector space.

    NOutputDimensions:  The number of dimensions of the output vector
    space.

    This class provides several methods for setting the matrix and offset
    defining the transform. To support the registration framework, the
    transform parameters can also be set as an Array<TParametersValueType>
    of size (NInputDimension + 1) * NOutputDimension using method
    SetParameters(). The first (NOutputDimension x NInputDimension)
    parameters defines the matrix in row-major order (where the column
    index varies the fastest). The last NOutputDimension parameters
    defines the translation in each dimensions. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22___New_orig__)
    Clone = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_Clone)
    SetIdentity = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_SetIdentity)
    SetMatrix = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_SetMatrix)
    GetMatrix = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_GetMatrix)
    SetOffset = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_SetOffset)
    GetOffset = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_GetOffset)
    SetCenter = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_SetCenter)
    GetCenter = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_GetCenter)
    SetTranslation = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_SetTranslation)
    GetTranslation = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_GetTranslation)
    Compose = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_Compose)
    TransformVector = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_TransformVector)
    TransformCovariantVector = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_TransformCovariantVector)
    TransformDiffusionTensor3D = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_TransformDiffusionTensor3D)
    TransformSymmetricSecondRankTensor = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_TransformSymmetricSecondRankTensor)
    GetInverse = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_GetInverse)
    __swig_destroy__ = _itkMatrixOffsetTransformBasePython.delete_itkMatrixOffsetTransformBaseF22
    cast = _swig_new_static_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_cast)

    def New(*args, **kargs):
        """New() -> itkMatrixOffsetTransformBaseF22

        Create a new object of the class itkMatrixOffsetTransformBaseF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMatrixOffsetTransformBaseF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMatrixOffsetTransformBaseF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMatrixOffsetTransformBaseF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMatrixOffsetTransformBaseF22 in _itkMatrixOffsetTransformBasePython:
_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_swigregister(itkMatrixOffsetTransformBaseF22)
itkMatrixOffsetTransformBaseF22___New_orig__ = _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22___New_orig__
itkMatrixOffsetTransformBaseF22_cast = _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22_cast


def itkMatrixOffsetTransformBaseF33_New():
    return itkMatrixOffsetTransformBaseF33.New()

class itkMatrixOffsetTransformBaseF33(itk.itkTransformBasePython.itkTransformF33):
    r"""


    Matrix and Offset transformation of a vector space (e.g. space
    coordinates)

    This class serves as a base class for transforms that can be expressed
    as a linear transformation plus a constant offset (e.g., affine,
    similarity and rigid transforms). This base class also provides the
    concept of using a center of rotation and a translation instead of an
    offset.

    As derived instances of this class are specializations of an affine
    transform, any two of these transformations may be composed and the
    result is an affine transformation. However, the order is important.
    Given two affine transformations T1 and T2, we will say that
    "precomposing T1 with T2" yields the transformation which applies T1
    to the source, and then applies T2 to that result to obtain the
    target. Conversely, we will say that "postcomposing T1 with T2"
    yields the transformation which applies T2 to the source, and then
    applies T1 to that result to obtain the target. (Whether T1 or T2
    comes first lexicographically depends on whether you choose to write
    mappings from right-to-left or vice versa; we avoid the whole problem
    by referring to the order of application rather than the textual
    order.)

    Parameters:
    -----------

    TParametersValueType:  The type to be used for scalar numeric values.
    Either float or double.

    NInputDimensions:  The number of dimensions of the input vector space.

    NOutputDimensions:  The number of dimensions of the output vector
    space.

    This class provides several methods for setting the matrix and offset
    defining the transform. To support the registration framework, the
    transform parameters can also be set as an Array<TParametersValueType>
    of size (NInputDimension + 1) * NOutputDimension using method
    SetParameters(). The first (NOutputDimension x NInputDimension)
    parameters defines the matrix in row-major order (where the column
    index varies the fastest). The last NOutputDimension parameters
    defines the translation in each dimensions. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33___New_orig__)
    Clone = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_Clone)
    SetIdentity = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_SetIdentity)
    SetMatrix = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_SetMatrix)
    GetMatrix = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_GetMatrix)
    SetOffset = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_SetOffset)
    GetOffset = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_GetOffset)
    SetCenter = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_SetCenter)
    GetCenter = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_GetCenter)
    SetTranslation = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_SetTranslation)
    GetTranslation = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_GetTranslation)
    Compose = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_Compose)
    TransformVector = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_TransformVector)
    TransformCovariantVector = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_TransformCovariantVector)
    TransformDiffusionTensor3D = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_TransformDiffusionTensor3D)
    TransformSymmetricSecondRankTensor = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_TransformSymmetricSecondRankTensor)
    GetInverse = _swig_new_instance_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_GetInverse)
    __swig_destroy__ = _itkMatrixOffsetTransformBasePython.delete_itkMatrixOffsetTransformBaseF33
    cast = _swig_new_static_method(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_cast)

    def New(*args, **kargs):
        """New() -> itkMatrixOffsetTransformBaseF33

        Create a new object of the class itkMatrixOffsetTransformBaseF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMatrixOffsetTransformBaseF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMatrixOffsetTransformBaseF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMatrixOffsetTransformBaseF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMatrixOffsetTransformBaseF33 in _itkMatrixOffsetTransformBasePython:
_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_swigregister(itkMatrixOffsetTransformBaseF33)
itkMatrixOffsetTransformBaseF33___New_orig__ = _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33___New_orig__
itkMatrixOffsetTransformBaseF33_cast = _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33_cast



