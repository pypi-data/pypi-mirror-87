# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkVectorContainerPython
else:
    import _itkVectorContainerPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkVectorContainerPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkVectorContainerPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkContinuousIndexPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython

def itkDataObjectDecoratorVCUCD_New():
    return itkDataObjectDecoratorVCUCD.New()

class itkDataObjectDecoratorVCUCD(itk.ITKCommonBasePython.itkDataObject):
    r"""


    Decorates any subclass of itkObject with a DataObject API.

    DataObjectDecorator decorates an instance of a subclass of itkObject
    with a DataObject API. This allows any itkObject to be encapsulated
    into a DataObject that can be passed down the pipeline. To decorate
    simple types (float, int, std::vector) see SimpleDataObjectDecorator.

    The decorator provides two methods Set() and Get() to access the
    decorated object (referred internally as the component).

    Note that when an instance of DataObjectDecorator is created, the
    component is initialized with its default constructor (in this case a
    null pointer).

    DataObjectDecorator can decorate any subclass of itkObject. Two other
    decorators are provided. SimpleDataObjectDecorator can encapsulate
    simple types (float, int, std::vector). AutoPointerDataObjectDecorator
    will decorate any pointer type (for objects other than subclasses of
    itkObject) and manage the memory deallocating of the component.

    See:   SimpleDataObjectDecorator

    See:  AutoPointerDataObjectDecorator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorContainerPython.itkDataObjectDecoratorVCUCD___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorContainerPython.itkDataObjectDecoratorVCUCD_Clone)
    Set = _swig_new_instance_method(_itkVectorContainerPython.itkDataObjectDecoratorVCUCD_Set)
    Get = _swig_new_instance_method(_itkVectorContainerPython.itkDataObjectDecoratorVCUCD_Get)
    GetModifiable = _swig_new_instance_method(_itkVectorContainerPython.itkDataObjectDecoratorVCUCD_GetModifiable)
    Graft = _swig_new_instance_method(_itkVectorContainerPython.itkDataObjectDecoratorVCUCD_Graft)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkDataObjectDecoratorVCUCD
    cast = _swig_new_static_method(_itkVectorContainerPython.itkDataObjectDecoratorVCUCD_cast)

    def New(*args, **kargs):
        """New() -> itkDataObjectDecoratorVCUCD

        Create a new object of the class itkDataObjectDecoratorVCUCD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDataObjectDecoratorVCUCD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDataObjectDecoratorVCUCD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDataObjectDecoratorVCUCD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDataObjectDecoratorVCUCD in _itkVectorContainerPython:
_itkVectorContainerPython.itkDataObjectDecoratorVCUCD_swigregister(itkDataObjectDecoratorVCUCD)
itkDataObjectDecoratorVCUCD___New_orig__ = _itkVectorContainerPython.itkDataObjectDecoratorVCUCD___New_orig__
itkDataObjectDecoratorVCUCD_cast = _itkVectorContainerPython.itkDataObjectDecoratorVCUCD_cast


def itkVectorContainerUCD_New():
    return itkVectorContainerUCD.New()

class itkVectorContainerUCD(itk.ITKCommonBasePython.itkObject):
    r"""


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    {Core/Common/IterateOnAVectorContainer,Iterate On A Vector Container}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerUCD___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCD_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCD_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCD_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCD_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCD_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCD_GetElement)
    SetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCD_SetElement)
    InsertElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCD_InsertElement)
    IndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCD_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCD_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCD_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCD_DeleteIndex)
    Size = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCD_Size)
    Reserve = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCD_Reserve)
    Squeeze = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCD_Squeeze)
    Initialize = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCD_Initialize)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUCD
    cast = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerUCD_cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUCD

        Create a new object of the class itkVectorContainerUCD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUCD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerUCD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerUCD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerUCD in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerUCD_swigregister(itkVectorContainerUCD)
itkVectorContainerUCD___New_orig__ = _itkVectorContainerPython.itkVectorContainerUCD___New_orig__
itkVectorContainerUCD_cast = _itkVectorContainerPython.itkVectorContainerUCD_cast


def itkVectorContainerUCF_New():
    return itkVectorContainerUCF.New()

class itkVectorContainerUCF(itk.ITKCommonBasePython.itkObject):
    r"""


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    {Core/Common/IterateOnAVectorContainer,Iterate On A Vector Container}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerUCF___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCF_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCF_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCF_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCF_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCF_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCF_GetElement)
    SetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCF_SetElement)
    InsertElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCF_InsertElement)
    IndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCF_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCF_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCF_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCF_DeleteIndex)
    Size = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCF_Size)
    Reserve = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCF_Reserve)
    Squeeze = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCF_Squeeze)
    Initialize = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCF_Initialize)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUCF
    cast = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerUCF_cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUCF

        Create a new object of the class itkVectorContainerUCF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUCF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerUCF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerUCF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerUCF in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerUCF_swigregister(itkVectorContainerUCF)
itkVectorContainerUCF___New_orig__ = _itkVectorContainerPython.itkVectorContainerUCF___New_orig__
itkVectorContainerUCF_cast = _itkVectorContainerPython.itkVectorContainerUCF_cast


def itkVectorContainerUCO2_New():
    return itkVectorContainerUCO2.New()

class itkVectorContainerUCO2(itk.ITKCommonBasePython.itkObject):
    r"""


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    {Core/Common/IterateOnAVectorContainer,Iterate On A Vector Container}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerUCO2___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCO2_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCO2_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCO2_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCO2_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCO2_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCO2_GetElement)
    SetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCO2_SetElement)
    InsertElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCO2_InsertElement)
    IndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCO2_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCO2_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCO2_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCO2_DeleteIndex)
    Size = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCO2_Size)
    Reserve = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCO2_Reserve)
    Squeeze = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCO2_Squeeze)
    Initialize = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCO2_Initialize)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUCO2
    cast = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerUCO2_cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUCO2

        Create a new object of the class itkVectorContainerUCO2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUCO2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerUCO2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerUCO2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerUCO2 in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerUCO2_swigregister(itkVectorContainerUCO2)
itkVectorContainerUCO2___New_orig__ = _itkVectorContainerPython.itkVectorContainerUCO2___New_orig__
itkVectorContainerUCO2_cast = _itkVectorContainerPython.itkVectorContainerUCO2_cast


def itkVectorContainerUCO3_New():
    return itkVectorContainerUCO3.New()

class itkVectorContainerUCO3(itk.ITKCommonBasePython.itkObject):
    r"""


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    {Core/Common/IterateOnAVectorContainer,Iterate On A Vector Container}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerUCO3___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCO3_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCO3_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCO3_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCO3_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCO3_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCO3_GetElement)
    SetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCO3_SetElement)
    InsertElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCO3_InsertElement)
    IndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCO3_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCO3_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCO3_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCO3_DeleteIndex)
    Size = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCO3_Size)
    Reserve = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCO3_Reserve)
    Squeeze = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCO3_Squeeze)
    Initialize = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCO3_Initialize)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUCO3
    cast = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerUCO3_cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUCO3

        Create a new object of the class itkVectorContainerUCO3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUCO3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerUCO3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerUCO3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerUCO3 in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerUCO3_swigregister(itkVectorContainerUCO3)
itkVectorContainerUCO3___New_orig__ = _itkVectorContainerPython.itkVectorContainerUCO3___New_orig__
itkVectorContainerUCO3_cast = _itkVectorContainerPython.itkVectorContainerUCO3_cast


def itkVectorContainerUCSS_New():
    return itkVectorContainerUCSS.New()

class itkVectorContainerUCSS(itk.ITKCommonBasePython.itkObject):
    r"""


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    {Core/Common/IterateOnAVectorContainer,Iterate On A Vector Container}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerUCSS___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCSS_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCSS_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCSS_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCSS_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCSS_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCSS_GetElement)
    SetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCSS_SetElement)
    InsertElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCSS_InsertElement)
    IndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCSS_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCSS_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCSS_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCSS_DeleteIndex)
    Size = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCSS_Size)
    Reserve = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCSS_Reserve)
    Squeeze = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCSS_Squeeze)
    Initialize = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCSS_Initialize)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUCSS
    cast = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerUCSS_cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUCSS

        Create a new object of the class itkVectorContainerUCSS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUCSS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerUCSS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerUCSS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerUCSS in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerUCSS_swigregister(itkVectorContainerUCSS)
itkVectorContainerUCSS___New_orig__ = _itkVectorContainerPython.itkVectorContainerUCSS___New_orig__
itkVectorContainerUCSS_cast = _itkVectorContainerPython.itkVectorContainerUCSS_cast


def itkVectorContainerUCUC_New():
    return itkVectorContainerUCUC.New()

class itkVectorContainerUCUC(itk.ITKCommonBasePython.itkObject):
    r"""


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    {Core/Common/IterateOnAVectorContainer,Iterate On A Vector Container}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerUCUC___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCUC_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCUC_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCUC_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCUC_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCUC_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCUC_GetElement)
    SetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCUC_SetElement)
    InsertElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCUC_InsertElement)
    IndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCUC_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCUC_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCUC_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCUC_DeleteIndex)
    Size = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCUC_Size)
    Reserve = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCUC_Reserve)
    Squeeze = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCUC_Squeeze)
    Initialize = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCUC_Initialize)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUCUC
    cast = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerUCUC_cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUCUC

        Create a new object of the class itkVectorContainerUCUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUCUC.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerUCUC.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerUCUC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerUCUC in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerUCUC_swigregister(itkVectorContainerUCUC)
itkVectorContainerUCUC___New_orig__ = _itkVectorContainerPython.itkVectorContainerUCUC___New_orig__
itkVectorContainerUCUC_cast = _itkVectorContainerPython.itkVectorContainerUCUC_cast


def itkVectorContainerUCUI_New():
    return itkVectorContainerUCUI.New()

class itkVectorContainerUCUI(itk.ITKCommonBasePython.itkObject):
    r"""


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    {Core/Common/IterateOnAVectorContainer,Iterate On A Vector Container}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerUCUI___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCUI_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCUI_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCUI_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCUI_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCUI_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCUI_GetElement)
    SetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCUI_SetElement)
    InsertElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCUI_InsertElement)
    IndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCUI_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCUI_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCUI_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCUI_DeleteIndex)
    Size = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCUI_Size)
    Reserve = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCUI_Reserve)
    Squeeze = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCUI_Squeeze)
    Initialize = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCUI_Initialize)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUCUI
    cast = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerUCUI_cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUCUI

        Create a new object of the class itkVectorContainerUCUI and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUCUI.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerUCUI.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerUCUI.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerUCUI in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerUCUI_swigregister(itkVectorContainerUCUI)
itkVectorContainerUCUI___New_orig__ = _itkVectorContainerPython.itkVectorContainerUCUI___New_orig__
itkVectorContainerUCUI_cast = _itkVectorContainerPython.itkVectorContainerUCUI_cast


def itkVectorContainerUCULL_New():
    return itkVectorContainerUCULL.New()

class itkVectorContainerUCULL(itk.ITKCommonBasePython.itkObject):
    r"""


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    {Core/Common/IterateOnAVectorContainer,Iterate On A Vector Container}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerUCULL___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCULL_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCULL_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCULL_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCULL_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCULL_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCULL_GetElement)
    SetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCULL_SetElement)
    InsertElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCULL_InsertElement)
    IndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCULL_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCULL_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCULL_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCULL_DeleteIndex)
    Size = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCULL_Size)
    Reserve = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCULL_Reserve)
    Squeeze = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCULL_Squeeze)
    Initialize = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCULL_Initialize)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUCULL
    cast = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerUCULL_cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUCULL

        Create a new object of the class itkVectorContainerUCULL and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUCULL.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerUCULL.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerUCULL.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerUCULL in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerUCULL_swigregister(itkVectorContainerUCULL)
itkVectorContainerUCULL___New_orig__ = _itkVectorContainerPython.itkVectorContainerUCULL___New_orig__
itkVectorContainerUCULL_cast = _itkVectorContainerPython.itkVectorContainerUCULL_cast


def itkVectorContainerUCUS_New():
    return itkVectorContainerUCUS.New()

class itkVectorContainerUCUS(itk.ITKCommonBasePython.itkObject):
    r"""


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    {Core/Common/IterateOnAVectorContainer,Iterate On A Vector Container}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerUCUS___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCUS_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCUS_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCUS_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCUS_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCUS_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCUS_GetElement)
    SetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCUS_SetElement)
    InsertElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCUS_InsertElement)
    IndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCUS_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCUS_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCUS_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCUS_DeleteIndex)
    Size = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCUS_Size)
    Reserve = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCUS_Reserve)
    Squeeze = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCUS_Squeeze)
    Initialize = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUCUS_Initialize)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUCUS
    cast = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerUCUS_cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUCUS

        Create a new object of the class itkVectorContainerUCUS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUCUS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerUCUS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerUCUS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerUCUS in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerUCUS_swigregister(itkVectorContainerUCUS)
itkVectorContainerUCUS___New_orig__ = _itkVectorContainerPython.itkVectorContainerUCUS___New_orig__
itkVectorContainerUCUS_cast = _itkVectorContainerPython.itkVectorContainerUCUS_cast


def itkVectorContainerUICID2_New():
    return itkVectorContainerUICID2.New()

class itkVectorContainerUICID2(itk.ITKCommonBasePython.itkObject):
    r"""


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    {Core/Common/IterateOnAVectorContainer,Iterate On A Vector Container}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerUICID2___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUICID2_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUICID2_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUICID2_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUICID2_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUICID2_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUICID2_GetElement)
    SetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUICID2_SetElement)
    InsertElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUICID2_InsertElement)
    IndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUICID2_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUICID2_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUICID2_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUICID2_DeleteIndex)
    Size = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUICID2_Size)
    Reserve = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUICID2_Reserve)
    Squeeze = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUICID2_Squeeze)
    Initialize = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUICID2_Initialize)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUICID2
    cast = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerUICID2_cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUICID2

        Create a new object of the class itkVectorContainerUICID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUICID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerUICID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerUICID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerUICID2 in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerUICID2_swigregister(itkVectorContainerUICID2)
itkVectorContainerUICID2___New_orig__ = _itkVectorContainerPython.itkVectorContainerUICID2___New_orig__
itkVectorContainerUICID2_cast = _itkVectorContainerPython.itkVectorContainerUICID2_cast


def itkVectorContainerUICID3_New():
    return itkVectorContainerUICID3.New()

class itkVectorContainerUICID3(itk.ITKCommonBasePython.itkObject):
    r"""


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    {Core/Common/IterateOnAVectorContainer,Iterate On A Vector Container}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerUICID3___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUICID3_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUICID3_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUICID3_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUICID3_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUICID3_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUICID3_GetElement)
    SetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUICID3_SetElement)
    InsertElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUICID3_InsertElement)
    IndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUICID3_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUICID3_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUICID3_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUICID3_DeleteIndex)
    Size = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUICID3_Size)
    Reserve = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUICID3_Reserve)
    Squeeze = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUICID3_Squeeze)
    Initialize = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUICID3_Initialize)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUICID3
    cast = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerUICID3_cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUICID3

        Create a new object of the class itkVectorContainerUICID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUICID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerUICID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerUICID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerUICID3 in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerUICID3_swigregister(itkVectorContainerUICID3)
itkVectorContainerUICID3___New_orig__ = _itkVectorContainerPython.itkVectorContainerUICID3___New_orig__
itkVectorContainerUICID3_cast = _itkVectorContainerPython.itkVectorContainerUICID3_cast


def itkVectorContainerUIUC_New():
    return itkVectorContainerUIUC.New()

class itkVectorContainerUIUC(itk.ITKCommonBasePython.itkObject):
    r"""


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    {Core/Common/IterateOnAVectorContainer,Iterate On A Vector Container}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerUIUC___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIUC_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIUC_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIUC_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIUC_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIUC_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIUC_GetElement)
    SetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIUC_SetElement)
    InsertElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIUC_InsertElement)
    IndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIUC_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIUC_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIUC_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIUC_DeleteIndex)
    Size = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIUC_Size)
    Reserve = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIUC_Reserve)
    Squeeze = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIUC_Squeeze)
    Initialize = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIUC_Initialize)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUIUC
    cast = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerUIUC_cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUIUC

        Create a new object of the class itkVectorContainerUIUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUIUC.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerUIUC.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerUIUC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerUIUC in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerUIUC_swigregister(itkVectorContainerUIUC)
itkVectorContainerUIUC___New_orig__ = _itkVectorContainerPython.itkVectorContainerUIUC___New_orig__
itkVectorContainerUIUC_cast = _itkVectorContainerPython.itkVectorContainerUIUC_cast


def itkVectorContainerUIUI_New():
    return itkVectorContainerUIUI.New()

class itkVectorContainerUIUI(itk.ITKCommonBasePython.itkObject):
    r"""


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    {Core/Common/IterateOnAVectorContainer,Iterate On A Vector Container}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerUIUI___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIUI_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIUI_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIUI_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIUI_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIUI_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIUI_GetElement)
    SetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIUI_SetElement)
    InsertElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIUI_InsertElement)
    IndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIUI_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIUI_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIUI_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIUI_DeleteIndex)
    Size = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIUI_Size)
    Reserve = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIUI_Reserve)
    Squeeze = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIUI_Squeeze)
    Initialize = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIUI_Initialize)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUIUI
    cast = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerUIUI_cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUIUI

        Create a new object of the class itkVectorContainerUIUI and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUIUI.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerUIUI.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerUIUI.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerUIUI in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerUIUI_swigregister(itkVectorContainerUIUI)
itkVectorContainerUIUI___New_orig__ = _itkVectorContainerPython.itkVectorContainerUIUI___New_orig__
itkVectorContainerUIUI_cast = _itkVectorContainerPython.itkVectorContainerUIUI_cast


def itkVectorContainerUIULL_New():
    return itkVectorContainerUIULL.New()

class itkVectorContainerUIULL(itk.ITKCommonBasePython.itkObject):
    r"""


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    {Core/Common/IterateOnAVectorContainer,Iterate On A Vector Container}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerUIULL___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIULL_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIULL_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIULL_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIULL_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIULL_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIULL_GetElement)
    SetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIULL_SetElement)
    InsertElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIULL_InsertElement)
    IndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIULL_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIULL_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIULL_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIULL_DeleteIndex)
    Size = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIULL_Size)
    Reserve = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIULL_Reserve)
    Squeeze = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIULL_Squeeze)
    Initialize = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIULL_Initialize)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUIULL
    cast = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerUIULL_cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUIULL

        Create a new object of the class itkVectorContainerUIULL and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUIULL.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerUIULL.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerUIULL.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerUIULL in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerUIULL_swigregister(itkVectorContainerUIULL)
itkVectorContainerUIULL___New_orig__ = _itkVectorContainerPython.itkVectorContainerUIULL___New_orig__
itkVectorContainerUIULL_cast = _itkVectorContainerPython.itkVectorContainerUIULL_cast


def itkVectorContainerUIUS_New():
    return itkVectorContainerUIUS.New()

class itkVectorContainerUIUS(itk.ITKCommonBasePython.itkObject):
    r"""


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    {Core/Common/IterateOnAVectorContainer,Iterate On A Vector Container}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerUIUS___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIUS_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIUS_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIUS_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIUS_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIUS_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIUS_GetElement)
    SetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIUS_SetElement)
    InsertElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIUS_InsertElement)
    IndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIUS_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIUS_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIUS_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIUS_DeleteIndex)
    Size = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIUS_Size)
    Reserve = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIUS_Reserve)
    Squeeze = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIUS_Squeeze)
    Initialize = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIUS_Initialize)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUIUS
    cast = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerUIUS_cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUIUS

        Create a new object of the class itkVectorContainerUIUS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUIUS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerUIUS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerUIUS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerUIUS in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerUIUS_swigregister(itkVectorContainerUIUS)
itkVectorContainerUIUS___New_orig__ = _itkVectorContainerPython.itkVectorContainerUIUS___New_orig__
itkVectorContainerUIUS_cast = _itkVectorContainerPython.itkVectorContainerUIUS_cast


def itkVectorContainerUIVUC1_New():
    return itkVectorContainerUIVUC1.New()

class itkVectorContainerUIVUC1(itk.ITKCommonBasePython.itkObject):
    r"""


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    {Core/Common/IterateOnAVectorContainer,Iterate On A Vector Container}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerUIVUC1___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIVUC1_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIVUC1_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIVUC1_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIVUC1_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIVUC1_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIVUC1_GetElement)
    SetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIVUC1_SetElement)
    InsertElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIVUC1_InsertElement)
    IndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIVUC1_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIVUC1_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIVUC1_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIVUC1_DeleteIndex)
    Size = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIVUC1_Size)
    Reserve = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIVUC1_Reserve)
    Squeeze = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIVUC1_Squeeze)
    Initialize = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUIVUC1_Initialize)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUIVUC1
    cast = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerUIVUC1_cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUIVUC1

        Create a new object of the class itkVectorContainerUIVUC1 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUIVUC1.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerUIVUC1.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerUIVUC1.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerUIVUC1 in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerUIVUC1_swigregister(itkVectorContainerUIVUC1)
itkVectorContainerUIVUC1___New_orig__ = _itkVectorContainerPython.itkVectorContainerUIVUC1___New_orig__
itkVectorContainerUIVUC1_cast = _itkVectorContainerPython.itkVectorContainerUIVUC1_cast


def itkVectorContainerULLD_New():
    return itkVectorContainerULLD.New()

class itkVectorContainerULLD(itk.ITKCommonBasePython.itkObject):
    r"""


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    {Core/Common/IterateOnAVectorContainer,Iterate On A Vector Container}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerULLD___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLD_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLD_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLD_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLD_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLD_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLD_GetElement)
    SetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLD_SetElement)
    InsertElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLD_InsertElement)
    IndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLD_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLD_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLD_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLD_DeleteIndex)
    Size = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLD_Size)
    Reserve = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLD_Reserve)
    Squeeze = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLD_Squeeze)
    Initialize = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLD_Initialize)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLD
    cast = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerULLD_cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLD

        Create a new object of the class itkVectorContainerULLD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLD in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerULLD_swigregister(itkVectorContainerULLD)
itkVectorContainerULLD___New_orig__ = _itkVectorContainerPython.itkVectorContainerULLD___New_orig__
itkVectorContainerULLD_cast = _itkVectorContainerPython.itkVectorContainerULLD_cast


def itkVectorContainerULLF_New():
    return itkVectorContainerULLF.New()

class itkVectorContainerULLF(itk.ITKCommonBasePython.itkObject):
    r"""


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    {Core/Common/IterateOnAVectorContainer,Iterate On A Vector Container}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerULLF___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLF_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLF_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLF_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLF_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLF_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLF_GetElement)
    SetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLF_SetElement)
    InsertElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLF_InsertElement)
    IndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLF_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLF_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLF_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLF_DeleteIndex)
    Size = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLF_Size)
    Reserve = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLF_Reserve)
    Squeeze = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLF_Squeeze)
    Initialize = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLF_Initialize)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLF
    cast = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerULLF_cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLF

        Create a new object of the class itkVectorContainerULLF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLF in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerULLF_swigregister(itkVectorContainerULLF)
itkVectorContainerULLF___New_orig__ = _itkVectorContainerPython.itkVectorContainerULLF___New_orig__
itkVectorContainerULLF_cast = _itkVectorContainerPython.itkVectorContainerULLF_cast


def itkVectorContainerULLMD22_New():
    return itkVectorContainerULLMD22.New()

class itkVectorContainerULLMD22(itk.ITKCommonBasePython.itkObject):
    r"""


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    {Core/Common/IterateOnAVectorContainer,Iterate On A Vector Container}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerULLMD22___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMD22_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMD22_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMD22_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMD22_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMD22_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMD22_GetElement)
    SetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMD22_SetElement)
    InsertElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMD22_InsertElement)
    IndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMD22_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMD22_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMD22_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMD22_DeleteIndex)
    Size = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMD22_Size)
    Reserve = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMD22_Reserve)
    Squeeze = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMD22_Squeeze)
    Initialize = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMD22_Initialize)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLMD22
    cast = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerULLMD22_cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLMD22

        Create a new object of the class itkVectorContainerULLMD22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLMD22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLMD22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLMD22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLMD22 in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerULLMD22_swigregister(itkVectorContainerULLMD22)
itkVectorContainerULLMD22___New_orig__ = _itkVectorContainerPython.itkVectorContainerULLMD22___New_orig__
itkVectorContainerULLMD22_cast = _itkVectorContainerPython.itkVectorContainerULLMD22_cast


def itkVectorContainerULLMD33_New():
    return itkVectorContainerULLMD33.New()

class itkVectorContainerULLMD33(itk.ITKCommonBasePython.itkObject):
    r"""


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    {Core/Common/IterateOnAVectorContainer,Iterate On A Vector Container}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerULLMD33___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMD33_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMD33_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMD33_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMD33_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMD33_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMD33_GetElement)
    SetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMD33_SetElement)
    InsertElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMD33_InsertElement)
    IndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMD33_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMD33_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMD33_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMD33_DeleteIndex)
    Size = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMD33_Size)
    Reserve = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMD33_Reserve)
    Squeeze = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMD33_Squeeze)
    Initialize = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMD33_Initialize)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLMD33
    cast = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerULLMD33_cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLMD33

        Create a new object of the class itkVectorContainerULLMD33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLMD33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLMD33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLMD33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLMD33 in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerULLMD33_swigregister(itkVectorContainerULLMD33)
itkVectorContainerULLMD33___New_orig__ = _itkVectorContainerPython.itkVectorContainerULLMD33___New_orig__
itkVectorContainerULLMD33_cast = _itkVectorContainerPython.itkVectorContainerULLMD33_cast


def itkVectorContainerULLMF22_New():
    return itkVectorContainerULLMF22.New()

class itkVectorContainerULLMF22(itk.ITKCommonBasePython.itkObject):
    r"""


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    {Core/Common/IterateOnAVectorContainer,Iterate On A Vector Container}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerULLMF22___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMF22_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMF22_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMF22_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMF22_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMF22_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMF22_GetElement)
    SetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMF22_SetElement)
    InsertElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMF22_InsertElement)
    IndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMF22_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMF22_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMF22_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMF22_DeleteIndex)
    Size = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMF22_Size)
    Reserve = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMF22_Reserve)
    Squeeze = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMF22_Squeeze)
    Initialize = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMF22_Initialize)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLMF22
    cast = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerULLMF22_cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLMF22

        Create a new object of the class itkVectorContainerULLMF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLMF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLMF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLMF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLMF22 in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerULLMF22_swigregister(itkVectorContainerULLMF22)
itkVectorContainerULLMF22___New_orig__ = _itkVectorContainerPython.itkVectorContainerULLMF22___New_orig__
itkVectorContainerULLMF22_cast = _itkVectorContainerPython.itkVectorContainerULLMF22_cast


def itkVectorContainerULLMF33_New():
    return itkVectorContainerULLMF33.New()

class itkVectorContainerULLMF33(itk.ITKCommonBasePython.itkObject):
    r"""


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    {Core/Common/IterateOnAVectorContainer,Iterate On A Vector Container}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerULLMF33___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMF33_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMF33_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMF33_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMF33_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMF33_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMF33_GetElement)
    SetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMF33_SetElement)
    InsertElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMF33_InsertElement)
    IndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMF33_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMF33_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMF33_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMF33_DeleteIndex)
    Size = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMF33_Size)
    Reserve = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMF33_Reserve)
    Squeeze = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMF33_Squeeze)
    Initialize = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLMF33_Initialize)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLMF33
    cast = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerULLMF33_cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLMF33

        Create a new object of the class itkVectorContainerULLMF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLMF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLMF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLMF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLMF33 in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerULLMF33_swigregister(itkVectorContainerULLMF33)
itkVectorContainerULLMF33___New_orig__ = _itkVectorContainerPython.itkVectorContainerULLMF33___New_orig__
itkVectorContainerULLMF33_cast = _itkVectorContainerPython.itkVectorContainerULLMF33_cast


def itkVectorContainerULLPD2_New():
    return itkVectorContainerULLPD2.New()

class itkVectorContainerULLPD2(itk.ITKCommonBasePython.itkObject):
    r"""


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    {Core/Common/IterateOnAVectorContainer,Iterate On A Vector Container}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerULLPD2___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPD2_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPD2_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPD2_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPD2_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPD2_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPD2_GetElement)
    SetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPD2_SetElement)
    InsertElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPD2_InsertElement)
    IndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPD2_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPD2_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPD2_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPD2_DeleteIndex)
    Size = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPD2_Size)
    Reserve = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPD2_Reserve)
    Squeeze = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPD2_Squeeze)
    Initialize = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPD2_Initialize)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLPD2
    cast = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerULLPD2_cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLPD2

        Create a new object of the class itkVectorContainerULLPD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLPD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLPD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLPD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLPD2 in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerULLPD2_swigregister(itkVectorContainerULLPD2)
itkVectorContainerULLPD2___New_orig__ = _itkVectorContainerPython.itkVectorContainerULLPD2___New_orig__
itkVectorContainerULLPD2_cast = _itkVectorContainerPython.itkVectorContainerULLPD2_cast


def itkVectorContainerULLPD3_New():
    return itkVectorContainerULLPD3.New()

class itkVectorContainerULLPD3(itk.ITKCommonBasePython.itkObject):
    r"""


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    {Core/Common/IterateOnAVectorContainer,Iterate On A Vector Container}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerULLPD3___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPD3_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPD3_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPD3_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPD3_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPD3_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPD3_GetElement)
    SetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPD3_SetElement)
    InsertElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPD3_InsertElement)
    IndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPD3_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPD3_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPD3_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPD3_DeleteIndex)
    Size = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPD3_Size)
    Reserve = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPD3_Reserve)
    Squeeze = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPD3_Squeeze)
    Initialize = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPD3_Initialize)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLPD3
    cast = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerULLPD3_cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLPD3

        Create a new object of the class itkVectorContainerULLPD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLPD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLPD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLPD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLPD3 in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerULLPD3_swigregister(itkVectorContainerULLPD3)
itkVectorContainerULLPD3___New_orig__ = _itkVectorContainerPython.itkVectorContainerULLPD3___New_orig__
itkVectorContainerULLPD3_cast = _itkVectorContainerPython.itkVectorContainerULLPD3_cast


def itkVectorContainerULLPF2_New():
    return itkVectorContainerULLPF2.New()

class itkVectorContainerULLPF2(itk.ITKCommonBasePython.itkObject):
    r"""


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    {Core/Common/IterateOnAVectorContainer,Iterate On A Vector Container}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerULLPF2___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPF2_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPF2_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPF2_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPF2_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPF2_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPF2_GetElement)
    SetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPF2_SetElement)
    InsertElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPF2_InsertElement)
    IndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPF2_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPF2_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPF2_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPF2_DeleteIndex)
    Size = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPF2_Size)
    Reserve = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPF2_Reserve)
    Squeeze = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPF2_Squeeze)
    Initialize = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPF2_Initialize)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLPF2
    cast = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerULLPF2_cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLPF2

        Create a new object of the class itkVectorContainerULLPF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLPF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLPF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLPF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLPF2 in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerULLPF2_swigregister(itkVectorContainerULLPF2)
itkVectorContainerULLPF2___New_orig__ = _itkVectorContainerPython.itkVectorContainerULLPF2___New_orig__
itkVectorContainerULLPF2_cast = _itkVectorContainerPython.itkVectorContainerULLPF2_cast


def itkVectorContainerULLPF3_New():
    return itkVectorContainerULLPF3.New()

class itkVectorContainerULLPF3(itk.ITKCommonBasePython.itkObject):
    r"""


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    {Core/Common/IterateOnAVectorContainer,Iterate On A Vector Container}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerULLPF3___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPF3_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPF3_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPF3_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPF3_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPF3_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPF3_GetElement)
    SetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPF3_SetElement)
    InsertElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPF3_InsertElement)
    IndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPF3_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPF3_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPF3_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPF3_DeleteIndex)
    Size = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPF3_Size)
    Reserve = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPF3_Reserve)
    Squeeze = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPF3_Squeeze)
    Initialize = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLPF3_Initialize)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLPF3
    cast = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerULLPF3_cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLPF3

        Create a new object of the class itkVectorContainerULLPF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLPF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLPF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLPF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLPF3 in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerULLPF3_swigregister(itkVectorContainerULLPF3)
itkVectorContainerULLPF3___New_orig__ = _itkVectorContainerPython.itkVectorContainerULLPF3___New_orig__
itkVectorContainerULLPF3_cast = _itkVectorContainerPython.itkVectorContainerULLPF3_cast


def itkVectorContainerULLSS_New():
    return itkVectorContainerULLSS.New()

class itkVectorContainerULLSS(itk.ITKCommonBasePython.itkObject):
    r"""


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    {Core/Common/IterateOnAVectorContainer,Iterate On A Vector Container}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerULLSS___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLSS_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLSS_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLSS_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLSS_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLSS_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLSS_GetElement)
    SetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLSS_SetElement)
    InsertElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLSS_InsertElement)
    IndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLSS_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLSS_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLSS_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLSS_DeleteIndex)
    Size = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLSS_Size)
    Reserve = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLSS_Reserve)
    Squeeze = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLSS_Squeeze)
    Initialize = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLSS_Initialize)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLSS
    cast = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerULLSS_cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLSS

        Create a new object of the class itkVectorContainerULLSS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLSS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLSS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLSS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLSS in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerULLSS_swigregister(itkVectorContainerULLSS)
itkVectorContainerULLSS___New_orig__ = _itkVectorContainerPython.itkVectorContainerULLSS___New_orig__
itkVectorContainerULLSS_cast = _itkVectorContainerPython.itkVectorContainerULLSS_cast


def itkVectorContainerULLSULL_New():
    return itkVectorContainerULLSULL.New()

class itkVectorContainerULLSULL(itk.ITKCommonBasePython.itkObject):
    r"""


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    {Core/Common/IterateOnAVectorContainer,Iterate On A Vector Container}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerULLSULL___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLSULL_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLSULL_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLSULL_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLSULL_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLSULL_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLSULL_GetElement)
    SetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLSULL_SetElement)
    InsertElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLSULL_InsertElement)
    IndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLSULL_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLSULL_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLSULL_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLSULL_DeleteIndex)
    Size = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLSULL_Size)
    Reserve = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLSULL_Reserve)
    Squeeze = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLSULL_Squeeze)
    Initialize = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLSULL_Initialize)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLSULL
    cast = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerULLSULL_cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLSULL

        Create a new object of the class itkVectorContainerULLSULL and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLSULL.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLSULL.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLSULL.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLSULL in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerULLSULL_swigregister(itkVectorContainerULLSULL)
itkVectorContainerULLSULL___New_orig__ = _itkVectorContainerPython.itkVectorContainerULLSULL___New_orig__
itkVectorContainerULLSULL_cast = _itkVectorContainerPython.itkVectorContainerULLSULL_cast


def itkVectorContainerULLUC_New():
    return itkVectorContainerULLUC.New()

class itkVectorContainerULLUC(itk.ITKCommonBasePython.itkObject):
    r"""


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    {Core/Common/IterateOnAVectorContainer,Iterate On A Vector Container}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerULLUC___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLUC_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLUC_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLUC_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLUC_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLUC_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLUC_GetElement)
    SetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLUC_SetElement)
    InsertElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLUC_InsertElement)
    IndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLUC_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLUC_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLUC_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLUC_DeleteIndex)
    Size = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLUC_Size)
    Reserve = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLUC_Reserve)
    Squeeze = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLUC_Squeeze)
    Initialize = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLUC_Initialize)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLUC
    cast = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerULLUC_cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLUC

        Create a new object of the class itkVectorContainerULLUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLUC.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLUC.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLUC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLUC in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerULLUC_swigregister(itkVectorContainerULLUC)
itkVectorContainerULLUC___New_orig__ = _itkVectorContainerPython.itkVectorContainerULLUC___New_orig__
itkVectorContainerULLUC_cast = _itkVectorContainerPython.itkVectorContainerULLUC_cast


def itkVectorContainerULLUI_New():
    return itkVectorContainerULLUI.New()

class itkVectorContainerULLUI(itk.ITKCommonBasePython.itkObject):
    r"""


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    {Core/Common/IterateOnAVectorContainer,Iterate On A Vector Container}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerULLUI___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLUI_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLUI_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLUI_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLUI_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLUI_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLUI_GetElement)
    SetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLUI_SetElement)
    InsertElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLUI_InsertElement)
    IndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLUI_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLUI_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLUI_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLUI_DeleteIndex)
    Size = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLUI_Size)
    Reserve = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLUI_Reserve)
    Squeeze = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLUI_Squeeze)
    Initialize = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLUI_Initialize)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLUI
    cast = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerULLUI_cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLUI

        Create a new object of the class itkVectorContainerULLUI and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLUI.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLUI.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLUI.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLUI in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerULLUI_swigregister(itkVectorContainerULLUI)
itkVectorContainerULLUI___New_orig__ = _itkVectorContainerPython.itkVectorContainerULLUI___New_orig__
itkVectorContainerULLUI_cast = _itkVectorContainerPython.itkVectorContainerULLUI_cast


def itkVectorContainerULLULL_New():
    return itkVectorContainerULLULL.New()

class itkVectorContainerULLULL(itk.ITKCommonBasePython.itkObject):
    r"""


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    {Core/Common/IterateOnAVectorContainer,Iterate On A Vector Container}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerULLULL___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLULL_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLULL_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLULL_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLULL_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLULL_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLULL_GetElement)
    SetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLULL_SetElement)
    InsertElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLULL_InsertElement)
    IndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLULL_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLULL_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLULL_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLULL_DeleteIndex)
    Size = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLULL_Size)
    Reserve = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLULL_Reserve)
    Squeeze = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLULL_Squeeze)
    Initialize = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLULL_Initialize)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLULL
    cast = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerULLULL_cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLULL

        Create a new object of the class itkVectorContainerULLULL and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLULL.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLULL.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLULL.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLULL in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerULLULL_swigregister(itkVectorContainerULLULL)
itkVectorContainerULLULL___New_orig__ = _itkVectorContainerPython.itkVectorContainerULLULL___New_orig__
itkVectorContainerULLULL_cast = _itkVectorContainerPython.itkVectorContainerULLULL_cast


def itkVectorContainerULLUS_New():
    return itkVectorContainerULLUS.New()

class itkVectorContainerULLUS(itk.ITKCommonBasePython.itkObject):
    r"""


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    {Core/Common/IterateOnAVectorContainer,Iterate On A Vector Container}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerULLUS___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLUS_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLUS_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLUS_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLUS_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLUS_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLUS_GetElement)
    SetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLUS_SetElement)
    InsertElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLUS_InsertElement)
    IndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLUS_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLUS_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLUS_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLUS_DeleteIndex)
    Size = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLUS_Size)
    Reserve = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLUS_Reserve)
    Squeeze = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLUS_Squeeze)
    Initialize = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLUS_Initialize)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLUS
    cast = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerULLUS_cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLUS

        Create a new object of the class itkVectorContainerULLUS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLUS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLUS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLUS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLUS in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerULLUS_swigregister(itkVectorContainerULLUS)
itkVectorContainerULLUS___New_orig__ = _itkVectorContainerPython.itkVectorContainerULLUS___New_orig__
itkVectorContainerULLUS_cast = _itkVectorContainerPython.itkVectorContainerULLUS_cast


def itkVectorContainerULLVD2_New():
    return itkVectorContainerULLVD2.New()

class itkVectorContainerULLVD2(itk.ITKCommonBasePython.itkObject):
    r"""


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    {Core/Common/IterateOnAVectorContainer,Iterate On A Vector Container}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerULLVD2___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVD2_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVD2_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVD2_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVD2_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVD2_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVD2_GetElement)
    SetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVD2_SetElement)
    InsertElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVD2_InsertElement)
    IndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVD2_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVD2_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVD2_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVD2_DeleteIndex)
    Size = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVD2_Size)
    Reserve = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVD2_Reserve)
    Squeeze = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVD2_Squeeze)
    Initialize = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVD2_Initialize)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLVD2
    cast = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerULLVD2_cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLVD2

        Create a new object of the class itkVectorContainerULLVD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLVD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLVD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLVD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLVD2 in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerULLVD2_swigregister(itkVectorContainerULLVD2)
itkVectorContainerULLVD2___New_orig__ = _itkVectorContainerPython.itkVectorContainerULLVD2___New_orig__
itkVectorContainerULLVD2_cast = _itkVectorContainerPython.itkVectorContainerULLVD2_cast


def itkVectorContainerULLVD3_New():
    return itkVectorContainerULLVD3.New()

class itkVectorContainerULLVD3(itk.ITKCommonBasePython.itkObject):
    r"""


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    {Core/Common/IterateOnAVectorContainer,Iterate On A Vector Container}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerULLVD3___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVD3_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVD3_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVD3_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVD3_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVD3_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVD3_GetElement)
    SetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVD3_SetElement)
    InsertElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVD3_InsertElement)
    IndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVD3_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVD3_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVD3_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVD3_DeleteIndex)
    Size = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVD3_Size)
    Reserve = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVD3_Reserve)
    Squeeze = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVD3_Squeeze)
    Initialize = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVD3_Initialize)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLVD3
    cast = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerULLVD3_cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLVD3

        Create a new object of the class itkVectorContainerULLVD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLVD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLVD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLVD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLVD3 in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerULLVD3_swigregister(itkVectorContainerULLVD3)
itkVectorContainerULLVD3___New_orig__ = _itkVectorContainerPython.itkVectorContainerULLVD3___New_orig__
itkVectorContainerULLVD3_cast = _itkVectorContainerPython.itkVectorContainerULLVD3_cast


def itkVectorContainerULLVF2_New():
    return itkVectorContainerULLVF2.New()

class itkVectorContainerULLVF2(itk.ITKCommonBasePython.itkObject):
    r"""


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    {Core/Common/IterateOnAVectorContainer,Iterate On A Vector Container}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerULLVF2___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVF2_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVF2_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVF2_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVF2_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVF2_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVF2_GetElement)
    SetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVF2_SetElement)
    InsertElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVF2_InsertElement)
    IndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVF2_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVF2_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVF2_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVF2_DeleteIndex)
    Size = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVF2_Size)
    Reserve = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVF2_Reserve)
    Squeeze = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVF2_Squeeze)
    Initialize = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVF2_Initialize)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLVF2
    cast = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerULLVF2_cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLVF2

        Create a new object of the class itkVectorContainerULLVF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLVF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLVF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLVF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLVF2 in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerULLVF2_swigregister(itkVectorContainerULLVF2)
itkVectorContainerULLVF2___New_orig__ = _itkVectorContainerPython.itkVectorContainerULLVF2___New_orig__
itkVectorContainerULLVF2_cast = _itkVectorContainerPython.itkVectorContainerULLVF2_cast


def itkVectorContainerULLVF3_New():
    return itkVectorContainerULLVF3.New()

class itkVectorContainerULLVF3(itk.ITKCommonBasePython.itkObject):
    r"""


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    {Core/Common/IterateOnAVectorContainer,Iterate On A Vector Container}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerULLVF3___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVF3_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVF3_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVF3_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVF3_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVF3_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVF3_GetElement)
    SetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVF3_SetElement)
    InsertElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVF3_InsertElement)
    IndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVF3_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVF3_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVF3_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVF3_DeleteIndex)
    Size = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVF3_Size)
    Reserve = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVF3_Reserve)
    Squeeze = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVF3_Squeeze)
    Initialize = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerULLVF3_Initialize)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLVF3
    cast = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerULLVF3_cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLVF3

        Create a new object of the class itkVectorContainerULLVF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLVF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLVF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLVF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLVF3 in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerULLVF3_swigregister(itkVectorContainerULLVF3)
itkVectorContainerULLVF3___New_orig__ = _itkVectorContainerPython.itkVectorContainerULLVF3___New_orig__
itkVectorContainerULLVF3_cast = _itkVectorContainerPython.itkVectorContainerULLVF3_cast


def itkVectorContainerUSUC_New():
    return itkVectorContainerUSUC.New()

class itkVectorContainerUSUC(itk.ITKCommonBasePython.itkObject):
    r"""


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    {Core/Common/IterateOnAVectorContainer,Iterate On A Vector Container}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerUSUC___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSUC_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSUC_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSUC_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSUC_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSUC_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSUC_GetElement)
    SetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSUC_SetElement)
    InsertElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSUC_InsertElement)
    IndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSUC_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSUC_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSUC_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSUC_DeleteIndex)
    Size = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSUC_Size)
    Reserve = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSUC_Reserve)
    Squeeze = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSUC_Squeeze)
    Initialize = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSUC_Initialize)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUSUC
    cast = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerUSUC_cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUSUC

        Create a new object of the class itkVectorContainerUSUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUSUC.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerUSUC.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerUSUC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerUSUC in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerUSUC_swigregister(itkVectorContainerUSUC)
itkVectorContainerUSUC___New_orig__ = _itkVectorContainerPython.itkVectorContainerUSUC___New_orig__
itkVectorContainerUSUC_cast = _itkVectorContainerPython.itkVectorContainerUSUC_cast


def itkVectorContainerUSUI_New():
    return itkVectorContainerUSUI.New()

class itkVectorContainerUSUI(itk.ITKCommonBasePython.itkObject):
    r"""


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    {Core/Common/IterateOnAVectorContainer,Iterate On A Vector Container}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerUSUI___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSUI_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSUI_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSUI_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSUI_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSUI_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSUI_GetElement)
    SetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSUI_SetElement)
    InsertElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSUI_InsertElement)
    IndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSUI_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSUI_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSUI_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSUI_DeleteIndex)
    Size = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSUI_Size)
    Reserve = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSUI_Reserve)
    Squeeze = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSUI_Squeeze)
    Initialize = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSUI_Initialize)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUSUI
    cast = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerUSUI_cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUSUI

        Create a new object of the class itkVectorContainerUSUI and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUSUI.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerUSUI.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerUSUI.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerUSUI in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerUSUI_swigregister(itkVectorContainerUSUI)
itkVectorContainerUSUI___New_orig__ = _itkVectorContainerPython.itkVectorContainerUSUI___New_orig__
itkVectorContainerUSUI_cast = _itkVectorContainerPython.itkVectorContainerUSUI_cast


def itkVectorContainerUSULL_New():
    return itkVectorContainerUSULL.New()

class itkVectorContainerUSULL(itk.ITKCommonBasePython.itkObject):
    r"""


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    {Core/Common/IterateOnAVectorContainer,Iterate On A Vector Container}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerUSULL___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSULL_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSULL_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSULL_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSULL_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSULL_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSULL_GetElement)
    SetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSULL_SetElement)
    InsertElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSULL_InsertElement)
    IndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSULL_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSULL_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSULL_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSULL_DeleteIndex)
    Size = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSULL_Size)
    Reserve = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSULL_Reserve)
    Squeeze = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSULL_Squeeze)
    Initialize = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSULL_Initialize)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUSULL
    cast = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerUSULL_cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUSULL

        Create a new object of the class itkVectorContainerUSULL and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUSULL.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerUSULL.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerUSULL.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerUSULL in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerUSULL_swigregister(itkVectorContainerUSULL)
itkVectorContainerUSULL___New_orig__ = _itkVectorContainerPython.itkVectorContainerUSULL___New_orig__
itkVectorContainerUSULL_cast = _itkVectorContainerPython.itkVectorContainerUSULL_cast


def itkVectorContainerUSUS_New():
    return itkVectorContainerUSUS.New()

class itkVectorContainerUSUS(itk.ITKCommonBasePython.itkObject):
    r"""


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    {Core/Common/IterateOnAVectorContainer,Iterate On A Vector Container}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerUSUS___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSUS_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSUS_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSUS_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSUS_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSUS_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSUS_GetElement)
    SetElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSUS_SetElement)
    InsertElement = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSUS_InsertElement)
    IndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSUS_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSUS_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSUS_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSUS_DeleteIndex)
    Size = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSUS_Size)
    Reserve = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSUS_Reserve)
    Squeeze = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSUS_Squeeze)
    Initialize = _swig_new_instance_method(_itkVectorContainerPython.itkVectorContainerUSUS_Initialize)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUSUS
    cast = _swig_new_static_method(_itkVectorContainerPython.itkVectorContainerUSUS_cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUSUS

        Create a new object of the class itkVectorContainerUSUS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUSUS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerUSUS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerUSUS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerUSUS in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerUSUS_swigregister(itkVectorContainerUSUS)
itkVectorContainerUSUS___New_orig__ = _itkVectorContainerPython.itkVectorContainerUSUS___New_orig__
itkVectorContainerUSUS_cast = _itkVectorContainerPython.itkVectorContainerUSUS_cast



