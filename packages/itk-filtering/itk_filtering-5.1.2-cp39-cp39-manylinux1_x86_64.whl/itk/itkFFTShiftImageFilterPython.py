# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKFFTPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkFFTShiftImageFilterPython
else:
    import _itkFFTShiftImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkFFTShiftImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkFFTShiftImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkCyclicShiftImageFilterPython
import itk.itkImageToImageFilterAPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkFixedArrayPython
import itk.itkSizePython
import itk.itkCovariantVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkRGBPixelPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterBPython

def itkFFTShiftImageFilterICF2ICF2_New():
    return itkFFTShiftImageFilterICF2ICF2.New()

class itkFFTShiftImageFilterICF2ICF2(itk.itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICF2ICF2):
    r"""


    Shift the zero-frequency components of a Fourier transform to the
    center of the image.

    The Fourier transform produces an image where the zero frequency
    components are in the corner of the image, making it difficult to
    understand. This filter shifts the component to the center of the
    image.

    For images with an odd-sized dimension, applying this filter twice
    will not produce the same image as the original one without using
    SetInverse(true) on one (and only one) of the two filters.
    https://hdl.handle.net/1926/321

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   ForwardFFTImageFilter, InverseFFTImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICF2ICF2___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICF2ICF2_Clone)
    SetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICF2ICF2_SetInverse)
    GetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICF2ICF2_GetInverse)
    InverseOn = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICF2ICF2_InverseOn)
    InverseOff = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICF2ICF2_InverseOff)
    __swig_destroy__ = _itkFFTShiftImageFilterPython.delete_itkFFTShiftImageFilterICF2ICF2
    cast = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICF2ICF2_cast)

    def New(*args, **kargs):
        """New() -> itkFFTShiftImageFilterICF2ICF2

        Create a new object of the class itkFFTShiftImageFilterICF2ICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTShiftImageFilterICF2ICF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTShiftImageFilterICF2ICF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTShiftImageFilterICF2ICF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTShiftImageFilterICF2ICF2 in _itkFFTShiftImageFilterPython:
_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICF2ICF2_swigregister(itkFFTShiftImageFilterICF2ICF2)
itkFFTShiftImageFilterICF2ICF2___New_orig__ = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICF2ICF2___New_orig__
itkFFTShiftImageFilterICF2ICF2_cast = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICF2ICF2_cast


def itkFFTShiftImageFilterICF3ICF3_New():
    return itkFFTShiftImageFilterICF3ICF3.New()

class itkFFTShiftImageFilterICF3ICF3(itk.itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICF3ICF3):
    r"""


    Shift the zero-frequency components of a Fourier transform to the
    center of the image.

    The Fourier transform produces an image where the zero frequency
    components are in the corner of the image, making it difficult to
    understand. This filter shifts the component to the center of the
    image.

    For images with an odd-sized dimension, applying this filter twice
    will not produce the same image as the original one without using
    SetInverse(true) on one (and only one) of the two filters.
    https://hdl.handle.net/1926/321

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   ForwardFFTImageFilter, InverseFFTImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICF3ICF3___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICF3ICF3_Clone)
    SetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICF3ICF3_SetInverse)
    GetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICF3ICF3_GetInverse)
    InverseOn = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICF3ICF3_InverseOn)
    InverseOff = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICF3ICF3_InverseOff)
    __swig_destroy__ = _itkFFTShiftImageFilterPython.delete_itkFFTShiftImageFilterICF3ICF3
    cast = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICF3ICF3_cast)

    def New(*args, **kargs):
        """New() -> itkFFTShiftImageFilterICF3ICF3

        Create a new object of the class itkFFTShiftImageFilterICF3ICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTShiftImageFilterICF3ICF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTShiftImageFilterICF3ICF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTShiftImageFilterICF3ICF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTShiftImageFilterICF3ICF3 in _itkFFTShiftImageFilterPython:
_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICF3ICF3_swigregister(itkFFTShiftImageFilterICF3ICF3)
itkFFTShiftImageFilterICF3ICF3___New_orig__ = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICF3ICF3___New_orig__
itkFFTShiftImageFilterICF3ICF3_cast = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICF3ICF3_cast


def itkFFTShiftImageFilterICVF22ICVF22_New():
    return itkFFTShiftImageFilterICVF22ICVF22.New()

class itkFFTShiftImageFilterICVF22ICVF22(itk.itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF22ICVF22):
    r"""


    Shift the zero-frequency components of a Fourier transform to the
    center of the image.

    The Fourier transform produces an image where the zero frequency
    components are in the corner of the image, making it difficult to
    understand. This filter shifts the component to the center of the
    image.

    For images with an odd-sized dimension, applying this filter twice
    will not produce the same image as the original one without using
    SetInverse(true) on one (and only one) of the two filters.
    https://hdl.handle.net/1926/321

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   ForwardFFTImageFilter, InverseFFTImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF22ICVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF22ICVF22_Clone)
    SetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF22ICVF22_SetInverse)
    GetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF22ICVF22_GetInverse)
    InverseOn = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF22ICVF22_InverseOn)
    InverseOff = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF22ICVF22_InverseOff)
    __swig_destroy__ = _itkFFTShiftImageFilterPython.delete_itkFFTShiftImageFilterICVF22ICVF22
    cast = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF22ICVF22_cast)

    def New(*args, **kargs):
        """New() -> itkFFTShiftImageFilterICVF22ICVF22

        Create a new object of the class itkFFTShiftImageFilterICVF22ICVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTShiftImageFilterICVF22ICVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTShiftImageFilterICVF22ICVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTShiftImageFilterICVF22ICVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTShiftImageFilterICVF22ICVF22 in _itkFFTShiftImageFilterPython:
_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF22ICVF22_swigregister(itkFFTShiftImageFilterICVF22ICVF22)
itkFFTShiftImageFilterICVF22ICVF22___New_orig__ = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF22ICVF22___New_orig__
itkFFTShiftImageFilterICVF22ICVF22_cast = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF22ICVF22_cast


def itkFFTShiftImageFilterICVF23ICVF23_New():
    return itkFFTShiftImageFilterICVF23ICVF23.New()

class itkFFTShiftImageFilterICVF23ICVF23(itk.itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF23ICVF23):
    r"""


    Shift the zero-frequency components of a Fourier transform to the
    center of the image.

    The Fourier transform produces an image where the zero frequency
    components are in the corner of the image, making it difficult to
    understand. This filter shifts the component to the center of the
    image.

    For images with an odd-sized dimension, applying this filter twice
    will not produce the same image as the original one without using
    SetInverse(true) on one (and only one) of the two filters.
    https://hdl.handle.net/1926/321

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   ForwardFFTImageFilter, InverseFFTImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF23ICVF23___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF23ICVF23_Clone)
    SetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF23ICVF23_SetInverse)
    GetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF23ICVF23_GetInverse)
    InverseOn = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF23ICVF23_InverseOn)
    InverseOff = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF23ICVF23_InverseOff)
    __swig_destroy__ = _itkFFTShiftImageFilterPython.delete_itkFFTShiftImageFilterICVF23ICVF23
    cast = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF23ICVF23_cast)

    def New(*args, **kargs):
        """New() -> itkFFTShiftImageFilterICVF23ICVF23

        Create a new object of the class itkFFTShiftImageFilterICVF23ICVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTShiftImageFilterICVF23ICVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTShiftImageFilterICVF23ICVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTShiftImageFilterICVF23ICVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTShiftImageFilterICVF23ICVF23 in _itkFFTShiftImageFilterPython:
_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF23ICVF23_swigregister(itkFFTShiftImageFilterICVF23ICVF23)
itkFFTShiftImageFilterICVF23ICVF23___New_orig__ = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF23ICVF23___New_orig__
itkFFTShiftImageFilterICVF23ICVF23_cast = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF23ICVF23_cast


def itkFFTShiftImageFilterICVF32ICVF32_New():
    return itkFFTShiftImageFilterICVF32ICVF32.New()

class itkFFTShiftImageFilterICVF32ICVF32(itk.itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF32ICVF32):
    r"""


    Shift the zero-frequency components of a Fourier transform to the
    center of the image.

    The Fourier transform produces an image where the zero frequency
    components are in the corner of the image, making it difficult to
    understand. This filter shifts the component to the center of the
    image.

    For images with an odd-sized dimension, applying this filter twice
    will not produce the same image as the original one without using
    SetInverse(true) on one (and only one) of the two filters.
    https://hdl.handle.net/1926/321

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   ForwardFFTImageFilter, InverseFFTImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF32ICVF32___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF32ICVF32_Clone)
    SetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF32ICVF32_SetInverse)
    GetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF32ICVF32_GetInverse)
    InverseOn = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF32ICVF32_InverseOn)
    InverseOff = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF32ICVF32_InverseOff)
    __swig_destroy__ = _itkFFTShiftImageFilterPython.delete_itkFFTShiftImageFilterICVF32ICVF32
    cast = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF32ICVF32_cast)

    def New(*args, **kargs):
        """New() -> itkFFTShiftImageFilterICVF32ICVF32

        Create a new object of the class itkFFTShiftImageFilterICVF32ICVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTShiftImageFilterICVF32ICVF32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTShiftImageFilterICVF32ICVF32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTShiftImageFilterICVF32ICVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTShiftImageFilterICVF32ICVF32 in _itkFFTShiftImageFilterPython:
_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF32ICVF32_swigregister(itkFFTShiftImageFilterICVF32ICVF32)
itkFFTShiftImageFilterICVF32ICVF32___New_orig__ = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF32ICVF32___New_orig__
itkFFTShiftImageFilterICVF32ICVF32_cast = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF32ICVF32_cast


def itkFFTShiftImageFilterICVF33ICVF33_New():
    return itkFFTShiftImageFilterICVF33ICVF33.New()

class itkFFTShiftImageFilterICVF33ICVF33(itk.itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF33ICVF33):
    r"""


    Shift the zero-frequency components of a Fourier transform to the
    center of the image.

    The Fourier transform produces an image where the zero frequency
    components are in the corner of the image, making it difficult to
    understand. This filter shifts the component to the center of the
    image.

    For images with an odd-sized dimension, applying this filter twice
    will not produce the same image as the original one without using
    SetInverse(true) on one (and only one) of the two filters.
    https://hdl.handle.net/1926/321

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   ForwardFFTImageFilter, InverseFFTImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF33ICVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF33ICVF33_Clone)
    SetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF33ICVF33_SetInverse)
    GetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF33ICVF33_GetInverse)
    InverseOn = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF33ICVF33_InverseOn)
    InverseOff = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF33ICVF33_InverseOff)
    __swig_destroy__ = _itkFFTShiftImageFilterPython.delete_itkFFTShiftImageFilterICVF33ICVF33
    cast = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF33ICVF33_cast)

    def New(*args, **kargs):
        """New() -> itkFFTShiftImageFilterICVF33ICVF33

        Create a new object of the class itkFFTShiftImageFilterICVF33ICVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTShiftImageFilterICVF33ICVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTShiftImageFilterICVF33ICVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTShiftImageFilterICVF33ICVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTShiftImageFilterICVF33ICVF33 in _itkFFTShiftImageFilterPython:
_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF33ICVF33_swigregister(itkFFTShiftImageFilterICVF33ICVF33)
itkFFTShiftImageFilterICVF33ICVF33___New_orig__ = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF33ICVF33___New_orig__
itkFFTShiftImageFilterICVF33ICVF33_cast = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF33ICVF33_cast


def itkFFTShiftImageFilterICVF42ICVF42_New():
    return itkFFTShiftImageFilterICVF42ICVF42.New()

class itkFFTShiftImageFilterICVF42ICVF42(itk.itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF42ICVF42):
    r"""


    Shift the zero-frequency components of a Fourier transform to the
    center of the image.

    The Fourier transform produces an image where the zero frequency
    components are in the corner of the image, making it difficult to
    understand. This filter shifts the component to the center of the
    image.

    For images with an odd-sized dimension, applying this filter twice
    will not produce the same image as the original one without using
    SetInverse(true) on one (and only one) of the two filters.
    https://hdl.handle.net/1926/321

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   ForwardFFTImageFilter, InverseFFTImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF42ICVF42___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF42ICVF42_Clone)
    SetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF42ICVF42_SetInverse)
    GetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF42ICVF42_GetInverse)
    InverseOn = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF42ICVF42_InverseOn)
    InverseOff = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF42ICVF42_InverseOff)
    __swig_destroy__ = _itkFFTShiftImageFilterPython.delete_itkFFTShiftImageFilterICVF42ICVF42
    cast = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF42ICVF42_cast)

    def New(*args, **kargs):
        """New() -> itkFFTShiftImageFilterICVF42ICVF42

        Create a new object of the class itkFFTShiftImageFilterICVF42ICVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTShiftImageFilterICVF42ICVF42.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTShiftImageFilterICVF42ICVF42.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTShiftImageFilterICVF42ICVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTShiftImageFilterICVF42ICVF42 in _itkFFTShiftImageFilterPython:
_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF42ICVF42_swigregister(itkFFTShiftImageFilterICVF42ICVF42)
itkFFTShiftImageFilterICVF42ICVF42___New_orig__ = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF42ICVF42___New_orig__
itkFFTShiftImageFilterICVF42ICVF42_cast = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF42ICVF42_cast


def itkFFTShiftImageFilterICVF43ICVF43_New():
    return itkFFTShiftImageFilterICVF43ICVF43.New()

class itkFFTShiftImageFilterICVF43ICVF43(itk.itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterICVF43ICVF43):
    r"""


    Shift the zero-frequency components of a Fourier transform to the
    center of the image.

    The Fourier transform produces an image where the zero frequency
    components are in the corner of the image, making it difficult to
    understand. This filter shifts the component to the center of the
    image.

    For images with an odd-sized dimension, applying this filter twice
    will not produce the same image as the original one without using
    SetInverse(true) on one (and only one) of the two filters.
    https://hdl.handle.net/1926/321

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   ForwardFFTImageFilter, InverseFFTImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF43ICVF43___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF43ICVF43_Clone)
    SetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF43ICVF43_SetInverse)
    GetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF43ICVF43_GetInverse)
    InverseOn = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF43ICVF43_InverseOn)
    InverseOff = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF43ICVF43_InverseOff)
    __swig_destroy__ = _itkFFTShiftImageFilterPython.delete_itkFFTShiftImageFilterICVF43ICVF43
    cast = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF43ICVF43_cast)

    def New(*args, **kargs):
        """New() -> itkFFTShiftImageFilterICVF43ICVF43

        Create a new object of the class itkFFTShiftImageFilterICVF43ICVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTShiftImageFilterICVF43ICVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTShiftImageFilterICVF43ICVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTShiftImageFilterICVF43ICVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTShiftImageFilterICVF43ICVF43 in _itkFFTShiftImageFilterPython:
_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF43ICVF43_swigregister(itkFFTShiftImageFilterICVF43ICVF43)
itkFFTShiftImageFilterICVF43ICVF43___New_orig__ = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF43ICVF43___New_orig__
itkFFTShiftImageFilterICVF43ICVF43_cast = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterICVF43ICVF43_cast


def itkFFTShiftImageFilterID2ID2_New():
    return itkFFTShiftImageFilterID2ID2.New()

class itkFFTShiftImageFilterID2ID2(itk.itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterID2ID2):
    r"""


    Shift the zero-frequency components of a Fourier transform to the
    center of the image.

    The Fourier transform produces an image where the zero frequency
    components are in the corner of the image, making it difficult to
    understand. This filter shifts the component to the center of the
    image.

    For images with an odd-sized dimension, applying this filter twice
    will not produce the same image as the original one without using
    SetInverse(true) on one (and only one) of the two filters.
    https://hdl.handle.net/1926/321

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   ForwardFFTImageFilter, InverseFFTImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterID2ID2_Clone)
    SetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterID2ID2_SetInverse)
    GetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterID2ID2_GetInverse)
    InverseOn = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterID2ID2_InverseOn)
    InverseOff = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterID2ID2_InverseOff)
    __swig_destroy__ = _itkFFTShiftImageFilterPython.delete_itkFFTShiftImageFilterID2ID2
    cast = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkFFTShiftImageFilterID2ID2

        Create a new object of the class itkFFTShiftImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTShiftImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTShiftImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTShiftImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTShiftImageFilterID2ID2 in _itkFFTShiftImageFilterPython:
_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterID2ID2_swigregister(itkFFTShiftImageFilterID2ID2)
itkFFTShiftImageFilterID2ID2___New_orig__ = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterID2ID2___New_orig__
itkFFTShiftImageFilterID2ID2_cast = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterID2ID2_cast


def itkFFTShiftImageFilterID3ID3_New():
    return itkFFTShiftImageFilterID3ID3.New()

class itkFFTShiftImageFilterID3ID3(itk.itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterID3ID3):
    r"""


    Shift the zero-frequency components of a Fourier transform to the
    center of the image.

    The Fourier transform produces an image where the zero frequency
    components are in the corner of the image, making it difficult to
    understand. This filter shifts the component to the center of the
    image.

    For images with an odd-sized dimension, applying this filter twice
    will not produce the same image as the original one without using
    SetInverse(true) on one (and only one) of the two filters.
    https://hdl.handle.net/1926/321

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   ForwardFFTImageFilter, InverseFFTImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterID3ID3_Clone)
    SetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterID3ID3_SetInverse)
    GetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterID3ID3_GetInverse)
    InverseOn = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterID3ID3_InverseOn)
    InverseOff = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterID3ID3_InverseOff)
    __swig_destroy__ = _itkFFTShiftImageFilterPython.delete_itkFFTShiftImageFilterID3ID3
    cast = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkFFTShiftImageFilterID3ID3

        Create a new object of the class itkFFTShiftImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTShiftImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTShiftImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTShiftImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTShiftImageFilterID3ID3 in _itkFFTShiftImageFilterPython:
_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterID3ID3_swigregister(itkFFTShiftImageFilterID3ID3)
itkFFTShiftImageFilterID3ID3___New_orig__ = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterID3ID3___New_orig__
itkFFTShiftImageFilterID3ID3_cast = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterID3ID3_cast


def itkFFTShiftImageFilterIF2IF2_New():
    return itkFFTShiftImageFilterIF2IF2.New()

class itkFFTShiftImageFilterIF2IF2(itk.itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIF2IF2):
    r"""


    Shift the zero-frequency components of a Fourier transform to the
    center of the image.

    The Fourier transform produces an image where the zero frequency
    components are in the corner of the image, making it difficult to
    understand. This filter shifts the component to the center of the
    image.

    For images with an odd-sized dimension, applying this filter twice
    will not produce the same image as the original one without using
    SetInverse(true) on one (and only one) of the two filters.
    https://hdl.handle.net/1926/321

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   ForwardFFTImageFilter, InverseFFTImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIF2IF2_Clone)
    SetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIF2IF2_SetInverse)
    GetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIF2IF2_GetInverse)
    InverseOn = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIF2IF2_InverseOn)
    InverseOff = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIF2IF2_InverseOff)
    __swig_destroy__ = _itkFFTShiftImageFilterPython.delete_itkFFTShiftImageFilterIF2IF2
    cast = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkFFTShiftImageFilterIF2IF2

        Create a new object of the class itkFFTShiftImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTShiftImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTShiftImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTShiftImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTShiftImageFilterIF2IF2 in _itkFFTShiftImageFilterPython:
_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIF2IF2_swigregister(itkFFTShiftImageFilterIF2IF2)
itkFFTShiftImageFilterIF2IF2___New_orig__ = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIF2IF2___New_orig__
itkFFTShiftImageFilterIF2IF2_cast = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIF2IF2_cast


def itkFFTShiftImageFilterIF3IF3_New():
    return itkFFTShiftImageFilterIF3IF3.New()

class itkFFTShiftImageFilterIF3IF3(itk.itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIF3IF3):
    r"""


    Shift the zero-frequency components of a Fourier transform to the
    center of the image.

    The Fourier transform produces an image where the zero frequency
    components are in the corner of the image, making it difficult to
    understand. This filter shifts the component to the center of the
    image.

    For images with an odd-sized dimension, applying this filter twice
    will not produce the same image as the original one without using
    SetInverse(true) on one (and only one) of the two filters.
    https://hdl.handle.net/1926/321

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   ForwardFFTImageFilter, InverseFFTImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIF3IF3_Clone)
    SetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIF3IF3_SetInverse)
    GetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIF3IF3_GetInverse)
    InverseOn = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIF3IF3_InverseOn)
    InverseOff = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIF3IF3_InverseOff)
    __swig_destroy__ = _itkFFTShiftImageFilterPython.delete_itkFFTShiftImageFilterIF3IF3
    cast = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkFFTShiftImageFilterIF3IF3

        Create a new object of the class itkFFTShiftImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTShiftImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTShiftImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTShiftImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTShiftImageFilterIF3IF3 in _itkFFTShiftImageFilterPython:
_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIF3IF3_swigregister(itkFFTShiftImageFilterIF3IF3)
itkFFTShiftImageFilterIF3IF3___New_orig__ = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIF3IF3___New_orig__
itkFFTShiftImageFilterIF3IF3_cast = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIF3IF3_cast


def itkFFTShiftImageFilterIRGBAUC2IRGBAUC2_New():
    return itkFFTShiftImageFilterIRGBAUC2IRGBAUC2.New()

class itkFFTShiftImageFilterIRGBAUC2IRGBAUC2(itk.itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIRGBAUC2IRGBAUC2):
    r"""


    Shift the zero-frequency components of a Fourier transform to the
    center of the image.

    The Fourier transform produces an image where the zero frequency
    components are in the corner of the image, making it difficult to
    understand. This filter shifts the component to the center of the
    image.

    For images with an odd-sized dimension, applying this filter twice
    will not produce the same image as the original one without using
    SetInverse(true) on one (and only one) of the two filters.
    https://hdl.handle.net/1926/321

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   ForwardFFTImageFilter, InverseFFTImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIRGBAUC2IRGBAUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIRGBAUC2IRGBAUC2_Clone)
    SetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIRGBAUC2IRGBAUC2_SetInverse)
    GetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIRGBAUC2IRGBAUC2_GetInverse)
    InverseOn = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIRGBAUC2IRGBAUC2_InverseOn)
    InverseOff = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIRGBAUC2IRGBAUC2_InverseOff)
    __swig_destroy__ = _itkFFTShiftImageFilterPython.delete_itkFFTShiftImageFilterIRGBAUC2IRGBAUC2
    cast = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIRGBAUC2IRGBAUC2_cast)

    def New(*args, **kargs):
        """New() -> itkFFTShiftImageFilterIRGBAUC2IRGBAUC2

        Create a new object of the class itkFFTShiftImageFilterIRGBAUC2IRGBAUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTShiftImageFilterIRGBAUC2IRGBAUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTShiftImageFilterIRGBAUC2IRGBAUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTShiftImageFilterIRGBAUC2IRGBAUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTShiftImageFilterIRGBAUC2IRGBAUC2 in _itkFFTShiftImageFilterPython:
_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIRGBAUC2IRGBAUC2_swigregister(itkFFTShiftImageFilterIRGBAUC2IRGBAUC2)
itkFFTShiftImageFilterIRGBAUC2IRGBAUC2___New_orig__ = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIRGBAUC2IRGBAUC2___New_orig__
itkFFTShiftImageFilterIRGBAUC2IRGBAUC2_cast = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIRGBAUC2IRGBAUC2_cast


def itkFFTShiftImageFilterIRGBAUC3IRGBAUC3_New():
    return itkFFTShiftImageFilterIRGBAUC3IRGBAUC3.New()

class itkFFTShiftImageFilterIRGBAUC3IRGBAUC3(itk.itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIRGBAUC3IRGBAUC3):
    r"""


    Shift the zero-frequency components of a Fourier transform to the
    center of the image.

    The Fourier transform produces an image where the zero frequency
    components are in the corner of the image, making it difficult to
    understand. This filter shifts the component to the center of the
    image.

    For images with an odd-sized dimension, applying this filter twice
    will not produce the same image as the original one without using
    SetInverse(true) on one (and only one) of the two filters.
    https://hdl.handle.net/1926/321

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   ForwardFFTImageFilter, InverseFFTImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIRGBAUC3IRGBAUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIRGBAUC3IRGBAUC3_Clone)
    SetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIRGBAUC3IRGBAUC3_SetInverse)
    GetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIRGBAUC3IRGBAUC3_GetInverse)
    InverseOn = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIRGBAUC3IRGBAUC3_InverseOn)
    InverseOff = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIRGBAUC3IRGBAUC3_InverseOff)
    __swig_destroy__ = _itkFFTShiftImageFilterPython.delete_itkFFTShiftImageFilterIRGBAUC3IRGBAUC3
    cast = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIRGBAUC3IRGBAUC3_cast)

    def New(*args, **kargs):
        """New() -> itkFFTShiftImageFilterIRGBAUC3IRGBAUC3

        Create a new object of the class itkFFTShiftImageFilterIRGBAUC3IRGBAUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTShiftImageFilterIRGBAUC3IRGBAUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTShiftImageFilterIRGBAUC3IRGBAUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTShiftImageFilterIRGBAUC3IRGBAUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTShiftImageFilterIRGBAUC3IRGBAUC3 in _itkFFTShiftImageFilterPython:
_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIRGBAUC3IRGBAUC3_swigregister(itkFFTShiftImageFilterIRGBAUC3IRGBAUC3)
itkFFTShiftImageFilterIRGBAUC3IRGBAUC3___New_orig__ = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIRGBAUC3IRGBAUC3___New_orig__
itkFFTShiftImageFilterIRGBAUC3IRGBAUC3_cast = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIRGBAUC3IRGBAUC3_cast


def itkFFTShiftImageFilterIRGBUC2IRGBUC2_New():
    return itkFFTShiftImageFilterIRGBUC2IRGBUC2.New()

class itkFFTShiftImageFilterIRGBUC2IRGBUC2(itk.itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIRGBUC2IRGBUC2):
    r"""


    Shift the zero-frequency components of a Fourier transform to the
    center of the image.

    The Fourier transform produces an image where the zero frequency
    components are in the corner of the image, making it difficult to
    understand. This filter shifts the component to the center of the
    image.

    For images with an odd-sized dimension, applying this filter twice
    will not produce the same image as the original one without using
    SetInverse(true) on one (and only one) of the two filters.
    https://hdl.handle.net/1926/321

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   ForwardFFTImageFilter, InverseFFTImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIRGBUC2IRGBUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIRGBUC2IRGBUC2_Clone)
    SetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIRGBUC2IRGBUC2_SetInverse)
    GetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIRGBUC2IRGBUC2_GetInverse)
    InverseOn = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIRGBUC2IRGBUC2_InverseOn)
    InverseOff = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIRGBUC2IRGBUC2_InverseOff)
    __swig_destroy__ = _itkFFTShiftImageFilterPython.delete_itkFFTShiftImageFilterIRGBUC2IRGBUC2
    cast = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIRGBUC2IRGBUC2_cast)

    def New(*args, **kargs):
        """New() -> itkFFTShiftImageFilterIRGBUC2IRGBUC2

        Create a new object of the class itkFFTShiftImageFilterIRGBUC2IRGBUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTShiftImageFilterIRGBUC2IRGBUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTShiftImageFilterIRGBUC2IRGBUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTShiftImageFilterIRGBUC2IRGBUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTShiftImageFilterIRGBUC2IRGBUC2 in _itkFFTShiftImageFilterPython:
_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIRGBUC2IRGBUC2_swigregister(itkFFTShiftImageFilterIRGBUC2IRGBUC2)
itkFFTShiftImageFilterIRGBUC2IRGBUC2___New_orig__ = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIRGBUC2IRGBUC2___New_orig__
itkFFTShiftImageFilterIRGBUC2IRGBUC2_cast = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIRGBUC2IRGBUC2_cast


def itkFFTShiftImageFilterIRGBUC3IRGBUC3_New():
    return itkFFTShiftImageFilterIRGBUC3IRGBUC3.New()

class itkFFTShiftImageFilterIRGBUC3IRGBUC3(itk.itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIRGBUC3IRGBUC3):
    r"""


    Shift the zero-frequency components of a Fourier transform to the
    center of the image.

    The Fourier transform produces an image where the zero frequency
    components are in the corner of the image, making it difficult to
    understand. This filter shifts the component to the center of the
    image.

    For images with an odd-sized dimension, applying this filter twice
    will not produce the same image as the original one without using
    SetInverse(true) on one (and only one) of the two filters.
    https://hdl.handle.net/1926/321

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   ForwardFFTImageFilter, InverseFFTImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIRGBUC3IRGBUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIRGBUC3IRGBUC3_Clone)
    SetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIRGBUC3IRGBUC3_SetInverse)
    GetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIRGBUC3IRGBUC3_GetInverse)
    InverseOn = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIRGBUC3IRGBUC3_InverseOn)
    InverseOff = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIRGBUC3IRGBUC3_InverseOff)
    __swig_destroy__ = _itkFFTShiftImageFilterPython.delete_itkFFTShiftImageFilterIRGBUC3IRGBUC3
    cast = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIRGBUC3IRGBUC3_cast)

    def New(*args, **kargs):
        """New() -> itkFFTShiftImageFilterIRGBUC3IRGBUC3

        Create a new object of the class itkFFTShiftImageFilterIRGBUC3IRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTShiftImageFilterIRGBUC3IRGBUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTShiftImageFilterIRGBUC3IRGBUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTShiftImageFilterIRGBUC3IRGBUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTShiftImageFilterIRGBUC3IRGBUC3 in _itkFFTShiftImageFilterPython:
_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIRGBUC3IRGBUC3_swigregister(itkFFTShiftImageFilterIRGBUC3IRGBUC3)
itkFFTShiftImageFilterIRGBUC3IRGBUC3___New_orig__ = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIRGBUC3IRGBUC3___New_orig__
itkFFTShiftImageFilterIRGBUC3IRGBUC3_cast = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIRGBUC3IRGBUC3_cast


def itkFFTShiftImageFilterISS2ISS2_New():
    return itkFFTShiftImageFilterISS2ISS2.New()

class itkFFTShiftImageFilterISS2ISS2(itk.itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterISS2ISS2):
    r"""


    Shift the zero-frequency components of a Fourier transform to the
    center of the image.

    The Fourier transform produces an image where the zero frequency
    components are in the corner of the image, making it difficult to
    understand. This filter shifts the component to the center of the
    image.

    For images with an odd-sized dimension, applying this filter twice
    will not produce the same image as the original one without using
    SetInverse(true) on one (and only one) of the two filters.
    https://hdl.handle.net/1926/321

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   ForwardFFTImageFilter, InverseFFTImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterISS2ISS2_Clone)
    SetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterISS2ISS2_SetInverse)
    GetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterISS2ISS2_GetInverse)
    InverseOn = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterISS2ISS2_InverseOn)
    InverseOff = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterISS2ISS2_InverseOff)
    __swig_destroy__ = _itkFFTShiftImageFilterPython.delete_itkFFTShiftImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkFFTShiftImageFilterISS2ISS2

        Create a new object of the class itkFFTShiftImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTShiftImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTShiftImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTShiftImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTShiftImageFilterISS2ISS2 in _itkFFTShiftImageFilterPython:
_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterISS2ISS2_swigregister(itkFFTShiftImageFilterISS2ISS2)
itkFFTShiftImageFilterISS2ISS2___New_orig__ = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterISS2ISS2___New_orig__
itkFFTShiftImageFilterISS2ISS2_cast = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterISS2ISS2_cast


def itkFFTShiftImageFilterISS3ISS3_New():
    return itkFFTShiftImageFilterISS3ISS3.New()

class itkFFTShiftImageFilterISS3ISS3(itk.itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterISS3ISS3):
    r"""


    Shift the zero-frequency components of a Fourier transform to the
    center of the image.

    The Fourier transform produces an image where the zero frequency
    components are in the corner of the image, making it difficult to
    understand. This filter shifts the component to the center of the
    image.

    For images with an odd-sized dimension, applying this filter twice
    will not produce the same image as the original one without using
    SetInverse(true) on one (and only one) of the two filters.
    https://hdl.handle.net/1926/321

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   ForwardFFTImageFilter, InverseFFTImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterISS3ISS3_Clone)
    SetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterISS3ISS3_SetInverse)
    GetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterISS3ISS3_GetInverse)
    InverseOn = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterISS3ISS3_InverseOn)
    InverseOff = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterISS3ISS3_InverseOff)
    __swig_destroy__ = _itkFFTShiftImageFilterPython.delete_itkFFTShiftImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkFFTShiftImageFilterISS3ISS3

        Create a new object of the class itkFFTShiftImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTShiftImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTShiftImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTShiftImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTShiftImageFilterISS3ISS3 in _itkFFTShiftImageFilterPython:
_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterISS3ISS3_swigregister(itkFFTShiftImageFilterISS3ISS3)
itkFFTShiftImageFilterISS3ISS3___New_orig__ = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterISS3ISS3___New_orig__
itkFFTShiftImageFilterISS3ISS3_cast = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterISS3ISS3_cast


def itkFFTShiftImageFilterIUC2IUC2_New():
    return itkFFTShiftImageFilterIUC2IUC2.New()

class itkFFTShiftImageFilterIUC2IUC2(itk.itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIUC2IUC2):
    r"""


    Shift the zero-frequency components of a Fourier transform to the
    center of the image.

    The Fourier transform produces an image where the zero frequency
    components are in the corner of the image, making it difficult to
    understand. This filter shifts the component to the center of the
    image.

    For images with an odd-sized dimension, applying this filter twice
    will not produce the same image as the original one without using
    SetInverse(true) on one (and only one) of the two filters.
    https://hdl.handle.net/1926/321

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   ForwardFFTImageFilter, InverseFFTImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIUC2IUC2_Clone)
    SetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIUC2IUC2_SetInverse)
    GetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIUC2IUC2_GetInverse)
    InverseOn = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIUC2IUC2_InverseOn)
    InverseOff = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIUC2IUC2_InverseOff)
    __swig_destroy__ = _itkFFTShiftImageFilterPython.delete_itkFFTShiftImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkFFTShiftImageFilterIUC2IUC2

        Create a new object of the class itkFFTShiftImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTShiftImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTShiftImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTShiftImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTShiftImageFilterIUC2IUC2 in _itkFFTShiftImageFilterPython:
_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIUC2IUC2_swigregister(itkFFTShiftImageFilterIUC2IUC2)
itkFFTShiftImageFilterIUC2IUC2___New_orig__ = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIUC2IUC2___New_orig__
itkFFTShiftImageFilterIUC2IUC2_cast = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIUC2IUC2_cast


def itkFFTShiftImageFilterIUC3IUC3_New():
    return itkFFTShiftImageFilterIUC3IUC3.New()

class itkFFTShiftImageFilterIUC3IUC3(itk.itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIUC3IUC3):
    r"""


    Shift the zero-frequency components of a Fourier transform to the
    center of the image.

    The Fourier transform produces an image where the zero frequency
    components are in the corner of the image, making it difficult to
    understand. This filter shifts the component to the center of the
    image.

    For images with an odd-sized dimension, applying this filter twice
    will not produce the same image as the original one without using
    SetInverse(true) on one (and only one) of the two filters.
    https://hdl.handle.net/1926/321

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   ForwardFFTImageFilter, InverseFFTImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIUC3IUC3_Clone)
    SetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIUC3IUC3_SetInverse)
    GetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIUC3IUC3_GetInverse)
    InverseOn = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIUC3IUC3_InverseOn)
    InverseOff = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIUC3IUC3_InverseOff)
    __swig_destroy__ = _itkFFTShiftImageFilterPython.delete_itkFFTShiftImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkFFTShiftImageFilterIUC3IUC3

        Create a new object of the class itkFFTShiftImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTShiftImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTShiftImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTShiftImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTShiftImageFilterIUC3IUC3 in _itkFFTShiftImageFilterPython:
_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIUC3IUC3_swigregister(itkFFTShiftImageFilterIUC3IUC3)
itkFFTShiftImageFilterIUC3IUC3___New_orig__ = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIUC3IUC3___New_orig__
itkFFTShiftImageFilterIUC3IUC3_cast = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIUC3IUC3_cast


def itkFFTShiftImageFilterIUS2IUS2_New():
    return itkFFTShiftImageFilterIUS2IUS2.New()

class itkFFTShiftImageFilterIUS2IUS2(itk.itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIUS2IUS2):
    r"""


    Shift the zero-frequency components of a Fourier transform to the
    center of the image.

    The Fourier transform produces an image where the zero frequency
    components are in the corner of the image, making it difficult to
    understand. This filter shifts the component to the center of the
    image.

    For images with an odd-sized dimension, applying this filter twice
    will not produce the same image as the original one without using
    SetInverse(true) on one (and only one) of the two filters.
    https://hdl.handle.net/1926/321

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   ForwardFFTImageFilter, InverseFFTImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIUS2IUS2_Clone)
    SetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIUS2IUS2_SetInverse)
    GetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIUS2IUS2_GetInverse)
    InverseOn = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIUS2IUS2_InverseOn)
    InverseOff = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIUS2IUS2_InverseOff)
    __swig_destroy__ = _itkFFTShiftImageFilterPython.delete_itkFFTShiftImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkFFTShiftImageFilterIUS2IUS2

        Create a new object of the class itkFFTShiftImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTShiftImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTShiftImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTShiftImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTShiftImageFilterIUS2IUS2 in _itkFFTShiftImageFilterPython:
_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIUS2IUS2_swigregister(itkFFTShiftImageFilterIUS2IUS2)
itkFFTShiftImageFilterIUS2IUS2___New_orig__ = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIUS2IUS2___New_orig__
itkFFTShiftImageFilterIUS2IUS2_cast = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIUS2IUS2_cast


def itkFFTShiftImageFilterIUS3IUS3_New():
    return itkFFTShiftImageFilterIUS3IUS3.New()

class itkFFTShiftImageFilterIUS3IUS3(itk.itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIUS3IUS3):
    r"""


    Shift the zero-frequency components of a Fourier transform to the
    center of the image.

    The Fourier transform produces an image where the zero frequency
    components are in the corner of the image, making it difficult to
    understand. This filter shifts the component to the center of the
    image.

    For images with an odd-sized dimension, applying this filter twice
    will not produce the same image as the original one without using
    SetInverse(true) on one (and only one) of the two filters.
    https://hdl.handle.net/1926/321

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   ForwardFFTImageFilter, InverseFFTImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIUS3IUS3_Clone)
    SetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIUS3IUS3_SetInverse)
    GetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIUS3IUS3_GetInverse)
    InverseOn = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIUS3IUS3_InverseOn)
    InverseOff = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIUS3IUS3_InverseOff)
    __swig_destroy__ = _itkFFTShiftImageFilterPython.delete_itkFFTShiftImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkFFTShiftImageFilterIUS3IUS3

        Create a new object of the class itkFFTShiftImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTShiftImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTShiftImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTShiftImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTShiftImageFilterIUS3IUS3 in _itkFFTShiftImageFilterPython:
_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIUS3IUS3_swigregister(itkFFTShiftImageFilterIUS3IUS3)
itkFFTShiftImageFilterIUS3IUS3___New_orig__ = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIUS3IUS3___New_orig__
itkFFTShiftImageFilterIUS3IUS3_cast = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIUS3IUS3_cast


def itkFFTShiftImageFilterIVF22IVF22_New():
    return itkFFTShiftImageFilterIVF22IVF22.New()

class itkFFTShiftImageFilterIVF22IVF22(itk.itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF22IVF22):
    r"""


    Shift the zero-frequency components of a Fourier transform to the
    center of the image.

    The Fourier transform produces an image where the zero frequency
    components are in the corner of the image, making it difficult to
    understand. This filter shifts the component to the center of the
    image.

    For images with an odd-sized dimension, applying this filter twice
    will not produce the same image as the original one without using
    SetInverse(true) on one (and only one) of the two filters.
    https://hdl.handle.net/1926/321

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   ForwardFFTImageFilter, InverseFFTImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF22IVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF22IVF22_Clone)
    SetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF22IVF22_SetInverse)
    GetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF22IVF22_GetInverse)
    InverseOn = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF22IVF22_InverseOn)
    InverseOff = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF22IVF22_InverseOff)
    __swig_destroy__ = _itkFFTShiftImageFilterPython.delete_itkFFTShiftImageFilterIVF22IVF22
    cast = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF22IVF22_cast)

    def New(*args, **kargs):
        """New() -> itkFFTShiftImageFilterIVF22IVF22

        Create a new object of the class itkFFTShiftImageFilterIVF22IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTShiftImageFilterIVF22IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTShiftImageFilterIVF22IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTShiftImageFilterIVF22IVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTShiftImageFilterIVF22IVF22 in _itkFFTShiftImageFilterPython:
_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF22IVF22_swigregister(itkFFTShiftImageFilterIVF22IVF22)
itkFFTShiftImageFilterIVF22IVF22___New_orig__ = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF22IVF22___New_orig__
itkFFTShiftImageFilterIVF22IVF22_cast = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF22IVF22_cast


def itkFFTShiftImageFilterIVF23IVF23_New():
    return itkFFTShiftImageFilterIVF23IVF23.New()

class itkFFTShiftImageFilterIVF23IVF23(itk.itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF23IVF23):
    r"""


    Shift the zero-frequency components of a Fourier transform to the
    center of the image.

    The Fourier transform produces an image where the zero frequency
    components are in the corner of the image, making it difficult to
    understand. This filter shifts the component to the center of the
    image.

    For images with an odd-sized dimension, applying this filter twice
    will not produce the same image as the original one without using
    SetInverse(true) on one (and only one) of the two filters.
    https://hdl.handle.net/1926/321

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   ForwardFFTImageFilter, InverseFFTImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF23IVF23___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF23IVF23_Clone)
    SetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF23IVF23_SetInverse)
    GetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF23IVF23_GetInverse)
    InverseOn = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF23IVF23_InverseOn)
    InverseOff = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF23IVF23_InverseOff)
    __swig_destroy__ = _itkFFTShiftImageFilterPython.delete_itkFFTShiftImageFilterIVF23IVF23
    cast = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF23IVF23_cast)

    def New(*args, **kargs):
        """New() -> itkFFTShiftImageFilterIVF23IVF23

        Create a new object of the class itkFFTShiftImageFilterIVF23IVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTShiftImageFilterIVF23IVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTShiftImageFilterIVF23IVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTShiftImageFilterIVF23IVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTShiftImageFilterIVF23IVF23 in _itkFFTShiftImageFilterPython:
_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF23IVF23_swigregister(itkFFTShiftImageFilterIVF23IVF23)
itkFFTShiftImageFilterIVF23IVF23___New_orig__ = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF23IVF23___New_orig__
itkFFTShiftImageFilterIVF23IVF23_cast = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF23IVF23_cast


def itkFFTShiftImageFilterIVF32IVF32_New():
    return itkFFTShiftImageFilterIVF32IVF32.New()

class itkFFTShiftImageFilterIVF32IVF32(itk.itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF32IVF32):
    r"""


    Shift the zero-frequency components of a Fourier transform to the
    center of the image.

    The Fourier transform produces an image where the zero frequency
    components are in the corner of the image, making it difficult to
    understand. This filter shifts the component to the center of the
    image.

    For images with an odd-sized dimension, applying this filter twice
    will not produce the same image as the original one without using
    SetInverse(true) on one (and only one) of the two filters.
    https://hdl.handle.net/1926/321

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   ForwardFFTImageFilter, InverseFFTImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF32IVF32___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF32IVF32_Clone)
    SetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF32IVF32_SetInverse)
    GetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF32IVF32_GetInverse)
    InverseOn = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF32IVF32_InverseOn)
    InverseOff = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF32IVF32_InverseOff)
    __swig_destroy__ = _itkFFTShiftImageFilterPython.delete_itkFFTShiftImageFilterIVF32IVF32
    cast = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF32IVF32_cast)

    def New(*args, **kargs):
        """New() -> itkFFTShiftImageFilterIVF32IVF32

        Create a new object of the class itkFFTShiftImageFilterIVF32IVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTShiftImageFilterIVF32IVF32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTShiftImageFilterIVF32IVF32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTShiftImageFilterIVF32IVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTShiftImageFilterIVF32IVF32 in _itkFFTShiftImageFilterPython:
_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF32IVF32_swigregister(itkFFTShiftImageFilterIVF32IVF32)
itkFFTShiftImageFilterIVF32IVF32___New_orig__ = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF32IVF32___New_orig__
itkFFTShiftImageFilterIVF32IVF32_cast = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF32IVF32_cast


def itkFFTShiftImageFilterIVF33IVF33_New():
    return itkFFTShiftImageFilterIVF33IVF33.New()

class itkFFTShiftImageFilterIVF33IVF33(itk.itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF33IVF33):
    r"""


    Shift the zero-frequency components of a Fourier transform to the
    center of the image.

    The Fourier transform produces an image where the zero frequency
    components are in the corner of the image, making it difficult to
    understand. This filter shifts the component to the center of the
    image.

    For images with an odd-sized dimension, applying this filter twice
    will not produce the same image as the original one without using
    SetInverse(true) on one (and only one) of the two filters.
    https://hdl.handle.net/1926/321

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   ForwardFFTImageFilter, InverseFFTImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF33IVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF33IVF33_Clone)
    SetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF33IVF33_SetInverse)
    GetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF33IVF33_GetInverse)
    InverseOn = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF33IVF33_InverseOn)
    InverseOff = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF33IVF33_InverseOff)
    __swig_destroy__ = _itkFFTShiftImageFilterPython.delete_itkFFTShiftImageFilterIVF33IVF33
    cast = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF33IVF33_cast)

    def New(*args, **kargs):
        """New() -> itkFFTShiftImageFilterIVF33IVF33

        Create a new object of the class itkFFTShiftImageFilterIVF33IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTShiftImageFilterIVF33IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTShiftImageFilterIVF33IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTShiftImageFilterIVF33IVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTShiftImageFilterIVF33IVF33 in _itkFFTShiftImageFilterPython:
_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF33IVF33_swigregister(itkFFTShiftImageFilterIVF33IVF33)
itkFFTShiftImageFilterIVF33IVF33___New_orig__ = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF33IVF33___New_orig__
itkFFTShiftImageFilterIVF33IVF33_cast = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF33IVF33_cast


def itkFFTShiftImageFilterIVF42IVF42_New():
    return itkFFTShiftImageFilterIVF42IVF42.New()

class itkFFTShiftImageFilterIVF42IVF42(itk.itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF42IVF42):
    r"""


    Shift the zero-frequency components of a Fourier transform to the
    center of the image.

    The Fourier transform produces an image where the zero frequency
    components are in the corner of the image, making it difficult to
    understand. This filter shifts the component to the center of the
    image.

    For images with an odd-sized dimension, applying this filter twice
    will not produce the same image as the original one without using
    SetInverse(true) on one (and only one) of the two filters.
    https://hdl.handle.net/1926/321

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   ForwardFFTImageFilter, InverseFFTImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF42IVF42___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF42IVF42_Clone)
    SetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF42IVF42_SetInverse)
    GetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF42IVF42_GetInverse)
    InverseOn = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF42IVF42_InverseOn)
    InverseOff = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF42IVF42_InverseOff)
    __swig_destroy__ = _itkFFTShiftImageFilterPython.delete_itkFFTShiftImageFilterIVF42IVF42
    cast = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF42IVF42_cast)

    def New(*args, **kargs):
        """New() -> itkFFTShiftImageFilterIVF42IVF42

        Create a new object of the class itkFFTShiftImageFilterIVF42IVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTShiftImageFilterIVF42IVF42.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTShiftImageFilterIVF42IVF42.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTShiftImageFilterIVF42IVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTShiftImageFilterIVF42IVF42 in _itkFFTShiftImageFilterPython:
_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF42IVF42_swigregister(itkFFTShiftImageFilterIVF42IVF42)
itkFFTShiftImageFilterIVF42IVF42___New_orig__ = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF42IVF42___New_orig__
itkFFTShiftImageFilterIVF42IVF42_cast = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF42IVF42_cast


def itkFFTShiftImageFilterIVF43IVF43_New():
    return itkFFTShiftImageFilterIVF43IVF43.New()

class itkFFTShiftImageFilterIVF43IVF43(itk.itkCyclicShiftImageFilterPython.itkCyclicShiftImageFilterIVF43IVF43):
    r"""


    Shift the zero-frequency components of a Fourier transform to the
    center of the image.

    The Fourier transform produces an image where the zero frequency
    components are in the corner of the image, making it difficult to
    understand. This filter shifts the component to the center of the
    image.

    For images with an odd-sized dimension, applying this filter twice
    will not produce the same image as the original one without using
    SetInverse(true) on one (and only one) of the two filters.
    https://hdl.handle.net/1926/321

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   ForwardFFTImageFilter, InverseFFTImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF43IVF43___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF43IVF43_Clone)
    SetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF43IVF43_SetInverse)
    GetInverse = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF43IVF43_GetInverse)
    InverseOn = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF43IVF43_InverseOn)
    InverseOff = _swig_new_instance_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF43IVF43_InverseOff)
    __swig_destroy__ = _itkFFTShiftImageFilterPython.delete_itkFFTShiftImageFilterIVF43IVF43
    cast = _swig_new_static_method(_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF43IVF43_cast)

    def New(*args, **kargs):
        """New() -> itkFFTShiftImageFilterIVF43IVF43

        Create a new object of the class itkFFTShiftImageFilterIVF43IVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTShiftImageFilterIVF43IVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTShiftImageFilterIVF43IVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTShiftImageFilterIVF43IVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTShiftImageFilterIVF43IVF43 in _itkFFTShiftImageFilterPython:
_itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF43IVF43_swigregister(itkFFTShiftImageFilterIVF43IVF43)
itkFFTShiftImageFilterIVF43IVF43___New_orig__ = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF43IVF43___New_orig__
itkFFTShiftImageFilterIVF43IVF43_cast = _itkFFTShiftImageFilterPython.itkFFTShiftImageFilterIVF43IVF43_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def fft_shift_image_filter(*args, **kwargs):
    """Procedural interface for FFTShiftImageFilter"""
    import itk
    instance = itk.FFTShiftImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def fft_shift_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.FFTShiftImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.FFTShiftImageFilter.values()[0]
    else:
        filter_object = itk.FFTShiftImageFilter

    fft_shift_image_filter.__doc__ = filter_object.__doc__
    fft_shift_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    fft_shift_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.FFTShiftImageFilter, itkTemplate.itkTemplate):
        fft_shift_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        fft_shift_image_filter.__doc__ += "\n"
        fft_shift_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        fft_shift_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



