# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKMeshPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkMeshBasePython
else:
    import _itkMeshBasePython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkMeshBasePython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkMeshBasePython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkArrayPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkMapContainerPython
import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkBoundingBoxPython
import itk.itkVectorContainerPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkContinuousIndexPython
import itk.itkIndexPython
import itk.itkPointSetPython
class itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2(object):
    r"""


    An abstract interface for cells.

    Define an abstract interface for cells. Actual cell types derive from
    this class.

    Parameters:
    -----------

    TPixelType:  The type stored with an entity (cell, point, or
    boundary).

    TCellTraits:  Type information for cell. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Accept = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_Accept)
    GetType = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_GetType)
    MakeCopy = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_MakeCopy)
    GetDimension = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_GetDimension)
    GetInterpolationOrder = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_GetInterpolationOrder)
    GetNumberOfPoints = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_GetNumberOfPoints)
    GetNumberOfBoundaryFeatures = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_GetNumberOfBoundaryFeatures)
    GetBoundaryFeature = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_GetBoundaryFeature)
    GetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_GetPointIds)
    SetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_SetPointIds)
    SetPointId = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_SetPointId)
    PointIdsBegin = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_PointIdsBegin)
    PointIdsEnd = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_PointIdsEnd)
    GetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_GetPointIdsContainer)
    SetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_SetPointIdsContainer)
    GetClosestBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_GetClosestBoundary)
    EvaluatePosition = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_EvaluatePosition)
    EvaluateShapeFunctions = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_EvaluateShapeFunctions)
    IntersectWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_IntersectWithLine)
    GetBoundingBox = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_GetBoundingBox)
    GetBoundingBoxDiagonalLength2 = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_GetBoundingBoxDiagonalLength2)
    IntersectBoundingBoxWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_IntersectBoundingBoxWithLine)
    IsExplicitBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_IsExplicitBoundary)
    AddUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AddUsingCell)
    RemoveUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_RemoveUsingCell)
    IsUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_IsUsingCell)
    GetNumberOfUsingCells = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_GetNumberOfUsingCells)
    GetNameOfClass = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_GetNameOfClass)
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2

# Register itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2 in _itkMeshBasePython:
_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_swigregister(itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2)

class itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer(object):
    r"""Proxy of C++ itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer self) -> itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer
        __init__(itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer self, itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer p) -> itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer
        __init__(itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer self, itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2 p, bool takeOwnership) -> itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer
        """
        _itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_swiginit(self, _itkMeshBasePython.new_itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer(*args))
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer
    __deref__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer___deref__)
    Reset = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_Reset)
    TakeOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_TakeOwnership)
    TakeNoOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_TakeNoOwnership)
    IsOwner = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_IsOwner)
    ReleaseOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_ReleaseOwnership)
    GetPointer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetPointer)
    __eq__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer___eq__)
    __ne__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer___ne__)
    __lt__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer___lt__)
    __gt__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer___gt__)
    __le__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer___le__)
    __ge__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer___ge__)
    Accept = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_Accept)
    GetType = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetType)
    MakeCopy = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_MakeCopy)
    GetDimension = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetDimension)
    GetInterpolationOrder = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetInterpolationOrder)
    GetNumberOfPoints = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetNumberOfPoints)
    GetNumberOfBoundaryFeatures = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetNumberOfBoundaryFeatures)
    GetBoundaryFeature = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetBoundaryFeature)
    GetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetPointIds)
    SetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_SetPointIds)
    SetPointId = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_SetPointId)
    PointIdsBegin = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_PointIdsBegin)
    PointIdsEnd = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_PointIdsEnd)
    GetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetPointIdsContainer)
    SetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_SetPointIdsContainer)
    GetClosestBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetClosestBoundary)
    EvaluatePosition = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_EvaluatePosition)
    EvaluateShapeFunctions = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_EvaluateShapeFunctions)
    IntersectWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_IntersectWithLine)
    GetBoundingBox = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetBoundingBox)
    GetBoundingBoxDiagonalLength2 = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetBoundingBoxDiagonalLength2)
    IntersectBoundingBoxWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_IntersectBoundingBoxWithLine)
    IsExplicitBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_IsExplicitBoundary)
    AddUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_AddUsingCell)
    RemoveUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_RemoveUsingCell)
    IsUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_IsUsingCell)
    GetNumberOfUsingCells = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetNumberOfUsingCells)
    GetNameOfClass = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetNameOfClass)

# Register itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer in _itkMeshBasePython:
_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_swigregister(itkCellInterfaceDCTI2FFULLULLULLPF2MCULLPF2_AutoPointer)

class itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2(object):
    r"""


    An abstract interface for cells.

    Define an abstract interface for cells. Actual cell types derive from
    this class.

    Parameters:
    -----------

    TPixelType:  The type stored with an entity (cell, point, or
    boundary).

    TCellTraits:  Type information for cell. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Accept = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_Accept)
    GetType = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_GetType)
    MakeCopy = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_MakeCopy)
    GetDimension = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_GetDimension)
    GetInterpolationOrder = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_GetInterpolationOrder)
    GetNumberOfPoints = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_GetNumberOfPoints)
    GetNumberOfBoundaryFeatures = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_GetNumberOfBoundaryFeatures)
    GetBoundaryFeature = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_GetBoundaryFeature)
    GetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_GetPointIds)
    SetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_SetPointIds)
    SetPointId = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_SetPointId)
    PointIdsBegin = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_PointIdsBegin)
    PointIdsEnd = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_PointIdsEnd)
    GetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_GetPointIdsContainer)
    SetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_SetPointIdsContainer)
    GetClosestBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_GetClosestBoundary)
    EvaluatePosition = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_EvaluatePosition)
    EvaluateShapeFunctions = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_EvaluateShapeFunctions)
    IntersectWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_IntersectWithLine)
    GetBoundingBox = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_GetBoundingBox)
    GetBoundingBoxDiagonalLength2 = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_GetBoundingBoxDiagonalLength2)
    IntersectBoundingBoxWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_IntersectBoundingBoxWithLine)
    IsExplicitBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_IsExplicitBoundary)
    AddUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AddUsingCell)
    RemoveUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_RemoveUsingCell)
    IsUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_IsUsingCell)
    GetNumberOfUsingCells = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_GetNumberOfUsingCells)
    GetNameOfClass = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_GetNameOfClass)
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2

# Register itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2 in _itkMeshBasePython:
_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_swigregister(itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2)

class itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer(object):
    r"""Proxy of C++ itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer self) -> itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer
        __init__(itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer self, itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer p) -> itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer
        __init__(itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer self, itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2 p, bool takeOwnership) -> itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer
        """
        _itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_swiginit(self, _itkMeshBasePython.new_itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer(*args))
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer
    __deref__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer___deref__)
    Reset = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_Reset)
    TakeOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_TakeOwnership)
    TakeNoOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_TakeNoOwnership)
    IsOwner = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_IsOwner)
    ReleaseOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_ReleaseOwnership)
    GetPointer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetPointer)
    __eq__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer___eq__)
    __ne__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer___ne__)
    __lt__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer___lt__)
    __gt__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer___gt__)
    __le__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer___le__)
    __ge__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer___ge__)
    Accept = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_Accept)
    GetType = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetType)
    MakeCopy = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_MakeCopy)
    GetDimension = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetDimension)
    GetInterpolationOrder = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetInterpolationOrder)
    GetNumberOfPoints = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetNumberOfPoints)
    GetNumberOfBoundaryFeatures = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetNumberOfBoundaryFeatures)
    GetBoundaryFeature = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetBoundaryFeature)
    GetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetPointIds)
    SetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_SetPointIds)
    SetPointId = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_SetPointId)
    PointIdsBegin = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_PointIdsBegin)
    PointIdsEnd = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_PointIdsEnd)
    GetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetPointIdsContainer)
    SetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_SetPointIdsContainer)
    GetClosestBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetClosestBoundary)
    EvaluatePosition = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_EvaluatePosition)
    EvaluateShapeFunctions = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_EvaluateShapeFunctions)
    IntersectWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_IntersectWithLine)
    GetBoundingBox = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetBoundingBox)
    GetBoundingBoxDiagonalLength2 = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetBoundingBoxDiagonalLength2)
    IntersectBoundingBoxWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_IntersectBoundingBoxWithLine)
    IsExplicitBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_IsExplicitBoundary)
    AddUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_AddUsingCell)
    RemoveUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_RemoveUsingCell)
    IsUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_IsUsingCell)
    GetNumberOfUsingCells = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetNumberOfUsingCells)
    GetNameOfClass = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetNameOfClass)

# Register itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer in _itkMeshBasePython:
_itkMeshBasePython.itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_swigregister(itkCellInterfaceDCTI2FFULLULLULLPF2VCULLPF2_AutoPointer)

class itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3(object):
    r"""


    An abstract interface for cells.

    Define an abstract interface for cells. Actual cell types derive from
    this class.

    Parameters:
    -----------

    TPixelType:  The type stored with an entity (cell, point, or
    boundary).

    TCellTraits:  Type information for cell. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Accept = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_Accept)
    GetType = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_GetType)
    MakeCopy = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_MakeCopy)
    GetDimension = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_GetDimension)
    GetInterpolationOrder = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_GetInterpolationOrder)
    GetNumberOfPoints = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_GetNumberOfPoints)
    GetNumberOfBoundaryFeatures = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_GetNumberOfBoundaryFeatures)
    GetBoundaryFeature = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_GetBoundaryFeature)
    GetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_GetPointIds)
    SetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_SetPointIds)
    SetPointId = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_SetPointId)
    PointIdsBegin = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_PointIdsBegin)
    PointIdsEnd = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_PointIdsEnd)
    GetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_GetPointIdsContainer)
    SetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_SetPointIdsContainer)
    GetClosestBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_GetClosestBoundary)
    EvaluatePosition = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_EvaluatePosition)
    EvaluateShapeFunctions = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_EvaluateShapeFunctions)
    IntersectWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_IntersectWithLine)
    GetBoundingBox = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_GetBoundingBox)
    GetBoundingBoxDiagonalLength2 = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_GetBoundingBoxDiagonalLength2)
    IntersectBoundingBoxWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_IntersectBoundingBoxWithLine)
    IsExplicitBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_IsExplicitBoundary)
    AddUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AddUsingCell)
    RemoveUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_RemoveUsingCell)
    IsUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_IsUsingCell)
    GetNumberOfUsingCells = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_GetNumberOfUsingCells)
    GetNameOfClass = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_GetNameOfClass)
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3

# Register itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3 in _itkMeshBasePython:
_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_swigregister(itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3)

class itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer(object):
    r"""Proxy of C++ itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer self) -> itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer
        __init__(itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer self, itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer p) -> itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer
        __init__(itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer self, itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3 p, bool takeOwnership) -> itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer
        """
        _itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_swiginit(self, _itkMeshBasePython.new_itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer(*args))
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer
    __deref__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer___deref__)
    Reset = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_Reset)
    TakeOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_TakeOwnership)
    TakeNoOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_TakeNoOwnership)
    IsOwner = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_IsOwner)
    ReleaseOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_ReleaseOwnership)
    GetPointer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetPointer)
    __eq__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer___eq__)
    __ne__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer___ne__)
    __lt__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer___lt__)
    __gt__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer___gt__)
    __le__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer___le__)
    __ge__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer___ge__)
    Accept = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_Accept)
    GetType = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetType)
    MakeCopy = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_MakeCopy)
    GetDimension = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetDimension)
    GetInterpolationOrder = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetInterpolationOrder)
    GetNumberOfPoints = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetNumberOfPoints)
    GetNumberOfBoundaryFeatures = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetNumberOfBoundaryFeatures)
    GetBoundaryFeature = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetBoundaryFeature)
    GetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetPointIds)
    SetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_SetPointIds)
    SetPointId = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_SetPointId)
    PointIdsBegin = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_PointIdsBegin)
    PointIdsEnd = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_PointIdsEnd)
    GetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetPointIdsContainer)
    SetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_SetPointIdsContainer)
    GetClosestBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetClosestBoundary)
    EvaluatePosition = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_EvaluatePosition)
    EvaluateShapeFunctions = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_EvaluateShapeFunctions)
    IntersectWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_IntersectWithLine)
    GetBoundingBox = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetBoundingBox)
    GetBoundingBoxDiagonalLength2 = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetBoundingBoxDiagonalLength2)
    IntersectBoundingBoxWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_IntersectBoundingBoxWithLine)
    IsExplicitBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_IsExplicitBoundary)
    AddUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_AddUsingCell)
    RemoveUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_RemoveUsingCell)
    IsUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_IsUsingCell)
    GetNumberOfUsingCells = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetNumberOfUsingCells)
    GetNameOfClass = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetNameOfClass)

# Register itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer in _itkMeshBasePython:
_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_swigregister(itkCellInterfaceDCTI3FFULLULLULLPF3MCULLPF3_AutoPointer)

class itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3(object):
    r"""


    An abstract interface for cells.

    Define an abstract interface for cells. Actual cell types derive from
    this class.

    Parameters:
    -----------

    TPixelType:  The type stored with an entity (cell, point, or
    boundary).

    TCellTraits:  Type information for cell. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Accept = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_Accept)
    GetType = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_GetType)
    MakeCopy = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_MakeCopy)
    GetDimension = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_GetDimension)
    GetInterpolationOrder = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_GetInterpolationOrder)
    GetNumberOfPoints = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_GetNumberOfPoints)
    GetNumberOfBoundaryFeatures = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_GetNumberOfBoundaryFeatures)
    GetBoundaryFeature = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_GetBoundaryFeature)
    GetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_GetPointIds)
    SetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_SetPointIds)
    SetPointId = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_SetPointId)
    PointIdsBegin = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_PointIdsBegin)
    PointIdsEnd = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_PointIdsEnd)
    GetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_GetPointIdsContainer)
    SetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_SetPointIdsContainer)
    GetClosestBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_GetClosestBoundary)
    EvaluatePosition = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_EvaluatePosition)
    EvaluateShapeFunctions = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_EvaluateShapeFunctions)
    IntersectWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_IntersectWithLine)
    GetBoundingBox = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_GetBoundingBox)
    GetBoundingBoxDiagonalLength2 = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_GetBoundingBoxDiagonalLength2)
    IntersectBoundingBoxWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_IntersectBoundingBoxWithLine)
    IsExplicitBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_IsExplicitBoundary)
    AddUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AddUsingCell)
    RemoveUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_RemoveUsingCell)
    IsUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_IsUsingCell)
    GetNumberOfUsingCells = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_GetNumberOfUsingCells)
    GetNameOfClass = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_GetNameOfClass)
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3

# Register itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3 in _itkMeshBasePython:
_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_swigregister(itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3)

class itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer(object):
    r"""Proxy of C++ itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer self) -> itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer
        __init__(itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer self, itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer p) -> itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer
        __init__(itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer self, itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3 p, bool takeOwnership) -> itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer
        """
        _itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_swiginit(self, _itkMeshBasePython.new_itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer(*args))
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer
    __deref__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer___deref__)
    Reset = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_Reset)
    TakeOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_TakeOwnership)
    TakeNoOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_TakeNoOwnership)
    IsOwner = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_IsOwner)
    ReleaseOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_ReleaseOwnership)
    GetPointer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetPointer)
    __eq__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer___eq__)
    __ne__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer___ne__)
    __lt__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer___lt__)
    __gt__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer___gt__)
    __le__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer___le__)
    __ge__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer___ge__)
    Accept = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_Accept)
    GetType = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetType)
    MakeCopy = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_MakeCopy)
    GetDimension = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetDimension)
    GetInterpolationOrder = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetInterpolationOrder)
    GetNumberOfPoints = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetNumberOfPoints)
    GetNumberOfBoundaryFeatures = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetNumberOfBoundaryFeatures)
    GetBoundaryFeature = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetBoundaryFeature)
    GetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetPointIds)
    SetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_SetPointIds)
    SetPointId = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_SetPointId)
    PointIdsBegin = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_PointIdsBegin)
    PointIdsEnd = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_PointIdsEnd)
    GetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetPointIdsContainer)
    SetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_SetPointIdsContainer)
    GetClosestBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetClosestBoundary)
    EvaluatePosition = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_EvaluatePosition)
    EvaluateShapeFunctions = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_EvaluateShapeFunctions)
    IntersectWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_IntersectWithLine)
    GetBoundingBox = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetBoundingBox)
    GetBoundingBoxDiagonalLength2 = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetBoundingBoxDiagonalLength2)
    IntersectBoundingBoxWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_IntersectBoundingBoxWithLine)
    IsExplicitBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_IsExplicitBoundary)
    AddUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_AddUsingCell)
    RemoveUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_RemoveUsingCell)
    IsUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_IsUsingCell)
    GetNumberOfUsingCells = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetNumberOfUsingCells)
    GetNameOfClass = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetNameOfClass)

# Register itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer in _itkMeshBasePython:
_itkMeshBasePython.itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_swigregister(itkCellInterfaceDCTI3FFULLULLULLPF3VCULLPF3_AutoPointer)

class itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2(object):
    r"""


    An abstract interface for cells.

    Define an abstract interface for cells. Actual cell types derive from
    this class.

    Parameters:
    -----------

    TPixelType:  The type stored with an entity (cell, point, or
    boundary).

    TCellTraits:  Type information for cell. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Accept = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_Accept)
    GetType = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_GetType)
    MakeCopy = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_MakeCopy)
    GetDimension = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_GetDimension)
    GetInterpolationOrder = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_GetInterpolationOrder)
    GetNumberOfPoints = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_GetNumberOfPoints)
    GetNumberOfBoundaryFeatures = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_GetNumberOfBoundaryFeatures)
    GetBoundaryFeature = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_GetBoundaryFeature)
    GetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_GetPointIds)
    SetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_SetPointIds)
    SetPointId = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_SetPointId)
    PointIdsBegin = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_PointIdsBegin)
    PointIdsEnd = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_PointIdsEnd)
    GetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_GetPointIdsContainer)
    SetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_SetPointIdsContainer)
    GetClosestBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_GetClosestBoundary)
    EvaluatePosition = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_EvaluatePosition)
    EvaluateShapeFunctions = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_EvaluateShapeFunctions)
    IntersectWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_IntersectWithLine)
    GetBoundingBox = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_GetBoundingBox)
    GetBoundingBoxDiagonalLength2 = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_GetBoundingBoxDiagonalLength2)
    IntersectBoundingBoxWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_IntersectBoundingBoxWithLine)
    IsExplicitBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_IsExplicitBoundary)
    AddUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AddUsingCell)
    RemoveUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_RemoveUsingCell)
    IsUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_IsUsingCell)
    GetNumberOfUsingCells = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_GetNumberOfUsingCells)
    GetNameOfClass = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_GetNameOfClass)
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2

# Register itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2 in _itkMeshBasePython:
_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_swigregister(itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2)

class itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer(object):
    r"""Proxy of C++ itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer self) -> itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer
        __init__(itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer self, itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer p) -> itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer
        __init__(itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer self, itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2 p, bool takeOwnership) -> itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer
        """
        _itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_swiginit(self, _itkMeshBasePython.new_itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer(*args))
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer
    __deref__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer___deref__)
    Reset = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_Reset)
    TakeOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_TakeOwnership)
    TakeNoOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_TakeNoOwnership)
    IsOwner = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_IsOwner)
    ReleaseOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_ReleaseOwnership)
    GetPointer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetPointer)
    __eq__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer___eq__)
    __ne__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer___ne__)
    __lt__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer___lt__)
    __gt__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer___gt__)
    __le__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer___le__)
    __ge__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer___ge__)
    Accept = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_Accept)
    GetType = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetType)
    MakeCopy = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_MakeCopy)
    GetDimension = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetDimension)
    GetInterpolationOrder = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetInterpolationOrder)
    GetNumberOfPoints = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetNumberOfPoints)
    GetNumberOfBoundaryFeatures = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetNumberOfBoundaryFeatures)
    GetBoundaryFeature = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetBoundaryFeature)
    GetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetPointIds)
    SetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_SetPointIds)
    SetPointId = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_SetPointId)
    PointIdsBegin = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_PointIdsBegin)
    PointIdsEnd = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_PointIdsEnd)
    GetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetPointIdsContainer)
    SetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_SetPointIdsContainer)
    GetClosestBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetClosestBoundary)
    EvaluatePosition = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_EvaluatePosition)
    EvaluateShapeFunctions = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_EvaluateShapeFunctions)
    IntersectWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_IntersectWithLine)
    GetBoundingBox = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetBoundingBox)
    GetBoundingBoxDiagonalLength2 = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetBoundingBoxDiagonalLength2)
    IntersectBoundingBoxWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_IntersectBoundingBoxWithLine)
    IsExplicitBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_IsExplicitBoundary)
    AddUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_AddUsingCell)
    RemoveUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_RemoveUsingCell)
    IsUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_IsUsingCell)
    GetNumberOfUsingCells = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetNumberOfUsingCells)
    GetNameOfClass = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetNameOfClass)

# Register itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer in _itkMeshBasePython:
_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_swigregister(itkCellInterfaceFCTI2FFULLULLULLPF2MCULLPF2_AutoPointer)

class itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2(object):
    r"""


    An abstract interface for cells.

    Define an abstract interface for cells. Actual cell types derive from
    this class.

    Parameters:
    -----------

    TPixelType:  The type stored with an entity (cell, point, or
    boundary).

    TCellTraits:  Type information for cell. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Accept = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_Accept)
    GetType = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_GetType)
    MakeCopy = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_MakeCopy)
    GetDimension = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_GetDimension)
    GetInterpolationOrder = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_GetInterpolationOrder)
    GetNumberOfPoints = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_GetNumberOfPoints)
    GetNumberOfBoundaryFeatures = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_GetNumberOfBoundaryFeatures)
    GetBoundaryFeature = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_GetBoundaryFeature)
    GetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_GetPointIds)
    SetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_SetPointIds)
    SetPointId = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_SetPointId)
    PointIdsBegin = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_PointIdsBegin)
    PointIdsEnd = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_PointIdsEnd)
    GetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_GetPointIdsContainer)
    SetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_SetPointIdsContainer)
    GetClosestBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_GetClosestBoundary)
    EvaluatePosition = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_EvaluatePosition)
    EvaluateShapeFunctions = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_EvaluateShapeFunctions)
    IntersectWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_IntersectWithLine)
    GetBoundingBox = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_GetBoundingBox)
    GetBoundingBoxDiagonalLength2 = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_GetBoundingBoxDiagonalLength2)
    IntersectBoundingBoxWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_IntersectBoundingBoxWithLine)
    IsExplicitBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_IsExplicitBoundary)
    AddUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AddUsingCell)
    RemoveUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_RemoveUsingCell)
    IsUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_IsUsingCell)
    GetNumberOfUsingCells = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_GetNumberOfUsingCells)
    GetNameOfClass = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_GetNameOfClass)
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2

# Register itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2 in _itkMeshBasePython:
_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_swigregister(itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2)

class itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer(object):
    r"""Proxy of C++ itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer self) -> itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer
        __init__(itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer self, itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer p) -> itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer
        __init__(itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer self, itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2 p, bool takeOwnership) -> itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer
        """
        _itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_swiginit(self, _itkMeshBasePython.new_itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer(*args))
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer
    __deref__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer___deref__)
    Reset = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_Reset)
    TakeOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_TakeOwnership)
    TakeNoOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_TakeNoOwnership)
    IsOwner = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_IsOwner)
    ReleaseOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_ReleaseOwnership)
    GetPointer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetPointer)
    __eq__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer___eq__)
    __ne__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer___ne__)
    __lt__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer___lt__)
    __gt__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer___gt__)
    __le__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer___le__)
    __ge__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer___ge__)
    Accept = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_Accept)
    GetType = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetType)
    MakeCopy = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_MakeCopy)
    GetDimension = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetDimension)
    GetInterpolationOrder = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetInterpolationOrder)
    GetNumberOfPoints = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetNumberOfPoints)
    GetNumberOfBoundaryFeatures = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetNumberOfBoundaryFeatures)
    GetBoundaryFeature = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetBoundaryFeature)
    GetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetPointIds)
    SetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_SetPointIds)
    SetPointId = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_SetPointId)
    PointIdsBegin = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_PointIdsBegin)
    PointIdsEnd = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_PointIdsEnd)
    GetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetPointIdsContainer)
    SetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_SetPointIdsContainer)
    GetClosestBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetClosestBoundary)
    EvaluatePosition = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_EvaluatePosition)
    EvaluateShapeFunctions = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_EvaluateShapeFunctions)
    IntersectWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_IntersectWithLine)
    GetBoundingBox = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetBoundingBox)
    GetBoundingBoxDiagonalLength2 = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetBoundingBoxDiagonalLength2)
    IntersectBoundingBoxWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_IntersectBoundingBoxWithLine)
    IsExplicitBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_IsExplicitBoundary)
    AddUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_AddUsingCell)
    RemoveUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_RemoveUsingCell)
    IsUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_IsUsingCell)
    GetNumberOfUsingCells = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetNumberOfUsingCells)
    GetNameOfClass = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetNameOfClass)

# Register itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer in _itkMeshBasePython:
_itkMeshBasePython.itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_swigregister(itkCellInterfaceFCTI2FFULLULLULLPF2VCULLPF2_AutoPointer)

class itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3(object):
    r"""


    An abstract interface for cells.

    Define an abstract interface for cells. Actual cell types derive from
    this class.

    Parameters:
    -----------

    TPixelType:  The type stored with an entity (cell, point, or
    boundary).

    TCellTraits:  Type information for cell. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Accept = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_Accept)
    GetType = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_GetType)
    MakeCopy = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_MakeCopy)
    GetDimension = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_GetDimension)
    GetInterpolationOrder = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_GetInterpolationOrder)
    GetNumberOfPoints = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_GetNumberOfPoints)
    GetNumberOfBoundaryFeatures = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_GetNumberOfBoundaryFeatures)
    GetBoundaryFeature = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_GetBoundaryFeature)
    GetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_GetPointIds)
    SetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_SetPointIds)
    SetPointId = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_SetPointId)
    PointIdsBegin = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_PointIdsBegin)
    PointIdsEnd = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_PointIdsEnd)
    GetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_GetPointIdsContainer)
    SetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_SetPointIdsContainer)
    GetClosestBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_GetClosestBoundary)
    EvaluatePosition = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_EvaluatePosition)
    EvaluateShapeFunctions = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_EvaluateShapeFunctions)
    IntersectWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_IntersectWithLine)
    GetBoundingBox = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_GetBoundingBox)
    GetBoundingBoxDiagonalLength2 = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_GetBoundingBoxDiagonalLength2)
    IntersectBoundingBoxWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_IntersectBoundingBoxWithLine)
    IsExplicitBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_IsExplicitBoundary)
    AddUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AddUsingCell)
    RemoveUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_RemoveUsingCell)
    IsUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_IsUsingCell)
    GetNumberOfUsingCells = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_GetNumberOfUsingCells)
    GetNameOfClass = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_GetNameOfClass)
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3

# Register itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3 in _itkMeshBasePython:
_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_swigregister(itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3)

class itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer(object):
    r"""Proxy of C++ itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer self) -> itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer
        __init__(itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer self, itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer p) -> itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer
        __init__(itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer self, itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3 p, bool takeOwnership) -> itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer
        """
        _itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_swiginit(self, _itkMeshBasePython.new_itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer(*args))
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer
    __deref__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer___deref__)
    Reset = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_Reset)
    TakeOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_TakeOwnership)
    TakeNoOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_TakeNoOwnership)
    IsOwner = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_IsOwner)
    ReleaseOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_ReleaseOwnership)
    GetPointer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetPointer)
    __eq__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer___eq__)
    __ne__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer___ne__)
    __lt__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer___lt__)
    __gt__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer___gt__)
    __le__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer___le__)
    __ge__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer___ge__)
    Accept = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_Accept)
    GetType = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetType)
    MakeCopy = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_MakeCopy)
    GetDimension = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetDimension)
    GetInterpolationOrder = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetInterpolationOrder)
    GetNumberOfPoints = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetNumberOfPoints)
    GetNumberOfBoundaryFeatures = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetNumberOfBoundaryFeatures)
    GetBoundaryFeature = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetBoundaryFeature)
    GetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetPointIds)
    SetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_SetPointIds)
    SetPointId = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_SetPointId)
    PointIdsBegin = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_PointIdsBegin)
    PointIdsEnd = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_PointIdsEnd)
    GetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetPointIdsContainer)
    SetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_SetPointIdsContainer)
    GetClosestBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetClosestBoundary)
    EvaluatePosition = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_EvaluatePosition)
    EvaluateShapeFunctions = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_EvaluateShapeFunctions)
    IntersectWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_IntersectWithLine)
    GetBoundingBox = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetBoundingBox)
    GetBoundingBoxDiagonalLength2 = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetBoundingBoxDiagonalLength2)
    IntersectBoundingBoxWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_IntersectBoundingBoxWithLine)
    IsExplicitBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_IsExplicitBoundary)
    AddUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_AddUsingCell)
    RemoveUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_RemoveUsingCell)
    IsUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_IsUsingCell)
    GetNumberOfUsingCells = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetNumberOfUsingCells)
    GetNameOfClass = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetNameOfClass)

# Register itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer in _itkMeshBasePython:
_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_swigregister(itkCellInterfaceFCTI3FFULLULLULLPF3MCULLPF3_AutoPointer)

class itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3(object):
    r"""


    An abstract interface for cells.

    Define an abstract interface for cells. Actual cell types derive from
    this class.

    Parameters:
    -----------

    TPixelType:  The type stored with an entity (cell, point, or
    boundary).

    TCellTraits:  Type information for cell. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Accept = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_Accept)
    GetType = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_GetType)
    MakeCopy = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_MakeCopy)
    GetDimension = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_GetDimension)
    GetInterpolationOrder = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_GetInterpolationOrder)
    GetNumberOfPoints = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_GetNumberOfPoints)
    GetNumberOfBoundaryFeatures = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_GetNumberOfBoundaryFeatures)
    GetBoundaryFeature = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_GetBoundaryFeature)
    GetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_GetPointIds)
    SetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_SetPointIds)
    SetPointId = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_SetPointId)
    PointIdsBegin = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_PointIdsBegin)
    PointIdsEnd = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_PointIdsEnd)
    GetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_GetPointIdsContainer)
    SetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_SetPointIdsContainer)
    GetClosestBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_GetClosestBoundary)
    EvaluatePosition = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_EvaluatePosition)
    EvaluateShapeFunctions = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_EvaluateShapeFunctions)
    IntersectWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_IntersectWithLine)
    GetBoundingBox = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_GetBoundingBox)
    GetBoundingBoxDiagonalLength2 = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_GetBoundingBoxDiagonalLength2)
    IntersectBoundingBoxWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_IntersectBoundingBoxWithLine)
    IsExplicitBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_IsExplicitBoundary)
    AddUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AddUsingCell)
    RemoveUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_RemoveUsingCell)
    IsUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_IsUsingCell)
    GetNumberOfUsingCells = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_GetNumberOfUsingCells)
    GetNameOfClass = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_GetNameOfClass)
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3

# Register itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3 in _itkMeshBasePython:
_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_swigregister(itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3)

class itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer(object):
    r"""Proxy of C++ itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer self) -> itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer
        __init__(itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer self, itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer p) -> itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer
        __init__(itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer self, itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3 p, bool takeOwnership) -> itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer
        """
        _itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_swiginit(self, _itkMeshBasePython.new_itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer(*args))
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer
    __deref__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer___deref__)
    Reset = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_Reset)
    TakeOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_TakeOwnership)
    TakeNoOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_TakeNoOwnership)
    IsOwner = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_IsOwner)
    ReleaseOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_ReleaseOwnership)
    GetPointer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetPointer)
    __eq__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer___eq__)
    __ne__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer___ne__)
    __lt__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer___lt__)
    __gt__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer___gt__)
    __le__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer___le__)
    __ge__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer___ge__)
    Accept = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_Accept)
    GetType = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetType)
    MakeCopy = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_MakeCopy)
    GetDimension = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetDimension)
    GetInterpolationOrder = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetInterpolationOrder)
    GetNumberOfPoints = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetNumberOfPoints)
    GetNumberOfBoundaryFeatures = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetNumberOfBoundaryFeatures)
    GetBoundaryFeature = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetBoundaryFeature)
    GetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetPointIds)
    SetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_SetPointIds)
    SetPointId = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_SetPointId)
    PointIdsBegin = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_PointIdsBegin)
    PointIdsEnd = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_PointIdsEnd)
    GetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetPointIdsContainer)
    SetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_SetPointIdsContainer)
    GetClosestBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetClosestBoundary)
    EvaluatePosition = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_EvaluatePosition)
    EvaluateShapeFunctions = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_EvaluateShapeFunctions)
    IntersectWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_IntersectWithLine)
    GetBoundingBox = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetBoundingBox)
    GetBoundingBoxDiagonalLength2 = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetBoundingBoxDiagonalLength2)
    IntersectBoundingBoxWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_IntersectBoundingBoxWithLine)
    IsExplicitBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_IsExplicitBoundary)
    AddUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_AddUsingCell)
    RemoveUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_RemoveUsingCell)
    IsUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_IsUsingCell)
    GetNumberOfUsingCells = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetNumberOfUsingCells)
    GetNameOfClass = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetNameOfClass)

# Register itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer in _itkMeshBasePython:
_itkMeshBasePython.itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_swigregister(itkCellInterfaceFCTI3FFULLULLULLPF3VCULLPF3_AutoPointer)

class itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2(object):
    r"""


    An abstract interface for cells.

    Define an abstract interface for cells. Actual cell types derive from
    this class.

    Parameters:
    -----------

    TPixelType:  The type stored with an entity (cell, point, or
    boundary).

    TCellTraits:  Type information for cell. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Accept = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_Accept)
    GetType = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_GetType)
    MakeCopy = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_MakeCopy)
    GetDimension = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_GetDimension)
    GetInterpolationOrder = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_GetInterpolationOrder)
    GetNumberOfPoints = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_GetNumberOfPoints)
    GetNumberOfBoundaryFeatures = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_GetNumberOfBoundaryFeatures)
    GetBoundaryFeature = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_GetBoundaryFeature)
    GetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_GetPointIds)
    SetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_SetPointIds)
    SetPointId = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_SetPointId)
    PointIdsBegin = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_PointIdsBegin)
    PointIdsEnd = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_PointIdsEnd)
    GetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_GetPointIdsContainer)
    SetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_SetPointIdsContainer)
    GetClosestBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_GetClosestBoundary)
    EvaluatePosition = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_EvaluatePosition)
    EvaluateShapeFunctions = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_EvaluateShapeFunctions)
    IntersectWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_IntersectWithLine)
    GetBoundingBox = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_GetBoundingBox)
    GetBoundingBoxDiagonalLength2 = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_GetBoundingBoxDiagonalLength2)
    IntersectBoundingBoxWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_IntersectBoundingBoxWithLine)
    IsExplicitBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_IsExplicitBoundary)
    AddUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AddUsingCell)
    RemoveUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_RemoveUsingCell)
    IsUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_IsUsingCell)
    GetNumberOfUsingCells = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_GetNumberOfUsingCells)
    GetNameOfClass = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_GetNameOfClass)
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2

# Register itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2 in _itkMeshBasePython:
_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_swigregister(itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2)

class itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer(object):
    r"""Proxy of C++ itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer self) -> itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer
        __init__(itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer self, itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer p) -> itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer
        __init__(itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer self, itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2 p, bool takeOwnership) -> itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer
        """
        _itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_swiginit(self, _itkMeshBasePython.new_itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer(*args))
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer
    __deref__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer___deref__)
    Reset = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_Reset)
    TakeOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_TakeOwnership)
    TakeNoOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_TakeNoOwnership)
    IsOwner = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_IsOwner)
    ReleaseOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_ReleaseOwnership)
    GetPointer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetPointer)
    __eq__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer___eq__)
    __ne__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer___ne__)
    __lt__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer___lt__)
    __gt__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer___gt__)
    __le__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer___le__)
    __ge__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer___ge__)
    Accept = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_Accept)
    GetType = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetType)
    MakeCopy = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_MakeCopy)
    GetDimension = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetDimension)
    GetInterpolationOrder = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetInterpolationOrder)
    GetNumberOfPoints = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetNumberOfPoints)
    GetNumberOfBoundaryFeatures = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetNumberOfBoundaryFeatures)
    GetBoundaryFeature = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetBoundaryFeature)
    GetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetPointIds)
    SetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_SetPointIds)
    SetPointId = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_SetPointId)
    PointIdsBegin = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_PointIdsBegin)
    PointIdsEnd = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_PointIdsEnd)
    GetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetPointIdsContainer)
    SetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_SetPointIdsContainer)
    GetClosestBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetClosestBoundary)
    EvaluatePosition = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_EvaluatePosition)
    EvaluateShapeFunctions = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_EvaluateShapeFunctions)
    IntersectWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_IntersectWithLine)
    GetBoundingBox = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetBoundingBox)
    GetBoundingBoxDiagonalLength2 = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetBoundingBoxDiagonalLength2)
    IntersectBoundingBoxWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_IntersectBoundingBoxWithLine)
    IsExplicitBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_IsExplicitBoundary)
    AddUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_AddUsingCell)
    RemoveUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_RemoveUsingCell)
    IsUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_IsUsingCell)
    GetNumberOfUsingCells = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetNumberOfUsingCells)
    GetNameOfClass = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetNameOfClass)

# Register itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer in _itkMeshBasePython:
_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_swigregister(itkCellInterfaceSSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer)

class itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2(object):
    r"""


    An abstract interface for cells.

    Define an abstract interface for cells. Actual cell types derive from
    this class.

    Parameters:
    -----------

    TPixelType:  The type stored with an entity (cell, point, or
    boundary).

    TCellTraits:  Type information for cell. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Accept = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_Accept)
    GetType = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_GetType)
    MakeCopy = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_MakeCopy)
    GetDimension = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_GetDimension)
    GetInterpolationOrder = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_GetInterpolationOrder)
    GetNumberOfPoints = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_GetNumberOfPoints)
    GetNumberOfBoundaryFeatures = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_GetNumberOfBoundaryFeatures)
    GetBoundaryFeature = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_GetBoundaryFeature)
    GetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_GetPointIds)
    SetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_SetPointIds)
    SetPointId = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_SetPointId)
    PointIdsBegin = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_PointIdsBegin)
    PointIdsEnd = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_PointIdsEnd)
    GetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_GetPointIdsContainer)
    SetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_SetPointIdsContainer)
    GetClosestBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_GetClosestBoundary)
    EvaluatePosition = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_EvaluatePosition)
    EvaluateShapeFunctions = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_EvaluateShapeFunctions)
    IntersectWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_IntersectWithLine)
    GetBoundingBox = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_GetBoundingBox)
    GetBoundingBoxDiagonalLength2 = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_GetBoundingBoxDiagonalLength2)
    IntersectBoundingBoxWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_IntersectBoundingBoxWithLine)
    IsExplicitBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_IsExplicitBoundary)
    AddUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AddUsingCell)
    RemoveUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_RemoveUsingCell)
    IsUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_IsUsingCell)
    GetNumberOfUsingCells = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_GetNumberOfUsingCells)
    GetNameOfClass = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_GetNameOfClass)
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2

# Register itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2 in _itkMeshBasePython:
_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_swigregister(itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2)

class itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer(object):
    r"""Proxy of C++ itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer self) -> itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer
        __init__(itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer self, itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer p) -> itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer
        __init__(itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer self, itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2 p, bool takeOwnership) -> itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer
        """
        _itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_swiginit(self, _itkMeshBasePython.new_itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer(*args))
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer
    __deref__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer___deref__)
    Reset = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_Reset)
    TakeOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_TakeOwnership)
    TakeNoOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_TakeNoOwnership)
    IsOwner = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_IsOwner)
    ReleaseOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_ReleaseOwnership)
    GetPointer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetPointer)
    __eq__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer___eq__)
    __ne__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer___ne__)
    __lt__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer___lt__)
    __gt__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer___gt__)
    __le__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer___le__)
    __ge__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer___ge__)
    Accept = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_Accept)
    GetType = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetType)
    MakeCopy = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_MakeCopy)
    GetDimension = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetDimension)
    GetInterpolationOrder = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetInterpolationOrder)
    GetNumberOfPoints = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetNumberOfPoints)
    GetNumberOfBoundaryFeatures = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetNumberOfBoundaryFeatures)
    GetBoundaryFeature = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetBoundaryFeature)
    GetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetPointIds)
    SetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_SetPointIds)
    SetPointId = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_SetPointId)
    PointIdsBegin = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_PointIdsBegin)
    PointIdsEnd = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_PointIdsEnd)
    GetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetPointIdsContainer)
    SetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_SetPointIdsContainer)
    GetClosestBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetClosestBoundary)
    EvaluatePosition = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_EvaluatePosition)
    EvaluateShapeFunctions = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_EvaluateShapeFunctions)
    IntersectWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_IntersectWithLine)
    GetBoundingBox = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetBoundingBox)
    GetBoundingBoxDiagonalLength2 = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetBoundingBoxDiagonalLength2)
    IntersectBoundingBoxWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_IntersectBoundingBoxWithLine)
    IsExplicitBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_IsExplicitBoundary)
    AddUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_AddUsingCell)
    RemoveUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_RemoveUsingCell)
    IsUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_IsUsingCell)
    GetNumberOfUsingCells = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetNumberOfUsingCells)
    GetNameOfClass = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetNameOfClass)

# Register itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer in _itkMeshBasePython:
_itkMeshBasePython.itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_swigregister(itkCellInterfaceSSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer)

class itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3(object):
    r"""


    An abstract interface for cells.

    Define an abstract interface for cells. Actual cell types derive from
    this class.

    Parameters:
    -----------

    TPixelType:  The type stored with an entity (cell, point, or
    boundary).

    TCellTraits:  Type information for cell. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Accept = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_Accept)
    GetType = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_GetType)
    MakeCopy = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_MakeCopy)
    GetDimension = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_GetDimension)
    GetInterpolationOrder = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_GetInterpolationOrder)
    GetNumberOfPoints = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_GetNumberOfPoints)
    GetNumberOfBoundaryFeatures = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_GetNumberOfBoundaryFeatures)
    GetBoundaryFeature = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_GetBoundaryFeature)
    GetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_GetPointIds)
    SetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_SetPointIds)
    SetPointId = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_SetPointId)
    PointIdsBegin = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_PointIdsBegin)
    PointIdsEnd = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_PointIdsEnd)
    GetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_GetPointIdsContainer)
    SetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_SetPointIdsContainer)
    GetClosestBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_GetClosestBoundary)
    EvaluatePosition = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_EvaluatePosition)
    EvaluateShapeFunctions = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_EvaluateShapeFunctions)
    IntersectWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_IntersectWithLine)
    GetBoundingBox = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_GetBoundingBox)
    GetBoundingBoxDiagonalLength2 = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_GetBoundingBoxDiagonalLength2)
    IntersectBoundingBoxWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_IntersectBoundingBoxWithLine)
    IsExplicitBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_IsExplicitBoundary)
    AddUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AddUsingCell)
    RemoveUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_RemoveUsingCell)
    IsUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_IsUsingCell)
    GetNumberOfUsingCells = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_GetNumberOfUsingCells)
    GetNameOfClass = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_GetNameOfClass)
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3

# Register itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3 in _itkMeshBasePython:
_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_swigregister(itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3)

class itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer(object):
    r"""Proxy of C++ itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer self) -> itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer
        __init__(itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer self, itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer p) -> itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer
        __init__(itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer self, itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3 p, bool takeOwnership) -> itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer
        """
        _itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_swiginit(self, _itkMeshBasePython.new_itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer(*args))
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer
    __deref__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer___deref__)
    Reset = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_Reset)
    TakeOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_TakeOwnership)
    TakeNoOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_TakeNoOwnership)
    IsOwner = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_IsOwner)
    ReleaseOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_ReleaseOwnership)
    GetPointer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetPointer)
    __eq__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer___eq__)
    __ne__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer___ne__)
    __lt__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer___lt__)
    __gt__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer___gt__)
    __le__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer___le__)
    __ge__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer___ge__)
    Accept = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_Accept)
    GetType = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetType)
    MakeCopy = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_MakeCopy)
    GetDimension = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetDimension)
    GetInterpolationOrder = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetInterpolationOrder)
    GetNumberOfPoints = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetNumberOfPoints)
    GetNumberOfBoundaryFeatures = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetNumberOfBoundaryFeatures)
    GetBoundaryFeature = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetBoundaryFeature)
    GetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetPointIds)
    SetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_SetPointIds)
    SetPointId = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_SetPointId)
    PointIdsBegin = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_PointIdsBegin)
    PointIdsEnd = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_PointIdsEnd)
    GetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetPointIdsContainer)
    SetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_SetPointIdsContainer)
    GetClosestBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetClosestBoundary)
    EvaluatePosition = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_EvaluatePosition)
    EvaluateShapeFunctions = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_EvaluateShapeFunctions)
    IntersectWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_IntersectWithLine)
    GetBoundingBox = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetBoundingBox)
    GetBoundingBoxDiagonalLength2 = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetBoundingBoxDiagonalLength2)
    IntersectBoundingBoxWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_IntersectBoundingBoxWithLine)
    IsExplicitBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_IsExplicitBoundary)
    AddUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_AddUsingCell)
    RemoveUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_RemoveUsingCell)
    IsUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_IsUsingCell)
    GetNumberOfUsingCells = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetNumberOfUsingCells)
    GetNameOfClass = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetNameOfClass)

# Register itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer in _itkMeshBasePython:
_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_swigregister(itkCellInterfaceSSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer)

class itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3(object):
    r"""


    An abstract interface for cells.

    Define an abstract interface for cells. Actual cell types derive from
    this class.

    Parameters:
    -----------

    TPixelType:  The type stored with an entity (cell, point, or
    boundary).

    TCellTraits:  Type information for cell. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Accept = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_Accept)
    GetType = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_GetType)
    MakeCopy = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_MakeCopy)
    GetDimension = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_GetDimension)
    GetInterpolationOrder = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_GetInterpolationOrder)
    GetNumberOfPoints = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_GetNumberOfPoints)
    GetNumberOfBoundaryFeatures = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_GetNumberOfBoundaryFeatures)
    GetBoundaryFeature = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_GetBoundaryFeature)
    GetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_GetPointIds)
    SetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_SetPointIds)
    SetPointId = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_SetPointId)
    PointIdsBegin = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_PointIdsBegin)
    PointIdsEnd = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_PointIdsEnd)
    GetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_GetPointIdsContainer)
    SetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_SetPointIdsContainer)
    GetClosestBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_GetClosestBoundary)
    EvaluatePosition = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_EvaluatePosition)
    EvaluateShapeFunctions = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_EvaluateShapeFunctions)
    IntersectWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_IntersectWithLine)
    GetBoundingBox = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_GetBoundingBox)
    GetBoundingBoxDiagonalLength2 = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_GetBoundingBoxDiagonalLength2)
    IntersectBoundingBoxWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_IntersectBoundingBoxWithLine)
    IsExplicitBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_IsExplicitBoundary)
    AddUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AddUsingCell)
    RemoveUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_RemoveUsingCell)
    IsUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_IsUsingCell)
    GetNumberOfUsingCells = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_GetNumberOfUsingCells)
    GetNameOfClass = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_GetNameOfClass)
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3

# Register itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3 in _itkMeshBasePython:
_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_swigregister(itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3)

class itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer(object):
    r"""Proxy of C++ itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer self) -> itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer
        __init__(itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer self, itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer p) -> itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer
        __init__(itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer self, itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3 p, bool takeOwnership) -> itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer
        """
        _itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_swiginit(self, _itkMeshBasePython.new_itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer(*args))
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer
    __deref__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer___deref__)
    Reset = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_Reset)
    TakeOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_TakeOwnership)
    TakeNoOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_TakeNoOwnership)
    IsOwner = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_IsOwner)
    ReleaseOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_ReleaseOwnership)
    GetPointer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetPointer)
    __eq__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer___eq__)
    __ne__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer___ne__)
    __lt__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer___lt__)
    __gt__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer___gt__)
    __le__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer___le__)
    __ge__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer___ge__)
    Accept = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_Accept)
    GetType = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetType)
    MakeCopy = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_MakeCopy)
    GetDimension = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetDimension)
    GetInterpolationOrder = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetInterpolationOrder)
    GetNumberOfPoints = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetNumberOfPoints)
    GetNumberOfBoundaryFeatures = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetNumberOfBoundaryFeatures)
    GetBoundaryFeature = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetBoundaryFeature)
    GetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetPointIds)
    SetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_SetPointIds)
    SetPointId = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_SetPointId)
    PointIdsBegin = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_PointIdsBegin)
    PointIdsEnd = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_PointIdsEnd)
    GetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetPointIdsContainer)
    SetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_SetPointIdsContainer)
    GetClosestBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetClosestBoundary)
    EvaluatePosition = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_EvaluatePosition)
    EvaluateShapeFunctions = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_EvaluateShapeFunctions)
    IntersectWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_IntersectWithLine)
    GetBoundingBox = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetBoundingBox)
    GetBoundingBoxDiagonalLength2 = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetBoundingBoxDiagonalLength2)
    IntersectBoundingBoxWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_IntersectBoundingBoxWithLine)
    IsExplicitBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_IsExplicitBoundary)
    AddUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_AddUsingCell)
    RemoveUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_RemoveUsingCell)
    IsUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_IsUsingCell)
    GetNumberOfUsingCells = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetNumberOfUsingCells)
    GetNameOfClass = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetNameOfClass)

# Register itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer in _itkMeshBasePython:
_itkMeshBasePython.itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_swigregister(itkCellInterfaceSSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer)

class itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2(object):
    r"""


    An abstract interface for cells.

    Define an abstract interface for cells. Actual cell types derive from
    this class.

    Parameters:
    -----------

    TPixelType:  The type stored with an entity (cell, point, or
    boundary).

    TCellTraits:  Type information for cell. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Accept = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_Accept)
    GetType = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_GetType)
    MakeCopy = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_MakeCopy)
    GetDimension = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_GetDimension)
    GetInterpolationOrder = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_GetInterpolationOrder)
    GetNumberOfPoints = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_GetNumberOfPoints)
    GetNumberOfBoundaryFeatures = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_GetNumberOfBoundaryFeatures)
    GetBoundaryFeature = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_GetBoundaryFeature)
    GetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_GetPointIds)
    SetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_SetPointIds)
    SetPointId = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_SetPointId)
    PointIdsBegin = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_PointIdsBegin)
    PointIdsEnd = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_PointIdsEnd)
    GetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_GetPointIdsContainer)
    SetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_SetPointIdsContainer)
    GetClosestBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_GetClosestBoundary)
    EvaluatePosition = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_EvaluatePosition)
    EvaluateShapeFunctions = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_EvaluateShapeFunctions)
    IntersectWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_IntersectWithLine)
    GetBoundingBox = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_GetBoundingBox)
    GetBoundingBoxDiagonalLength2 = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_GetBoundingBoxDiagonalLength2)
    IntersectBoundingBoxWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_IntersectBoundingBoxWithLine)
    IsExplicitBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_IsExplicitBoundary)
    AddUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AddUsingCell)
    RemoveUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_RemoveUsingCell)
    IsUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_IsUsingCell)
    GetNumberOfUsingCells = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_GetNumberOfUsingCells)
    GetNameOfClass = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_GetNameOfClass)
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2

# Register itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2 in _itkMeshBasePython:
_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_swigregister(itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2)

class itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer(object):
    r"""Proxy of C++ itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer self) -> itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer
        __init__(itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer self, itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer p) -> itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer
        __init__(itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer self, itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2 p, bool takeOwnership) -> itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer
        """
        _itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_swiginit(self, _itkMeshBasePython.new_itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer(*args))
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer
    __deref__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer___deref__)
    Reset = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_Reset)
    TakeOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_TakeOwnership)
    TakeNoOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_TakeNoOwnership)
    IsOwner = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_IsOwner)
    ReleaseOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_ReleaseOwnership)
    GetPointer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetPointer)
    __eq__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer___eq__)
    __ne__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer___ne__)
    __lt__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer___lt__)
    __gt__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer___gt__)
    __le__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer___le__)
    __ge__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer___ge__)
    Accept = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_Accept)
    GetType = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetType)
    MakeCopy = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_MakeCopy)
    GetDimension = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetDimension)
    GetInterpolationOrder = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetInterpolationOrder)
    GetNumberOfPoints = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetNumberOfPoints)
    GetNumberOfBoundaryFeatures = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetNumberOfBoundaryFeatures)
    GetBoundaryFeature = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetBoundaryFeature)
    GetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetPointIds)
    SetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_SetPointIds)
    SetPointId = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_SetPointId)
    PointIdsBegin = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_PointIdsBegin)
    PointIdsEnd = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_PointIdsEnd)
    GetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetPointIdsContainer)
    SetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_SetPointIdsContainer)
    GetClosestBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetClosestBoundary)
    EvaluatePosition = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_EvaluatePosition)
    EvaluateShapeFunctions = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_EvaluateShapeFunctions)
    IntersectWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_IntersectWithLine)
    GetBoundingBox = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetBoundingBox)
    GetBoundingBoxDiagonalLength2 = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetBoundingBoxDiagonalLength2)
    IntersectBoundingBoxWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_IntersectBoundingBoxWithLine)
    IsExplicitBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_IsExplicitBoundary)
    AddUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_AddUsingCell)
    RemoveUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_RemoveUsingCell)
    IsUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_IsUsingCell)
    GetNumberOfUsingCells = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetNumberOfUsingCells)
    GetNameOfClass = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetNameOfClass)

# Register itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer in _itkMeshBasePython:
_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_swigregister(itkCellInterfaceUCCTI2FFULLULLULLPF2MCULLPF2_AutoPointer)

class itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2(object):
    r"""


    An abstract interface for cells.

    Define an abstract interface for cells. Actual cell types derive from
    this class.

    Parameters:
    -----------

    TPixelType:  The type stored with an entity (cell, point, or
    boundary).

    TCellTraits:  Type information for cell. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Accept = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_Accept)
    GetType = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_GetType)
    MakeCopy = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_MakeCopy)
    GetDimension = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_GetDimension)
    GetInterpolationOrder = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_GetInterpolationOrder)
    GetNumberOfPoints = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_GetNumberOfPoints)
    GetNumberOfBoundaryFeatures = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_GetNumberOfBoundaryFeatures)
    GetBoundaryFeature = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_GetBoundaryFeature)
    GetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_GetPointIds)
    SetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_SetPointIds)
    SetPointId = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_SetPointId)
    PointIdsBegin = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_PointIdsBegin)
    PointIdsEnd = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_PointIdsEnd)
    GetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_GetPointIdsContainer)
    SetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_SetPointIdsContainer)
    GetClosestBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_GetClosestBoundary)
    EvaluatePosition = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_EvaluatePosition)
    EvaluateShapeFunctions = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_EvaluateShapeFunctions)
    IntersectWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_IntersectWithLine)
    GetBoundingBox = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_GetBoundingBox)
    GetBoundingBoxDiagonalLength2 = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_GetBoundingBoxDiagonalLength2)
    IntersectBoundingBoxWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_IntersectBoundingBoxWithLine)
    IsExplicitBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_IsExplicitBoundary)
    AddUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AddUsingCell)
    RemoveUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_RemoveUsingCell)
    IsUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_IsUsingCell)
    GetNumberOfUsingCells = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_GetNumberOfUsingCells)
    GetNameOfClass = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_GetNameOfClass)
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2

# Register itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2 in _itkMeshBasePython:
_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_swigregister(itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2)

class itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer(object):
    r"""Proxy of C++ itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer self) -> itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer
        __init__(itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer self, itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer p) -> itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer
        __init__(itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer self, itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2 p, bool takeOwnership) -> itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer
        """
        _itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_swiginit(self, _itkMeshBasePython.new_itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer(*args))
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer
    __deref__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer___deref__)
    Reset = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_Reset)
    TakeOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_TakeOwnership)
    TakeNoOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_TakeNoOwnership)
    IsOwner = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_IsOwner)
    ReleaseOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_ReleaseOwnership)
    GetPointer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetPointer)
    __eq__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer___eq__)
    __ne__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer___ne__)
    __lt__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer___lt__)
    __gt__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer___gt__)
    __le__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer___le__)
    __ge__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer___ge__)
    Accept = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_Accept)
    GetType = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetType)
    MakeCopy = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_MakeCopy)
    GetDimension = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetDimension)
    GetInterpolationOrder = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetInterpolationOrder)
    GetNumberOfPoints = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetNumberOfPoints)
    GetNumberOfBoundaryFeatures = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetNumberOfBoundaryFeatures)
    GetBoundaryFeature = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetBoundaryFeature)
    GetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetPointIds)
    SetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_SetPointIds)
    SetPointId = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_SetPointId)
    PointIdsBegin = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_PointIdsBegin)
    PointIdsEnd = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_PointIdsEnd)
    GetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetPointIdsContainer)
    SetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_SetPointIdsContainer)
    GetClosestBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetClosestBoundary)
    EvaluatePosition = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_EvaluatePosition)
    EvaluateShapeFunctions = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_EvaluateShapeFunctions)
    IntersectWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_IntersectWithLine)
    GetBoundingBox = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetBoundingBox)
    GetBoundingBoxDiagonalLength2 = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetBoundingBoxDiagonalLength2)
    IntersectBoundingBoxWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_IntersectBoundingBoxWithLine)
    IsExplicitBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_IsExplicitBoundary)
    AddUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_AddUsingCell)
    RemoveUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_RemoveUsingCell)
    IsUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_IsUsingCell)
    GetNumberOfUsingCells = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetNumberOfUsingCells)
    GetNameOfClass = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetNameOfClass)

# Register itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer in _itkMeshBasePython:
_itkMeshBasePython.itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_swigregister(itkCellInterfaceUCCTI2FFULLULLULLPF2VCULLPF2_AutoPointer)

class itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3(object):
    r"""


    An abstract interface for cells.

    Define an abstract interface for cells. Actual cell types derive from
    this class.

    Parameters:
    -----------

    TPixelType:  The type stored with an entity (cell, point, or
    boundary).

    TCellTraits:  Type information for cell. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Accept = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_Accept)
    GetType = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_GetType)
    MakeCopy = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_MakeCopy)
    GetDimension = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_GetDimension)
    GetInterpolationOrder = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_GetInterpolationOrder)
    GetNumberOfPoints = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_GetNumberOfPoints)
    GetNumberOfBoundaryFeatures = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_GetNumberOfBoundaryFeatures)
    GetBoundaryFeature = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_GetBoundaryFeature)
    GetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_GetPointIds)
    SetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_SetPointIds)
    SetPointId = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_SetPointId)
    PointIdsBegin = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_PointIdsBegin)
    PointIdsEnd = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_PointIdsEnd)
    GetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_GetPointIdsContainer)
    SetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_SetPointIdsContainer)
    GetClosestBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_GetClosestBoundary)
    EvaluatePosition = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_EvaluatePosition)
    EvaluateShapeFunctions = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_EvaluateShapeFunctions)
    IntersectWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_IntersectWithLine)
    GetBoundingBox = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_GetBoundingBox)
    GetBoundingBoxDiagonalLength2 = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_GetBoundingBoxDiagonalLength2)
    IntersectBoundingBoxWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_IntersectBoundingBoxWithLine)
    IsExplicitBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_IsExplicitBoundary)
    AddUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AddUsingCell)
    RemoveUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_RemoveUsingCell)
    IsUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_IsUsingCell)
    GetNumberOfUsingCells = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_GetNumberOfUsingCells)
    GetNameOfClass = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_GetNameOfClass)
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3

# Register itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3 in _itkMeshBasePython:
_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_swigregister(itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3)

class itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer(object):
    r"""Proxy of C++ itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer self) -> itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer
        __init__(itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer self, itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer p) -> itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer
        __init__(itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer self, itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3 p, bool takeOwnership) -> itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer
        """
        _itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_swiginit(self, _itkMeshBasePython.new_itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer(*args))
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer
    __deref__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer___deref__)
    Reset = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_Reset)
    TakeOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_TakeOwnership)
    TakeNoOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_TakeNoOwnership)
    IsOwner = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_IsOwner)
    ReleaseOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_ReleaseOwnership)
    GetPointer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetPointer)
    __eq__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer___eq__)
    __ne__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer___ne__)
    __lt__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer___lt__)
    __gt__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer___gt__)
    __le__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer___le__)
    __ge__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer___ge__)
    Accept = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_Accept)
    GetType = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetType)
    MakeCopy = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_MakeCopy)
    GetDimension = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetDimension)
    GetInterpolationOrder = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetInterpolationOrder)
    GetNumberOfPoints = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetNumberOfPoints)
    GetNumberOfBoundaryFeatures = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetNumberOfBoundaryFeatures)
    GetBoundaryFeature = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetBoundaryFeature)
    GetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetPointIds)
    SetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_SetPointIds)
    SetPointId = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_SetPointId)
    PointIdsBegin = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_PointIdsBegin)
    PointIdsEnd = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_PointIdsEnd)
    GetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetPointIdsContainer)
    SetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_SetPointIdsContainer)
    GetClosestBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetClosestBoundary)
    EvaluatePosition = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_EvaluatePosition)
    EvaluateShapeFunctions = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_EvaluateShapeFunctions)
    IntersectWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_IntersectWithLine)
    GetBoundingBox = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetBoundingBox)
    GetBoundingBoxDiagonalLength2 = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetBoundingBoxDiagonalLength2)
    IntersectBoundingBoxWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_IntersectBoundingBoxWithLine)
    IsExplicitBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_IsExplicitBoundary)
    AddUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_AddUsingCell)
    RemoveUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_RemoveUsingCell)
    IsUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_IsUsingCell)
    GetNumberOfUsingCells = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetNumberOfUsingCells)
    GetNameOfClass = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetNameOfClass)

# Register itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer in _itkMeshBasePython:
_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_swigregister(itkCellInterfaceUCCTI3FFULLULLULLPF3MCULLPF3_AutoPointer)

class itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3(object):
    r"""


    An abstract interface for cells.

    Define an abstract interface for cells. Actual cell types derive from
    this class.

    Parameters:
    -----------

    TPixelType:  The type stored with an entity (cell, point, or
    boundary).

    TCellTraits:  Type information for cell. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Accept = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_Accept)
    GetType = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_GetType)
    MakeCopy = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_MakeCopy)
    GetDimension = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_GetDimension)
    GetInterpolationOrder = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_GetInterpolationOrder)
    GetNumberOfPoints = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_GetNumberOfPoints)
    GetNumberOfBoundaryFeatures = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_GetNumberOfBoundaryFeatures)
    GetBoundaryFeature = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_GetBoundaryFeature)
    GetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_GetPointIds)
    SetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_SetPointIds)
    SetPointId = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_SetPointId)
    PointIdsBegin = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_PointIdsBegin)
    PointIdsEnd = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_PointIdsEnd)
    GetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_GetPointIdsContainer)
    SetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_SetPointIdsContainer)
    GetClosestBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_GetClosestBoundary)
    EvaluatePosition = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_EvaluatePosition)
    EvaluateShapeFunctions = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_EvaluateShapeFunctions)
    IntersectWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_IntersectWithLine)
    GetBoundingBox = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_GetBoundingBox)
    GetBoundingBoxDiagonalLength2 = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_GetBoundingBoxDiagonalLength2)
    IntersectBoundingBoxWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_IntersectBoundingBoxWithLine)
    IsExplicitBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_IsExplicitBoundary)
    AddUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AddUsingCell)
    RemoveUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_RemoveUsingCell)
    IsUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_IsUsingCell)
    GetNumberOfUsingCells = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_GetNumberOfUsingCells)
    GetNameOfClass = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_GetNameOfClass)
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3

# Register itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3 in _itkMeshBasePython:
_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_swigregister(itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3)

class itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer(object):
    r"""Proxy of C++ itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer self) -> itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer
        __init__(itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer self, itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer p) -> itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer
        __init__(itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer self, itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3 p, bool takeOwnership) -> itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer
        """
        _itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_swiginit(self, _itkMeshBasePython.new_itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer(*args))
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer
    __deref__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer___deref__)
    Reset = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_Reset)
    TakeOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_TakeOwnership)
    TakeNoOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_TakeNoOwnership)
    IsOwner = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_IsOwner)
    ReleaseOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_ReleaseOwnership)
    GetPointer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetPointer)
    __eq__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer___eq__)
    __ne__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer___ne__)
    __lt__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer___lt__)
    __gt__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer___gt__)
    __le__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer___le__)
    __ge__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer___ge__)
    Accept = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_Accept)
    GetType = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetType)
    MakeCopy = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_MakeCopy)
    GetDimension = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetDimension)
    GetInterpolationOrder = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetInterpolationOrder)
    GetNumberOfPoints = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetNumberOfPoints)
    GetNumberOfBoundaryFeatures = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetNumberOfBoundaryFeatures)
    GetBoundaryFeature = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetBoundaryFeature)
    GetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetPointIds)
    SetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_SetPointIds)
    SetPointId = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_SetPointId)
    PointIdsBegin = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_PointIdsBegin)
    PointIdsEnd = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_PointIdsEnd)
    GetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetPointIdsContainer)
    SetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_SetPointIdsContainer)
    GetClosestBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetClosestBoundary)
    EvaluatePosition = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_EvaluatePosition)
    EvaluateShapeFunctions = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_EvaluateShapeFunctions)
    IntersectWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_IntersectWithLine)
    GetBoundingBox = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetBoundingBox)
    GetBoundingBoxDiagonalLength2 = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetBoundingBoxDiagonalLength2)
    IntersectBoundingBoxWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_IntersectBoundingBoxWithLine)
    IsExplicitBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_IsExplicitBoundary)
    AddUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_AddUsingCell)
    RemoveUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_RemoveUsingCell)
    IsUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_IsUsingCell)
    GetNumberOfUsingCells = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetNumberOfUsingCells)
    GetNameOfClass = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetNameOfClass)

# Register itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer in _itkMeshBasePython:
_itkMeshBasePython.itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_swigregister(itkCellInterfaceUCCTI3FFULLULLULLPF3VCULLPF3_AutoPointer)

class itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2(object):
    r"""


    An abstract interface for cells.

    Define an abstract interface for cells. Actual cell types derive from
    this class.

    Parameters:
    -----------

    TPixelType:  The type stored with an entity (cell, point, or
    boundary).

    TCellTraits:  Type information for cell. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Accept = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_Accept)
    GetType = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_GetType)
    MakeCopy = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_MakeCopy)
    GetDimension = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_GetDimension)
    GetInterpolationOrder = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_GetInterpolationOrder)
    GetNumberOfPoints = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_GetNumberOfPoints)
    GetNumberOfBoundaryFeatures = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_GetNumberOfBoundaryFeatures)
    GetBoundaryFeature = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_GetBoundaryFeature)
    GetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_GetPointIds)
    SetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_SetPointIds)
    SetPointId = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_SetPointId)
    PointIdsBegin = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_PointIdsBegin)
    PointIdsEnd = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_PointIdsEnd)
    GetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_GetPointIdsContainer)
    SetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_SetPointIdsContainer)
    GetClosestBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_GetClosestBoundary)
    EvaluatePosition = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_EvaluatePosition)
    EvaluateShapeFunctions = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_EvaluateShapeFunctions)
    IntersectWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_IntersectWithLine)
    GetBoundingBox = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_GetBoundingBox)
    GetBoundingBoxDiagonalLength2 = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_GetBoundingBoxDiagonalLength2)
    IntersectBoundingBoxWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_IntersectBoundingBoxWithLine)
    IsExplicitBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_IsExplicitBoundary)
    AddUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AddUsingCell)
    RemoveUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_RemoveUsingCell)
    IsUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_IsUsingCell)
    GetNumberOfUsingCells = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_GetNumberOfUsingCells)
    GetNameOfClass = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_GetNameOfClass)
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2

# Register itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2 in _itkMeshBasePython:
_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_swigregister(itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2)

class itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer(object):
    r"""Proxy of C++ itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer self) -> itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer
        __init__(itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer self, itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer p) -> itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer
        __init__(itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer self, itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2 p, bool takeOwnership) -> itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer
        """
        _itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_swiginit(self, _itkMeshBasePython.new_itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer(*args))
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer
    __deref__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer___deref__)
    Reset = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_Reset)
    TakeOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_TakeOwnership)
    TakeNoOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_TakeNoOwnership)
    IsOwner = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_IsOwner)
    ReleaseOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_ReleaseOwnership)
    GetPointer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetPointer)
    __eq__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer___eq__)
    __ne__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer___ne__)
    __lt__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer___lt__)
    __gt__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer___gt__)
    __le__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer___le__)
    __ge__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer___ge__)
    Accept = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_Accept)
    GetType = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetType)
    MakeCopy = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_MakeCopy)
    GetDimension = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetDimension)
    GetInterpolationOrder = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetInterpolationOrder)
    GetNumberOfPoints = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetNumberOfPoints)
    GetNumberOfBoundaryFeatures = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetNumberOfBoundaryFeatures)
    GetBoundaryFeature = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetBoundaryFeature)
    GetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetPointIds)
    SetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_SetPointIds)
    SetPointId = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_SetPointId)
    PointIdsBegin = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_PointIdsBegin)
    PointIdsEnd = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_PointIdsEnd)
    GetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetPointIdsContainer)
    SetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_SetPointIdsContainer)
    GetClosestBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetClosestBoundary)
    EvaluatePosition = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_EvaluatePosition)
    EvaluateShapeFunctions = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_EvaluateShapeFunctions)
    IntersectWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_IntersectWithLine)
    GetBoundingBox = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetBoundingBox)
    GetBoundingBoxDiagonalLength2 = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetBoundingBoxDiagonalLength2)
    IntersectBoundingBoxWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_IntersectBoundingBoxWithLine)
    IsExplicitBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_IsExplicitBoundary)
    AddUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_AddUsingCell)
    RemoveUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_RemoveUsingCell)
    IsUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_IsUsingCell)
    GetNumberOfUsingCells = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetNumberOfUsingCells)
    GetNameOfClass = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_GetNameOfClass)

# Register itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer in _itkMeshBasePython:
_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer_swigregister(itkCellInterfaceUSCTI2FFULLULLULLPF2MCULLPF2_AutoPointer)

class itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2(object):
    r"""


    An abstract interface for cells.

    Define an abstract interface for cells. Actual cell types derive from
    this class.

    Parameters:
    -----------

    TPixelType:  The type stored with an entity (cell, point, or
    boundary).

    TCellTraits:  Type information for cell. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Accept = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_Accept)
    GetType = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_GetType)
    MakeCopy = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_MakeCopy)
    GetDimension = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_GetDimension)
    GetInterpolationOrder = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_GetInterpolationOrder)
    GetNumberOfPoints = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_GetNumberOfPoints)
    GetNumberOfBoundaryFeatures = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_GetNumberOfBoundaryFeatures)
    GetBoundaryFeature = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_GetBoundaryFeature)
    GetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_GetPointIds)
    SetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_SetPointIds)
    SetPointId = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_SetPointId)
    PointIdsBegin = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_PointIdsBegin)
    PointIdsEnd = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_PointIdsEnd)
    GetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_GetPointIdsContainer)
    SetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_SetPointIdsContainer)
    GetClosestBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_GetClosestBoundary)
    EvaluatePosition = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_EvaluatePosition)
    EvaluateShapeFunctions = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_EvaluateShapeFunctions)
    IntersectWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_IntersectWithLine)
    GetBoundingBox = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_GetBoundingBox)
    GetBoundingBoxDiagonalLength2 = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_GetBoundingBoxDiagonalLength2)
    IntersectBoundingBoxWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_IntersectBoundingBoxWithLine)
    IsExplicitBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_IsExplicitBoundary)
    AddUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AddUsingCell)
    RemoveUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_RemoveUsingCell)
    IsUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_IsUsingCell)
    GetNumberOfUsingCells = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_GetNumberOfUsingCells)
    GetNameOfClass = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_GetNameOfClass)
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2

# Register itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2 in _itkMeshBasePython:
_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_swigregister(itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2)

class itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer(object):
    r"""Proxy of C++ itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer self) -> itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer
        __init__(itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer self, itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer p) -> itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer
        __init__(itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer self, itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2 p, bool takeOwnership) -> itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer
        """
        _itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_swiginit(self, _itkMeshBasePython.new_itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer(*args))
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer
    __deref__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer___deref__)
    Reset = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_Reset)
    TakeOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_TakeOwnership)
    TakeNoOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_TakeNoOwnership)
    IsOwner = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_IsOwner)
    ReleaseOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_ReleaseOwnership)
    GetPointer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetPointer)
    __eq__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer___eq__)
    __ne__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer___ne__)
    __lt__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer___lt__)
    __gt__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer___gt__)
    __le__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer___le__)
    __ge__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer___ge__)
    Accept = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_Accept)
    GetType = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetType)
    MakeCopy = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_MakeCopy)
    GetDimension = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetDimension)
    GetInterpolationOrder = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetInterpolationOrder)
    GetNumberOfPoints = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetNumberOfPoints)
    GetNumberOfBoundaryFeatures = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetNumberOfBoundaryFeatures)
    GetBoundaryFeature = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetBoundaryFeature)
    GetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetPointIds)
    SetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_SetPointIds)
    SetPointId = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_SetPointId)
    PointIdsBegin = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_PointIdsBegin)
    PointIdsEnd = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_PointIdsEnd)
    GetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetPointIdsContainer)
    SetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_SetPointIdsContainer)
    GetClosestBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetClosestBoundary)
    EvaluatePosition = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_EvaluatePosition)
    EvaluateShapeFunctions = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_EvaluateShapeFunctions)
    IntersectWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_IntersectWithLine)
    GetBoundingBox = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetBoundingBox)
    GetBoundingBoxDiagonalLength2 = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetBoundingBoxDiagonalLength2)
    IntersectBoundingBoxWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_IntersectBoundingBoxWithLine)
    IsExplicitBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_IsExplicitBoundary)
    AddUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_AddUsingCell)
    RemoveUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_RemoveUsingCell)
    IsUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_IsUsingCell)
    GetNumberOfUsingCells = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetNumberOfUsingCells)
    GetNameOfClass = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_GetNameOfClass)

# Register itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer in _itkMeshBasePython:
_itkMeshBasePython.itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer_swigregister(itkCellInterfaceUSCTI2FFULLULLULLPF2VCULLPF2_AutoPointer)

class itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3(object):
    r"""


    An abstract interface for cells.

    Define an abstract interface for cells. Actual cell types derive from
    this class.

    Parameters:
    -----------

    TPixelType:  The type stored with an entity (cell, point, or
    boundary).

    TCellTraits:  Type information for cell. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Accept = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_Accept)
    GetType = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_GetType)
    MakeCopy = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_MakeCopy)
    GetDimension = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_GetDimension)
    GetInterpolationOrder = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_GetInterpolationOrder)
    GetNumberOfPoints = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_GetNumberOfPoints)
    GetNumberOfBoundaryFeatures = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_GetNumberOfBoundaryFeatures)
    GetBoundaryFeature = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_GetBoundaryFeature)
    GetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_GetPointIds)
    SetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_SetPointIds)
    SetPointId = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_SetPointId)
    PointIdsBegin = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_PointIdsBegin)
    PointIdsEnd = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_PointIdsEnd)
    GetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_GetPointIdsContainer)
    SetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_SetPointIdsContainer)
    GetClosestBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_GetClosestBoundary)
    EvaluatePosition = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_EvaluatePosition)
    EvaluateShapeFunctions = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_EvaluateShapeFunctions)
    IntersectWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_IntersectWithLine)
    GetBoundingBox = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_GetBoundingBox)
    GetBoundingBoxDiagonalLength2 = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_GetBoundingBoxDiagonalLength2)
    IntersectBoundingBoxWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_IntersectBoundingBoxWithLine)
    IsExplicitBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_IsExplicitBoundary)
    AddUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AddUsingCell)
    RemoveUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_RemoveUsingCell)
    IsUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_IsUsingCell)
    GetNumberOfUsingCells = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_GetNumberOfUsingCells)
    GetNameOfClass = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_GetNameOfClass)
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3

# Register itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3 in _itkMeshBasePython:
_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_swigregister(itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3)

class itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer(object):
    r"""Proxy of C++ itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer self) -> itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer
        __init__(itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer self, itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer p) -> itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer
        __init__(itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer self, itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3 p, bool takeOwnership) -> itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer
        """
        _itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_swiginit(self, _itkMeshBasePython.new_itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer(*args))
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer
    __deref__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer___deref__)
    Reset = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_Reset)
    TakeOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_TakeOwnership)
    TakeNoOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_TakeNoOwnership)
    IsOwner = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_IsOwner)
    ReleaseOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_ReleaseOwnership)
    GetPointer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetPointer)
    __eq__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer___eq__)
    __ne__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer___ne__)
    __lt__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer___lt__)
    __gt__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer___gt__)
    __le__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer___le__)
    __ge__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer___ge__)
    Accept = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_Accept)
    GetType = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetType)
    MakeCopy = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_MakeCopy)
    GetDimension = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetDimension)
    GetInterpolationOrder = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetInterpolationOrder)
    GetNumberOfPoints = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetNumberOfPoints)
    GetNumberOfBoundaryFeatures = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetNumberOfBoundaryFeatures)
    GetBoundaryFeature = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetBoundaryFeature)
    GetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetPointIds)
    SetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_SetPointIds)
    SetPointId = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_SetPointId)
    PointIdsBegin = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_PointIdsBegin)
    PointIdsEnd = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_PointIdsEnd)
    GetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetPointIdsContainer)
    SetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_SetPointIdsContainer)
    GetClosestBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetClosestBoundary)
    EvaluatePosition = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_EvaluatePosition)
    EvaluateShapeFunctions = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_EvaluateShapeFunctions)
    IntersectWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_IntersectWithLine)
    GetBoundingBox = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetBoundingBox)
    GetBoundingBoxDiagonalLength2 = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetBoundingBoxDiagonalLength2)
    IntersectBoundingBoxWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_IntersectBoundingBoxWithLine)
    IsExplicitBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_IsExplicitBoundary)
    AddUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_AddUsingCell)
    RemoveUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_RemoveUsingCell)
    IsUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_IsUsingCell)
    GetNumberOfUsingCells = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetNumberOfUsingCells)
    GetNameOfClass = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_GetNameOfClass)

# Register itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer in _itkMeshBasePython:
_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer_swigregister(itkCellInterfaceUSCTI3FFULLULLULLPF3MCULLPF3_AutoPointer)

class itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3(object):
    r"""


    An abstract interface for cells.

    Define an abstract interface for cells. Actual cell types derive from
    this class.

    Parameters:
    -----------

    TPixelType:  The type stored with an entity (cell, point, or
    boundary).

    TCellTraits:  Type information for cell. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Accept = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_Accept)
    GetType = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_GetType)
    MakeCopy = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_MakeCopy)
    GetDimension = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_GetDimension)
    GetInterpolationOrder = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_GetInterpolationOrder)
    GetNumberOfPoints = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_GetNumberOfPoints)
    GetNumberOfBoundaryFeatures = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_GetNumberOfBoundaryFeatures)
    GetBoundaryFeature = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_GetBoundaryFeature)
    GetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_GetPointIds)
    SetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_SetPointIds)
    SetPointId = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_SetPointId)
    PointIdsBegin = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_PointIdsBegin)
    PointIdsEnd = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_PointIdsEnd)
    GetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_GetPointIdsContainer)
    SetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_SetPointIdsContainer)
    GetClosestBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_GetClosestBoundary)
    EvaluatePosition = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_EvaluatePosition)
    EvaluateShapeFunctions = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_EvaluateShapeFunctions)
    IntersectWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_IntersectWithLine)
    GetBoundingBox = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_GetBoundingBox)
    GetBoundingBoxDiagonalLength2 = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_GetBoundingBoxDiagonalLength2)
    IntersectBoundingBoxWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_IntersectBoundingBoxWithLine)
    IsExplicitBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_IsExplicitBoundary)
    AddUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AddUsingCell)
    RemoveUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_RemoveUsingCell)
    IsUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_IsUsingCell)
    GetNumberOfUsingCells = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_GetNumberOfUsingCells)
    GetNameOfClass = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_GetNameOfClass)
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3

# Register itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3 in _itkMeshBasePython:
_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_swigregister(itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3)

class itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer(object):
    r"""Proxy of C++ itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer self) -> itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer
        __init__(itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer self, itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer p) -> itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer
        __init__(itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer self, itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3 p, bool takeOwnership) -> itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer
        """
        _itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_swiginit(self, _itkMeshBasePython.new_itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer(*args))
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer
    __deref__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer___deref__)
    Reset = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_Reset)
    TakeOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_TakeOwnership)
    TakeNoOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_TakeNoOwnership)
    IsOwner = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_IsOwner)
    ReleaseOwnership = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_ReleaseOwnership)
    GetPointer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetPointer)
    __eq__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer___eq__)
    __ne__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer___ne__)
    __lt__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer___lt__)
    __gt__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer___gt__)
    __le__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer___le__)
    __ge__ = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer___ge__)
    Accept = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_Accept)
    GetType = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetType)
    MakeCopy = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_MakeCopy)
    GetDimension = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetDimension)
    GetInterpolationOrder = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetInterpolationOrder)
    GetNumberOfPoints = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetNumberOfPoints)
    GetNumberOfBoundaryFeatures = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetNumberOfBoundaryFeatures)
    GetBoundaryFeature = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetBoundaryFeature)
    GetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetPointIds)
    SetPointIds = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_SetPointIds)
    SetPointId = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_SetPointId)
    PointIdsBegin = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_PointIdsBegin)
    PointIdsEnd = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_PointIdsEnd)
    GetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetPointIdsContainer)
    SetPointIdsContainer = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_SetPointIdsContainer)
    GetClosestBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetClosestBoundary)
    EvaluatePosition = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_EvaluatePosition)
    EvaluateShapeFunctions = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_EvaluateShapeFunctions)
    IntersectWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_IntersectWithLine)
    GetBoundingBox = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetBoundingBox)
    GetBoundingBoxDiagonalLength2 = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetBoundingBoxDiagonalLength2)
    IntersectBoundingBoxWithLine = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_IntersectBoundingBoxWithLine)
    IsExplicitBoundary = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_IsExplicitBoundary)
    AddUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_AddUsingCell)
    RemoveUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_RemoveUsingCell)
    IsUsingCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_IsUsingCell)
    GetNumberOfUsingCells = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetNumberOfUsingCells)
    GetNameOfClass = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_GetNameOfClass)

# Register itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer in _itkMeshBasePython:
_itkMeshBasePython.itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer_swigregister(itkCellInterfaceUSCTI3FFULLULLULLPF3VCULLPF3_AutoPointer)

class itkCellInterfaceVisitorDCTI2FFULLULLULLPF2MCULLPF2(itk.ITKCommonBasePython.itkLightObject):
    r"""


    Abstract interface for a visitor class that can visit the cells in a
    Mesh.

    Define the abstract interface for a visitor class that can visit the
    cells in a Mesh. This follows the Visitor Design Pattern. To make this
    class easier to use, the CellInterfaceVisitorImplementation is
    provided as a templated class to implement the pure virtual functions
    of CellInterfaceVisitor. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    VisitFromCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceVisitorDCTI2FFULLULLULLPF2MCULLPF2_VisitFromCell)
    GetCellTopologyId = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceVisitorDCTI2FFULLULLULLPF2MCULLPF2_GetCellTopologyId)
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellInterfaceVisitorDCTI2FFULLULLULLPF2MCULLPF2
    cast = _swig_new_static_method(_itkMeshBasePython.itkCellInterfaceVisitorDCTI2FFULLULLULLPF2MCULLPF2_cast)

# Register itkCellInterfaceVisitorDCTI2FFULLULLULLPF2MCULLPF2 in _itkMeshBasePython:
_itkMeshBasePython.itkCellInterfaceVisitorDCTI2FFULLULLULLPF2MCULLPF2_swigregister(itkCellInterfaceVisitorDCTI2FFULLULLULLPF2MCULLPF2)
itkCellInterfaceVisitorDCTI2FFULLULLULLPF2MCULLPF2_cast = _itkMeshBasePython.itkCellInterfaceVisitorDCTI2FFULLULLULLPF2MCULLPF2_cast

class itkCellInterfaceVisitorDCTI3FFULLULLULLPF3MCULLPF3(itk.ITKCommonBasePython.itkLightObject):
    r"""


    Abstract interface for a visitor class that can visit the cells in a
    Mesh.

    Define the abstract interface for a visitor class that can visit the
    cells in a Mesh. This follows the Visitor Design Pattern. To make this
    class easier to use, the CellInterfaceVisitorImplementation is
    provided as a templated class to implement the pure virtual functions
    of CellInterfaceVisitor. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    VisitFromCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceVisitorDCTI3FFULLULLULLPF3MCULLPF3_VisitFromCell)
    GetCellTopologyId = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceVisitorDCTI3FFULLULLULLPF3MCULLPF3_GetCellTopologyId)
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellInterfaceVisitorDCTI3FFULLULLULLPF3MCULLPF3
    cast = _swig_new_static_method(_itkMeshBasePython.itkCellInterfaceVisitorDCTI3FFULLULLULLPF3MCULLPF3_cast)

# Register itkCellInterfaceVisitorDCTI3FFULLULLULLPF3MCULLPF3 in _itkMeshBasePython:
_itkMeshBasePython.itkCellInterfaceVisitorDCTI3FFULLULLULLPF3MCULLPF3_swigregister(itkCellInterfaceVisitorDCTI3FFULLULLULLPF3MCULLPF3)
itkCellInterfaceVisitorDCTI3FFULLULLULLPF3MCULLPF3_cast = _itkMeshBasePython.itkCellInterfaceVisitorDCTI3FFULLULLULLPF3MCULLPF3_cast

class itkCellInterfaceVisitorFCTI2FFULLULLULLPF2MCULLPF2(itk.ITKCommonBasePython.itkLightObject):
    r"""


    Abstract interface for a visitor class that can visit the cells in a
    Mesh.

    Define the abstract interface for a visitor class that can visit the
    cells in a Mesh. This follows the Visitor Design Pattern. To make this
    class easier to use, the CellInterfaceVisitorImplementation is
    provided as a templated class to implement the pure virtual functions
    of CellInterfaceVisitor. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    VisitFromCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceVisitorFCTI2FFULLULLULLPF2MCULLPF2_VisitFromCell)
    GetCellTopologyId = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceVisitorFCTI2FFULLULLULLPF2MCULLPF2_GetCellTopologyId)
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellInterfaceVisitorFCTI2FFULLULLULLPF2MCULLPF2
    cast = _swig_new_static_method(_itkMeshBasePython.itkCellInterfaceVisitorFCTI2FFULLULLULLPF2MCULLPF2_cast)

# Register itkCellInterfaceVisitorFCTI2FFULLULLULLPF2MCULLPF2 in _itkMeshBasePython:
_itkMeshBasePython.itkCellInterfaceVisitorFCTI2FFULLULLULLPF2MCULLPF2_swigregister(itkCellInterfaceVisitorFCTI2FFULLULLULLPF2MCULLPF2)
itkCellInterfaceVisitorFCTI2FFULLULLULLPF2MCULLPF2_cast = _itkMeshBasePython.itkCellInterfaceVisitorFCTI2FFULLULLULLPF2MCULLPF2_cast

class itkCellInterfaceVisitorFCTI3FFULLULLULLPF3MCULLPF3(itk.ITKCommonBasePython.itkLightObject):
    r"""


    Abstract interface for a visitor class that can visit the cells in a
    Mesh.

    Define the abstract interface for a visitor class that can visit the
    cells in a Mesh. This follows the Visitor Design Pattern. To make this
    class easier to use, the CellInterfaceVisitorImplementation is
    provided as a templated class to implement the pure virtual functions
    of CellInterfaceVisitor. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    VisitFromCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceVisitorFCTI3FFULLULLULLPF3MCULLPF3_VisitFromCell)
    GetCellTopologyId = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceVisitorFCTI3FFULLULLULLPF3MCULLPF3_GetCellTopologyId)
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellInterfaceVisitorFCTI3FFULLULLULLPF3MCULLPF3
    cast = _swig_new_static_method(_itkMeshBasePython.itkCellInterfaceVisitorFCTI3FFULLULLULLPF3MCULLPF3_cast)

# Register itkCellInterfaceVisitorFCTI3FFULLULLULLPF3MCULLPF3 in _itkMeshBasePython:
_itkMeshBasePython.itkCellInterfaceVisitorFCTI3FFULLULLULLPF3MCULLPF3_swigregister(itkCellInterfaceVisitorFCTI3FFULLULLULLPF3MCULLPF3)
itkCellInterfaceVisitorFCTI3FFULLULLULLPF3MCULLPF3_cast = _itkMeshBasePython.itkCellInterfaceVisitorFCTI3FFULLULLULLPF3MCULLPF3_cast

class itkCellInterfaceVisitorSSCTI2FFULLULLULLPF2MCULLPF2(itk.ITKCommonBasePython.itkLightObject):
    r"""


    Abstract interface for a visitor class that can visit the cells in a
    Mesh.

    Define the abstract interface for a visitor class that can visit the
    cells in a Mesh. This follows the Visitor Design Pattern. To make this
    class easier to use, the CellInterfaceVisitorImplementation is
    provided as a templated class to implement the pure virtual functions
    of CellInterfaceVisitor. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    VisitFromCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceVisitorSSCTI2FFULLULLULLPF2MCULLPF2_VisitFromCell)
    GetCellTopologyId = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceVisitorSSCTI2FFULLULLULLPF2MCULLPF2_GetCellTopologyId)
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellInterfaceVisitorSSCTI2FFULLULLULLPF2MCULLPF2
    cast = _swig_new_static_method(_itkMeshBasePython.itkCellInterfaceVisitorSSCTI2FFULLULLULLPF2MCULLPF2_cast)

# Register itkCellInterfaceVisitorSSCTI2FFULLULLULLPF2MCULLPF2 in _itkMeshBasePython:
_itkMeshBasePython.itkCellInterfaceVisitorSSCTI2FFULLULLULLPF2MCULLPF2_swigregister(itkCellInterfaceVisitorSSCTI2FFULLULLULLPF2MCULLPF2)
itkCellInterfaceVisitorSSCTI2FFULLULLULLPF2MCULLPF2_cast = _itkMeshBasePython.itkCellInterfaceVisitorSSCTI2FFULLULLULLPF2MCULLPF2_cast

class itkCellInterfaceVisitorSSCTI3FFULLULLULLPF3MCULLPF3(itk.ITKCommonBasePython.itkLightObject):
    r"""


    Abstract interface for a visitor class that can visit the cells in a
    Mesh.

    Define the abstract interface for a visitor class that can visit the
    cells in a Mesh. This follows the Visitor Design Pattern. To make this
    class easier to use, the CellInterfaceVisitorImplementation is
    provided as a templated class to implement the pure virtual functions
    of CellInterfaceVisitor. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    VisitFromCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceVisitorSSCTI3FFULLULLULLPF3MCULLPF3_VisitFromCell)
    GetCellTopologyId = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceVisitorSSCTI3FFULLULLULLPF3MCULLPF3_GetCellTopologyId)
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellInterfaceVisitorSSCTI3FFULLULLULLPF3MCULLPF3
    cast = _swig_new_static_method(_itkMeshBasePython.itkCellInterfaceVisitorSSCTI3FFULLULLULLPF3MCULLPF3_cast)

# Register itkCellInterfaceVisitorSSCTI3FFULLULLULLPF3MCULLPF3 in _itkMeshBasePython:
_itkMeshBasePython.itkCellInterfaceVisitorSSCTI3FFULLULLULLPF3MCULLPF3_swigregister(itkCellInterfaceVisitorSSCTI3FFULLULLULLPF3MCULLPF3)
itkCellInterfaceVisitorSSCTI3FFULLULLULLPF3MCULLPF3_cast = _itkMeshBasePython.itkCellInterfaceVisitorSSCTI3FFULLULLULLPF3MCULLPF3_cast

class itkCellInterfaceVisitorUCCTI2FFULLULLULLPF2MCULLPF2(itk.ITKCommonBasePython.itkLightObject):
    r"""


    Abstract interface for a visitor class that can visit the cells in a
    Mesh.

    Define the abstract interface for a visitor class that can visit the
    cells in a Mesh. This follows the Visitor Design Pattern. To make this
    class easier to use, the CellInterfaceVisitorImplementation is
    provided as a templated class to implement the pure virtual functions
    of CellInterfaceVisitor. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    VisitFromCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceVisitorUCCTI2FFULLULLULLPF2MCULLPF2_VisitFromCell)
    GetCellTopologyId = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceVisitorUCCTI2FFULLULLULLPF2MCULLPF2_GetCellTopologyId)
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellInterfaceVisitorUCCTI2FFULLULLULLPF2MCULLPF2
    cast = _swig_new_static_method(_itkMeshBasePython.itkCellInterfaceVisitorUCCTI2FFULLULLULLPF2MCULLPF2_cast)

# Register itkCellInterfaceVisitorUCCTI2FFULLULLULLPF2MCULLPF2 in _itkMeshBasePython:
_itkMeshBasePython.itkCellInterfaceVisitorUCCTI2FFULLULLULLPF2MCULLPF2_swigregister(itkCellInterfaceVisitorUCCTI2FFULLULLULLPF2MCULLPF2)
itkCellInterfaceVisitorUCCTI2FFULLULLULLPF2MCULLPF2_cast = _itkMeshBasePython.itkCellInterfaceVisitorUCCTI2FFULLULLULLPF2MCULLPF2_cast

class itkCellInterfaceVisitorUCCTI3FFULLULLULLPF3MCULLPF3(itk.ITKCommonBasePython.itkLightObject):
    r"""


    Abstract interface for a visitor class that can visit the cells in a
    Mesh.

    Define the abstract interface for a visitor class that can visit the
    cells in a Mesh. This follows the Visitor Design Pattern. To make this
    class easier to use, the CellInterfaceVisitorImplementation is
    provided as a templated class to implement the pure virtual functions
    of CellInterfaceVisitor. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    VisitFromCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceVisitorUCCTI3FFULLULLULLPF3MCULLPF3_VisitFromCell)
    GetCellTopologyId = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceVisitorUCCTI3FFULLULLULLPF3MCULLPF3_GetCellTopologyId)
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellInterfaceVisitorUCCTI3FFULLULLULLPF3MCULLPF3
    cast = _swig_new_static_method(_itkMeshBasePython.itkCellInterfaceVisitorUCCTI3FFULLULLULLPF3MCULLPF3_cast)

# Register itkCellInterfaceVisitorUCCTI3FFULLULLULLPF3MCULLPF3 in _itkMeshBasePython:
_itkMeshBasePython.itkCellInterfaceVisitorUCCTI3FFULLULLULLPF3MCULLPF3_swigregister(itkCellInterfaceVisitorUCCTI3FFULLULLULLPF3MCULLPF3)
itkCellInterfaceVisitorUCCTI3FFULLULLULLPF3MCULLPF3_cast = _itkMeshBasePython.itkCellInterfaceVisitorUCCTI3FFULLULLULLPF3MCULLPF3_cast

class itkCellInterfaceVisitorUSCTI2FFULLULLULLPF2MCULLPF2(itk.ITKCommonBasePython.itkLightObject):
    r"""


    Abstract interface for a visitor class that can visit the cells in a
    Mesh.

    Define the abstract interface for a visitor class that can visit the
    cells in a Mesh. This follows the Visitor Design Pattern. To make this
    class easier to use, the CellInterfaceVisitorImplementation is
    provided as a templated class to implement the pure virtual functions
    of CellInterfaceVisitor. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    VisitFromCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceVisitorUSCTI2FFULLULLULLPF2MCULLPF2_VisitFromCell)
    GetCellTopologyId = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceVisitorUSCTI2FFULLULLULLPF2MCULLPF2_GetCellTopologyId)
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellInterfaceVisitorUSCTI2FFULLULLULLPF2MCULLPF2
    cast = _swig_new_static_method(_itkMeshBasePython.itkCellInterfaceVisitorUSCTI2FFULLULLULLPF2MCULLPF2_cast)

# Register itkCellInterfaceVisitorUSCTI2FFULLULLULLPF2MCULLPF2 in _itkMeshBasePython:
_itkMeshBasePython.itkCellInterfaceVisitorUSCTI2FFULLULLULLPF2MCULLPF2_swigregister(itkCellInterfaceVisitorUSCTI2FFULLULLULLPF2MCULLPF2)
itkCellInterfaceVisitorUSCTI2FFULLULLULLPF2MCULLPF2_cast = _itkMeshBasePython.itkCellInterfaceVisitorUSCTI2FFULLULLULLPF2MCULLPF2_cast

class itkCellInterfaceVisitorUSCTI3FFULLULLULLPF3MCULLPF3(itk.ITKCommonBasePython.itkLightObject):
    r"""


    Abstract interface for a visitor class that can visit the cells in a
    Mesh.

    Define the abstract interface for a visitor class that can visit the
    cells in a Mesh. This follows the Visitor Design Pattern. To make this
    class easier to use, the CellInterfaceVisitorImplementation is
    provided as a templated class to implement the pure virtual functions
    of CellInterfaceVisitor. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    VisitFromCell = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceVisitorUSCTI3FFULLULLULLPF3MCULLPF3_VisitFromCell)
    GetCellTopologyId = _swig_new_instance_method(_itkMeshBasePython.itkCellInterfaceVisitorUSCTI3FFULLULLULLPF3MCULLPF3_GetCellTopologyId)
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellInterfaceVisitorUSCTI3FFULLULLULLPF3MCULLPF3
    cast = _swig_new_static_method(_itkMeshBasePython.itkCellInterfaceVisitorUSCTI3FFULLULLULLPF3MCULLPF3_cast)

# Register itkCellInterfaceVisitorUSCTI3FFULLULLULLPF3MCULLPF3 in _itkMeshBasePython:
_itkMeshBasePython.itkCellInterfaceVisitorUSCTI3FFULLULLULLPF3MCULLPF3_swigregister(itkCellInterfaceVisitorUSCTI3FFULLULLULLPF3MCULLPF3)
itkCellInterfaceVisitorUSCTI3FFULLULLULLPF3MCULLPF3_cast = _itkMeshBasePython.itkCellInterfaceVisitorUSCTI3FFULLULLULLPF3MCULLPF3_cast

class itkCellTraitsInfo2FFULLULLULLPF2MCULLPF2(object):
    r"""Proxy of C++ itkCellTraitsInfo2FFULLULLULLPF2MCULLPF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkCellTraitsInfo2FFULLULLULLPF2MCULLPF2 self) -> itkCellTraitsInfo2FFULLULLULLPF2MCULLPF2
        __init__(itkCellTraitsInfo2FFULLULLULLPF2MCULLPF2 self, itkCellTraitsInfo2FFULLULLULLPF2MCULLPF2 arg0) -> itkCellTraitsInfo2FFULLULLULLPF2MCULLPF2
        """
        _itkMeshBasePython.itkCellTraitsInfo2FFULLULLULLPF2MCULLPF2_swiginit(self, _itkMeshBasePython.new_itkCellTraitsInfo2FFULLULLULLPF2MCULLPF2(*args))
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellTraitsInfo2FFULLULLULLPF2MCULLPF2

# Register itkCellTraitsInfo2FFULLULLULLPF2MCULLPF2 in _itkMeshBasePython:
_itkMeshBasePython.itkCellTraitsInfo2FFULLULLULLPF2MCULLPF2_swigregister(itkCellTraitsInfo2FFULLULLULLPF2MCULLPF2)

class itkCellTraitsInfo2FFULLULLULLPF2VCULLPF2(object):
    r"""Proxy of C++ itkCellTraitsInfo2FFULLULLULLPF2VCULLPF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkCellTraitsInfo2FFULLULLULLPF2VCULLPF2 self) -> itkCellTraitsInfo2FFULLULLULLPF2VCULLPF2
        __init__(itkCellTraitsInfo2FFULLULLULLPF2VCULLPF2 self, itkCellTraitsInfo2FFULLULLULLPF2VCULLPF2 arg0) -> itkCellTraitsInfo2FFULLULLULLPF2VCULLPF2
        """
        _itkMeshBasePython.itkCellTraitsInfo2FFULLULLULLPF2VCULLPF2_swiginit(self, _itkMeshBasePython.new_itkCellTraitsInfo2FFULLULLULLPF2VCULLPF2(*args))
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellTraitsInfo2FFULLULLULLPF2VCULLPF2

# Register itkCellTraitsInfo2FFULLULLULLPF2VCULLPF2 in _itkMeshBasePython:
_itkMeshBasePython.itkCellTraitsInfo2FFULLULLULLPF2VCULLPF2_swigregister(itkCellTraitsInfo2FFULLULLULLPF2VCULLPF2)

class itkCellTraitsInfo3FFULLULLULLPF3MCULLPF3(object):
    r"""Proxy of C++ itkCellTraitsInfo3FFULLULLULLPF3MCULLPF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkCellTraitsInfo3FFULLULLULLPF3MCULLPF3 self) -> itkCellTraitsInfo3FFULLULLULLPF3MCULLPF3
        __init__(itkCellTraitsInfo3FFULLULLULLPF3MCULLPF3 self, itkCellTraitsInfo3FFULLULLULLPF3MCULLPF3 arg0) -> itkCellTraitsInfo3FFULLULLULLPF3MCULLPF3
        """
        _itkMeshBasePython.itkCellTraitsInfo3FFULLULLULLPF3MCULLPF3_swiginit(self, _itkMeshBasePython.new_itkCellTraitsInfo3FFULLULLULLPF3MCULLPF3(*args))
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellTraitsInfo3FFULLULLULLPF3MCULLPF3

# Register itkCellTraitsInfo3FFULLULLULLPF3MCULLPF3 in _itkMeshBasePython:
_itkMeshBasePython.itkCellTraitsInfo3FFULLULLULLPF3MCULLPF3_swigregister(itkCellTraitsInfo3FFULLULLULLPF3MCULLPF3)

class itkCellTraitsInfo3FFULLULLULLPF3VCULLPF3(object):
    r"""Proxy of C++ itkCellTraitsInfo3FFULLULLULLPF3VCULLPF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkCellTraitsInfo3FFULLULLULLPF3VCULLPF3 self) -> itkCellTraitsInfo3FFULLULLULLPF3VCULLPF3
        __init__(itkCellTraitsInfo3FFULLULLULLPF3VCULLPF3 self, itkCellTraitsInfo3FFULLULLULLPF3VCULLPF3 arg0) -> itkCellTraitsInfo3FFULLULLULLPF3VCULLPF3
        """
        _itkMeshBasePython.itkCellTraitsInfo3FFULLULLULLPF3VCULLPF3_swiginit(self, _itkMeshBasePython.new_itkCellTraitsInfo3FFULLULLULLPF3VCULLPF3(*args))
    __swig_destroy__ = _itkMeshBasePython.delete_itkCellTraitsInfo3FFULLULLULLPF3VCULLPF3

# Register itkCellTraitsInfo3FFULLULLULLPF3VCULLPF3 in _itkMeshBasePython:
_itkMeshBasePython.itkCellTraitsInfo3FFULLULLULLPF3VCULLPF3_swigregister(itkCellTraitsInfo3FFULLULLULLPF3VCULLPF3)


def itkMapContainerULLCIDCTI2FFULLULLULLPF2MCULLPF2_New():
    return itkMapContainerULLCIDCTI2FFULLULLULLPF2MCULLPF2.New()

class itkMapContainerULLCIDCTI2FFULLULLULLPF2MCULLPF2(itk.ITKCommonBasePython.itkObject):
    r"""


    A wrapper of the STL "map" container.

    Define a front-end to the STL "map" container that conforms to the
    IndexedContainerInterface. This is a full-fleged Object, so there are
    events, modification time, debug, and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  A type that shall be used to index the container.
    It must have a < operator defined for ordering.

    TElement:  The element type stored in the container. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkMapContainerULLCIDCTI2FFULLULLULLPF2MCULLPF2 self) -> itkMapContainerULLCIDCTI2FFULLULLULLPF2MCULLPF2
        __init__(itkMapContainerULLCIDCTI2FFULLULLULLPF2MCULLPF2 self, std::less< unsigned long long > const & comp) -> itkMapContainerULLCIDCTI2FFULLULLULLPF2MCULLPF2


        A wrapper of the STL "map" container.

        Define a front-end to the STL "map" container that conforms to the
        IndexedContainerInterface. This is a full-fleged Object, so there are
        events, modification time, debug, and reference count information.

        Parameters:
        -----------

        TElementIdentifier:  A type that shall be used to index the container.
        It must have a < operator defined for ordering.

        TElement:  The element type stored in the container. 
        """
        _itkMeshBasePython.itkMapContainerULLCIDCTI2FFULLULLULLPF2MCULLPF2_swiginit(self, _itkMeshBasePython.new_itkMapContainerULLCIDCTI2FFULLULLULLPF2MCULLPF2(*args))
    __New_orig__ = _swig_new_static_method(_itkMeshBasePython.itkMapContainerULLCIDCTI2FFULLULLULLPF2MCULLPF2___New_orig__)
    Clone = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIDCTI2FFULLULLULLPF2MCULLPF2_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIDCTI2FFULLULLULLPF2MCULLPF2_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIDCTI2FFULLULLULLPF2MCULLPF2_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIDCTI2FFULLULLULLPF2MCULLPF2_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIDCTI2FFULLULLULLPF2MCULLPF2_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIDCTI2FFULLULLULLPF2MCULLPF2_GetElement)
    SetElement = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIDCTI2FFULLULLULLPF2MCULLPF2_SetElement)
    InsertElement = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIDCTI2FFULLULLULLPF2MCULLPF2_InsertElement)
    IndexExists = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIDCTI2FFULLULLULLPF2MCULLPF2_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIDCTI2FFULLULLULLPF2MCULLPF2_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIDCTI2FFULLULLULLPF2MCULLPF2_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIDCTI2FFULLULLULLPF2MCULLPF2_DeleteIndex)
    Size = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIDCTI2FFULLULLULLPF2MCULLPF2_Size)
    Reserve = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIDCTI2FFULLULLULLPF2MCULLPF2_Reserve)
    Squeeze = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIDCTI2FFULLULLULLPF2MCULLPF2_Squeeze)
    Initialize = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIDCTI2FFULLULLULLPF2MCULLPF2_Initialize)
    __swig_destroy__ = _itkMeshBasePython.delete_itkMapContainerULLCIDCTI2FFULLULLULLPF2MCULLPF2
    cast = _swig_new_static_method(_itkMeshBasePython.itkMapContainerULLCIDCTI2FFULLULLULLPF2MCULLPF2_cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerULLCIDCTI2FFULLULLULLPF2MCULLPF2

        Create a new object of the class itkMapContainerULLCIDCTI2FFULLULLULLPF2MCULLPF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULLCIDCTI2FFULLULLULLPF2MCULLPF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerULLCIDCTI2FFULLULLULLPF2MCULLPF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerULLCIDCTI2FFULLULLULLPF2MCULLPF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerULLCIDCTI2FFULLULLULLPF2MCULLPF2 in _itkMeshBasePython:
_itkMeshBasePython.itkMapContainerULLCIDCTI2FFULLULLULLPF2MCULLPF2_swigregister(itkMapContainerULLCIDCTI2FFULLULLULLPF2MCULLPF2)
itkMapContainerULLCIDCTI2FFULLULLULLPF2MCULLPF2___New_orig__ = _itkMeshBasePython.itkMapContainerULLCIDCTI2FFULLULLULLPF2MCULLPF2___New_orig__
itkMapContainerULLCIDCTI2FFULLULLULLPF2MCULLPF2_cast = _itkMeshBasePython.itkMapContainerULLCIDCTI2FFULLULLULLPF2MCULLPF2_cast


def itkMapContainerULLCIDCTI3FFULLULLULLPF3MCULLPF3_New():
    return itkMapContainerULLCIDCTI3FFULLULLULLPF3MCULLPF3.New()

class itkMapContainerULLCIDCTI3FFULLULLULLPF3MCULLPF3(itk.ITKCommonBasePython.itkObject):
    r"""


    A wrapper of the STL "map" container.

    Define a front-end to the STL "map" container that conforms to the
    IndexedContainerInterface. This is a full-fleged Object, so there are
    events, modification time, debug, and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  A type that shall be used to index the container.
    It must have a < operator defined for ordering.

    TElement:  The element type stored in the container. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkMapContainerULLCIDCTI3FFULLULLULLPF3MCULLPF3 self) -> itkMapContainerULLCIDCTI3FFULLULLULLPF3MCULLPF3
        __init__(itkMapContainerULLCIDCTI3FFULLULLULLPF3MCULLPF3 self, std::less< unsigned long long > const & comp) -> itkMapContainerULLCIDCTI3FFULLULLULLPF3MCULLPF3


        A wrapper of the STL "map" container.

        Define a front-end to the STL "map" container that conforms to the
        IndexedContainerInterface. This is a full-fleged Object, so there are
        events, modification time, debug, and reference count information.

        Parameters:
        -----------

        TElementIdentifier:  A type that shall be used to index the container.
        It must have a < operator defined for ordering.

        TElement:  The element type stored in the container. 
        """
        _itkMeshBasePython.itkMapContainerULLCIDCTI3FFULLULLULLPF3MCULLPF3_swiginit(self, _itkMeshBasePython.new_itkMapContainerULLCIDCTI3FFULLULLULLPF3MCULLPF3(*args))
    __New_orig__ = _swig_new_static_method(_itkMeshBasePython.itkMapContainerULLCIDCTI3FFULLULLULLPF3MCULLPF3___New_orig__)
    Clone = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIDCTI3FFULLULLULLPF3MCULLPF3_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIDCTI3FFULLULLULLPF3MCULLPF3_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIDCTI3FFULLULLULLPF3MCULLPF3_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIDCTI3FFULLULLULLPF3MCULLPF3_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIDCTI3FFULLULLULLPF3MCULLPF3_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIDCTI3FFULLULLULLPF3MCULLPF3_GetElement)
    SetElement = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIDCTI3FFULLULLULLPF3MCULLPF3_SetElement)
    InsertElement = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIDCTI3FFULLULLULLPF3MCULLPF3_InsertElement)
    IndexExists = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIDCTI3FFULLULLULLPF3MCULLPF3_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIDCTI3FFULLULLULLPF3MCULLPF3_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIDCTI3FFULLULLULLPF3MCULLPF3_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIDCTI3FFULLULLULLPF3MCULLPF3_DeleteIndex)
    Size = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIDCTI3FFULLULLULLPF3MCULLPF3_Size)
    Reserve = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIDCTI3FFULLULLULLPF3MCULLPF3_Reserve)
    Squeeze = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIDCTI3FFULLULLULLPF3MCULLPF3_Squeeze)
    Initialize = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIDCTI3FFULLULLULLPF3MCULLPF3_Initialize)
    __swig_destroy__ = _itkMeshBasePython.delete_itkMapContainerULLCIDCTI3FFULLULLULLPF3MCULLPF3
    cast = _swig_new_static_method(_itkMeshBasePython.itkMapContainerULLCIDCTI3FFULLULLULLPF3MCULLPF3_cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerULLCIDCTI3FFULLULLULLPF3MCULLPF3

        Create a new object of the class itkMapContainerULLCIDCTI3FFULLULLULLPF3MCULLPF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULLCIDCTI3FFULLULLULLPF3MCULLPF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerULLCIDCTI3FFULLULLULLPF3MCULLPF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerULLCIDCTI3FFULLULLULLPF3MCULLPF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerULLCIDCTI3FFULLULLULLPF3MCULLPF3 in _itkMeshBasePython:
_itkMeshBasePython.itkMapContainerULLCIDCTI3FFULLULLULLPF3MCULLPF3_swigregister(itkMapContainerULLCIDCTI3FFULLULLULLPF3MCULLPF3)
itkMapContainerULLCIDCTI3FFULLULLULLPF3MCULLPF3___New_orig__ = _itkMeshBasePython.itkMapContainerULLCIDCTI3FFULLULLULLPF3MCULLPF3___New_orig__
itkMapContainerULLCIDCTI3FFULLULLULLPF3MCULLPF3_cast = _itkMeshBasePython.itkMapContainerULLCIDCTI3FFULLULLULLPF3MCULLPF3_cast


def itkMapContainerULLCIFCTI2FFULLULLULLPF2MCULLPF2_New():
    return itkMapContainerULLCIFCTI2FFULLULLULLPF2MCULLPF2.New()

class itkMapContainerULLCIFCTI2FFULLULLULLPF2MCULLPF2(itk.ITKCommonBasePython.itkObject):
    r"""


    A wrapper of the STL "map" container.

    Define a front-end to the STL "map" container that conforms to the
    IndexedContainerInterface. This is a full-fleged Object, so there are
    events, modification time, debug, and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  A type that shall be used to index the container.
    It must have a < operator defined for ordering.

    TElement:  The element type stored in the container. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkMapContainerULLCIFCTI2FFULLULLULLPF2MCULLPF2 self) -> itkMapContainerULLCIFCTI2FFULLULLULLPF2MCULLPF2
        __init__(itkMapContainerULLCIFCTI2FFULLULLULLPF2MCULLPF2 self, std::less< unsigned long long > const & comp) -> itkMapContainerULLCIFCTI2FFULLULLULLPF2MCULLPF2


        A wrapper of the STL "map" container.

        Define a front-end to the STL "map" container that conforms to the
        IndexedContainerInterface. This is a full-fleged Object, so there are
        events, modification time, debug, and reference count information.

        Parameters:
        -----------

        TElementIdentifier:  A type that shall be used to index the container.
        It must have a < operator defined for ordering.

        TElement:  The element type stored in the container. 
        """
        _itkMeshBasePython.itkMapContainerULLCIFCTI2FFULLULLULLPF2MCULLPF2_swiginit(self, _itkMeshBasePython.new_itkMapContainerULLCIFCTI2FFULLULLULLPF2MCULLPF2(*args))
    __New_orig__ = _swig_new_static_method(_itkMeshBasePython.itkMapContainerULLCIFCTI2FFULLULLULLPF2MCULLPF2___New_orig__)
    Clone = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIFCTI2FFULLULLULLPF2MCULLPF2_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIFCTI2FFULLULLULLPF2MCULLPF2_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIFCTI2FFULLULLULLPF2MCULLPF2_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIFCTI2FFULLULLULLPF2MCULLPF2_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIFCTI2FFULLULLULLPF2MCULLPF2_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIFCTI2FFULLULLULLPF2MCULLPF2_GetElement)
    SetElement = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIFCTI2FFULLULLULLPF2MCULLPF2_SetElement)
    InsertElement = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIFCTI2FFULLULLULLPF2MCULLPF2_InsertElement)
    IndexExists = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIFCTI2FFULLULLULLPF2MCULLPF2_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIFCTI2FFULLULLULLPF2MCULLPF2_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIFCTI2FFULLULLULLPF2MCULLPF2_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIFCTI2FFULLULLULLPF2MCULLPF2_DeleteIndex)
    Size = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIFCTI2FFULLULLULLPF2MCULLPF2_Size)
    Reserve = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIFCTI2FFULLULLULLPF2MCULLPF2_Reserve)
    Squeeze = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIFCTI2FFULLULLULLPF2MCULLPF2_Squeeze)
    Initialize = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIFCTI2FFULLULLULLPF2MCULLPF2_Initialize)
    __swig_destroy__ = _itkMeshBasePython.delete_itkMapContainerULLCIFCTI2FFULLULLULLPF2MCULLPF2
    cast = _swig_new_static_method(_itkMeshBasePython.itkMapContainerULLCIFCTI2FFULLULLULLPF2MCULLPF2_cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerULLCIFCTI2FFULLULLULLPF2MCULLPF2

        Create a new object of the class itkMapContainerULLCIFCTI2FFULLULLULLPF2MCULLPF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULLCIFCTI2FFULLULLULLPF2MCULLPF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerULLCIFCTI2FFULLULLULLPF2MCULLPF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerULLCIFCTI2FFULLULLULLPF2MCULLPF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerULLCIFCTI2FFULLULLULLPF2MCULLPF2 in _itkMeshBasePython:
_itkMeshBasePython.itkMapContainerULLCIFCTI2FFULLULLULLPF2MCULLPF2_swigregister(itkMapContainerULLCIFCTI2FFULLULLULLPF2MCULLPF2)
itkMapContainerULLCIFCTI2FFULLULLULLPF2MCULLPF2___New_orig__ = _itkMeshBasePython.itkMapContainerULLCIFCTI2FFULLULLULLPF2MCULLPF2___New_orig__
itkMapContainerULLCIFCTI2FFULLULLULLPF2MCULLPF2_cast = _itkMeshBasePython.itkMapContainerULLCIFCTI2FFULLULLULLPF2MCULLPF2_cast


def itkMapContainerULLCIFCTI3FFULLULLULLPF3MCULLPF3_New():
    return itkMapContainerULLCIFCTI3FFULLULLULLPF3MCULLPF3.New()

class itkMapContainerULLCIFCTI3FFULLULLULLPF3MCULLPF3(itk.ITKCommonBasePython.itkObject):
    r"""


    A wrapper of the STL "map" container.

    Define a front-end to the STL "map" container that conforms to the
    IndexedContainerInterface. This is a full-fleged Object, so there are
    events, modification time, debug, and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  A type that shall be used to index the container.
    It must have a < operator defined for ordering.

    TElement:  The element type stored in the container. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkMapContainerULLCIFCTI3FFULLULLULLPF3MCULLPF3 self) -> itkMapContainerULLCIFCTI3FFULLULLULLPF3MCULLPF3
        __init__(itkMapContainerULLCIFCTI3FFULLULLULLPF3MCULLPF3 self, std::less< unsigned long long > const & comp) -> itkMapContainerULLCIFCTI3FFULLULLULLPF3MCULLPF3


        A wrapper of the STL "map" container.

        Define a front-end to the STL "map" container that conforms to the
        IndexedContainerInterface. This is a full-fleged Object, so there are
        events, modification time, debug, and reference count information.

        Parameters:
        -----------

        TElementIdentifier:  A type that shall be used to index the container.
        It must have a < operator defined for ordering.

        TElement:  The element type stored in the container. 
        """
        _itkMeshBasePython.itkMapContainerULLCIFCTI3FFULLULLULLPF3MCULLPF3_swiginit(self, _itkMeshBasePython.new_itkMapContainerULLCIFCTI3FFULLULLULLPF3MCULLPF3(*args))
    __New_orig__ = _swig_new_static_method(_itkMeshBasePython.itkMapContainerULLCIFCTI3FFULLULLULLPF3MCULLPF3___New_orig__)
    Clone = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIFCTI3FFULLULLULLPF3MCULLPF3_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIFCTI3FFULLULLULLPF3MCULLPF3_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIFCTI3FFULLULLULLPF3MCULLPF3_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIFCTI3FFULLULLULLPF3MCULLPF3_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIFCTI3FFULLULLULLPF3MCULLPF3_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIFCTI3FFULLULLULLPF3MCULLPF3_GetElement)
    SetElement = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIFCTI3FFULLULLULLPF3MCULLPF3_SetElement)
    InsertElement = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIFCTI3FFULLULLULLPF3MCULLPF3_InsertElement)
    IndexExists = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIFCTI3FFULLULLULLPF3MCULLPF3_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIFCTI3FFULLULLULLPF3MCULLPF3_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIFCTI3FFULLULLULLPF3MCULLPF3_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIFCTI3FFULLULLULLPF3MCULLPF3_DeleteIndex)
    Size = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIFCTI3FFULLULLULLPF3MCULLPF3_Size)
    Reserve = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIFCTI3FFULLULLULLPF3MCULLPF3_Reserve)
    Squeeze = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIFCTI3FFULLULLULLPF3MCULLPF3_Squeeze)
    Initialize = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIFCTI3FFULLULLULLPF3MCULLPF3_Initialize)
    __swig_destroy__ = _itkMeshBasePython.delete_itkMapContainerULLCIFCTI3FFULLULLULLPF3MCULLPF3
    cast = _swig_new_static_method(_itkMeshBasePython.itkMapContainerULLCIFCTI3FFULLULLULLPF3MCULLPF3_cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerULLCIFCTI3FFULLULLULLPF3MCULLPF3

        Create a new object of the class itkMapContainerULLCIFCTI3FFULLULLULLPF3MCULLPF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULLCIFCTI3FFULLULLULLPF3MCULLPF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerULLCIFCTI3FFULLULLULLPF3MCULLPF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerULLCIFCTI3FFULLULLULLPF3MCULLPF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerULLCIFCTI3FFULLULLULLPF3MCULLPF3 in _itkMeshBasePython:
_itkMeshBasePython.itkMapContainerULLCIFCTI3FFULLULLULLPF3MCULLPF3_swigregister(itkMapContainerULLCIFCTI3FFULLULLULLPF3MCULLPF3)
itkMapContainerULLCIFCTI3FFULLULLULLPF3MCULLPF3___New_orig__ = _itkMeshBasePython.itkMapContainerULLCIFCTI3FFULLULLULLPF3MCULLPF3___New_orig__
itkMapContainerULLCIFCTI3FFULLULLULLPF3MCULLPF3_cast = _itkMeshBasePython.itkMapContainerULLCIFCTI3FFULLULLULLPF3MCULLPF3_cast


def itkMapContainerULLCISSCTI2FFULLULLULLPF2MCULLPF2_New():
    return itkMapContainerULLCISSCTI2FFULLULLULLPF2MCULLPF2.New()

class itkMapContainerULLCISSCTI2FFULLULLULLPF2MCULLPF2(itk.ITKCommonBasePython.itkObject):
    r"""


    A wrapper of the STL "map" container.

    Define a front-end to the STL "map" container that conforms to the
    IndexedContainerInterface. This is a full-fleged Object, so there are
    events, modification time, debug, and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  A type that shall be used to index the container.
    It must have a < operator defined for ordering.

    TElement:  The element type stored in the container. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkMapContainerULLCISSCTI2FFULLULLULLPF2MCULLPF2 self) -> itkMapContainerULLCISSCTI2FFULLULLULLPF2MCULLPF2
        __init__(itkMapContainerULLCISSCTI2FFULLULLULLPF2MCULLPF2 self, std::less< unsigned long long > const & comp) -> itkMapContainerULLCISSCTI2FFULLULLULLPF2MCULLPF2


        A wrapper of the STL "map" container.

        Define a front-end to the STL "map" container that conforms to the
        IndexedContainerInterface. This is a full-fleged Object, so there are
        events, modification time, debug, and reference count information.

        Parameters:
        -----------

        TElementIdentifier:  A type that shall be used to index the container.
        It must have a < operator defined for ordering.

        TElement:  The element type stored in the container. 
        """
        _itkMeshBasePython.itkMapContainerULLCISSCTI2FFULLULLULLPF2MCULLPF2_swiginit(self, _itkMeshBasePython.new_itkMapContainerULLCISSCTI2FFULLULLULLPF2MCULLPF2(*args))
    __New_orig__ = _swig_new_static_method(_itkMeshBasePython.itkMapContainerULLCISSCTI2FFULLULLULLPF2MCULLPF2___New_orig__)
    Clone = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCISSCTI2FFULLULLULLPF2MCULLPF2_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCISSCTI2FFULLULLULLPF2MCULLPF2_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCISSCTI2FFULLULLULLPF2MCULLPF2_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCISSCTI2FFULLULLULLPF2MCULLPF2_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCISSCTI2FFULLULLULLPF2MCULLPF2_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCISSCTI2FFULLULLULLPF2MCULLPF2_GetElement)
    SetElement = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCISSCTI2FFULLULLULLPF2MCULLPF2_SetElement)
    InsertElement = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCISSCTI2FFULLULLULLPF2MCULLPF2_InsertElement)
    IndexExists = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCISSCTI2FFULLULLULLPF2MCULLPF2_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCISSCTI2FFULLULLULLPF2MCULLPF2_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCISSCTI2FFULLULLULLPF2MCULLPF2_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCISSCTI2FFULLULLULLPF2MCULLPF2_DeleteIndex)
    Size = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCISSCTI2FFULLULLULLPF2MCULLPF2_Size)
    Reserve = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCISSCTI2FFULLULLULLPF2MCULLPF2_Reserve)
    Squeeze = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCISSCTI2FFULLULLULLPF2MCULLPF2_Squeeze)
    Initialize = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCISSCTI2FFULLULLULLPF2MCULLPF2_Initialize)
    __swig_destroy__ = _itkMeshBasePython.delete_itkMapContainerULLCISSCTI2FFULLULLULLPF2MCULLPF2
    cast = _swig_new_static_method(_itkMeshBasePython.itkMapContainerULLCISSCTI2FFULLULLULLPF2MCULLPF2_cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerULLCISSCTI2FFULLULLULLPF2MCULLPF2

        Create a new object of the class itkMapContainerULLCISSCTI2FFULLULLULLPF2MCULLPF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULLCISSCTI2FFULLULLULLPF2MCULLPF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerULLCISSCTI2FFULLULLULLPF2MCULLPF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerULLCISSCTI2FFULLULLULLPF2MCULLPF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerULLCISSCTI2FFULLULLULLPF2MCULLPF2 in _itkMeshBasePython:
_itkMeshBasePython.itkMapContainerULLCISSCTI2FFULLULLULLPF2MCULLPF2_swigregister(itkMapContainerULLCISSCTI2FFULLULLULLPF2MCULLPF2)
itkMapContainerULLCISSCTI2FFULLULLULLPF2MCULLPF2___New_orig__ = _itkMeshBasePython.itkMapContainerULLCISSCTI2FFULLULLULLPF2MCULLPF2___New_orig__
itkMapContainerULLCISSCTI2FFULLULLULLPF2MCULLPF2_cast = _itkMeshBasePython.itkMapContainerULLCISSCTI2FFULLULLULLPF2MCULLPF2_cast


def itkMapContainerULLCISSCTI3FFULLULLULLPF3MCULLPF3_New():
    return itkMapContainerULLCISSCTI3FFULLULLULLPF3MCULLPF3.New()

class itkMapContainerULLCISSCTI3FFULLULLULLPF3MCULLPF3(itk.ITKCommonBasePython.itkObject):
    r"""


    A wrapper of the STL "map" container.

    Define a front-end to the STL "map" container that conforms to the
    IndexedContainerInterface. This is a full-fleged Object, so there are
    events, modification time, debug, and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  A type that shall be used to index the container.
    It must have a < operator defined for ordering.

    TElement:  The element type stored in the container. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkMapContainerULLCISSCTI3FFULLULLULLPF3MCULLPF3 self) -> itkMapContainerULLCISSCTI3FFULLULLULLPF3MCULLPF3
        __init__(itkMapContainerULLCISSCTI3FFULLULLULLPF3MCULLPF3 self, std::less< unsigned long long > const & comp) -> itkMapContainerULLCISSCTI3FFULLULLULLPF3MCULLPF3


        A wrapper of the STL "map" container.

        Define a front-end to the STL "map" container that conforms to the
        IndexedContainerInterface. This is a full-fleged Object, so there are
        events, modification time, debug, and reference count information.

        Parameters:
        -----------

        TElementIdentifier:  A type that shall be used to index the container.
        It must have a < operator defined for ordering.

        TElement:  The element type stored in the container. 
        """
        _itkMeshBasePython.itkMapContainerULLCISSCTI3FFULLULLULLPF3MCULLPF3_swiginit(self, _itkMeshBasePython.new_itkMapContainerULLCISSCTI3FFULLULLULLPF3MCULLPF3(*args))
    __New_orig__ = _swig_new_static_method(_itkMeshBasePython.itkMapContainerULLCISSCTI3FFULLULLULLPF3MCULLPF3___New_orig__)
    Clone = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCISSCTI3FFULLULLULLPF3MCULLPF3_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCISSCTI3FFULLULLULLPF3MCULLPF3_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCISSCTI3FFULLULLULLPF3MCULLPF3_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCISSCTI3FFULLULLULLPF3MCULLPF3_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCISSCTI3FFULLULLULLPF3MCULLPF3_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCISSCTI3FFULLULLULLPF3MCULLPF3_GetElement)
    SetElement = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCISSCTI3FFULLULLULLPF3MCULLPF3_SetElement)
    InsertElement = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCISSCTI3FFULLULLULLPF3MCULLPF3_InsertElement)
    IndexExists = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCISSCTI3FFULLULLULLPF3MCULLPF3_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCISSCTI3FFULLULLULLPF3MCULLPF3_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCISSCTI3FFULLULLULLPF3MCULLPF3_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCISSCTI3FFULLULLULLPF3MCULLPF3_DeleteIndex)
    Size = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCISSCTI3FFULLULLULLPF3MCULLPF3_Size)
    Reserve = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCISSCTI3FFULLULLULLPF3MCULLPF3_Reserve)
    Squeeze = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCISSCTI3FFULLULLULLPF3MCULLPF3_Squeeze)
    Initialize = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCISSCTI3FFULLULLULLPF3MCULLPF3_Initialize)
    __swig_destroy__ = _itkMeshBasePython.delete_itkMapContainerULLCISSCTI3FFULLULLULLPF3MCULLPF3
    cast = _swig_new_static_method(_itkMeshBasePython.itkMapContainerULLCISSCTI3FFULLULLULLPF3MCULLPF3_cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerULLCISSCTI3FFULLULLULLPF3MCULLPF3

        Create a new object of the class itkMapContainerULLCISSCTI3FFULLULLULLPF3MCULLPF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULLCISSCTI3FFULLULLULLPF3MCULLPF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerULLCISSCTI3FFULLULLULLPF3MCULLPF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerULLCISSCTI3FFULLULLULLPF3MCULLPF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerULLCISSCTI3FFULLULLULLPF3MCULLPF3 in _itkMeshBasePython:
_itkMeshBasePython.itkMapContainerULLCISSCTI3FFULLULLULLPF3MCULLPF3_swigregister(itkMapContainerULLCISSCTI3FFULLULLULLPF3MCULLPF3)
itkMapContainerULLCISSCTI3FFULLULLULLPF3MCULLPF3___New_orig__ = _itkMeshBasePython.itkMapContainerULLCISSCTI3FFULLULLULLPF3MCULLPF3___New_orig__
itkMapContainerULLCISSCTI3FFULLULLULLPF3MCULLPF3_cast = _itkMeshBasePython.itkMapContainerULLCISSCTI3FFULLULLULLPF3MCULLPF3_cast


def itkMapContainerULLCIUCCTI2FFULLULLULLPF2MCULLPF2_New():
    return itkMapContainerULLCIUCCTI2FFULLULLULLPF2MCULLPF2.New()

class itkMapContainerULLCIUCCTI2FFULLULLULLPF2MCULLPF2(itk.ITKCommonBasePython.itkObject):
    r"""


    A wrapper of the STL "map" container.

    Define a front-end to the STL "map" container that conforms to the
    IndexedContainerInterface. This is a full-fleged Object, so there are
    events, modification time, debug, and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  A type that shall be used to index the container.
    It must have a < operator defined for ordering.

    TElement:  The element type stored in the container. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkMapContainerULLCIUCCTI2FFULLULLULLPF2MCULLPF2 self) -> itkMapContainerULLCIUCCTI2FFULLULLULLPF2MCULLPF2
        __init__(itkMapContainerULLCIUCCTI2FFULLULLULLPF2MCULLPF2 self, std::less< unsigned long long > const & comp) -> itkMapContainerULLCIUCCTI2FFULLULLULLPF2MCULLPF2


        A wrapper of the STL "map" container.

        Define a front-end to the STL "map" container that conforms to the
        IndexedContainerInterface. This is a full-fleged Object, so there are
        events, modification time, debug, and reference count information.

        Parameters:
        -----------

        TElementIdentifier:  A type that shall be used to index the container.
        It must have a < operator defined for ordering.

        TElement:  The element type stored in the container. 
        """
        _itkMeshBasePython.itkMapContainerULLCIUCCTI2FFULLULLULLPF2MCULLPF2_swiginit(self, _itkMeshBasePython.new_itkMapContainerULLCIUCCTI2FFULLULLULLPF2MCULLPF2(*args))
    __New_orig__ = _swig_new_static_method(_itkMeshBasePython.itkMapContainerULLCIUCCTI2FFULLULLULLPF2MCULLPF2___New_orig__)
    Clone = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUCCTI2FFULLULLULLPF2MCULLPF2_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUCCTI2FFULLULLULLPF2MCULLPF2_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUCCTI2FFULLULLULLPF2MCULLPF2_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUCCTI2FFULLULLULLPF2MCULLPF2_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUCCTI2FFULLULLULLPF2MCULLPF2_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUCCTI2FFULLULLULLPF2MCULLPF2_GetElement)
    SetElement = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUCCTI2FFULLULLULLPF2MCULLPF2_SetElement)
    InsertElement = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUCCTI2FFULLULLULLPF2MCULLPF2_InsertElement)
    IndexExists = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUCCTI2FFULLULLULLPF2MCULLPF2_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUCCTI2FFULLULLULLPF2MCULLPF2_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUCCTI2FFULLULLULLPF2MCULLPF2_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUCCTI2FFULLULLULLPF2MCULLPF2_DeleteIndex)
    Size = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUCCTI2FFULLULLULLPF2MCULLPF2_Size)
    Reserve = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUCCTI2FFULLULLULLPF2MCULLPF2_Reserve)
    Squeeze = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUCCTI2FFULLULLULLPF2MCULLPF2_Squeeze)
    Initialize = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUCCTI2FFULLULLULLPF2MCULLPF2_Initialize)
    __swig_destroy__ = _itkMeshBasePython.delete_itkMapContainerULLCIUCCTI2FFULLULLULLPF2MCULLPF2
    cast = _swig_new_static_method(_itkMeshBasePython.itkMapContainerULLCIUCCTI2FFULLULLULLPF2MCULLPF2_cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerULLCIUCCTI2FFULLULLULLPF2MCULLPF2

        Create a new object of the class itkMapContainerULLCIUCCTI2FFULLULLULLPF2MCULLPF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULLCIUCCTI2FFULLULLULLPF2MCULLPF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerULLCIUCCTI2FFULLULLULLPF2MCULLPF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerULLCIUCCTI2FFULLULLULLPF2MCULLPF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerULLCIUCCTI2FFULLULLULLPF2MCULLPF2 in _itkMeshBasePython:
_itkMeshBasePython.itkMapContainerULLCIUCCTI2FFULLULLULLPF2MCULLPF2_swigregister(itkMapContainerULLCIUCCTI2FFULLULLULLPF2MCULLPF2)
itkMapContainerULLCIUCCTI2FFULLULLULLPF2MCULLPF2___New_orig__ = _itkMeshBasePython.itkMapContainerULLCIUCCTI2FFULLULLULLPF2MCULLPF2___New_orig__
itkMapContainerULLCIUCCTI2FFULLULLULLPF2MCULLPF2_cast = _itkMeshBasePython.itkMapContainerULLCIUCCTI2FFULLULLULLPF2MCULLPF2_cast


def itkMapContainerULLCIUCCTI3FFULLULLULLPF3MCULLPF3_New():
    return itkMapContainerULLCIUCCTI3FFULLULLULLPF3MCULLPF3.New()

class itkMapContainerULLCIUCCTI3FFULLULLULLPF3MCULLPF3(itk.ITKCommonBasePython.itkObject):
    r"""


    A wrapper of the STL "map" container.

    Define a front-end to the STL "map" container that conforms to the
    IndexedContainerInterface. This is a full-fleged Object, so there are
    events, modification time, debug, and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  A type that shall be used to index the container.
    It must have a < operator defined for ordering.

    TElement:  The element type stored in the container. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkMapContainerULLCIUCCTI3FFULLULLULLPF3MCULLPF3 self) -> itkMapContainerULLCIUCCTI3FFULLULLULLPF3MCULLPF3
        __init__(itkMapContainerULLCIUCCTI3FFULLULLULLPF3MCULLPF3 self, std::less< unsigned long long > const & comp) -> itkMapContainerULLCIUCCTI3FFULLULLULLPF3MCULLPF3


        A wrapper of the STL "map" container.

        Define a front-end to the STL "map" container that conforms to the
        IndexedContainerInterface. This is a full-fleged Object, so there are
        events, modification time, debug, and reference count information.

        Parameters:
        -----------

        TElementIdentifier:  A type that shall be used to index the container.
        It must have a < operator defined for ordering.

        TElement:  The element type stored in the container. 
        """
        _itkMeshBasePython.itkMapContainerULLCIUCCTI3FFULLULLULLPF3MCULLPF3_swiginit(self, _itkMeshBasePython.new_itkMapContainerULLCIUCCTI3FFULLULLULLPF3MCULLPF3(*args))
    __New_orig__ = _swig_new_static_method(_itkMeshBasePython.itkMapContainerULLCIUCCTI3FFULLULLULLPF3MCULLPF3___New_orig__)
    Clone = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUCCTI3FFULLULLULLPF3MCULLPF3_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUCCTI3FFULLULLULLPF3MCULLPF3_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUCCTI3FFULLULLULLPF3MCULLPF3_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUCCTI3FFULLULLULLPF3MCULLPF3_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUCCTI3FFULLULLULLPF3MCULLPF3_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUCCTI3FFULLULLULLPF3MCULLPF3_GetElement)
    SetElement = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUCCTI3FFULLULLULLPF3MCULLPF3_SetElement)
    InsertElement = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUCCTI3FFULLULLULLPF3MCULLPF3_InsertElement)
    IndexExists = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUCCTI3FFULLULLULLPF3MCULLPF3_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUCCTI3FFULLULLULLPF3MCULLPF3_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUCCTI3FFULLULLULLPF3MCULLPF3_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUCCTI3FFULLULLULLPF3MCULLPF3_DeleteIndex)
    Size = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUCCTI3FFULLULLULLPF3MCULLPF3_Size)
    Reserve = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUCCTI3FFULLULLULLPF3MCULLPF3_Reserve)
    Squeeze = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUCCTI3FFULLULLULLPF3MCULLPF3_Squeeze)
    Initialize = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUCCTI3FFULLULLULLPF3MCULLPF3_Initialize)
    __swig_destroy__ = _itkMeshBasePython.delete_itkMapContainerULLCIUCCTI3FFULLULLULLPF3MCULLPF3
    cast = _swig_new_static_method(_itkMeshBasePython.itkMapContainerULLCIUCCTI3FFULLULLULLPF3MCULLPF3_cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerULLCIUCCTI3FFULLULLULLPF3MCULLPF3

        Create a new object of the class itkMapContainerULLCIUCCTI3FFULLULLULLPF3MCULLPF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULLCIUCCTI3FFULLULLULLPF3MCULLPF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerULLCIUCCTI3FFULLULLULLPF3MCULLPF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerULLCIUCCTI3FFULLULLULLPF3MCULLPF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerULLCIUCCTI3FFULLULLULLPF3MCULLPF3 in _itkMeshBasePython:
_itkMeshBasePython.itkMapContainerULLCIUCCTI3FFULLULLULLPF3MCULLPF3_swigregister(itkMapContainerULLCIUCCTI3FFULLULLULLPF3MCULLPF3)
itkMapContainerULLCIUCCTI3FFULLULLULLPF3MCULLPF3___New_orig__ = _itkMeshBasePython.itkMapContainerULLCIUCCTI3FFULLULLULLPF3MCULLPF3___New_orig__
itkMapContainerULLCIUCCTI3FFULLULLULLPF3MCULLPF3_cast = _itkMeshBasePython.itkMapContainerULLCIUCCTI3FFULLULLULLPF3MCULLPF3_cast


def itkMapContainerULLCIUSCTI2FFULLULLULLPF2MCULLPF2_New():
    return itkMapContainerULLCIUSCTI2FFULLULLULLPF2MCULLPF2.New()

class itkMapContainerULLCIUSCTI2FFULLULLULLPF2MCULLPF2(itk.ITKCommonBasePython.itkObject):
    r"""


    A wrapper of the STL "map" container.

    Define a front-end to the STL "map" container that conforms to the
    IndexedContainerInterface. This is a full-fleged Object, so there are
    events, modification time, debug, and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  A type that shall be used to index the container.
    It must have a < operator defined for ordering.

    TElement:  The element type stored in the container. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkMapContainerULLCIUSCTI2FFULLULLULLPF2MCULLPF2 self) -> itkMapContainerULLCIUSCTI2FFULLULLULLPF2MCULLPF2
        __init__(itkMapContainerULLCIUSCTI2FFULLULLULLPF2MCULLPF2 self, std::less< unsigned long long > const & comp) -> itkMapContainerULLCIUSCTI2FFULLULLULLPF2MCULLPF2


        A wrapper of the STL "map" container.

        Define a front-end to the STL "map" container that conforms to the
        IndexedContainerInterface. This is a full-fleged Object, so there are
        events, modification time, debug, and reference count information.

        Parameters:
        -----------

        TElementIdentifier:  A type that shall be used to index the container.
        It must have a < operator defined for ordering.

        TElement:  The element type stored in the container. 
        """
        _itkMeshBasePython.itkMapContainerULLCIUSCTI2FFULLULLULLPF2MCULLPF2_swiginit(self, _itkMeshBasePython.new_itkMapContainerULLCIUSCTI2FFULLULLULLPF2MCULLPF2(*args))
    __New_orig__ = _swig_new_static_method(_itkMeshBasePython.itkMapContainerULLCIUSCTI2FFULLULLULLPF2MCULLPF2___New_orig__)
    Clone = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUSCTI2FFULLULLULLPF2MCULLPF2_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUSCTI2FFULLULLULLPF2MCULLPF2_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUSCTI2FFULLULLULLPF2MCULLPF2_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUSCTI2FFULLULLULLPF2MCULLPF2_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUSCTI2FFULLULLULLPF2MCULLPF2_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUSCTI2FFULLULLULLPF2MCULLPF2_GetElement)
    SetElement = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUSCTI2FFULLULLULLPF2MCULLPF2_SetElement)
    InsertElement = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUSCTI2FFULLULLULLPF2MCULLPF2_InsertElement)
    IndexExists = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUSCTI2FFULLULLULLPF2MCULLPF2_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUSCTI2FFULLULLULLPF2MCULLPF2_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUSCTI2FFULLULLULLPF2MCULLPF2_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUSCTI2FFULLULLULLPF2MCULLPF2_DeleteIndex)
    Size = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUSCTI2FFULLULLULLPF2MCULLPF2_Size)
    Reserve = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUSCTI2FFULLULLULLPF2MCULLPF2_Reserve)
    Squeeze = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUSCTI2FFULLULLULLPF2MCULLPF2_Squeeze)
    Initialize = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUSCTI2FFULLULLULLPF2MCULLPF2_Initialize)
    __swig_destroy__ = _itkMeshBasePython.delete_itkMapContainerULLCIUSCTI2FFULLULLULLPF2MCULLPF2
    cast = _swig_new_static_method(_itkMeshBasePython.itkMapContainerULLCIUSCTI2FFULLULLULLPF2MCULLPF2_cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerULLCIUSCTI2FFULLULLULLPF2MCULLPF2

        Create a new object of the class itkMapContainerULLCIUSCTI2FFULLULLULLPF2MCULLPF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULLCIUSCTI2FFULLULLULLPF2MCULLPF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerULLCIUSCTI2FFULLULLULLPF2MCULLPF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerULLCIUSCTI2FFULLULLULLPF2MCULLPF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerULLCIUSCTI2FFULLULLULLPF2MCULLPF2 in _itkMeshBasePython:
_itkMeshBasePython.itkMapContainerULLCIUSCTI2FFULLULLULLPF2MCULLPF2_swigregister(itkMapContainerULLCIUSCTI2FFULLULLULLPF2MCULLPF2)
itkMapContainerULLCIUSCTI2FFULLULLULLPF2MCULLPF2___New_orig__ = _itkMeshBasePython.itkMapContainerULLCIUSCTI2FFULLULLULLPF2MCULLPF2___New_orig__
itkMapContainerULLCIUSCTI2FFULLULLULLPF2MCULLPF2_cast = _itkMeshBasePython.itkMapContainerULLCIUSCTI2FFULLULLULLPF2MCULLPF2_cast


def itkMapContainerULLCIUSCTI3FFULLULLULLPF3MCULLPF3_New():
    return itkMapContainerULLCIUSCTI3FFULLULLULLPF3MCULLPF3.New()

class itkMapContainerULLCIUSCTI3FFULLULLULLPF3MCULLPF3(itk.ITKCommonBasePython.itkObject):
    r"""


    A wrapper of the STL "map" container.

    Define a front-end to the STL "map" container that conforms to the
    IndexedContainerInterface. This is a full-fleged Object, so there are
    events, modification time, debug, and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  A type that shall be used to index the container.
    It must have a < operator defined for ordering.

    TElement:  The element type stored in the container. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkMapContainerULLCIUSCTI3FFULLULLULLPF3MCULLPF3 self) -> itkMapContainerULLCIUSCTI3FFULLULLULLPF3MCULLPF3
        __init__(itkMapContainerULLCIUSCTI3FFULLULLULLPF3MCULLPF3 self, std::less< unsigned long long > const & comp) -> itkMapContainerULLCIUSCTI3FFULLULLULLPF3MCULLPF3


        A wrapper of the STL "map" container.

        Define a front-end to the STL "map" container that conforms to the
        IndexedContainerInterface. This is a full-fleged Object, so there are
        events, modification time, debug, and reference count information.

        Parameters:
        -----------

        TElementIdentifier:  A type that shall be used to index the container.
        It must have a < operator defined for ordering.

        TElement:  The element type stored in the container. 
        """
        _itkMeshBasePython.itkMapContainerULLCIUSCTI3FFULLULLULLPF3MCULLPF3_swiginit(self, _itkMeshBasePython.new_itkMapContainerULLCIUSCTI3FFULLULLULLPF3MCULLPF3(*args))
    __New_orig__ = _swig_new_static_method(_itkMeshBasePython.itkMapContainerULLCIUSCTI3FFULLULLULLPF3MCULLPF3___New_orig__)
    Clone = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUSCTI3FFULLULLULLPF3MCULLPF3_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUSCTI3FFULLULLULLPF3MCULLPF3_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUSCTI3FFULLULLULLPF3MCULLPF3_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUSCTI3FFULLULLULLPF3MCULLPF3_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUSCTI3FFULLULLULLPF3MCULLPF3_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUSCTI3FFULLULLULLPF3MCULLPF3_GetElement)
    SetElement = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUSCTI3FFULLULLULLPF3MCULLPF3_SetElement)
    InsertElement = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUSCTI3FFULLULLULLPF3MCULLPF3_InsertElement)
    IndexExists = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUSCTI3FFULLULLULLPF3MCULLPF3_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUSCTI3FFULLULLULLPF3MCULLPF3_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUSCTI3FFULLULLULLPF3MCULLPF3_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUSCTI3FFULLULLULLPF3MCULLPF3_DeleteIndex)
    Size = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUSCTI3FFULLULLULLPF3MCULLPF3_Size)
    Reserve = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUSCTI3FFULLULLULLPF3MCULLPF3_Reserve)
    Squeeze = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUSCTI3FFULLULLULLPF3MCULLPF3_Squeeze)
    Initialize = _swig_new_instance_method(_itkMeshBasePython.itkMapContainerULLCIUSCTI3FFULLULLULLPF3MCULLPF3_Initialize)
    __swig_destroy__ = _itkMeshBasePython.delete_itkMapContainerULLCIUSCTI3FFULLULLULLPF3MCULLPF3
    cast = _swig_new_static_method(_itkMeshBasePython.itkMapContainerULLCIUSCTI3FFULLULLULLPF3MCULLPF3_cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerULLCIUSCTI3FFULLULLULLPF3MCULLPF3

        Create a new object of the class itkMapContainerULLCIUSCTI3FFULLULLULLPF3MCULLPF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULLCIUSCTI3FFULLULLULLPF3MCULLPF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerULLCIUSCTI3FFULLULLULLPF3MCULLPF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerULLCIUSCTI3FFULLULLULLPF3MCULLPF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerULLCIUSCTI3FFULLULLULLPF3MCULLPF3 in _itkMeshBasePython:
_itkMeshBasePython.itkMapContainerULLCIUSCTI3FFULLULLULLPF3MCULLPF3_swigregister(itkMapContainerULLCIUSCTI3FFULLULLULLPF3MCULLPF3)
itkMapContainerULLCIUSCTI3FFULLULLULLPF3MCULLPF3___New_orig__ = _itkMeshBasePython.itkMapContainerULLCIUSCTI3FFULLULLULLPF3MCULLPF3___New_orig__
itkMapContainerULLCIUSCTI3FFULLULLULLPF3MCULLPF3_cast = _itkMeshBasePython.itkMapContainerULLCIUSCTI3FFULLULLULLPF3MCULLPF3_cast


def itkMeshD2_New():
    return itkMeshD2.New()

class itkMeshD2(itk.itkPointSetPython.itkPointSetD2):
    r"""


    Implements the N-dimensional mesh structure.

    Overview  Mesh implements the N-dimensional mesh structure for ITK. It
    provides an API to perform operations on points, cells, boundaries,
    etc., but does not tie down the underlying implementation and storage.
    A "MeshTraits" structure is used to define the container and
    identifier types that will be used to access the mesh. See
    DefaultStaticMeshTraits for the set of type definitions needed. All
    types that are defined in the "MeshTraits" structure will have
    duplicate type alias in the resulting mesh itself.  Mesh is an
    adaptive, evolving structure. Typically points and cells are created,
    with the cells referring to their defining points. If additional
    topological information is required, then BuildCellLinks() is called
    and links from the points back to the cells that use them are created.
    This allows implicit topological information about the faces and edges
    of the cells to be determined. (For example, a "face" neighbor to a
    cell can be determined by intersection the sets of cells that use the
    points defining the face. This is an inherent assumption on the
    manifold relationship of the cells in the mesh.) In some cases, either
    because the mesh is non-manifold, because we wish to explicitly store
    information with the faces and edges of the mesh, or because
    performance requirements demand that boundaries are explicitly
    represented (the set intersection does not need to be performed); then
    Mesh can be further extended by adding explicit boundary assignments.

    Usage  Mesh has three template parameters. The first is the pixel
    type, or the type of data stored (optionally) with points, cells,
    and/or boundaries. The second is the geometric dimension of the points
    defining the mesh. This also limits the maximum topological dimension
    of the cells that can be inserted. The third template parameter is the
    "MeshTraits" structure controlling type information for the mesh.
    Most users will be happy with the defaults, and will not have to worry
    about this third argument.  One of the most important parts of using
    this mesh is how to create cells to insert into it. The cells for the
    mesh take two template parameters. The first is the pixel type, and
    should correspond exactly to that type given to the mesh. The second
    is a "CellTraits" which holds a sub-set of the "MeshTraits"
    structure definitions, and is also a member of them. Any cell which is
    to be inserted to a mesh should have MeshTraits::CellTraits as its
    second template parameter.

    Template parameters for Mesh:

    TPixelType = The type stored as data for an entity (cell, point, or
    boundary).

    TMeshTraits = Type information structure for the mesh.

    References No reference information is available.
    {Core/Mesh/AddPointsAndEdges,Add Points And Edges}
    {Core/Mesh/ConvertMeshToUnstructeredGrid,Convert Mesh To Unstructered
    Grid} {Core/Mesh/WorkingWithPointAndCellData,Working With Point And
    Cell Data} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMeshBasePython.itkMeshD2___New_orig__)
    Clone = _swig_new_instance_method(_itkMeshBasePython.itkMeshD2_Clone)
    GetNumberOfCells = _swig_new_instance_method(_itkMeshBasePython.itkMeshD2_GetNumberOfCells)
    PassStructure = _swig_new_instance_method(_itkMeshBasePython.itkMeshD2_PassStructure)
    GetBoundingBox = _swig_new_instance_method(_itkMeshBasePython.itkMeshD2_GetBoundingBox)
    SetCellLinks = _swig_new_instance_method(_itkMeshBasePython.itkMeshD2_SetCellLinks)
    GetCellLinks = _swig_new_instance_method(_itkMeshBasePython.itkMeshD2_GetCellLinks)
    SetCells = _swig_new_instance_method(_itkMeshBasePython.itkMeshD2_SetCells)
    GetCells = _swig_new_instance_method(_itkMeshBasePython.itkMeshD2_GetCells)
    DeleteUnusedCellData = _swig_new_instance_method(_itkMeshBasePython.itkMeshD2_DeleteUnusedCellData)
    SetCell = _swig_new_instance_method(_itkMeshBasePython.itkMeshD2_SetCell)
    GetCell = _swig_new_instance_method(_itkMeshBasePython.itkMeshD2_GetCell)
    SetCellData = _swig_new_instance_method(_itkMeshBasePython.itkMeshD2_SetCellData)
    GetCellData = _swig_new_instance_method(_itkMeshBasePython.itkMeshD2_GetCellData)
    SetBoundaryAssignment = _swig_new_instance_method(_itkMeshBasePython.itkMeshD2_SetBoundaryAssignment)
    GetBoundaryAssignment = _swig_new_instance_method(_itkMeshBasePython.itkMeshD2_GetBoundaryAssignment)
    RemoveBoundaryAssignment = _swig_new_instance_method(_itkMeshBasePython.itkMeshD2_RemoveBoundaryAssignment)
    GetNumberOfCellBoundaryFeatures = _swig_new_instance_method(_itkMeshBasePython.itkMeshD2_GetNumberOfCellBoundaryFeatures)
    GetCellBoundaryFeature = _swig_new_instance_method(_itkMeshBasePython.itkMeshD2_GetCellBoundaryFeature)
    GetCellBoundaryFeatureNeighbors = _swig_new_instance_method(_itkMeshBasePython.itkMeshD2_GetCellBoundaryFeatureNeighbors)
    GetCellNeighbors = _swig_new_instance_method(_itkMeshBasePython.itkMeshD2_GetCellNeighbors)
    GetAssignedCellBoundaryIfOneExists = _swig_new_instance_method(_itkMeshBasePython.itkMeshD2_GetAssignedCellBoundaryIfOneExists)
    BuildCellLinks = _swig_new_instance_method(_itkMeshBasePython.itkMeshD2_BuildCellLinks)
    Accept = _swig_new_instance_method(_itkMeshBasePython.itkMeshD2_Accept)
    SetCellsAllocationMethod = _swig_new_instance_method(_itkMeshBasePython.itkMeshD2_SetCellsAllocationMethod)
    GetCellsAllocationMethod = _swig_new_instance_method(_itkMeshBasePython.itkMeshD2_GetCellsAllocationMethod)
    __swig_destroy__ = _itkMeshBasePython.delete_itkMeshD2
    cast = _swig_new_static_method(_itkMeshBasePython.itkMeshD2_cast)

    def New(*args, **kargs):
        """New() -> itkMeshD2

        Create a new object of the class itkMeshD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeshD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeshD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshD2 in _itkMeshBasePython:
_itkMeshBasePython.itkMeshD2_swigregister(itkMeshD2)
itkMeshD2___New_orig__ = _itkMeshBasePython.itkMeshD2___New_orig__
itkMeshD2_cast = _itkMeshBasePython.itkMeshD2_cast


def itkMeshD3_New():
    return itkMeshD3.New()

class itkMeshD3(itk.itkPointSetPython.itkPointSetD3):
    r"""


    Implements the N-dimensional mesh structure.

    Overview  Mesh implements the N-dimensional mesh structure for ITK. It
    provides an API to perform operations on points, cells, boundaries,
    etc., but does not tie down the underlying implementation and storage.
    A "MeshTraits" structure is used to define the container and
    identifier types that will be used to access the mesh. See
    DefaultStaticMeshTraits for the set of type definitions needed. All
    types that are defined in the "MeshTraits" structure will have
    duplicate type alias in the resulting mesh itself.  Mesh is an
    adaptive, evolving structure. Typically points and cells are created,
    with the cells referring to their defining points. If additional
    topological information is required, then BuildCellLinks() is called
    and links from the points back to the cells that use them are created.
    This allows implicit topological information about the faces and edges
    of the cells to be determined. (For example, a "face" neighbor to a
    cell can be determined by intersection the sets of cells that use the
    points defining the face. This is an inherent assumption on the
    manifold relationship of the cells in the mesh.) In some cases, either
    because the mesh is non-manifold, because we wish to explicitly store
    information with the faces and edges of the mesh, or because
    performance requirements demand that boundaries are explicitly
    represented (the set intersection does not need to be performed); then
    Mesh can be further extended by adding explicit boundary assignments.

    Usage  Mesh has three template parameters. The first is the pixel
    type, or the type of data stored (optionally) with points, cells,
    and/or boundaries. The second is the geometric dimension of the points
    defining the mesh. This also limits the maximum topological dimension
    of the cells that can be inserted. The third template parameter is the
    "MeshTraits" structure controlling type information for the mesh.
    Most users will be happy with the defaults, and will not have to worry
    about this third argument.  One of the most important parts of using
    this mesh is how to create cells to insert into it. The cells for the
    mesh take two template parameters. The first is the pixel type, and
    should correspond exactly to that type given to the mesh. The second
    is a "CellTraits" which holds a sub-set of the "MeshTraits"
    structure definitions, and is also a member of them. Any cell which is
    to be inserted to a mesh should have MeshTraits::CellTraits as its
    second template parameter.

    Template parameters for Mesh:

    TPixelType = The type stored as data for an entity (cell, point, or
    boundary).

    TMeshTraits = Type information structure for the mesh.

    References No reference information is available.
    {Core/Mesh/AddPointsAndEdges,Add Points And Edges}
    {Core/Mesh/ConvertMeshToUnstructeredGrid,Convert Mesh To Unstructered
    Grid} {Core/Mesh/WorkingWithPointAndCellData,Working With Point And
    Cell Data} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMeshBasePython.itkMeshD3___New_orig__)
    Clone = _swig_new_instance_method(_itkMeshBasePython.itkMeshD3_Clone)
    GetNumberOfCells = _swig_new_instance_method(_itkMeshBasePython.itkMeshD3_GetNumberOfCells)
    PassStructure = _swig_new_instance_method(_itkMeshBasePython.itkMeshD3_PassStructure)
    GetBoundingBox = _swig_new_instance_method(_itkMeshBasePython.itkMeshD3_GetBoundingBox)
    SetCellLinks = _swig_new_instance_method(_itkMeshBasePython.itkMeshD3_SetCellLinks)
    GetCellLinks = _swig_new_instance_method(_itkMeshBasePython.itkMeshD3_GetCellLinks)
    SetCells = _swig_new_instance_method(_itkMeshBasePython.itkMeshD3_SetCells)
    GetCells = _swig_new_instance_method(_itkMeshBasePython.itkMeshD3_GetCells)
    DeleteUnusedCellData = _swig_new_instance_method(_itkMeshBasePython.itkMeshD3_DeleteUnusedCellData)
    SetCell = _swig_new_instance_method(_itkMeshBasePython.itkMeshD3_SetCell)
    GetCell = _swig_new_instance_method(_itkMeshBasePython.itkMeshD3_GetCell)
    SetCellData = _swig_new_instance_method(_itkMeshBasePython.itkMeshD3_SetCellData)
    GetCellData = _swig_new_instance_method(_itkMeshBasePython.itkMeshD3_GetCellData)
    SetBoundaryAssignment = _swig_new_instance_method(_itkMeshBasePython.itkMeshD3_SetBoundaryAssignment)
    GetBoundaryAssignment = _swig_new_instance_method(_itkMeshBasePython.itkMeshD3_GetBoundaryAssignment)
    RemoveBoundaryAssignment = _swig_new_instance_method(_itkMeshBasePython.itkMeshD3_RemoveBoundaryAssignment)
    GetNumberOfCellBoundaryFeatures = _swig_new_instance_method(_itkMeshBasePython.itkMeshD3_GetNumberOfCellBoundaryFeatures)
    GetCellBoundaryFeature = _swig_new_instance_method(_itkMeshBasePython.itkMeshD3_GetCellBoundaryFeature)
    GetCellBoundaryFeatureNeighbors = _swig_new_instance_method(_itkMeshBasePython.itkMeshD3_GetCellBoundaryFeatureNeighbors)
    GetCellNeighbors = _swig_new_instance_method(_itkMeshBasePython.itkMeshD3_GetCellNeighbors)
    GetAssignedCellBoundaryIfOneExists = _swig_new_instance_method(_itkMeshBasePython.itkMeshD3_GetAssignedCellBoundaryIfOneExists)
    BuildCellLinks = _swig_new_instance_method(_itkMeshBasePython.itkMeshD3_BuildCellLinks)
    Accept = _swig_new_instance_method(_itkMeshBasePython.itkMeshD3_Accept)
    SetCellsAllocationMethod = _swig_new_instance_method(_itkMeshBasePython.itkMeshD3_SetCellsAllocationMethod)
    GetCellsAllocationMethod = _swig_new_instance_method(_itkMeshBasePython.itkMeshD3_GetCellsAllocationMethod)
    __swig_destroy__ = _itkMeshBasePython.delete_itkMeshD3
    cast = _swig_new_static_method(_itkMeshBasePython.itkMeshD3_cast)

    def New(*args, **kargs):
        """New() -> itkMeshD3

        Create a new object of the class itkMeshD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeshD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeshD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshD3 in _itkMeshBasePython:
_itkMeshBasePython.itkMeshD3_swigregister(itkMeshD3)
itkMeshD3___New_orig__ = _itkMeshBasePython.itkMeshD3___New_orig__
itkMeshD3_cast = _itkMeshBasePython.itkMeshD3_cast


def itkMeshF2_New():
    return itkMeshF2.New()

class itkMeshF2(itk.itkPointSetPython.itkPointSetF2):
    r"""


    Implements the N-dimensional mesh structure.

    Overview  Mesh implements the N-dimensional mesh structure for ITK. It
    provides an API to perform operations on points, cells, boundaries,
    etc., but does not tie down the underlying implementation and storage.
    A "MeshTraits" structure is used to define the container and
    identifier types that will be used to access the mesh. See
    DefaultStaticMeshTraits for the set of type definitions needed. All
    types that are defined in the "MeshTraits" structure will have
    duplicate type alias in the resulting mesh itself.  Mesh is an
    adaptive, evolving structure. Typically points and cells are created,
    with the cells referring to their defining points. If additional
    topological information is required, then BuildCellLinks() is called
    and links from the points back to the cells that use them are created.
    This allows implicit topological information about the faces and edges
    of the cells to be determined. (For example, a "face" neighbor to a
    cell can be determined by intersection the sets of cells that use the
    points defining the face. This is an inherent assumption on the
    manifold relationship of the cells in the mesh.) In some cases, either
    because the mesh is non-manifold, because we wish to explicitly store
    information with the faces and edges of the mesh, or because
    performance requirements demand that boundaries are explicitly
    represented (the set intersection does not need to be performed); then
    Mesh can be further extended by adding explicit boundary assignments.

    Usage  Mesh has three template parameters. The first is the pixel
    type, or the type of data stored (optionally) with points, cells,
    and/or boundaries. The second is the geometric dimension of the points
    defining the mesh. This also limits the maximum topological dimension
    of the cells that can be inserted. The third template parameter is the
    "MeshTraits" structure controlling type information for the mesh.
    Most users will be happy with the defaults, and will not have to worry
    about this third argument.  One of the most important parts of using
    this mesh is how to create cells to insert into it. The cells for the
    mesh take two template parameters. The first is the pixel type, and
    should correspond exactly to that type given to the mesh. The second
    is a "CellTraits" which holds a sub-set of the "MeshTraits"
    structure definitions, and is also a member of them. Any cell which is
    to be inserted to a mesh should have MeshTraits::CellTraits as its
    second template parameter.

    Template parameters for Mesh:

    TPixelType = The type stored as data for an entity (cell, point, or
    boundary).

    TMeshTraits = Type information structure for the mesh.

    References No reference information is available.
    {Core/Mesh/AddPointsAndEdges,Add Points And Edges}
    {Core/Mesh/ConvertMeshToUnstructeredGrid,Convert Mesh To Unstructered
    Grid} {Core/Mesh/WorkingWithPointAndCellData,Working With Point And
    Cell Data} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMeshBasePython.itkMeshF2___New_orig__)
    Clone = _swig_new_instance_method(_itkMeshBasePython.itkMeshF2_Clone)
    GetNumberOfCells = _swig_new_instance_method(_itkMeshBasePython.itkMeshF2_GetNumberOfCells)
    PassStructure = _swig_new_instance_method(_itkMeshBasePython.itkMeshF2_PassStructure)
    GetBoundingBox = _swig_new_instance_method(_itkMeshBasePython.itkMeshF2_GetBoundingBox)
    SetCellLinks = _swig_new_instance_method(_itkMeshBasePython.itkMeshF2_SetCellLinks)
    GetCellLinks = _swig_new_instance_method(_itkMeshBasePython.itkMeshF2_GetCellLinks)
    SetCells = _swig_new_instance_method(_itkMeshBasePython.itkMeshF2_SetCells)
    GetCells = _swig_new_instance_method(_itkMeshBasePython.itkMeshF2_GetCells)
    DeleteUnusedCellData = _swig_new_instance_method(_itkMeshBasePython.itkMeshF2_DeleteUnusedCellData)
    SetCell = _swig_new_instance_method(_itkMeshBasePython.itkMeshF2_SetCell)
    GetCell = _swig_new_instance_method(_itkMeshBasePython.itkMeshF2_GetCell)
    SetCellData = _swig_new_instance_method(_itkMeshBasePython.itkMeshF2_SetCellData)
    GetCellData = _swig_new_instance_method(_itkMeshBasePython.itkMeshF2_GetCellData)
    SetBoundaryAssignment = _swig_new_instance_method(_itkMeshBasePython.itkMeshF2_SetBoundaryAssignment)
    GetBoundaryAssignment = _swig_new_instance_method(_itkMeshBasePython.itkMeshF2_GetBoundaryAssignment)
    RemoveBoundaryAssignment = _swig_new_instance_method(_itkMeshBasePython.itkMeshF2_RemoveBoundaryAssignment)
    GetNumberOfCellBoundaryFeatures = _swig_new_instance_method(_itkMeshBasePython.itkMeshF2_GetNumberOfCellBoundaryFeatures)
    GetCellBoundaryFeature = _swig_new_instance_method(_itkMeshBasePython.itkMeshF2_GetCellBoundaryFeature)
    GetCellBoundaryFeatureNeighbors = _swig_new_instance_method(_itkMeshBasePython.itkMeshF2_GetCellBoundaryFeatureNeighbors)
    GetCellNeighbors = _swig_new_instance_method(_itkMeshBasePython.itkMeshF2_GetCellNeighbors)
    GetAssignedCellBoundaryIfOneExists = _swig_new_instance_method(_itkMeshBasePython.itkMeshF2_GetAssignedCellBoundaryIfOneExists)
    BuildCellLinks = _swig_new_instance_method(_itkMeshBasePython.itkMeshF2_BuildCellLinks)
    Accept = _swig_new_instance_method(_itkMeshBasePython.itkMeshF2_Accept)
    SetCellsAllocationMethod = _swig_new_instance_method(_itkMeshBasePython.itkMeshF2_SetCellsAllocationMethod)
    GetCellsAllocationMethod = _swig_new_instance_method(_itkMeshBasePython.itkMeshF2_GetCellsAllocationMethod)
    __swig_destroy__ = _itkMeshBasePython.delete_itkMeshF2
    cast = _swig_new_static_method(_itkMeshBasePython.itkMeshF2_cast)

    def New(*args, **kargs):
        """New() -> itkMeshF2

        Create a new object of the class itkMeshF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeshF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeshF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshF2 in _itkMeshBasePython:
_itkMeshBasePython.itkMeshF2_swigregister(itkMeshF2)
itkMeshF2___New_orig__ = _itkMeshBasePython.itkMeshF2___New_orig__
itkMeshF2_cast = _itkMeshBasePython.itkMeshF2_cast


def itkMeshF3_New():
    return itkMeshF3.New()

class itkMeshF3(itk.itkPointSetPython.itkPointSetF3):
    r"""


    Implements the N-dimensional mesh structure.

    Overview  Mesh implements the N-dimensional mesh structure for ITK. It
    provides an API to perform operations on points, cells, boundaries,
    etc., but does not tie down the underlying implementation and storage.
    A "MeshTraits" structure is used to define the container and
    identifier types that will be used to access the mesh. See
    DefaultStaticMeshTraits for the set of type definitions needed. All
    types that are defined in the "MeshTraits" structure will have
    duplicate type alias in the resulting mesh itself.  Mesh is an
    adaptive, evolving structure. Typically points and cells are created,
    with the cells referring to their defining points. If additional
    topological information is required, then BuildCellLinks() is called
    and links from the points back to the cells that use them are created.
    This allows implicit topological information about the faces and edges
    of the cells to be determined. (For example, a "face" neighbor to a
    cell can be determined by intersection the sets of cells that use the
    points defining the face. This is an inherent assumption on the
    manifold relationship of the cells in the mesh.) In some cases, either
    because the mesh is non-manifold, because we wish to explicitly store
    information with the faces and edges of the mesh, or because
    performance requirements demand that boundaries are explicitly
    represented (the set intersection does not need to be performed); then
    Mesh can be further extended by adding explicit boundary assignments.

    Usage  Mesh has three template parameters. The first is the pixel
    type, or the type of data stored (optionally) with points, cells,
    and/or boundaries. The second is the geometric dimension of the points
    defining the mesh. This also limits the maximum topological dimension
    of the cells that can be inserted. The third template parameter is the
    "MeshTraits" structure controlling type information for the mesh.
    Most users will be happy with the defaults, and will not have to worry
    about this third argument.  One of the most important parts of using
    this mesh is how to create cells to insert into it. The cells for the
    mesh take two template parameters. The first is the pixel type, and
    should correspond exactly to that type given to the mesh. The second
    is a "CellTraits" which holds a sub-set of the "MeshTraits"
    structure definitions, and is also a member of them. Any cell which is
    to be inserted to a mesh should have MeshTraits::CellTraits as its
    second template parameter.

    Template parameters for Mesh:

    TPixelType = The type stored as data for an entity (cell, point, or
    boundary).

    TMeshTraits = Type information structure for the mesh.

    References No reference information is available.
    {Core/Mesh/AddPointsAndEdges,Add Points And Edges}
    {Core/Mesh/ConvertMeshToUnstructeredGrid,Convert Mesh To Unstructered
    Grid} {Core/Mesh/WorkingWithPointAndCellData,Working With Point And
    Cell Data} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMeshBasePython.itkMeshF3___New_orig__)
    Clone = _swig_new_instance_method(_itkMeshBasePython.itkMeshF3_Clone)
    GetNumberOfCells = _swig_new_instance_method(_itkMeshBasePython.itkMeshF3_GetNumberOfCells)
    PassStructure = _swig_new_instance_method(_itkMeshBasePython.itkMeshF3_PassStructure)
    GetBoundingBox = _swig_new_instance_method(_itkMeshBasePython.itkMeshF3_GetBoundingBox)
    SetCellLinks = _swig_new_instance_method(_itkMeshBasePython.itkMeshF3_SetCellLinks)
    GetCellLinks = _swig_new_instance_method(_itkMeshBasePython.itkMeshF3_GetCellLinks)
    SetCells = _swig_new_instance_method(_itkMeshBasePython.itkMeshF3_SetCells)
    GetCells = _swig_new_instance_method(_itkMeshBasePython.itkMeshF3_GetCells)
    DeleteUnusedCellData = _swig_new_instance_method(_itkMeshBasePython.itkMeshF3_DeleteUnusedCellData)
    SetCell = _swig_new_instance_method(_itkMeshBasePython.itkMeshF3_SetCell)
    GetCell = _swig_new_instance_method(_itkMeshBasePython.itkMeshF3_GetCell)
    SetCellData = _swig_new_instance_method(_itkMeshBasePython.itkMeshF3_SetCellData)
    GetCellData = _swig_new_instance_method(_itkMeshBasePython.itkMeshF3_GetCellData)
    SetBoundaryAssignment = _swig_new_instance_method(_itkMeshBasePython.itkMeshF3_SetBoundaryAssignment)
    GetBoundaryAssignment = _swig_new_instance_method(_itkMeshBasePython.itkMeshF3_GetBoundaryAssignment)
    RemoveBoundaryAssignment = _swig_new_instance_method(_itkMeshBasePython.itkMeshF3_RemoveBoundaryAssignment)
    GetNumberOfCellBoundaryFeatures = _swig_new_instance_method(_itkMeshBasePython.itkMeshF3_GetNumberOfCellBoundaryFeatures)
    GetCellBoundaryFeature = _swig_new_instance_method(_itkMeshBasePython.itkMeshF3_GetCellBoundaryFeature)
    GetCellBoundaryFeatureNeighbors = _swig_new_instance_method(_itkMeshBasePython.itkMeshF3_GetCellBoundaryFeatureNeighbors)
    GetCellNeighbors = _swig_new_instance_method(_itkMeshBasePython.itkMeshF3_GetCellNeighbors)
    GetAssignedCellBoundaryIfOneExists = _swig_new_instance_method(_itkMeshBasePython.itkMeshF3_GetAssignedCellBoundaryIfOneExists)
    BuildCellLinks = _swig_new_instance_method(_itkMeshBasePython.itkMeshF3_BuildCellLinks)
    Accept = _swig_new_instance_method(_itkMeshBasePython.itkMeshF3_Accept)
    SetCellsAllocationMethod = _swig_new_instance_method(_itkMeshBasePython.itkMeshF3_SetCellsAllocationMethod)
    GetCellsAllocationMethod = _swig_new_instance_method(_itkMeshBasePython.itkMeshF3_GetCellsAllocationMethod)
    __swig_destroy__ = _itkMeshBasePython.delete_itkMeshF3
    cast = _swig_new_static_method(_itkMeshBasePython.itkMeshF3_cast)

    def New(*args, **kargs):
        """New() -> itkMeshF3

        Create a new object of the class itkMeshF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeshF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeshF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshF3 in _itkMeshBasePython:
_itkMeshBasePython.itkMeshF3_swigregister(itkMeshF3)
itkMeshF3___New_orig__ = _itkMeshBasePython.itkMeshF3___New_orig__
itkMeshF3_cast = _itkMeshBasePython.itkMeshF3_cast


def itkMeshSS2_New():
    return itkMeshSS2.New()

class itkMeshSS2(itk.itkPointSetPython.itkPointSetSS2):
    r"""


    Implements the N-dimensional mesh structure.

    Overview  Mesh implements the N-dimensional mesh structure for ITK. It
    provides an API to perform operations on points, cells, boundaries,
    etc., but does not tie down the underlying implementation and storage.
    A "MeshTraits" structure is used to define the container and
    identifier types that will be used to access the mesh. See
    DefaultStaticMeshTraits for the set of type definitions needed. All
    types that are defined in the "MeshTraits" structure will have
    duplicate type alias in the resulting mesh itself.  Mesh is an
    adaptive, evolving structure. Typically points and cells are created,
    with the cells referring to their defining points. If additional
    topological information is required, then BuildCellLinks() is called
    and links from the points back to the cells that use them are created.
    This allows implicit topological information about the faces and edges
    of the cells to be determined. (For example, a "face" neighbor to a
    cell can be determined by intersection the sets of cells that use the
    points defining the face. This is an inherent assumption on the
    manifold relationship of the cells in the mesh.) In some cases, either
    because the mesh is non-manifold, because we wish to explicitly store
    information with the faces and edges of the mesh, or because
    performance requirements demand that boundaries are explicitly
    represented (the set intersection does not need to be performed); then
    Mesh can be further extended by adding explicit boundary assignments.

    Usage  Mesh has three template parameters. The first is the pixel
    type, or the type of data stored (optionally) with points, cells,
    and/or boundaries. The second is the geometric dimension of the points
    defining the mesh. This also limits the maximum topological dimension
    of the cells that can be inserted. The third template parameter is the
    "MeshTraits" structure controlling type information for the mesh.
    Most users will be happy with the defaults, and will not have to worry
    about this third argument.  One of the most important parts of using
    this mesh is how to create cells to insert into it. The cells for the
    mesh take two template parameters. The first is the pixel type, and
    should correspond exactly to that type given to the mesh. The second
    is a "CellTraits" which holds a sub-set of the "MeshTraits"
    structure definitions, and is also a member of them. Any cell which is
    to be inserted to a mesh should have MeshTraits::CellTraits as its
    second template parameter.

    Template parameters for Mesh:

    TPixelType = The type stored as data for an entity (cell, point, or
    boundary).

    TMeshTraits = Type information structure for the mesh.

    References No reference information is available.
    {Core/Mesh/AddPointsAndEdges,Add Points And Edges}
    {Core/Mesh/ConvertMeshToUnstructeredGrid,Convert Mesh To Unstructered
    Grid} {Core/Mesh/WorkingWithPointAndCellData,Working With Point And
    Cell Data} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMeshBasePython.itkMeshSS2___New_orig__)
    Clone = _swig_new_instance_method(_itkMeshBasePython.itkMeshSS2_Clone)
    GetNumberOfCells = _swig_new_instance_method(_itkMeshBasePython.itkMeshSS2_GetNumberOfCells)
    PassStructure = _swig_new_instance_method(_itkMeshBasePython.itkMeshSS2_PassStructure)
    GetBoundingBox = _swig_new_instance_method(_itkMeshBasePython.itkMeshSS2_GetBoundingBox)
    SetCellLinks = _swig_new_instance_method(_itkMeshBasePython.itkMeshSS2_SetCellLinks)
    GetCellLinks = _swig_new_instance_method(_itkMeshBasePython.itkMeshSS2_GetCellLinks)
    SetCells = _swig_new_instance_method(_itkMeshBasePython.itkMeshSS2_SetCells)
    GetCells = _swig_new_instance_method(_itkMeshBasePython.itkMeshSS2_GetCells)
    DeleteUnusedCellData = _swig_new_instance_method(_itkMeshBasePython.itkMeshSS2_DeleteUnusedCellData)
    SetCell = _swig_new_instance_method(_itkMeshBasePython.itkMeshSS2_SetCell)
    GetCell = _swig_new_instance_method(_itkMeshBasePython.itkMeshSS2_GetCell)
    SetCellData = _swig_new_instance_method(_itkMeshBasePython.itkMeshSS2_SetCellData)
    GetCellData = _swig_new_instance_method(_itkMeshBasePython.itkMeshSS2_GetCellData)
    SetBoundaryAssignment = _swig_new_instance_method(_itkMeshBasePython.itkMeshSS2_SetBoundaryAssignment)
    GetBoundaryAssignment = _swig_new_instance_method(_itkMeshBasePython.itkMeshSS2_GetBoundaryAssignment)
    RemoveBoundaryAssignment = _swig_new_instance_method(_itkMeshBasePython.itkMeshSS2_RemoveBoundaryAssignment)
    GetNumberOfCellBoundaryFeatures = _swig_new_instance_method(_itkMeshBasePython.itkMeshSS2_GetNumberOfCellBoundaryFeatures)
    GetCellBoundaryFeature = _swig_new_instance_method(_itkMeshBasePython.itkMeshSS2_GetCellBoundaryFeature)
    GetCellBoundaryFeatureNeighbors = _swig_new_instance_method(_itkMeshBasePython.itkMeshSS2_GetCellBoundaryFeatureNeighbors)
    GetCellNeighbors = _swig_new_instance_method(_itkMeshBasePython.itkMeshSS2_GetCellNeighbors)
    GetAssignedCellBoundaryIfOneExists = _swig_new_instance_method(_itkMeshBasePython.itkMeshSS2_GetAssignedCellBoundaryIfOneExists)
    BuildCellLinks = _swig_new_instance_method(_itkMeshBasePython.itkMeshSS2_BuildCellLinks)
    Accept = _swig_new_instance_method(_itkMeshBasePython.itkMeshSS2_Accept)
    SetCellsAllocationMethod = _swig_new_instance_method(_itkMeshBasePython.itkMeshSS2_SetCellsAllocationMethod)
    GetCellsAllocationMethod = _swig_new_instance_method(_itkMeshBasePython.itkMeshSS2_GetCellsAllocationMethod)
    __swig_destroy__ = _itkMeshBasePython.delete_itkMeshSS2
    cast = _swig_new_static_method(_itkMeshBasePython.itkMeshSS2_cast)

    def New(*args, **kargs):
        """New() -> itkMeshSS2

        Create a new object of the class itkMeshSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeshSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeshSS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshSS2 in _itkMeshBasePython:
_itkMeshBasePython.itkMeshSS2_swigregister(itkMeshSS2)
itkMeshSS2___New_orig__ = _itkMeshBasePython.itkMeshSS2___New_orig__
itkMeshSS2_cast = _itkMeshBasePython.itkMeshSS2_cast


def itkMeshSS3_New():
    return itkMeshSS3.New()

class itkMeshSS3(itk.itkPointSetPython.itkPointSetSS3):
    r"""


    Implements the N-dimensional mesh structure.

    Overview  Mesh implements the N-dimensional mesh structure for ITK. It
    provides an API to perform operations on points, cells, boundaries,
    etc., but does not tie down the underlying implementation and storage.
    A "MeshTraits" structure is used to define the container and
    identifier types that will be used to access the mesh. See
    DefaultStaticMeshTraits for the set of type definitions needed. All
    types that are defined in the "MeshTraits" structure will have
    duplicate type alias in the resulting mesh itself.  Mesh is an
    adaptive, evolving structure. Typically points and cells are created,
    with the cells referring to their defining points. If additional
    topological information is required, then BuildCellLinks() is called
    and links from the points back to the cells that use them are created.
    This allows implicit topological information about the faces and edges
    of the cells to be determined. (For example, a "face" neighbor to a
    cell can be determined by intersection the sets of cells that use the
    points defining the face. This is an inherent assumption on the
    manifold relationship of the cells in the mesh.) In some cases, either
    because the mesh is non-manifold, because we wish to explicitly store
    information with the faces and edges of the mesh, or because
    performance requirements demand that boundaries are explicitly
    represented (the set intersection does not need to be performed); then
    Mesh can be further extended by adding explicit boundary assignments.

    Usage  Mesh has three template parameters. The first is the pixel
    type, or the type of data stored (optionally) with points, cells,
    and/or boundaries. The second is the geometric dimension of the points
    defining the mesh. This also limits the maximum topological dimension
    of the cells that can be inserted. The third template parameter is the
    "MeshTraits" structure controlling type information for the mesh.
    Most users will be happy with the defaults, and will not have to worry
    about this third argument.  One of the most important parts of using
    this mesh is how to create cells to insert into it. The cells for the
    mesh take two template parameters. The first is the pixel type, and
    should correspond exactly to that type given to the mesh. The second
    is a "CellTraits" which holds a sub-set of the "MeshTraits"
    structure definitions, and is also a member of them. Any cell which is
    to be inserted to a mesh should have MeshTraits::CellTraits as its
    second template parameter.

    Template parameters for Mesh:

    TPixelType = The type stored as data for an entity (cell, point, or
    boundary).

    TMeshTraits = Type information structure for the mesh.

    References No reference information is available.
    {Core/Mesh/AddPointsAndEdges,Add Points And Edges}
    {Core/Mesh/ConvertMeshToUnstructeredGrid,Convert Mesh To Unstructered
    Grid} {Core/Mesh/WorkingWithPointAndCellData,Working With Point And
    Cell Data} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMeshBasePython.itkMeshSS3___New_orig__)
    Clone = _swig_new_instance_method(_itkMeshBasePython.itkMeshSS3_Clone)
    GetNumberOfCells = _swig_new_instance_method(_itkMeshBasePython.itkMeshSS3_GetNumberOfCells)
    PassStructure = _swig_new_instance_method(_itkMeshBasePython.itkMeshSS3_PassStructure)
    GetBoundingBox = _swig_new_instance_method(_itkMeshBasePython.itkMeshSS3_GetBoundingBox)
    SetCellLinks = _swig_new_instance_method(_itkMeshBasePython.itkMeshSS3_SetCellLinks)
    GetCellLinks = _swig_new_instance_method(_itkMeshBasePython.itkMeshSS3_GetCellLinks)
    SetCells = _swig_new_instance_method(_itkMeshBasePython.itkMeshSS3_SetCells)
    GetCells = _swig_new_instance_method(_itkMeshBasePython.itkMeshSS3_GetCells)
    DeleteUnusedCellData = _swig_new_instance_method(_itkMeshBasePython.itkMeshSS3_DeleteUnusedCellData)
    SetCell = _swig_new_instance_method(_itkMeshBasePython.itkMeshSS3_SetCell)
    GetCell = _swig_new_instance_method(_itkMeshBasePython.itkMeshSS3_GetCell)
    SetCellData = _swig_new_instance_method(_itkMeshBasePython.itkMeshSS3_SetCellData)
    GetCellData = _swig_new_instance_method(_itkMeshBasePython.itkMeshSS3_GetCellData)
    SetBoundaryAssignment = _swig_new_instance_method(_itkMeshBasePython.itkMeshSS3_SetBoundaryAssignment)
    GetBoundaryAssignment = _swig_new_instance_method(_itkMeshBasePython.itkMeshSS3_GetBoundaryAssignment)
    RemoveBoundaryAssignment = _swig_new_instance_method(_itkMeshBasePython.itkMeshSS3_RemoveBoundaryAssignment)
    GetNumberOfCellBoundaryFeatures = _swig_new_instance_method(_itkMeshBasePython.itkMeshSS3_GetNumberOfCellBoundaryFeatures)
    GetCellBoundaryFeature = _swig_new_instance_method(_itkMeshBasePython.itkMeshSS3_GetCellBoundaryFeature)
    GetCellBoundaryFeatureNeighbors = _swig_new_instance_method(_itkMeshBasePython.itkMeshSS3_GetCellBoundaryFeatureNeighbors)
    GetCellNeighbors = _swig_new_instance_method(_itkMeshBasePython.itkMeshSS3_GetCellNeighbors)
    GetAssignedCellBoundaryIfOneExists = _swig_new_instance_method(_itkMeshBasePython.itkMeshSS3_GetAssignedCellBoundaryIfOneExists)
    BuildCellLinks = _swig_new_instance_method(_itkMeshBasePython.itkMeshSS3_BuildCellLinks)
    Accept = _swig_new_instance_method(_itkMeshBasePython.itkMeshSS3_Accept)
    SetCellsAllocationMethod = _swig_new_instance_method(_itkMeshBasePython.itkMeshSS3_SetCellsAllocationMethod)
    GetCellsAllocationMethod = _swig_new_instance_method(_itkMeshBasePython.itkMeshSS3_GetCellsAllocationMethod)
    __swig_destroy__ = _itkMeshBasePython.delete_itkMeshSS3
    cast = _swig_new_static_method(_itkMeshBasePython.itkMeshSS3_cast)

    def New(*args, **kargs):
        """New() -> itkMeshSS3

        Create a new object of the class itkMeshSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeshSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeshSS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshSS3 in _itkMeshBasePython:
_itkMeshBasePython.itkMeshSS3_swigregister(itkMeshSS3)
itkMeshSS3___New_orig__ = _itkMeshBasePython.itkMeshSS3___New_orig__
itkMeshSS3_cast = _itkMeshBasePython.itkMeshSS3_cast


def itkMeshUC2_New():
    return itkMeshUC2.New()

class itkMeshUC2(itk.itkPointSetPython.itkPointSetUC2):
    r"""


    Implements the N-dimensional mesh structure.

    Overview  Mesh implements the N-dimensional mesh structure for ITK. It
    provides an API to perform operations on points, cells, boundaries,
    etc., but does not tie down the underlying implementation and storage.
    A "MeshTraits" structure is used to define the container and
    identifier types that will be used to access the mesh. See
    DefaultStaticMeshTraits for the set of type definitions needed. All
    types that are defined in the "MeshTraits" structure will have
    duplicate type alias in the resulting mesh itself.  Mesh is an
    adaptive, evolving structure. Typically points and cells are created,
    with the cells referring to their defining points. If additional
    topological information is required, then BuildCellLinks() is called
    and links from the points back to the cells that use them are created.
    This allows implicit topological information about the faces and edges
    of the cells to be determined. (For example, a "face" neighbor to a
    cell can be determined by intersection the sets of cells that use the
    points defining the face. This is an inherent assumption on the
    manifold relationship of the cells in the mesh.) In some cases, either
    because the mesh is non-manifold, because we wish to explicitly store
    information with the faces and edges of the mesh, or because
    performance requirements demand that boundaries are explicitly
    represented (the set intersection does not need to be performed); then
    Mesh can be further extended by adding explicit boundary assignments.

    Usage  Mesh has three template parameters. The first is the pixel
    type, or the type of data stored (optionally) with points, cells,
    and/or boundaries. The second is the geometric dimension of the points
    defining the mesh. This also limits the maximum topological dimension
    of the cells that can be inserted. The third template parameter is the
    "MeshTraits" structure controlling type information for the mesh.
    Most users will be happy with the defaults, and will not have to worry
    about this third argument.  One of the most important parts of using
    this mesh is how to create cells to insert into it. The cells for the
    mesh take two template parameters. The first is the pixel type, and
    should correspond exactly to that type given to the mesh. The second
    is a "CellTraits" which holds a sub-set of the "MeshTraits"
    structure definitions, and is also a member of them. Any cell which is
    to be inserted to a mesh should have MeshTraits::CellTraits as its
    second template parameter.

    Template parameters for Mesh:

    TPixelType = The type stored as data for an entity (cell, point, or
    boundary).

    TMeshTraits = Type information structure for the mesh.

    References No reference information is available.
    {Core/Mesh/AddPointsAndEdges,Add Points And Edges}
    {Core/Mesh/ConvertMeshToUnstructeredGrid,Convert Mesh To Unstructered
    Grid} {Core/Mesh/WorkingWithPointAndCellData,Working With Point And
    Cell Data} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMeshBasePython.itkMeshUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkMeshBasePython.itkMeshUC2_Clone)
    GetNumberOfCells = _swig_new_instance_method(_itkMeshBasePython.itkMeshUC2_GetNumberOfCells)
    PassStructure = _swig_new_instance_method(_itkMeshBasePython.itkMeshUC2_PassStructure)
    GetBoundingBox = _swig_new_instance_method(_itkMeshBasePython.itkMeshUC2_GetBoundingBox)
    SetCellLinks = _swig_new_instance_method(_itkMeshBasePython.itkMeshUC2_SetCellLinks)
    GetCellLinks = _swig_new_instance_method(_itkMeshBasePython.itkMeshUC2_GetCellLinks)
    SetCells = _swig_new_instance_method(_itkMeshBasePython.itkMeshUC2_SetCells)
    GetCells = _swig_new_instance_method(_itkMeshBasePython.itkMeshUC2_GetCells)
    DeleteUnusedCellData = _swig_new_instance_method(_itkMeshBasePython.itkMeshUC2_DeleteUnusedCellData)
    SetCell = _swig_new_instance_method(_itkMeshBasePython.itkMeshUC2_SetCell)
    GetCell = _swig_new_instance_method(_itkMeshBasePython.itkMeshUC2_GetCell)
    SetCellData = _swig_new_instance_method(_itkMeshBasePython.itkMeshUC2_SetCellData)
    GetCellData = _swig_new_instance_method(_itkMeshBasePython.itkMeshUC2_GetCellData)
    SetBoundaryAssignment = _swig_new_instance_method(_itkMeshBasePython.itkMeshUC2_SetBoundaryAssignment)
    GetBoundaryAssignment = _swig_new_instance_method(_itkMeshBasePython.itkMeshUC2_GetBoundaryAssignment)
    RemoveBoundaryAssignment = _swig_new_instance_method(_itkMeshBasePython.itkMeshUC2_RemoveBoundaryAssignment)
    GetNumberOfCellBoundaryFeatures = _swig_new_instance_method(_itkMeshBasePython.itkMeshUC2_GetNumberOfCellBoundaryFeatures)
    GetCellBoundaryFeature = _swig_new_instance_method(_itkMeshBasePython.itkMeshUC2_GetCellBoundaryFeature)
    GetCellBoundaryFeatureNeighbors = _swig_new_instance_method(_itkMeshBasePython.itkMeshUC2_GetCellBoundaryFeatureNeighbors)
    GetCellNeighbors = _swig_new_instance_method(_itkMeshBasePython.itkMeshUC2_GetCellNeighbors)
    GetAssignedCellBoundaryIfOneExists = _swig_new_instance_method(_itkMeshBasePython.itkMeshUC2_GetAssignedCellBoundaryIfOneExists)
    BuildCellLinks = _swig_new_instance_method(_itkMeshBasePython.itkMeshUC2_BuildCellLinks)
    Accept = _swig_new_instance_method(_itkMeshBasePython.itkMeshUC2_Accept)
    SetCellsAllocationMethod = _swig_new_instance_method(_itkMeshBasePython.itkMeshUC2_SetCellsAllocationMethod)
    GetCellsAllocationMethod = _swig_new_instance_method(_itkMeshBasePython.itkMeshUC2_GetCellsAllocationMethod)
    __swig_destroy__ = _itkMeshBasePython.delete_itkMeshUC2
    cast = _swig_new_static_method(_itkMeshBasePython.itkMeshUC2_cast)

    def New(*args, **kargs):
        """New() -> itkMeshUC2

        Create a new object of the class itkMeshUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeshUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeshUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshUC2 in _itkMeshBasePython:
_itkMeshBasePython.itkMeshUC2_swigregister(itkMeshUC2)
itkMeshUC2___New_orig__ = _itkMeshBasePython.itkMeshUC2___New_orig__
itkMeshUC2_cast = _itkMeshBasePython.itkMeshUC2_cast


def itkMeshUC3_New():
    return itkMeshUC3.New()

class itkMeshUC3(itk.itkPointSetPython.itkPointSetUC3):
    r"""


    Implements the N-dimensional mesh structure.

    Overview  Mesh implements the N-dimensional mesh structure for ITK. It
    provides an API to perform operations on points, cells, boundaries,
    etc., but does not tie down the underlying implementation and storage.
    A "MeshTraits" structure is used to define the container and
    identifier types that will be used to access the mesh. See
    DefaultStaticMeshTraits for the set of type definitions needed. All
    types that are defined in the "MeshTraits" structure will have
    duplicate type alias in the resulting mesh itself.  Mesh is an
    adaptive, evolving structure. Typically points and cells are created,
    with the cells referring to their defining points. If additional
    topological information is required, then BuildCellLinks() is called
    and links from the points back to the cells that use them are created.
    This allows implicit topological information about the faces and edges
    of the cells to be determined. (For example, a "face" neighbor to a
    cell can be determined by intersection the sets of cells that use the
    points defining the face. This is an inherent assumption on the
    manifold relationship of the cells in the mesh.) In some cases, either
    because the mesh is non-manifold, because we wish to explicitly store
    information with the faces and edges of the mesh, or because
    performance requirements demand that boundaries are explicitly
    represented (the set intersection does not need to be performed); then
    Mesh can be further extended by adding explicit boundary assignments.

    Usage  Mesh has three template parameters. The first is the pixel
    type, or the type of data stored (optionally) with points, cells,
    and/or boundaries. The second is the geometric dimension of the points
    defining the mesh. This also limits the maximum topological dimension
    of the cells that can be inserted. The third template parameter is the
    "MeshTraits" structure controlling type information for the mesh.
    Most users will be happy with the defaults, and will not have to worry
    about this third argument.  One of the most important parts of using
    this mesh is how to create cells to insert into it. The cells for the
    mesh take two template parameters. The first is the pixel type, and
    should correspond exactly to that type given to the mesh. The second
    is a "CellTraits" which holds a sub-set of the "MeshTraits"
    structure definitions, and is also a member of them. Any cell which is
    to be inserted to a mesh should have MeshTraits::CellTraits as its
    second template parameter.

    Template parameters for Mesh:

    TPixelType = The type stored as data for an entity (cell, point, or
    boundary).

    TMeshTraits = Type information structure for the mesh.

    References No reference information is available.
    {Core/Mesh/AddPointsAndEdges,Add Points And Edges}
    {Core/Mesh/ConvertMeshToUnstructeredGrid,Convert Mesh To Unstructered
    Grid} {Core/Mesh/WorkingWithPointAndCellData,Working With Point And
    Cell Data} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMeshBasePython.itkMeshUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkMeshBasePython.itkMeshUC3_Clone)
    GetNumberOfCells = _swig_new_instance_method(_itkMeshBasePython.itkMeshUC3_GetNumberOfCells)
    PassStructure = _swig_new_instance_method(_itkMeshBasePython.itkMeshUC3_PassStructure)
    GetBoundingBox = _swig_new_instance_method(_itkMeshBasePython.itkMeshUC3_GetBoundingBox)
    SetCellLinks = _swig_new_instance_method(_itkMeshBasePython.itkMeshUC3_SetCellLinks)
    GetCellLinks = _swig_new_instance_method(_itkMeshBasePython.itkMeshUC3_GetCellLinks)
    SetCells = _swig_new_instance_method(_itkMeshBasePython.itkMeshUC3_SetCells)
    GetCells = _swig_new_instance_method(_itkMeshBasePython.itkMeshUC3_GetCells)
    DeleteUnusedCellData = _swig_new_instance_method(_itkMeshBasePython.itkMeshUC3_DeleteUnusedCellData)
    SetCell = _swig_new_instance_method(_itkMeshBasePython.itkMeshUC3_SetCell)
    GetCell = _swig_new_instance_method(_itkMeshBasePython.itkMeshUC3_GetCell)
    SetCellData = _swig_new_instance_method(_itkMeshBasePython.itkMeshUC3_SetCellData)
    GetCellData = _swig_new_instance_method(_itkMeshBasePython.itkMeshUC3_GetCellData)
    SetBoundaryAssignment = _swig_new_instance_method(_itkMeshBasePython.itkMeshUC3_SetBoundaryAssignment)
    GetBoundaryAssignment = _swig_new_instance_method(_itkMeshBasePython.itkMeshUC3_GetBoundaryAssignment)
    RemoveBoundaryAssignment = _swig_new_instance_method(_itkMeshBasePython.itkMeshUC3_RemoveBoundaryAssignment)
    GetNumberOfCellBoundaryFeatures = _swig_new_instance_method(_itkMeshBasePython.itkMeshUC3_GetNumberOfCellBoundaryFeatures)
    GetCellBoundaryFeature = _swig_new_instance_method(_itkMeshBasePython.itkMeshUC3_GetCellBoundaryFeature)
    GetCellBoundaryFeatureNeighbors = _swig_new_instance_method(_itkMeshBasePython.itkMeshUC3_GetCellBoundaryFeatureNeighbors)
    GetCellNeighbors = _swig_new_instance_method(_itkMeshBasePython.itkMeshUC3_GetCellNeighbors)
    GetAssignedCellBoundaryIfOneExists = _swig_new_instance_method(_itkMeshBasePython.itkMeshUC3_GetAssignedCellBoundaryIfOneExists)
    BuildCellLinks = _swig_new_instance_method(_itkMeshBasePython.itkMeshUC3_BuildCellLinks)
    Accept = _swig_new_instance_method(_itkMeshBasePython.itkMeshUC3_Accept)
    SetCellsAllocationMethod = _swig_new_instance_method(_itkMeshBasePython.itkMeshUC3_SetCellsAllocationMethod)
    GetCellsAllocationMethod = _swig_new_instance_method(_itkMeshBasePython.itkMeshUC3_GetCellsAllocationMethod)
    __swig_destroy__ = _itkMeshBasePython.delete_itkMeshUC3
    cast = _swig_new_static_method(_itkMeshBasePython.itkMeshUC3_cast)

    def New(*args, **kargs):
        """New() -> itkMeshUC3

        Create a new object of the class itkMeshUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeshUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeshUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshUC3 in _itkMeshBasePython:
_itkMeshBasePython.itkMeshUC3_swigregister(itkMeshUC3)
itkMeshUC3___New_orig__ = _itkMeshBasePython.itkMeshUC3___New_orig__
itkMeshUC3_cast = _itkMeshBasePython.itkMeshUC3_cast


def itkMeshUS2_New():
    return itkMeshUS2.New()

class itkMeshUS2(itk.itkPointSetPython.itkPointSetUS2):
    r"""


    Implements the N-dimensional mesh structure.

    Overview  Mesh implements the N-dimensional mesh structure for ITK. It
    provides an API to perform operations on points, cells, boundaries,
    etc., but does not tie down the underlying implementation and storage.
    A "MeshTraits" structure is used to define the container and
    identifier types that will be used to access the mesh. See
    DefaultStaticMeshTraits for the set of type definitions needed. All
    types that are defined in the "MeshTraits" structure will have
    duplicate type alias in the resulting mesh itself.  Mesh is an
    adaptive, evolving structure. Typically points and cells are created,
    with the cells referring to their defining points. If additional
    topological information is required, then BuildCellLinks() is called
    and links from the points back to the cells that use them are created.
    This allows implicit topological information about the faces and edges
    of the cells to be determined. (For example, a "face" neighbor to a
    cell can be determined by intersection the sets of cells that use the
    points defining the face. This is an inherent assumption on the
    manifold relationship of the cells in the mesh.) In some cases, either
    because the mesh is non-manifold, because we wish to explicitly store
    information with the faces and edges of the mesh, or because
    performance requirements demand that boundaries are explicitly
    represented (the set intersection does not need to be performed); then
    Mesh can be further extended by adding explicit boundary assignments.

    Usage  Mesh has three template parameters. The first is the pixel
    type, or the type of data stored (optionally) with points, cells,
    and/or boundaries. The second is the geometric dimension of the points
    defining the mesh. This also limits the maximum topological dimension
    of the cells that can be inserted. The third template parameter is the
    "MeshTraits" structure controlling type information for the mesh.
    Most users will be happy with the defaults, and will not have to worry
    about this third argument.  One of the most important parts of using
    this mesh is how to create cells to insert into it. The cells for the
    mesh take two template parameters. The first is the pixel type, and
    should correspond exactly to that type given to the mesh. The second
    is a "CellTraits" which holds a sub-set of the "MeshTraits"
    structure definitions, and is also a member of them. Any cell which is
    to be inserted to a mesh should have MeshTraits::CellTraits as its
    second template parameter.

    Template parameters for Mesh:

    TPixelType = The type stored as data for an entity (cell, point, or
    boundary).

    TMeshTraits = Type information structure for the mesh.

    References No reference information is available.
    {Core/Mesh/AddPointsAndEdges,Add Points And Edges}
    {Core/Mesh/ConvertMeshToUnstructeredGrid,Convert Mesh To Unstructered
    Grid} {Core/Mesh/WorkingWithPointAndCellData,Working With Point And
    Cell Data} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMeshBasePython.itkMeshUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkMeshBasePython.itkMeshUS2_Clone)
    GetNumberOfCells = _swig_new_instance_method(_itkMeshBasePython.itkMeshUS2_GetNumberOfCells)
    PassStructure = _swig_new_instance_method(_itkMeshBasePython.itkMeshUS2_PassStructure)
    GetBoundingBox = _swig_new_instance_method(_itkMeshBasePython.itkMeshUS2_GetBoundingBox)
    SetCellLinks = _swig_new_instance_method(_itkMeshBasePython.itkMeshUS2_SetCellLinks)
    GetCellLinks = _swig_new_instance_method(_itkMeshBasePython.itkMeshUS2_GetCellLinks)
    SetCells = _swig_new_instance_method(_itkMeshBasePython.itkMeshUS2_SetCells)
    GetCells = _swig_new_instance_method(_itkMeshBasePython.itkMeshUS2_GetCells)
    DeleteUnusedCellData = _swig_new_instance_method(_itkMeshBasePython.itkMeshUS2_DeleteUnusedCellData)
    SetCell = _swig_new_instance_method(_itkMeshBasePython.itkMeshUS2_SetCell)
    GetCell = _swig_new_instance_method(_itkMeshBasePython.itkMeshUS2_GetCell)
    SetCellData = _swig_new_instance_method(_itkMeshBasePython.itkMeshUS2_SetCellData)
    GetCellData = _swig_new_instance_method(_itkMeshBasePython.itkMeshUS2_GetCellData)
    SetBoundaryAssignment = _swig_new_instance_method(_itkMeshBasePython.itkMeshUS2_SetBoundaryAssignment)
    GetBoundaryAssignment = _swig_new_instance_method(_itkMeshBasePython.itkMeshUS2_GetBoundaryAssignment)
    RemoveBoundaryAssignment = _swig_new_instance_method(_itkMeshBasePython.itkMeshUS2_RemoveBoundaryAssignment)
    GetNumberOfCellBoundaryFeatures = _swig_new_instance_method(_itkMeshBasePython.itkMeshUS2_GetNumberOfCellBoundaryFeatures)
    GetCellBoundaryFeature = _swig_new_instance_method(_itkMeshBasePython.itkMeshUS2_GetCellBoundaryFeature)
    GetCellBoundaryFeatureNeighbors = _swig_new_instance_method(_itkMeshBasePython.itkMeshUS2_GetCellBoundaryFeatureNeighbors)
    GetCellNeighbors = _swig_new_instance_method(_itkMeshBasePython.itkMeshUS2_GetCellNeighbors)
    GetAssignedCellBoundaryIfOneExists = _swig_new_instance_method(_itkMeshBasePython.itkMeshUS2_GetAssignedCellBoundaryIfOneExists)
    BuildCellLinks = _swig_new_instance_method(_itkMeshBasePython.itkMeshUS2_BuildCellLinks)
    Accept = _swig_new_instance_method(_itkMeshBasePython.itkMeshUS2_Accept)
    SetCellsAllocationMethod = _swig_new_instance_method(_itkMeshBasePython.itkMeshUS2_SetCellsAllocationMethod)
    GetCellsAllocationMethod = _swig_new_instance_method(_itkMeshBasePython.itkMeshUS2_GetCellsAllocationMethod)
    __swig_destroy__ = _itkMeshBasePython.delete_itkMeshUS2
    cast = _swig_new_static_method(_itkMeshBasePython.itkMeshUS2_cast)

    def New(*args, **kargs):
        """New() -> itkMeshUS2

        Create a new object of the class itkMeshUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeshUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeshUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshUS2 in _itkMeshBasePython:
_itkMeshBasePython.itkMeshUS2_swigregister(itkMeshUS2)
itkMeshUS2___New_orig__ = _itkMeshBasePython.itkMeshUS2___New_orig__
itkMeshUS2_cast = _itkMeshBasePython.itkMeshUS2_cast


def itkMeshUS3_New():
    return itkMeshUS3.New()

class itkMeshUS3(itk.itkPointSetPython.itkPointSetUS3):
    r"""


    Implements the N-dimensional mesh structure.

    Overview  Mesh implements the N-dimensional mesh structure for ITK. It
    provides an API to perform operations on points, cells, boundaries,
    etc., but does not tie down the underlying implementation and storage.
    A "MeshTraits" structure is used to define the container and
    identifier types that will be used to access the mesh. See
    DefaultStaticMeshTraits for the set of type definitions needed. All
    types that are defined in the "MeshTraits" structure will have
    duplicate type alias in the resulting mesh itself.  Mesh is an
    adaptive, evolving structure. Typically points and cells are created,
    with the cells referring to their defining points. If additional
    topological information is required, then BuildCellLinks() is called
    and links from the points back to the cells that use them are created.
    This allows implicit topological information about the faces and edges
    of the cells to be determined. (For example, a "face" neighbor to a
    cell can be determined by intersection the sets of cells that use the
    points defining the face. This is an inherent assumption on the
    manifold relationship of the cells in the mesh.) In some cases, either
    because the mesh is non-manifold, because we wish to explicitly store
    information with the faces and edges of the mesh, or because
    performance requirements demand that boundaries are explicitly
    represented (the set intersection does not need to be performed); then
    Mesh can be further extended by adding explicit boundary assignments.

    Usage  Mesh has three template parameters. The first is the pixel
    type, or the type of data stored (optionally) with points, cells,
    and/or boundaries. The second is the geometric dimension of the points
    defining the mesh. This also limits the maximum topological dimension
    of the cells that can be inserted. The third template parameter is the
    "MeshTraits" structure controlling type information for the mesh.
    Most users will be happy with the defaults, and will not have to worry
    about this third argument.  One of the most important parts of using
    this mesh is how to create cells to insert into it. The cells for the
    mesh take two template parameters. The first is the pixel type, and
    should correspond exactly to that type given to the mesh. The second
    is a "CellTraits" which holds a sub-set of the "MeshTraits"
    structure definitions, and is also a member of them. Any cell which is
    to be inserted to a mesh should have MeshTraits::CellTraits as its
    second template parameter.

    Template parameters for Mesh:

    TPixelType = The type stored as data for an entity (cell, point, or
    boundary).

    TMeshTraits = Type information structure for the mesh.

    References No reference information is available.
    {Core/Mesh/AddPointsAndEdges,Add Points And Edges}
    {Core/Mesh/ConvertMeshToUnstructeredGrid,Convert Mesh To Unstructered
    Grid} {Core/Mesh/WorkingWithPointAndCellData,Working With Point And
    Cell Data} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMeshBasePython.itkMeshUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkMeshBasePython.itkMeshUS3_Clone)
    GetNumberOfCells = _swig_new_instance_method(_itkMeshBasePython.itkMeshUS3_GetNumberOfCells)
    PassStructure = _swig_new_instance_method(_itkMeshBasePython.itkMeshUS3_PassStructure)
    GetBoundingBox = _swig_new_instance_method(_itkMeshBasePython.itkMeshUS3_GetBoundingBox)
    SetCellLinks = _swig_new_instance_method(_itkMeshBasePython.itkMeshUS3_SetCellLinks)
    GetCellLinks = _swig_new_instance_method(_itkMeshBasePython.itkMeshUS3_GetCellLinks)
    SetCells = _swig_new_instance_method(_itkMeshBasePython.itkMeshUS3_SetCells)
    GetCells = _swig_new_instance_method(_itkMeshBasePython.itkMeshUS3_GetCells)
    DeleteUnusedCellData = _swig_new_instance_method(_itkMeshBasePython.itkMeshUS3_DeleteUnusedCellData)
    SetCell = _swig_new_instance_method(_itkMeshBasePython.itkMeshUS3_SetCell)
    GetCell = _swig_new_instance_method(_itkMeshBasePython.itkMeshUS3_GetCell)
    SetCellData = _swig_new_instance_method(_itkMeshBasePython.itkMeshUS3_SetCellData)
    GetCellData = _swig_new_instance_method(_itkMeshBasePython.itkMeshUS3_GetCellData)
    SetBoundaryAssignment = _swig_new_instance_method(_itkMeshBasePython.itkMeshUS3_SetBoundaryAssignment)
    GetBoundaryAssignment = _swig_new_instance_method(_itkMeshBasePython.itkMeshUS3_GetBoundaryAssignment)
    RemoveBoundaryAssignment = _swig_new_instance_method(_itkMeshBasePython.itkMeshUS3_RemoveBoundaryAssignment)
    GetNumberOfCellBoundaryFeatures = _swig_new_instance_method(_itkMeshBasePython.itkMeshUS3_GetNumberOfCellBoundaryFeatures)
    GetCellBoundaryFeature = _swig_new_instance_method(_itkMeshBasePython.itkMeshUS3_GetCellBoundaryFeature)
    GetCellBoundaryFeatureNeighbors = _swig_new_instance_method(_itkMeshBasePython.itkMeshUS3_GetCellBoundaryFeatureNeighbors)
    GetCellNeighbors = _swig_new_instance_method(_itkMeshBasePython.itkMeshUS3_GetCellNeighbors)
    GetAssignedCellBoundaryIfOneExists = _swig_new_instance_method(_itkMeshBasePython.itkMeshUS3_GetAssignedCellBoundaryIfOneExists)
    BuildCellLinks = _swig_new_instance_method(_itkMeshBasePython.itkMeshUS3_BuildCellLinks)
    Accept = _swig_new_instance_method(_itkMeshBasePython.itkMeshUS3_Accept)
    SetCellsAllocationMethod = _swig_new_instance_method(_itkMeshBasePython.itkMeshUS3_SetCellsAllocationMethod)
    GetCellsAllocationMethod = _swig_new_instance_method(_itkMeshBasePython.itkMeshUS3_GetCellsAllocationMethod)
    __swig_destroy__ = _itkMeshBasePython.delete_itkMeshUS3
    cast = _swig_new_static_method(_itkMeshBasePython.itkMeshUS3_cast)

    def New(*args, **kargs):
        """New() -> itkMeshUS3

        Create a new object of the class itkMeshUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeshUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeshUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshUS3 in _itkMeshBasePython:
_itkMeshBasePython.itkMeshUS3_swigregister(itkMeshUS3)
itkMeshUS3___New_orig__ = _itkMeshBasePython.itkMeshUS3___New_orig__
itkMeshUS3_cast = _itkMeshBasePython.itkMeshUS3_cast


def itkVectorContainerULLCIDCTI2FFULLULLULLPF2VCULLPF2_New():
    return itkVectorContainerULLCIDCTI2FFULLULLULLPF2VCULLPF2.New()

class itkVectorContainerULLCIDCTI2FFULLULLULLPF2VCULLPF2(itk.ITKCommonBasePython.itkObject):
    r"""


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    {Core/Common/IterateOnAVectorContainer,Iterate On A Vector Container}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMeshBasePython.itkVectorContainerULLCIDCTI2FFULLULLULLPF2VCULLPF2___New_orig__)
    Clone = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIDCTI2FFULLULLULLPF2VCULLPF2_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIDCTI2FFULLULLULLPF2VCULLPF2_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIDCTI2FFULLULLULLPF2VCULLPF2_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIDCTI2FFULLULLULLPF2VCULLPF2_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIDCTI2FFULLULLULLPF2VCULLPF2_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIDCTI2FFULLULLULLPF2VCULLPF2_GetElement)
    SetElement = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIDCTI2FFULLULLULLPF2VCULLPF2_SetElement)
    InsertElement = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIDCTI2FFULLULLULLPF2VCULLPF2_InsertElement)
    IndexExists = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIDCTI2FFULLULLULLPF2VCULLPF2_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIDCTI2FFULLULLULLPF2VCULLPF2_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIDCTI2FFULLULLULLPF2VCULLPF2_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIDCTI2FFULLULLULLPF2VCULLPF2_DeleteIndex)
    Size = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIDCTI2FFULLULLULLPF2VCULLPF2_Size)
    Reserve = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIDCTI2FFULLULLULLPF2VCULLPF2_Reserve)
    Squeeze = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIDCTI2FFULLULLULLPF2VCULLPF2_Squeeze)
    Initialize = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIDCTI2FFULLULLULLPF2VCULLPF2_Initialize)
    __swig_destroy__ = _itkMeshBasePython.delete_itkVectorContainerULLCIDCTI2FFULLULLULLPF2VCULLPF2
    cast = _swig_new_static_method(_itkMeshBasePython.itkVectorContainerULLCIDCTI2FFULLULLULLPF2VCULLPF2_cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLCIDCTI2FFULLULLULLPF2VCULLPF2

        Create a new object of the class itkVectorContainerULLCIDCTI2FFULLULLULLPF2VCULLPF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLCIDCTI2FFULLULLULLPF2VCULLPF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLCIDCTI2FFULLULLULLPF2VCULLPF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLCIDCTI2FFULLULLULLPF2VCULLPF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLCIDCTI2FFULLULLULLPF2VCULLPF2 in _itkMeshBasePython:
_itkMeshBasePython.itkVectorContainerULLCIDCTI2FFULLULLULLPF2VCULLPF2_swigregister(itkVectorContainerULLCIDCTI2FFULLULLULLPF2VCULLPF2)
itkVectorContainerULLCIDCTI2FFULLULLULLPF2VCULLPF2___New_orig__ = _itkMeshBasePython.itkVectorContainerULLCIDCTI2FFULLULLULLPF2VCULLPF2___New_orig__
itkVectorContainerULLCIDCTI2FFULLULLULLPF2VCULLPF2_cast = _itkMeshBasePython.itkVectorContainerULLCIDCTI2FFULLULLULLPF2VCULLPF2_cast


def itkVectorContainerULLCIDCTI3FFULLULLULLPF3VCULLPF3_New():
    return itkVectorContainerULLCIDCTI3FFULLULLULLPF3VCULLPF3.New()

class itkVectorContainerULLCIDCTI3FFULLULLULLPF3VCULLPF3(itk.ITKCommonBasePython.itkObject):
    r"""


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    {Core/Common/IterateOnAVectorContainer,Iterate On A Vector Container}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMeshBasePython.itkVectorContainerULLCIDCTI3FFULLULLULLPF3VCULLPF3___New_orig__)
    Clone = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIDCTI3FFULLULLULLPF3VCULLPF3_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIDCTI3FFULLULLULLPF3VCULLPF3_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIDCTI3FFULLULLULLPF3VCULLPF3_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIDCTI3FFULLULLULLPF3VCULLPF3_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIDCTI3FFULLULLULLPF3VCULLPF3_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIDCTI3FFULLULLULLPF3VCULLPF3_GetElement)
    SetElement = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIDCTI3FFULLULLULLPF3VCULLPF3_SetElement)
    InsertElement = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIDCTI3FFULLULLULLPF3VCULLPF3_InsertElement)
    IndexExists = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIDCTI3FFULLULLULLPF3VCULLPF3_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIDCTI3FFULLULLULLPF3VCULLPF3_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIDCTI3FFULLULLULLPF3VCULLPF3_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIDCTI3FFULLULLULLPF3VCULLPF3_DeleteIndex)
    Size = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIDCTI3FFULLULLULLPF3VCULLPF3_Size)
    Reserve = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIDCTI3FFULLULLULLPF3VCULLPF3_Reserve)
    Squeeze = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIDCTI3FFULLULLULLPF3VCULLPF3_Squeeze)
    Initialize = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIDCTI3FFULLULLULLPF3VCULLPF3_Initialize)
    __swig_destroy__ = _itkMeshBasePython.delete_itkVectorContainerULLCIDCTI3FFULLULLULLPF3VCULLPF3
    cast = _swig_new_static_method(_itkMeshBasePython.itkVectorContainerULLCIDCTI3FFULLULLULLPF3VCULLPF3_cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLCIDCTI3FFULLULLULLPF3VCULLPF3

        Create a new object of the class itkVectorContainerULLCIDCTI3FFULLULLULLPF3VCULLPF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLCIDCTI3FFULLULLULLPF3VCULLPF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLCIDCTI3FFULLULLULLPF3VCULLPF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLCIDCTI3FFULLULLULLPF3VCULLPF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLCIDCTI3FFULLULLULLPF3VCULLPF3 in _itkMeshBasePython:
_itkMeshBasePython.itkVectorContainerULLCIDCTI3FFULLULLULLPF3VCULLPF3_swigregister(itkVectorContainerULLCIDCTI3FFULLULLULLPF3VCULLPF3)
itkVectorContainerULLCIDCTI3FFULLULLULLPF3VCULLPF3___New_orig__ = _itkMeshBasePython.itkVectorContainerULLCIDCTI3FFULLULLULLPF3VCULLPF3___New_orig__
itkVectorContainerULLCIDCTI3FFULLULLULLPF3VCULLPF3_cast = _itkMeshBasePython.itkVectorContainerULLCIDCTI3FFULLULLULLPF3VCULLPF3_cast


def itkVectorContainerULLCIFCTI2FFULLULLULLPF2VCULLPF2_New():
    return itkVectorContainerULLCIFCTI2FFULLULLULLPF2VCULLPF2.New()

class itkVectorContainerULLCIFCTI2FFULLULLULLPF2VCULLPF2(itk.ITKCommonBasePython.itkObject):
    r"""


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    {Core/Common/IterateOnAVectorContainer,Iterate On A Vector Container}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMeshBasePython.itkVectorContainerULLCIFCTI2FFULLULLULLPF2VCULLPF2___New_orig__)
    Clone = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIFCTI2FFULLULLULLPF2VCULLPF2_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIFCTI2FFULLULLULLPF2VCULLPF2_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIFCTI2FFULLULLULLPF2VCULLPF2_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIFCTI2FFULLULLULLPF2VCULLPF2_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIFCTI2FFULLULLULLPF2VCULLPF2_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIFCTI2FFULLULLULLPF2VCULLPF2_GetElement)
    SetElement = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIFCTI2FFULLULLULLPF2VCULLPF2_SetElement)
    InsertElement = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIFCTI2FFULLULLULLPF2VCULLPF2_InsertElement)
    IndexExists = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIFCTI2FFULLULLULLPF2VCULLPF2_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIFCTI2FFULLULLULLPF2VCULLPF2_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIFCTI2FFULLULLULLPF2VCULLPF2_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIFCTI2FFULLULLULLPF2VCULLPF2_DeleteIndex)
    Size = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIFCTI2FFULLULLULLPF2VCULLPF2_Size)
    Reserve = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIFCTI2FFULLULLULLPF2VCULLPF2_Reserve)
    Squeeze = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIFCTI2FFULLULLULLPF2VCULLPF2_Squeeze)
    Initialize = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIFCTI2FFULLULLULLPF2VCULLPF2_Initialize)
    __swig_destroy__ = _itkMeshBasePython.delete_itkVectorContainerULLCIFCTI2FFULLULLULLPF2VCULLPF2
    cast = _swig_new_static_method(_itkMeshBasePython.itkVectorContainerULLCIFCTI2FFULLULLULLPF2VCULLPF2_cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLCIFCTI2FFULLULLULLPF2VCULLPF2

        Create a new object of the class itkVectorContainerULLCIFCTI2FFULLULLULLPF2VCULLPF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLCIFCTI2FFULLULLULLPF2VCULLPF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLCIFCTI2FFULLULLULLPF2VCULLPF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLCIFCTI2FFULLULLULLPF2VCULLPF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLCIFCTI2FFULLULLULLPF2VCULLPF2 in _itkMeshBasePython:
_itkMeshBasePython.itkVectorContainerULLCIFCTI2FFULLULLULLPF2VCULLPF2_swigregister(itkVectorContainerULLCIFCTI2FFULLULLULLPF2VCULLPF2)
itkVectorContainerULLCIFCTI2FFULLULLULLPF2VCULLPF2___New_orig__ = _itkMeshBasePython.itkVectorContainerULLCIFCTI2FFULLULLULLPF2VCULLPF2___New_orig__
itkVectorContainerULLCIFCTI2FFULLULLULLPF2VCULLPF2_cast = _itkMeshBasePython.itkVectorContainerULLCIFCTI2FFULLULLULLPF2VCULLPF2_cast


def itkVectorContainerULLCIFCTI3FFULLULLULLPF3VCULLPF3_New():
    return itkVectorContainerULLCIFCTI3FFULLULLULLPF3VCULLPF3.New()

class itkVectorContainerULLCIFCTI3FFULLULLULLPF3VCULLPF3(itk.ITKCommonBasePython.itkObject):
    r"""


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    {Core/Common/IterateOnAVectorContainer,Iterate On A Vector Container}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMeshBasePython.itkVectorContainerULLCIFCTI3FFULLULLULLPF3VCULLPF3___New_orig__)
    Clone = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIFCTI3FFULLULLULLPF3VCULLPF3_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIFCTI3FFULLULLULLPF3VCULLPF3_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIFCTI3FFULLULLULLPF3VCULLPF3_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIFCTI3FFULLULLULLPF3VCULLPF3_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIFCTI3FFULLULLULLPF3VCULLPF3_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIFCTI3FFULLULLULLPF3VCULLPF3_GetElement)
    SetElement = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIFCTI3FFULLULLULLPF3VCULLPF3_SetElement)
    InsertElement = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIFCTI3FFULLULLULLPF3VCULLPF3_InsertElement)
    IndexExists = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIFCTI3FFULLULLULLPF3VCULLPF3_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIFCTI3FFULLULLULLPF3VCULLPF3_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIFCTI3FFULLULLULLPF3VCULLPF3_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIFCTI3FFULLULLULLPF3VCULLPF3_DeleteIndex)
    Size = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIFCTI3FFULLULLULLPF3VCULLPF3_Size)
    Reserve = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIFCTI3FFULLULLULLPF3VCULLPF3_Reserve)
    Squeeze = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIFCTI3FFULLULLULLPF3VCULLPF3_Squeeze)
    Initialize = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIFCTI3FFULLULLULLPF3VCULLPF3_Initialize)
    __swig_destroy__ = _itkMeshBasePython.delete_itkVectorContainerULLCIFCTI3FFULLULLULLPF3VCULLPF3
    cast = _swig_new_static_method(_itkMeshBasePython.itkVectorContainerULLCIFCTI3FFULLULLULLPF3VCULLPF3_cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLCIFCTI3FFULLULLULLPF3VCULLPF3

        Create a new object of the class itkVectorContainerULLCIFCTI3FFULLULLULLPF3VCULLPF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLCIFCTI3FFULLULLULLPF3VCULLPF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLCIFCTI3FFULLULLULLPF3VCULLPF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLCIFCTI3FFULLULLULLPF3VCULLPF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLCIFCTI3FFULLULLULLPF3VCULLPF3 in _itkMeshBasePython:
_itkMeshBasePython.itkVectorContainerULLCIFCTI3FFULLULLULLPF3VCULLPF3_swigregister(itkVectorContainerULLCIFCTI3FFULLULLULLPF3VCULLPF3)
itkVectorContainerULLCIFCTI3FFULLULLULLPF3VCULLPF3___New_orig__ = _itkMeshBasePython.itkVectorContainerULLCIFCTI3FFULLULLULLPF3VCULLPF3___New_orig__
itkVectorContainerULLCIFCTI3FFULLULLULLPF3VCULLPF3_cast = _itkMeshBasePython.itkVectorContainerULLCIFCTI3FFULLULLULLPF3VCULLPF3_cast


def itkVectorContainerULLCISSCTI2FFULLULLULLPF2VCULLPF2_New():
    return itkVectorContainerULLCISSCTI2FFULLULLULLPF2VCULLPF2.New()

class itkVectorContainerULLCISSCTI2FFULLULLULLPF2VCULLPF2(itk.ITKCommonBasePython.itkObject):
    r"""


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    {Core/Common/IterateOnAVectorContainer,Iterate On A Vector Container}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMeshBasePython.itkVectorContainerULLCISSCTI2FFULLULLULLPF2VCULLPF2___New_orig__)
    Clone = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCISSCTI2FFULLULLULLPF2VCULLPF2_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCISSCTI2FFULLULLULLPF2VCULLPF2_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCISSCTI2FFULLULLULLPF2VCULLPF2_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCISSCTI2FFULLULLULLPF2VCULLPF2_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCISSCTI2FFULLULLULLPF2VCULLPF2_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCISSCTI2FFULLULLULLPF2VCULLPF2_GetElement)
    SetElement = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCISSCTI2FFULLULLULLPF2VCULLPF2_SetElement)
    InsertElement = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCISSCTI2FFULLULLULLPF2VCULLPF2_InsertElement)
    IndexExists = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCISSCTI2FFULLULLULLPF2VCULLPF2_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCISSCTI2FFULLULLULLPF2VCULLPF2_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCISSCTI2FFULLULLULLPF2VCULLPF2_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCISSCTI2FFULLULLULLPF2VCULLPF2_DeleteIndex)
    Size = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCISSCTI2FFULLULLULLPF2VCULLPF2_Size)
    Reserve = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCISSCTI2FFULLULLULLPF2VCULLPF2_Reserve)
    Squeeze = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCISSCTI2FFULLULLULLPF2VCULLPF2_Squeeze)
    Initialize = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCISSCTI2FFULLULLULLPF2VCULLPF2_Initialize)
    __swig_destroy__ = _itkMeshBasePython.delete_itkVectorContainerULLCISSCTI2FFULLULLULLPF2VCULLPF2
    cast = _swig_new_static_method(_itkMeshBasePython.itkVectorContainerULLCISSCTI2FFULLULLULLPF2VCULLPF2_cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLCISSCTI2FFULLULLULLPF2VCULLPF2

        Create a new object of the class itkVectorContainerULLCISSCTI2FFULLULLULLPF2VCULLPF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLCISSCTI2FFULLULLULLPF2VCULLPF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLCISSCTI2FFULLULLULLPF2VCULLPF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLCISSCTI2FFULLULLULLPF2VCULLPF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLCISSCTI2FFULLULLULLPF2VCULLPF2 in _itkMeshBasePython:
_itkMeshBasePython.itkVectorContainerULLCISSCTI2FFULLULLULLPF2VCULLPF2_swigregister(itkVectorContainerULLCISSCTI2FFULLULLULLPF2VCULLPF2)
itkVectorContainerULLCISSCTI2FFULLULLULLPF2VCULLPF2___New_orig__ = _itkMeshBasePython.itkVectorContainerULLCISSCTI2FFULLULLULLPF2VCULLPF2___New_orig__
itkVectorContainerULLCISSCTI2FFULLULLULLPF2VCULLPF2_cast = _itkMeshBasePython.itkVectorContainerULLCISSCTI2FFULLULLULLPF2VCULLPF2_cast


def itkVectorContainerULLCISSCTI3FFULLULLULLPF3VCULLPF3_New():
    return itkVectorContainerULLCISSCTI3FFULLULLULLPF3VCULLPF3.New()

class itkVectorContainerULLCISSCTI3FFULLULLULLPF3VCULLPF3(itk.ITKCommonBasePython.itkObject):
    r"""


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    {Core/Common/IterateOnAVectorContainer,Iterate On A Vector Container}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMeshBasePython.itkVectorContainerULLCISSCTI3FFULLULLULLPF3VCULLPF3___New_orig__)
    Clone = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCISSCTI3FFULLULLULLPF3VCULLPF3_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCISSCTI3FFULLULLULLPF3VCULLPF3_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCISSCTI3FFULLULLULLPF3VCULLPF3_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCISSCTI3FFULLULLULLPF3VCULLPF3_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCISSCTI3FFULLULLULLPF3VCULLPF3_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCISSCTI3FFULLULLULLPF3VCULLPF3_GetElement)
    SetElement = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCISSCTI3FFULLULLULLPF3VCULLPF3_SetElement)
    InsertElement = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCISSCTI3FFULLULLULLPF3VCULLPF3_InsertElement)
    IndexExists = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCISSCTI3FFULLULLULLPF3VCULLPF3_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCISSCTI3FFULLULLULLPF3VCULLPF3_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCISSCTI3FFULLULLULLPF3VCULLPF3_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCISSCTI3FFULLULLULLPF3VCULLPF3_DeleteIndex)
    Size = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCISSCTI3FFULLULLULLPF3VCULLPF3_Size)
    Reserve = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCISSCTI3FFULLULLULLPF3VCULLPF3_Reserve)
    Squeeze = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCISSCTI3FFULLULLULLPF3VCULLPF3_Squeeze)
    Initialize = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCISSCTI3FFULLULLULLPF3VCULLPF3_Initialize)
    __swig_destroy__ = _itkMeshBasePython.delete_itkVectorContainerULLCISSCTI3FFULLULLULLPF3VCULLPF3
    cast = _swig_new_static_method(_itkMeshBasePython.itkVectorContainerULLCISSCTI3FFULLULLULLPF3VCULLPF3_cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLCISSCTI3FFULLULLULLPF3VCULLPF3

        Create a new object of the class itkVectorContainerULLCISSCTI3FFULLULLULLPF3VCULLPF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLCISSCTI3FFULLULLULLPF3VCULLPF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLCISSCTI3FFULLULLULLPF3VCULLPF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLCISSCTI3FFULLULLULLPF3VCULLPF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLCISSCTI3FFULLULLULLPF3VCULLPF3 in _itkMeshBasePython:
_itkMeshBasePython.itkVectorContainerULLCISSCTI3FFULLULLULLPF3VCULLPF3_swigregister(itkVectorContainerULLCISSCTI3FFULLULLULLPF3VCULLPF3)
itkVectorContainerULLCISSCTI3FFULLULLULLPF3VCULLPF3___New_orig__ = _itkMeshBasePython.itkVectorContainerULLCISSCTI3FFULLULLULLPF3VCULLPF3___New_orig__
itkVectorContainerULLCISSCTI3FFULLULLULLPF3VCULLPF3_cast = _itkMeshBasePython.itkVectorContainerULLCISSCTI3FFULLULLULLPF3VCULLPF3_cast


def itkVectorContainerULLCIUCCTI2FFULLULLULLPF2VCULLPF2_New():
    return itkVectorContainerULLCIUCCTI2FFULLULLULLPF2VCULLPF2.New()

class itkVectorContainerULLCIUCCTI2FFULLULLULLPF2VCULLPF2(itk.ITKCommonBasePython.itkObject):
    r"""


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    {Core/Common/IterateOnAVectorContainer,Iterate On A Vector Container}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMeshBasePython.itkVectorContainerULLCIUCCTI2FFULLULLULLPF2VCULLPF2___New_orig__)
    Clone = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUCCTI2FFULLULLULLPF2VCULLPF2_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUCCTI2FFULLULLULLPF2VCULLPF2_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUCCTI2FFULLULLULLPF2VCULLPF2_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUCCTI2FFULLULLULLPF2VCULLPF2_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUCCTI2FFULLULLULLPF2VCULLPF2_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUCCTI2FFULLULLULLPF2VCULLPF2_GetElement)
    SetElement = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUCCTI2FFULLULLULLPF2VCULLPF2_SetElement)
    InsertElement = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUCCTI2FFULLULLULLPF2VCULLPF2_InsertElement)
    IndexExists = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUCCTI2FFULLULLULLPF2VCULLPF2_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUCCTI2FFULLULLULLPF2VCULLPF2_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUCCTI2FFULLULLULLPF2VCULLPF2_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUCCTI2FFULLULLULLPF2VCULLPF2_DeleteIndex)
    Size = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUCCTI2FFULLULLULLPF2VCULLPF2_Size)
    Reserve = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUCCTI2FFULLULLULLPF2VCULLPF2_Reserve)
    Squeeze = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUCCTI2FFULLULLULLPF2VCULLPF2_Squeeze)
    Initialize = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUCCTI2FFULLULLULLPF2VCULLPF2_Initialize)
    __swig_destroy__ = _itkMeshBasePython.delete_itkVectorContainerULLCIUCCTI2FFULLULLULLPF2VCULLPF2
    cast = _swig_new_static_method(_itkMeshBasePython.itkVectorContainerULLCIUCCTI2FFULLULLULLPF2VCULLPF2_cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLCIUCCTI2FFULLULLULLPF2VCULLPF2

        Create a new object of the class itkVectorContainerULLCIUCCTI2FFULLULLULLPF2VCULLPF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLCIUCCTI2FFULLULLULLPF2VCULLPF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLCIUCCTI2FFULLULLULLPF2VCULLPF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLCIUCCTI2FFULLULLULLPF2VCULLPF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLCIUCCTI2FFULLULLULLPF2VCULLPF2 in _itkMeshBasePython:
_itkMeshBasePython.itkVectorContainerULLCIUCCTI2FFULLULLULLPF2VCULLPF2_swigregister(itkVectorContainerULLCIUCCTI2FFULLULLULLPF2VCULLPF2)
itkVectorContainerULLCIUCCTI2FFULLULLULLPF2VCULLPF2___New_orig__ = _itkMeshBasePython.itkVectorContainerULLCIUCCTI2FFULLULLULLPF2VCULLPF2___New_orig__
itkVectorContainerULLCIUCCTI2FFULLULLULLPF2VCULLPF2_cast = _itkMeshBasePython.itkVectorContainerULLCIUCCTI2FFULLULLULLPF2VCULLPF2_cast


def itkVectorContainerULLCIUCCTI3FFULLULLULLPF3VCULLPF3_New():
    return itkVectorContainerULLCIUCCTI3FFULLULLULLPF3VCULLPF3.New()

class itkVectorContainerULLCIUCCTI3FFULLULLULLPF3VCULLPF3(itk.ITKCommonBasePython.itkObject):
    r"""


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    {Core/Common/IterateOnAVectorContainer,Iterate On A Vector Container}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMeshBasePython.itkVectorContainerULLCIUCCTI3FFULLULLULLPF3VCULLPF3___New_orig__)
    Clone = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUCCTI3FFULLULLULLPF3VCULLPF3_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUCCTI3FFULLULLULLPF3VCULLPF3_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUCCTI3FFULLULLULLPF3VCULLPF3_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUCCTI3FFULLULLULLPF3VCULLPF3_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUCCTI3FFULLULLULLPF3VCULLPF3_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUCCTI3FFULLULLULLPF3VCULLPF3_GetElement)
    SetElement = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUCCTI3FFULLULLULLPF3VCULLPF3_SetElement)
    InsertElement = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUCCTI3FFULLULLULLPF3VCULLPF3_InsertElement)
    IndexExists = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUCCTI3FFULLULLULLPF3VCULLPF3_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUCCTI3FFULLULLULLPF3VCULLPF3_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUCCTI3FFULLULLULLPF3VCULLPF3_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUCCTI3FFULLULLULLPF3VCULLPF3_DeleteIndex)
    Size = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUCCTI3FFULLULLULLPF3VCULLPF3_Size)
    Reserve = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUCCTI3FFULLULLULLPF3VCULLPF3_Reserve)
    Squeeze = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUCCTI3FFULLULLULLPF3VCULLPF3_Squeeze)
    Initialize = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUCCTI3FFULLULLULLPF3VCULLPF3_Initialize)
    __swig_destroy__ = _itkMeshBasePython.delete_itkVectorContainerULLCIUCCTI3FFULLULLULLPF3VCULLPF3
    cast = _swig_new_static_method(_itkMeshBasePython.itkVectorContainerULLCIUCCTI3FFULLULLULLPF3VCULLPF3_cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLCIUCCTI3FFULLULLULLPF3VCULLPF3

        Create a new object of the class itkVectorContainerULLCIUCCTI3FFULLULLULLPF3VCULLPF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLCIUCCTI3FFULLULLULLPF3VCULLPF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLCIUCCTI3FFULLULLULLPF3VCULLPF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLCIUCCTI3FFULLULLULLPF3VCULLPF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLCIUCCTI3FFULLULLULLPF3VCULLPF3 in _itkMeshBasePython:
_itkMeshBasePython.itkVectorContainerULLCIUCCTI3FFULLULLULLPF3VCULLPF3_swigregister(itkVectorContainerULLCIUCCTI3FFULLULLULLPF3VCULLPF3)
itkVectorContainerULLCIUCCTI3FFULLULLULLPF3VCULLPF3___New_orig__ = _itkMeshBasePython.itkVectorContainerULLCIUCCTI3FFULLULLULLPF3VCULLPF3___New_orig__
itkVectorContainerULLCIUCCTI3FFULLULLULLPF3VCULLPF3_cast = _itkMeshBasePython.itkVectorContainerULLCIUCCTI3FFULLULLULLPF3VCULLPF3_cast


def itkVectorContainerULLCIUSCTI2FFULLULLULLPF2VCULLPF2_New():
    return itkVectorContainerULLCIUSCTI2FFULLULLULLPF2VCULLPF2.New()

class itkVectorContainerULLCIUSCTI2FFULLULLULLPF2VCULLPF2(itk.ITKCommonBasePython.itkObject):
    r"""


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    {Core/Common/IterateOnAVectorContainer,Iterate On A Vector Container}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMeshBasePython.itkVectorContainerULLCIUSCTI2FFULLULLULLPF2VCULLPF2___New_orig__)
    Clone = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUSCTI2FFULLULLULLPF2VCULLPF2_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUSCTI2FFULLULLULLPF2VCULLPF2_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUSCTI2FFULLULLULLPF2VCULLPF2_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUSCTI2FFULLULLULLPF2VCULLPF2_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUSCTI2FFULLULLULLPF2VCULLPF2_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUSCTI2FFULLULLULLPF2VCULLPF2_GetElement)
    SetElement = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUSCTI2FFULLULLULLPF2VCULLPF2_SetElement)
    InsertElement = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUSCTI2FFULLULLULLPF2VCULLPF2_InsertElement)
    IndexExists = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUSCTI2FFULLULLULLPF2VCULLPF2_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUSCTI2FFULLULLULLPF2VCULLPF2_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUSCTI2FFULLULLULLPF2VCULLPF2_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUSCTI2FFULLULLULLPF2VCULLPF2_DeleteIndex)
    Size = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUSCTI2FFULLULLULLPF2VCULLPF2_Size)
    Reserve = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUSCTI2FFULLULLULLPF2VCULLPF2_Reserve)
    Squeeze = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUSCTI2FFULLULLULLPF2VCULLPF2_Squeeze)
    Initialize = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUSCTI2FFULLULLULLPF2VCULLPF2_Initialize)
    __swig_destroy__ = _itkMeshBasePython.delete_itkVectorContainerULLCIUSCTI2FFULLULLULLPF2VCULLPF2
    cast = _swig_new_static_method(_itkMeshBasePython.itkVectorContainerULLCIUSCTI2FFULLULLULLPF2VCULLPF2_cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLCIUSCTI2FFULLULLULLPF2VCULLPF2

        Create a new object of the class itkVectorContainerULLCIUSCTI2FFULLULLULLPF2VCULLPF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLCIUSCTI2FFULLULLULLPF2VCULLPF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLCIUSCTI2FFULLULLULLPF2VCULLPF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLCIUSCTI2FFULLULLULLPF2VCULLPF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLCIUSCTI2FFULLULLULLPF2VCULLPF2 in _itkMeshBasePython:
_itkMeshBasePython.itkVectorContainerULLCIUSCTI2FFULLULLULLPF2VCULLPF2_swigregister(itkVectorContainerULLCIUSCTI2FFULLULLULLPF2VCULLPF2)
itkVectorContainerULLCIUSCTI2FFULLULLULLPF2VCULLPF2___New_orig__ = _itkMeshBasePython.itkVectorContainerULLCIUSCTI2FFULLULLULLPF2VCULLPF2___New_orig__
itkVectorContainerULLCIUSCTI2FFULLULLULLPF2VCULLPF2_cast = _itkMeshBasePython.itkVectorContainerULLCIUSCTI2FFULLULLULLPF2VCULLPF2_cast


def itkVectorContainerULLCIUSCTI3FFULLULLULLPF3VCULLPF3_New():
    return itkVectorContainerULLCIUSCTI3FFULLULLULLPF3VCULLPF3.New()

class itkVectorContainerULLCIUSCTI3FFULLULLULLPF3VCULLPF3(itk.ITKCommonBasePython.itkObject):
    r"""


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    {Core/Common/IterateOnAVectorContainer,Iterate On A Vector Container}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMeshBasePython.itkVectorContainerULLCIUSCTI3FFULLULLULLPF3VCULLPF3___New_orig__)
    Clone = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUSCTI3FFULLULLULLPF3VCULLPF3_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUSCTI3FFULLULLULLPF3VCULLPF3_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUSCTI3FFULLULLULLPF3VCULLPF3_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUSCTI3FFULLULLULLPF3VCULLPF3_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUSCTI3FFULLULLULLPF3VCULLPF3_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUSCTI3FFULLULLULLPF3VCULLPF3_GetElement)
    SetElement = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUSCTI3FFULLULLULLPF3VCULLPF3_SetElement)
    InsertElement = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUSCTI3FFULLULLULLPF3VCULLPF3_InsertElement)
    IndexExists = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUSCTI3FFULLULLULLPF3VCULLPF3_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUSCTI3FFULLULLULLPF3VCULLPF3_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUSCTI3FFULLULLULLPF3VCULLPF3_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUSCTI3FFULLULLULLPF3VCULLPF3_DeleteIndex)
    Size = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUSCTI3FFULLULLULLPF3VCULLPF3_Size)
    Reserve = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUSCTI3FFULLULLULLPF3VCULLPF3_Reserve)
    Squeeze = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUSCTI3FFULLULLULLPF3VCULLPF3_Squeeze)
    Initialize = _swig_new_instance_method(_itkMeshBasePython.itkVectorContainerULLCIUSCTI3FFULLULLULLPF3VCULLPF3_Initialize)
    __swig_destroy__ = _itkMeshBasePython.delete_itkVectorContainerULLCIUSCTI3FFULLULLULLPF3VCULLPF3
    cast = _swig_new_static_method(_itkMeshBasePython.itkVectorContainerULLCIUSCTI3FFULLULLULLPF3VCULLPF3_cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLCIUSCTI3FFULLULLULLPF3VCULLPF3

        Create a new object of the class itkVectorContainerULLCIUSCTI3FFULLULLULLPF3VCULLPF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLCIUSCTI3FFULLULLULLPF3VCULLPF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLCIUSCTI3FFULLULLULLPF3VCULLPF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLCIUSCTI3FFULLULLULLPF3VCULLPF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLCIUSCTI3FFULLULLULLPF3VCULLPF3 in _itkMeshBasePython:
_itkMeshBasePython.itkVectorContainerULLCIUSCTI3FFULLULLULLPF3VCULLPF3_swigregister(itkVectorContainerULLCIUSCTI3FFULLULLULLPF3VCULLPF3)
itkVectorContainerULLCIUSCTI3FFULLULLULLPF3VCULLPF3___New_orig__ = _itkMeshBasePython.itkVectorContainerULLCIUSCTI3FFULLULLULLPF3VCULLPF3___New_orig__
itkVectorContainerULLCIUSCTI3FFULLULLULLPF3VCULLPF3_cast = _itkMeshBasePython.itkVectorContainerULLCIUSCTI3FFULLULLULLPF3VCULLPF3_cast



