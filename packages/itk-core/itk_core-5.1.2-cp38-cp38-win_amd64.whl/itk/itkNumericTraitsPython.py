# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkNumericTraitsPython
else:
    import _itkNumericTraitsPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkNumericTraitsPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkNumericTraitsPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.itkRGBPixelPython
import itk.stdcomplexPython
import itk.itkRGBAPixelPython
import itk.itkCovariantVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkVariableLengthVectorPython
class itkNumericTraitsCF(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsCF_min)
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsCF_max)
    epsilon = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsCF_epsilon)
    IsPositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsCF_IsPositive)
    IsNonpositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsCF_IsNonpositive)
    IsNegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsCF_IsNegative)
    IsNonnegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsCF_IsNonnegative)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsCF_GetLength)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsCF_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsCF_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsCF_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsCF_SetLength)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsCF self) -> itkNumericTraitsCF
        __init__(itkNumericTraitsCF self, itkNumericTraitsCF arg0) -> itkNumericTraitsCF


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsCF_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsCF(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsCF

# Register itkNumericTraitsCF in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsCF_swigregister(itkNumericTraitsCF)
itkNumericTraitsCF_min = _itkNumericTraitsPython.itkNumericTraitsCF_min
itkNumericTraitsCF_max = _itkNumericTraitsPython.itkNumericTraitsCF_max
itkNumericTraitsCF_epsilon = _itkNumericTraitsPython.itkNumericTraitsCF_epsilon
itkNumericTraitsCF_IsPositive = _itkNumericTraitsPython.itkNumericTraitsCF_IsPositive
itkNumericTraitsCF_IsNonpositive = _itkNumericTraitsPython.itkNumericTraitsCF_IsNonpositive
itkNumericTraitsCF_IsNegative = _itkNumericTraitsPython.itkNumericTraitsCF_IsNegative
itkNumericTraitsCF_IsNonnegative = _itkNumericTraitsPython.itkNumericTraitsCF_IsNonnegative
itkNumericTraitsCF_GetLength = _itkNumericTraitsPython.itkNumericTraitsCF_GetLength
itkNumericTraitsCF_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsCF_NonpositiveMin
itkNumericTraitsCF_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsCF_ZeroValue
itkNumericTraitsCF_OneValue = _itkNumericTraitsPython.itkNumericTraitsCF_OneValue
itkNumericTraitsCF_SetLength = _itkNumericTraitsPython.itkNumericTraitsCF_SetLength

class itkNumericTraitsCVF2(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsCVF2_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsCVF2_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsCVF2_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsCVF2_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsCVF2_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsCVF2_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsCVF2_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsCVF2_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsCVF2 self) -> itkNumericTraitsCVF2
        __init__(itkNumericTraitsCVF2 self, itkNumericTraitsCVF2 arg0) -> itkNumericTraitsCVF2


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsCVF2_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsCVF2(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsCVF2

# Register itkNumericTraitsCVF2 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsCVF2_swigregister(itkNumericTraitsCVF2)
itkNumericTraitsCVF2_max = _itkNumericTraitsPython.itkNumericTraitsCVF2_max
itkNumericTraitsCVF2_min = _itkNumericTraitsPython.itkNumericTraitsCVF2_min
itkNumericTraitsCVF2_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsCVF2_NonpositiveMin
itkNumericTraitsCVF2_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsCVF2_ZeroValue
itkNumericTraitsCVF2_OneValue = _itkNumericTraitsPython.itkNumericTraitsCVF2_OneValue
itkNumericTraitsCVF2_SetLength = _itkNumericTraitsPython.itkNumericTraitsCVF2_SetLength
itkNumericTraitsCVF2_GetLength = _itkNumericTraitsPython.itkNumericTraitsCVF2_GetLength
itkNumericTraitsCVF2_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsCVF2_AssignToArray

class itkNumericTraitsCVF3(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsCVF3_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsCVF3_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsCVF3_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsCVF3_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsCVF3_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsCVF3_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsCVF3_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsCVF3_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsCVF3 self) -> itkNumericTraitsCVF3
        __init__(itkNumericTraitsCVF3 self, itkNumericTraitsCVF3 arg0) -> itkNumericTraitsCVF3


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsCVF3_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsCVF3(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsCVF3

# Register itkNumericTraitsCVF3 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsCVF3_swigregister(itkNumericTraitsCVF3)
itkNumericTraitsCVF3_max = _itkNumericTraitsPython.itkNumericTraitsCVF3_max
itkNumericTraitsCVF3_min = _itkNumericTraitsPython.itkNumericTraitsCVF3_min
itkNumericTraitsCVF3_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsCVF3_NonpositiveMin
itkNumericTraitsCVF3_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsCVF3_ZeroValue
itkNumericTraitsCVF3_OneValue = _itkNumericTraitsPython.itkNumericTraitsCVF3_OneValue
itkNumericTraitsCVF3_SetLength = _itkNumericTraitsPython.itkNumericTraitsCVF3_SetLength
itkNumericTraitsCVF3_GetLength = _itkNumericTraitsPython.itkNumericTraitsCVF3_GetLength
itkNumericTraitsCVF3_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsCVF3_AssignToArray

class itkNumericTraitsCVF4(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsCVF4_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsCVF4_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsCVF4_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsCVF4_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsCVF4_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsCVF4_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsCVF4_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsCVF4_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsCVF4 self) -> itkNumericTraitsCVF4
        __init__(itkNumericTraitsCVF4 self, itkNumericTraitsCVF4 arg0) -> itkNumericTraitsCVF4


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsCVF4_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsCVF4(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsCVF4

# Register itkNumericTraitsCVF4 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsCVF4_swigregister(itkNumericTraitsCVF4)
itkNumericTraitsCVF4_max = _itkNumericTraitsPython.itkNumericTraitsCVF4_max
itkNumericTraitsCVF4_min = _itkNumericTraitsPython.itkNumericTraitsCVF4_min
itkNumericTraitsCVF4_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsCVF4_NonpositiveMin
itkNumericTraitsCVF4_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsCVF4_ZeroValue
itkNumericTraitsCVF4_OneValue = _itkNumericTraitsPython.itkNumericTraitsCVF4_OneValue
itkNumericTraitsCVF4_SetLength = _itkNumericTraitsPython.itkNumericTraitsCVF4_SetLength
itkNumericTraitsCVF4_GetLength = _itkNumericTraitsPython.itkNumericTraitsCVF4_GetLength
itkNumericTraitsCVF4_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsCVF4_AssignToArray

class itkNumericTraitsFAD1(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAD1_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAD1_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAD1_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAD1_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAD1_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAD1_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAD1_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAD1_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsFAD1 self) -> itkNumericTraitsFAD1
        __init__(itkNumericTraitsFAD1 self, itkNumericTraitsFAD1 arg0) -> itkNumericTraitsFAD1


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsFAD1_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsFAD1(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsFAD1

# Register itkNumericTraitsFAD1 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsFAD1_swigregister(itkNumericTraitsFAD1)
itkNumericTraitsFAD1_max = _itkNumericTraitsPython.itkNumericTraitsFAD1_max
itkNumericTraitsFAD1_min = _itkNumericTraitsPython.itkNumericTraitsFAD1_min
itkNumericTraitsFAD1_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsFAD1_NonpositiveMin
itkNumericTraitsFAD1_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsFAD1_ZeroValue
itkNumericTraitsFAD1_OneValue = _itkNumericTraitsPython.itkNumericTraitsFAD1_OneValue
itkNumericTraitsFAD1_SetLength = _itkNumericTraitsPython.itkNumericTraitsFAD1_SetLength
itkNumericTraitsFAD1_GetLength = _itkNumericTraitsPython.itkNumericTraitsFAD1_GetLength
itkNumericTraitsFAD1_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsFAD1_AssignToArray

class itkNumericTraitsFAD2(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAD2_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAD2_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAD2_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAD2_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAD2_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAD2_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAD2_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAD2_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsFAD2 self) -> itkNumericTraitsFAD2
        __init__(itkNumericTraitsFAD2 self, itkNumericTraitsFAD2 arg0) -> itkNumericTraitsFAD2


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsFAD2_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsFAD2(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsFAD2

# Register itkNumericTraitsFAD2 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsFAD2_swigregister(itkNumericTraitsFAD2)
itkNumericTraitsFAD2_max = _itkNumericTraitsPython.itkNumericTraitsFAD2_max
itkNumericTraitsFAD2_min = _itkNumericTraitsPython.itkNumericTraitsFAD2_min
itkNumericTraitsFAD2_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsFAD2_NonpositiveMin
itkNumericTraitsFAD2_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsFAD2_ZeroValue
itkNumericTraitsFAD2_OneValue = _itkNumericTraitsPython.itkNumericTraitsFAD2_OneValue
itkNumericTraitsFAD2_SetLength = _itkNumericTraitsPython.itkNumericTraitsFAD2_SetLength
itkNumericTraitsFAD2_GetLength = _itkNumericTraitsPython.itkNumericTraitsFAD2_GetLength
itkNumericTraitsFAD2_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsFAD2_AssignToArray

class itkNumericTraitsFAD3(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAD3_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAD3_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAD3_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAD3_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAD3_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAD3_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAD3_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAD3_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsFAD3 self) -> itkNumericTraitsFAD3
        __init__(itkNumericTraitsFAD3 self, itkNumericTraitsFAD3 arg0) -> itkNumericTraitsFAD3


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsFAD3_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsFAD3(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsFAD3

# Register itkNumericTraitsFAD3 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsFAD3_swigregister(itkNumericTraitsFAD3)
itkNumericTraitsFAD3_max = _itkNumericTraitsPython.itkNumericTraitsFAD3_max
itkNumericTraitsFAD3_min = _itkNumericTraitsPython.itkNumericTraitsFAD3_min
itkNumericTraitsFAD3_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsFAD3_NonpositiveMin
itkNumericTraitsFAD3_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsFAD3_ZeroValue
itkNumericTraitsFAD3_OneValue = _itkNumericTraitsPython.itkNumericTraitsFAD3_OneValue
itkNumericTraitsFAD3_SetLength = _itkNumericTraitsPython.itkNumericTraitsFAD3_SetLength
itkNumericTraitsFAD3_GetLength = _itkNumericTraitsPython.itkNumericTraitsFAD3_GetLength
itkNumericTraitsFAD3_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsFAD3_AssignToArray

class itkNumericTraitsFAD4(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAD4_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAD4_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAD4_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAD4_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAD4_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAD4_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAD4_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAD4_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsFAD4 self) -> itkNumericTraitsFAD4
        __init__(itkNumericTraitsFAD4 self, itkNumericTraitsFAD4 arg0) -> itkNumericTraitsFAD4


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsFAD4_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsFAD4(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsFAD4

# Register itkNumericTraitsFAD4 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsFAD4_swigregister(itkNumericTraitsFAD4)
itkNumericTraitsFAD4_max = _itkNumericTraitsPython.itkNumericTraitsFAD4_max
itkNumericTraitsFAD4_min = _itkNumericTraitsPython.itkNumericTraitsFAD4_min
itkNumericTraitsFAD4_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsFAD4_NonpositiveMin
itkNumericTraitsFAD4_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsFAD4_ZeroValue
itkNumericTraitsFAD4_OneValue = _itkNumericTraitsPython.itkNumericTraitsFAD4_OneValue
itkNumericTraitsFAD4_SetLength = _itkNumericTraitsPython.itkNumericTraitsFAD4_SetLength
itkNumericTraitsFAD4_GetLength = _itkNumericTraitsPython.itkNumericTraitsFAD4_GetLength
itkNumericTraitsFAD4_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsFAD4_AssignToArray

class itkNumericTraitsFAD6(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAD6_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAD6_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAD6_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAD6_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAD6_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAD6_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAD6_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAD6_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsFAD6 self) -> itkNumericTraitsFAD6
        __init__(itkNumericTraitsFAD6 self, itkNumericTraitsFAD6 arg0) -> itkNumericTraitsFAD6


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsFAD6_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsFAD6(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsFAD6

# Register itkNumericTraitsFAD6 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsFAD6_swigregister(itkNumericTraitsFAD6)
itkNumericTraitsFAD6_max = _itkNumericTraitsPython.itkNumericTraitsFAD6_max
itkNumericTraitsFAD6_min = _itkNumericTraitsPython.itkNumericTraitsFAD6_min
itkNumericTraitsFAD6_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsFAD6_NonpositiveMin
itkNumericTraitsFAD6_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsFAD6_ZeroValue
itkNumericTraitsFAD6_OneValue = _itkNumericTraitsPython.itkNumericTraitsFAD6_OneValue
itkNumericTraitsFAD6_SetLength = _itkNumericTraitsPython.itkNumericTraitsFAD6_SetLength
itkNumericTraitsFAD6_GetLength = _itkNumericTraitsPython.itkNumericTraitsFAD6_GetLength
itkNumericTraitsFAD6_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsFAD6_AssignToArray

class itkNumericTraitsFAF1(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAF1_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAF1_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAF1_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAF1_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAF1_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAF1_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAF1_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAF1_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsFAF1 self) -> itkNumericTraitsFAF1
        __init__(itkNumericTraitsFAF1 self, itkNumericTraitsFAF1 arg0) -> itkNumericTraitsFAF1


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsFAF1_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsFAF1(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsFAF1

# Register itkNumericTraitsFAF1 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsFAF1_swigregister(itkNumericTraitsFAF1)
itkNumericTraitsFAF1_max = _itkNumericTraitsPython.itkNumericTraitsFAF1_max
itkNumericTraitsFAF1_min = _itkNumericTraitsPython.itkNumericTraitsFAF1_min
itkNumericTraitsFAF1_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsFAF1_NonpositiveMin
itkNumericTraitsFAF1_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsFAF1_ZeroValue
itkNumericTraitsFAF1_OneValue = _itkNumericTraitsPython.itkNumericTraitsFAF1_OneValue
itkNumericTraitsFAF1_SetLength = _itkNumericTraitsPython.itkNumericTraitsFAF1_SetLength
itkNumericTraitsFAF1_GetLength = _itkNumericTraitsPython.itkNumericTraitsFAF1_GetLength
itkNumericTraitsFAF1_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsFAF1_AssignToArray

class itkNumericTraitsFAF2(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAF2_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAF2_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAF2_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAF2_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAF2_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAF2_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAF2_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAF2_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsFAF2 self) -> itkNumericTraitsFAF2
        __init__(itkNumericTraitsFAF2 self, itkNumericTraitsFAF2 arg0) -> itkNumericTraitsFAF2


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsFAF2_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsFAF2(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsFAF2

# Register itkNumericTraitsFAF2 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsFAF2_swigregister(itkNumericTraitsFAF2)
itkNumericTraitsFAF2_max = _itkNumericTraitsPython.itkNumericTraitsFAF2_max
itkNumericTraitsFAF2_min = _itkNumericTraitsPython.itkNumericTraitsFAF2_min
itkNumericTraitsFAF2_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsFAF2_NonpositiveMin
itkNumericTraitsFAF2_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsFAF2_ZeroValue
itkNumericTraitsFAF2_OneValue = _itkNumericTraitsPython.itkNumericTraitsFAF2_OneValue
itkNumericTraitsFAF2_SetLength = _itkNumericTraitsPython.itkNumericTraitsFAF2_SetLength
itkNumericTraitsFAF2_GetLength = _itkNumericTraitsPython.itkNumericTraitsFAF2_GetLength
itkNumericTraitsFAF2_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsFAF2_AssignToArray

class itkNumericTraitsFAF3(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAF3_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAF3_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAF3_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAF3_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAF3_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAF3_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAF3_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAF3_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsFAF3 self) -> itkNumericTraitsFAF3
        __init__(itkNumericTraitsFAF3 self, itkNumericTraitsFAF3 arg0) -> itkNumericTraitsFAF3


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsFAF3_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsFAF3(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsFAF3

# Register itkNumericTraitsFAF3 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsFAF3_swigregister(itkNumericTraitsFAF3)
itkNumericTraitsFAF3_max = _itkNumericTraitsPython.itkNumericTraitsFAF3_max
itkNumericTraitsFAF3_min = _itkNumericTraitsPython.itkNumericTraitsFAF3_min
itkNumericTraitsFAF3_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsFAF3_NonpositiveMin
itkNumericTraitsFAF3_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsFAF3_ZeroValue
itkNumericTraitsFAF3_OneValue = _itkNumericTraitsPython.itkNumericTraitsFAF3_OneValue
itkNumericTraitsFAF3_SetLength = _itkNumericTraitsPython.itkNumericTraitsFAF3_SetLength
itkNumericTraitsFAF3_GetLength = _itkNumericTraitsPython.itkNumericTraitsFAF3_GetLength
itkNumericTraitsFAF3_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsFAF3_AssignToArray

class itkNumericTraitsFAF4(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAF4_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAF4_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAF4_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAF4_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAF4_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAF4_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAF4_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAF4_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsFAF4 self) -> itkNumericTraitsFAF4
        __init__(itkNumericTraitsFAF4 self, itkNumericTraitsFAF4 arg0) -> itkNumericTraitsFAF4


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsFAF4_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsFAF4(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsFAF4

# Register itkNumericTraitsFAF4 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsFAF4_swigregister(itkNumericTraitsFAF4)
itkNumericTraitsFAF4_max = _itkNumericTraitsPython.itkNumericTraitsFAF4_max
itkNumericTraitsFAF4_min = _itkNumericTraitsPython.itkNumericTraitsFAF4_min
itkNumericTraitsFAF4_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsFAF4_NonpositiveMin
itkNumericTraitsFAF4_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsFAF4_ZeroValue
itkNumericTraitsFAF4_OneValue = _itkNumericTraitsPython.itkNumericTraitsFAF4_OneValue
itkNumericTraitsFAF4_SetLength = _itkNumericTraitsPython.itkNumericTraitsFAF4_SetLength
itkNumericTraitsFAF4_GetLength = _itkNumericTraitsPython.itkNumericTraitsFAF4_GetLength
itkNumericTraitsFAF4_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsFAF4_AssignToArray

class itkNumericTraitsFAF6(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAF6_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAF6_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAF6_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAF6_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAF6_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAF6_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAF6_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAF6_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsFAF6 self) -> itkNumericTraitsFAF6
        __init__(itkNumericTraitsFAF6 self, itkNumericTraitsFAF6 arg0) -> itkNumericTraitsFAF6


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsFAF6_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsFAF6(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsFAF6

# Register itkNumericTraitsFAF6 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsFAF6_swigregister(itkNumericTraitsFAF6)
itkNumericTraitsFAF6_max = _itkNumericTraitsPython.itkNumericTraitsFAF6_max
itkNumericTraitsFAF6_min = _itkNumericTraitsPython.itkNumericTraitsFAF6_min
itkNumericTraitsFAF6_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsFAF6_NonpositiveMin
itkNumericTraitsFAF6_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsFAF6_ZeroValue
itkNumericTraitsFAF6_OneValue = _itkNumericTraitsPython.itkNumericTraitsFAF6_OneValue
itkNumericTraitsFAF6_SetLength = _itkNumericTraitsPython.itkNumericTraitsFAF6_SetLength
itkNumericTraitsFAF6_GetLength = _itkNumericTraitsPython.itkNumericTraitsFAF6_GetLength
itkNumericTraitsFAF6_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsFAF6_AssignToArray

class itkNumericTraitsFASC1(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASC1_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASC1_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASC1_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASC1_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASC1_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASC1_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASC1_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASC1_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsFASC1 self) -> itkNumericTraitsFASC1
        __init__(itkNumericTraitsFASC1 self, itkNumericTraitsFASC1 arg0) -> itkNumericTraitsFASC1


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsFASC1_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsFASC1(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsFASC1

# Register itkNumericTraitsFASC1 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsFASC1_swigregister(itkNumericTraitsFASC1)
itkNumericTraitsFASC1_max = _itkNumericTraitsPython.itkNumericTraitsFASC1_max
itkNumericTraitsFASC1_min = _itkNumericTraitsPython.itkNumericTraitsFASC1_min
itkNumericTraitsFASC1_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsFASC1_NonpositiveMin
itkNumericTraitsFASC1_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsFASC1_ZeroValue
itkNumericTraitsFASC1_OneValue = _itkNumericTraitsPython.itkNumericTraitsFASC1_OneValue
itkNumericTraitsFASC1_SetLength = _itkNumericTraitsPython.itkNumericTraitsFASC1_SetLength
itkNumericTraitsFASC1_GetLength = _itkNumericTraitsPython.itkNumericTraitsFASC1_GetLength
itkNumericTraitsFASC1_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsFASC1_AssignToArray

class itkNumericTraitsFASC2(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASC2_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASC2_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASC2_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASC2_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASC2_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASC2_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASC2_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASC2_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsFASC2 self) -> itkNumericTraitsFASC2
        __init__(itkNumericTraitsFASC2 self, itkNumericTraitsFASC2 arg0) -> itkNumericTraitsFASC2


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsFASC2_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsFASC2(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsFASC2

# Register itkNumericTraitsFASC2 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsFASC2_swigregister(itkNumericTraitsFASC2)
itkNumericTraitsFASC2_max = _itkNumericTraitsPython.itkNumericTraitsFASC2_max
itkNumericTraitsFASC2_min = _itkNumericTraitsPython.itkNumericTraitsFASC2_min
itkNumericTraitsFASC2_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsFASC2_NonpositiveMin
itkNumericTraitsFASC2_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsFASC2_ZeroValue
itkNumericTraitsFASC2_OneValue = _itkNumericTraitsPython.itkNumericTraitsFASC2_OneValue
itkNumericTraitsFASC2_SetLength = _itkNumericTraitsPython.itkNumericTraitsFASC2_SetLength
itkNumericTraitsFASC2_GetLength = _itkNumericTraitsPython.itkNumericTraitsFASC2_GetLength
itkNumericTraitsFASC2_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsFASC2_AssignToArray

class itkNumericTraitsFASC3(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASC3_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASC3_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASC3_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASC3_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASC3_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASC3_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASC3_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASC3_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsFASC3 self) -> itkNumericTraitsFASC3
        __init__(itkNumericTraitsFASC3 self, itkNumericTraitsFASC3 arg0) -> itkNumericTraitsFASC3


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsFASC3_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsFASC3(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsFASC3

# Register itkNumericTraitsFASC3 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsFASC3_swigregister(itkNumericTraitsFASC3)
itkNumericTraitsFASC3_max = _itkNumericTraitsPython.itkNumericTraitsFASC3_max
itkNumericTraitsFASC3_min = _itkNumericTraitsPython.itkNumericTraitsFASC3_min
itkNumericTraitsFASC3_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsFASC3_NonpositiveMin
itkNumericTraitsFASC3_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsFASC3_ZeroValue
itkNumericTraitsFASC3_OneValue = _itkNumericTraitsPython.itkNumericTraitsFASC3_OneValue
itkNumericTraitsFASC3_SetLength = _itkNumericTraitsPython.itkNumericTraitsFASC3_SetLength
itkNumericTraitsFASC3_GetLength = _itkNumericTraitsPython.itkNumericTraitsFASC3_GetLength
itkNumericTraitsFASC3_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsFASC3_AssignToArray

class itkNumericTraitsFASC4(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASC4_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASC4_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASC4_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASC4_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASC4_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASC4_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASC4_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASC4_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsFASC4 self) -> itkNumericTraitsFASC4
        __init__(itkNumericTraitsFASC4 self, itkNumericTraitsFASC4 arg0) -> itkNumericTraitsFASC4


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsFASC4_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsFASC4(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsFASC4

# Register itkNumericTraitsFASC4 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsFASC4_swigregister(itkNumericTraitsFASC4)
itkNumericTraitsFASC4_max = _itkNumericTraitsPython.itkNumericTraitsFASC4_max
itkNumericTraitsFASC4_min = _itkNumericTraitsPython.itkNumericTraitsFASC4_min
itkNumericTraitsFASC4_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsFASC4_NonpositiveMin
itkNumericTraitsFASC4_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsFASC4_ZeroValue
itkNumericTraitsFASC4_OneValue = _itkNumericTraitsPython.itkNumericTraitsFASC4_OneValue
itkNumericTraitsFASC4_SetLength = _itkNumericTraitsPython.itkNumericTraitsFASC4_SetLength
itkNumericTraitsFASC4_GetLength = _itkNumericTraitsPython.itkNumericTraitsFASC4_GetLength
itkNumericTraitsFASC4_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsFASC4_AssignToArray

class itkNumericTraitsFASC6(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASC6_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASC6_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASC6_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASC6_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASC6_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASC6_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASC6_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASC6_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsFASC6 self) -> itkNumericTraitsFASC6
        __init__(itkNumericTraitsFASC6 self, itkNumericTraitsFASC6 arg0) -> itkNumericTraitsFASC6


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsFASC6_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsFASC6(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsFASC6

# Register itkNumericTraitsFASC6 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsFASC6_swigregister(itkNumericTraitsFASC6)
itkNumericTraitsFASC6_max = _itkNumericTraitsPython.itkNumericTraitsFASC6_max
itkNumericTraitsFASC6_min = _itkNumericTraitsPython.itkNumericTraitsFASC6_min
itkNumericTraitsFASC6_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsFASC6_NonpositiveMin
itkNumericTraitsFASC6_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsFASC6_ZeroValue
itkNumericTraitsFASC6_OneValue = _itkNumericTraitsPython.itkNumericTraitsFASC6_OneValue
itkNumericTraitsFASC6_SetLength = _itkNumericTraitsPython.itkNumericTraitsFASC6_SetLength
itkNumericTraitsFASC6_GetLength = _itkNumericTraitsPython.itkNumericTraitsFASC6_GetLength
itkNumericTraitsFASC6_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsFASC6_AssignToArray

class itkNumericTraitsFASL1(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASL1_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASL1_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASL1_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASL1_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASL1_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASL1_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASL1_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASL1_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsFASL1 self) -> itkNumericTraitsFASL1
        __init__(itkNumericTraitsFASL1 self, itkNumericTraitsFASL1 arg0) -> itkNumericTraitsFASL1


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsFASL1_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsFASL1(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsFASL1

# Register itkNumericTraitsFASL1 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsFASL1_swigregister(itkNumericTraitsFASL1)
itkNumericTraitsFASL1_max = _itkNumericTraitsPython.itkNumericTraitsFASL1_max
itkNumericTraitsFASL1_min = _itkNumericTraitsPython.itkNumericTraitsFASL1_min
itkNumericTraitsFASL1_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsFASL1_NonpositiveMin
itkNumericTraitsFASL1_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsFASL1_ZeroValue
itkNumericTraitsFASL1_OneValue = _itkNumericTraitsPython.itkNumericTraitsFASL1_OneValue
itkNumericTraitsFASL1_SetLength = _itkNumericTraitsPython.itkNumericTraitsFASL1_SetLength
itkNumericTraitsFASL1_GetLength = _itkNumericTraitsPython.itkNumericTraitsFASL1_GetLength
itkNumericTraitsFASL1_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsFASL1_AssignToArray

class itkNumericTraitsFASL2(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASL2_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASL2_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASL2_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASL2_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASL2_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASL2_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASL2_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASL2_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsFASL2 self) -> itkNumericTraitsFASL2
        __init__(itkNumericTraitsFASL2 self, itkNumericTraitsFASL2 arg0) -> itkNumericTraitsFASL2


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsFASL2_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsFASL2(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsFASL2

# Register itkNumericTraitsFASL2 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsFASL2_swigregister(itkNumericTraitsFASL2)
itkNumericTraitsFASL2_max = _itkNumericTraitsPython.itkNumericTraitsFASL2_max
itkNumericTraitsFASL2_min = _itkNumericTraitsPython.itkNumericTraitsFASL2_min
itkNumericTraitsFASL2_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsFASL2_NonpositiveMin
itkNumericTraitsFASL2_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsFASL2_ZeroValue
itkNumericTraitsFASL2_OneValue = _itkNumericTraitsPython.itkNumericTraitsFASL2_OneValue
itkNumericTraitsFASL2_SetLength = _itkNumericTraitsPython.itkNumericTraitsFASL2_SetLength
itkNumericTraitsFASL2_GetLength = _itkNumericTraitsPython.itkNumericTraitsFASL2_GetLength
itkNumericTraitsFASL2_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsFASL2_AssignToArray

class itkNumericTraitsFASL3(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASL3_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASL3_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASL3_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASL3_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASL3_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASL3_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASL3_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASL3_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsFASL3 self) -> itkNumericTraitsFASL3
        __init__(itkNumericTraitsFASL3 self, itkNumericTraitsFASL3 arg0) -> itkNumericTraitsFASL3


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsFASL3_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsFASL3(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsFASL3

# Register itkNumericTraitsFASL3 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsFASL3_swigregister(itkNumericTraitsFASL3)
itkNumericTraitsFASL3_max = _itkNumericTraitsPython.itkNumericTraitsFASL3_max
itkNumericTraitsFASL3_min = _itkNumericTraitsPython.itkNumericTraitsFASL3_min
itkNumericTraitsFASL3_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsFASL3_NonpositiveMin
itkNumericTraitsFASL3_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsFASL3_ZeroValue
itkNumericTraitsFASL3_OneValue = _itkNumericTraitsPython.itkNumericTraitsFASL3_OneValue
itkNumericTraitsFASL3_SetLength = _itkNumericTraitsPython.itkNumericTraitsFASL3_SetLength
itkNumericTraitsFASL3_GetLength = _itkNumericTraitsPython.itkNumericTraitsFASL3_GetLength
itkNumericTraitsFASL3_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsFASL3_AssignToArray

class itkNumericTraitsFASL4(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASL4_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASL4_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASL4_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASL4_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASL4_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASL4_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASL4_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASL4_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsFASL4 self) -> itkNumericTraitsFASL4
        __init__(itkNumericTraitsFASL4 self, itkNumericTraitsFASL4 arg0) -> itkNumericTraitsFASL4


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsFASL4_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsFASL4(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsFASL4

# Register itkNumericTraitsFASL4 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsFASL4_swigregister(itkNumericTraitsFASL4)
itkNumericTraitsFASL4_max = _itkNumericTraitsPython.itkNumericTraitsFASL4_max
itkNumericTraitsFASL4_min = _itkNumericTraitsPython.itkNumericTraitsFASL4_min
itkNumericTraitsFASL4_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsFASL4_NonpositiveMin
itkNumericTraitsFASL4_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsFASL4_ZeroValue
itkNumericTraitsFASL4_OneValue = _itkNumericTraitsPython.itkNumericTraitsFASL4_OneValue
itkNumericTraitsFASL4_SetLength = _itkNumericTraitsPython.itkNumericTraitsFASL4_SetLength
itkNumericTraitsFASL4_GetLength = _itkNumericTraitsPython.itkNumericTraitsFASL4_GetLength
itkNumericTraitsFASL4_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsFASL4_AssignToArray

class itkNumericTraitsFASL6(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASL6_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASL6_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASL6_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASL6_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASL6_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASL6_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASL6_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASL6_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsFASL6 self) -> itkNumericTraitsFASL6
        __init__(itkNumericTraitsFASL6 self, itkNumericTraitsFASL6 arg0) -> itkNumericTraitsFASL6


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsFASL6_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsFASL6(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsFASL6

# Register itkNumericTraitsFASL6 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsFASL6_swigregister(itkNumericTraitsFASL6)
itkNumericTraitsFASL6_max = _itkNumericTraitsPython.itkNumericTraitsFASL6_max
itkNumericTraitsFASL6_min = _itkNumericTraitsPython.itkNumericTraitsFASL6_min
itkNumericTraitsFASL6_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsFASL6_NonpositiveMin
itkNumericTraitsFASL6_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsFASL6_ZeroValue
itkNumericTraitsFASL6_OneValue = _itkNumericTraitsPython.itkNumericTraitsFASL6_OneValue
itkNumericTraitsFASL6_SetLength = _itkNumericTraitsPython.itkNumericTraitsFASL6_SetLength
itkNumericTraitsFASL6_GetLength = _itkNumericTraitsPython.itkNumericTraitsFASL6_GetLength
itkNumericTraitsFASL6_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsFASL6_AssignToArray

class itkNumericTraitsFASS1(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASS1_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASS1_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASS1_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASS1_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASS1_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASS1_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASS1_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASS1_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsFASS1 self) -> itkNumericTraitsFASS1
        __init__(itkNumericTraitsFASS1 self, itkNumericTraitsFASS1 arg0) -> itkNumericTraitsFASS1


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsFASS1_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsFASS1(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsFASS1

# Register itkNumericTraitsFASS1 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsFASS1_swigregister(itkNumericTraitsFASS1)
itkNumericTraitsFASS1_max = _itkNumericTraitsPython.itkNumericTraitsFASS1_max
itkNumericTraitsFASS1_min = _itkNumericTraitsPython.itkNumericTraitsFASS1_min
itkNumericTraitsFASS1_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsFASS1_NonpositiveMin
itkNumericTraitsFASS1_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsFASS1_ZeroValue
itkNumericTraitsFASS1_OneValue = _itkNumericTraitsPython.itkNumericTraitsFASS1_OneValue
itkNumericTraitsFASS1_SetLength = _itkNumericTraitsPython.itkNumericTraitsFASS1_SetLength
itkNumericTraitsFASS1_GetLength = _itkNumericTraitsPython.itkNumericTraitsFASS1_GetLength
itkNumericTraitsFASS1_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsFASS1_AssignToArray

class itkNumericTraitsFASS2(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASS2_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASS2_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASS2_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASS2_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASS2_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASS2_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASS2_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASS2_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsFASS2 self) -> itkNumericTraitsFASS2
        __init__(itkNumericTraitsFASS2 self, itkNumericTraitsFASS2 arg0) -> itkNumericTraitsFASS2


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsFASS2_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsFASS2(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsFASS2

# Register itkNumericTraitsFASS2 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsFASS2_swigregister(itkNumericTraitsFASS2)
itkNumericTraitsFASS2_max = _itkNumericTraitsPython.itkNumericTraitsFASS2_max
itkNumericTraitsFASS2_min = _itkNumericTraitsPython.itkNumericTraitsFASS2_min
itkNumericTraitsFASS2_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsFASS2_NonpositiveMin
itkNumericTraitsFASS2_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsFASS2_ZeroValue
itkNumericTraitsFASS2_OneValue = _itkNumericTraitsPython.itkNumericTraitsFASS2_OneValue
itkNumericTraitsFASS2_SetLength = _itkNumericTraitsPython.itkNumericTraitsFASS2_SetLength
itkNumericTraitsFASS2_GetLength = _itkNumericTraitsPython.itkNumericTraitsFASS2_GetLength
itkNumericTraitsFASS2_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsFASS2_AssignToArray

class itkNumericTraitsFASS3(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASS3_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASS3_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASS3_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASS3_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASS3_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASS3_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASS3_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASS3_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsFASS3 self) -> itkNumericTraitsFASS3
        __init__(itkNumericTraitsFASS3 self, itkNumericTraitsFASS3 arg0) -> itkNumericTraitsFASS3


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsFASS3_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsFASS3(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsFASS3

# Register itkNumericTraitsFASS3 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsFASS3_swigregister(itkNumericTraitsFASS3)
itkNumericTraitsFASS3_max = _itkNumericTraitsPython.itkNumericTraitsFASS3_max
itkNumericTraitsFASS3_min = _itkNumericTraitsPython.itkNumericTraitsFASS3_min
itkNumericTraitsFASS3_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsFASS3_NonpositiveMin
itkNumericTraitsFASS3_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsFASS3_ZeroValue
itkNumericTraitsFASS3_OneValue = _itkNumericTraitsPython.itkNumericTraitsFASS3_OneValue
itkNumericTraitsFASS3_SetLength = _itkNumericTraitsPython.itkNumericTraitsFASS3_SetLength
itkNumericTraitsFASS3_GetLength = _itkNumericTraitsPython.itkNumericTraitsFASS3_GetLength
itkNumericTraitsFASS3_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsFASS3_AssignToArray

class itkNumericTraitsFASS4(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASS4_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASS4_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASS4_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASS4_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASS4_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASS4_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASS4_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASS4_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsFASS4 self) -> itkNumericTraitsFASS4
        __init__(itkNumericTraitsFASS4 self, itkNumericTraitsFASS4 arg0) -> itkNumericTraitsFASS4


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsFASS4_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsFASS4(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsFASS4

# Register itkNumericTraitsFASS4 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsFASS4_swigregister(itkNumericTraitsFASS4)
itkNumericTraitsFASS4_max = _itkNumericTraitsPython.itkNumericTraitsFASS4_max
itkNumericTraitsFASS4_min = _itkNumericTraitsPython.itkNumericTraitsFASS4_min
itkNumericTraitsFASS4_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsFASS4_NonpositiveMin
itkNumericTraitsFASS4_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsFASS4_ZeroValue
itkNumericTraitsFASS4_OneValue = _itkNumericTraitsPython.itkNumericTraitsFASS4_OneValue
itkNumericTraitsFASS4_SetLength = _itkNumericTraitsPython.itkNumericTraitsFASS4_SetLength
itkNumericTraitsFASS4_GetLength = _itkNumericTraitsPython.itkNumericTraitsFASS4_GetLength
itkNumericTraitsFASS4_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsFASS4_AssignToArray

class itkNumericTraitsFASS6(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASS6_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASS6_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASS6_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASS6_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASS6_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASS6_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASS6_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFASS6_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsFASS6 self) -> itkNumericTraitsFASS6
        __init__(itkNumericTraitsFASS6 self, itkNumericTraitsFASS6 arg0) -> itkNumericTraitsFASS6


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsFASS6_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsFASS6(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsFASS6

# Register itkNumericTraitsFASS6 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsFASS6_swigregister(itkNumericTraitsFASS6)
itkNumericTraitsFASS6_max = _itkNumericTraitsPython.itkNumericTraitsFASS6_max
itkNumericTraitsFASS6_min = _itkNumericTraitsPython.itkNumericTraitsFASS6_min
itkNumericTraitsFASS6_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsFASS6_NonpositiveMin
itkNumericTraitsFASS6_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsFASS6_ZeroValue
itkNumericTraitsFASS6_OneValue = _itkNumericTraitsPython.itkNumericTraitsFASS6_OneValue
itkNumericTraitsFASS6_SetLength = _itkNumericTraitsPython.itkNumericTraitsFASS6_SetLength
itkNumericTraitsFASS6_GetLength = _itkNumericTraitsPython.itkNumericTraitsFASS6_GetLength
itkNumericTraitsFASS6_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsFASS6_AssignToArray

class itkNumericTraitsFAUC1(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUC1_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUC1_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUC1_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUC1_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUC1_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUC1_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUC1_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUC1_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsFAUC1 self) -> itkNumericTraitsFAUC1
        __init__(itkNumericTraitsFAUC1 self, itkNumericTraitsFAUC1 arg0) -> itkNumericTraitsFAUC1


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsFAUC1_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsFAUC1(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsFAUC1

# Register itkNumericTraitsFAUC1 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsFAUC1_swigregister(itkNumericTraitsFAUC1)
itkNumericTraitsFAUC1_max = _itkNumericTraitsPython.itkNumericTraitsFAUC1_max
itkNumericTraitsFAUC1_min = _itkNumericTraitsPython.itkNumericTraitsFAUC1_min
itkNumericTraitsFAUC1_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsFAUC1_NonpositiveMin
itkNumericTraitsFAUC1_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsFAUC1_ZeroValue
itkNumericTraitsFAUC1_OneValue = _itkNumericTraitsPython.itkNumericTraitsFAUC1_OneValue
itkNumericTraitsFAUC1_SetLength = _itkNumericTraitsPython.itkNumericTraitsFAUC1_SetLength
itkNumericTraitsFAUC1_GetLength = _itkNumericTraitsPython.itkNumericTraitsFAUC1_GetLength
itkNumericTraitsFAUC1_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsFAUC1_AssignToArray

class itkNumericTraitsFAUC2(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUC2_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUC2_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUC2_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUC2_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUC2_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUC2_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUC2_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUC2_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsFAUC2 self) -> itkNumericTraitsFAUC2
        __init__(itkNumericTraitsFAUC2 self, itkNumericTraitsFAUC2 arg0) -> itkNumericTraitsFAUC2


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsFAUC2_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsFAUC2(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsFAUC2

# Register itkNumericTraitsFAUC2 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsFAUC2_swigregister(itkNumericTraitsFAUC2)
itkNumericTraitsFAUC2_max = _itkNumericTraitsPython.itkNumericTraitsFAUC2_max
itkNumericTraitsFAUC2_min = _itkNumericTraitsPython.itkNumericTraitsFAUC2_min
itkNumericTraitsFAUC2_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsFAUC2_NonpositiveMin
itkNumericTraitsFAUC2_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsFAUC2_ZeroValue
itkNumericTraitsFAUC2_OneValue = _itkNumericTraitsPython.itkNumericTraitsFAUC2_OneValue
itkNumericTraitsFAUC2_SetLength = _itkNumericTraitsPython.itkNumericTraitsFAUC2_SetLength
itkNumericTraitsFAUC2_GetLength = _itkNumericTraitsPython.itkNumericTraitsFAUC2_GetLength
itkNumericTraitsFAUC2_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsFAUC2_AssignToArray

class itkNumericTraitsFAUC3(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUC3_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUC3_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUC3_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUC3_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUC3_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUC3_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUC3_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUC3_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsFAUC3 self) -> itkNumericTraitsFAUC3
        __init__(itkNumericTraitsFAUC3 self, itkNumericTraitsFAUC3 arg0) -> itkNumericTraitsFAUC3


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsFAUC3_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsFAUC3(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsFAUC3

# Register itkNumericTraitsFAUC3 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsFAUC3_swigregister(itkNumericTraitsFAUC3)
itkNumericTraitsFAUC3_max = _itkNumericTraitsPython.itkNumericTraitsFAUC3_max
itkNumericTraitsFAUC3_min = _itkNumericTraitsPython.itkNumericTraitsFAUC3_min
itkNumericTraitsFAUC3_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsFAUC3_NonpositiveMin
itkNumericTraitsFAUC3_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsFAUC3_ZeroValue
itkNumericTraitsFAUC3_OneValue = _itkNumericTraitsPython.itkNumericTraitsFAUC3_OneValue
itkNumericTraitsFAUC3_SetLength = _itkNumericTraitsPython.itkNumericTraitsFAUC3_SetLength
itkNumericTraitsFAUC3_GetLength = _itkNumericTraitsPython.itkNumericTraitsFAUC3_GetLength
itkNumericTraitsFAUC3_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsFAUC3_AssignToArray

class itkNumericTraitsFAUC4(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUC4_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUC4_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUC4_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUC4_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUC4_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUC4_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUC4_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUC4_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsFAUC4 self) -> itkNumericTraitsFAUC4
        __init__(itkNumericTraitsFAUC4 self, itkNumericTraitsFAUC4 arg0) -> itkNumericTraitsFAUC4


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsFAUC4_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsFAUC4(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsFAUC4

# Register itkNumericTraitsFAUC4 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsFAUC4_swigregister(itkNumericTraitsFAUC4)
itkNumericTraitsFAUC4_max = _itkNumericTraitsPython.itkNumericTraitsFAUC4_max
itkNumericTraitsFAUC4_min = _itkNumericTraitsPython.itkNumericTraitsFAUC4_min
itkNumericTraitsFAUC4_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsFAUC4_NonpositiveMin
itkNumericTraitsFAUC4_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsFAUC4_ZeroValue
itkNumericTraitsFAUC4_OneValue = _itkNumericTraitsPython.itkNumericTraitsFAUC4_OneValue
itkNumericTraitsFAUC4_SetLength = _itkNumericTraitsPython.itkNumericTraitsFAUC4_SetLength
itkNumericTraitsFAUC4_GetLength = _itkNumericTraitsPython.itkNumericTraitsFAUC4_GetLength
itkNumericTraitsFAUC4_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsFAUC4_AssignToArray

class itkNumericTraitsFAUC6(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUC6_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUC6_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUC6_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUC6_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUC6_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUC6_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUC6_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUC6_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsFAUC6 self) -> itkNumericTraitsFAUC6
        __init__(itkNumericTraitsFAUC6 self, itkNumericTraitsFAUC6 arg0) -> itkNumericTraitsFAUC6


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsFAUC6_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsFAUC6(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsFAUC6

# Register itkNumericTraitsFAUC6 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsFAUC6_swigregister(itkNumericTraitsFAUC6)
itkNumericTraitsFAUC6_max = _itkNumericTraitsPython.itkNumericTraitsFAUC6_max
itkNumericTraitsFAUC6_min = _itkNumericTraitsPython.itkNumericTraitsFAUC6_min
itkNumericTraitsFAUC6_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsFAUC6_NonpositiveMin
itkNumericTraitsFAUC6_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsFAUC6_ZeroValue
itkNumericTraitsFAUC6_OneValue = _itkNumericTraitsPython.itkNumericTraitsFAUC6_OneValue
itkNumericTraitsFAUC6_SetLength = _itkNumericTraitsPython.itkNumericTraitsFAUC6_SetLength
itkNumericTraitsFAUC6_GetLength = _itkNumericTraitsPython.itkNumericTraitsFAUC6_GetLength
itkNumericTraitsFAUC6_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsFAUC6_AssignToArray

class itkNumericTraitsFAUI1(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUI1_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUI1_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUI1_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUI1_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUI1_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUI1_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUI1_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUI1_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsFAUI1 self) -> itkNumericTraitsFAUI1
        __init__(itkNumericTraitsFAUI1 self, itkNumericTraitsFAUI1 arg0) -> itkNumericTraitsFAUI1


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsFAUI1_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsFAUI1(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsFAUI1

# Register itkNumericTraitsFAUI1 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsFAUI1_swigregister(itkNumericTraitsFAUI1)
itkNumericTraitsFAUI1_max = _itkNumericTraitsPython.itkNumericTraitsFAUI1_max
itkNumericTraitsFAUI1_min = _itkNumericTraitsPython.itkNumericTraitsFAUI1_min
itkNumericTraitsFAUI1_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsFAUI1_NonpositiveMin
itkNumericTraitsFAUI1_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsFAUI1_ZeroValue
itkNumericTraitsFAUI1_OneValue = _itkNumericTraitsPython.itkNumericTraitsFAUI1_OneValue
itkNumericTraitsFAUI1_SetLength = _itkNumericTraitsPython.itkNumericTraitsFAUI1_SetLength
itkNumericTraitsFAUI1_GetLength = _itkNumericTraitsPython.itkNumericTraitsFAUI1_GetLength
itkNumericTraitsFAUI1_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsFAUI1_AssignToArray

class itkNumericTraitsFAUI2(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUI2_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUI2_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUI2_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUI2_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUI2_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUI2_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUI2_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUI2_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsFAUI2 self) -> itkNumericTraitsFAUI2
        __init__(itkNumericTraitsFAUI2 self, itkNumericTraitsFAUI2 arg0) -> itkNumericTraitsFAUI2


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsFAUI2_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsFAUI2(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsFAUI2

# Register itkNumericTraitsFAUI2 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsFAUI2_swigregister(itkNumericTraitsFAUI2)
itkNumericTraitsFAUI2_max = _itkNumericTraitsPython.itkNumericTraitsFAUI2_max
itkNumericTraitsFAUI2_min = _itkNumericTraitsPython.itkNumericTraitsFAUI2_min
itkNumericTraitsFAUI2_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsFAUI2_NonpositiveMin
itkNumericTraitsFAUI2_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsFAUI2_ZeroValue
itkNumericTraitsFAUI2_OneValue = _itkNumericTraitsPython.itkNumericTraitsFAUI2_OneValue
itkNumericTraitsFAUI2_SetLength = _itkNumericTraitsPython.itkNumericTraitsFAUI2_SetLength
itkNumericTraitsFAUI2_GetLength = _itkNumericTraitsPython.itkNumericTraitsFAUI2_GetLength
itkNumericTraitsFAUI2_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsFAUI2_AssignToArray

class itkNumericTraitsFAUI3(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUI3_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUI3_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUI3_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUI3_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUI3_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUI3_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUI3_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUI3_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsFAUI3 self) -> itkNumericTraitsFAUI3
        __init__(itkNumericTraitsFAUI3 self, itkNumericTraitsFAUI3 arg0) -> itkNumericTraitsFAUI3


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsFAUI3_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsFAUI3(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsFAUI3

# Register itkNumericTraitsFAUI3 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsFAUI3_swigregister(itkNumericTraitsFAUI3)
itkNumericTraitsFAUI3_max = _itkNumericTraitsPython.itkNumericTraitsFAUI3_max
itkNumericTraitsFAUI3_min = _itkNumericTraitsPython.itkNumericTraitsFAUI3_min
itkNumericTraitsFAUI3_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsFAUI3_NonpositiveMin
itkNumericTraitsFAUI3_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsFAUI3_ZeroValue
itkNumericTraitsFAUI3_OneValue = _itkNumericTraitsPython.itkNumericTraitsFAUI3_OneValue
itkNumericTraitsFAUI3_SetLength = _itkNumericTraitsPython.itkNumericTraitsFAUI3_SetLength
itkNumericTraitsFAUI3_GetLength = _itkNumericTraitsPython.itkNumericTraitsFAUI3_GetLength
itkNumericTraitsFAUI3_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsFAUI3_AssignToArray

class itkNumericTraitsFAUI4(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUI4_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUI4_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUI4_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUI4_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUI4_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUI4_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUI4_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUI4_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsFAUI4 self) -> itkNumericTraitsFAUI4
        __init__(itkNumericTraitsFAUI4 self, itkNumericTraitsFAUI4 arg0) -> itkNumericTraitsFAUI4


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsFAUI4_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsFAUI4(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsFAUI4

# Register itkNumericTraitsFAUI4 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsFAUI4_swigregister(itkNumericTraitsFAUI4)
itkNumericTraitsFAUI4_max = _itkNumericTraitsPython.itkNumericTraitsFAUI4_max
itkNumericTraitsFAUI4_min = _itkNumericTraitsPython.itkNumericTraitsFAUI4_min
itkNumericTraitsFAUI4_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsFAUI4_NonpositiveMin
itkNumericTraitsFAUI4_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsFAUI4_ZeroValue
itkNumericTraitsFAUI4_OneValue = _itkNumericTraitsPython.itkNumericTraitsFAUI4_OneValue
itkNumericTraitsFAUI4_SetLength = _itkNumericTraitsPython.itkNumericTraitsFAUI4_SetLength
itkNumericTraitsFAUI4_GetLength = _itkNumericTraitsPython.itkNumericTraitsFAUI4_GetLength
itkNumericTraitsFAUI4_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsFAUI4_AssignToArray

class itkNumericTraitsFAUI6(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUI6_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUI6_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUI6_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUI6_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUI6_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUI6_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUI6_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUI6_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsFAUI6 self) -> itkNumericTraitsFAUI6
        __init__(itkNumericTraitsFAUI6 self, itkNumericTraitsFAUI6 arg0) -> itkNumericTraitsFAUI6


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsFAUI6_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsFAUI6(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsFAUI6

# Register itkNumericTraitsFAUI6 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsFAUI6_swigregister(itkNumericTraitsFAUI6)
itkNumericTraitsFAUI6_max = _itkNumericTraitsPython.itkNumericTraitsFAUI6_max
itkNumericTraitsFAUI6_min = _itkNumericTraitsPython.itkNumericTraitsFAUI6_min
itkNumericTraitsFAUI6_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsFAUI6_NonpositiveMin
itkNumericTraitsFAUI6_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsFAUI6_ZeroValue
itkNumericTraitsFAUI6_OneValue = _itkNumericTraitsPython.itkNumericTraitsFAUI6_OneValue
itkNumericTraitsFAUI6_SetLength = _itkNumericTraitsPython.itkNumericTraitsFAUI6_SetLength
itkNumericTraitsFAUI6_GetLength = _itkNumericTraitsPython.itkNumericTraitsFAUI6_GetLength
itkNumericTraitsFAUI6_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsFAUI6_AssignToArray

class itkNumericTraitsFAUL1(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUL1_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUL1_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUL1_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUL1_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUL1_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUL1_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUL1_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUL1_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsFAUL1 self) -> itkNumericTraitsFAUL1
        __init__(itkNumericTraitsFAUL1 self, itkNumericTraitsFAUL1 arg0) -> itkNumericTraitsFAUL1


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsFAUL1_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsFAUL1(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsFAUL1

# Register itkNumericTraitsFAUL1 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsFAUL1_swigregister(itkNumericTraitsFAUL1)
itkNumericTraitsFAUL1_max = _itkNumericTraitsPython.itkNumericTraitsFAUL1_max
itkNumericTraitsFAUL1_min = _itkNumericTraitsPython.itkNumericTraitsFAUL1_min
itkNumericTraitsFAUL1_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsFAUL1_NonpositiveMin
itkNumericTraitsFAUL1_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsFAUL1_ZeroValue
itkNumericTraitsFAUL1_OneValue = _itkNumericTraitsPython.itkNumericTraitsFAUL1_OneValue
itkNumericTraitsFAUL1_SetLength = _itkNumericTraitsPython.itkNumericTraitsFAUL1_SetLength
itkNumericTraitsFAUL1_GetLength = _itkNumericTraitsPython.itkNumericTraitsFAUL1_GetLength
itkNumericTraitsFAUL1_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsFAUL1_AssignToArray

class itkNumericTraitsFAUL2(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUL2_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUL2_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUL2_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUL2_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUL2_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUL2_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUL2_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUL2_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsFAUL2 self) -> itkNumericTraitsFAUL2
        __init__(itkNumericTraitsFAUL2 self, itkNumericTraitsFAUL2 arg0) -> itkNumericTraitsFAUL2


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsFAUL2_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsFAUL2(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsFAUL2

# Register itkNumericTraitsFAUL2 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsFAUL2_swigregister(itkNumericTraitsFAUL2)
itkNumericTraitsFAUL2_max = _itkNumericTraitsPython.itkNumericTraitsFAUL2_max
itkNumericTraitsFAUL2_min = _itkNumericTraitsPython.itkNumericTraitsFAUL2_min
itkNumericTraitsFAUL2_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsFAUL2_NonpositiveMin
itkNumericTraitsFAUL2_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsFAUL2_ZeroValue
itkNumericTraitsFAUL2_OneValue = _itkNumericTraitsPython.itkNumericTraitsFAUL2_OneValue
itkNumericTraitsFAUL2_SetLength = _itkNumericTraitsPython.itkNumericTraitsFAUL2_SetLength
itkNumericTraitsFAUL2_GetLength = _itkNumericTraitsPython.itkNumericTraitsFAUL2_GetLength
itkNumericTraitsFAUL2_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsFAUL2_AssignToArray

class itkNumericTraitsFAUL3(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUL3_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUL3_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUL3_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUL3_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUL3_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUL3_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUL3_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUL3_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsFAUL3 self) -> itkNumericTraitsFAUL3
        __init__(itkNumericTraitsFAUL3 self, itkNumericTraitsFAUL3 arg0) -> itkNumericTraitsFAUL3


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsFAUL3_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsFAUL3(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsFAUL3

# Register itkNumericTraitsFAUL3 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsFAUL3_swigregister(itkNumericTraitsFAUL3)
itkNumericTraitsFAUL3_max = _itkNumericTraitsPython.itkNumericTraitsFAUL3_max
itkNumericTraitsFAUL3_min = _itkNumericTraitsPython.itkNumericTraitsFAUL3_min
itkNumericTraitsFAUL3_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsFAUL3_NonpositiveMin
itkNumericTraitsFAUL3_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsFAUL3_ZeroValue
itkNumericTraitsFAUL3_OneValue = _itkNumericTraitsPython.itkNumericTraitsFAUL3_OneValue
itkNumericTraitsFAUL3_SetLength = _itkNumericTraitsPython.itkNumericTraitsFAUL3_SetLength
itkNumericTraitsFAUL3_GetLength = _itkNumericTraitsPython.itkNumericTraitsFAUL3_GetLength
itkNumericTraitsFAUL3_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsFAUL3_AssignToArray

class itkNumericTraitsFAUL4(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUL4_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUL4_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUL4_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUL4_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUL4_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUL4_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUL4_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUL4_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsFAUL4 self) -> itkNumericTraitsFAUL4
        __init__(itkNumericTraitsFAUL4 self, itkNumericTraitsFAUL4 arg0) -> itkNumericTraitsFAUL4


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsFAUL4_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsFAUL4(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsFAUL4

# Register itkNumericTraitsFAUL4 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsFAUL4_swigregister(itkNumericTraitsFAUL4)
itkNumericTraitsFAUL4_max = _itkNumericTraitsPython.itkNumericTraitsFAUL4_max
itkNumericTraitsFAUL4_min = _itkNumericTraitsPython.itkNumericTraitsFAUL4_min
itkNumericTraitsFAUL4_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsFAUL4_NonpositiveMin
itkNumericTraitsFAUL4_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsFAUL4_ZeroValue
itkNumericTraitsFAUL4_OneValue = _itkNumericTraitsPython.itkNumericTraitsFAUL4_OneValue
itkNumericTraitsFAUL4_SetLength = _itkNumericTraitsPython.itkNumericTraitsFAUL4_SetLength
itkNumericTraitsFAUL4_GetLength = _itkNumericTraitsPython.itkNumericTraitsFAUL4_GetLength
itkNumericTraitsFAUL4_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsFAUL4_AssignToArray

class itkNumericTraitsFAUL6(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUL6_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUL6_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUL6_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUL6_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUL6_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUL6_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUL6_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUL6_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsFAUL6 self) -> itkNumericTraitsFAUL6
        __init__(itkNumericTraitsFAUL6 self, itkNumericTraitsFAUL6 arg0) -> itkNumericTraitsFAUL6


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsFAUL6_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsFAUL6(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsFAUL6

# Register itkNumericTraitsFAUL6 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsFAUL6_swigregister(itkNumericTraitsFAUL6)
itkNumericTraitsFAUL6_max = _itkNumericTraitsPython.itkNumericTraitsFAUL6_max
itkNumericTraitsFAUL6_min = _itkNumericTraitsPython.itkNumericTraitsFAUL6_min
itkNumericTraitsFAUL6_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsFAUL6_NonpositiveMin
itkNumericTraitsFAUL6_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsFAUL6_ZeroValue
itkNumericTraitsFAUL6_OneValue = _itkNumericTraitsPython.itkNumericTraitsFAUL6_OneValue
itkNumericTraitsFAUL6_SetLength = _itkNumericTraitsPython.itkNumericTraitsFAUL6_SetLength
itkNumericTraitsFAUL6_GetLength = _itkNumericTraitsPython.itkNumericTraitsFAUL6_GetLength
itkNumericTraitsFAUL6_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsFAUL6_AssignToArray

class itkNumericTraitsFAUS1(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUS1_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUS1_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUS1_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUS1_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUS1_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUS1_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUS1_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUS1_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsFAUS1 self) -> itkNumericTraitsFAUS1
        __init__(itkNumericTraitsFAUS1 self, itkNumericTraitsFAUS1 arg0) -> itkNumericTraitsFAUS1


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsFAUS1_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsFAUS1(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsFAUS1

# Register itkNumericTraitsFAUS1 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsFAUS1_swigregister(itkNumericTraitsFAUS1)
itkNumericTraitsFAUS1_max = _itkNumericTraitsPython.itkNumericTraitsFAUS1_max
itkNumericTraitsFAUS1_min = _itkNumericTraitsPython.itkNumericTraitsFAUS1_min
itkNumericTraitsFAUS1_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsFAUS1_NonpositiveMin
itkNumericTraitsFAUS1_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsFAUS1_ZeroValue
itkNumericTraitsFAUS1_OneValue = _itkNumericTraitsPython.itkNumericTraitsFAUS1_OneValue
itkNumericTraitsFAUS1_SetLength = _itkNumericTraitsPython.itkNumericTraitsFAUS1_SetLength
itkNumericTraitsFAUS1_GetLength = _itkNumericTraitsPython.itkNumericTraitsFAUS1_GetLength
itkNumericTraitsFAUS1_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsFAUS1_AssignToArray

class itkNumericTraitsFAUS2(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUS2_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUS2_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUS2_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUS2_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUS2_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUS2_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUS2_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUS2_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsFAUS2 self) -> itkNumericTraitsFAUS2
        __init__(itkNumericTraitsFAUS2 self, itkNumericTraitsFAUS2 arg0) -> itkNumericTraitsFAUS2


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsFAUS2_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsFAUS2(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsFAUS2

# Register itkNumericTraitsFAUS2 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsFAUS2_swigregister(itkNumericTraitsFAUS2)
itkNumericTraitsFAUS2_max = _itkNumericTraitsPython.itkNumericTraitsFAUS2_max
itkNumericTraitsFAUS2_min = _itkNumericTraitsPython.itkNumericTraitsFAUS2_min
itkNumericTraitsFAUS2_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsFAUS2_NonpositiveMin
itkNumericTraitsFAUS2_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsFAUS2_ZeroValue
itkNumericTraitsFAUS2_OneValue = _itkNumericTraitsPython.itkNumericTraitsFAUS2_OneValue
itkNumericTraitsFAUS2_SetLength = _itkNumericTraitsPython.itkNumericTraitsFAUS2_SetLength
itkNumericTraitsFAUS2_GetLength = _itkNumericTraitsPython.itkNumericTraitsFAUS2_GetLength
itkNumericTraitsFAUS2_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsFAUS2_AssignToArray

class itkNumericTraitsFAUS3(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUS3_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUS3_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUS3_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUS3_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUS3_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUS3_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUS3_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUS3_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsFAUS3 self) -> itkNumericTraitsFAUS3
        __init__(itkNumericTraitsFAUS3 self, itkNumericTraitsFAUS3 arg0) -> itkNumericTraitsFAUS3


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsFAUS3_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsFAUS3(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsFAUS3

# Register itkNumericTraitsFAUS3 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsFAUS3_swigregister(itkNumericTraitsFAUS3)
itkNumericTraitsFAUS3_max = _itkNumericTraitsPython.itkNumericTraitsFAUS3_max
itkNumericTraitsFAUS3_min = _itkNumericTraitsPython.itkNumericTraitsFAUS3_min
itkNumericTraitsFAUS3_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsFAUS3_NonpositiveMin
itkNumericTraitsFAUS3_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsFAUS3_ZeroValue
itkNumericTraitsFAUS3_OneValue = _itkNumericTraitsPython.itkNumericTraitsFAUS3_OneValue
itkNumericTraitsFAUS3_SetLength = _itkNumericTraitsPython.itkNumericTraitsFAUS3_SetLength
itkNumericTraitsFAUS3_GetLength = _itkNumericTraitsPython.itkNumericTraitsFAUS3_GetLength
itkNumericTraitsFAUS3_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsFAUS3_AssignToArray

class itkNumericTraitsFAUS4(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUS4_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUS4_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUS4_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUS4_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUS4_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUS4_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUS4_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUS4_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsFAUS4 self) -> itkNumericTraitsFAUS4
        __init__(itkNumericTraitsFAUS4 self, itkNumericTraitsFAUS4 arg0) -> itkNumericTraitsFAUS4


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsFAUS4_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsFAUS4(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsFAUS4

# Register itkNumericTraitsFAUS4 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsFAUS4_swigregister(itkNumericTraitsFAUS4)
itkNumericTraitsFAUS4_max = _itkNumericTraitsPython.itkNumericTraitsFAUS4_max
itkNumericTraitsFAUS4_min = _itkNumericTraitsPython.itkNumericTraitsFAUS4_min
itkNumericTraitsFAUS4_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsFAUS4_NonpositiveMin
itkNumericTraitsFAUS4_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsFAUS4_ZeroValue
itkNumericTraitsFAUS4_OneValue = _itkNumericTraitsPython.itkNumericTraitsFAUS4_OneValue
itkNumericTraitsFAUS4_SetLength = _itkNumericTraitsPython.itkNumericTraitsFAUS4_SetLength
itkNumericTraitsFAUS4_GetLength = _itkNumericTraitsPython.itkNumericTraitsFAUS4_GetLength
itkNumericTraitsFAUS4_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsFAUS4_AssignToArray

class itkNumericTraitsFAUS6(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUS6_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUS6_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUS6_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUS6_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUS6_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUS6_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUS6_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsFAUS6_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsFAUS6 self) -> itkNumericTraitsFAUS6
        __init__(itkNumericTraitsFAUS6 self, itkNumericTraitsFAUS6 arg0) -> itkNumericTraitsFAUS6


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsFAUS6_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsFAUS6(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsFAUS6

# Register itkNumericTraitsFAUS6 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsFAUS6_swigregister(itkNumericTraitsFAUS6)
itkNumericTraitsFAUS6_max = _itkNumericTraitsPython.itkNumericTraitsFAUS6_max
itkNumericTraitsFAUS6_min = _itkNumericTraitsPython.itkNumericTraitsFAUS6_min
itkNumericTraitsFAUS6_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsFAUS6_NonpositiveMin
itkNumericTraitsFAUS6_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsFAUS6_ZeroValue
itkNumericTraitsFAUS6_OneValue = _itkNumericTraitsPython.itkNumericTraitsFAUS6_OneValue
itkNumericTraitsFAUS6_SetLength = _itkNumericTraitsPython.itkNumericTraitsFAUS6_SetLength
itkNumericTraitsFAUS6_GetLength = _itkNumericTraitsPython.itkNumericTraitsFAUS6_GetLength
itkNumericTraitsFAUS6_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsFAUS6_AssignToArray

class itkNumericTraitsRGBAUC(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsRGBAUC_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsRGBAUC_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsRGBAUC_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsRGBAUC_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsRGBAUC_OneValue)
    IsPositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsRGBAUC_IsPositive)
    IsNonpositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsRGBAUC_IsNonpositive)
    IsNegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsRGBAUC_IsNegative)
    IsNonnegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsRGBAUC_IsNonnegative)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsRGBAUC_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsRGBAUC_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsRGBAUC_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsRGBAUC self) -> itkNumericTraitsRGBAUC
        __init__(itkNumericTraitsRGBAUC self, itkNumericTraitsRGBAUC arg0) -> itkNumericTraitsRGBAUC


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsRGBAUC_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsRGBAUC(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsRGBAUC

# Register itkNumericTraitsRGBAUC in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsRGBAUC_swigregister(itkNumericTraitsRGBAUC)
itkNumericTraitsRGBAUC_max = _itkNumericTraitsPython.itkNumericTraitsRGBAUC_max
itkNumericTraitsRGBAUC_min = _itkNumericTraitsPython.itkNumericTraitsRGBAUC_min
itkNumericTraitsRGBAUC_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsRGBAUC_NonpositiveMin
itkNumericTraitsRGBAUC_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsRGBAUC_ZeroValue
itkNumericTraitsRGBAUC_OneValue = _itkNumericTraitsPython.itkNumericTraitsRGBAUC_OneValue
itkNumericTraitsRGBAUC_IsPositive = _itkNumericTraitsPython.itkNumericTraitsRGBAUC_IsPositive
itkNumericTraitsRGBAUC_IsNonpositive = _itkNumericTraitsPython.itkNumericTraitsRGBAUC_IsNonpositive
itkNumericTraitsRGBAUC_IsNegative = _itkNumericTraitsPython.itkNumericTraitsRGBAUC_IsNegative
itkNumericTraitsRGBAUC_IsNonnegative = _itkNumericTraitsPython.itkNumericTraitsRGBAUC_IsNonnegative
itkNumericTraitsRGBAUC_SetLength = _itkNumericTraitsPython.itkNumericTraitsRGBAUC_SetLength
itkNumericTraitsRGBAUC_GetLength = _itkNumericTraitsPython.itkNumericTraitsRGBAUC_GetLength
itkNumericTraitsRGBAUC_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsRGBAUC_AssignToArray

class itkNumericTraitsRGBUC(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsRGBUC_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsRGBUC_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsRGBUC_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsRGBUC_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsRGBUC_OneValue)
    IsPositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsRGBUC_IsPositive)
    IsNonpositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsRGBUC_IsNonpositive)
    IsNegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsRGBUC_IsNegative)
    IsNonnegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsRGBUC_IsNonnegative)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsRGBUC_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsRGBUC_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsRGBUC_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsRGBUC self) -> itkNumericTraitsRGBUC
        __init__(itkNumericTraitsRGBUC self, itkNumericTraitsRGBUC arg0) -> itkNumericTraitsRGBUC


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsRGBUC_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsRGBUC(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsRGBUC

# Register itkNumericTraitsRGBUC in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsRGBUC_swigregister(itkNumericTraitsRGBUC)
itkNumericTraitsRGBUC_max = _itkNumericTraitsPython.itkNumericTraitsRGBUC_max
itkNumericTraitsRGBUC_min = _itkNumericTraitsPython.itkNumericTraitsRGBUC_min
itkNumericTraitsRGBUC_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsRGBUC_NonpositiveMin
itkNumericTraitsRGBUC_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsRGBUC_ZeroValue
itkNumericTraitsRGBUC_OneValue = _itkNumericTraitsPython.itkNumericTraitsRGBUC_OneValue
itkNumericTraitsRGBUC_IsPositive = _itkNumericTraitsPython.itkNumericTraitsRGBUC_IsPositive
itkNumericTraitsRGBUC_IsNonpositive = _itkNumericTraitsPython.itkNumericTraitsRGBUC_IsNonpositive
itkNumericTraitsRGBUC_IsNegative = _itkNumericTraitsPython.itkNumericTraitsRGBUC_IsNegative
itkNumericTraitsRGBUC_IsNonnegative = _itkNumericTraitsPython.itkNumericTraitsRGBUC_IsNonnegative
itkNumericTraitsRGBUC_SetLength = _itkNumericTraitsPython.itkNumericTraitsRGBUC_SetLength
itkNumericTraitsRGBUC_GetLength = _itkNumericTraitsPython.itkNumericTraitsRGBUC_GetLength
itkNumericTraitsRGBUC_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsRGBUC_AssignToArray

class itkNumericTraitsVD1(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD1_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD1_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD1_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD1_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD1_OneValue)
    IsPositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD1_IsPositive)
    IsNonpositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD1_IsNonpositive)
    IsNegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD1_IsNegative)
    IsNonnegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD1_IsNonnegative)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD1_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD1_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD1_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsVD1 self) -> itkNumericTraitsVD1
        __init__(itkNumericTraitsVD1 self, itkNumericTraitsVD1 arg0) -> itkNumericTraitsVD1


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsVD1_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsVD1(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsVD1

# Register itkNumericTraitsVD1 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsVD1_swigregister(itkNumericTraitsVD1)
itkNumericTraitsVD1_max = _itkNumericTraitsPython.itkNumericTraitsVD1_max
itkNumericTraitsVD1_min = _itkNumericTraitsPython.itkNumericTraitsVD1_min
itkNumericTraitsVD1_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsVD1_NonpositiveMin
itkNumericTraitsVD1_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsVD1_ZeroValue
itkNumericTraitsVD1_OneValue = _itkNumericTraitsPython.itkNumericTraitsVD1_OneValue
itkNumericTraitsVD1_IsPositive = _itkNumericTraitsPython.itkNumericTraitsVD1_IsPositive
itkNumericTraitsVD1_IsNonpositive = _itkNumericTraitsPython.itkNumericTraitsVD1_IsNonpositive
itkNumericTraitsVD1_IsNegative = _itkNumericTraitsPython.itkNumericTraitsVD1_IsNegative
itkNumericTraitsVD1_IsNonnegative = _itkNumericTraitsPython.itkNumericTraitsVD1_IsNonnegative
itkNumericTraitsVD1_SetLength = _itkNumericTraitsPython.itkNumericTraitsVD1_SetLength
itkNumericTraitsVD1_GetLength = _itkNumericTraitsPython.itkNumericTraitsVD1_GetLength
itkNumericTraitsVD1_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsVD1_AssignToArray

class itkNumericTraitsVD2(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD2_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD2_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD2_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD2_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD2_OneValue)
    IsPositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD2_IsPositive)
    IsNonpositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD2_IsNonpositive)
    IsNegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD2_IsNegative)
    IsNonnegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD2_IsNonnegative)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD2_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD2_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD2_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsVD2 self) -> itkNumericTraitsVD2
        __init__(itkNumericTraitsVD2 self, itkNumericTraitsVD2 arg0) -> itkNumericTraitsVD2


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsVD2_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsVD2(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsVD2

# Register itkNumericTraitsVD2 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsVD2_swigregister(itkNumericTraitsVD2)
itkNumericTraitsVD2_max = _itkNumericTraitsPython.itkNumericTraitsVD2_max
itkNumericTraitsVD2_min = _itkNumericTraitsPython.itkNumericTraitsVD2_min
itkNumericTraitsVD2_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsVD2_NonpositiveMin
itkNumericTraitsVD2_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsVD2_ZeroValue
itkNumericTraitsVD2_OneValue = _itkNumericTraitsPython.itkNumericTraitsVD2_OneValue
itkNumericTraitsVD2_IsPositive = _itkNumericTraitsPython.itkNumericTraitsVD2_IsPositive
itkNumericTraitsVD2_IsNonpositive = _itkNumericTraitsPython.itkNumericTraitsVD2_IsNonpositive
itkNumericTraitsVD2_IsNegative = _itkNumericTraitsPython.itkNumericTraitsVD2_IsNegative
itkNumericTraitsVD2_IsNonnegative = _itkNumericTraitsPython.itkNumericTraitsVD2_IsNonnegative
itkNumericTraitsVD2_SetLength = _itkNumericTraitsPython.itkNumericTraitsVD2_SetLength
itkNumericTraitsVD2_GetLength = _itkNumericTraitsPython.itkNumericTraitsVD2_GetLength
itkNumericTraitsVD2_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsVD2_AssignToArray

class itkNumericTraitsVD3(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD3_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD3_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD3_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD3_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD3_OneValue)
    IsPositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD3_IsPositive)
    IsNonpositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD3_IsNonpositive)
    IsNegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD3_IsNegative)
    IsNonnegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD3_IsNonnegative)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD3_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD3_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD3_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsVD3 self) -> itkNumericTraitsVD3
        __init__(itkNumericTraitsVD3 self, itkNumericTraitsVD3 arg0) -> itkNumericTraitsVD3


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsVD3_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsVD3(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsVD3

# Register itkNumericTraitsVD3 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsVD3_swigregister(itkNumericTraitsVD3)
itkNumericTraitsVD3_max = _itkNumericTraitsPython.itkNumericTraitsVD3_max
itkNumericTraitsVD3_min = _itkNumericTraitsPython.itkNumericTraitsVD3_min
itkNumericTraitsVD3_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsVD3_NonpositiveMin
itkNumericTraitsVD3_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsVD3_ZeroValue
itkNumericTraitsVD3_OneValue = _itkNumericTraitsPython.itkNumericTraitsVD3_OneValue
itkNumericTraitsVD3_IsPositive = _itkNumericTraitsPython.itkNumericTraitsVD3_IsPositive
itkNumericTraitsVD3_IsNonpositive = _itkNumericTraitsPython.itkNumericTraitsVD3_IsNonpositive
itkNumericTraitsVD3_IsNegative = _itkNumericTraitsPython.itkNumericTraitsVD3_IsNegative
itkNumericTraitsVD3_IsNonnegative = _itkNumericTraitsPython.itkNumericTraitsVD3_IsNonnegative
itkNumericTraitsVD3_SetLength = _itkNumericTraitsPython.itkNumericTraitsVD3_SetLength
itkNumericTraitsVD3_GetLength = _itkNumericTraitsPython.itkNumericTraitsVD3_GetLength
itkNumericTraitsVD3_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsVD3_AssignToArray

class itkNumericTraitsVD4(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD4_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD4_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD4_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD4_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD4_OneValue)
    IsPositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD4_IsPositive)
    IsNonpositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD4_IsNonpositive)
    IsNegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD4_IsNegative)
    IsNonnegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD4_IsNonnegative)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD4_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD4_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD4_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsVD4 self) -> itkNumericTraitsVD4
        __init__(itkNumericTraitsVD4 self, itkNumericTraitsVD4 arg0) -> itkNumericTraitsVD4


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsVD4_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsVD4(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsVD4

# Register itkNumericTraitsVD4 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsVD4_swigregister(itkNumericTraitsVD4)
itkNumericTraitsVD4_max = _itkNumericTraitsPython.itkNumericTraitsVD4_max
itkNumericTraitsVD4_min = _itkNumericTraitsPython.itkNumericTraitsVD4_min
itkNumericTraitsVD4_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsVD4_NonpositiveMin
itkNumericTraitsVD4_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsVD4_ZeroValue
itkNumericTraitsVD4_OneValue = _itkNumericTraitsPython.itkNumericTraitsVD4_OneValue
itkNumericTraitsVD4_IsPositive = _itkNumericTraitsPython.itkNumericTraitsVD4_IsPositive
itkNumericTraitsVD4_IsNonpositive = _itkNumericTraitsPython.itkNumericTraitsVD4_IsNonpositive
itkNumericTraitsVD4_IsNegative = _itkNumericTraitsPython.itkNumericTraitsVD4_IsNegative
itkNumericTraitsVD4_IsNonnegative = _itkNumericTraitsPython.itkNumericTraitsVD4_IsNonnegative
itkNumericTraitsVD4_SetLength = _itkNumericTraitsPython.itkNumericTraitsVD4_SetLength
itkNumericTraitsVD4_GetLength = _itkNumericTraitsPython.itkNumericTraitsVD4_GetLength
itkNumericTraitsVD4_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsVD4_AssignToArray

class itkNumericTraitsVD6(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD6_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD6_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD6_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD6_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD6_OneValue)
    IsPositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD6_IsPositive)
    IsNonpositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD6_IsNonpositive)
    IsNegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD6_IsNegative)
    IsNonnegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD6_IsNonnegative)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD6_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD6_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVD6_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsVD6 self) -> itkNumericTraitsVD6
        __init__(itkNumericTraitsVD6 self, itkNumericTraitsVD6 arg0) -> itkNumericTraitsVD6


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsVD6_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsVD6(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsVD6

# Register itkNumericTraitsVD6 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsVD6_swigregister(itkNumericTraitsVD6)
itkNumericTraitsVD6_max = _itkNumericTraitsPython.itkNumericTraitsVD6_max
itkNumericTraitsVD6_min = _itkNumericTraitsPython.itkNumericTraitsVD6_min
itkNumericTraitsVD6_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsVD6_NonpositiveMin
itkNumericTraitsVD6_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsVD6_ZeroValue
itkNumericTraitsVD6_OneValue = _itkNumericTraitsPython.itkNumericTraitsVD6_OneValue
itkNumericTraitsVD6_IsPositive = _itkNumericTraitsPython.itkNumericTraitsVD6_IsPositive
itkNumericTraitsVD6_IsNonpositive = _itkNumericTraitsPython.itkNumericTraitsVD6_IsNonpositive
itkNumericTraitsVD6_IsNegative = _itkNumericTraitsPython.itkNumericTraitsVD6_IsNegative
itkNumericTraitsVD6_IsNonnegative = _itkNumericTraitsPython.itkNumericTraitsVD6_IsNonnegative
itkNumericTraitsVD6_SetLength = _itkNumericTraitsPython.itkNumericTraitsVD6_SetLength
itkNumericTraitsVD6_GetLength = _itkNumericTraitsPython.itkNumericTraitsVD6_GetLength
itkNumericTraitsVD6_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsVD6_AssignToArray

class itkNumericTraitsVF1(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF1_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF1_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF1_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF1_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF1_OneValue)
    IsPositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF1_IsPositive)
    IsNonpositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF1_IsNonpositive)
    IsNegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF1_IsNegative)
    IsNonnegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF1_IsNonnegative)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF1_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF1_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF1_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsVF1 self) -> itkNumericTraitsVF1
        __init__(itkNumericTraitsVF1 self, itkNumericTraitsVF1 arg0) -> itkNumericTraitsVF1


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsVF1_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsVF1(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsVF1

# Register itkNumericTraitsVF1 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsVF1_swigregister(itkNumericTraitsVF1)
itkNumericTraitsVF1_max = _itkNumericTraitsPython.itkNumericTraitsVF1_max
itkNumericTraitsVF1_min = _itkNumericTraitsPython.itkNumericTraitsVF1_min
itkNumericTraitsVF1_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsVF1_NonpositiveMin
itkNumericTraitsVF1_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsVF1_ZeroValue
itkNumericTraitsVF1_OneValue = _itkNumericTraitsPython.itkNumericTraitsVF1_OneValue
itkNumericTraitsVF1_IsPositive = _itkNumericTraitsPython.itkNumericTraitsVF1_IsPositive
itkNumericTraitsVF1_IsNonpositive = _itkNumericTraitsPython.itkNumericTraitsVF1_IsNonpositive
itkNumericTraitsVF1_IsNegative = _itkNumericTraitsPython.itkNumericTraitsVF1_IsNegative
itkNumericTraitsVF1_IsNonnegative = _itkNumericTraitsPython.itkNumericTraitsVF1_IsNonnegative
itkNumericTraitsVF1_SetLength = _itkNumericTraitsPython.itkNumericTraitsVF1_SetLength
itkNumericTraitsVF1_GetLength = _itkNumericTraitsPython.itkNumericTraitsVF1_GetLength
itkNumericTraitsVF1_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsVF1_AssignToArray

class itkNumericTraitsVF2(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF2_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF2_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF2_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF2_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF2_OneValue)
    IsPositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF2_IsPositive)
    IsNonpositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF2_IsNonpositive)
    IsNegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF2_IsNegative)
    IsNonnegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF2_IsNonnegative)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF2_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF2_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF2_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsVF2 self) -> itkNumericTraitsVF2
        __init__(itkNumericTraitsVF2 self, itkNumericTraitsVF2 arg0) -> itkNumericTraitsVF2


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsVF2_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsVF2(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsVF2

# Register itkNumericTraitsVF2 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsVF2_swigregister(itkNumericTraitsVF2)
itkNumericTraitsVF2_max = _itkNumericTraitsPython.itkNumericTraitsVF2_max
itkNumericTraitsVF2_min = _itkNumericTraitsPython.itkNumericTraitsVF2_min
itkNumericTraitsVF2_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsVF2_NonpositiveMin
itkNumericTraitsVF2_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsVF2_ZeroValue
itkNumericTraitsVF2_OneValue = _itkNumericTraitsPython.itkNumericTraitsVF2_OneValue
itkNumericTraitsVF2_IsPositive = _itkNumericTraitsPython.itkNumericTraitsVF2_IsPositive
itkNumericTraitsVF2_IsNonpositive = _itkNumericTraitsPython.itkNumericTraitsVF2_IsNonpositive
itkNumericTraitsVF2_IsNegative = _itkNumericTraitsPython.itkNumericTraitsVF2_IsNegative
itkNumericTraitsVF2_IsNonnegative = _itkNumericTraitsPython.itkNumericTraitsVF2_IsNonnegative
itkNumericTraitsVF2_SetLength = _itkNumericTraitsPython.itkNumericTraitsVF2_SetLength
itkNumericTraitsVF2_GetLength = _itkNumericTraitsPython.itkNumericTraitsVF2_GetLength
itkNumericTraitsVF2_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsVF2_AssignToArray

class itkNumericTraitsVF3(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF3_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF3_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF3_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF3_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF3_OneValue)
    IsPositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF3_IsPositive)
    IsNonpositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF3_IsNonpositive)
    IsNegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF3_IsNegative)
    IsNonnegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF3_IsNonnegative)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF3_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF3_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF3_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsVF3 self) -> itkNumericTraitsVF3
        __init__(itkNumericTraitsVF3 self, itkNumericTraitsVF3 arg0) -> itkNumericTraitsVF3


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsVF3_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsVF3(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsVF3

# Register itkNumericTraitsVF3 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsVF3_swigregister(itkNumericTraitsVF3)
itkNumericTraitsVF3_max = _itkNumericTraitsPython.itkNumericTraitsVF3_max
itkNumericTraitsVF3_min = _itkNumericTraitsPython.itkNumericTraitsVF3_min
itkNumericTraitsVF3_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsVF3_NonpositiveMin
itkNumericTraitsVF3_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsVF3_ZeroValue
itkNumericTraitsVF3_OneValue = _itkNumericTraitsPython.itkNumericTraitsVF3_OneValue
itkNumericTraitsVF3_IsPositive = _itkNumericTraitsPython.itkNumericTraitsVF3_IsPositive
itkNumericTraitsVF3_IsNonpositive = _itkNumericTraitsPython.itkNumericTraitsVF3_IsNonpositive
itkNumericTraitsVF3_IsNegative = _itkNumericTraitsPython.itkNumericTraitsVF3_IsNegative
itkNumericTraitsVF3_IsNonnegative = _itkNumericTraitsPython.itkNumericTraitsVF3_IsNonnegative
itkNumericTraitsVF3_SetLength = _itkNumericTraitsPython.itkNumericTraitsVF3_SetLength
itkNumericTraitsVF3_GetLength = _itkNumericTraitsPython.itkNumericTraitsVF3_GetLength
itkNumericTraitsVF3_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsVF3_AssignToArray

class itkNumericTraitsVF4(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF4_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF4_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF4_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF4_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF4_OneValue)
    IsPositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF4_IsPositive)
    IsNonpositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF4_IsNonpositive)
    IsNegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF4_IsNegative)
    IsNonnegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF4_IsNonnegative)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF4_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF4_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF4_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsVF4 self) -> itkNumericTraitsVF4
        __init__(itkNumericTraitsVF4 self, itkNumericTraitsVF4 arg0) -> itkNumericTraitsVF4


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsVF4_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsVF4(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsVF4

# Register itkNumericTraitsVF4 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsVF4_swigregister(itkNumericTraitsVF4)
itkNumericTraitsVF4_max = _itkNumericTraitsPython.itkNumericTraitsVF4_max
itkNumericTraitsVF4_min = _itkNumericTraitsPython.itkNumericTraitsVF4_min
itkNumericTraitsVF4_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsVF4_NonpositiveMin
itkNumericTraitsVF4_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsVF4_ZeroValue
itkNumericTraitsVF4_OneValue = _itkNumericTraitsPython.itkNumericTraitsVF4_OneValue
itkNumericTraitsVF4_IsPositive = _itkNumericTraitsPython.itkNumericTraitsVF4_IsPositive
itkNumericTraitsVF4_IsNonpositive = _itkNumericTraitsPython.itkNumericTraitsVF4_IsNonpositive
itkNumericTraitsVF4_IsNegative = _itkNumericTraitsPython.itkNumericTraitsVF4_IsNegative
itkNumericTraitsVF4_IsNonnegative = _itkNumericTraitsPython.itkNumericTraitsVF4_IsNonnegative
itkNumericTraitsVF4_SetLength = _itkNumericTraitsPython.itkNumericTraitsVF4_SetLength
itkNumericTraitsVF4_GetLength = _itkNumericTraitsPython.itkNumericTraitsVF4_GetLength
itkNumericTraitsVF4_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsVF4_AssignToArray

class itkNumericTraitsVF6(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF6_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF6_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF6_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF6_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF6_OneValue)
    IsPositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF6_IsPositive)
    IsNonpositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF6_IsNonpositive)
    IsNegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF6_IsNegative)
    IsNonnegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF6_IsNonnegative)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF6_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF6_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVF6_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsVF6 self) -> itkNumericTraitsVF6
        __init__(itkNumericTraitsVF6 self, itkNumericTraitsVF6 arg0) -> itkNumericTraitsVF6


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsVF6_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsVF6(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsVF6

# Register itkNumericTraitsVF6 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsVF6_swigregister(itkNumericTraitsVF6)
itkNumericTraitsVF6_max = _itkNumericTraitsPython.itkNumericTraitsVF6_max
itkNumericTraitsVF6_min = _itkNumericTraitsPython.itkNumericTraitsVF6_min
itkNumericTraitsVF6_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsVF6_NonpositiveMin
itkNumericTraitsVF6_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsVF6_ZeroValue
itkNumericTraitsVF6_OneValue = _itkNumericTraitsPython.itkNumericTraitsVF6_OneValue
itkNumericTraitsVF6_IsPositive = _itkNumericTraitsPython.itkNumericTraitsVF6_IsPositive
itkNumericTraitsVF6_IsNonpositive = _itkNumericTraitsPython.itkNumericTraitsVF6_IsNonpositive
itkNumericTraitsVF6_IsNegative = _itkNumericTraitsPython.itkNumericTraitsVF6_IsNegative
itkNumericTraitsVF6_IsNonnegative = _itkNumericTraitsPython.itkNumericTraitsVF6_IsNonnegative
itkNumericTraitsVF6_SetLength = _itkNumericTraitsPython.itkNumericTraitsVF6_SetLength
itkNumericTraitsVF6_GetLength = _itkNumericTraitsPython.itkNumericTraitsVF6_GetLength
itkNumericTraitsVF6_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsVF6_AssignToArray

class itkNumericTraitsVLVD(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVD_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVD_min)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVD_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVD_OneValue)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVD_NonpositiveMin)
    IsPositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVD_IsPositive)
    IsNonpositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVD_IsNonpositive)
    IsNegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVD_IsNegative)
    IsNonnegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVD_IsNonnegative)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVD_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVD_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVD_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsVLVD self) -> itkNumericTraitsVLVD
        __init__(itkNumericTraitsVLVD self, itkNumericTraitsVLVD arg0) -> itkNumericTraitsVLVD


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsVLVD_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsVLVD(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsVLVD

# Register itkNumericTraitsVLVD in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsVLVD_swigregister(itkNumericTraitsVLVD)
itkNumericTraitsVLVD_max = _itkNumericTraitsPython.itkNumericTraitsVLVD_max
itkNumericTraitsVLVD_min = _itkNumericTraitsPython.itkNumericTraitsVLVD_min
itkNumericTraitsVLVD_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsVLVD_ZeroValue
itkNumericTraitsVLVD_OneValue = _itkNumericTraitsPython.itkNumericTraitsVLVD_OneValue
itkNumericTraitsVLVD_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsVLVD_NonpositiveMin
itkNumericTraitsVLVD_IsPositive = _itkNumericTraitsPython.itkNumericTraitsVLVD_IsPositive
itkNumericTraitsVLVD_IsNonpositive = _itkNumericTraitsPython.itkNumericTraitsVLVD_IsNonpositive
itkNumericTraitsVLVD_IsNegative = _itkNumericTraitsPython.itkNumericTraitsVLVD_IsNegative
itkNumericTraitsVLVD_IsNonnegative = _itkNumericTraitsPython.itkNumericTraitsVLVD_IsNonnegative
itkNumericTraitsVLVD_SetLength = _itkNumericTraitsPython.itkNumericTraitsVLVD_SetLength
itkNumericTraitsVLVD_GetLength = _itkNumericTraitsPython.itkNumericTraitsVLVD_GetLength
itkNumericTraitsVLVD_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsVLVD_AssignToArray

class itkNumericTraitsVLVF(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVF_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVF_min)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVF_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVF_OneValue)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVF_NonpositiveMin)
    IsPositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVF_IsPositive)
    IsNonpositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVF_IsNonpositive)
    IsNegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVF_IsNegative)
    IsNonnegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVF_IsNonnegative)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVF_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVF_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVF_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsVLVF self) -> itkNumericTraitsVLVF
        __init__(itkNumericTraitsVLVF self, itkNumericTraitsVLVF arg0) -> itkNumericTraitsVLVF


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsVLVF_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsVLVF(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsVLVF

# Register itkNumericTraitsVLVF in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsVLVF_swigregister(itkNumericTraitsVLVF)
itkNumericTraitsVLVF_max = _itkNumericTraitsPython.itkNumericTraitsVLVF_max
itkNumericTraitsVLVF_min = _itkNumericTraitsPython.itkNumericTraitsVLVF_min
itkNumericTraitsVLVF_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsVLVF_ZeroValue
itkNumericTraitsVLVF_OneValue = _itkNumericTraitsPython.itkNumericTraitsVLVF_OneValue
itkNumericTraitsVLVF_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsVLVF_NonpositiveMin
itkNumericTraitsVLVF_IsPositive = _itkNumericTraitsPython.itkNumericTraitsVLVF_IsPositive
itkNumericTraitsVLVF_IsNonpositive = _itkNumericTraitsPython.itkNumericTraitsVLVF_IsNonpositive
itkNumericTraitsVLVF_IsNegative = _itkNumericTraitsPython.itkNumericTraitsVLVF_IsNegative
itkNumericTraitsVLVF_IsNonnegative = _itkNumericTraitsPython.itkNumericTraitsVLVF_IsNonnegative
itkNumericTraitsVLVF_SetLength = _itkNumericTraitsPython.itkNumericTraitsVLVF_SetLength
itkNumericTraitsVLVF_GetLength = _itkNumericTraitsPython.itkNumericTraitsVLVF_GetLength
itkNumericTraitsVLVF_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsVLVF_AssignToArray

class itkNumericTraitsVLVSS(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVSS_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVSS_min)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVSS_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVSS_OneValue)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVSS_NonpositiveMin)
    IsPositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVSS_IsPositive)
    IsNonpositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVSS_IsNonpositive)
    IsNegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVSS_IsNegative)
    IsNonnegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVSS_IsNonnegative)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVSS_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVSS_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVSS_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsVLVSS self) -> itkNumericTraitsVLVSS
        __init__(itkNumericTraitsVLVSS self, itkNumericTraitsVLVSS arg0) -> itkNumericTraitsVLVSS


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsVLVSS_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsVLVSS(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsVLVSS

# Register itkNumericTraitsVLVSS in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsVLVSS_swigregister(itkNumericTraitsVLVSS)
itkNumericTraitsVLVSS_max = _itkNumericTraitsPython.itkNumericTraitsVLVSS_max
itkNumericTraitsVLVSS_min = _itkNumericTraitsPython.itkNumericTraitsVLVSS_min
itkNumericTraitsVLVSS_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsVLVSS_ZeroValue
itkNumericTraitsVLVSS_OneValue = _itkNumericTraitsPython.itkNumericTraitsVLVSS_OneValue
itkNumericTraitsVLVSS_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsVLVSS_NonpositiveMin
itkNumericTraitsVLVSS_IsPositive = _itkNumericTraitsPython.itkNumericTraitsVLVSS_IsPositive
itkNumericTraitsVLVSS_IsNonpositive = _itkNumericTraitsPython.itkNumericTraitsVLVSS_IsNonpositive
itkNumericTraitsVLVSS_IsNegative = _itkNumericTraitsPython.itkNumericTraitsVLVSS_IsNegative
itkNumericTraitsVLVSS_IsNonnegative = _itkNumericTraitsPython.itkNumericTraitsVLVSS_IsNonnegative
itkNumericTraitsVLVSS_SetLength = _itkNumericTraitsPython.itkNumericTraitsVLVSS_SetLength
itkNumericTraitsVLVSS_GetLength = _itkNumericTraitsPython.itkNumericTraitsVLVSS_GetLength
itkNumericTraitsVLVSS_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsVLVSS_AssignToArray

class itkNumericTraitsVLVUC(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVUC_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVUC_min)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVUC_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVUC_OneValue)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVUC_NonpositiveMin)
    IsPositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVUC_IsPositive)
    IsNonpositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVUC_IsNonpositive)
    IsNegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVUC_IsNegative)
    IsNonnegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVUC_IsNonnegative)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVUC_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVUC_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVUC_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsVLVUC self) -> itkNumericTraitsVLVUC
        __init__(itkNumericTraitsVLVUC self, itkNumericTraitsVLVUC arg0) -> itkNumericTraitsVLVUC


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsVLVUC_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsVLVUC(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsVLVUC

# Register itkNumericTraitsVLVUC in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsVLVUC_swigregister(itkNumericTraitsVLVUC)
itkNumericTraitsVLVUC_max = _itkNumericTraitsPython.itkNumericTraitsVLVUC_max
itkNumericTraitsVLVUC_min = _itkNumericTraitsPython.itkNumericTraitsVLVUC_min
itkNumericTraitsVLVUC_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsVLVUC_ZeroValue
itkNumericTraitsVLVUC_OneValue = _itkNumericTraitsPython.itkNumericTraitsVLVUC_OneValue
itkNumericTraitsVLVUC_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsVLVUC_NonpositiveMin
itkNumericTraitsVLVUC_IsPositive = _itkNumericTraitsPython.itkNumericTraitsVLVUC_IsPositive
itkNumericTraitsVLVUC_IsNonpositive = _itkNumericTraitsPython.itkNumericTraitsVLVUC_IsNonpositive
itkNumericTraitsVLVUC_IsNegative = _itkNumericTraitsPython.itkNumericTraitsVLVUC_IsNegative
itkNumericTraitsVLVUC_IsNonnegative = _itkNumericTraitsPython.itkNumericTraitsVLVUC_IsNonnegative
itkNumericTraitsVLVUC_SetLength = _itkNumericTraitsPython.itkNumericTraitsVLVUC_SetLength
itkNumericTraitsVLVUC_GetLength = _itkNumericTraitsPython.itkNumericTraitsVLVUC_GetLength
itkNumericTraitsVLVUC_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsVLVUC_AssignToArray

class itkNumericTraitsVLVUS(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVUS_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVUS_min)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVUS_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVUS_OneValue)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVUS_NonpositiveMin)
    IsPositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVUS_IsPositive)
    IsNonpositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVUS_IsNonpositive)
    IsNegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVUS_IsNegative)
    IsNonnegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVUS_IsNonnegative)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVUS_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVUS_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVLVUS_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsVLVUS self) -> itkNumericTraitsVLVUS
        __init__(itkNumericTraitsVLVUS self, itkNumericTraitsVLVUS arg0) -> itkNumericTraitsVLVUS


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsVLVUS_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsVLVUS(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsVLVUS

# Register itkNumericTraitsVLVUS in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsVLVUS_swigregister(itkNumericTraitsVLVUS)
itkNumericTraitsVLVUS_max = _itkNumericTraitsPython.itkNumericTraitsVLVUS_max
itkNumericTraitsVLVUS_min = _itkNumericTraitsPython.itkNumericTraitsVLVUS_min
itkNumericTraitsVLVUS_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsVLVUS_ZeroValue
itkNumericTraitsVLVUS_OneValue = _itkNumericTraitsPython.itkNumericTraitsVLVUS_OneValue
itkNumericTraitsVLVUS_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsVLVUS_NonpositiveMin
itkNumericTraitsVLVUS_IsPositive = _itkNumericTraitsPython.itkNumericTraitsVLVUS_IsPositive
itkNumericTraitsVLVUS_IsNonpositive = _itkNumericTraitsPython.itkNumericTraitsVLVUS_IsNonpositive
itkNumericTraitsVLVUS_IsNegative = _itkNumericTraitsPython.itkNumericTraitsVLVUS_IsNegative
itkNumericTraitsVLVUS_IsNonnegative = _itkNumericTraitsPython.itkNumericTraitsVLVUS_IsNonnegative
itkNumericTraitsVLVUS_SetLength = _itkNumericTraitsPython.itkNumericTraitsVLVUS_SetLength
itkNumericTraitsVLVUS_GetLength = _itkNumericTraitsPython.itkNumericTraitsVLVUS_GetLength
itkNumericTraitsVLVUS_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsVLVUS_AssignToArray

class itkNumericTraitsVSS1(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS1_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS1_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS1_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS1_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS1_OneValue)
    IsPositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS1_IsPositive)
    IsNonpositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS1_IsNonpositive)
    IsNegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS1_IsNegative)
    IsNonnegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS1_IsNonnegative)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS1_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS1_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS1_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsVSS1 self) -> itkNumericTraitsVSS1
        __init__(itkNumericTraitsVSS1 self, itkNumericTraitsVSS1 arg0) -> itkNumericTraitsVSS1


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsVSS1_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsVSS1(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsVSS1

# Register itkNumericTraitsVSS1 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsVSS1_swigregister(itkNumericTraitsVSS1)
itkNumericTraitsVSS1_max = _itkNumericTraitsPython.itkNumericTraitsVSS1_max
itkNumericTraitsVSS1_min = _itkNumericTraitsPython.itkNumericTraitsVSS1_min
itkNumericTraitsVSS1_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsVSS1_NonpositiveMin
itkNumericTraitsVSS1_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsVSS1_ZeroValue
itkNumericTraitsVSS1_OneValue = _itkNumericTraitsPython.itkNumericTraitsVSS1_OneValue
itkNumericTraitsVSS1_IsPositive = _itkNumericTraitsPython.itkNumericTraitsVSS1_IsPositive
itkNumericTraitsVSS1_IsNonpositive = _itkNumericTraitsPython.itkNumericTraitsVSS1_IsNonpositive
itkNumericTraitsVSS1_IsNegative = _itkNumericTraitsPython.itkNumericTraitsVSS1_IsNegative
itkNumericTraitsVSS1_IsNonnegative = _itkNumericTraitsPython.itkNumericTraitsVSS1_IsNonnegative
itkNumericTraitsVSS1_SetLength = _itkNumericTraitsPython.itkNumericTraitsVSS1_SetLength
itkNumericTraitsVSS1_GetLength = _itkNumericTraitsPython.itkNumericTraitsVSS1_GetLength
itkNumericTraitsVSS1_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsVSS1_AssignToArray

class itkNumericTraitsVSS2(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS2_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS2_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS2_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS2_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS2_OneValue)
    IsPositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS2_IsPositive)
    IsNonpositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS2_IsNonpositive)
    IsNegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS2_IsNegative)
    IsNonnegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS2_IsNonnegative)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS2_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS2_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS2_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsVSS2 self) -> itkNumericTraitsVSS2
        __init__(itkNumericTraitsVSS2 self, itkNumericTraitsVSS2 arg0) -> itkNumericTraitsVSS2


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsVSS2_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsVSS2(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsVSS2

# Register itkNumericTraitsVSS2 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsVSS2_swigregister(itkNumericTraitsVSS2)
itkNumericTraitsVSS2_max = _itkNumericTraitsPython.itkNumericTraitsVSS2_max
itkNumericTraitsVSS2_min = _itkNumericTraitsPython.itkNumericTraitsVSS2_min
itkNumericTraitsVSS2_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsVSS2_NonpositiveMin
itkNumericTraitsVSS2_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsVSS2_ZeroValue
itkNumericTraitsVSS2_OneValue = _itkNumericTraitsPython.itkNumericTraitsVSS2_OneValue
itkNumericTraitsVSS2_IsPositive = _itkNumericTraitsPython.itkNumericTraitsVSS2_IsPositive
itkNumericTraitsVSS2_IsNonpositive = _itkNumericTraitsPython.itkNumericTraitsVSS2_IsNonpositive
itkNumericTraitsVSS2_IsNegative = _itkNumericTraitsPython.itkNumericTraitsVSS2_IsNegative
itkNumericTraitsVSS2_IsNonnegative = _itkNumericTraitsPython.itkNumericTraitsVSS2_IsNonnegative
itkNumericTraitsVSS2_SetLength = _itkNumericTraitsPython.itkNumericTraitsVSS2_SetLength
itkNumericTraitsVSS2_GetLength = _itkNumericTraitsPython.itkNumericTraitsVSS2_GetLength
itkNumericTraitsVSS2_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsVSS2_AssignToArray

class itkNumericTraitsVSS3(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS3_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS3_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS3_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS3_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS3_OneValue)
    IsPositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS3_IsPositive)
    IsNonpositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS3_IsNonpositive)
    IsNegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS3_IsNegative)
    IsNonnegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS3_IsNonnegative)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS3_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS3_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS3_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsVSS3 self) -> itkNumericTraitsVSS3
        __init__(itkNumericTraitsVSS3 self, itkNumericTraitsVSS3 arg0) -> itkNumericTraitsVSS3


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsVSS3_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsVSS3(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsVSS3

# Register itkNumericTraitsVSS3 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsVSS3_swigregister(itkNumericTraitsVSS3)
itkNumericTraitsVSS3_max = _itkNumericTraitsPython.itkNumericTraitsVSS3_max
itkNumericTraitsVSS3_min = _itkNumericTraitsPython.itkNumericTraitsVSS3_min
itkNumericTraitsVSS3_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsVSS3_NonpositiveMin
itkNumericTraitsVSS3_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsVSS3_ZeroValue
itkNumericTraitsVSS3_OneValue = _itkNumericTraitsPython.itkNumericTraitsVSS3_OneValue
itkNumericTraitsVSS3_IsPositive = _itkNumericTraitsPython.itkNumericTraitsVSS3_IsPositive
itkNumericTraitsVSS3_IsNonpositive = _itkNumericTraitsPython.itkNumericTraitsVSS3_IsNonpositive
itkNumericTraitsVSS3_IsNegative = _itkNumericTraitsPython.itkNumericTraitsVSS3_IsNegative
itkNumericTraitsVSS3_IsNonnegative = _itkNumericTraitsPython.itkNumericTraitsVSS3_IsNonnegative
itkNumericTraitsVSS3_SetLength = _itkNumericTraitsPython.itkNumericTraitsVSS3_SetLength
itkNumericTraitsVSS3_GetLength = _itkNumericTraitsPython.itkNumericTraitsVSS3_GetLength
itkNumericTraitsVSS3_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsVSS3_AssignToArray

class itkNumericTraitsVSS4(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS4_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS4_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS4_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS4_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS4_OneValue)
    IsPositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS4_IsPositive)
    IsNonpositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS4_IsNonpositive)
    IsNegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS4_IsNegative)
    IsNonnegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS4_IsNonnegative)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS4_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS4_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS4_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsVSS4 self) -> itkNumericTraitsVSS4
        __init__(itkNumericTraitsVSS4 self, itkNumericTraitsVSS4 arg0) -> itkNumericTraitsVSS4


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsVSS4_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsVSS4(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsVSS4

# Register itkNumericTraitsVSS4 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsVSS4_swigregister(itkNumericTraitsVSS4)
itkNumericTraitsVSS4_max = _itkNumericTraitsPython.itkNumericTraitsVSS4_max
itkNumericTraitsVSS4_min = _itkNumericTraitsPython.itkNumericTraitsVSS4_min
itkNumericTraitsVSS4_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsVSS4_NonpositiveMin
itkNumericTraitsVSS4_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsVSS4_ZeroValue
itkNumericTraitsVSS4_OneValue = _itkNumericTraitsPython.itkNumericTraitsVSS4_OneValue
itkNumericTraitsVSS4_IsPositive = _itkNumericTraitsPython.itkNumericTraitsVSS4_IsPositive
itkNumericTraitsVSS4_IsNonpositive = _itkNumericTraitsPython.itkNumericTraitsVSS4_IsNonpositive
itkNumericTraitsVSS4_IsNegative = _itkNumericTraitsPython.itkNumericTraitsVSS4_IsNegative
itkNumericTraitsVSS4_IsNonnegative = _itkNumericTraitsPython.itkNumericTraitsVSS4_IsNonnegative
itkNumericTraitsVSS4_SetLength = _itkNumericTraitsPython.itkNumericTraitsVSS4_SetLength
itkNumericTraitsVSS4_GetLength = _itkNumericTraitsPython.itkNumericTraitsVSS4_GetLength
itkNumericTraitsVSS4_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsVSS4_AssignToArray

class itkNumericTraitsVSS6(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS6_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS6_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS6_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS6_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS6_OneValue)
    IsPositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS6_IsPositive)
    IsNonpositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS6_IsNonpositive)
    IsNegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS6_IsNegative)
    IsNonnegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS6_IsNonnegative)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS6_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS6_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVSS6_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsVSS6 self) -> itkNumericTraitsVSS6
        __init__(itkNumericTraitsVSS6 self, itkNumericTraitsVSS6 arg0) -> itkNumericTraitsVSS6


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsVSS6_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsVSS6(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsVSS6

# Register itkNumericTraitsVSS6 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsVSS6_swigregister(itkNumericTraitsVSS6)
itkNumericTraitsVSS6_max = _itkNumericTraitsPython.itkNumericTraitsVSS6_max
itkNumericTraitsVSS6_min = _itkNumericTraitsPython.itkNumericTraitsVSS6_min
itkNumericTraitsVSS6_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsVSS6_NonpositiveMin
itkNumericTraitsVSS6_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsVSS6_ZeroValue
itkNumericTraitsVSS6_OneValue = _itkNumericTraitsPython.itkNumericTraitsVSS6_OneValue
itkNumericTraitsVSS6_IsPositive = _itkNumericTraitsPython.itkNumericTraitsVSS6_IsPositive
itkNumericTraitsVSS6_IsNonpositive = _itkNumericTraitsPython.itkNumericTraitsVSS6_IsNonpositive
itkNumericTraitsVSS6_IsNegative = _itkNumericTraitsPython.itkNumericTraitsVSS6_IsNegative
itkNumericTraitsVSS6_IsNonnegative = _itkNumericTraitsPython.itkNumericTraitsVSS6_IsNonnegative
itkNumericTraitsVSS6_SetLength = _itkNumericTraitsPython.itkNumericTraitsVSS6_SetLength
itkNumericTraitsVSS6_GetLength = _itkNumericTraitsPython.itkNumericTraitsVSS6_GetLength
itkNumericTraitsVSS6_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsVSS6_AssignToArray

class itkNumericTraitsVUC1(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC1_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC1_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC1_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC1_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC1_OneValue)
    IsPositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC1_IsPositive)
    IsNonpositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC1_IsNonpositive)
    IsNegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC1_IsNegative)
    IsNonnegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC1_IsNonnegative)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC1_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC1_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC1_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsVUC1 self) -> itkNumericTraitsVUC1
        __init__(itkNumericTraitsVUC1 self, itkNumericTraitsVUC1 arg0) -> itkNumericTraitsVUC1


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsVUC1_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsVUC1(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsVUC1

# Register itkNumericTraitsVUC1 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsVUC1_swigregister(itkNumericTraitsVUC1)
itkNumericTraitsVUC1_max = _itkNumericTraitsPython.itkNumericTraitsVUC1_max
itkNumericTraitsVUC1_min = _itkNumericTraitsPython.itkNumericTraitsVUC1_min
itkNumericTraitsVUC1_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsVUC1_NonpositiveMin
itkNumericTraitsVUC1_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsVUC1_ZeroValue
itkNumericTraitsVUC1_OneValue = _itkNumericTraitsPython.itkNumericTraitsVUC1_OneValue
itkNumericTraitsVUC1_IsPositive = _itkNumericTraitsPython.itkNumericTraitsVUC1_IsPositive
itkNumericTraitsVUC1_IsNonpositive = _itkNumericTraitsPython.itkNumericTraitsVUC1_IsNonpositive
itkNumericTraitsVUC1_IsNegative = _itkNumericTraitsPython.itkNumericTraitsVUC1_IsNegative
itkNumericTraitsVUC1_IsNonnegative = _itkNumericTraitsPython.itkNumericTraitsVUC1_IsNonnegative
itkNumericTraitsVUC1_SetLength = _itkNumericTraitsPython.itkNumericTraitsVUC1_SetLength
itkNumericTraitsVUC1_GetLength = _itkNumericTraitsPython.itkNumericTraitsVUC1_GetLength
itkNumericTraitsVUC1_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsVUC1_AssignToArray

class itkNumericTraitsVUC2(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC2_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC2_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC2_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC2_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC2_OneValue)
    IsPositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC2_IsPositive)
    IsNonpositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC2_IsNonpositive)
    IsNegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC2_IsNegative)
    IsNonnegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC2_IsNonnegative)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC2_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC2_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC2_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsVUC2 self) -> itkNumericTraitsVUC2
        __init__(itkNumericTraitsVUC2 self, itkNumericTraitsVUC2 arg0) -> itkNumericTraitsVUC2


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsVUC2_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsVUC2(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsVUC2

# Register itkNumericTraitsVUC2 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsVUC2_swigregister(itkNumericTraitsVUC2)
itkNumericTraitsVUC2_max = _itkNumericTraitsPython.itkNumericTraitsVUC2_max
itkNumericTraitsVUC2_min = _itkNumericTraitsPython.itkNumericTraitsVUC2_min
itkNumericTraitsVUC2_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsVUC2_NonpositiveMin
itkNumericTraitsVUC2_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsVUC2_ZeroValue
itkNumericTraitsVUC2_OneValue = _itkNumericTraitsPython.itkNumericTraitsVUC2_OneValue
itkNumericTraitsVUC2_IsPositive = _itkNumericTraitsPython.itkNumericTraitsVUC2_IsPositive
itkNumericTraitsVUC2_IsNonpositive = _itkNumericTraitsPython.itkNumericTraitsVUC2_IsNonpositive
itkNumericTraitsVUC2_IsNegative = _itkNumericTraitsPython.itkNumericTraitsVUC2_IsNegative
itkNumericTraitsVUC2_IsNonnegative = _itkNumericTraitsPython.itkNumericTraitsVUC2_IsNonnegative
itkNumericTraitsVUC2_SetLength = _itkNumericTraitsPython.itkNumericTraitsVUC2_SetLength
itkNumericTraitsVUC2_GetLength = _itkNumericTraitsPython.itkNumericTraitsVUC2_GetLength
itkNumericTraitsVUC2_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsVUC2_AssignToArray

class itkNumericTraitsVUC3(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC3_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC3_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC3_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC3_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC3_OneValue)
    IsPositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC3_IsPositive)
    IsNonpositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC3_IsNonpositive)
    IsNegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC3_IsNegative)
    IsNonnegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC3_IsNonnegative)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC3_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC3_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC3_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsVUC3 self) -> itkNumericTraitsVUC3
        __init__(itkNumericTraitsVUC3 self, itkNumericTraitsVUC3 arg0) -> itkNumericTraitsVUC3


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsVUC3_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsVUC3(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsVUC3

# Register itkNumericTraitsVUC3 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsVUC3_swigregister(itkNumericTraitsVUC3)
itkNumericTraitsVUC3_max = _itkNumericTraitsPython.itkNumericTraitsVUC3_max
itkNumericTraitsVUC3_min = _itkNumericTraitsPython.itkNumericTraitsVUC3_min
itkNumericTraitsVUC3_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsVUC3_NonpositiveMin
itkNumericTraitsVUC3_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsVUC3_ZeroValue
itkNumericTraitsVUC3_OneValue = _itkNumericTraitsPython.itkNumericTraitsVUC3_OneValue
itkNumericTraitsVUC3_IsPositive = _itkNumericTraitsPython.itkNumericTraitsVUC3_IsPositive
itkNumericTraitsVUC3_IsNonpositive = _itkNumericTraitsPython.itkNumericTraitsVUC3_IsNonpositive
itkNumericTraitsVUC3_IsNegative = _itkNumericTraitsPython.itkNumericTraitsVUC3_IsNegative
itkNumericTraitsVUC3_IsNonnegative = _itkNumericTraitsPython.itkNumericTraitsVUC3_IsNonnegative
itkNumericTraitsVUC3_SetLength = _itkNumericTraitsPython.itkNumericTraitsVUC3_SetLength
itkNumericTraitsVUC3_GetLength = _itkNumericTraitsPython.itkNumericTraitsVUC3_GetLength
itkNumericTraitsVUC3_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsVUC3_AssignToArray

class itkNumericTraitsVUC4(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC4_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC4_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC4_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC4_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC4_OneValue)
    IsPositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC4_IsPositive)
    IsNonpositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC4_IsNonpositive)
    IsNegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC4_IsNegative)
    IsNonnegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC4_IsNonnegative)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC4_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC4_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC4_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsVUC4 self) -> itkNumericTraitsVUC4
        __init__(itkNumericTraitsVUC4 self, itkNumericTraitsVUC4 arg0) -> itkNumericTraitsVUC4


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsVUC4_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsVUC4(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsVUC4

# Register itkNumericTraitsVUC4 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsVUC4_swigregister(itkNumericTraitsVUC4)
itkNumericTraitsVUC4_max = _itkNumericTraitsPython.itkNumericTraitsVUC4_max
itkNumericTraitsVUC4_min = _itkNumericTraitsPython.itkNumericTraitsVUC4_min
itkNumericTraitsVUC4_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsVUC4_NonpositiveMin
itkNumericTraitsVUC4_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsVUC4_ZeroValue
itkNumericTraitsVUC4_OneValue = _itkNumericTraitsPython.itkNumericTraitsVUC4_OneValue
itkNumericTraitsVUC4_IsPositive = _itkNumericTraitsPython.itkNumericTraitsVUC4_IsPositive
itkNumericTraitsVUC4_IsNonpositive = _itkNumericTraitsPython.itkNumericTraitsVUC4_IsNonpositive
itkNumericTraitsVUC4_IsNegative = _itkNumericTraitsPython.itkNumericTraitsVUC4_IsNegative
itkNumericTraitsVUC4_IsNonnegative = _itkNumericTraitsPython.itkNumericTraitsVUC4_IsNonnegative
itkNumericTraitsVUC4_SetLength = _itkNumericTraitsPython.itkNumericTraitsVUC4_SetLength
itkNumericTraitsVUC4_GetLength = _itkNumericTraitsPython.itkNumericTraitsVUC4_GetLength
itkNumericTraitsVUC4_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsVUC4_AssignToArray

class itkNumericTraitsVUC6(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC6_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC6_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC6_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC6_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC6_OneValue)
    IsPositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC6_IsPositive)
    IsNonpositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC6_IsNonpositive)
    IsNegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC6_IsNegative)
    IsNonnegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC6_IsNonnegative)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC6_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC6_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUC6_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsVUC6 self) -> itkNumericTraitsVUC6
        __init__(itkNumericTraitsVUC6 self, itkNumericTraitsVUC6 arg0) -> itkNumericTraitsVUC6


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsVUC6_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsVUC6(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsVUC6

# Register itkNumericTraitsVUC6 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsVUC6_swigregister(itkNumericTraitsVUC6)
itkNumericTraitsVUC6_max = _itkNumericTraitsPython.itkNumericTraitsVUC6_max
itkNumericTraitsVUC6_min = _itkNumericTraitsPython.itkNumericTraitsVUC6_min
itkNumericTraitsVUC6_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsVUC6_NonpositiveMin
itkNumericTraitsVUC6_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsVUC6_ZeroValue
itkNumericTraitsVUC6_OneValue = _itkNumericTraitsPython.itkNumericTraitsVUC6_OneValue
itkNumericTraitsVUC6_IsPositive = _itkNumericTraitsPython.itkNumericTraitsVUC6_IsPositive
itkNumericTraitsVUC6_IsNonpositive = _itkNumericTraitsPython.itkNumericTraitsVUC6_IsNonpositive
itkNumericTraitsVUC6_IsNegative = _itkNumericTraitsPython.itkNumericTraitsVUC6_IsNegative
itkNumericTraitsVUC6_IsNonnegative = _itkNumericTraitsPython.itkNumericTraitsVUC6_IsNonnegative
itkNumericTraitsVUC6_SetLength = _itkNumericTraitsPython.itkNumericTraitsVUC6_SetLength
itkNumericTraitsVUC6_GetLength = _itkNumericTraitsPython.itkNumericTraitsVUC6_GetLength
itkNumericTraitsVUC6_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsVUC6_AssignToArray

class itkNumericTraitsVUS1(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS1_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS1_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS1_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS1_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS1_OneValue)
    IsPositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS1_IsPositive)
    IsNonpositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS1_IsNonpositive)
    IsNegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS1_IsNegative)
    IsNonnegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS1_IsNonnegative)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS1_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS1_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS1_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsVUS1 self) -> itkNumericTraitsVUS1
        __init__(itkNumericTraitsVUS1 self, itkNumericTraitsVUS1 arg0) -> itkNumericTraitsVUS1


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsVUS1_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsVUS1(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsVUS1

# Register itkNumericTraitsVUS1 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsVUS1_swigregister(itkNumericTraitsVUS1)
itkNumericTraitsVUS1_max = _itkNumericTraitsPython.itkNumericTraitsVUS1_max
itkNumericTraitsVUS1_min = _itkNumericTraitsPython.itkNumericTraitsVUS1_min
itkNumericTraitsVUS1_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsVUS1_NonpositiveMin
itkNumericTraitsVUS1_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsVUS1_ZeroValue
itkNumericTraitsVUS1_OneValue = _itkNumericTraitsPython.itkNumericTraitsVUS1_OneValue
itkNumericTraitsVUS1_IsPositive = _itkNumericTraitsPython.itkNumericTraitsVUS1_IsPositive
itkNumericTraitsVUS1_IsNonpositive = _itkNumericTraitsPython.itkNumericTraitsVUS1_IsNonpositive
itkNumericTraitsVUS1_IsNegative = _itkNumericTraitsPython.itkNumericTraitsVUS1_IsNegative
itkNumericTraitsVUS1_IsNonnegative = _itkNumericTraitsPython.itkNumericTraitsVUS1_IsNonnegative
itkNumericTraitsVUS1_SetLength = _itkNumericTraitsPython.itkNumericTraitsVUS1_SetLength
itkNumericTraitsVUS1_GetLength = _itkNumericTraitsPython.itkNumericTraitsVUS1_GetLength
itkNumericTraitsVUS1_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsVUS1_AssignToArray

class itkNumericTraitsVUS2(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS2_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS2_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS2_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS2_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS2_OneValue)
    IsPositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS2_IsPositive)
    IsNonpositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS2_IsNonpositive)
    IsNegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS2_IsNegative)
    IsNonnegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS2_IsNonnegative)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS2_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS2_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS2_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsVUS2 self) -> itkNumericTraitsVUS2
        __init__(itkNumericTraitsVUS2 self, itkNumericTraitsVUS2 arg0) -> itkNumericTraitsVUS2


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsVUS2_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsVUS2(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsVUS2

# Register itkNumericTraitsVUS2 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsVUS2_swigregister(itkNumericTraitsVUS2)
itkNumericTraitsVUS2_max = _itkNumericTraitsPython.itkNumericTraitsVUS2_max
itkNumericTraitsVUS2_min = _itkNumericTraitsPython.itkNumericTraitsVUS2_min
itkNumericTraitsVUS2_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsVUS2_NonpositiveMin
itkNumericTraitsVUS2_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsVUS2_ZeroValue
itkNumericTraitsVUS2_OneValue = _itkNumericTraitsPython.itkNumericTraitsVUS2_OneValue
itkNumericTraitsVUS2_IsPositive = _itkNumericTraitsPython.itkNumericTraitsVUS2_IsPositive
itkNumericTraitsVUS2_IsNonpositive = _itkNumericTraitsPython.itkNumericTraitsVUS2_IsNonpositive
itkNumericTraitsVUS2_IsNegative = _itkNumericTraitsPython.itkNumericTraitsVUS2_IsNegative
itkNumericTraitsVUS2_IsNonnegative = _itkNumericTraitsPython.itkNumericTraitsVUS2_IsNonnegative
itkNumericTraitsVUS2_SetLength = _itkNumericTraitsPython.itkNumericTraitsVUS2_SetLength
itkNumericTraitsVUS2_GetLength = _itkNumericTraitsPython.itkNumericTraitsVUS2_GetLength
itkNumericTraitsVUS2_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsVUS2_AssignToArray

class itkNumericTraitsVUS3(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS3_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS3_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS3_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS3_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS3_OneValue)
    IsPositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS3_IsPositive)
    IsNonpositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS3_IsNonpositive)
    IsNegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS3_IsNegative)
    IsNonnegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS3_IsNonnegative)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS3_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS3_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS3_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsVUS3 self) -> itkNumericTraitsVUS3
        __init__(itkNumericTraitsVUS3 self, itkNumericTraitsVUS3 arg0) -> itkNumericTraitsVUS3


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsVUS3_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsVUS3(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsVUS3

# Register itkNumericTraitsVUS3 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsVUS3_swigregister(itkNumericTraitsVUS3)
itkNumericTraitsVUS3_max = _itkNumericTraitsPython.itkNumericTraitsVUS3_max
itkNumericTraitsVUS3_min = _itkNumericTraitsPython.itkNumericTraitsVUS3_min
itkNumericTraitsVUS3_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsVUS3_NonpositiveMin
itkNumericTraitsVUS3_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsVUS3_ZeroValue
itkNumericTraitsVUS3_OneValue = _itkNumericTraitsPython.itkNumericTraitsVUS3_OneValue
itkNumericTraitsVUS3_IsPositive = _itkNumericTraitsPython.itkNumericTraitsVUS3_IsPositive
itkNumericTraitsVUS3_IsNonpositive = _itkNumericTraitsPython.itkNumericTraitsVUS3_IsNonpositive
itkNumericTraitsVUS3_IsNegative = _itkNumericTraitsPython.itkNumericTraitsVUS3_IsNegative
itkNumericTraitsVUS3_IsNonnegative = _itkNumericTraitsPython.itkNumericTraitsVUS3_IsNonnegative
itkNumericTraitsVUS3_SetLength = _itkNumericTraitsPython.itkNumericTraitsVUS3_SetLength
itkNumericTraitsVUS3_GetLength = _itkNumericTraitsPython.itkNumericTraitsVUS3_GetLength
itkNumericTraitsVUS3_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsVUS3_AssignToArray

class itkNumericTraitsVUS4(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS4_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS4_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS4_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS4_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS4_OneValue)
    IsPositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS4_IsPositive)
    IsNonpositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS4_IsNonpositive)
    IsNegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS4_IsNegative)
    IsNonnegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS4_IsNonnegative)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS4_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS4_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS4_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsVUS4 self) -> itkNumericTraitsVUS4
        __init__(itkNumericTraitsVUS4 self, itkNumericTraitsVUS4 arg0) -> itkNumericTraitsVUS4


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsVUS4_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsVUS4(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsVUS4

# Register itkNumericTraitsVUS4 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsVUS4_swigregister(itkNumericTraitsVUS4)
itkNumericTraitsVUS4_max = _itkNumericTraitsPython.itkNumericTraitsVUS4_max
itkNumericTraitsVUS4_min = _itkNumericTraitsPython.itkNumericTraitsVUS4_min
itkNumericTraitsVUS4_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsVUS4_NonpositiveMin
itkNumericTraitsVUS4_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsVUS4_ZeroValue
itkNumericTraitsVUS4_OneValue = _itkNumericTraitsPython.itkNumericTraitsVUS4_OneValue
itkNumericTraitsVUS4_IsPositive = _itkNumericTraitsPython.itkNumericTraitsVUS4_IsPositive
itkNumericTraitsVUS4_IsNonpositive = _itkNumericTraitsPython.itkNumericTraitsVUS4_IsNonpositive
itkNumericTraitsVUS4_IsNegative = _itkNumericTraitsPython.itkNumericTraitsVUS4_IsNegative
itkNumericTraitsVUS4_IsNonnegative = _itkNumericTraitsPython.itkNumericTraitsVUS4_IsNonnegative
itkNumericTraitsVUS4_SetLength = _itkNumericTraitsPython.itkNumericTraitsVUS4_SetLength
itkNumericTraitsVUS4_GetLength = _itkNumericTraitsPython.itkNumericTraitsVUS4_GetLength
itkNumericTraitsVUS4_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsVUS4_AssignToArray

class itkNumericTraitsVUS6(object):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS6_max)
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS6_min)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS6_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS6_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS6_OneValue)
    IsPositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS6_IsPositive)
    IsNonpositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS6_IsNonpositive)
    IsNegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS6_IsNegative)
    IsNonnegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS6_IsNonnegative)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS6_SetLength)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS6_GetLength)
    AssignToArray = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsVUS6_AssignToArray)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsVUS6 self) -> itkNumericTraitsVUS6
        __init__(itkNumericTraitsVUS6 self, itkNumericTraitsVUS6 arg0) -> itkNumericTraitsVUS6


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsVUS6_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsVUS6(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsVUS6

# Register itkNumericTraitsVUS6 in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsVUS6_swigregister(itkNumericTraitsVUS6)
itkNumericTraitsVUS6_max = _itkNumericTraitsPython.itkNumericTraitsVUS6_max
itkNumericTraitsVUS6_min = _itkNumericTraitsPython.itkNumericTraitsVUS6_min
itkNumericTraitsVUS6_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsVUS6_NonpositiveMin
itkNumericTraitsVUS6_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsVUS6_ZeroValue
itkNumericTraitsVUS6_OneValue = _itkNumericTraitsPython.itkNumericTraitsVUS6_OneValue
itkNumericTraitsVUS6_IsPositive = _itkNumericTraitsPython.itkNumericTraitsVUS6_IsPositive
itkNumericTraitsVUS6_IsNonpositive = _itkNumericTraitsPython.itkNumericTraitsVUS6_IsNonpositive
itkNumericTraitsVUS6_IsNegative = _itkNumericTraitsPython.itkNumericTraitsVUS6_IsNegative
itkNumericTraitsVUS6_IsNonnegative = _itkNumericTraitsPython.itkNumericTraitsVUS6_IsNonnegative
itkNumericTraitsVUS6_SetLength = _itkNumericTraitsPython.itkNumericTraitsVUS6_SetLength
itkNumericTraitsVUS6_GetLength = _itkNumericTraitsPython.itkNumericTraitsVUS6_GetLength
itkNumericTraitsVUS6_AssignToArray = _itkNumericTraitsPython.itkNumericTraitsVUS6_AssignToArray

class std_Num_base(object):
    r"""Proxy of C++ std_Num_base class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(std_Num_base self) -> std_Num_base
        __init__(std_Num_base self, std_Num_base arg0) -> std_Num_base
        """
        _itkNumericTraitsPython.std_Num_base_swiginit(self, _itkNumericTraitsPython.new_std_Num_base(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_std_Num_base

# Register std_Num_base in _itkNumericTraitsPython:
_itkNumericTraitsPython.std_Num_base_swigregister(std_Num_base)

class std_Num_float_base(std_Num_base):
    r"""Proxy of C++ std_Num_float_base class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(std_Num_float_base self) -> std_Num_float_base
        __init__(std_Num_float_base self, std_Num_float_base arg0) -> std_Num_float_base
        """
        _itkNumericTraitsPython.std_Num_float_base_swiginit(self, _itkNumericTraitsPython.new_std_Num_float_base(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_std_Num_float_base

# Register std_Num_float_base in _itkNumericTraitsPython:
_itkNumericTraitsPython.std_Num_float_base_swigregister(std_Num_float_base)

class std_Num_int_base(std_Num_base):
    r"""Proxy of C++ std_Num_int_base class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(std_Num_int_base self) -> std_Num_int_base
        __init__(std_Num_int_base self, std_Num_int_base arg0) -> std_Num_int_base
        """
        _itkNumericTraitsPython.std_Num_int_base_swiginit(self, _itkNumericTraitsPython.new_std_Num_int_base(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_std_Num_int_base

# Register std_Num_int_base in _itkNumericTraitsPython:
_itkNumericTraitsPython.std_Num_int_base_swigregister(std_Num_int_base)

class stdnumeric_limitsB(std_Num_int_base):
    r"""Proxy of C++ stdnumeric_limitsB class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    min = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsB_min)
    max = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsB_max)
    lowest = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsB_lowest)
    epsilon = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsB_epsilon)
    round_error = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsB_round_error)
    denorm_min = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsB_denorm_min)
    infinity = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsB_infinity)
    quiet_NaN = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsB_quiet_NaN)
    signaling_NaN = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsB_signaling_NaN)

    def __init__(self, *args):
        r"""
        __init__(stdnumeric_limitsB self) -> stdnumeric_limitsB
        __init__(stdnumeric_limitsB self, stdnumeric_limitsB arg0) -> stdnumeric_limitsB
        """
        _itkNumericTraitsPython.stdnumeric_limitsB_swiginit(self, _itkNumericTraitsPython.new_stdnumeric_limitsB(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_stdnumeric_limitsB

# Register stdnumeric_limitsB in _itkNumericTraitsPython:
_itkNumericTraitsPython.stdnumeric_limitsB_swigregister(stdnumeric_limitsB)
stdnumeric_limitsB_min = _itkNumericTraitsPython.stdnumeric_limitsB_min
stdnumeric_limitsB_max = _itkNumericTraitsPython.stdnumeric_limitsB_max
stdnumeric_limitsB_lowest = _itkNumericTraitsPython.stdnumeric_limitsB_lowest
stdnumeric_limitsB_epsilon = _itkNumericTraitsPython.stdnumeric_limitsB_epsilon
stdnumeric_limitsB_round_error = _itkNumericTraitsPython.stdnumeric_limitsB_round_error
stdnumeric_limitsB_denorm_min = _itkNumericTraitsPython.stdnumeric_limitsB_denorm_min
stdnumeric_limitsB_infinity = _itkNumericTraitsPython.stdnumeric_limitsB_infinity
stdnumeric_limitsB_quiet_NaN = _itkNumericTraitsPython.stdnumeric_limitsB_quiet_NaN
stdnumeric_limitsB_signaling_NaN = _itkNumericTraitsPython.stdnumeric_limitsB_signaling_NaN

class stdnumeric_limitsD(std_Num_float_base):
    r"""Proxy of C++ stdnumeric_limitsD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    min = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsD_min)
    max = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsD_max)
    lowest = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsD_lowest)
    epsilon = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsD_epsilon)
    round_error = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsD_round_error)
    denorm_min = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsD_denorm_min)
    infinity = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsD_infinity)
    quiet_NaN = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsD_quiet_NaN)
    signaling_NaN = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsD_signaling_NaN)

    def __init__(self, *args):
        r"""
        __init__(stdnumeric_limitsD self) -> stdnumeric_limitsD
        __init__(stdnumeric_limitsD self, stdnumeric_limitsD arg0) -> stdnumeric_limitsD
        """
        _itkNumericTraitsPython.stdnumeric_limitsD_swiginit(self, _itkNumericTraitsPython.new_stdnumeric_limitsD(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_stdnumeric_limitsD

# Register stdnumeric_limitsD in _itkNumericTraitsPython:
_itkNumericTraitsPython.stdnumeric_limitsD_swigregister(stdnumeric_limitsD)
stdnumeric_limitsD_min = _itkNumericTraitsPython.stdnumeric_limitsD_min
stdnumeric_limitsD_max = _itkNumericTraitsPython.stdnumeric_limitsD_max
stdnumeric_limitsD_lowest = _itkNumericTraitsPython.stdnumeric_limitsD_lowest
stdnumeric_limitsD_epsilon = _itkNumericTraitsPython.stdnumeric_limitsD_epsilon
stdnumeric_limitsD_round_error = _itkNumericTraitsPython.stdnumeric_limitsD_round_error
stdnumeric_limitsD_denorm_min = _itkNumericTraitsPython.stdnumeric_limitsD_denorm_min
stdnumeric_limitsD_infinity = _itkNumericTraitsPython.stdnumeric_limitsD_infinity
stdnumeric_limitsD_quiet_NaN = _itkNumericTraitsPython.stdnumeric_limitsD_quiet_NaN
stdnumeric_limitsD_signaling_NaN = _itkNumericTraitsPython.stdnumeric_limitsD_signaling_NaN

class stdnumeric_limitsF(std_Num_float_base):
    r"""Proxy of C++ stdnumeric_limitsF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    min = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsF_min)
    max = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsF_max)
    lowest = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsF_lowest)
    epsilon = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsF_epsilon)
    round_error = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsF_round_error)
    denorm_min = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsF_denorm_min)
    infinity = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsF_infinity)
    quiet_NaN = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsF_quiet_NaN)
    signaling_NaN = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsF_signaling_NaN)

    def __init__(self, *args):
        r"""
        __init__(stdnumeric_limitsF self) -> stdnumeric_limitsF
        __init__(stdnumeric_limitsF self, stdnumeric_limitsF arg0) -> stdnumeric_limitsF
        """
        _itkNumericTraitsPython.stdnumeric_limitsF_swiginit(self, _itkNumericTraitsPython.new_stdnumeric_limitsF(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_stdnumeric_limitsF

# Register stdnumeric_limitsF in _itkNumericTraitsPython:
_itkNumericTraitsPython.stdnumeric_limitsF_swigregister(stdnumeric_limitsF)
stdnumeric_limitsF_min = _itkNumericTraitsPython.stdnumeric_limitsF_min
stdnumeric_limitsF_max = _itkNumericTraitsPython.stdnumeric_limitsF_max
stdnumeric_limitsF_lowest = _itkNumericTraitsPython.stdnumeric_limitsF_lowest
stdnumeric_limitsF_epsilon = _itkNumericTraitsPython.stdnumeric_limitsF_epsilon
stdnumeric_limitsF_round_error = _itkNumericTraitsPython.stdnumeric_limitsF_round_error
stdnumeric_limitsF_denorm_min = _itkNumericTraitsPython.stdnumeric_limitsF_denorm_min
stdnumeric_limitsF_infinity = _itkNumericTraitsPython.stdnumeric_limitsF_infinity
stdnumeric_limitsF_quiet_NaN = _itkNumericTraitsPython.stdnumeric_limitsF_quiet_NaN
stdnumeric_limitsF_signaling_NaN = _itkNumericTraitsPython.stdnumeric_limitsF_signaling_NaN

class stdnumeric_limitsLD(std_Num_float_base):
    r"""Proxy of C++ stdnumeric_limitsLD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    min = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsLD_min)
    max = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsLD_max)
    lowest = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsLD_lowest)
    epsilon = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsLD_epsilon)
    round_error = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsLD_round_error)
    denorm_min = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsLD_denorm_min)
    infinity = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsLD_infinity)
    quiet_NaN = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsLD_quiet_NaN)
    signaling_NaN = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsLD_signaling_NaN)

    def __init__(self, *args):
        r"""
        __init__(stdnumeric_limitsLD self) -> stdnumeric_limitsLD
        __init__(stdnumeric_limitsLD self, stdnumeric_limitsLD arg0) -> stdnumeric_limitsLD
        """
        _itkNumericTraitsPython.stdnumeric_limitsLD_swiginit(self, _itkNumericTraitsPython.new_stdnumeric_limitsLD(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_stdnumeric_limitsLD

# Register stdnumeric_limitsLD in _itkNumericTraitsPython:
_itkNumericTraitsPython.stdnumeric_limitsLD_swigregister(stdnumeric_limitsLD)
stdnumeric_limitsLD_min = _itkNumericTraitsPython.stdnumeric_limitsLD_min
stdnumeric_limitsLD_max = _itkNumericTraitsPython.stdnumeric_limitsLD_max
stdnumeric_limitsLD_lowest = _itkNumericTraitsPython.stdnumeric_limitsLD_lowest
stdnumeric_limitsLD_epsilon = _itkNumericTraitsPython.stdnumeric_limitsLD_epsilon
stdnumeric_limitsLD_round_error = _itkNumericTraitsPython.stdnumeric_limitsLD_round_error
stdnumeric_limitsLD_denorm_min = _itkNumericTraitsPython.stdnumeric_limitsLD_denorm_min
stdnumeric_limitsLD_infinity = _itkNumericTraitsPython.stdnumeric_limitsLD_infinity
stdnumeric_limitsLD_quiet_NaN = _itkNumericTraitsPython.stdnumeric_limitsLD_quiet_NaN
stdnumeric_limitsLD_signaling_NaN = _itkNumericTraitsPython.stdnumeric_limitsLD_signaling_NaN

class stdnumeric_limitsSC(std_Num_int_base):
    r"""Proxy of C++ stdnumeric_limitsSC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    min = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsSC_min)
    max = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsSC_max)
    lowest = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsSC_lowest)
    epsilon = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsSC_epsilon)
    round_error = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsSC_round_error)
    denorm_min = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsSC_denorm_min)
    infinity = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsSC_infinity)
    quiet_NaN = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsSC_quiet_NaN)
    signaling_NaN = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsSC_signaling_NaN)

    def __init__(self, *args):
        r"""
        __init__(stdnumeric_limitsSC self) -> stdnumeric_limitsSC
        __init__(stdnumeric_limitsSC self, stdnumeric_limitsSC arg0) -> stdnumeric_limitsSC
        """
        _itkNumericTraitsPython.stdnumeric_limitsSC_swiginit(self, _itkNumericTraitsPython.new_stdnumeric_limitsSC(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_stdnumeric_limitsSC

# Register stdnumeric_limitsSC in _itkNumericTraitsPython:
_itkNumericTraitsPython.stdnumeric_limitsSC_swigregister(stdnumeric_limitsSC)
stdnumeric_limitsSC_min = _itkNumericTraitsPython.stdnumeric_limitsSC_min
stdnumeric_limitsSC_max = _itkNumericTraitsPython.stdnumeric_limitsSC_max
stdnumeric_limitsSC_lowest = _itkNumericTraitsPython.stdnumeric_limitsSC_lowest
stdnumeric_limitsSC_epsilon = _itkNumericTraitsPython.stdnumeric_limitsSC_epsilon
stdnumeric_limitsSC_round_error = _itkNumericTraitsPython.stdnumeric_limitsSC_round_error
stdnumeric_limitsSC_denorm_min = _itkNumericTraitsPython.stdnumeric_limitsSC_denorm_min
stdnumeric_limitsSC_infinity = _itkNumericTraitsPython.stdnumeric_limitsSC_infinity
stdnumeric_limitsSC_quiet_NaN = _itkNumericTraitsPython.stdnumeric_limitsSC_quiet_NaN
stdnumeric_limitsSC_signaling_NaN = _itkNumericTraitsPython.stdnumeric_limitsSC_signaling_NaN

class stdnumeric_limitsSI(std_Num_int_base):
    r"""Proxy of C++ stdnumeric_limitsSI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    min = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsSI_min)
    max = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsSI_max)
    lowest = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsSI_lowest)
    epsilon = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsSI_epsilon)
    round_error = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsSI_round_error)
    denorm_min = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsSI_denorm_min)
    infinity = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsSI_infinity)
    quiet_NaN = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsSI_quiet_NaN)
    signaling_NaN = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsSI_signaling_NaN)

    def __init__(self, *args):
        r"""
        __init__(stdnumeric_limitsSI self) -> stdnumeric_limitsSI
        __init__(stdnumeric_limitsSI self, stdnumeric_limitsSI arg0) -> stdnumeric_limitsSI
        """
        _itkNumericTraitsPython.stdnumeric_limitsSI_swiginit(self, _itkNumericTraitsPython.new_stdnumeric_limitsSI(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_stdnumeric_limitsSI

# Register stdnumeric_limitsSI in _itkNumericTraitsPython:
_itkNumericTraitsPython.stdnumeric_limitsSI_swigregister(stdnumeric_limitsSI)
stdnumeric_limitsSI_min = _itkNumericTraitsPython.stdnumeric_limitsSI_min
stdnumeric_limitsSI_max = _itkNumericTraitsPython.stdnumeric_limitsSI_max
stdnumeric_limitsSI_lowest = _itkNumericTraitsPython.stdnumeric_limitsSI_lowest
stdnumeric_limitsSI_epsilon = _itkNumericTraitsPython.stdnumeric_limitsSI_epsilon
stdnumeric_limitsSI_round_error = _itkNumericTraitsPython.stdnumeric_limitsSI_round_error
stdnumeric_limitsSI_denorm_min = _itkNumericTraitsPython.stdnumeric_limitsSI_denorm_min
stdnumeric_limitsSI_infinity = _itkNumericTraitsPython.stdnumeric_limitsSI_infinity
stdnumeric_limitsSI_quiet_NaN = _itkNumericTraitsPython.stdnumeric_limitsSI_quiet_NaN
stdnumeric_limitsSI_signaling_NaN = _itkNumericTraitsPython.stdnumeric_limitsSI_signaling_NaN

class stdnumeric_limitsSL(std_Num_int_base):
    r"""Proxy of C++ stdnumeric_limitsSL class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    min = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsSL_min)
    max = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsSL_max)
    lowest = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsSL_lowest)
    epsilon = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsSL_epsilon)
    round_error = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsSL_round_error)
    denorm_min = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsSL_denorm_min)
    infinity = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsSL_infinity)
    quiet_NaN = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsSL_quiet_NaN)
    signaling_NaN = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsSL_signaling_NaN)

    def __init__(self, *args):
        r"""
        __init__(stdnumeric_limitsSL self) -> stdnumeric_limitsSL
        __init__(stdnumeric_limitsSL self, stdnumeric_limitsSL arg0) -> stdnumeric_limitsSL
        """
        _itkNumericTraitsPython.stdnumeric_limitsSL_swiginit(self, _itkNumericTraitsPython.new_stdnumeric_limitsSL(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_stdnumeric_limitsSL

# Register stdnumeric_limitsSL in _itkNumericTraitsPython:
_itkNumericTraitsPython.stdnumeric_limitsSL_swigregister(stdnumeric_limitsSL)
stdnumeric_limitsSL_min = _itkNumericTraitsPython.stdnumeric_limitsSL_min
stdnumeric_limitsSL_max = _itkNumericTraitsPython.stdnumeric_limitsSL_max
stdnumeric_limitsSL_lowest = _itkNumericTraitsPython.stdnumeric_limitsSL_lowest
stdnumeric_limitsSL_epsilon = _itkNumericTraitsPython.stdnumeric_limitsSL_epsilon
stdnumeric_limitsSL_round_error = _itkNumericTraitsPython.stdnumeric_limitsSL_round_error
stdnumeric_limitsSL_denorm_min = _itkNumericTraitsPython.stdnumeric_limitsSL_denorm_min
stdnumeric_limitsSL_infinity = _itkNumericTraitsPython.stdnumeric_limitsSL_infinity
stdnumeric_limitsSL_quiet_NaN = _itkNumericTraitsPython.stdnumeric_limitsSL_quiet_NaN
stdnumeric_limitsSL_signaling_NaN = _itkNumericTraitsPython.stdnumeric_limitsSL_signaling_NaN

class stdnumeric_limitsSS(std_Num_int_base):
    r"""Proxy of C++ stdnumeric_limitsSS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    min = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsSS_min)
    max = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsSS_max)
    lowest = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsSS_lowest)
    epsilon = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsSS_epsilon)
    round_error = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsSS_round_error)
    denorm_min = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsSS_denorm_min)
    infinity = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsSS_infinity)
    quiet_NaN = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsSS_quiet_NaN)
    signaling_NaN = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsSS_signaling_NaN)

    def __init__(self, *args):
        r"""
        __init__(stdnumeric_limitsSS self) -> stdnumeric_limitsSS
        __init__(stdnumeric_limitsSS self, stdnumeric_limitsSS arg0) -> stdnumeric_limitsSS
        """
        _itkNumericTraitsPython.stdnumeric_limitsSS_swiginit(self, _itkNumericTraitsPython.new_stdnumeric_limitsSS(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_stdnumeric_limitsSS

# Register stdnumeric_limitsSS in _itkNumericTraitsPython:
_itkNumericTraitsPython.stdnumeric_limitsSS_swigregister(stdnumeric_limitsSS)
stdnumeric_limitsSS_min = _itkNumericTraitsPython.stdnumeric_limitsSS_min
stdnumeric_limitsSS_max = _itkNumericTraitsPython.stdnumeric_limitsSS_max
stdnumeric_limitsSS_lowest = _itkNumericTraitsPython.stdnumeric_limitsSS_lowest
stdnumeric_limitsSS_epsilon = _itkNumericTraitsPython.stdnumeric_limitsSS_epsilon
stdnumeric_limitsSS_round_error = _itkNumericTraitsPython.stdnumeric_limitsSS_round_error
stdnumeric_limitsSS_denorm_min = _itkNumericTraitsPython.stdnumeric_limitsSS_denorm_min
stdnumeric_limitsSS_infinity = _itkNumericTraitsPython.stdnumeric_limitsSS_infinity
stdnumeric_limitsSS_quiet_NaN = _itkNumericTraitsPython.stdnumeric_limitsSS_quiet_NaN
stdnumeric_limitsSS_signaling_NaN = _itkNumericTraitsPython.stdnumeric_limitsSS_signaling_NaN

class stdnumeric_limitsUC(std_Num_int_base):
    r"""Proxy of C++ stdnumeric_limitsUC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    min = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsUC_min)
    max = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsUC_max)
    lowest = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsUC_lowest)
    epsilon = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsUC_epsilon)
    round_error = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsUC_round_error)
    denorm_min = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsUC_denorm_min)
    infinity = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsUC_infinity)
    quiet_NaN = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsUC_quiet_NaN)
    signaling_NaN = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsUC_signaling_NaN)

    def __init__(self, *args):
        r"""
        __init__(stdnumeric_limitsUC self) -> stdnumeric_limitsUC
        __init__(stdnumeric_limitsUC self, stdnumeric_limitsUC arg0) -> stdnumeric_limitsUC
        """
        _itkNumericTraitsPython.stdnumeric_limitsUC_swiginit(self, _itkNumericTraitsPython.new_stdnumeric_limitsUC(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_stdnumeric_limitsUC

# Register stdnumeric_limitsUC in _itkNumericTraitsPython:
_itkNumericTraitsPython.stdnumeric_limitsUC_swigregister(stdnumeric_limitsUC)
stdnumeric_limitsUC_min = _itkNumericTraitsPython.stdnumeric_limitsUC_min
stdnumeric_limitsUC_max = _itkNumericTraitsPython.stdnumeric_limitsUC_max
stdnumeric_limitsUC_lowest = _itkNumericTraitsPython.stdnumeric_limitsUC_lowest
stdnumeric_limitsUC_epsilon = _itkNumericTraitsPython.stdnumeric_limitsUC_epsilon
stdnumeric_limitsUC_round_error = _itkNumericTraitsPython.stdnumeric_limitsUC_round_error
stdnumeric_limitsUC_denorm_min = _itkNumericTraitsPython.stdnumeric_limitsUC_denorm_min
stdnumeric_limitsUC_infinity = _itkNumericTraitsPython.stdnumeric_limitsUC_infinity
stdnumeric_limitsUC_quiet_NaN = _itkNumericTraitsPython.stdnumeric_limitsUC_quiet_NaN
stdnumeric_limitsUC_signaling_NaN = _itkNumericTraitsPython.stdnumeric_limitsUC_signaling_NaN

class stdnumeric_limitsUI(std_Num_int_base):
    r"""Proxy of C++ stdnumeric_limitsUI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    min = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsUI_min)
    max = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsUI_max)
    lowest = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsUI_lowest)
    epsilon = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsUI_epsilon)
    round_error = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsUI_round_error)
    denorm_min = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsUI_denorm_min)
    infinity = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsUI_infinity)
    quiet_NaN = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsUI_quiet_NaN)
    signaling_NaN = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsUI_signaling_NaN)

    def __init__(self, *args):
        r"""
        __init__(stdnumeric_limitsUI self) -> stdnumeric_limitsUI
        __init__(stdnumeric_limitsUI self, stdnumeric_limitsUI arg0) -> stdnumeric_limitsUI
        """
        _itkNumericTraitsPython.stdnumeric_limitsUI_swiginit(self, _itkNumericTraitsPython.new_stdnumeric_limitsUI(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_stdnumeric_limitsUI

# Register stdnumeric_limitsUI in _itkNumericTraitsPython:
_itkNumericTraitsPython.stdnumeric_limitsUI_swigregister(stdnumeric_limitsUI)
stdnumeric_limitsUI_min = _itkNumericTraitsPython.stdnumeric_limitsUI_min
stdnumeric_limitsUI_max = _itkNumericTraitsPython.stdnumeric_limitsUI_max
stdnumeric_limitsUI_lowest = _itkNumericTraitsPython.stdnumeric_limitsUI_lowest
stdnumeric_limitsUI_epsilon = _itkNumericTraitsPython.stdnumeric_limitsUI_epsilon
stdnumeric_limitsUI_round_error = _itkNumericTraitsPython.stdnumeric_limitsUI_round_error
stdnumeric_limitsUI_denorm_min = _itkNumericTraitsPython.stdnumeric_limitsUI_denorm_min
stdnumeric_limitsUI_infinity = _itkNumericTraitsPython.stdnumeric_limitsUI_infinity
stdnumeric_limitsUI_quiet_NaN = _itkNumericTraitsPython.stdnumeric_limitsUI_quiet_NaN
stdnumeric_limitsUI_signaling_NaN = _itkNumericTraitsPython.stdnumeric_limitsUI_signaling_NaN

class stdnumeric_limitsUL(std_Num_int_base):
    r"""Proxy of C++ stdnumeric_limitsUL class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    min = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsUL_min)
    max = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsUL_max)
    lowest = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsUL_lowest)
    epsilon = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsUL_epsilon)
    round_error = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsUL_round_error)
    denorm_min = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsUL_denorm_min)
    infinity = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsUL_infinity)
    quiet_NaN = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsUL_quiet_NaN)
    signaling_NaN = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsUL_signaling_NaN)

    def __init__(self, *args):
        r"""
        __init__(stdnumeric_limitsUL self) -> stdnumeric_limitsUL
        __init__(stdnumeric_limitsUL self, stdnumeric_limitsUL arg0) -> stdnumeric_limitsUL
        """
        _itkNumericTraitsPython.stdnumeric_limitsUL_swiginit(self, _itkNumericTraitsPython.new_stdnumeric_limitsUL(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_stdnumeric_limitsUL

# Register stdnumeric_limitsUL in _itkNumericTraitsPython:
_itkNumericTraitsPython.stdnumeric_limitsUL_swigregister(stdnumeric_limitsUL)
stdnumeric_limitsUL_min = _itkNumericTraitsPython.stdnumeric_limitsUL_min
stdnumeric_limitsUL_max = _itkNumericTraitsPython.stdnumeric_limitsUL_max
stdnumeric_limitsUL_lowest = _itkNumericTraitsPython.stdnumeric_limitsUL_lowest
stdnumeric_limitsUL_epsilon = _itkNumericTraitsPython.stdnumeric_limitsUL_epsilon
stdnumeric_limitsUL_round_error = _itkNumericTraitsPython.stdnumeric_limitsUL_round_error
stdnumeric_limitsUL_denorm_min = _itkNumericTraitsPython.stdnumeric_limitsUL_denorm_min
stdnumeric_limitsUL_infinity = _itkNumericTraitsPython.stdnumeric_limitsUL_infinity
stdnumeric_limitsUL_quiet_NaN = _itkNumericTraitsPython.stdnumeric_limitsUL_quiet_NaN
stdnumeric_limitsUL_signaling_NaN = _itkNumericTraitsPython.stdnumeric_limitsUL_signaling_NaN

class stdnumeric_limitsULL(std_Num_int_base):
    r"""Proxy of C++ stdnumeric_limitsULL class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    min = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsULL_min)
    max = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsULL_max)
    lowest = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsULL_lowest)
    epsilon = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsULL_epsilon)
    round_error = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsULL_round_error)
    denorm_min = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsULL_denorm_min)
    infinity = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsULL_infinity)
    quiet_NaN = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsULL_quiet_NaN)
    signaling_NaN = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsULL_signaling_NaN)

    def __init__(self, *args):
        r"""
        __init__(stdnumeric_limitsULL self) -> stdnumeric_limitsULL
        __init__(stdnumeric_limitsULL self, stdnumeric_limitsULL arg0) -> stdnumeric_limitsULL
        """
        _itkNumericTraitsPython.stdnumeric_limitsULL_swiginit(self, _itkNumericTraitsPython.new_stdnumeric_limitsULL(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_stdnumeric_limitsULL

# Register stdnumeric_limitsULL in _itkNumericTraitsPython:
_itkNumericTraitsPython.stdnumeric_limitsULL_swigregister(stdnumeric_limitsULL)
stdnumeric_limitsULL_min = _itkNumericTraitsPython.stdnumeric_limitsULL_min
stdnumeric_limitsULL_max = _itkNumericTraitsPython.stdnumeric_limitsULL_max
stdnumeric_limitsULL_lowest = _itkNumericTraitsPython.stdnumeric_limitsULL_lowest
stdnumeric_limitsULL_epsilon = _itkNumericTraitsPython.stdnumeric_limitsULL_epsilon
stdnumeric_limitsULL_round_error = _itkNumericTraitsPython.stdnumeric_limitsULL_round_error
stdnumeric_limitsULL_denorm_min = _itkNumericTraitsPython.stdnumeric_limitsULL_denorm_min
stdnumeric_limitsULL_infinity = _itkNumericTraitsPython.stdnumeric_limitsULL_infinity
stdnumeric_limitsULL_quiet_NaN = _itkNumericTraitsPython.stdnumeric_limitsULL_quiet_NaN
stdnumeric_limitsULL_signaling_NaN = _itkNumericTraitsPython.stdnumeric_limitsULL_signaling_NaN

class stdnumeric_limitsUS(std_Num_int_base):
    r"""Proxy of C++ stdnumeric_limitsUS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    min = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsUS_min)
    max = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsUS_max)
    lowest = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsUS_lowest)
    epsilon = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsUS_epsilon)
    round_error = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsUS_round_error)
    denorm_min = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsUS_denorm_min)
    infinity = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsUS_infinity)
    quiet_NaN = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsUS_quiet_NaN)
    signaling_NaN = _swig_new_static_method(_itkNumericTraitsPython.stdnumeric_limitsUS_signaling_NaN)

    def __init__(self, *args):
        r"""
        __init__(stdnumeric_limitsUS self) -> stdnumeric_limitsUS
        __init__(stdnumeric_limitsUS self, stdnumeric_limitsUS arg0) -> stdnumeric_limitsUS
        """
        _itkNumericTraitsPython.stdnumeric_limitsUS_swiginit(self, _itkNumericTraitsPython.new_stdnumeric_limitsUS(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_stdnumeric_limitsUS

# Register stdnumeric_limitsUS in _itkNumericTraitsPython:
_itkNumericTraitsPython.stdnumeric_limitsUS_swigregister(stdnumeric_limitsUS)
stdnumeric_limitsUS_min = _itkNumericTraitsPython.stdnumeric_limitsUS_min
stdnumeric_limitsUS_max = _itkNumericTraitsPython.stdnumeric_limitsUS_max
stdnumeric_limitsUS_lowest = _itkNumericTraitsPython.stdnumeric_limitsUS_lowest
stdnumeric_limitsUS_epsilon = _itkNumericTraitsPython.stdnumeric_limitsUS_epsilon
stdnumeric_limitsUS_round_error = _itkNumericTraitsPython.stdnumeric_limitsUS_round_error
stdnumeric_limitsUS_denorm_min = _itkNumericTraitsPython.stdnumeric_limitsUS_denorm_min
stdnumeric_limitsUS_infinity = _itkNumericTraitsPython.stdnumeric_limitsUS_infinity
stdnumeric_limitsUS_quiet_NaN = _itkNumericTraitsPython.stdnumeric_limitsUS_quiet_NaN
stdnumeric_limitsUS_signaling_NaN = _itkNumericTraitsPython.stdnumeric_limitsUS_signaling_NaN

class itkNumericTraitsB(stdnumeric_limitsB):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsB_min)
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsB_max)
    IsPositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsB_IsPositive)
    IsNonpositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsB_IsNonpositive)
    IsNegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsB_IsNegative)
    IsNonnegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsB_IsNonnegative)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsB_GetLength)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsB_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsB_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsB_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsB_SetLength)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsB self) -> itkNumericTraitsB
        __init__(itkNumericTraitsB self, itkNumericTraitsB arg0) -> itkNumericTraitsB


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsB_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsB(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsB

# Register itkNumericTraitsB in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsB_swigregister(itkNumericTraitsB)
itkNumericTraitsB_min = _itkNumericTraitsPython.itkNumericTraitsB_min
itkNumericTraitsB_max = _itkNumericTraitsPython.itkNumericTraitsB_max
itkNumericTraitsB_IsPositive = _itkNumericTraitsPython.itkNumericTraitsB_IsPositive
itkNumericTraitsB_IsNonpositive = _itkNumericTraitsPython.itkNumericTraitsB_IsNonpositive
itkNumericTraitsB_IsNegative = _itkNumericTraitsPython.itkNumericTraitsB_IsNegative
itkNumericTraitsB_IsNonnegative = _itkNumericTraitsPython.itkNumericTraitsB_IsNonnegative
itkNumericTraitsB_GetLength = _itkNumericTraitsPython.itkNumericTraitsB_GetLength
itkNumericTraitsB_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsB_NonpositiveMin
itkNumericTraitsB_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsB_ZeroValue
itkNumericTraitsB_OneValue = _itkNumericTraitsPython.itkNumericTraitsB_OneValue
itkNumericTraitsB_SetLength = _itkNumericTraitsPython.itkNumericTraitsB_SetLength

class itkNumericTraitsD(stdnumeric_limitsD):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsD_min)
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsD_max)
    IsPositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsD_IsPositive)
    IsNonpositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsD_IsNonpositive)
    IsNegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsD_IsNegative)
    IsNonnegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsD_IsNonnegative)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsD_GetLength)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsD_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsD_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsD_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsD_SetLength)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsD self) -> itkNumericTraitsD
        __init__(itkNumericTraitsD self, itkNumericTraitsD arg0) -> itkNumericTraitsD


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsD_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsD(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsD

# Register itkNumericTraitsD in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsD_swigregister(itkNumericTraitsD)
itkNumericTraitsD_min = _itkNumericTraitsPython.itkNumericTraitsD_min
itkNumericTraitsD_max = _itkNumericTraitsPython.itkNumericTraitsD_max
itkNumericTraitsD_IsPositive = _itkNumericTraitsPython.itkNumericTraitsD_IsPositive
itkNumericTraitsD_IsNonpositive = _itkNumericTraitsPython.itkNumericTraitsD_IsNonpositive
itkNumericTraitsD_IsNegative = _itkNumericTraitsPython.itkNumericTraitsD_IsNegative
itkNumericTraitsD_IsNonnegative = _itkNumericTraitsPython.itkNumericTraitsD_IsNonnegative
itkNumericTraitsD_GetLength = _itkNumericTraitsPython.itkNumericTraitsD_GetLength
itkNumericTraitsD_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsD_NonpositiveMin
itkNumericTraitsD_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsD_ZeroValue
itkNumericTraitsD_OneValue = _itkNumericTraitsPython.itkNumericTraitsD_OneValue
itkNumericTraitsD_SetLength = _itkNumericTraitsPython.itkNumericTraitsD_SetLength

class itkNumericTraitsF(stdnumeric_limitsF):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsF_min)
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsF_max)
    IsPositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsF_IsPositive)
    IsNonpositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsF_IsNonpositive)
    IsNegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsF_IsNegative)
    IsNonnegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsF_IsNonnegative)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsF_GetLength)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsF_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsF_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsF_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsF_SetLength)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsF self) -> itkNumericTraitsF
        __init__(itkNumericTraitsF self, itkNumericTraitsF arg0) -> itkNumericTraitsF


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsF_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsF(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsF

# Register itkNumericTraitsF in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsF_swigregister(itkNumericTraitsF)
itkNumericTraitsF_min = _itkNumericTraitsPython.itkNumericTraitsF_min
itkNumericTraitsF_max = _itkNumericTraitsPython.itkNumericTraitsF_max
itkNumericTraitsF_IsPositive = _itkNumericTraitsPython.itkNumericTraitsF_IsPositive
itkNumericTraitsF_IsNonpositive = _itkNumericTraitsPython.itkNumericTraitsF_IsNonpositive
itkNumericTraitsF_IsNegative = _itkNumericTraitsPython.itkNumericTraitsF_IsNegative
itkNumericTraitsF_IsNonnegative = _itkNumericTraitsPython.itkNumericTraitsF_IsNonnegative
itkNumericTraitsF_GetLength = _itkNumericTraitsPython.itkNumericTraitsF_GetLength
itkNumericTraitsF_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsF_NonpositiveMin
itkNumericTraitsF_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsF_ZeroValue
itkNumericTraitsF_OneValue = _itkNumericTraitsPython.itkNumericTraitsF_OneValue
itkNumericTraitsF_SetLength = _itkNumericTraitsPython.itkNumericTraitsF_SetLength

class itkNumericTraitsLD(stdnumeric_limitsLD):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsLD_min)
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsLD_max)
    IsPositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsLD_IsPositive)
    IsNonpositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsLD_IsNonpositive)
    IsNegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsLD_IsNegative)
    IsNonnegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsLD_IsNonnegative)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsLD_GetLength)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsLD_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsLD_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsLD_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsLD_SetLength)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsLD self) -> itkNumericTraitsLD
        __init__(itkNumericTraitsLD self, itkNumericTraitsLD arg0) -> itkNumericTraitsLD


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsLD_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsLD(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsLD

# Register itkNumericTraitsLD in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsLD_swigregister(itkNumericTraitsLD)
itkNumericTraitsLD_min = _itkNumericTraitsPython.itkNumericTraitsLD_min
itkNumericTraitsLD_max = _itkNumericTraitsPython.itkNumericTraitsLD_max
itkNumericTraitsLD_IsPositive = _itkNumericTraitsPython.itkNumericTraitsLD_IsPositive
itkNumericTraitsLD_IsNonpositive = _itkNumericTraitsPython.itkNumericTraitsLD_IsNonpositive
itkNumericTraitsLD_IsNegative = _itkNumericTraitsPython.itkNumericTraitsLD_IsNegative
itkNumericTraitsLD_IsNonnegative = _itkNumericTraitsPython.itkNumericTraitsLD_IsNonnegative
itkNumericTraitsLD_GetLength = _itkNumericTraitsPython.itkNumericTraitsLD_GetLength
itkNumericTraitsLD_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsLD_NonpositiveMin
itkNumericTraitsLD_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsLD_ZeroValue
itkNumericTraitsLD_OneValue = _itkNumericTraitsPython.itkNumericTraitsLD_OneValue
itkNumericTraitsLD_SetLength = _itkNumericTraitsPython.itkNumericTraitsLD_SetLength

class itkNumericTraitsSC(stdnumeric_limitsSC):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsSC_min)
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsSC_max)
    IsPositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsSC_IsPositive)
    IsNonpositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsSC_IsNonpositive)
    IsNegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsSC_IsNegative)
    IsNonnegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsSC_IsNonnegative)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsSC_GetLength)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsSC_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsSC_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsSC_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsSC_SetLength)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsSC self) -> itkNumericTraitsSC
        __init__(itkNumericTraitsSC self, itkNumericTraitsSC arg0) -> itkNumericTraitsSC


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsSC_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsSC(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsSC

# Register itkNumericTraitsSC in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsSC_swigregister(itkNumericTraitsSC)
itkNumericTraitsSC_min = _itkNumericTraitsPython.itkNumericTraitsSC_min
itkNumericTraitsSC_max = _itkNumericTraitsPython.itkNumericTraitsSC_max
itkNumericTraitsSC_IsPositive = _itkNumericTraitsPython.itkNumericTraitsSC_IsPositive
itkNumericTraitsSC_IsNonpositive = _itkNumericTraitsPython.itkNumericTraitsSC_IsNonpositive
itkNumericTraitsSC_IsNegative = _itkNumericTraitsPython.itkNumericTraitsSC_IsNegative
itkNumericTraitsSC_IsNonnegative = _itkNumericTraitsPython.itkNumericTraitsSC_IsNonnegative
itkNumericTraitsSC_GetLength = _itkNumericTraitsPython.itkNumericTraitsSC_GetLength
itkNumericTraitsSC_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsSC_NonpositiveMin
itkNumericTraitsSC_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsSC_ZeroValue
itkNumericTraitsSC_OneValue = _itkNumericTraitsPython.itkNumericTraitsSC_OneValue
itkNumericTraitsSC_SetLength = _itkNumericTraitsPython.itkNumericTraitsSC_SetLength

class itkNumericTraitsSI(stdnumeric_limitsSI):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsSI_min)
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsSI_max)
    IsPositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsSI_IsPositive)
    IsNonpositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsSI_IsNonpositive)
    IsNegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsSI_IsNegative)
    IsNonnegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsSI_IsNonnegative)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsSI_GetLength)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsSI_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsSI_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsSI_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsSI_SetLength)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsSI self) -> itkNumericTraitsSI
        __init__(itkNumericTraitsSI self, itkNumericTraitsSI arg0) -> itkNumericTraitsSI


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsSI_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsSI(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsSI

# Register itkNumericTraitsSI in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsSI_swigregister(itkNumericTraitsSI)
itkNumericTraitsSI_min = _itkNumericTraitsPython.itkNumericTraitsSI_min
itkNumericTraitsSI_max = _itkNumericTraitsPython.itkNumericTraitsSI_max
itkNumericTraitsSI_IsPositive = _itkNumericTraitsPython.itkNumericTraitsSI_IsPositive
itkNumericTraitsSI_IsNonpositive = _itkNumericTraitsPython.itkNumericTraitsSI_IsNonpositive
itkNumericTraitsSI_IsNegative = _itkNumericTraitsPython.itkNumericTraitsSI_IsNegative
itkNumericTraitsSI_IsNonnegative = _itkNumericTraitsPython.itkNumericTraitsSI_IsNonnegative
itkNumericTraitsSI_GetLength = _itkNumericTraitsPython.itkNumericTraitsSI_GetLength
itkNumericTraitsSI_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsSI_NonpositiveMin
itkNumericTraitsSI_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsSI_ZeroValue
itkNumericTraitsSI_OneValue = _itkNumericTraitsPython.itkNumericTraitsSI_OneValue
itkNumericTraitsSI_SetLength = _itkNumericTraitsPython.itkNumericTraitsSI_SetLength

class itkNumericTraitsSL(stdnumeric_limitsSL):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsSL_min)
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsSL_max)
    IsPositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsSL_IsPositive)
    IsNonpositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsSL_IsNonpositive)
    IsNegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsSL_IsNegative)
    IsNonnegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsSL_IsNonnegative)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsSL_GetLength)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsSL_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsSL_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsSL_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsSL_SetLength)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsSL self) -> itkNumericTraitsSL
        __init__(itkNumericTraitsSL self, itkNumericTraitsSL arg0) -> itkNumericTraitsSL


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsSL_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsSL(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsSL

# Register itkNumericTraitsSL in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsSL_swigregister(itkNumericTraitsSL)
itkNumericTraitsSL_min = _itkNumericTraitsPython.itkNumericTraitsSL_min
itkNumericTraitsSL_max = _itkNumericTraitsPython.itkNumericTraitsSL_max
itkNumericTraitsSL_IsPositive = _itkNumericTraitsPython.itkNumericTraitsSL_IsPositive
itkNumericTraitsSL_IsNonpositive = _itkNumericTraitsPython.itkNumericTraitsSL_IsNonpositive
itkNumericTraitsSL_IsNegative = _itkNumericTraitsPython.itkNumericTraitsSL_IsNegative
itkNumericTraitsSL_IsNonnegative = _itkNumericTraitsPython.itkNumericTraitsSL_IsNonnegative
itkNumericTraitsSL_GetLength = _itkNumericTraitsPython.itkNumericTraitsSL_GetLength
itkNumericTraitsSL_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsSL_NonpositiveMin
itkNumericTraitsSL_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsSL_ZeroValue
itkNumericTraitsSL_OneValue = _itkNumericTraitsPython.itkNumericTraitsSL_OneValue
itkNumericTraitsSL_SetLength = _itkNumericTraitsPython.itkNumericTraitsSL_SetLength

class itkNumericTraitsSS(stdnumeric_limitsSS):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsSS_min)
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsSS_max)
    IsPositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsSS_IsPositive)
    IsNonpositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsSS_IsNonpositive)
    IsNegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsSS_IsNegative)
    IsNonnegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsSS_IsNonnegative)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsSS_GetLength)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsSS_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsSS_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsSS_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsSS_SetLength)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsSS self) -> itkNumericTraitsSS
        __init__(itkNumericTraitsSS self, itkNumericTraitsSS arg0) -> itkNumericTraitsSS


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsSS_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsSS(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsSS

# Register itkNumericTraitsSS in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsSS_swigregister(itkNumericTraitsSS)
itkNumericTraitsSS_min = _itkNumericTraitsPython.itkNumericTraitsSS_min
itkNumericTraitsSS_max = _itkNumericTraitsPython.itkNumericTraitsSS_max
itkNumericTraitsSS_IsPositive = _itkNumericTraitsPython.itkNumericTraitsSS_IsPositive
itkNumericTraitsSS_IsNonpositive = _itkNumericTraitsPython.itkNumericTraitsSS_IsNonpositive
itkNumericTraitsSS_IsNegative = _itkNumericTraitsPython.itkNumericTraitsSS_IsNegative
itkNumericTraitsSS_IsNonnegative = _itkNumericTraitsPython.itkNumericTraitsSS_IsNonnegative
itkNumericTraitsSS_GetLength = _itkNumericTraitsPython.itkNumericTraitsSS_GetLength
itkNumericTraitsSS_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsSS_NonpositiveMin
itkNumericTraitsSS_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsSS_ZeroValue
itkNumericTraitsSS_OneValue = _itkNumericTraitsPython.itkNumericTraitsSS_OneValue
itkNumericTraitsSS_SetLength = _itkNumericTraitsPython.itkNumericTraitsSS_SetLength

class itkNumericTraitsUC(stdnumeric_limitsUC):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsUC_min)
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsUC_max)
    IsPositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsUC_IsPositive)
    IsNonpositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsUC_IsNonpositive)
    IsNegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsUC_IsNegative)
    IsNonnegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsUC_IsNonnegative)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsUC_GetLength)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsUC_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsUC_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsUC_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsUC_SetLength)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsUC self) -> itkNumericTraitsUC
        __init__(itkNumericTraitsUC self, itkNumericTraitsUC arg0) -> itkNumericTraitsUC


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsUC_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsUC(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsUC

# Register itkNumericTraitsUC in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsUC_swigregister(itkNumericTraitsUC)
itkNumericTraitsUC_min = _itkNumericTraitsPython.itkNumericTraitsUC_min
itkNumericTraitsUC_max = _itkNumericTraitsPython.itkNumericTraitsUC_max
itkNumericTraitsUC_IsPositive = _itkNumericTraitsPython.itkNumericTraitsUC_IsPositive
itkNumericTraitsUC_IsNonpositive = _itkNumericTraitsPython.itkNumericTraitsUC_IsNonpositive
itkNumericTraitsUC_IsNegative = _itkNumericTraitsPython.itkNumericTraitsUC_IsNegative
itkNumericTraitsUC_IsNonnegative = _itkNumericTraitsPython.itkNumericTraitsUC_IsNonnegative
itkNumericTraitsUC_GetLength = _itkNumericTraitsPython.itkNumericTraitsUC_GetLength
itkNumericTraitsUC_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsUC_NonpositiveMin
itkNumericTraitsUC_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsUC_ZeroValue
itkNumericTraitsUC_OneValue = _itkNumericTraitsPython.itkNumericTraitsUC_OneValue
itkNumericTraitsUC_SetLength = _itkNumericTraitsPython.itkNumericTraitsUC_SetLength

class itkNumericTraitsUI(stdnumeric_limitsUI):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsUI_min)
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsUI_max)
    IsPositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsUI_IsPositive)
    IsNonpositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsUI_IsNonpositive)
    IsNegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsUI_IsNegative)
    IsNonnegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsUI_IsNonnegative)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsUI_GetLength)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsUI_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsUI_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsUI_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsUI_SetLength)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsUI self) -> itkNumericTraitsUI
        __init__(itkNumericTraitsUI self, itkNumericTraitsUI arg0) -> itkNumericTraitsUI


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsUI_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsUI(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsUI

# Register itkNumericTraitsUI in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsUI_swigregister(itkNumericTraitsUI)
itkNumericTraitsUI_min = _itkNumericTraitsPython.itkNumericTraitsUI_min
itkNumericTraitsUI_max = _itkNumericTraitsPython.itkNumericTraitsUI_max
itkNumericTraitsUI_IsPositive = _itkNumericTraitsPython.itkNumericTraitsUI_IsPositive
itkNumericTraitsUI_IsNonpositive = _itkNumericTraitsPython.itkNumericTraitsUI_IsNonpositive
itkNumericTraitsUI_IsNegative = _itkNumericTraitsPython.itkNumericTraitsUI_IsNegative
itkNumericTraitsUI_IsNonnegative = _itkNumericTraitsPython.itkNumericTraitsUI_IsNonnegative
itkNumericTraitsUI_GetLength = _itkNumericTraitsPython.itkNumericTraitsUI_GetLength
itkNumericTraitsUI_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsUI_NonpositiveMin
itkNumericTraitsUI_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsUI_ZeroValue
itkNumericTraitsUI_OneValue = _itkNumericTraitsPython.itkNumericTraitsUI_OneValue
itkNumericTraitsUI_SetLength = _itkNumericTraitsPython.itkNumericTraitsUI_SetLength

class itkNumericTraitsUL(stdnumeric_limitsUL):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsUL_min)
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsUL_max)
    IsPositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsUL_IsPositive)
    IsNonpositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsUL_IsNonpositive)
    IsNegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsUL_IsNegative)
    IsNonnegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsUL_IsNonnegative)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsUL_GetLength)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsUL_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsUL_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsUL_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsUL_SetLength)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsUL self) -> itkNumericTraitsUL
        __init__(itkNumericTraitsUL self, itkNumericTraitsUL arg0) -> itkNumericTraitsUL


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsUL_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsUL(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsUL

# Register itkNumericTraitsUL in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsUL_swigregister(itkNumericTraitsUL)
itkNumericTraitsUL_min = _itkNumericTraitsPython.itkNumericTraitsUL_min
itkNumericTraitsUL_max = _itkNumericTraitsPython.itkNumericTraitsUL_max
itkNumericTraitsUL_IsPositive = _itkNumericTraitsPython.itkNumericTraitsUL_IsPositive
itkNumericTraitsUL_IsNonpositive = _itkNumericTraitsPython.itkNumericTraitsUL_IsNonpositive
itkNumericTraitsUL_IsNegative = _itkNumericTraitsPython.itkNumericTraitsUL_IsNegative
itkNumericTraitsUL_IsNonnegative = _itkNumericTraitsPython.itkNumericTraitsUL_IsNonnegative
itkNumericTraitsUL_GetLength = _itkNumericTraitsPython.itkNumericTraitsUL_GetLength
itkNumericTraitsUL_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsUL_NonpositiveMin
itkNumericTraitsUL_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsUL_ZeroValue
itkNumericTraitsUL_OneValue = _itkNumericTraitsPython.itkNumericTraitsUL_OneValue
itkNumericTraitsUL_SetLength = _itkNumericTraitsPython.itkNumericTraitsUL_SetLength

class itkNumericTraitsULL(stdnumeric_limitsULL):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsULL_min)
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsULL_max)
    IsPositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsULL_IsPositive)
    IsNonpositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsULL_IsNonpositive)
    IsNegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsULL_IsNegative)
    IsNonnegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsULL_IsNonnegative)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsULL_GetLength)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsULL_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsULL_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsULL_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsULL_SetLength)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsULL self) -> itkNumericTraitsULL
        __init__(itkNumericTraitsULL self, itkNumericTraitsULL arg0) -> itkNumericTraitsULL


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsULL_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsULL(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsULL

# Register itkNumericTraitsULL in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsULL_swigregister(itkNumericTraitsULL)
itkNumericTraitsULL_min = _itkNumericTraitsPython.itkNumericTraitsULL_min
itkNumericTraitsULL_max = _itkNumericTraitsPython.itkNumericTraitsULL_max
itkNumericTraitsULL_IsPositive = _itkNumericTraitsPython.itkNumericTraitsULL_IsPositive
itkNumericTraitsULL_IsNonpositive = _itkNumericTraitsPython.itkNumericTraitsULL_IsNonpositive
itkNumericTraitsULL_IsNegative = _itkNumericTraitsPython.itkNumericTraitsULL_IsNegative
itkNumericTraitsULL_IsNonnegative = _itkNumericTraitsPython.itkNumericTraitsULL_IsNonnegative
itkNumericTraitsULL_GetLength = _itkNumericTraitsPython.itkNumericTraitsULL_GetLength
itkNumericTraitsULL_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsULL_NonpositiveMin
itkNumericTraitsULL_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsULL_ZeroValue
itkNumericTraitsULL_OneValue = _itkNumericTraitsPython.itkNumericTraitsULL_OneValue
itkNumericTraitsULL_SetLength = _itkNumericTraitsPython.itkNumericTraitsULL_SetLength

class itkNumericTraitsUS(stdnumeric_limitsUS):
    r"""


    Define additional traits for native types such as int or float.

    NumericTraits is used to extend the traits associated with native
    types such as float, char, int, and so on. These traits are extensions
    of the standard numeric_limits defined by the C++ compilers. Some of
    the added traits include minimum and maximum value; accumulation type;
    etc.

    {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    min = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsUS_min)
    max = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsUS_max)
    IsPositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsUS_IsPositive)
    IsNonpositive = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsUS_IsNonpositive)
    IsNegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsUS_IsNegative)
    IsNonnegative = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsUS_IsNonnegative)
    GetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsUS_GetLength)
    NonpositiveMin = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsUS_NonpositiveMin)
    ZeroValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsUS_ZeroValue)
    OneValue = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsUS_OneValue)
    SetLength = _swig_new_static_method(_itkNumericTraitsPython.itkNumericTraitsUS_SetLength)

    def __init__(self, *args):
        r"""
        __init__(itkNumericTraitsUS self) -> itkNumericTraitsUS
        __init__(itkNumericTraitsUS self, itkNumericTraitsUS arg0) -> itkNumericTraitsUS


        Define additional traits for native types such as int or float.

        NumericTraits is used to extend the traits associated with native
        types such as float, char, int, and so on. These traits are extensions
        of the standard numeric_limits defined by the C++ compilers. Some of
        the added traits include minimum and maximum value; accumulation type;
        etc.

        {Core/Common/GetTypeBasicInformation,Get Type Basic Information} 
        """
        _itkNumericTraitsPython.itkNumericTraitsUS_swiginit(self, _itkNumericTraitsPython.new_itkNumericTraitsUS(*args))
    __swig_destroy__ = _itkNumericTraitsPython.delete_itkNumericTraitsUS

# Register itkNumericTraitsUS in _itkNumericTraitsPython:
_itkNumericTraitsPython.itkNumericTraitsUS_swigregister(itkNumericTraitsUS)
itkNumericTraitsUS_min = _itkNumericTraitsPython.itkNumericTraitsUS_min
itkNumericTraitsUS_max = _itkNumericTraitsPython.itkNumericTraitsUS_max
itkNumericTraitsUS_IsPositive = _itkNumericTraitsPython.itkNumericTraitsUS_IsPositive
itkNumericTraitsUS_IsNonpositive = _itkNumericTraitsPython.itkNumericTraitsUS_IsNonpositive
itkNumericTraitsUS_IsNegative = _itkNumericTraitsPython.itkNumericTraitsUS_IsNegative
itkNumericTraitsUS_IsNonnegative = _itkNumericTraitsPython.itkNumericTraitsUS_IsNonnegative
itkNumericTraitsUS_GetLength = _itkNumericTraitsPython.itkNumericTraitsUS_GetLength
itkNumericTraitsUS_NonpositiveMin = _itkNumericTraitsPython.itkNumericTraitsUS_NonpositiveMin
itkNumericTraitsUS_ZeroValue = _itkNumericTraitsPython.itkNumericTraitsUS_ZeroValue
itkNumericTraitsUS_OneValue = _itkNumericTraitsPython.itkNumericTraitsUS_OneValue
itkNumericTraitsUS_SetLength = _itkNumericTraitsPython.itkNumericTraitsUS_SetLength



