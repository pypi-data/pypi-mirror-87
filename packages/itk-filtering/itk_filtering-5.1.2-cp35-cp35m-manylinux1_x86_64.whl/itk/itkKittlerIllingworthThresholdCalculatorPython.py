# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKThresholdingPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkKittlerIllingworthThresholdCalculatorPython
else:
    import _itkKittlerIllingworthThresholdCalculatorPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkKittlerIllingworthThresholdCalculatorPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkKittlerIllingworthThresholdCalculatorPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkHistogramThresholdCalculatorPython
import itk.itkSimpleDataObjectDecoratorPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vector_refPython
import itk.itkRGBAPixelPython
import itk.itkCovariantVectorPython
import itk.ITKCommonBasePython
import itk.itkRGBPixelPython
import itk.itkArrayPython
import itk.itkHistogramPython
import itk.itkSamplePython

def itkKittlerIllingworthThresholdCalculatorHDD_New():
    return itkKittlerIllingworthThresholdCalculatorHDD.New()

class itkKittlerIllingworthThresholdCalculatorHDD(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDD):
    r"""


    Computes the KittlerIllingworth's threshold for an image.

    Kittler and J. Illingworth, "Minimum error thresholding," Pattern
    Recognition, vol. 19, pp. 41-47, 1986. C. A. Glasbey, "An analysis of
    histogram-based thresholding algorithms," CVGIP: Graphical Models and
    Image Processing, vol. 55, pp. 532-537, 1993. Original Matlab code
    Copyright (C) 2004 Antti Niemisto
    Seehttp://www.cs.tut.fi/~ant/histthresh/ for an excellent slide
    presentation and the original Matlab code.

    This class is templated over the input histogram type. WARNING:  This
    calculator assumes that the input histogram has only one dimension.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHDD___New_orig__)
    Clone = _swig_new_instance_method(_itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHDD_Clone)
    __swig_destroy__ = _itkKittlerIllingworthThresholdCalculatorPython.delete_itkKittlerIllingworthThresholdCalculatorHDD
    cast = _swig_new_static_method(_itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHDD_cast)

    def New(*args, **kargs):
        """New() -> itkKittlerIllingworthThresholdCalculatorHDD

        Create a new object of the class itkKittlerIllingworthThresholdCalculatorHDD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKittlerIllingworthThresholdCalculatorHDD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkKittlerIllingworthThresholdCalculatorHDD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkKittlerIllingworthThresholdCalculatorHDD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkKittlerIllingworthThresholdCalculatorHDD in _itkKittlerIllingworthThresholdCalculatorPython:
_itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHDD_swigregister(itkKittlerIllingworthThresholdCalculatorHDD)
itkKittlerIllingworthThresholdCalculatorHDD___New_orig__ = _itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHDD___New_orig__
itkKittlerIllingworthThresholdCalculatorHDD_cast = _itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHDD_cast


def itkKittlerIllingworthThresholdCalculatorHDF_New():
    return itkKittlerIllingworthThresholdCalculatorHDF.New()

class itkKittlerIllingworthThresholdCalculatorHDF(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDF):
    r"""


    Computes the KittlerIllingworth's threshold for an image.

    Kittler and J. Illingworth, "Minimum error thresholding," Pattern
    Recognition, vol. 19, pp. 41-47, 1986. C. A. Glasbey, "An analysis of
    histogram-based thresholding algorithms," CVGIP: Graphical Models and
    Image Processing, vol. 55, pp. 532-537, 1993. Original Matlab code
    Copyright (C) 2004 Antti Niemisto
    Seehttp://www.cs.tut.fi/~ant/histthresh/ for an excellent slide
    presentation and the original Matlab code.

    This class is templated over the input histogram type. WARNING:  This
    calculator assumes that the input histogram has only one dimension.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHDF___New_orig__)
    Clone = _swig_new_instance_method(_itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHDF_Clone)
    __swig_destroy__ = _itkKittlerIllingworthThresholdCalculatorPython.delete_itkKittlerIllingworthThresholdCalculatorHDF
    cast = _swig_new_static_method(_itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHDF_cast)

    def New(*args, **kargs):
        """New() -> itkKittlerIllingworthThresholdCalculatorHDF

        Create a new object of the class itkKittlerIllingworthThresholdCalculatorHDF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKittlerIllingworthThresholdCalculatorHDF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkKittlerIllingworthThresholdCalculatorHDF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkKittlerIllingworthThresholdCalculatorHDF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkKittlerIllingworthThresholdCalculatorHDF in _itkKittlerIllingworthThresholdCalculatorPython:
_itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHDF_swigregister(itkKittlerIllingworthThresholdCalculatorHDF)
itkKittlerIllingworthThresholdCalculatorHDF___New_orig__ = _itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHDF___New_orig__
itkKittlerIllingworthThresholdCalculatorHDF_cast = _itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHDF_cast


def itkKittlerIllingworthThresholdCalculatorHDSS_New():
    return itkKittlerIllingworthThresholdCalculatorHDSS.New()

class itkKittlerIllingworthThresholdCalculatorHDSS(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDSS):
    r"""


    Computes the KittlerIllingworth's threshold for an image.

    Kittler and J. Illingworth, "Minimum error thresholding," Pattern
    Recognition, vol. 19, pp. 41-47, 1986. C. A. Glasbey, "An analysis of
    histogram-based thresholding algorithms," CVGIP: Graphical Models and
    Image Processing, vol. 55, pp. 532-537, 1993. Original Matlab code
    Copyright (C) 2004 Antti Niemisto
    Seehttp://www.cs.tut.fi/~ant/histthresh/ for an excellent slide
    presentation and the original Matlab code.

    This class is templated over the input histogram type. WARNING:  This
    calculator assumes that the input histogram has only one dimension.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHDSS___New_orig__)
    Clone = _swig_new_instance_method(_itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHDSS_Clone)
    __swig_destroy__ = _itkKittlerIllingworthThresholdCalculatorPython.delete_itkKittlerIllingworthThresholdCalculatorHDSS
    cast = _swig_new_static_method(_itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHDSS_cast)

    def New(*args, **kargs):
        """New() -> itkKittlerIllingworthThresholdCalculatorHDSS

        Create a new object of the class itkKittlerIllingworthThresholdCalculatorHDSS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKittlerIllingworthThresholdCalculatorHDSS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkKittlerIllingworthThresholdCalculatorHDSS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkKittlerIllingworthThresholdCalculatorHDSS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkKittlerIllingworthThresholdCalculatorHDSS in _itkKittlerIllingworthThresholdCalculatorPython:
_itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHDSS_swigregister(itkKittlerIllingworthThresholdCalculatorHDSS)
itkKittlerIllingworthThresholdCalculatorHDSS___New_orig__ = _itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHDSS___New_orig__
itkKittlerIllingworthThresholdCalculatorHDSS_cast = _itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHDSS_cast


def itkKittlerIllingworthThresholdCalculatorHDUC_New():
    return itkKittlerIllingworthThresholdCalculatorHDUC.New()

class itkKittlerIllingworthThresholdCalculatorHDUC(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDUC):
    r"""


    Computes the KittlerIllingworth's threshold for an image.

    Kittler and J. Illingworth, "Minimum error thresholding," Pattern
    Recognition, vol. 19, pp. 41-47, 1986. C. A. Glasbey, "An analysis of
    histogram-based thresholding algorithms," CVGIP: Graphical Models and
    Image Processing, vol. 55, pp. 532-537, 1993. Original Matlab code
    Copyright (C) 2004 Antti Niemisto
    Seehttp://www.cs.tut.fi/~ant/histthresh/ for an excellent slide
    presentation and the original Matlab code.

    This class is templated over the input histogram type. WARNING:  This
    calculator assumes that the input histogram has only one dimension.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHDUC___New_orig__)
    Clone = _swig_new_instance_method(_itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHDUC_Clone)
    __swig_destroy__ = _itkKittlerIllingworthThresholdCalculatorPython.delete_itkKittlerIllingworthThresholdCalculatorHDUC
    cast = _swig_new_static_method(_itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHDUC_cast)

    def New(*args, **kargs):
        """New() -> itkKittlerIllingworthThresholdCalculatorHDUC

        Create a new object of the class itkKittlerIllingworthThresholdCalculatorHDUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKittlerIllingworthThresholdCalculatorHDUC.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkKittlerIllingworthThresholdCalculatorHDUC.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkKittlerIllingworthThresholdCalculatorHDUC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkKittlerIllingworthThresholdCalculatorHDUC in _itkKittlerIllingworthThresholdCalculatorPython:
_itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHDUC_swigregister(itkKittlerIllingworthThresholdCalculatorHDUC)
itkKittlerIllingworthThresholdCalculatorHDUC___New_orig__ = _itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHDUC___New_orig__
itkKittlerIllingworthThresholdCalculatorHDUC_cast = _itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHDUC_cast


def itkKittlerIllingworthThresholdCalculatorHDUS_New():
    return itkKittlerIllingworthThresholdCalculatorHDUS.New()

class itkKittlerIllingworthThresholdCalculatorHDUS(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDUS):
    r"""


    Computes the KittlerIllingworth's threshold for an image.

    Kittler and J. Illingworth, "Minimum error thresholding," Pattern
    Recognition, vol. 19, pp. 41-47, 1986. C. A. Glasbey, "An analysis of
    histogram-based thresholding algorithms," CVGIP: Graphical Models and
    Image Processing, vol. 55, pp. 532-537, 1993. Original Matlab code
    Copyright (C) 2004 Antti Niemisto
    Seehttp://www.cs.tut.fi/~ant/histthresh/ for an excellent slide
    presentation and the original Matlab code.

    This class is templated over the input histogram type. WARNING:  This
    calculator assumes that the input histogram has only one dimension.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHDUS___New_orig__)
    Clone = _swig_new_instance_method(_itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHDUS_Clone)
    __swig_destroy__ = _itkKittlerIllingworthThresholdCalculatorPython.delete_itkKittlerIllingworthThresholdCalculatorHDUS
    cast = _swig_new_static_method(_itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHDUS_cast)

    def New(*args, **kargs):
        """New() -> itkKittlerIllingworthThresholdCalculatorHDUS

        Create a new object of the class itkKittlerIllingworthThresholdCalculatorHDUS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKittlerIllingworthThresholdCalculatorHDUS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkKittlerIllingworthThresholdCalculatorHDUS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkKittlerIllingworthThresholdCalculatorHDUS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkKittlerIllingworthThresholdCalculatorHDUS in _itkKittlerIllingworthThresholdCalculatorPython:
_itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHDUS_swigregister(itkKittlerIllingworthThresholdCalculatorHDUS)
itkKittlerIllingworthThresholdCalculatorHDUS___New_orig__ = _itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHDUS___New_orig__
itkKittlerIllingworthThresholdCalculatorHDUS_cast = _itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHDUS_cast


def itkKittlerIllingworthThresholdCalculatorHFD_New():
    return itkKittlerIllingworthThresholdCalculatorHFD.New()

class itkKittlerIllingworthThresholdCalculatorHFD(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFD):
    r"""


    Computes the KittlerIllingworth's threshold for an image.

    Kittler and J. Illingworth, "Minimum error thresholding," Pattern
    Recognition, vol. 19, pp. 41-47, 1986. C. A. Glasbey, "An analysis of
    histogram-based thresholding algorithms," CVGIP: Graphical Models and
    Image Processing, vol. 55, pp. 532-537, 1993. Original Matlab code
    Copyright (C) 2004 Antti Niemisto
    Seehttp://www.cs.tut.fi/~ant/histthresh/ for an excellent slide
    presentation and the original Matlab code.

    This class is templated over the input histogram type. WARNING:  This
    calculator assumes that the input histogram has only one dimension.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHFD___New_orig__)
    Clone = _swig_new_instance_method(_itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHFD_Clone)
    __swig_destroy__ = _itkKittlerIllingworthThresholdCalculatorPython.delete_itkKittlerIllingworthThresholdCalculatorHFD
    cast = _swig_new_static_method(_itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHFD_cast)

    def New(*args, **kargs):
        """New() -> itkKittlerIllingworthThresholdCalculatorHFD

        Create a new object of the class itkKittlerIllingworthThresholdCalculatorHFD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKittlerIllingworthThresholdCalculatorHFD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkKittlerIllingworthThresholdCalculatorHFD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkKittlerIllingworthThresholdCalculatorHFD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkKittlerIllingworthThresholdCalculatorHFD in _itkKittlerIllingworthThresholdCalculatorPython:
_itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHFD_swigregister(itkKittlerIllingworthThresholdCalculatorHFD)
itkKittlerIllingworthThresholdCalculatorHFD___New_orig__ = _itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHFD___New_orig__
itkKittlerIllingworthThresholdCalculatorHFD_cast = _itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHFD_cast


def itkKittlerIllingworthThresholdCalculatorHFF_New():
    return itkKittlerIllingworthThresholdCalculatorHFF.New()

class itkKittlerIllingworthThresholdCalculatorHFF(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFF):
    r"""


    Computes the KittlerIllingworth's threshold for an image.

    Kittler and J. Illingworth, "Minimum error thresholding," Pattern
    Recognition, vol. 19, pp. 41-47, 1986. C. A. Glasbey, "An analysis of
    histogram-based thresholding algorithms," CVGIP: Graphical Models and
    Image Processing, vol. 55, pp. 532-537, 1993. Original Matlab code
    Copyright (C) 2004 Antti Niemisto
    Seehttp://www.cs.tut.fi/~ant/histthresh/ for an excellent slide
    presentation and the original Matlab code.

    This class is templated over the input histogram type. WARNING:  This
    calculator assumes that the input histogram has only one dimension.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHFF___New_orig__)
    Clone = _swig_new_instance_method(_itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHFF_Clone)
    __swig_destroy__ = _itkKittlerIllingworthThresholdCalculatorPython.delete_itkKittlerIllingworthThresholdCalculatorHFF
    cast = _swig_new_static_method(_itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHFF_cast)

    def New(*args, **kargs):
        """New() -> itkKittlerIllingworthThresholdCalculatorHFF

        Create a new object of the class itkKittlerIllingworthThresholdCalculatorHFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKittlerIllingworthThresholdCalculatorHFF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkKittlerIllingworthThresholdCalculatorHFF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkKittlerIllingworthThresholdCalculatorHFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkKittlerIllingworthThresholdCalculatorHFF in _itkKittlerIllingworthThresholdCalculatorPython:
_itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHFF_swigregister(itkKittlerIllingworthThresholdCalculatorHFF)
itkKittlerIllingworthThresholdCalculatorHFF___New_orig__ = _itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHFF___New_orig__
itkKittlerIllingworthThresholdCalculatorHFF_cast = _itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHFF_cast


def itkKittlerIllingworthThresholdCalculatorHFSS_New():
    return itkKittlerIllingworthThresholdCalculatorHFSS.New()

class itkKittlerIllingworthThresholdCalculatorHFSS(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFSS):
    r"""


    Computes the KittlerIllingworth's threshold for an image.

    Kittler and J. Illingworth, "Minimum error thresholding," Pattern
    Recognition, vol. 19, pp. 41-47, 1986. C. A. Glasbey, "An analysis of
    histogram-based thresholding algorithms," CVGIP: Graphical Models and
    Image Processing, vol. 55, pp. 532-537, 1993. Original Matlab code
    Copyright (C) 2004 Antti Niemisto
    Seehttp://www.cs.tut.fi/~ant/histthresh/ for an excellent slide
    presentation and the original Matlab code.

    This class is templated over the input histogram type. WARNING:  This
    calculator assumes that the input histogram has only one dimension.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHFSS___New_orig__)
    Clone = _swig_new_instance_method(_itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHFSS_Clone)
    __swig_destroy__ = _itkKittlerIllingworthThresholdCalculatorPython.delete_itkKittlerIllingworthThresholdCalculatorHFSS
    cast = _swig_new_static_method(_itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHFSS_cast)

    def New(*args, **kargs):
        """New() -> itkKittlerIllingworthThresholdCalculatorHFSS

        Create a new object of the class itkKittlerIllingworthThresholdCalculatorHFSS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKittlerIllingworthThresholdCalculatorHFSS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkKittlerIllingworthThresholdCalculatorHFSS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkKittlerIllingworthThresholdCalculatorHFSS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkKittlerIllingworthThresholdCalculatorHFSS in _itkKittlerIllingworthThresholdCalculatorPython:
_itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHFSS_swigregister(itkKittlerIllingworthThresholdCalculatorHFSS)
itkKittlerIllingworthThresholdCalculatorHFSS___New_orig__ = _itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHFSS___New_orig__
itkKittlerIllingworthThresholdCalculatorHFSS_cast = _itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHFSS_cast


def itkKittlerIllingworthThresholdCalculatorHFUC_New():
    return itkKittlerIllingworthThresholdCalculatorHFUC.New()

class itkKittlerIllingworthThresholdCalculatorHFUC(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFUC):
    r"""


    Computes the KittlerIllingworth's threshold for an image.

    Kittler and J. Illingworth, "Minimum error thresholding," Pattern
    Recognition, vol. 19, pp. 41-47, 1986. C. A. Glasbey, "An analysis of
    histogram-based thresholding algorithms," CVGIP: Graphical Models and
    Image Processing, vol. 55, pp. 532-537, 1993. Original Matlab code
    Copyright (C) 2004 Antti Niemisto
    Seehttp://www.cs.tut.fi/~ant/histthresh/ for an excellent slide
    presentation and the original Matlab code.

    This class is templated over the input histogram type. WARNING:  This
    calculator assumes that the input histogram has only one dimension.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHFUC___New_orig__)
    Clone = _swig_new_instance_method(_itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHFUC_Clone)
    __swig_destroy__ = _itkKittlerIllingworthThresholdCalculatorPython.delete_itkKittlerIllingworthThresholdCalculatorHFUC
    cast = _swig_new_static_method(_itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHFUC_cast)

    def New(*args, **kargs):
        """New() -> itkKittlerIllingworthThresholdCalculatorHFUC

        Create a new object of the class itkKittlerIllingworthThresholdCalculatorHFUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKittlerIllingworthThresholdCalculatorHFUC.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkKittlerIllingworthThresholdCalculatorHFUC.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkKittlerIllingworthThresholdCalculatorHFUC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkKittlerIllingworthThresholdCalculatorHFUC in _itkKittlerIllingworthThresholdCalculatorPython:
_itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHFUC_swigregister(itkKittlerIllingworthThresholdCalculatorHFUC)
itkKittlerIllingworthThresholdCalculatorHFUC___New_orig__ = _itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHFUC___New_orig__
itkKittlerIllingworthThresholdCalculatorHFUC_cast = _itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHFUC_cast


def itkKittlerIllingworthThresholdCalculatorHFUS_New():
    return itkKittlerIllingworthThresholdCalculatorHFUS.New()

class itkKittlerIllingworthThresholdCalculatorHFUS(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFUS):
    r"""


    Computes the KittlerIllingworth's threshold for an image.

    Kittler and J. Illingworth, "Minimum error thresholding," Pattern
    Recognition, vol. 19, pp. 41-47, 1986. C. A. Glasbey, "An analysis of
    histogram-based thresholding algorithms," CVGIP: Graphical Models and
    Image Processing, vol. 55, pp. 532-537, 1993. Original Matlab code
    Copyright (C) 2004 Antti Niemisto
    Seehttp://www.cs.tut.fi/~ant/histthresh/ for an excellent slide
    presentation and the original Matlab code.

    This class is templated over the input histogram type. WARNING:  This
    calculator assumes that the input histogram has only one dimension.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHFUS___New_orig__)
    Clone = _swig_new_instance_method(_itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHFUS_Clone)
    __swig_destroy__ = _itkKittlerIllingworthThresholdCalculatorPython.delete_itkKittlerIllingworthThresholdCalculatorHFUS
    cast = _swig_new_static_method(_itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHFUS_cast)

    def New(*args, **kargs):
        """New() -> itkKittlerIllingworthThresholdCalculatorHFUS

        Create a new object of the class itkKittlerIllingworthThresholdCalculatorHFUS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKittlerIllingworthThresholdCalculatorHFUS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkKittlerIllingworthThresholdCalculatorHFUS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkKittlerIllingworthThresholdCalculatorHFUS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkKittlerIllingworthThresholdCalculatorHFUS in _itkKittlerIllingworthThresholdCalculatorPython:
_itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHFUS_swigregister(itkKittlerIllingworthThresholdCalculatorHFUS)
itkKittlerIllingworthThresholdCalculatorHFUS___New_orig__ = _itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHFUS___New_orig__
itkKittlerIllingworthThresholdCalculatorHFUS_cast = _itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHFUS_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def kittler_illingworth_threshold_calculator(*args, **kwargs):
    """Procedural interface for KittlerIllingworthThresholdCalculator"""
    import itk
    instance = itk.KittlerIllingworthThresholdCalculator.New(*args, **kwargs)
    return instance.__internal_call__()

def kittler_illingworth_threshold_calculator_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.KittlerIllingworthThresholdCalculator, itkTemplate.itkTemplate):
        filter_object = itk.KittlerIllingworthThresholdCalculator.values()[0]
    else:
        filter_object = itk.KittlerIllingworthThresholdCalculator

    kittler_illingworth_threshold_calculator.__doc__ = filter_object.__doc__
    kittler_illingworth_threshold_calculator.__doc__ += "\n Args are Input(s) to the filter.\n"
    kittler_illingworth_threshold_calculator.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.KittlerIllingworthThresholdCalculator, itkTemplate.itkTemplate):
        kittler_illingworth_threshold_calculator.__doc__ += itkHelpers.filter_args(filter_object)[0]
        kittler_illingworth_threshold_calculator.__doc__ += "\n"
        kittler_illingworth_threshold_calculator.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        kittler_illingworth_threshold_calculator.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



