# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKFiniteDifferencePython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkFiniteDifferenceFunctionPython
else:
    import _itkFiniteDifferenceFunctionPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkFiniteDifferenceFunctionPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkFiniteDifferenceFunctionPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkCovariantVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.ITKCommonBasePython
import itk.itkSizePython
class itkFiniteDifferenceFunctionICVF22(itk.ITKCommonBasePython.itkLightObject):
    r"""


    This class is a component object of the finite difference solver
    hierarchy (see FiniteDifferenceImageFilter). It defines a generic
    interface for a function object that computes a single scalar value
    from a neighborhood of values. Examples of the application of this
    class are the various flavors of AnisotropicDiffusionFunction and
    LevelSetFunction objects.

    These functions calculate the incremental change at a pixel in the
    solution image from one iteration of the Partial Differential Equation
    (PDE) solver to the next.

    Subclasses of FiniteDifferenceImageFilter (solvers) call the
    ComputeUpdate() method of this class to compute $ \\Delta
    u^n_{\\mathbf{i}} $ at each $ \\mathbf{i} $ in $ u $. Because the
    size of the time step for each iteration of the p.d.e. solution
    depends on the particular calculations done, this function object is
    also responsible for computing that time step (see
    ComputeGlobalTimeStep() ). How to use this class
    FiniteDifferenceFunction must be subclassed to add functionality for
    ComputeUpdate, ComputeGlobalTimeStep, and
    Get/ReleaseGlobalDataPointer. A note on thread safety. The
    ComputeUpdate() methods of this filter are declared as const to
    enforce thread-safety during execution of FiniteDifferenceImageFilter
    solver algorithms. The InitializeIteration() method is intended to
    provide a safe way to modify the state of the object between threaded
    calculations of solvers. Todo Possibly subclass this object from
    Function. Stumbling blocks here are the specialized api of
    FiniteDifferenceFunction. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    InitializeIteration = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_InitializeIteration)
    ComputeUpdate = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_ComputeUpdate)
    SetRadius = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_SetRadius)
    GetRadius = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_GetRadius)
    SetScaleCoefficients = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_SetScaleCoefficients)
    GetScaleCoefficients = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_GetScaleCoefficients)
    ComputeNeighborhoodScales = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_ComputeNeighborhoodScales)
    ComputeGlobalTimeStep = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_ComputeGlobalTimeStep)
    GetGlobalDataPointer = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_GetGlobalDataPointer)
    ReleaseGlobalDataPointer = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_ReleaseGlobalDataPointer)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionICVF22
    cast = _swig_new_static_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_cast)

# Register itkFiniteDifferenceFunctionICVF22 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_swigregister(itkFiniteDifferenceFunctionICVF22)
itkFiniteDifferenceFunctionICVF22_cast = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_cast

class itkFiniteDifferenceFunctionICVF23(itk.ITKCommonBasePython.itkLightObject):
    r"""


    This class is a component object of the finite difference solver
    hierarchy (see FiniteDifferenceImageFilter). It defines a generic
    interface for a function object that computes a single scalar value
    from a neighborhood of values. Examples of the application of this
    class are the various flavors of AnisotropicDiffusionFunction and
    LevelSetFunction objects.

    These functions calculate the incremental change at a pixel in the
    solution image from one iteration of the Partial Differential Equation
    (PDE) solver to the next.

    Subclasses of FiniteDifferenceImageFilter (solvers) call the
    ComputeUpdate() method of this class to compute $ \\Delta
    u^n_{\\mathbf{i}} $ at each $ \\mathbf{i} $ in $ u $. Because the
    size of the time step for each iteration of the p.d.e. solution
    depends on the particular calculations done, this function object is
    also responsible for computing that time step (see
    ComputeGlobalTimeStep() ). How to use this class
    FiniteDifferenceFunction must be subclassed to add functionality for
    ComputeUpdate, ComputeGlobalTimeStep, and
    Get/ReleaseGlobalDataPointer. A note on thread safety. The
    ComputeUpdate() methods of this filter are declared as const to
    enforce thread-safety during execution of FiniteDifferenceImageFilter
    solver algorithms. The InitializeIteration() method is intended to
    provide a safe way to modify the state of the object between threaded
    calculations of solvers. Todo Possibly subclass this object from
    Function. Stumbling blocks here are the specialized api of
    FiniteDifferenceFunction. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    InitializeIteration = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF23_InitializeIteration)
    ComputeUpdate = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF23_ComputeUpdate)
    SetRadius = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF23_SetRadius)
    GetRadius = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF23_GetRadius)
    SetScaleCoefficients = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF23_SetScaleCoefficients)
    GetScaleCoefficients = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF23_GetScaleCoefficients)
    ComputeNeighborhoodScales = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF23_ComputeNeighborhoodScales)
    ComputeGlobalTimeStep = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF23_ComputeGlobalTimeStep)
    GetGlobalDataPointer = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF23_GetGlobalDataPointer)
    ReleaseGlobalDataPointer = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF23_ReleaseGlobalDataPointer)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionICVF23
    cast = _swig_new_static_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF23_cast)

# Register itkFiniteDifferenceFunctionICVF23 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF23_swigregister(itkFiniteDifferenceFunctionICVF23)
itkFiniteDifferenceFunctionICVF23_cast = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF23_cast

class itkFiniteDifferenceFunctionICVF32(itk.ITKCommonBasePython.itkLightObject):
    r"""


    This class is a component object of the finite difference solver
    hierarchy (see FiniteDifferenceImageFilter). It defines a generic
    interface for a function object that computes a single scalar value
    from a neighborhood of values. Examples of the application of this
    class are the various flavors of AnisotropicDiffusionFunction and
    LevelSetFunction objects.

    These functions calculate the incremental change at a pixel in the
    solution image from one iteration of the Partial Differential Equation
    (PDE) solver to the next.

    Subclasses of FiniteDifferenceImageFilter (solvers) call the
    ComputeUpdate() method of this class to compute $ \\Delta
    u^n_{\\mathbf{i}} $ at each $ \\mathbf{i} $ in $ u $. Because the
    size of the time step for each iteration of the p.d.e. solution
    depends on the particular calculations done, this function object is
    also responsible for computing that time step (see
    ComputeGlobalTimeStep() ). How to use this class
    FiniteDifferenceFunction must be subclassed to add functionality for
    ComputeUpdate, ComputeGlobalTimeStep, and
    Get/ReleaseGlobalDataPointer. A note on thread safety. The
    ComputeUpdate() methods of this filter are declared as const to
    enforce thread-safety during execution of FiniteDifferenceImageFilter
    solver algorithms. The InitializeIteration() method is intended to
    provide a safe way to modify the state of the object between threaded
    calculations of solvers. Todo Possibly subclass this object from
    Function. Stumbling blocks here are the specialized api of
    FiniteDifferenceFunction. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    InitializeIteration = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF32_InitializeIteration)
    ComputeUpdate = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF32_ComputeUpdate)
    SetRadius = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF32_SetRadius)
    GetRadius = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF32_GetRadius)
    SetScaleCoefficients = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF32_SetScaleCoefficients)
    GetScaleCoefficients = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF32_GetScaleCoefficients)
    ComputeNeighborhoodScales = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF32_ComputeNeighborhoodScales)
    ComputeGlobalTimeStep = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF32_ComputeGlobalTimeStep)
    GetGlobalDataPointer = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF32_GetGlobalDataPointer)
    ReleaseGlobalDataPointer = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF32_ReleaseGlobalDataPointer)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionICVF32
    cast = _swig_new_static_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF32_cast)

# Register itkFiniteDifferenceFunctionICVF32 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF32_swigregister(itkFiniteDifferenceFunctionICVF32)
itkFiniteDifferenceFunctionICVF32_cast = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF32_cast

class itkFiniteDifferenceFunctionICVF33(itk.ITKCommonBasePython.itkLightObject):
    r"""


    This class is a component object of the finite difference solver
    hierarchy (see FiniteDifferenceImageFilter). It defines a generic
    interface for a function object that computes a single scalar value
    from a neighborhood of values. Examples of the application of this
    class are the various flavors of AnisotropicDiffusionFunction and
    LevelSetFunction objects.

    These functions calculate the incremental change at a pixel in the
    solution image from one iteration of the Partial Differential Equation
    (PDE) solver to the next.

    Subclasses of FiniteDifferenceImageFilter (solvers) call the
    ComputeUpdate() method of this class to compute $ \\Delta
    u^n_{\\mathbf{i}} $ at each $ \\mathbf{i} $ in $ u $. Because the
    size of the time step for each iteration of the p.d.e. solution
    depends on the particular calculations done, this function object is
    also responsible for computing that time step (see
    ComputeGlobalTimeStep() ). How to use this class
    FiniteDifferenceFunction must be subclassed to add functionality for
    ComputeUpdate, ComputeGlobalTimeStep, and
    Get/ReleaseGlobalDataPointer. A note on thread safety. The
    ComputeUpdate() methods of this filter are declared as const to
    enforce thread-safety during execution of FiniteDifferenceImageFilter
    solver algorithms. The InitializeIteration() method is intended to
    provide a safe way to modify the state of the object between threaded
    calculations of solvers. Todo Possibly subclass this object from
    Function. Stumbling blocks here are the specialized api of
    FiniteDifferenceFunction. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    InitializeIteration = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_InitializeIteration)
    ComputeUpdate = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_ComputeUpdate)
    SetRadius = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_SetRadius)
    GetRadius = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_GetRadius)
    SetScaleCoefficients = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_SetScaleCoefficients)
    GetScaleCoefficients = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_GetScaleCoefficients)
    ComputeNeighborhoodScales = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_ComputeNeighborhoodScales)
    ComputeGlobalTimeStep = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_ComputeGlobalTimeStep)
    GetGlobalDataPointer = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_GetGlobalDataPointer)
    ReleaseGlobalDataPointer = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_ReleaseGlobalDataPointer)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionICVF33
    cast = _swig_new_static_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_cast)

# Register itkFiniteDifferenceFunctionICVF33 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_swigregister(itkFiniteDifferenceFunctionICVF33)
itkFiniteDifferenceFunctionICVF33_cast = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_cast

class itkFiniteDifferenceFunctionICVF42(itk.ITKCommonBasePython.itkLightObject):
    r"""


    This class is a component object of the finite difference solver
    hierarchy (see FiniteDifferenceImageFilter). It defines a generic
    interface for a function object that computes a single scalar value
    from a neighborhood of values. Examples of the application of this
    class are the various flavors of AnisotropicDiffusionFunction and
    LevelSetFunction objects.

    These functions calculate the incremental change at a pixel in the
    solution image from one iteration of the Partial Differential Equation
    (PDE) solver to the next.

    Subclasses of FiniteDifferenceImageFilter (solvers) call the
    ComputeUpdate() method of this class to compute $ \\Delta
    u^n_{\\mathbf{i}} $ at each $ \\mathbf{i} $ in $ u $. Because the
    size of the time step for each iteration of the p.d.e. solution
    depends on the particular calculations done, this function object is
    also responsible for computing that time step (see
    ComputeGlobalTimeStep() ). How to use this class
    FiniteDifferenceFunction must be subclassed to add functionality for
    ComputeUpdate, ComputeGlobalTimeStep, and
    Get/ReleaseGlobalDataPointer. A note on thread safety. The
    ComputeUpdate() methods of this filter are declared as const to
    enforce thread-safety during execution of FiniteDifferenceImageFilter
    solver algorithms. The InitializeIteration() method is intended to
    provide a safe way to modify the state of the object between threaded
    calculations of solvers. Todo Possibly subclass this object from
    Function. Stumbling blocks here are the specialized api of
    FiniteDifferenceFunction. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    InitializeIteration = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF42_InitializeIteration)
    ComputeUpdate = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF42_ComputeUpdate)
    SetRadius = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF42_SetRadius)
    GetRadius = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF42_GetRadius)
    SetScaleCoefficients = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF42_SetScaleCoefficients)
    GetScaleCoefficients = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF42_GetScaleCoefficients)
    ComputeNeighborhoodScales = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF42_ComputeNeighborhoodScales)
    ComputeGlobalTimeStep = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF42_ComputeGlobalTimeStep)
    GetGlobalDataPointer = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF42_GetGlobalDataPointer)
    ReleaseGlobalDataPointer = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF42_ReleaseGlobalDataPointer)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionICVF42
    cast = _swig_new_static_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF42_cast)

# Register itkFiniteDifferenceFunctionICVF42 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF42_swigregister(itkFiniteDifferenceFunctionICVF42)
itkFiniteDifferenceFunctionICVF42_cast = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF42_cast

class itkFiniteDifferenceFunctionICVF43(itk.ITKCommonBasePython.itkLightObject):
    r"""


    This class is a component object of the finite difference solver
    hierarchy (see FiniteDifferenceImageFilter). It defines a generic
    interface for a function object that computes a single scalar value
    from a neighborhood of values. Examples of the application of this
    class are the various flavors of AnisotropicDiffusionFunction and
    LevelSetFunction objects.

    These functions calculate the incremental change at a pixel in the
    solution image from one iteration of the Partial Differential Equation
    (PDE) solver to the next.

    Subclasses of FiniteDifferenceImageFilter (solvers) call the
    ComputeUpdate() method of this class to compute $ \\Delta
    u^n_{\\mathbf{i}} $ at each $ \\mathbf{i} $ in $ u $. Because the
    size of the time step for each iteration of the p.d.e. solution
    depends on the particular calculations done, this function object is
    also responsible for computing that time step (see
    ComputeGlobalTimeStep() ). How to use this class
    FiniteDifferenceFunction must be subclassed to add functionality for
    ComputeUpdate, ComputeGlobalTimeStep, and
    Get/ReleaseGlobalDataPointer. A note on thread safety. The
    ComputeUpdate() methods of this filter are declared as const to
    enforce thread-safety during execution of FiniteDifferenceImageFilter
    solver algorithms. The InitializeIteration() method is intended to
    provide a safe way to modify the state of the object between threaded
    calculations of solvers. Todo Possibly subclass this object from
    Function. Stumbling blocks here are the specialized api of
    FiniteDifferenceFunction. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    InitializeIteration = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF43_InitializeIteration)
    ComputeUpdate = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF43_ComputeUpdate)
    SetRadius = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF43_SetRadius)
    GetRadius = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF43_GetRadius)
    SetScaleCoefficients = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF43_SetScaleCoefficients)
    GetScaleCoefficients = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF43_GetScaleCoefficients)
    ComputeNeighborhoodScales = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF43_ComputeNeighborhoodScales)
    ComputeGlobalTimeStep = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF43_ComputeGlobalTimeStep)
    GetGlobalDataPointer = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF43_GetGlobalDataPointer)
    ReleaseGlobalDataPointer = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF43_ReleaseGlobalDataPointer)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionICVF43
    cast = _swig_new_static_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF43_cast)

# Register itkFiniteDifferenceFunctionICVF43 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF43_swigregister(itkFiniteDifferenceFunctionICVF43)
itkFiniteDifferenceFunctionICVF43_cast = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF43_cast

class itkFiniteDifferenceFunctionID2(itk.ITKCommonBasePython.itkLightObject):
    r"""


    This class is a component object of the finite difference solver
    hierarchy (see FiniteDifferenceImageFilter). It defines a generic
    interface for a function object that computes a single scalar value
    from a neighborhood of values. Examples of the application of this
    class are the various flavors of AnisotropicDiffusionFunction and
    LevelSetFunction objects.

    These functions calculate the incremental change at a pixel in the
    solution image from one iteration of the Partial Differential Equation
    (PDE) solver to the next.

    Subclasses of FiniteDifferenceImageFilter (solvers) call the
    ComputeUpdate() method of this class to compute $ \\Delta
    u^n_{\\mathbf{i}} $ at each $ \\mathbf{i} $ in $ u $. Because the
    size of the time step for each iteration of the p.d.e. solution
    depends on the particular calculations done, this function object is
    also responsible for computing that time step (see
    ComputeGlobalTimeStep() ). How to use this class
    FiniteDifferenceFunction must be subclassed to add functionality for
    ComputeUpdate, ComputeGlobalTimeStep, and
    Get/ReleaseGlobalDataPointer. A note on thread safety. The
    ComputeUpdate() methods of this filter are declared as const to
    enforce thread-safety during execution of FiniteDifferenceImageFilter
    solver algorithms. The InitializeIteration() method is intended to
    provide a safe way to modify the state of the object between threaded
    calculations of solvers. Todo Possibly subclass this object from
    Function. Stumbling blocks here are the specialized api of
    FiniteDifferenceFunction. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    InitializeIteration = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID2_InitializeIteration)
    ComputeUpdate = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID2_ComputeUpdate)
    SetRadius = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID2_SetRadius)
    GetRadius = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID2_GetRadius)
    SetScaleCoefficients = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID2_SetScaleCoefficients)
    GetScaleCoefficients = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID2_GetScaleCoefficients)
    ComputeNeighborhoodScales = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID2_ComputeNeighborhoodScales)
    ComputeGlobalTimeStep = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID2_ComputeGlobalTimeStep)
    GetGlobalDataPointer = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID2_GetGlobalDataPointer)
    ReleaseGlobalDataPointer = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID2_ReleaseGlobalDataPointer)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionID2
    cast = _swig_new_static_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID2_cast)

# Register itkFiniteDifferenceFunctionID2 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID2_swigregister(itkFiniteDifferenceFunctionID2)
itkFiniteDifferenceFunctionID2_cast = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID2_cast

class itkFiniteDifferenceFunctionID3(itk.ITKCommonBasePython.itkLightObject):
    r"""


    This class is a component object of the finite difference solver
    hierarchy (see FiniteDifferenceImageFilter). It defines a generic
    interface for a function object that computes a single scalar value
    from a neighborhood of values. Examples of the application of this
    class are the various flavors of AnisotropicDiffusionFunction and
    LevelSetFunction objects.

    These functions calculate the incremental change at a pixel in the
    solution image from one iteration of the Partial Differential Equation
    (PDE) solver to the next.

    Subclasses of FiniteDifferenceImageFilter (solvers) call the
    ComputeUpdate() method of this class to compute $ \\Delta
    u^n_{\\mathbf{i}} $ at each $ \\mathbf{i} $ in $ u $. Because the
    size of the time step for each iteration of the p.d.e. solution
    depends on the particular calculations done, this function object is
    also responsible for computing that time step (see
    ComputeGlobalTimeStep() ). How to use this class
    FiniteDifferenceFunction must be subclassed to add functionality for
    ComputeUpdate, ComputeGlobalTimeStep, and
    Get/ReleaseGlobalDataPointer. A note on thread safety. The
    ComputeUpdate() methods of this filter are declared as const to
    enforce thread-safety during execution of FiniteDifferenceImageFilter
    solver algorithms. The InitializeIteration() method is intended to
    provide a safe way to modify the state of the object between threaded
    calculations of solvers. Todo Possibly subclass this object from
    Function. Stumbling blocks here are the specialized api of
    FiniteDifferenceFunction. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    InitializeIteration = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID3_InitializeIteration)
    ComputeUpdate = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID3_ComputeUpdate)
    SetRadius = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID3_SetRadius)
    GetRadius = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID3_GetRadius)
    SetScaleCoefficients = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID3_SetScaleCoefficients)
    GetScaleCoefficients = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID3_GetScaleCoefficients)
    ComputeNeighborhoodScales = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID3_ComputeNeighborhoodScales)
    ComputeGlobalTimeStep = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID3_ComputeGlobalTimeStep)
    GetGlobalDataPointer = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID3_GetGlobalDataPointer)
    ReleaseGlobalDataPointer = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID3_ReleaseGlobalDataPointer)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionID3
    cast = _swig_new_static_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID3_cast)

# Register itkFiniteDifferenceFunctionID3 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID3_swigregister(itkFiniteDifferenceFunctionID3)
itkFiniteDifferenceFunctionID3_cast = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID3_cast

class itkFiniteDifferenceFunctionIF2(itk.ITKCommonBasePython.itkLightObject):
    r"""


    This class is a component object of the finite difference solver
    hierarchy (see FiniteDifferenceImageFilter). It defines a generic
    interface for a function object that computes a single scalar value
    from a neighborhood of values. Examples of the application of this
    class are the various flavors of AnisotropicDiffusionFunction and
    LevelSetFunction objects.

    These functions calculate the incremental change at a pixel in the
    solution image from one iteration of the Partial Differential Equation
    (PDE) solver to the next.

    Subclasses of FiniteDifferenceImageFilter (solvers) call the
    ComputeUpdate() method of this class to compute $ \\Delta
    u^n_{\\mathbf{i}} $ at each $ \\mathbf{i} $ in $ u $. Because the
    size of the time step for each iteration of the p.d.e. solution
    depends on the particular calculations done, this function object is
    also responsible for computing that time step (see
    ComputeGlobalTimeStep() ). How to use this class
    FiniteDifferenceFunction must be subclassed to add functionality for
    ComputeUpdate, ComputeGlobalTimeStep, and
    Get/ReleaseGlobalDataPointer. A note on thread safety. The
    ComputeUpdate() methods of this filter are declared as const to
    enforce thread-safety during execution of FiniteDifferenceImageFilter
    solver algorithms. The InitializeIteration() method is intended to
    provide a safe way to modify the state of the object between threaded
    calculations of solvers. Todo Possibly subclass this object from
    Function. Stumbling blocks here are the specialized api of
    FiniteDifferenceFunction. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    InitializeIteration = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_InitializeIteration)
    ComputeUpdate = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_ComputeUpdate)
    SetRadius = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_SetRadius)
    GetRadius = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_GetRadius)
    SetScaleCoefficients = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_SetScaleCoefficients)
    GetScaleCoefficients = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_GetScaleCoefficients)
    ComputeNeighborhoodScales = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_ComputeNeighborhoodScales)
    ComputeGlobalTimeStep = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_ComputeGlobalTimeStep)
    GetGlobalDataPointer = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_GetGlobalDataPointer)
    ReleaseGlobalDataPointer = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_ReleaseGlobalDataPointer)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionIF2
    cast = _swig_new_static_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_cast)

# Register itkFiniteDifferenceFunctionIF2 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_swigregister(itkFiniteDifferenceFunctionIF2)
itkFiniteDifferenceFunctionIF2_cast = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_cast

class itkFiniteDifferenceFunctionIF3(itk.ITKCommonBasePython.itkLightObject):
    r"""


    This class is a component object of the finite difference solver
    hierarchy (see FiniteDifferenceImageFilter). It defines a generic
    interface for a function object that computes a single scalar value
    from a neighborhood of values. Examples of the application of this
    class are the various flavors of AnisotropicDiffusionFunction and
    LevelSetFunction objects.

    These functions calculate the incremental change at a pixel in the
    solution image from one iteration of the Partial Differential Equation
    (PDE) solver to the next.

    Subclasses of FiniteDifferenceImageFilter (solvers) call the
    ComputeUpdate() method of this class to compute $ \\Delta
    u^n_{\\mathbf{i}} $ at each $ \\mathbf{i} $ in $ u $. Because the
    size of the time step for each iteration of the p.d.e. solution
    depends on the particular calculations done, this function object is
    also responsible for computing that time step (see
    ComputeGlobalTimeStep() ). How to use this class
    FiniteDifferenceFunction must be subclassed to add functionality for
    ComputeUpdate, ComputeGlobalTimeStep, and
    Get/ReleaseGlobalDataPointer. A note on thread safety. The
    ComputeUpdate() methods of this filter are declared as const to
    enforce thread-safety during execution of FiniteDifferenceImageFilter
    solver algorithms. The InitializeIteration() method is intended to
    provide a safe way to modify the state of the object between threaded
    calculations of solvers. Todo Possibly subclass this object from
    Function. Stumbling blocks here are the specialized api of
    FiniteDifferenceFunction. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    InitializeIteration = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_InitializeIteration)
    ComputeUpdate = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_ComputeUpdate)
    SetRadius = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_SetRadius)
    GetRadius = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_GetRadius)
    SetScaleCoefficients = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_SetScaleCoefficients)
    GetScaleCoefficients = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_GetScaleCoefficients)
    ComputeNeighborhoodScales = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_ComputeNeighborhoodScales)
    ComputeGlobalTimeStep = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_ComputeGlobalTimeStep)
    GetGlobalDataPointer = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_GetGlobalDataPointer)
    ReleaseGlobalDataPointer = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_ReleaseGlobalDataPointer)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionIF3
    cast = _swig_new_static_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_cast)

# Register itkFiniteDifferenceFunctionIF3 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_swigregister(itkFiniteDifferenceFunctionIF3)
itkFiniteDifferenceFunctionIF3_cast = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_cast

class itkFiniteDifferenceFunctionISS2(itk.ITKCommonBasePython.itkLightObject):
    r"""


    This class is a component object of the finite difference solver
    hierarchy (see FiniteDifferenceImageFilter). It defines a generic
    interface for a function object that computes a single scalar value
    from a neighborhood of values. Examples of the application of this
    class are the various flavors of AnisotropicDiffusionFunction and
    LevelSetFunction objects.

    These functions calculate the incremental change at a pixel in the
    solution image from one iteration of the Partial Differential Equation
    (PDE) solver to the next.

    Subclasses of FiniteDifferenceImageFilter (solvers) call the
    ComputeUpdate() method of this class to compute $ \\Delta
    u^n_{\\mathbf{i}} $ at each $ \\mathbf{i} $ in $ u $. Because the
    size of the time step for each iteration of the p.d.e. solution
    depends on the particular calculations done, this function object is
    also responsible for computing that time step (see
    ComputeGlobalTimeStep() ). How to use this class
    FiniteDifferenceFunction must be subclassed to add functionality for
    ComputeUpdate, ComputeGlobalTimeStep, and
    Get/ReleaseGlobalDataPointer. A note on thread safety. The
    ComputeUpdate() methods of this filter are declared as const to
    enforce thread-safety during execution of FiniteDifferenceImageFilter
    solver algorithms. The InitializeIteration() method is intended to
    provide a safe way to modify the state of the object between threaded
    calculations of solvers. Todo Possibly subclass this object from
    Function. Stumbling blocks here are the specialized api of
    FiniteDifferenceFunction. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    InitializeIteration = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS2_InitializeIteration)
    ComputeUpdate = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS2_ComputeUpdate)
    SetRadius = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS2_SetRadius)
    GetRadius = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS2_GetRadius)
    SetScaleCoefficients = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS2_SetScaleCoefficients)
    GetScaleCoefficients = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS2_GetScaleCoefficients)
    ComputeNeighborhoodScales = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS2_ComputeNeighborhoodScales)
    ComputeGlobalTimeStep = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS2_ComputeGlobalTimeStep)
    GetGlobalDataPointer = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS2_GetGlobalDataPointer)
    ReleaseGlobalDataPointer = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS2_ReleaseGlobalDataPointer)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionISS2
    cast = _swig_new_static_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS2_cast)

# Register itkFiniteDifferenceFunctionISS2 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS2_swigregister(itkFiniteDifferenceFunctionISS2)
itkFiniteDifferenceFunctionISS2_cast = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS2_cast

class itkFiniteDifferenceFunctionISS3(itk.ITKCommonBasePython.itkLightObject):
    r"""


    This class is a component object of the finite difference solver
    hierarchy (see FiniteDifferenceImageFilter). It defines a generic
    interface for a function object that computes a single scalar value
    from a neighborhood of values. Examples of the application of this
    class are the various flavors of AnisotropicDiffusionFunction and
    LevelSetFunction objects.

    These functions calculate the incremental change at a pixel in the
    solution image from one iteration of the Partial Differential Equation
    (PDE) solver to the next.

    Subclasses of FiniteDifferenceImageFilter (solvers) call the
    ComputeUpdate() method of this class to compute $ \\Delta
    u^n_{\\mathbf{i}} $ at each $ \\mathbf{i} $ in $ u $. Because the
    size of the time step for each iteration of the p.d.e. solution
    depends on the particular calculations done, this function object is
    also responsible for computing that time step (see
    ComputeGlobalTimeStep() ). How to use this class
    FiniteDifferenceFunction must be subclassed to add functionality for
    ComputeUpdate, ComputeGlobalTimeStep, and
    Get/ReleaseGlobalDataPointer. A note on thread safety. The
    ComputeUpdate() methods of this filter are declared as const to
    enforce thread-safety during execution of FiniteDifferenceImageFilter
    solver algorithms. The InitializeIteration() method is intended to
    provide a safe way to modify the state of the object between threaded
    calculations of solvers. Todo Possibly subclass this object from
    Function. Stumbling blocks here are the specialized api of
    FiniteDifferenceFunction. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    InitializeIteration = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS3_InitializeIteration)
    ComputeUpdate = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS3_ComputeUpdate)
    SetRadius = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS3_SetRadius)
    GetRadius = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS3_GetRadius)
    SetScaleCoefficients = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS3_SetScaleCoefficients)
    GetScaleCoefficients = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS3_GetScaleCoefficients)
    ComputeNeighborhoodScales = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS3_ComputeNeighborhoodScales)
    ComputeGlobalTimeStep = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS3_ComputeGlobalTimeStep)
    GetGlobalDataPointer = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS3_GetGlobalDataPointer)
    ReleaseGlobalDataPointer = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS3_ReleaseGlobalDataPointer)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionISS3
    cast = _swig_new_static_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS3_cast)

# Register itkFiniteDifferenceFunctionISS3 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS3_swigregister(itkFiniteDifferenceFunctionISS3)
itkFiniteDifferenceFunctionISS3_cast = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS3_cast

class itkFiniteDifferenceFunctionIUC2(itk.ITKCommonBasePython.itkLightObject):
    r"""


    This class is a component object of the finite difference solver
    hierarchy (see FiniteDifferenceImageFilter). It defines a generic
    interface for a function object that computes a single scalar value
    from a neighborhood of values. Examples of the application of this
    class are the various flavors of AnisotropicDiffusionFunction and
    LevelSetFunction objects.

    These functions calculate the incremental change at a pixel in the
    solution image from one iteration of the Partial Differential Equation
    (PDE) solver to the next.

    Subclasses of FiniteDifferenceImageFilter (solvers) call the
    ComputeUpdate() method of this class to compute $ \\Delta
    u^n_{\\mathbf{i}} $ at each $ \\mathbf{i} $ in $ u $. Because the
    size of the time step for each iteration of the p.d.e. solution
    depends on the particular calculations done, this function object is
    also responsible for computing that time step (see
    ComputeGlobalTimeStep() ). How to use this class
    FiniteDifferenceFunction must be subclassed to add functionality for
    ComputeUpdate, ComputeGlobalTimeStep, and
    Get/ReleaseGlobalDataPointer. A note on thread safety. The
    ComputeUpdate() methods of this filter are declared as const to
    enforce thread-safety during execution of FiniteDifferenceImageFilter
    solver algorithms. The InitializeIteration() method is intended to
    provide a safe way to modify the state of the object between threaded
    calculations of solvers. Todo Possibly subclass this object from
    Function. Stumbling blocks here are the specialized api of
    FiniteDifferenceFunction. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    InitializeIteration = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_InitializeIteration)
    ComputeUpdate = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_ComputeUpdate)
    SetRadius = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_SetRadius)
    GetRadius = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_GetRadius)
    SetScaleCoefficients = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_SetScaleCoefficients)
    GetScaleCoefficients = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_GetScaleCoefficients)
    ComputeNeighborhoodScales = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_ComputeNeighborhoodScales)
    ComputeGlobalTimeStep = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_ComputeGlobalTimeStep)
    GetGlobalDataPointer = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_GetGlobalDataPointer)
    ReleaseGlobalDataPointer = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_ReleaseGlobalDataPointer)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionIUC2
    cast = _swig_new_static_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_cast)

# Register itkFiniteDifferenceFunctionIUC2 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_swigregister(itkFiniteDifferenceFunctionIUC2)
itkFiniteDifferenceFunctionIUC2_cast = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_cast

class itkFiniteDifferenceFunctionIUC3(itk.ITKCommonBasePython.itkLightObject):
    r"""


    This class is a component object of the finite difference solver
    hierarchy (see FiniteDifferenceImageFilter). It defines a generic
    interface for a function object that computes a single scalar value
    from a neighborhood of values. Examples of the application of this
    class are the various flavors of AnisotropicDiffusionFunction and
    LevelSetFunction objects.

    These functions calculate the incremental change at a pixel in the
    solution image from one iteration of the Partial Differential Equation
    (PDE) solver to the next.

    Subclasses of FiniteDifferenceImageFilter (solvers) call the
    ComputeUpdate() method of this class to compute $ \\Delta
    u^n_{\\mathbf{i}} $ at each $ \\mathbf{i} $ in $ u $. Because the
    size of the time step for each iteration of the p.d.e. solution
    depends on the particular calculations done, this function object is
    also responsible for computing that time step (see
    ComputeGlobalTimeStep() ). How to use this class
    FiniteDifferenceFunction must be subclassed to add functionality for
    ComputeUpdate, ComputeGlobalTimeStep, and
    Get/ReleaseGlobalDataPointer. A note on thread safety. The
    ComputeUpdate() methods of this filter are declared as const to
    enforce thread-safety during execution of FiniteDifferenceImageFilter
    solver algorithms. The InitializeIteration() method is intended to
    provide a safe way to modify the state of the object between threaded
    calculations of solvers. Todo Possibly subclass this object from
    Function. Stumbling blocks here are the specialized api of
    FiniteDifferenceFunction. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    InitializeIteration = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_InitializeIteration)
    ComputeUpdate = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_ComputeUpdate)
    SetRadius = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_SetRadius)
    GetRadius = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_GetRadius)
    SetScaleCoefficients = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_SetScaleCoefficients)
    GetScaleCoefficients = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_GetScaleCoefficients)
    ComputeNeighborhoodScales = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_ComputeNeighborhoodScales)
    ComputeGlobalTimeStep = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_ComputeGlobalTimeStep)
    GetGlobalDataPointer = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_GetGlobalDataPointer)
    ReleaseGlobalDataPointer = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_ReleaseGlobalDataPointer)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionIUC3
    cast = _swig_new_static_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_cast)

# Register itkFiniteDifferenceFunctionIUC3 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_swigregister(itkFiniteDifferenceFunctionIUC3)
itkFiniteDifferenceFunctionIUC3_cast = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_cast

class itkFiniteDifferenceFunctionIUS2(itk.ITKCommonBasePython.itkLightObject):
    r"""


    This class is a component object of the finite difference solver
    hierarchy (see FiniteDifferenceImageFilter). It defines a generic
    interface for a function object that computes a single scalar value
    from a neighborhood of values. Examples of the application of this
    class are the various flavors of AnisotropicDiffusionFunction and
    LevelSetFunction objects.

    These functions calculate the incremental change at a pixel in the
    solution image from one iteration of the Partial Differential Equation
    (PDE) solver to the next.

    Subclasses of FiniteDifferenceImageFilter (solvers) call the
    ComputeUpdate() method of this class to compute $ \\Delta
    u^n_{\\mathbf{i}} $ at each $ \\mathbf{i} $ in $ u $. Because the
    size of the time step for each iteration of the p.d.e. solution
    depends on the particular calculations done, this function object is
    also responsible for computing that time step (see
    ComputeGlobalTimeStep() ). How to use this class
    FiniteDifferenceFunction must be subclassed to add functionality for
    ComputeUpdate, ComputeGlobalTimeStep, and
    Get/ReleaseGlobalDataPointer. A note on thread safety. The
    ComputeUpdate() methods of this filter are declared as const to
    enforce thread-safety during execution of FiniteDifferenceImageFilter
    solver algorithms. The InitializeIteration() method is intended to
    provide a safe way to modify the state of the object between threaded
    calculations of solvers. Todo Possibly subclass this object from
    Function. Stumbling blocks here are the specialized api of
    FiniteDifferenceFunction. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    InitializeIteration = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_InitializeIteration)
    ComputeUpdate = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_ComputeUpdate)
    SetRadius = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_SetRadius)
    GetRadius = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_GetRadius)
    SetScaleCoefficients = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_SetScaleCoefficients)
    GetScaleCoefficients = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_GetScaleCoefficients)
    ComputeNeighborhoodScales = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_ComputeNeighborhoodScales)
    ComputeGlobalTimeStep = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_ComputeGlobalTimeStep)
    GetGlobalDataPointer = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_GetGlobalDataPointer)
    ReleaseGlobalDataPointer = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_ReleaseGlobalDataPointer)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionIUS2
    cast = _swig_new_static_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_cast)

# Register itkFiniteDifferenceFunctionIUS2 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_swigregister(itkFiniteDifferenceFunctionIUS2)
itkFiniteDifferenceFunctionIUS2_cast = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_cast

class itkFiniteDifferenceFunctionIUS3(itk.ITKCommonBasePython.itkLightObject):
    r"""


    This class is a component object of the finite difference solver
    hierarchy (see FiniteDifferenceImageFilter). It defines a generic
    interface for a function object that computes a single scalar value
    from a neighborhood of values. Examples of the application of this
    class are the various flavors of AnisotropicDiffusionFunction and
    LevelSetFunction objects.

    These functions calculate the incremental change at a pixel in the
    solution image from one iteration of the Partial Differential Equation
    (PDE) solver to the next.

    Subclasses of FiniteDifferenceImageFilter (solvers) call the
    ComputeUpdate() method of this class to compute $ \\Delta
    u^n_{\\mathbf{i}} $ at each $ \\mathbf{i} $ in $ u $. Because the
    size of the time step for each iteration of the p.d.e. solution
    depends on the particular calculations done, this function object is
    also responsible for computing that time step (see
    ComputeGlobalTimeStep() ). How to use this class
    FiniteDifferenceFunction must be subclassed to add functionality for
    ComputeUpdate, ComputeGlobalTimeStep, and
    Get/ReleaseGlobalDataPointer. A note on thread safety. The
    ComputeUpdate() methods of this filter are declared as const to
    enforce thread-safety during execution of FiniteDifferenceImageFilter
    solver algorithms. The InitializeIteration() method is intended to
    provide a safe way to modify the state of the object between threaded
    calculations of solvers. Todo Possibly subclass this object from
    Function. Stumbling blocks here are the specialized api of
    FiniteDifferenceFunction. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    InitializeIteration = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_InitializeIteration)
    ComputeUpdate = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_ComputeUpdate)
    SetRadius = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_SetRadius)
    GetRadius = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_GetRadius)
    SetScaleCoefficients = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_SetScaleCoefficients)
    GetScaleCoefficients = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_GetScaleCoefficients)
    ComputeNeighborhoodScales = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_ComputeNeighborhoodScales)
    ComputeGlobalTimeStep = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_ComputeGlobalTimeStep)
    GetGlobalDataPointer = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_GetGlobalDataPointer)
    ReleaseGlobalDataPointer = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_ReleaseGlobalDataPointer)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionIUS3
    cast = _swig_new_static_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_cast)

# Register itkFiniteDifferenceFunctionIUS3 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_swigregister(itkFiniteDifferenceFunctionIUS3)
itkFiniteDifferenceFunctionIUS3_cast = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_cast

class itkFiniteDifferenceFunctionIVF22(itk.ITKCommonBasePython.itkLightObject):
    r"""


    This class is a component object of the finite difference solver
    hierarchy (see FiniteDifferenceImageFilter). It defines a generic
    interface for a function object that computes a single scalar value
    from a neighborhood of values. Examples of the application of this
    class are the various flavors of AnisotropicDiffusionFunction and
    LevelSetFunction objects.

    These functions calculate the incremental change at a pixel in the
    solution image from one iteration of the Partial Differential Equation
    (PDE) solver to the next.

    Subclasses of FiniteDifferenceImageFilter (solvers) call the
    ComputeUpdate() method of this class to compute $ \\Delta
    u^n_{\\mathbf{i}} $ at each $ \\mathbf{i} $ in $ u $. Because the
    size of the time step for each iteration of the p.d.e. solution
    depends on the particular calculations done, this function object is
    also responsible for computing that time step (see
    ComputeGlobalTimeStep() ). How to use this class
    FiniteDifferenceFunction must be subclassed to add functionality for
    ComputeUpdate, ComputeGlobalTimeStep, and
    Get/ReleaseGlobalDataPointer. A note on thread safety. The
    ComputeUpdate() methods of this filter are declared as const to
    enforce thread-safety during execution of FiniteDifferenceImageFilter
    solver algorithms. The InitializeIteration() method is intended to
    provide a safe way to modify the state of the object between threaded
    calculations of solvers. Todo Possibly subclass this object from
    Function. Stumbling blocks here are the specialized api of
    FiniteDifferenceFunction. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    InitializeIteration = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_InitializeIteration)
    ComputeUpdate = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_ComputeUpdate)
    SetRadius = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_SetRadius)
    GetRadius = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_GetRadius)
    SetScaleCoefficients = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_SetScaleCoefficients)
    GetScaleCoefficients = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_GetScaleCoefficients)
    ComputeNeighborhoodScales = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_ComputeNeighborhoodScales)
    ComputeGlobalTimeStep = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_ComputeGlobalTimeStep)
    GetGlobalDataPointer = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_GetGlobalDataPointer)
    ReleaseGlobalDataPointer = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_ReleaseGlobalDataPointer)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionIVF22
    cast = _swig_new_static_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_cast)

# Register itkFiniteDifferenceFunctionIVF22 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_swigregister(itkFiniteDifferenceFunctionIVF22)
itkFiniteDifferenceFunctionIVF22_cast = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_cast

class itkFiniteDifferenceFunctionIVF23(itk.ITKCommonBasePython.itkLightObject):
    r"""


    This class is a component object of the finite difference solver
    hierarchy (see FiniteDifferenceImageFilter). It defines a generic
    interface for a function object that computes a single scalar value
    from a neighborhood of values. Examples of the application of this
    class are the various flavors of AnisotropicDiffusionFunction and
    LevelSetFunction objects.

    These functions calculate the incremental change at a pixel in the
    solution image from one iteration of the Partial Differential Equation
    (PDE) solver to the next.

    Subclasses of FiniteDifferenceImageFilter (solvers) call the
    ComputeUpdate() method of this class to compute $ \\Delta
    u^n_{\\mathbf{i}} $ at each $ \\mathbf{i} $ in $ u $. Because the
    size of the time step for each iteration of the p.d.e. solution
    depends on the particular calculations done, this function object is
    also responsible for computing that time step (see
    ComputeGlobalTimeStep() ). How to use this class
    FiniteDifferenceFunction must be subclassed to add functionality for
    ComputeUpdate, ComputeGlobalTimeStep, and
    Get/ReleaseGlobalDataPointer. A note on thread safety. The
    ComputeUpdate() methods of this filter are declared as const to
    enforce thread-safety during execution of FiniteDifferenceImageFilter
    solver algorithms. The InitializeIteration() method is intended to
    provide a safe way to modify the state of the object between threaded
    calculations of solvers. Todo Possibly subclass this object from
    Function. Stumbling blocks here are the specialized api of
    FiniteDifferenceFunction. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    InitializeIteration = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF23_InitializeIteration)
    ComputeUpdate = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF23_ComputeUpdate)
    SetRadius = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF23_SetRadius)
    GetRadius = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF23_GetRadius)
    SetScaleCoefficients = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF23_SetScaleCoefficients)
    GetScaleCoefficients = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF23_GetScaleCoefficients)
    ComputeNeighborhoodScales = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF23_ComputeNeighborhoodScales)
    ComputeGlobalTimeStep = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF23_ComputeGlobalTimeStep)
    GetGlobalDataPointer = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF23_GetGlobalDataPointer)
    ReleaseGlobalDataPointer = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF23_ReleaseGlobalDataPointer)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionIVF23
    cast = _swig_new_static_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF23_cast)

# Register itkFiniteDifferenceFunctionIVF23 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF23_swigregister(itkFiniteDifferenceFunctionIVF23)
itkFiniteDifferenceFunctionIVF23_cast = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF23_cast

class itkFiniteDifferenceFunctionIVF32(itk.ITKCommonBasePython.itkLightObject):
    r"""


    This class is a component object of the finite difference solver
    hierarchy (see FiniteDifferenceImageFilter). It defines a generic
    interface for a function object that computes a single scalar value
    from a neighborhood of values. Examples of the application of this
    class are the various flavors of AnisotropicDiffusionFunction and
    LevelSetFunction objects.

    These functions calculate the incremental change at a pixel in the
    solution image from one iteration of the Partial Differential Equation
    (PDE) solver to the next.

    Subclasses of FiniteDifferenceImageFilter (solvers) call the
    ComputeUpdate() method of this class to compute $ \\Delta
    u^n_{\\mathbf{i}} $ at each $ \\mathbf{i} $ in $ u $. Because the
    size of the time step for each iteration of the p.d.e. solution
    depends on the particular calculations done, this function object is
    also responsible for computing that time step (see
    ComputeGlobalTimeStep() ). How to use this class
    FiniteDifferenceFunction must be subclassed to add functionality for
    ComputeUpdate, ComputeGlobalTimeStep, and
    Get/ReleaseGlobalDataPointer. A note on thread safety. The
    ComputeUpdate() methods of this filter are declared as const to
    enforce thread-safety during execution of FiniteDifferenceImageFilter
    solver algorithms. The InitializeIteration() method is intended to
    provide a safe way to modify the state of the object between threaded
    calculations of solvers. Todo Possibly subclass this object from
    Function. Stumbling blocks here are the specialized api of
    FiniteDifferenceFunction. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    InitializeIteration = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF32_InitializeIteration)
    ComputeUpdate = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF32_ComputeUpdate)
    SetRadius = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF32_SetRadius)
    GetRadius = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF32_GetRadius)
    SetScaleCoefficients = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF32_SetScaleCoefficients)
    GetScaleCoefficients = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF32_GetScaleCoefficients)
    ComputeNeighborhoodScales = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF32_ComputeNeighborhoodScales)
    ComputeGlobalTimeStep = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF32_ComputeGlobalTimeStep)
    GetGlobalDataPointer = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF32_GetGlobalDataPointer)
    ReleaseGlobalDataPointer = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF32_ReleaseGlobalDataPointer)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionIVF32
    cast = _swig_new_static_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF32_cast)

# Register itkFiniteDifferenceFunctionIVF32 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF32_swigregister(itkFiniteDifferenceFunctionIVF32)
itkFiniteDifferenceFunctionIVF32_cast = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF32_cast

class itkFiniteDifferenceFunctionIVF33(itk.ITKCommonBasePython.itkLightObject):
    r"""


    This class is a component object of the finite difference solver
    hierarchy (see FiniteDifferenceImageFilter). It defines a generic
    interface for a function object that computes a single scalar value
    from a neighborhood of values. Examples of the application of this
    class are the various flavors of AnisotropicDiffusionFunction and
    LevelSetFunction objects.

    These functions calculate the incremental change at a pixel in the
    solution image from one iteration of the Partial Differential Equation
    (PDE) solver to the next.

    Subclasses of FiniteDifferenceImageFilter (solvers) call the
    ComputeUpdate() method of this class to compute $ \\Delta
    u^n_{\\mathbf{i}} $ at each $ \\mathbf{i} $ in $ u $. Because the
    size of the time step for each iteration of the p.d.e. solution
    depends on the particular calculations done, this function object is
    also responsible for computing that time step (see
    ComputeGlobalTimeStep() ). How to use this class
    FiniteDifferenceFunction must be subclassed to add functionality for
    ComputeUpdate, ComputeGlobalTimeStep, and
    Get/ReleaseGlobalDataPointer. A note on thread safety. The
    ComputeUpdate() methods of this filter are declared as const to
    enforce thread-safety during execution of FiniteDifferenceImageFilter
    solver algorithms. The InitializeIteration() method is intended to
    provide a safe way to modify the state of the object between threaded
    calculations of solvers. Todo Possibly subclass this object from
    Function. Stumbling blocks here are the specialized api of
    FiniteDifferenceFunction. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    InitializeIteration = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_InitializeIteration)
    ComputeUpdate = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_ComputeUpdate)
    SetRadius = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_SetRadius)
    GetRadius = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_GetRadius)
    SetScaleCoefficients = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_SetScaleCoefficients)
    GetScaleCoefficients = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_GetScaleCoefficients)
    ComputeNeighborhoodScales = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_ComputeNeighborhoodScales)
    ComputeGlobalTimeStep = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_ComputeGlobalTimeStep)
    GetGlobalDataPointer = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_GetGlobalDataPointer)
    ReleaseGlobalDataPointer = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_ReleaseGlobalDataPointer)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionIVF33
    cast = _swig_new_static_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_cast)

# Register itkFiniteDifferenceFunctionIVF33 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_swigregister(itkFiniteDifferenceFunctionIVF33)
itkFiniteDifferenceFunctionIVF33_cast = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_cast

class itkFiniteDifferenceFunctionIVF42(itk.ITKCommonBasePython.itkLightObject):
    r"""


    This class is a component object of the finite difference solver
    hierarchy (see FiniteDifferenceImageFilter). It defines a generic
    interface for a function object that computes a single scalar value
    from a neighborhood of values. Examples of the application of this
    class are the various flavors of AnisotropicDiffusionFunction and
    LevelSetFunction objects.

    These functions calculate the incremental change at a pixel in the
    solution image from one iteration of the Partial Differential Equation
    (PDE) solver to the next.

    Subclasses of FiniteDifferenceImageFilter (solvers) call the
    ComputeUpdate() method of this class to compute $ \\Delta
    u^n_{\\mathbf{i}} $ at each $ \\mathbf{i} $ in $ u $. Because the
    size of the time step for each iteration of the p.d.e. solution
    depends on the particular calculations done, this function object is
    also responsible for computing that time step (see
    ComputeGlobalTimeStep() ). How to use this class
    FiniteDifferenceFunction must be subclassed to add functionality for
    ComputeUpdate, ComputeGlobalTimeStep, and
    Get/ReleaseGlobalDataPointer. A note on thread safety. The
    ComputeUpdate() methods of this filter are declared as const to
    enforce thread-safety during execution of FiniteDifferenceImageFilter
    solver algorithms. The InitializeIteration() method is intended to
    provide a safe way to modify the state of the object between threaded
    calculations of solvers. Todo Possibly subclass this object from
    Function. Stumbling blocks here are the specialized api of
    FiniteDifferenceFunction. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    InitializeIteration = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF42_InitializeIteration)
    ComputeUpdate = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF42_ComputeUpdate)
    SetRadius = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF42_SetRadius)
    GetRadius = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF42_GetRadius)
    SetScaleCoefficients = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF42_SetScaleCoefficients)
    GetScaleCoefficients = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF42_GetScaleCoefficients)
    ComputeNeighborhoodScales = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF42_ComputeNeighborhoodScales)
    ComputeGlobalTimeStep = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF42_ComputeGlobalTimeStep)
    GetGlobalDataPointer = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF42_GetGlobalDataPointer)
    ReleaseGlobalDataPointer = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF42_ReleaseGlobalDataPointer)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionIVF42
    cast = _swig_new_static_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF42_cast)

# Register itkFiniteDifferenceFunctionIVF42 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF42_swigregister(itkFiniteDifferenceFunctionIVF42)
itkFiniteDifferenceFunctionIVF42_cast = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF42_cast

class itkFiniteDifferenceFunctionIVF43(itk.ITKCommonBasePython.itkLightObject):
    r"""


    This class is a component object of the finite difference solver
    hierarchy (see FiniteDifferenceImageFilter). It defines a generic
    interface for a function object that computes a single scalar value
    from a neighborhood of values. Examples of the application of this
    class are the various flavors of AnisotropicDiffusionFunction and
    LevelSetFunction objects.

    These functions calculate the incremental change at a pixel in the
    solution image from one iteration of the Partial Differential Equation
    (PDE) solver to the next.

    Subclasses of FiniteDifferenceImageFilter (solvers) call the
    ComputeUpdate() method of this class to compute $ \\Delta
    u^n_{\\mathbf{i}} $ at each $ \\mathbf{i} $ in $ u $. Because the
    size of the time step for each iteration of the p.d.e. solution
    depends on the particular calculations done, this function object is
    also responsible for computing that time step (see
    ComputeGlobalTimeStep() ). How to use this class
    FiniteDifferenceFunction must be subclassed to add functionality for
    ComputeUpdate, ComputeGlobalTimeStep, and
    Get/ReleaseGlobalDataPointer. A note on thread safety. The
    ComputeUpdate() methods of this filter are declared as const to
    enforce thread-safety during execution of FiniteDifferenceImageFilter
    solver algorithms. The InitializeIteration() method is intended to
    provide a safe way to modify the state of the object between threaded
    calculations of solvers. Todo Possibly subclass this object from
    Function. Stumbling blocks here are the specialized api of
    FiniteDifferenceFunction. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    InitializeIteration = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF43_InitializeIteration)
    ComputeUpdate = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF43_ComputeUpdate)
    SetRadius = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF43_SetRadius)
    GetRadius = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF43_GetRadius)
    SetScaleCoefficients = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF43_SetScaleCoefficients)
    GetScaleCoefficients = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF43_GetScaleCoefficients)
    ComputeNeighborhoodScales = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF43_ComputeNeighborhoodScales)
    ComputeGlobalTimeStep = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF43_ComputeGlobalTimeStep)
    GetGlobalDataPointer = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF43_GetGlobalDataPointer)
    ReleaseGlobalDataPointer = _swig_new_instance_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF43_ReleaseGlobalDataPointer)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionIVF43
    cast = _swig_new_static_method(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF43_cast)

# Register itkFiniteDifferenceFunctionIVF43 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF43_swigregister(itkFiniteDifferenceFunctionIVF43)
itkFiniteDifferenceFunctionIVF43_cast = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF43_cast



