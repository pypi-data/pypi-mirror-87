# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageComposePython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkComposeImageFilterPython
else:
    import _itkComposeImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkComposeImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkComposeImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkImageToImageFilterBPython
import itk.itkVectorImagePython
import itk.itkImagePython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython

def itkComposeImageFilterID2VID2_New():
    return itkComposeImageFilterID2VID2.New()

class itkComposeImageFilterID2VID2(itk.itkImageToImageFilterBPython.itkImageToImageFilterID2VID2):
    r"""


    ComposeImageFilter combine several scalar images into a multicomponent
    image.

    ComposeImageFilter combine several scalar images into an itk::Image of
    vector pixel (itk::Vector, itk::RGBPixel, ...), of std::complex pixel,
    or in an itk::VectorImage.

    Inputs and Usage  All input images are expected to have the same
    template parameters and have the same size and origin.

    See:  VectorImage

    See:  VectorIndexSelectionCastImageFilter
    example{Filtering/ImageCompose/CreateVectorImageFromScalarImages,C
    reate Vector Image From Scalar Images}  example{Filtering/ImageCompose
    /ComposeVectorFromThreeScalarImages,Compose Vector From Three Scalar
    Images}  example{Filtering/ImageCompose/ConvertRealAndImaginaryToCompl
    exImage,Convert Real And Imaginary Images To Complex Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterID2VID2___New_orig__)
    Clone = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterID2VID2_Clone)
    SetInput1 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterID2VID2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterID2VID2_SetInput2)
    SetInput3 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterID2VID2_SetInput3)
    InputCovertibleToOutputCheck = _itkComposeImageFilterPython.itkComposeImageFilterID2VID2_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkComposeImageFilterPython.delete_itkComposeImageFilterID2VID2
    cast = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterID2VID2_cast)

    def New(*args, **kargs):
        """New() -> itkComposeImageFilterID2VID2

        Create a new object of the class itkComposeImageFilterID2VID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComposeImageFilterID2VID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComposeImageFilterID2VID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComposeImageFilterID2VID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComposeImageFilterID2VID2 in _itkComposeImageFilterPython:
_itkComposeImageFilterPython.itkComposeImageFilterID2VID2_swigregister(itkComposeImageFilterID2VID2)
itkComposeImageFilterID2VID2___New_orig__ = _itkComposeImageFilterPython.itkComposeImageFilterID2VID2___New_orig__
itkComposeImageFilterID2VID2_cast = _itkComposeImageFilterPython.itkComposeImageFilterID2VID2_cast


def itkComposeImageFilterID3VID3_New():
    return itkComposeImageFilterID3VID3.New()

class itkComposeImageFilterID3VID3(itk.itkImageToImageFilterBPython.itkImageToImageFilterID3VID3):
    r"""


    ComposeImageFilter combine several scalar images into a multicomponent
    image.

    ComposeImageFilter combine several scalar images into an itk::Image of
    vector pixel (itk::Vector, itk::RGBPixel, ...), of std::complex pixel,
    or in an itk::VectorImage.

    Inputs and Usage  All input images are expected to have the same
    template parameters and have the same size and origin.

    See:  VectorImage

    See:  VectorIndexSelectionCastImageFilter
    example{Filtering/ImageCompose/CreateVectorImageFromScalarImages,C
    reate Vector Image From Scalar Images}  example{Filtering/ImageCompose
    /ComposeVectorFromThreeScalarImages,Compose Vector From Three Scalar
    Images}  example{Filtering/ImageCompose/ConvertRealAndImaginaryToCompl
    exImage,Convert Real And Imaginary Images To Complex Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterID3VID3___New_orig__)
    Clone = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterID3VID3_Clone)
    SetInput1 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterID3VID3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterID3VID3_SetInput2)
    SetInput3 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterID3VID3_SetInput3)
    InputCovertibleToOutputCheck = _itkComposeImageFilterPython.itkComposeImageFilterID3VID3_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkComposeImageFilterPython.delete_itkComposeImageFilterID3VID3
    cast = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterID3VID3_cast)

    def New(*args, **kargs):
        """New() -> itkComposeImageFilterID3VID3

        Create a new object of the class itkComposeImageFilterID3VID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComposeImageFilterID3VID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComposeImageFilterID3VID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComposeImageFilterID3VID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComposeImageFilterID3VID3 in _itkComposeImageFilterPython:
_itkComposeImageFilterPython.itkComposeImageFilterID3VID3_swigregister(itkComposeImageFilterID3VID3)
itkComposeImageFilterID3VID3___New_orig__ = _itkComposeImageFilterPython.itkComposeImageFilterID3VID3___New_orig__
itkComposeImageFilterID3VID3_cast = _itkComposeImageFilterPython.itkComposeImageFilterID3VID3_cast


def itkComposeImageFilterIF2ICF2_New():
    return itkComposeImageFilterIF2ICF2.New()

class itkComposeImageFilterIF2ICF2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF2ICF2):
    r"""


    ComposeImageFilter combine several scalar images into a multicomponent
    image.

    ComposeImageFilter combine several scalar images into an itk::Image of
    vector pixel (itk::Vector, itk::RGBPixel, ...), of std::complex pixel,
    or in an itk::VectorImage.

    Inputs and Usage  All input images are expected to have the same
    template parameters and have the same size and origin.

    See:  VectorImage

    See:  VectorIndexSelectionCastImageFilter
    example{Filtering/ImageCompose/CreateVectorImageFromScalarImages,C
    reate Vector Image From Scalar Images}  example{Filtering/ImageCompose
    /ComposeVectorFromThreeScalarImages,Compose Vector From Three Scalar
    Images}  example{Filtering/ImageCompose/ConvertRealAndImaginaryToCompl
    exImage,Convert Real And Imaginary Images To Complex Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterIF2ICF2___New_orig__)
    Clone = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF2ICF2_Clone)
    SetInput1 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF2ICF2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF2ICF2_SetInput2)
    SetInput3 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF2ICF2_SetInput3)
    InputCovertibleToOutputCheck = _itkComposeImageFilterPython.itkComposeImageFilterIF2ICF2_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkComposeImageFilterPython.delete_itkComposeImageFilterIF2ICF2
    cast = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterIF2ICF2_cast)

    def New(*args, **kargs):
        """New() -> itkComposeImageFilterIF2ICF2

        Create a new object of the class itkComposeImageFilterIF2ICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComposeImageFilterIF2ICF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComposeImageFilterIF2ICF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComposeImageFilterIF2ICF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComposeImageFilterIF2ICF2 in _itkComposeImageFilterPython:
_itkComposeImageFilterPython.itkComposeImageFilterIF2ICF2_swigregister(itkComposeImageFilterIF2ICF2)
itkComposeImageFilterIF2ICF2___New_orig__ = _itkComposeImageFilterPython.itkComposeImageFilterIF2ICF2___New_orig__
itkComposeImageFilterIF2ICF2_cast = _itkComposeImageFilterPython.itkComposeImageFilterIF2ICF2_cast


def itkComposeImageFilterIF2ICVF22_New():
    return itkComposeImageFilterIF2ICVF22.New()

class itkComposeImageFilterIF2ICVF22(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF22):
    r"""


    ComposeImageFilter combine several scalar images into a multicomponent
    image.

    ComposeImageFilter combine several scalar images into an itk::Image of
    vector pixel (itk::Vector, itk::RGBPixel, ...), of std::complex pixel,
    or in an itk::VectorImage.

    Inputs and Usage  All input images are expected to have the same
    template parameters and have the same size and origin.

    See:  VectorImage

    See:  VectorIndexSelectionCastImageFilter
    example{Filtering/ImageCompose/CreateVectorImageFromScalarImages,C
    reate Vector Image From Scalar Images}  example{Filtering/ImageCompose
    /ComposeVectorFromThreeScalarImages,Compose Vector From Three Scalar
    Images}  example{Filtering/ImageCompose/ConvertRealAndImaginaryToCompl
    exImage,Convert Real And Imaginary Images To Complex Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterIF2ICVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF2ICVF22_Clone)
    SetInput1 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF2ICVF22_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF2ICVF22_SetInput2)
    SetInput3 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF2ICVF22_SetInput3)
    InputCovertibleToOutputCheck = _itkComposeImageFilterPython.itkComposeImageFilterIF2ICVF22_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkComposeImageFilterPython.delete_itkComposeImageFilterIF2ICVF22
    cast = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterIF2ICVF22_cast)

    def New(*args, **kargs):
        """New() -> itkComposeImageFilterIF2ICVF22

        Create a new object of the class itkComposeImageFilterIF2ICVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComposeImageFilterIF2ICVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComposeImageFilterIF2ICVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComposeImageFilterIF2ICVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComposeImageFilterIF2ICVF22 in _itkComposeImageFilterPython:
_itkComposeImageFilterPython.itkComposeImageFilterIF2ICVF22_swigregister(itkComposeImageFilterIF2ICVF22)
itkComposeImageFilterIF2ICVF22___New_orig__ = _itkComposeImageFilterPython.itkComposeImageFilterIF2ICVF22___New_orig__
itkComposeImageFilterIF2ICVF22_cast = _itkComposeImageFilterPython.itkComposeImageFilterIF2ICVF22_cast


def itkComposeImageFilterIF2ICVF32_New():
    return itkComposeImageFilterIF2ICVF32.New()

class itkComposeImageFilterIF2ICVF32(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF32):
    r"""


    ComposeImageFilter combine several scalar images into a multicomponent
    image.

    ComposeImageFilter combine several scalar images into an itk::Image of
    vector pixel (itk::Vector, itk::RGBPixel, ...), of std::complex pixel,
    or in an itk::VectorImage.

    Inputs and Usage  All input images are expected to have the same
    template parameters and have the same size and origin.

    See:  VectorImage

    See:  VectorIndexSelectionCastImageFilter
    example{Filtering/ImageCompose/CreateVectorImageFromScalarImages,C
    reate Vector Image From Scalar Images}  example{Filtering/ImageCompose
    /ComposeVectorFromThreeScalarImages,Compose Vector From Three Scalar
    Images}  example{Filtering/ImageCompose/ConvertRealAndImaginaryToCompl
    exImage,Convert Real And Imaginary Images To Complex Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterIF2ICVF32___New_orig__)
    Clone = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF2ICVF32_Clone)
    SetInput1 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF2ICVF32_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF2ICVF32_SetInput2)
    SetInput3 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF2ICVF32_SetInput3)
    InputCovertibleToOutputCheck = _itkComposeImageFilterPython.itkComposeImageFilterIF2ICVF32_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkComposeImageFilterPython.delete_itkComposeImageFilterIF2ICVF32
    cast = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterIF2ICVF32_cast)

    def New(*args, **kargs):
        """New() -> itkComposeImageFilterIF2ICVF32

        Create a new object of the class itkComposeImageFilterIF2ICVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComposeImageFilterIF2ICVF32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComposeImageFilterIF2ICVF32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComposeImageFilterIF2ICVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComposeImageFilterIF2ICVF32 in _itkComposeImageFilterPython:
_itkComposeImageFilterPython.itkComposeImageFilterIF2ICVF32_swigregister(itkComposeImageFilterIF2ICVF32)
itkComposeImageFilterIF2ICVF32___New_orig__ = _itkComposeImageFilterPython.itkComposeImageFilterIF2ICVF32___New_orig__
itkComposeImageFilterIF2ICVF32_cast = _itkComposeImageFilterPython.itkComposeImageFilterIF2ICVF32_cast


def itkComposeImageFilterIF2ICVF42_New():
    return itkComposeImageFilterIF2ICVF42.New()

class itkComposeImageFilterIF2ICVF42(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF42):
    r"""


    ComposeImageFilter combine several scalar images into a multicomponent
    image.

    ComposeImageFilter combine several scalar images into an itk::Image of
    vector pixel (itk::Vector, itk::RGBPixel, ...), of std::complex pixel,
    or in an itk::VectorImage.

    Inputs and Usage  All input images are expected to have the same
    template parameters and have the same size and origin.

    See:  VectorImage

    See:  VectorIndexSelectionCastImageFilter
    example{Filtering/ImageCompose/CreateVectorImageFromScalarImages,C
    reate Vector Image From Scalar Images}  example{Filtering/ImageCompose
    /ComposeVectorFromThreeScalarImages,Compose Vector From Three Scalar
    Images}  example{Filtering/ImageCompose/ConvertRealAndImaginaryToCompl
    exImage,Convert Real And Imaginary Images To Complex Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterIF2ICVF42___New_orig__)
    Clone = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF2ICVF42_Clone)
    SetInput1 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF2ICVF42_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF2ICVF42_SetInput2)
    SetInput3 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF2ICVF42_SetInput3)
    InputCovertibleToOutputCheck = _itkComposeImageFilterPython.itkComposeImageFilterIF2ICVF42_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkComposeImageFilterPython.delete_itkComposeImageFilterIF2ICVF42
    cast = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterIF2ICVF42_cast)

    def New(*args, **kargs):
        """New() -> itkComposeImageFilterIF2ICVF42

        Create a new object of the class itkComposeImageFilterIF2ICVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComposeImageFilterIF2ICVF42.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComposeImageFilterIF2ICVF42.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComposeImageFilterIF2ICVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComposeImageFilterIF2ICVF42 in _itkComposeImageFilterPython:
_itkComposeImageFilterPython.itkComposeImageFilterIF2ICVF42_swigregister(itkComposeImageFilterIF2ICVF42)
itkComposeImageFilterIF2ICVF42___New_orig__ = _itkComposeImageFilterPython.itkComposeImageFilterIF2ICVF42___New_orig__
itkComposeImageFilterIF2ICVF42_cast = _itkComposeImageFilterPython.itkComposeImageFilterIF2ICVF42_cast


def itkComposeImageFilterIF2IVF22_New():
    return itkComposeImageFilterIF2IVF22.New()

class itkComposeImageFilterIF2IVF22(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF22):
    r"""


    ComposeImageFilter combine several scalar images into a multicomponent
    image.

    ComposeImageFilter combine several scalar images into an itk::Image of
    vector pixel (itk::Vector, itk::RGBPixel, ...), of std::complex pixel,
    or in an itk::VectorImage.

    Inputs and Usage  All input images are expected to have the same
    template parameters and have the same size and origin.

    See:  VectorImage

    See:  VectorIndexSelectionCastImageFilter
    example{Filtering/ImageCompose/CreateVectorImageFromScalarImages,C
    reate Vector Image From Scalar Images}  example{Filtering/ImageCompose
    /ComposeVectorFromThreeScalarImages,Compose Vector From Three Scalar
    Images}  example{Filtering/ImageCompose/ConvertRealAndImaginaryToCompl
    exImage,Convert Real And Imaginary Images To Complex Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterIF2IVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF2IVF22_Clone)
    SetInput1 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF2IVF22_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF2IVF22_SetInput2)
    SetInput3 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF2IVF22_SetInput3)
    InputCovertibleToOutputCheck = _itkComposeImageFilterPython.itkComposeImageFilterIF2IVF22_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkComposeImageFilterPython.delete_itkComposeImageFilterIF2IVF22
    cast = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterIF2IVF22_cast)

    def New(*args, **kargs):
        """New() -> itkComposeImageFilterIF2IVF22

        Create a new object of the class itkComposeImageFilterIF2IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComposeImageFilterIF2IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComposeImageFilterIF2IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComposeImageFilterIF2IVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComposeImageFilterIF2IVF22 in _itkComposeImageFilterPython:
_itkComposeImageFilterPython.itkComposeImageFilterIF2IVF22_swigregister(itkComposeImageFilterIF2IVF22)
itkComposeImageFilterIF2IVF22___New_orig__ = _itkComposeImageFilterPython.itkComposeImageFilterIF2IVF22___New_orig__
itkComposeImageFilterIF2IVF22_cast = _itkComposeImageFilterPython.itkComposeImageFilterIF2IVF22_cast


def itkComposeImageFilterIF2IVF32_New():
    return itkComposeImageFilterIF2IVF32.New()

class itkComposeImageFilterIF2IVF32(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF32):
    r"""


    ComposeImageFilter combine several scalar images into a multicomponent
    image.

    ComposeImageFilter combine several scalar images into an itk::Image of
    vector pixel (itk::Vector, itk::RGBPixel, ...), of std::complex pixel,
    or in an itk::VectorImage.

    Inputs and Usage  All input images are expected to have the same
    template parameters and have the same size and origin.

    See:  VectorImage

    See:  VectorIndexSelectionCastImageFilter
    example{Filtering/ImageCompose/CreateVectorImageFromScalarImages,C
    reate Vector Image From Scalar Images}  example{Filtering/ImageCompose
    /ComposeVectorFromThreeScalarImages,Compose Vector From Three Scalar
    Images}  example{Filtering/ImageCompose/ConvertRealAndImaginaryToCompl
    exImage,Convert Real And Imaginary Images To Complex Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterIF2IVF32___New_orig__)
    Clone = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF2IVF32_Clone)
    SetInput1 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF2IVF32_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF2IVF32_SetInput2)
    SetInput3 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF2IVF32_SetInput3)
    InputCovertibleToOutputCheck = _itkComposeImageFilterPython.itkComposeImageFilterIF2IVF32_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkComposeImageFilterPython.delete_itkComposeImageFilterIF2IVF32
    cast = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterIF2IVF32_cast)

    def New(*args, **kargs):
        """New() -> itkComposeImageFilterIF2IVF32

        Create a new object of the class itkComposeImageFilterIF2IVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComposeImageFilterIF2IVF32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComposeImageFilterIF2IVF32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComposeImageFilterIF2IVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComposeImageFilterIF2IVF32 in _itkComposeImageFilterPython:
_itkComposeImageFilterPython.itkComposeImageFilterIF2IVF32_swigregister(itkComposeImageFilterIF2IVF32)
itkComposeImageFilterIF2IVF32___New_orig__ = _itkComposeImageFilterPython.itkComposeImageFilterIF2IVF32___New_orig__
itkComposeImageFilterIF2IVF32_cast = _itkComposeImageFilterPython.itkComposeImageFilterIF2IVF32_cast


def itkComposeImageFilterIF2IVF42_New():
    return itkComposeImageFilterIF2IVF42.New()

class itkComposeImageFilterIF2IVF42(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF42):
    r"""


    ComposeImageFilter combine several scalar images into a multicomponent
    image.

    ComposeImageFilter combine several scalar images into an itk::Image of
    vector pixel (itk::Vector, itk::RGBPixel, ...), of std::complex pixel,
    or in an itk::VectorImage.

    Inputs and Usage  All input images are expected to have the same
    template parameters and have the same size and origin.

    See:  VectorImage

    See:  VectorIndexSelectionCastImageFilter
    example{Filtering/ImageCompose/CreateVectorImageFromScalarImages,C
    reate Vector Image From Scalar Images}  example{Filtering/ImageCompose
    /ComposeVectorFromThreeScalarImages,Compose Vector From Three Scalar
    Images}  example{Filtering/ImageCompose/ConvertRealAndImaginaryToCompl
    exImage,Convert Real And Imaginary Images To Complex Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterIF2IVF42___New_orig__)
    Clone = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF2IVF42_Clone)
    SetInput1 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF2IVF42_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF2IVF42_SetInput2)
    SetInput3 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF2IVF42_SetInput3)
    InputCovertibleToOutputCheck = _itkComposeImageFilterPython.itkComposeImageFilterIF2IVF42_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkComposeImageFilterPython.delete_itkComposeImageFilterIF2IVF42
    cast = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterIF2IVF42_cast)

    def New(*args, **kargs):
        """New() -> itkComposeImageFilterIF2IVF42

        Create a new object of the class itkComposeImageFilterIF2IVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComposeImageFilterIF2IVF42.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComposeImageFilterIF2IVF42.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComposeImageFilterIF2IVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComposeImageFilterIF2IVF42 in _itkComposeImageFilterPython:
_itkComposeImageFilterPython.itkComposeImageFilterIF2IVF42_swigregister(itkComposeImageFilterIF2IVF42)
itkComposeImageFilterIF2IVF42___New_orig__ = _itkComposeImageFilterPython.itkComposeImageFilterIF2IVF42___New_orig__
itkComposeImageFilterIF2IVF42_cast = _itkComposeImageFilterPython.itkComposeImageFilterIF2IVF42_cast


def itkComposeImageFilterIF2VIF2_New():
    return itkComposeImageFilterIF2VIF2.New()

class itkComposeImageFilterIF2VIF2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF2VIF2):
    r"""


    ComposeImageFilter combine several scalar images into a multicomponent
    image.

    ComposeImageFilter combine several scalar images into an itk::Image of
    vector pixel (itk::Vector, itk::RGBPixel, ...), of std::complex pixel,
    or in an itk::VectorImage.

    Inputs and Usage  All input images are expected to have the same
    template parameters and have the same size and origin.

    See:  VectorImage

    See:  VectorIndexSelectionCastImageFilter
    example{Filtering/ImageCompose/CreateVectorImageFromScalarImages,C
    reate Vector Image From Scalar Images}  example{Filtering/ImageCompose
    /ComposeVectorFromThreeScalarImages,Compose Vector From Three Scalar
    Images}  example{Filtering/ImageCompose/ConvertRealAndImaginaryToCompl
    exImage,Convert Real And Imaginary Images To Complex Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterIF2VIF2___New_orig__)
    Clone = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF2VIF2_Clone)
    SetInput1 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF2VIF2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF2VIF2_SetInput2)
    SetInput3 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF2VIF2_SetInput3)
    InputCovertibleToOutputCheck = _itkComposeImageFilterPython.itkComposeImageFilterIF2VIF2_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkComposeImageFilterPython.delete_itkComposeImageFilterIF2VIF2
    cast = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterIF2VIF2_cast)

    def New(*args, **kargs):
        """New() -> itkComposeImageFilterIF2VIF2

        Create a new object of the class itkComposeImageFilterIF2VIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComposeImageFilterIF2VIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComposeImageFilterIF2VIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComposeImageFilterIF2VIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComposeImageFilterIF2VIF2 in _itkComposeImageFilterPython:
_itkComposeImageFilterPython.itkComposeImageFilterIF2VIF2_swigregister(itkComposeImageFilterIF2VIF2)
itkComposeImageFilterIF2VIF2___New_orig__ = _itkComposeImageFilterPython.itkComposeImageFilterIF2VIF2___New_orig__
itkComposeImageFilterIF2VIF2_cast = _itkComposeImageFilterPython.itkComposeImageFilterIF2VIF2_cast


def itkComposeImageFilterIF3ICF3_New():
    return itkComposeImageFilterIF3ICF3.New()

class itkComposeImageFilterIF3ICF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF3ICF3):
    r"""


    ComposeImageFilter combine several scalar images into a multicomponent
    image.

    ComposeImageFilter combine several scalar images into an itk::Image of
    vector pixel (itk::Vector, itk::RGBPixel, ...), of std::complex pixel,
    or in an itk::VectorImage.

    Inputs and Usage  All input images are expected to have the same
    template parameters and have the same size and origin.

    See:  VectorImage

    See:  VectorIndexSelectionCastImageFilter
    example{Filtering/ImageCompose/CreateVectorImageFromScalarImages,C
    reate Vector Image From Scalar Images}  example{Filtering/ImageCompose
    /ComposeVectorFromThreeScalarImages,Compose Vector From Three Scalar
    Images}  example{Filtering/ImageCompose/ConvertRealAndImaginaryToCompl
    exImage,Convert Real And Imaginary Images To Complex Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterIF3ICF3___New_orig__)
    Clone = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF3ICF3_Clone)
    SetInput1 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF3ICF3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF3ICF3_SetInput2)
    SetInput3 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF3ICF3_SetInput3)
    InputCovertibleToOutputCheck = _itkComposeImageFilterPython.itkComposeImageFilterIF3ICF3_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkComposeImageFilterPython.delete_itkComposeImageFilterIF3ICF3
    cast = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterIF3ICF3_cast)

    def New(*args, **kargs):
        """New() -> itkComposeImageFilterIF3ICF3

        Create a new object of the class itkComposeImageFilterIF3ICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComposeImageFilterIF3ICF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComposeImageFilterIF3ICF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComposeImageFilterIF3ICF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComposeImageFilterIF3ICF3 in _itkComposeImageFilterPython:
_itkComposeImageFilterPython.itkComposeImageFilterIF3ICF3_swigregister(itkComposeImageFilterIF3ICF3)
itkComposeImageFilterIF3ICF3___New_orig__ = _itkComposeImageFilterPython.itkComposeImageFilterIF3ICF3___New_orig__
itkComposeImageFilterIF3ICF3_cast = _itkComposeImageFilterPython.itkComposeImageFilterIF3ICF3_cast


def itkComposeImageFilterIF3ICVF23_New():
    return itkComposeImageFilterIF3ICVF23.New()

class itkComposeImageFilterIF3ICVF23(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF23):
    r"""


    ComposeImageFilter combine several scalar images into a multicomponent
    image.

    ComposeImageFilter combine several scalar images into an itk::Image of
    vector pixel (itk::Vector, itk::RGBPixel, ...), of std::complex pixel,
    or in an itk::VectorImage.

    Inputs and Usage  All input images are expected to have the same
    template parameters and have the same size and origin.

    See:  VectorImage

    See:  VectorIndexSelectionCastImageFilter
    example{Filtering/ImageCompose/CreateVectorImageFromScalarImages,C
    reate Vector Image From Scalar Images}  example{Filtering/ImageCompose
    /ComposeVectorFromThreeScalarImages,Compose Vector From Three Scalar
    Images}  example{Filtering/ImageCompose/ConvertRealAndImaginaryToCompl
    exImage,Convert Real And Imaginary Images To Complex Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterIF3ICVF23___New_orig__)
    Clone = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF3ICVF23_Clone)
    SetInput1 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF3ICVF23_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF3ICVF23_SetInput2)
    SetInput3 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF3ICVF23_SetInput3)
    InputCovertibleToOutputCheck = _itkComposeImageFilterPython.itkComposeImageFilterIF3ICVF23_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkComposeImageFilterPython.delete_itkComposeImageFilterIF3ICVF23
    cast = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterIF3ICVF23_cast)

    def New(*args, **kargs):
        """New() -> itkComposeImageFilterIF3ICVF23

        Create a new object of the class itkComposeImageFilterIF3ICVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComposeImageFilterIF3ICVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComposeImageFilterIF3ICVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComposeImageFilterIF3ICVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComposeImageFilterIF3ICVF23 in _itkComposeImageFilterPython:
_itkComposeImageFilterPython.itkComposeImageFilterIF3ICVF23_swigregister(itkComposeImageFilterIF3ICVF23)
itkComposeImageFilterIF3ICVF23___New_orig__ = _itkComposeImageFilterPython.itkComposeImageFilterIF3ICVF23___New_orig__
itkComposeImageFilterIF3ICVF23_cast = _itkComposeImageFilterPython.itkComposeImageFilterIF3ICVF23_cast


def itkComposeImageFilterIF3ICVF33_New():
    return itkComposeImageFilterIF3ICVF33.New()

class itkComposeImageFilterIF3ICVF33(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF33):
    r"""


    ComposeImageFilter combine several scalar images into a multicomponent
    image.

    ComposeImageFilter combine several scalar images into an itk::Image of
    vector pixel (itk::Vector, itk::RGBPixel, ...), of std::complex pixel,
    or in an itk::VectorImage.

    Inputs and Usage  All input images are expected to have the same
    template parameters and have the same size and origin.

    See:  VectorImage

    See:  VectorIndexSelectionCastImageFilter
    example{Filtering/ImageCompose/CreateVectorImageFromScalarImages,C
    reate Vector Image From Scalar Images}  example{Filtering/ImageCompose
    /ComposeVectorFromThreeScalarImages,Compose Vector From Three Scalar
    Images}  example{Filtering/ImageCompose/ConvertRealAndImaginaryToCompl
    exImage,Convert Real And Imaginary Images To Complex Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterIF3ICVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF3ICVF33_Clone)
    SetInput1 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF3ICVF33_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF3ICVF33_SetInput2)
    SetInput3 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF3ICVF33_SetInput3)
    InputCovertibleToOutputCheck = _itkComposeImageFilterPython.itkComposeImageFilterIF3ICVF33_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkComposeImageFilterPython.delete_itkComposeImageFilterIF3ICVF33
    cast = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterIF3ICVF33_cast)

    def New(*args, **kargs):
        """New() -> itkComposeImageFilterIF3ICVF33

        Create a new object of the class itkComposeImageFilterIF3ICVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComposeImageFilterIF3ICVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComposeImageFilterIF3ICVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComposeImageFilterIF3ICVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComposeImageFilterIF3ICVF33 in _itkComposeImageFilterPython:
_itkComposeImageFilterPython.itkComposeImageFilterIF3ICVF33_swigregister(itkComposeImageFilterIF3ICVF33)
itkComposeImageFilterIF3ICVF33___New_orig__ = _itkComposeImageFilterPython.itkComposeImageFilterIF3ICVF33___New_orig__
itkComposeImageFilterIF3ICVF33_cast = _itkComposeImageFilterPython.itkComposeImageFilterIF3ICVF33_cast


def itkComposeImageFilterIF3ICVF43_New():
    return itkComposeImageFilterIF3ICVF43.New()

class itkComposeImageFilterIF3ICVF43(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF43):
    r"""


    ComposeImageFilter combine several scalar images into a multicomponent
    image.

    ComposeImageFilter combine several scalar images into an itk::Image of
    vector pixel (itk::Vector, itk::RGBPixel, ...), of std::complex pixel,
    or in an itk::VectorImage.

    Inputs and Usage  All input images are expected to have the same
    template parameters and have the same size and origin.

    See:  VectorImage

    See:  VectorIndexSelectionCastImageFilter
    example{Filtering/ImageCompose/CreateVectorImageFromScalarImages,C
    reate Vector Image From Scalar Images}  example{Filtering/ImageCompose
    /ComposeVectorFromThreeScalarImages,Compose Vector From Three Scalar
    Images}  example{Filtering/ImageCompose/ConvertRealAndImaginaryToCompl
    exImage,Convert Real And Imaginary Images To Complex Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterIF3ICVF43___New_orig__)
    Clone = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF3ICVF43_Clone)
    SetInput1 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF3ICVF43_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF3ICVF43_SetInput2)
    SetInput3 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF3ICVF43_SetInput3)
    InputCovertibleToOutputCheck = _itkComposeImageFilterPython.itkComposeImageFilterIF3ICVF43_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkComposeImageFilterPython.delete_itkComposeImageFilterIF3ICVF43
    cast = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterIF3ICVF43_cast)

    def New(*args, **kargs):
        """New() -> itkComposeImageFilterIF3ICVF43

        Create a new object of the class itkComposeImageFilterIF3ICVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComposeImageFilterIF3ICVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComposeImageFilterIF3ICVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComposeImageFilterIF3ICVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComposeImageFilterIF3ICVF43 in _itkComposeImageFilterPython:
_itkComposeImageFilterPython.itkComposeImageFilterIF3ICVF43_swigregister(itkComposeImageFilterIF3ICVF43)
itkComposeImageFilterIF3ICVF43___New_orig__ = _itkComposeImageFilterPython.itkComposeImageFilterIF3ICVF43___New_orig__
itkComposeImageFilterIF3ICVF43_cast = _itkComposeImageFilterPython.itkComposeImageFilterIF3ICVF43_cast


def itkComposeImageFilterIF3IVF23_New():
    return itkComposeImageFilterIF3IVF23.New()

class itkComposeImageFilterIF3IVF23(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF23):
    r"""


    ComposeImageFilter combine several scalar images into a multicomponent
    image.

    ComposeImageFilter combine several scalar images into an itk::Image of
    vector pixel (itk::Vector, itk::RGBPixel, ...), of std::complex pixel,
    or in an itk::VectorImage.

    Inputs and Usage  All input images are expected to have the same
    template parameters and have the same size and origin.

    See:  VectorImage

    See:  VectorIndexSelectionCastImageFilter
    example{Filtering/ImageCompose/CreateVectorImageFromScalarImages,C
    reate Vector Image From Scalar Images}  example{Filtering/ImageCompose
    /ComposeVectorFromThreeScalarImages,Compose Vector From Three Scalar
    Images}  example{Filtering/ImageCompose/ConvertRealAndImaginaryToCompl
    exImage,Convert Real And Imaginary Images To Complex Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterIF3IVF23___New_orig__)
    Clone = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF3IVF23_Clone)
    SetInput1 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF3IVF23_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF3IVF23_SetInput2)
    SetInput3 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF3IVF23_SetInput3)
    InputCovertibleToOutputCheck = _itkComposeImageFilterPython.itkComposeImageFilterIF3IVF23_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkComposeImageFilterPython.delete_itkComposeImageFilterIF3IVF23
    cast = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterIF3IVF23_cast)

    def New(*args, **kargs):
        """New() -> itkComposeImageFilterIF3IVF23

        Create a new object of the class itkComposeImageFilterIF3IVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComposeImageFilterIF3IVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComposeImageFilterIF3IVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComposeImageFilterIF3IVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComposeImageFilterIF3IVF23 in _itkComposeImageFilterPython:
_itkComposeImageFilterPython.itkComposeImageFilterIF3IVF23_swigregister(itkComposeImageFilterIF3IVF23)
itkComposeImageFilterIF3IVF23___New_orig__ = _itkComposeImageFilterPython.itkComposeImageFilterIF3IVF23___New_orig__
itkComposeImageFilterIF3IVF23_cast = _itkComposeImageFilterPython.itkComposeImageFilterIF3IVF23_cast


def itkComposeImageFilterIF3IVF33_New():
    return itkComposeImageFilterIF3IVF33.New()

class itkComposeImageFilterIF3IVF33(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF33):
    r"""


    ComposeImageFilter combine several scalar images into a multicomponent
    image.

    ComposeImageFilter combine several scalar images into an itk::Image of
    vector pixel (itk::Vector, itk::RGBPixel, ...), of std::complex pixel,
    or in an itk::VectorImage.

    Inputs and Usage  All input images are expected to have the same
    template parameters and have the same size and origin.

    See:  VectorImage

    See:  VectorIndexSelectionCastImageFilter
    example{Filtering/ImageCompose/CreateVectorImageFromScalarImages,C
    reate Vector Image From Scalar Images}  example{Filtering/ImageCompose
    /ComposeVectorFromThreeScalarImages,Compose Vector From Three Scalar
    Images}  example{Filtering/ImageCompose/ConvertRealAndImaginaryToCompl
    exImage,Convert Real And Imaginary Images To Complex Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterIF3IVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF3IVF33_Clone)
    SetInput1 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF3IVF33_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF3IVF33_SetInput2)
    SetInput3 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF3IVF33_SetInput3)
    InputCovertibleToOutputCheck = _itkComposeImageFilterPython.itkComposeImageFilterIF3IVF33_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkComposeImageFilterPython.delete_itkComposeImageFilterIF3IVF33
    cast = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterIF3IVF33_cast)

    def New(*args, **kargs):
        """New() -> itkComposeImageFilterIF3IVF33

        Create a new object of the class itkComposeImageFilterIF3IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComposeImageFilterIF3IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComposeImageFilterIF3IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComposeImageFilterIF3IVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComposeImageFilterIF3IVF33 in _itkComposeImageFilterPython:
_itkComposeImageFilterPython.itkComposeImageFilterIF3IVF33_swigregister(itkComposeImageFilterIF3IVF33)
itkComposeImageFilterIF3IVF33___New_orig__ = _itkComposeImageFilterPython.itkComposeImageFilterIF3IVF33___New_orig__
itkComposeImageFilterIF3IVF33_cast = _itkComposeImageFilterPython.itkComposeImageFilterIF3IVF33_cast


def itkComposeImageFilterIF3IVF43_New():
    return itkComposeImageFilterIF3IVF43.New()

class itkComposeImageFilterIF3IVF43(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF43):
    r"""


    ComposeImageFilter combine several scalar images into a multicomponent
    image.

    ComposeImageFilter combine several scalar images into an itk::Image of
    vector pixel (itk::Vector, itk::RGBPixel, ...), of std::complex pixel,
    or in an itk::VectorImage.

    Inputs and Usage  All input images are expected to have the same
    template parameters and have the same size and origin.

    See:  VectorImage

    See:  VectorIndexSelectionCastImageFilter
    example{Filtering/ImageCompose/CreateVectorImageFromScalarImages,C
    reate Vector Image From Scalar Images}  example{Filtering/ImageCompose
    /ComposeVectorFromThreeScalarImages,Compose Vector From Three Scalar
    Images}  example{Filtering/ImageCompose/ConvertRealAndImaginaryToCompl
    exImage,Convert Real And Imaginary Images To Complex Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterIF3IVF43___New_orig__)
    Clone = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF3IVF43_Clone)
    SetInput1 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF3IVF43_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF3IVF43_SetInput2)
    SetInput3 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF3IVF43_SetInput3)
    InputCovertibleToOutputCheck = _itkComposeImageFilterPython.itkComposeImageFilterIF3IVF43_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkComposeImageFilterPython.delete_itkComposeImageFilterIF3IVF43
    cast = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterIF3IVF43_cast)

    def New(*args, **kargs):
        """New() -> itkComposeImageFilterIF3IVF43

        Create a new object of the class itkComposeImageFilterIF3IVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComposeImageFilterIF3IVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComposeImageFilterIF3IVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComposeImageFilterIF3IVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComposeImageFilterIF3IVF43 in _itkComposeImageFilterPython:
_itkComposeImageFilterPython.itkComposeImageFilterIF3IVF43_swigregister(itkComposeImageFilterIF3IVF43)
itkComposeImageFilterIF3IVF43___New_orig__ = _itkComposeImageFilterPython.itkComposeImageFilterIF3IVF43___New_orig__
itkComposeImageFilterIF3IVF43_cast = _itkComposeImageFilterPython.itkComposeImageFilterIF3IVF43_cast


def itkComposeImageFilterIF3VIF3_New():
    return itkComposeImageFilterIF3VIF3.New()

class itkComposeImageFilterIF3VIF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF3VIF3):
    r"""


    ComposeImageFilter combine several scalar images into a multicomponent
    image.

    ComposeImageFilter combine several scalar images into an itk::Image of
    vector pixel (itk::Vector, itk::RGBPixel, ...), of std::complex pixel,
    or in an itk::VectorImage.

    Inputs and Usage  All input images are expected to have the same
    template parameters and have the same size and origin.

    See:  VectorImage

    See:  VectorIndexSelectionCastImageFilter
    example{Filtering/ImageCompose/CreateVectorImageFromScalarImages,C
    reate Vector Image From Scalar Images}  example{Filtering/ImageCompose
    /ComposeVectorFromThreeScalarImages,Compose Vector From Three Scalar
    Images}  example{Filtering/ImageCompose/ConvertRealAndImaginaryToCompl
    exImage,Convert Real And Imaginary Images To Complex Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterIF3VIF3___New_orig__)
    Clone = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF3VIF3_Clone)
    SetInput1 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF3VIF3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF3VIF3_SetInput2)
    SetInput3 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIF3VIF3_SetInput3)
    InputCovertibleToOutputCheck = _itkComposeImageFilterPython.itkComposeImageFilterIF3VIF3_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkComposeImageFilterPython.delete_itkComposeImageFilterIF3VIF3
    cast = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterIF3VIF3_cast)

    def New(*args, **kargs):
        """New() -> itkComposeImageFilterIF3VIF3

        Create a new object of the class itkComposeImageFilterIF3VIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComposeImageFilterIF3VIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComposeImageFilterIF3VIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComposeImageFilterIF3VIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComposeImageFilterIF3VIF3 in _itkComposeImageFilterPython:
_itkComposeImageFilterPython.itkComposeImageFilterIF3VIF3_swigregister(itkComposeImageFilterIF3VIF3)
itkComposeImageFilterIF3VIF3___New_orig__ = _itkComposeImageFilterPython.itkComposeImageFilterIF3VIF3___New_orig__
itkComposeImageFilterIF3VIF3_cast = _itkComposeImageFilterPython.itkComposeImageFilterIF3VIF3_cast


def itkComposeImageFilterISS2VISS2_New():
    return itkComposeImageFilterISS2VISS2.New()

class itkComposeImageFilterISS2VISS2(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS2VISS2):
    r"""


    ComposeImageFilter combine several scalar images into a multicomponent
    image.

    ComposeImageFilter combine several scalar images into an itk::Image of
    vector pixel (itk::Vector, itk::RGBPixel, ...), of std::complex pixel,
    or in an itk::VectorImage.

    Inputs and Usage  All input images are expected to have the same
    template parameters and have the same size and origin.

    See:  VectorImage

    See:  VectorIndexSelectionCastImageFilter
    example{Filtering/ImageCompose/CreateVectorImageFromScalarImages,C
    reate Vector Image From Scalar Images}  example{Filtering/ImageCompose
    /ComposeVectorFromThreeScalarImages,Compose Vector From Three Scalar
    Images}  example{Filtering/ImageCompose/ConvertRealAndImaginaryToCompl
    exImage,Convert Real And Imaginary Images To Complex Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterISS2VISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterISS2VISS2_Clone)
    SetInput1 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterISS2VISS2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterISS2VISS2_SetInput2)
    SetInput3 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterISS2VISS2_SetInput3)
    InputCovertibleToOutputCheck = _itkComposeImageFilterPython.itkComposeImageFilterISS2VISS2_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkComposeImageFilterPython.delete_itkComposeImageFilterISS2VISS2
    cast = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterISS2VISS2_cast)

    def New(*args, **kargs):
        """New() -> itkComposeImageFilterISS2VISS2

        Create a new object of the class itkComposeImageFilterISS2VISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComposeImageFilterISS2VISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComposeImageFilterISS2VISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComposeImageFilterISS2VISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComposeImageFilterISS2VISS2 in _itkComposeImageFilterPython:
_itkComposeImageFilterPython.itkComposeImageFilterISS2VISS2_swigregister(itkComposeImageFilterISS2VISS2)
itkComposeImageFilterISS2VISS2___New_orig__ = _itkComposeImageFilterPython.itkComposeImageFilterISS2VISS2___New_orig__
itkComposeImageFilterISS2VISS2_cast = _itkComposeImageFilterPython.itkComposeImageFilterISS2VISS2_cast


def itkComposeImageFilterISS3VISS3_New():
    return itkComposeImageFilterISS3VISS3.New()

class itkComposeImageFilterISS3VISS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS3VISS3):
    r"""


    ComposeImageFilter combine several scalar images into a multicomponent
    image.

    ComposeImageFilter combine several scalar images into an itk::Image of
    vector pixel (itk::Vector, itk::RGBPixel, ...), of std::complex pixel,
    or in an itk::VectorImage.

    Inputs and Usage  All input images are expected to have the same
    template parameters and have the same size and origin.

    See:  VectorImage

    See:  VectorIndexSelectionCastImageFilter
    example{Filtering/ImageCompose/CreateVectorImageFromScalarImages,C
    reate Vector Image From Scalar Images}  example{Filtering/ImageCompose
    /ComposeVectorFromThreeScalarImages,Compose Vector From Three Scalar
    Images}  example{Filtering/ImageCompose/ConvertRealAndImaginaryToCompl
    exImage,Convert Real And Imaginary Images To Complex Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterISS3VISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterISS3VISS3_Clone)
    SetInput1 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterISS3VISS3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterISS3VISS3_SetInput2)
    SetInput3 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterISS3VISS3_SetInput3)
    InputCovertibleToOutputCheck = _itkComposeImageFilterPython.itkComposeImageFilterISS3VISS3_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkComposeImageFilterPython.delete_itkComposeImageFilterISS3VISS3
    cast = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterISS3VISS3_cast)

    def New(*args, **kargs):
        """New() -> itkComposeImageFilterISS3VISS3

        Create a new object of the class itkComposeImageFilterISS3VISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComposeImageFilterISS3VISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComposeImageFilterISS3VISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComposeImageFilterISS3VISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComposeImageFilterISS3VISS3 in _itkComposeImageFilterPython:
_itkComposeImageFilterPython.itkComposeImageFilterISS3VISS3_swigregister(itkComposeImageFilterISS3VISS3)
itkComposeImageFilterISS3VISS3___New_orig__ = _itkComposeImageFilterPython.itkComposeImageFilterISS3VISS3___New_orig__
itkComposeImageFilterISS3VISS3_cast = _itkComposeImageFilterPython.itkComposeImageFilterISS3VISS3_cast


def itkComposeImageFilterIUC2IRGBAUC2_New():
    return itkComposeImageFilterIUC2IRGBAUC2.New()

class itkComposeImageFilterIUC2IRGBAUC2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBAUC2):
    r"""


    ComposeImageFilter combine several scalar images into a multicomponent
    image.

    ComposeImageFilter combine several scalar images into an itk::Image of
    vector pixel (itk::Vector, itk::RGBPixel, ...), of std::complex pixel,
    or in an itk::VectorImage.

    Inputs and Usage  All input images are expected to have the same
    template parameters and have the same size and origin.

    See:  VectorImage

    See:  VectorIndexSelectionCastImageFilter
    example{Filtering/ImageCompose/CreateVectorImageFromScalarImages,C
    reate Vector Image From Scalar Images}  example{Filtering/ImageCompose
    /ComposeVectorFromThreeScalarImages,Compose Vector From Three Scalar
    Images}  example{Filtering/ImageCompose/ConvertRealAndImaginaryToCompl
    exImage,Convert Real And Imaginary Images To Complex Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterIUC2IRGBAUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIUC2IRGBAUC2_Clone)
    SetInput1 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIUC2IRGBAUC2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIUC2IRGBAUC2_SetInput2)
    SetInput3 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIUC2IRGBAUC2_SetInput3)
    InputCovertibleToOutputCheck = _itkComposeImageFilterPython.itkComposeImageFilterIUC2IRGBAUC2_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkComposeImageFilterPython.delete_itkComposeImageFilterIUC2IRGBAUC2
    cast = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterIUC2IRGBAUC2_cast)

    def New(*args, **kargs):
        """New() -> itkComposeImageFilterIUC2IRGBAUC2

        Create a new object of the class itkComposeImageFilterIUC2IRGBAUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComposeImageFilterIUC2IRGBAUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComposeImageFilterIUC2IRGBAUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComposeImageFilterIUC2IRGBAUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComposeImageFilterIUC2IRGBAUC2 in _itkComposeImageFilterPython:
_itkComposeImageFilterPython.itkComposeImageFilterIUC2IRGBAUC2_swigregister(itkComposeImageFilterIUC2IRGBAUC2)
itkComposeImageFilterIUC2IRGBAUC2___New_orig__ = _itkComposeImageFilterPython.itkComposeImageFilterIUC2IRGBAUC2___New_orig__
itkComposeImageFilterIUC2IRGBAUC2_cast = _itkComposeImageFilterPython.itkComposeImageFilterIUC2IRGBAUC2_cast


def itkComposeImageFilterIUC2IRGBUC2_New():
    return itkComposeImageFilterIUC2IRGBUC2.New()

class itkComposeImageFilterIUC2IRGBUC2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBUC2):
    r"""


    ComposeImageFilter combine several scalar images into a multicomponent
    image.

    ComposeImageFilter combine several scalar images into an itk::Image of
    vector pixel (itk::Vector, itk::RGBPixel, ...), of std::complex pixel,
    or in an itk::VectorImage.

    Inputs and Usage  All input images are expected to have the same
    template parameters and have the same size and origin.

    See:  VectorImage

    See:  VectorIndexSelectionCastImageFilter
    example{Filtering/ImageCompose/CreateVectorImageFromScalarImages,C
    reate Vector Image From Scalar Images}  example{Filtering/ImageCompose
    /ComposeVectorFromThreeScalarImages,Compose Vector From Three Scalar
    Images}  example{Filtering/ImageCompose/ConvertRealAndImaginaryToCompl
    exImage,Convert Real And Imaginary Images To Complex Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterIUC2IRGBUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIUC2IRGBUC2_Clone)
    SetInput1 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIUC2IRGBUC2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIUC2IRGBUC2_SetInput2)
    SetInput3 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIUC2IRGBUC2_SetInput3)
    InputCovertibleToOutputCheck = _itkComposeImageFilterPython.itkComposeImageFilterIUC2IRGBUC2_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkComposeImageFilterPython.delete_itkComposeImageFilterIUC2IRGBUC2
    cast = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterIUC2IRGBUC2_cast)

    def New(*args, **kargs):
        """New() -> itkComposeImageFilterIUC2IRGBUC2

        Create a new object of the class itkComposeImageFilterIUC2IRGBUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComposeImageFilterIUC2IRGBUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComposeImageFilterIUC2IRGBUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComposeImageFilterIUC2IRGBUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComposeImageFilterIUC2IRGBUC2 in _itkComposeImageFilterPython:
_itkComposeImageFilterPython.itkComposeImageFilterIUC2IRGBUC2_swigregister(itkComposeImageFilterIUC2IRGBUC2)
itkComposeImageFilterIUC2IRGBUC2___New_orig__ = _itkComposeImageFilterPython.itkComposeImageFilterIUC2IRGBUC2___New_orig__
itkComposeImageFilterIUC2IRGBUC2_cast = _itkComposeImageFilterPython.itkComposeImageFilterIUC2IRGBUC2_cast


def itkComposeImageFilterIUC2VIUC2_New():
    return itkComposeImageFilterIUC2VIUC2.New()

class itkComposeImageFilterIUC2VIUC2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIUC2):
    r"""


    ComposeImageFilter combine several scalar images into a multicomponent
    image.

    ComposeImageFilter combine several scalar images into an itk::Image of
    vector pixel (itk::Vector, itk::RGBPixel, ...), of std::complex pixel,
    or in an itk::VectorImage.

    Inputs and Usage  All input images are expected to have the same
    template parameters and have the same size and origin.

    See:  VectorImage

    See:  VectorIndexSelectionCastImageFilter
    example{Filtering/ImageCompose/CreateVectorImageFromScalarImages,C
    reate Vector Image From Scalar Images}  example{Filtering/ImageCompose
    /ComposeVectorFromThreeScalarImages,Compose Vector From Three Scalar
    Images}  example{Filtering/ImageCompose/ConvertRealAndImaginaryToCompl
    exImage,Convert Real And Imaginary Images To Complex Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterIUC2VIUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIUC2VIUC2_Clone)
    SetInput1 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIUC2VIUC2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIUC2VIUC2_SetInput2)
    SetInput3 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIUC2VIUC2_SetInput3)
    InputCovertibleToOutputCheck = _itkComposeImageFilterPython.itkComposeImageFilterIUC2VIUC2_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkComposeImageFilterPython.delete_itkComposeImageFilterIUC2VIUC2
    cast = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterIUC2VIUC2_cast)

    def New(*args, **kargs):
        """New() -> itkComposeImageFilterIUC2VIUC2

        Create a new object of the class itkComposeImageFilterIUC2VIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComposeImageFilterIUC2VIUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComposeImageFilterIUC2VIUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComposeImageFilterIUC2VIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComposeImageFilterIUC2VIUC2 in _itkComposeImageFilterPython:
_itkComposeImageFilterPython.itkComposeImageFilterIUC2VIUC2_swigregister(itkComposeImageFilterIUC2VIUC2)
itkComposeImageFilterIUC2VIUC2___New_orig__ = _itkComposeImageFilterPython.itkComposeImageFilterIUC2VIUC2___New_orig__
itkComposeImageFilterIUC2VIUC2_cast = _itkComposeImageFilterPython.itkComposeImageFilterIUC2VIUC2_cast


def itkComposeImageFilterIUC3IRGBAUC3_New():
    return itkComposeImageFilterIUC3IRGBAUC3.New()

class itkComposeImageFilterIUC3IRGBAUC3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBAUC3):
    r"""


    ComposeImageFilter combine several scalar images into a multicomponent
    image.

    ComposeImageFilter combine several scalar images into an itk::Image of
    vector pixel (itk::Vector, itk::RGBPixel, ...), of std::complex pixel,
    or in an itk::VectorImage.

    Inputs and Usage  All input images are expected to have the same
    template parameters and have the same size and origin.

    See:  VectorImage

    See:  VectorIndexSelectionCastImageFilter
    example{Filtering/ImageCompose/CreateVectorImageFromScalarImages,C
    reate Vector Image From Scalar Images}  example{Filtering/ImageCompose
    /ComposeVectorFromThreeScalarImages,Compose Vector From Three Scalar
    Images}  example{Filtering/ImageCompose/ConvertRealAndImaginaryToCompl
    exImage,Convert Real And Imaginary Images To Complex Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterIUC3IRGBAUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIUC3IRGBAUC3_Clone)
    SetInput1 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIUC3IRGBAUC3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIUC3IRGBAUC3_SetInput2)
    SetInput3 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIUC3IRGBAUC3_SetInput3)
    InputCovertibleToOutputCheck = _itkComposeImageFilterPython.itkComposeImageFilterIUC3IRGBAUC3_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkComposeImageFilterPython.delete_itkComposeImageFilterIUC3IRGBAUC3
    cast = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterIUC3IRGBAUC3_cast)

    def New(*args, **kargs):
        """New() -> itkComposeImageFilterIUC3IRGBAUC3

        Create a new object of the class itkComposeImageFilterIUC3IRGBAUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComposeImageFilterIUC3IRGBAUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComposeImageFilterIUC3IRGBAUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComposeImageFilterIUC3IRGBAUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComposeImageFilterIUC3IRGBAUC3 in _itkComposeImageFilterPython:
_itkComposeImageFilterPython.itkComposeImageFilterIUC3IRGBAUC3_swigregister(itkComposeImageFilterIUC3IRGBAUC3)
itkComposeImageFilterIUC3IRGBAUC3___New_orig__ = _itkComposeImageFilterPython.itkComposeImageFilterIUC3IRGBAUC3___New_orig__
itkComposeImageFilterIUC3IRGBAUC3_cast = _itkComposeImageFilterPython.itkComposeImageFilterIUC3IRGBAUC3_cast


def itkComposeImageFilterIUC3IRGBUC3_New():
    return itkComposeImageFilterIUC3IRGBUC3.New()

class itkComposeImageFilterIUC3IRGBUC3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBUC3):
    r"""


    ComposeImageFilter combine several scalar images into a multicomponent
    image.

    ComposeImageFilter combine several scalar images into an itk::Image of
    vector pixel (itk::Vector, itk::RGBPixel, ...), of std::complex pixel,
    or in an itk::VectorImage.

    Inputs and Usage  All input images are expected to have the same
    template parameters and have the same size and origin.

    See:  VectorImage

    See:  VectorIndexSelectionCastImageFilter
    example{Filtering/ImageCompose/CreateVectorImageFromScalarImages,C
    reate Vector Image From Scalar Images}  example{Filtering/ImageCompose
    /ComposeVectorFromThreeScalarImages,Compose Vector From Three Scalar
    Images}  example{Filtering/ImageCompose/ConvertRealAndImaginaryToCompl
    exImage,Convert Real And Imaginary Images To Complex Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterIUC3IRGBUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIUC3IRGBUC3_Clone)
    SetInput1 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIUC3IRGBUC3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIUC3IRGBUC3_SetInput2)
    SetInput3 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIUC3IRGBUC3_SetInput3)
    InputCovertibleToOutputCheck = _itkComposeImageFilterPython.itkComposeImageFilterIUC3IRGBUC3_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkComposeImageFilterPython.delete_itkComposeImageFilterIUC3IRGBUC3
    cast = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterIUC3IRGBUC3_cast)

    def New(*args, **kargs):
        """New() -> itkComposeImageFilterIUC3IRGBUC3

        Create a new object of the class itkComposeImageFilterIUC3IRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComposeImageFilterIUC3IRGBUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComposeImageFilterIUC3IRGBUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComposeImageFilterIUC3IRGBUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComposeImageFilterIUC3IRGBUC3 in _itkComposeImageFilterPython:
_itkComposeImageFilterPython.itkComposeImageFilterIUC3IRGBUC3_swigregister(itkComposeImageFilterIUC3IRGBUC3)
itkComposeImageFilterIUC3IRGBUC3___New_orig__ = _itkComposeImageFilterPython.itkComposeImageFilterIUC3IRGBUC3___New_orig__
itkComposeImageFilterIUC3IRGBUC3_cast = _itkComposeImageFilterPython.itkComposeImageFilterIUC3IRGBUC3_cast


def itkComposeImageFilterIUC3VIUC3_New():
    return itkComposeImageFilterIUC3VIUC3.New()

class itkComposeImageFilterIUC3VIUC3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIUC3):
    r"""


    ComposeImageFilter combine several scalar images into a multicomponent
    image.

    ComposeImageFilter combine several scalar images into an itk::Image of
    vector pixel (itk::Vector, itk::RGBPixel, ...), of std::complex pixel,
    or in an itk::VectorImage.

    Inputs and Usage  All input images are expected to have the same
    template parameters and have the same size and origin.

    See:  VectorImage

    See:  VectorIndexSelectionCastImageFilter
    example{Filtering/ImageCompose/CreateVectorImageFromScalarImages,C
    reate Vector Image From Scalar Images}  example{Filtering/ImageCompose
    /ComposeVectorFromThreeScalarImages,Compose Vector From Three Scalar
    Images}  example{Filtering/ImageCompose/ConvertRealAndImaginaryToCompl
    exImage,Convert Real And Imaginary Images To Complex Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterIUC3VIUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIUC3VIUC3_Clone)
    SetInput1 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIUC3VIUC3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIUC3VIUC3_SetInput2)
    SetInput3 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIUC3VIUC3_SetInput3)
    InputCovertibleToOutputCheck = _itkComposeImageFilterPython.itkComposeImageFilterIUC3VIUC3_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkComposeImageFilterPython.delete_itkComposeImageFilterIUC3VIUC3
    cast = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterIUC3VIUC3_cast)

    def New(*args, **kargs):
        """New() -> itkComposeImageFilterIUC3VIUC3

        Create a new object of the class itkComposeImageFilterIUC3VIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComposeImageFilterIUC3VIUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComposeImageFilterIUC3VIUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComposeImageFilterIUC3VIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComposeImageFilterIUC3VIUC3 in _itkComposeImageFilterPython:
_itkComposeImageFilterPython.itkComposeImageFilterIUC3VIUC3_swigregister(itkComposeImageFilterIUC3VIUC3)
itkComposeImageFilterIUC3VIUC3___New_orig__ = _itkComposeImageFilterPython.itkComposeImageFilterIUC3VIUC3___New_orig__
itkComposeImageFilterIUC3VIUC3_cast = _itkComposeImageFilterPython.itkComposeImageFilterIUC3VIUC3_cast


def itkComposeImageFilterIUS2VIUS2_New():
    return itkComposeImageFilterIUS2VIUS2.New()

class itkComposeImageFilterIUS2VIUS2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIUS2):
    r"""


    ComposeImageFilter combine several scalar images into a multicomponent
    image.

    ComposeImageFilter combine several scalar images into an itk::Image of
    vector pixel (itk::Vector, itk::RGBPixel, ...), of std::complex pixel,
    or in an itk::VectorImage.

    Inputs and Usage  All input images are expected to have the same
    template parameters and have the same size and origin.

    See:  VectorImage

    See:  VectorIndexSelectionCastImageFilter
    example{Filtering/ImageCompose/CreateVectorImageFromScalarImages,C
    reate Vector Image From Scalar Images}  example{Filtering/ImageCompose
    /ComposeVectorFromThreeScalarImages,Compose Vector From Three Scalar
    Images}  example{Filtering/ImageCompose/ConvertRealAndImaginaryToCompl
    exImage,Convert Real And Imaginary Images To Complex Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterIUS2VIUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIUS2VIUS2_Clone)
    SetInput1 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIUS2VIUS2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIUS2VIUS2_SetInput2)
    SetInput3 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIUS2VIUS2_SetInput3)
    InputCovertibleToOutputCheck = _itkComposeImageFilterPython.itkComposeImageFilterIUS2VIUS2_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkComposeImageFilterPython.delete_itkComposeImageFilterIUS2VIUS2
    cast = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterIUS2VIUS2_cast)

    def New(*args, **kargs):
        """New() -> itkComposeImageFilterIUS2VIUS2

        Create a new object of the class itkComposeImageFilterIUS2VIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComposeImageFilterIUS2VIUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComposeImageFilterIUS2VIUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComposeImageFilterIUS2VIUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComposeImageFilterIUS2VIUS2 in _itkComposeImageFilterPython:
_itkComposeImageFilterPython.itkComposeImageFilterIUS2VIUS2_swigregister(itkComposeImageFilterIUS2VIUS2)
itkComposeImageFilterIUS2VIUS2___New_orig__ = _itkComposeImageFilterPython.itkComposeImageFilterIUS2VIUS2___New_orig__
itkComposeImageFilterIUS2VIUS2_cast = _itkComposeImageFilterPython.itkComposeImageFilterIUS2VIUS2_cast


def itkComposeImageFilterIUS3VIUS3_New():
    return itkComposeImageFilterIUS3VIUS3.New()

class itkComposeImageFilterIUS3VIUS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIUS3):
    r"""


    ComposeImageFilter combine several scalar images into a multicomponent
    image.

    ComposeImageFilter combine several scalar images into an itk::Image of
    vector pixel (itk::Vector, itk::RGBPixel, ...), of std::complex pixel,
    or in an itk::VectorImage.

    Inputs and Usage  All input images are expected to have the same
    template parameters and have the same size and origin.

    See:  VectorImage

    See:  VectorIndexSelectionCastImageFilter
    example{Filtering/ImageCompose/CreateVectorImageFromScalarImages,C
    reate Vector Image From Scalar Images}  example{Filtering/ImageCompose
    /ComposeVectorFromThreeScalarImages,Compose Vector From Three Scalar
    Images}  example{Filtering/ImageCompose/ConvertRealAndImaginaryToCompl
    exImage,Convert Real And Imaginary Images To Complex Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterIUS3VIUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIUS3VIUS3_Clone)
    SetInput1 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIUS3VIUS3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIUS3VIUS3_SetInput2)
    SetInput3 = _swig_new_instance_method(_itkComposeImageFilterPython.itkComposeImageFilterIUS3VIUS3_SetInput3)
    InputCovertibleToOutputCheck = _itkComposeImageFilterPython.itkComposeImageFilterIUS3VIUS3_InputCovertibleToOutputCheck
    
    __swig_destroy__ = _itkComposeImageFilterPython.delete_itkComposeImageFilterIUS3VIUS3
    cast = _swig_new_static_method(_itkComposeImageFilterPython.itkComposeImageFilterIUS3VIUS3_cast)

    def New(*args, **kargs):
        """New() -> itkComposeImageFilterIUS3VIUS3

        Create a new object of the class itkComposeImageFilterIUS3VIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComposeImageFilterIUS3VIUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComposeImageFilterIUS3VIUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComposeImageFilterIUS3VIUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComposeImageFilterIUS3VIUS3 in _itkComposeImageFilterPython:
_itkComposeImageFilterPython.itkComposeImageFilterIUS3VIUS3_swigregister(itkComposeImageFilterIUS3VIUS3)
itkComposeImageFilterIUS3VIUS3___New_orig__ = _itkComposeImageFilterPython.itkComposeImageFilterIUS3VIUS3___New_orig__
itkComposeImageFilterIUS3VIUS3_cast = _itkComposeImageFilterPython.itkComposeImageFilterIUS3VIUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def compose_image_filter(*args, **kwargs):
    """Procedural interface for ComposeImageFilter"""
    import itk
    instance = itk.ComposeImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def compose_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ComposeImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.ComposeImageFilter.values()[0]
    else:
        filter_object = itk.ComposeImageFilter

    compose_image_filter.__doc__ = filter_object.__doc__
    compose_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    compose_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.ComposeImageFilter, itkTemplate.itkTemplate):
        compose_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        compose_image_filter.__doc__ += "\n"
        compose_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        compose_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



