# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageGridPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkZeroFluxNeumannPadImageFilterPython
else:
    import _itkZeroFluxNeumannPadImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkZeroFluxNeumannPadImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkZeroFluxNeumannPadImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkPadImageFilterPython
import itk.itkPadImageFilterBasePython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImageToImageFilterAPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkImagePython
import itk.stdcomplexPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.vnl_vectorPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkPointPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterBPython
import itk.itkImageBoundaryConditionPython

def itkZeroFluxNeumannPadImageFilterICF2ICF2_New():
    return itkZeroFluxNeumannPadImageFilterICF2ICF2.New()

class itkZeroFluxNeumannPadImageFilterICF2ICF2(itk.itkPadImageFilterPython.itkPadImageFilterICF2ICF2):
    r"""


    Increase the image size by padding according to the zero-flux Neumann
    boundary condition.

    A filter which extends the image size and fill the missing pixels
    according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this filter on an image with a corner like:
    returns the following padded image:

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   WrapPadImageFilter, MirrorPadImageFilter,
    ConstantPadImageFilter, ZeroFluxNeumannBoundaryCondition 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICF2ICF2___New_orig__)
    Clone = _swig_new_instance_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICF2ICF2_Clone)
    OutputEqualityComparableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICF2ICF2_OutputEqualityComparableCheck
    
    InputConvertibleToOutputCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICF2ICF2_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICF2ICF2_SameDimensionCheck
    
    OutputOStreamWritableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICF2ICF2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkZeroFluxNeumannPadImageFilterPython.delete_itkZeroFluxNeumannPadImageFilterICF2ICF2
    cast = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICF2ICF2_cast)

    def New(*args, **kargs):
        """New() -> itkZeroFluxNeumannPadImageFilterICF2ICF2

        Create a new object of the class itkZeroFluxNeumannPadImageFilterICF2ICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkZeroFluxNeumannPadImageFilterICF2ICF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkZeroFluxNeumannPadImageFilterICF2ICF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkZeroFluxNeumannPadImageFilterICF2ICF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkZeroFluxNeumannPadImageFilterICF2ICF2 in _itkZeroFluxNeumannPadImageFilterPython:
_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICF2ICF2_swigregister(itkZeroFluxNeumannPadImageFilterICF2ICF2)
itkZeroFluxNeumannPadImageFilterICF2ICF2___New_orig__ = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICF2ICF2___New_orig__
itkZeroFluxNeumannPadImageFilterICF2ICF2_cast = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICF2ICF2_cast


def itkZeroFluxNeumannPadImageFilterICF3ICF3_New():
    return itkZeroFluxNeumannPadImageFilterICF3ICF3.New()

class itkZeroFluxNeumannPadImageFilterICF3ICF3(itk.itkPadImageFilterPython.itkPadImageFilterICF3ICF3):
    r"""


    Increase the image size by padding according to the zero-flux Neumann
    boundary condition.

    A filter which extends the image size and fill the missing pixels
    according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this filter on an image with a corner like:
    returns the following padded image:

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   WrapPadImageFilter, MirrorPadImageFilter,
    ConstantPadImageFilter, ZeroFluxNeumannBoundaryCondition 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICF3ICF3___New_orig__)
    Clone = _swig_new_instance_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICF3ICF3_Clone)
    OutputEqualityComparableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICF3ICF3_OutputEqualityComparableCheck
    
    InputConvertibleToOutputCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICF3ICF3_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICF3ICF3_SameDimensionCheck
    
    OutputOStreamWritableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICF3ICF3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkZeroFluxNeumannPadImageFilterPython.delete_itkZeroFluxNeumannPadImageFilterICF3ICF3
    cast = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICF3ICF3_cast)

    def New(*args, **kargs):
        """New() -> itkZeroFluxNeumannPadImageFilterICF3ICF3

        Create a new object of the class itkZeroFluxNeumannPadImageFilterICF3ICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkZeroFluxNeumannPadImageFilterICF3ICF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkZeroFluxNeumannPadImageFilterICF3ICF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkZeroFluxNeumannPadImageFilterICF3ICF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkZeroFluxNeumannPadImageFilterICF3ICF3 in _itkZeroFluxNeumannPadImageFilterPython:
_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICF3ICF3_swigregister(itkZeroFluxNeumannPadImageFilterICF3ICF3)
itkZeroFluxNeumannPadImageFilterICF3ICF3___New_orig__ = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICF3ICF3___New_orig__
itkZeroFluxNeumannPadImageFilterICF3ICF3_cast = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICF3ICF3_cast


def itkZeroFluxNeumannPadImageFilterICVF22ICVF22_New():
    return itkZeroFluxNeumannPadImageFilterICVF22ICVF22.New()

class itkZeroFluxNeumannPadImageFilterICVF22ICVF22(itk.itkPadImageFilterPython.itkPadImageFilterICVF22ICVF22):
    r"""


    Increase the image size by padding according to the zero-flux Neumann
    boundary condition.

    A filter which extends the image size and fill the missing pixels
    according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this filter on an image with a corner like:
    returns the following padded image:

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   WrapPadImageFilter, MirrorPadImageFilter,
    ConstantPadImageFilter, ZeroFluxNeumannBoundaryCondition 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF22ICVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF22ICVF22_Clone)
    OutputEqualityComparableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF22ICVF22_OutputEqualityComparableCheck
    
    InputConvertibleToOutputCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF22ICVF22_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF22ICVF22_SameDimensionCheck
    
    OutputOStreamWritableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF22ICVF22_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkZeroFluxNeumannPadImageFilterPython.delete_itkZeroFluxNeumannPadImageFilterICVF22ICVF22
    cast = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF22ICVF22_cast)

    def New(*args, **kargs):
        """New() -> itkZeroFluxNeumannPadImageFilterICVF22ICVF22

        Create a new object of the class itkZeroFluxNeumannPadImageFilterICVF22ICVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkZeroFluxNeumannPadImageFilterICVF22ICVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkZeroFluxNeumannPadImageFilterICVF22ICVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkZeroFluxNeumannPadImageFilterICVF22ICVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkZeroFluxNeumannPadImageFilterICVF22ICVF22 in _itkZeroFluxNeumannPadImageFilterPython:
_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF22ICVF22_swigregister(itkZeroFluxNeumannPadImageFilterICVF22ICVF22)
itkZeroFluxNeumannPadImageFilterICVF22ICVF22___New_orig__ = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF22ICVF22___New_orig__
itkZeroFluxNeumannPadImageFilterICVF22ICVF22_cast = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF22ICVF22_cast


def itkZeroFluxNeumannPadImageFilterICVF23ICVF23_New():
    return itkZeroFluxNeumannPadImageFilterICVF23ICVF23.New()

class itkZeroFluxNeumannPadImageFilterICVF23ICVF23(itk.itkPadImageFilterPython.itkPadImageFilterICVF23ICVF23):
    r"""


    Increase the image size by padding according to the zero-flux Neumann
    boundary condition.

    A filter which extends the image size and fill the missing pixels
    according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this filter on an image with a corner like:
    returns the following padded image:

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   WrapPadImageFilter, MirrorPadImageFilter,
    ConstantPadImageFilter, ZeroFluxNeumannBoundaryCondition 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF23ICVF23___New_orig__)
    Clone = _swig_new_instance_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF23ICVF23_Clone)
    OutputEqualityComparableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF23ICVF23_OutputEqualityComparableCheck
    
    InputConvertibleToOutputCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF23ICVF23_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF23ICVF23_SameDimensionCheck
    
    OutputOStreamWritableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF23ICVF23_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkZeroFluxNeumannPadImageFilterPython.delete_itkZeroFluxNeumannPadImageFilterICVF23ICVF23
    cast = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF23ICVF23_cast)

    def New(*args, **kargs):
        """New() -> itkZeroFluxNeumannPadImageFilterICVF23ICVF23

        Create a new object of the class itkZeroFluxNeumannPadImageFilterICVF23ICVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkZeroFluxNeumannPadImageFilterICVF23ICVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkZeroFluxNeumannPadImageFilterICVF23ICVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkZeroFluxNeumannPadImageFilterICVF23ICVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkZeroFluxNeumannPadImageFilterICVF23ICVF23 in _itkZeroFluxNeumannPadImageFilterPython:
_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF23ICVF23_swigregister(itkZeroFluxNeumannPadImageFilterICVF23ICVF23)
itkZeroFluxNeumannPadImageFilterICVF23ICVF23___New_orig__ = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF23ICVF23___New_orig__
itkZeroFluxNeumannPadImageFilterICVF23ICVF23_cast = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF23ICVF23_cast


def itkZeroFluxNeumannPadImageFilterICVF32ICVF32_New():
    return itkZeroFluxNeumannPadImageFilterICVF32ICVF32.New()

class itkZeroFluxNeumannPadImageFilterICVF32ICVF32(itk.itkPadImageFilterPython.itkPadImageFilterICVF32ICVF32):
    r"""


    Increase the image size by padding according to the zero-flux Neumann
    boundary condition.

    A filter which extends the image size and fill the missing pixels
    according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this filter on an image with a corner like:
    returns the following padded image:

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   WrapPadImageFilter, MirrorPadImageFilter,
    ConstantPadImageFilter, ZeroFluxNeumannBoundaryCondition 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF32ICVF32___New_orig__)
    Clone = _swig_new_instance_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF32ICVF32_Clone)
    OutputEqualityComparableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF32ICVF32_OutputEqualityComparableCheck
    
    InputConvertibleToOutputCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF32ICVF32_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF32ICVF32_SameDimensionCheck
    
    OutputOStreamWritableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF32ICVF32_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkZeroFluxNeumannPadImageFilterPython.delete_itkZeroFluxNeumannPadImageFilterICVF32ICVF32
    cast = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF32ICVF32_cast)

    def New(*args, **kargs):
        """New() -> itkZeroFluxNeumannPadImageFilterICVF32ICVF32

        Create a new object of the class itkZeroFluxNeumannPadImageFilterICVF32ICVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkZeroFluxNeumannPadImageFilterICVF32ICVF32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkZeroFluxNeumannPadImageFilterICVF32ICVF32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkZeroFluxNeumannPadImageFilterICVF32ICVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkZeroFluxNeumannPadImageFilterICVF32ICVF32 in _itkZeroFluxNeumannPadImageFilterPython:
_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF32ICVF32_swigregister(itkZeroFluxNeumannPadImageFilterICVF32ICVF32)
itkZeroFluxNeumannPadImageFilterICVF32ICVF32___New_orig__ = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF32ICVF32___New_orig__
itkZeroFluxNeumannPadImageFilterICVF32ICVF32_cast = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF32ICVF32_cast


def itkZeroFluxNeumannPadImageFilterICVF33ICVF33_New():
    return itkZeroFluxNeumannPadImageFilterICVF33ICVF33.New()

class itkZeroFluxNeumannPadImageFilterICVF33ICVF33(itk.itkPadImageFilterPython.itkPadImageFilterICVF33ICVF33):
    r"""


    Increase the image size by padding according to the zero-flux Neumann
    boundary condition.

    A filter which extends the image size and fill the missing pixels
    according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this filter on an image with a corner like:
    returns the following padded image:

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   WrapPadImageFilter, MirrorPadImageFilter,
    ConstantPadImageFilter, ZeroFluxNeumannBoundaryCondition 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF33ICVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF33ICVF33_Clone)
    OutputEqualityComparableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF33ICVF33_OutputEqualityComparableCheck
    
    InputConvertibleToOutputCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF33ICVF33_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF33ICVF33_SameDimensionCheck
    
    OutputOStreamWritableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF33ICVF33_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkZeroFluxNeumannPadImageFilterPython.delete_itkZeroFluxNeumannPadImageFilterICVF33ICVF33
    cast = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF33ICVF33_cast)

    def New(*args, **kargs):
        """New() -> itkZeroFluxNeumannPadImageFilterICVF33ICVF33

        Create a new object of the class itkZeroFluxNeumannPadImageFilterICVF33ICVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkZeroFluxNeumannPadImageFilterICVF33ICVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkZeroFluxNeumannPadImageFilterICVF33ICVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkZeroFluxNeumannPadImageFilterICVF33ICVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkZeroFluxNeumannPadImageFilterICVF33ICVF33 in _itkZeroFluxNeumannPadImageFilterPython:
_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF33ICVF33_swigregister(itkZeroFluxNeumannPadImageFilterICVF33ICVF33)
itkZeroFluxNeumannPadImageFilterICVF33ICVF33___New_orig__ = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF33ICVF33___New_orig__
itkZeroFluxNeumannPadImageFilterICVF33ICVF33_cast = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF33ICVF33_cast


def itkZeroFluxNeumannPadImageFilterICVF42ICVF42_New():
    return itkZeroFluxNeumannPadImageFilterICVF42ICVF42.New()

class itkZeroFluxNeumannPadImageFilterICVF42ICVF42(itk.itkPadImageFilterPython.itkPadImageFilterICVF42ICVF42):
    r"""


    Increase the image size by padding according to the zero-flux Neumann
    boundary condition.

    A filter which extends the image size and fill the missing pixels
    according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this filter on an image with a corner like:
    returns the following padded image:

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   WrapPadImageFilter, MirrorPadImageFilter,
    ConstantPadImageFilter, ZeroFluxNeumannBoundaryCondition 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF42ICVF42___New_orig__)
    Clone = _swig_new_instance_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF42ICVF42_Clone)
    OutputEqualityComparableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF42ICVF42_OutputEqualityComparableCheck
    
    InputConvertibleToOutputCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF42ICVF42_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF42ICVF42_SameDimensionCheck
    
    OutputOStreamWritableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF42ICVF42_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkZeroFluxNeumannPadImageFilterPython.delete_itkZeroFluxNeumannPadImageFilterICVF42ICVF42
    cast = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF42ICVF42_cast)

    def New(*args, **kargs):
        """New() -> itkZeroFluxNeumannPadImageFilterICVF42ICVF42

        Create a new object of the class itkZeroFluxNeumannPadImageFilterICVF42ICVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkZeroFluxNeumannPadImageFilterICVF42ICVF42.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkZeroFluxNeumannPadImageFilterICVF42ICVF42.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkZeroFluxNeumannPadImageFilterICVF42ICVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkZeroFluxNeumannPadImageFilterICVF42ICVF42 in _itkZeroFluxNeumannPadImageFilterPython:
_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF42ICVF42_swigregister(itkZeroFluxNeumannPadImageFilterICVF42ICVF42)
itkZeroFluxNeumannPadImageFilterICVF42ICVF42___New_orig__ = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF42ICVF42___New_orig__
itkZeroFluxNeumannPadImageFilterICVF42ICVF42_cast = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF42ICVF42_cast


def itkZeroFluxNeumannPadImageFilterICVF43ICVF43_New():
    return itkZeroFluxNeumannPadImageFilterICVF43ICVF43.New()

class itkZeroFluxNeumannPadImageFilterICVF43ICVF43(itk.itkPadImageFilterPython.itkPadImageFilterICVF43ICVF43):
    r"""


    Increase the image size by padding according to the zero-flux Neumann
    boundary condition.

    A filter which extends the image size and fill the missing pixels
    according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this filter on an image with a corner like:
    returns the following padded image:

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   WrapPadImageFilter, MirrorPadImageFilter,
    ConstantPadImageFilter, ZeroFluxNeumannBoundaryCondition 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF43ICVF43___New_orig__)
    Clone = _swig_new_instance_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF43ICVF43_Clone)
    OutputEqualityComparableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF43ICVF43_OutputEqualityComparableCheck
    
    InputConvertibleToOutputCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF43ICVF43_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF43ICVF43_SameDimensionCheck
    
    OutputOStreamWritableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF43ICVF43_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkZeroFluxNeumannPadImageFilterPython.delete_itkZeroFluxNeumannPadImageFilterICVF43ICVF43
    cast = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF43ICVF43_cast)

    def New(*args, **kargs):
        """New() -> itkZeroFluxNeumannPadImageFilterICVF43ICVF43

        Create a new object of the class itkZeroFluxNeumannPadImageFilterICVF43ICVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkZeroFluxNeumannPadImageFilterICVF43ICVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkZeroFluxNeumannPadImageFilterICVF43ICVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkZeroFluxNeumannPadImageFilterICVF43ICVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkZeroFluxNeumannPadImageFilterICVF43ICVF43 in _itkZeroFluxNeumannPadImageFilterPython:
_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF43ICVF43_swigregister(itkZeroFluxNeumannPadImageFilterICVF43ICVF43)
itkZeroFluxNeumannPadImageFilterICVF43ICVF43___New_orig__ = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF43ICVF43___New_orig__
itkZeroFluxNeumannPadImageFilterICVF43ICVF43_cast = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterICVF43ICVF43_cast


def itkZeroFluxNeumannPadImageFilterID2ID2_New():
    return itkZeroFluxNeumannPadImageFilterID2ID2.New()

class itkZeroFluxNeumannPadImageFilterID2ID2(itk.itkPadImageFilterPython.itkPadImageFilterID2ID2):
    r"""


    Increase the image size by padding according to the zero-flux Neumann
    boundary condition.

    A filter which extends the image size and fill the missing pixels
    according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this filter on an image with a corner like:
    returns the following padded image:

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   WrapPadImageFilter, MirrorPadImageFilter,
    ConstantPadImageFilter, ZeroFluxNeumannBoundaryCondition 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterID2ID2_Clone)
    OutputEqualityComparableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterID2ID2_OutputEqualityComparableCheck
    
    InputConvertibleToOutputCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterID2ID2_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterID2ID2_SameDimensionCheck
    
    OutputOStreamWritableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterID2ID2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkZeroFluxNeumannPadImageFilterPython.delete_itkZeroFluxNeumannPadImageFilterID2ID2
    cast = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkZeroFluxNeumannPadImageFilterID2ID2

        Create a new object of the class itkZeroFluxNeumannPadImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkZeroFluxNeumannPadImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkZeroFluxNeumannPadImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkZeroFluxNeumannPadImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkZeroFluxNeumannPadImageFilterID2ID2 in _itkZeroFluxNeumannPadImageFilterPython:
_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterID2ID2_swigregister(itkZeroFluxNeumannPadImageFilterID2ID2)
itkZeroFluxNeumannPadImageFilterID2ID2___New_orig__ = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterID2ID2___New_orig__
itkZeroFluxNeumannPadImageFilterID2ID2_cast = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterID2ID2_cast


def itkZeroFluxNeumannPadImageFilterID3ID3_New():
    return itkZeroFluxNeumannPadImageFilterID3ID3.New()

class itkZeroFluxNeumannPadImageFilterID3ID3(itk.itkPadImageFilterPython.itkPadImageFilterID3ID3):
    r"""


    Increase the image size by padding according to the zero-flux Neumann
    boundary condition.

    A filter which extends the image size and fill the missing pixels
    according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this filter on an image with a corner like:
    returns the following padded image:

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   WrapPadImageFilter, MirrorPadImageFilter,
    ConstantPadImageFilter, ZeroFluxNeumannBoundaryCondition 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterID3ID3_Clone)
    OutputEqualityComparableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterID3ID3_OutputEqualityComparableCheck
    
    InputConvertibleToOutputCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterID3ID3_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterID3ID3_SameDimensionCheck
    
    OutputOStreamWritableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterID3ID3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkZeroFluxNeumannPadImageFilterPython.delete_itkZeroFluxNeumannPadImageFilterID3ID3
    cast = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkZeroFluxNeumannPadImageFilterID3ID3

        Create a new object of the class itkZeroFluxNeumannPadImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkZeroFluxNeumannPadImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkZeroFluxNeumannPadImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkZeroFluxNeumannPadImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkZeroFluxNeumannPadImageFilterID3ID3 in _itkZeroFluxNeumannPadImageFilterPython:
_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterID3ID3_swigregister(itkZeroFluxNeumannPadImageFilterID3ID3)
itkZeroFluxNeumannPadImageFilterID3ID3___New_orig__ = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterID3ID3___New_orig__
itkZeroFluxNeumannPadImageFilterID3ID3_cast = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterID3ID3_cast


def itkZeroFluxNeumannPadImageFilterIF2IF2_New():
    return itkZeroFluxNeumannPadImageFilterIF2IF2.New()

class itkZeroFluxNeumannPadImageFilterIF2IF2(itk.itkPadImageFilterPython.itkPadImageFilterIF2IF2):
    r"""


    Increase the image size by padding according to the zero-flux Neumann
    boundary condition.

    A filter which extends the image size and fill the missing pixels
    according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this filter on an image with a corner like:
    returns the following padded image:

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   WrapPadImageFilter, MirrorPadImageFilter,
    ConstantPadImageFilter, ZeroFluxNeumannBoundaryCondition 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIF2IF2_Clone)
    OutputEqualityComparableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIF2IF2_OutputEqualityComparableCheck
    
    InputConvertibleToOutputCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIF2IF2_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIF2IF2_SameDimensionCheck
    
    OutputOStreamWritableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIF2IF2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkZeroFluxNeumannPadImageFilterPython.delete_itkZeroFluxNeumannPadImageFilterIF2IF2
    cast = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkZeroFluxNeumannPadImageFilterIF2IF2

        Create a new object of the class itkZeroFluxNeumannPadImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkZeroFluxNeumannPadImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkZeroFluxNeumannPadImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkZeroFluxNeumannPadImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkZeroFluxNeumannPadImageFilterIF2IF2 in _itkZeroFluxNeumannPadImageFilterPython:
_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIF2IF2_swigregister(itkZeroFluxNeumannPadImageFilterIF2IF2)
itkZeroFluxNeumannPadImageFilterIF2IF2___New_orig__ = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIF2IF2___New_orig__
itkZeroFluxNeumannPadImageFilterIF2IF2_cast = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIF2IF2_cast


def itkZeroFluxNeumannPadImageFilterIF3IF3_New():
    return itkZeroFluxNeumannPadImageFilterIF3IF3.New()

class itkZeroFluxNeumannPadImageFilterIF3IF3(itk.itkPadImageFilterPython.itkPadImageFilterIF3IF3):
    r"""


    Increase the image size by padding according to the zero-flux Neumann
    boundary condition.

    A filter which extends the image size and fill the missing pixels
    according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this filter on an image with a corner like:
    returns the following padded image:

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   WrapPadImageFilter, MirrorPadImageFilter,
    ConstantPadImageFilter, ZeroFluxNeumannBoundaryCondition 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIF3IF3_Clone)
    OutputEqualityComparableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIF3IF3_OutputEqualityComparableCheck
    
    InputConvertibleToOutputCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIF3IF3_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIF3IF3_SameDimensionCheck
    
    OutputOStreamWritableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIF3IF3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkZeroFluxNeumannPadImageFilterPython.delete_itkZeroFluxNeumannPadImageFilterIF3IF3
    cast = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkZeroFluxNeumannPadImageFilterIF3IF3

        Create a new object of the class itkZeroFluxNeumannPadImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkZeroFluxNeumannPadImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkZeroFluxNeumannPadImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkZeroFluxNeumannPadImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkZeroFluxNeumannPadImageFilterIF3IF3 in _itkZeroFluxNeumannPadImageFilterPython:
_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIF3IF3_swigregister(itkZeroFluxNeumannPadImageFilterIF3IF3)
itkZeroFluxNeumannPadImageFilterIF3IF3___New_orig__ = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIF3IF3___New_orig__
itkZeroFluxNeumannPadImageFilterIF3IF3_cast = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIF3IF3_cast


def itkZeroFluxNeumannPadImageFilterIRGBAUC2IRGBAUC2_New():
    return itkZeroFluxNeumannPadImageFilterIRGBAUC2IRGBAUC2.New()

class itkZeroFluxNeumannPadImageFilterIRGBAUC2IRGBAUC2(itk.itkPadImageFilterPython.itkPadImageFilterIRGBAUC2IRGBAUC2):
    r"""


    Increase the image size by padding according to the zero-flux Neumann
    boundary condition.

    A filter which extends the image size and fill the missing pixels
    according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this filter on an image with a corner like:
    returns the following padded image:

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   WrapPadImageFilter, MirrorPadImageFilter,
    ConstantPadImageFilter, ZeroFluxNeumannBoundaryCondition 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIRGBAUC2IRGBAUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIRGBAUC2IRGBAUC2_Clone)
    OutputEqualityComparableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIRGBAUC2IRGBAUC2_OutputEqualityComparableCheck
    
    InputConvertibleToOutputCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIRGBAUC2IRGBAUC2_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIRGBAUC2IRGBAUC2_SameDimensionCheck
    
    OutputOStreamWritableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIRGBAUC2IRGBAUC2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkZeroFluxNeumannPadImageFilterPython.delete_itkZeroFluxNeumannPadImageFilterIRGBAUC2IRGBAUC2
    cast = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIRGBAUC2IRGBAUC2_cast)

    def New(*args, **kargs):
        """New() -> itkZeroFluxNeumannPadImageFilterIRGBAUC2IRGBAUC2

        Create a new object of the class itkZeroFluxNeumannPadImageFilterIRGBAUC2IRGBAUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkZeroFluxNeumannPadImageFilterIRGBAUC2IRGBAUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkZeroFluxNeumannPadImageFilterIRGBAUC2IRGBAUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkZeroFluxNeumannPadImageFilterIRGBAUC2IRGBAUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkZeroFluxNeumannPadImageFilterIRGBAUC2IRGBAUC2 in _itkZeroFluxNeumannPadImageFilterPython:
_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIRGBAUC2IRGBAUC2_swigregister(itkZeroFluxNeumannPadImageFilterIRGBAUC2IRGBAUC2)
itkZeroFluxNeumannPadImageFilterIRGBAUC2IRGBAUC2___New_orig__ = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIRGBAUC2IRGBAUC2___New_orig__
itkZeroFluxNeumannPadImageFilterIRGBAUC2IRGBAUC2_cast = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIRGBAUC2IRGBAUC2_cast


def itkZeroFluxNeumannPadImageFilterIRGBAUC3IRGBAUC3_New():
    return itkZeroFluxNeumannPadImageFilterIRGBAUC3IRGBAUC3.New()

class itkZeroFluxNeumannPadImageFilterIRGBAUC3IRGBAUC3(itk.itkPadImageFilterPython.itkPadImageFilterIRGBAUC3IRGBAUC3):
    r"""


    Increase the image size by padding according to the zero-flux Neumann
    boundary condition.

    A filter which extends the image size and fill the missing pixels
    according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this filter on an image with a corner like:
    returns the following padded image:

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   WrapPadImageFilter, MirrorPadImageFilter,
    ConstantPadImageFilter, ZeroFluxNeumannBoundaryCondition 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIRGBAUC3IRGBAUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIRGBAUC3IRGBAUC3_Clone)
    OutputEqualityComparableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIRGBAUC3IRGBAUC3_OutputEqualityComparableCheck
    
    InputConvertibleToOutputCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIRGBAUC3IRGBAUC3_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIRGBAUC3IRGBAUC3_SameDimensionCheck
    
    OutputOStreamWritableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIRGBAUC3IRGBAUC3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkZeroFluxNeumannPadImageFilterPython.delete_itkZeroFluxNeumannPadImageFilterIRGBAUC3IRGBAUC3
    cast = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIRGBAUC3IRGBAUC3_cast)

    def New(*args, **kargs):
        """New() -> itkZeroFluxNeumannPadImageFilterIRGBAUC3IRGBAUC3

        Create a new object of the class itkZeroFluxNeumannPadImageFilterIRGBAUC3IRGBAUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkZeroFluxNeumannPadImageFilterIRGBAUC3IRGBAUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkZeroFluxNeumannPadImageFilterIRGBAUC3IRGBAUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkZeroFluxNeumannPadImageFilterIRGBAUC3IRGBAUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkZeroFluxNeumannPadImageFilterIRGBAUC3IRGBAUC3 in _itkZeroFluxNeumannPadImageFilterPython:
_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIRGBAUC3IRGBAUC3_swigregister(itkZeroFluxNeumannPadImageFilterIRGBAUC3IRGBAUC3)
itkZeroFluxNeumannPadImageFilterIRGBAUC3IRGBAUC3___New_orig__ = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIRGBAUC3IRGBAUC3___New_orig__
itkZeroFluxNeumannPadImageFilterIRGBAUC3IRGBAUC3_cast = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIRGBAUC3IRGBAUC3_cast


def itkZeroFluxNeumannPadImageFilterIRGBUC2IRGBUC2_New():
    return itkZeroFluxNeumannPadImageFilterIRGBUC2IRGBUC2.New()

class itkZeroFluxNeumannPadImageFilterIRGBUC2IRGBUC2(itk.itkPadImageFilterPython.itkPadImageFilterIRGBUC2IRGBUC2):
    r"""


    Increase the image size by padding according to the zero-flux Neumann
    boundary condition.

    A filter which extends the image size and fill the missing pixels
    according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this filter on an image with a corner like:
    returns the following padded image:

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   WrapPadImageFilter, MirrorPadImageFilter,
    ConstantPadImageFilter, ZeroFluxNeumannBoundaryCondition 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIRGBUC2IRGBUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIRGBUC2IRGBUC2_Clone)
    OutputEqualityComparableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIRGBUC2IRGBUC2_OutputEqualityComparableCheck
    
    InputConvertibleToOutputCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIRGBUC2IRGBUC2_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIRGBUC2IRGBUC2_SameDimensionCheck
    
    OutputOStreamWritableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIRGBUC2IRGBUC2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkZeroFluxNeumannPadImageFilterPython.delete_itkZeroFluxNeumannPadImageFilterIRGBUC2IRGBUC2
    cast = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIRGBUC2IRGBUC2_cast)

    def New(*args, **kargs):
        """New() -> itkZeroFluxNeumannPadImageFilterIRGBUC2IRGBUC2

        Create a new object of the class itkZeroFluxNeumannPadImageFilterIRGBUC2IRGBUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkZeroFluxNeumannPadImageFilterIRGBUC2IRGBUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkZeroFluxNeumannPadImageFilterIRGBUC2IRGBUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkZeroFluxNeumannPadImageFilterIRGBUC2IRGBUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkZeroFluxNeumannPadImageFilterIRGBUC2IRGBUC2 in _itkZeroFluxNeumannPadImageFilterPython:
_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIRGBUC2IRGBUC2_swigregister(itkZeroFluxNeumannPadImageFilterIRGBUC2IRGBUC2)
itkZeroFluxNeumannPadImageFilterIRGBUC2IRGBUC2___New_orig__ = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIRGBUC2IRGBUC2___New_orig__
itkZeroFluxNeumannPadImageFilterIRGBUC2IRGBUC2_cast = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIRGBUC2IRGBUC2_cast


def itkZeroFluxNeumannPadImageFilterIRGBUC3IRGBUC3_New():
    return itkZeroFluxNeumannPadImageFilterIRGBUC3IRGBUC3.New()

class itkZeroFluxNeumannPadImageFilterIRGBUC3IRGBUC3(itk.itkPadImageFilterPython.itkPadImageFilterIRGBUC3IRGBUC3):
    r"""


    Increase the image size by padding according to the zero-flux Neumann
    boundary condition.

    A filter which extends the image size and fill the missing pixels
    according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this filter on an image with a corner like:
    returns the following padded image:

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   WrapPadImageFilter, MirrorPadImageFilter,
    ConstantPadImageFilter, ZeroFluxNeumannBoundaryCondition 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIRGBUC3IRGBUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIRGBUC3IRGBUC3_Clone)
    OutputEqualityComparableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIRGBUC3IRGBUC3_OutputEqualityComparableCheck
    
    InputConvertibleToOutputCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIRGBUC3IRGBUC3_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIRGBUC3IRGBUC3_SameDimensionCheck
    
    OutputOStreamWritableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIRGBUC3IRGBUC3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkZeroFluxNeumannPadImageFilterPython.delete_itkZeroFluxNeumannPadImageFilterIRGBUC3IRGBUC3
    cast = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIRGBUC3IRGBUC3_cast)

    def New(*args, **kargs):
        """New() -> itkZeroFluxNeumannPadImageFilterIRGBUC3IRGBUC3

        Create a new object of the class itkZeroFluxNeumannPadImageFilterIRGBUC3IRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkZeroFluxNeumannPadImageFilterIRGBUC3IRGBUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkZeroFluxNeumannPadImageFilterIRGBUC3IRGBUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkZeroFluxNeumannPadImageFilterIRGBUC3IRGBUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkZeroFluxNeumannPadImageFilterIRGBUC3IRGBUC3 in _itkZeroFluxNeumannPadImageFilterPython:
_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIRGBUC3IRGBUC3_swigregister(itkZeroFluxNeumannPadImageFilterIRGBUC3IRGBUC3)
itkZeroFluxNeumannPadImageFilterIRGBUC3IRGBUC3___New_orig__ = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIRGBUC3IRGBUC3___New_orig__
itkZeroFluxNeumannPadImageFilterIRGBUC3IRGBUC3_cast = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIRGBUC3IRGBUC3_cast


def itkZeroFluxNeumannPadImageFilterISS2ISS2_New():
    return itkZeroFluxNeumannPadImageFilterISS2ISS2.New()

class itkZeroFluxNeumannPadImageFilterISS2ISS2(itk.itkPadImageFilterPython.itkPadImageFilterISS2ISS2):
    r"""


    Increase the image size by padding according to the zero-flux Neumann
    boundary condition.

    A filter which extends the image size and fill the missing pixels
    according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this filter on an image with a corner like:
    returns the following padded image:

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   WrapPadImageFilter, MirrorPadImageFilter,
    ConstantPadImageFilter, ZeroFluxNeumannBoundaryCondition 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterISS2ISS2_Clone)
    OutputEqualityComparableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterISS2ISS2_OutputEqualityComparableCheck
    
    InputConvertibleToOutputCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterISS2ISS2_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterISS2ISS2_SameDimensionCheck
    
    OutputOStreamWritableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterISS2ISS2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkZeroFluxNeumannPadImageFilterPython.delete_itkZeroFluxNeumannPadImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkZeroFluxNeumannPadImageFilterISS2ISS2

        Create a new object of the class itkZeroFluxNeumannPadImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkZeroFluxNeumannPadImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkZeroFluxNeumannPadImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkZeroFluxNeumannPadImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkZeroFluxNeumannPadImageFilterISS2ISS2 in _itkZeroFluxNeumannPadImageFilterPython:
_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterISS2ISS2_swigregister(itkZeroFluxNeumannPadImageFilterISS2ISS2)
itkZeroFluxNeumannPadImageFilterISS2ISS2___New_orig__ = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterISS2ISS2___New_orig__
itkZeroFluxNeumannPadImageFilterISS2ISS2_cast = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterISS2ISS2_cast


def itkZeroFluxNeumannPadImageFilterISS3ISS3_New():
    return itkZeroFluxNeumannPadImageFilterISS3ISS3.New()

class itkZeroFluxNeumannPadImageFilterISS3ISS3(itk.itkPadImageFilterPython.itkPadImageFilterISS3ISS3):
    r"""


    Increase the image size by padding according to the zero-flux Neumann
    boundary condition.

    A filter which extends the image size and fill the missing pixels
    according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this filter on an image with a corner like:
    returns the following padded image:

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   WrapPadImageFilter, MirrorPadImageFilter,
    ConstantPadImageFilter, ZeroFluxNeumannBoundaryCondition 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterISS3ISS3_Clone)
    OutputEqualityComparableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterISS3ISS3_OutputEqualityComparableCheck
    
    InputConvertibleToOutputCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterISS3ISS3_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterISS3ISS3_SameDimensionCheck
    
    OutputOStreamWritableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterISS3ISS3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkZeroFluxNeumannPadImageFilterPython.delete_itkZeroFluxNeumannPadImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkZeroFluxNeumannPadImageFilterISS3ISS3

        Create a new object of the class itkZeroFluxNeumannPadImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkZeroFluxNeumannPadImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkZeroFluxNeumannPadImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkZeroFluxNeumannPadImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkZeroFluxNeumannPadImageFilterISS3ISS3 in _itkZeroFluxNeumannPadImageFilterPython:
_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterISS3ISS3_swigregister(itkZeroFluxNeumannPadImageFilterISS3ISS3)
itkZeroFluxNeumannPadImageFilterISS3ISS3___New_orig__ = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterISS3ISS3___New_orig__
itkZeroFluxNeumannPadImageFilterISS3ISS3_cast = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterISS3ISS3_cast


def itkZeroFluxNeumannPadImageFilterIUC2IUC2_New():
    return itkZeroFluxNeumannPadImageFilterIUC2IUC2.New()

class itkZeroFluxNeumannPadImageFilterIUC2IUC2(itk.itkPadImageFilterPython.itkPadImageFilterIUC2IUC2):
    r"""


    Increase the image size by padding according to the zero-flux Neumann
    boundary condition.

    A filter which extends the image size and fill the missing pixels
    according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this filter on an image with a corner like:
    returns the following padded image:

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   WrapPadImageFilter, MirrorPadImageFilter,
    ConstantPadImageFilter, ZeroFluxNeumannBoundaryCondition 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIUC2IUC2_Clone)
    OutputEqualityComparableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIUC2IUC2_OutputEqualityComparableCheck
    
    InputConvertibleToOutputCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIUC2IUC2_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIUC2IUC2_SameDimensionCheck
    
    OutputOStreamWritableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIUC2IUC2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkZeroFluxNeumannPadImageFilterPython.delete_itkZeroFluxNeumannPadImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkZeroFluxNeumannPadImageFilterIUC2IUC2

        Create a new object of the class itkZeroFluxNeumannPadImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkZeroFluxNeumannPadImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkZeroFluxNeumannPadImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkZeroFluxNeumannPadImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkZeroFluxNeumannPadImageFilterIUC2IUC2 in _itkZeroFluxNeumannPadImageFilterPython:
_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIUC2IUC2_swigregister(itkZeroFluxNeumannPadImageFilterIUC2IUC2)
itkZeroFluxNeumannPadImageFilterIUC2IUC2___New_orig__ = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIUC2IUC2___New_orig__
itkZeroFluxNeumannPadImageFilterIUC2IUC2_cast = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIUC2IUC2_cast


def itkZeroFluxNeumannPadImageFilterIUC3IUC3_New():
    return itkZeroFluxNeumannPadImageFilterIUC3IUC3.New()

class itkZeroFluxNeumannPadImageFilterIUC3IUC3(itk.itkPadImageFilterPython.itkPadImageFilterIUC3IUC3):
    r"""


    Increase the image size by padding according to the zero-flux Neumann
    boundary condition.

    A filter which extends the image size and fill the missing pixels
    according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this filter on an image with a corner like:
    returns the following padded image:

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   WrapPadImageFilter, MirrorPadImageFilter,
    ConstantPadImageFilter, ZeroFluxNeumannBoundaryCondition 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIUC3IUC3_Clone)
    OutputEqualityComparableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIUC3IUC3_OutputEqualityComparableCheck
    
    InputConvertibleToOutputCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIUC3IUC3_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIUC3IUC3_SameDimensionCheck
    
    OutputOStreamWritableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIUC3IUC3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkZeroFluxNeumannPadImageFilterPython.delete_itkZeroFluxNeumannPadImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkZeroFluxNeumannPadImageFilterIUC3IUC3

        Create a new object of the class itkZeroFluxNeumannPadImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkZeroFluxNeumannPadImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkZeroFluxNeumannPadImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkZeroFluxNeumannPadImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkZeroFluxNeumannPadImageFilterIUC3IUC3 in _itkZeroFluxNeumannPadImageFilterPython:
_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIUC3IUC3_swigregister(itkZeroFluxNeumannPadImageFilterIUC3IUC3)
itkZeroFluxNeumannPadImageFilterIUC3IUC3___New_orig__ = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIUC3IUC3___New_orig__
itkZeroFluxNeumannPadImageFilterIUC3IUC3_cast = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIUC3IUC3_cast


def itkZeroFluxNeumannPadImageFilterIUS2IUS2_New():
    return itkZeroFluxNeumannPadImageFilterIUS2IUS2.New()

class itkZeroFluxNeumannPadImageFilterIUS2IUS2(itk.itkPadImageFilterPython.itkPadImageFilterIUS2IUS2):
    r"""


    Increase the image size by padding according to the zero-flux Neumann
    boundary condition.

    A filter which extends the image size and fill the missing pixels
    according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this filter on an image with a corner like:
    returns the following padded image:

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   WrapPadImageFilter, MirrorPadImageFilter,
    ConstantPadImageFilter, ZeroFluxNeumannBoundaryCondition 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIUS2IUS2_Clone)
    OutputEqualityComparableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIUS2IUS2_OutputEqualityComparableCheck
    
    InputConvertibleToOutputCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIUS2IUS2_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIUS2IUS2_SameDimensionCheck
    
    OutputOStreamWritableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIUS2IUS2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkZeroFluxNeumannPadImageFilterPython.delete_itkZeroFluxNeumannPadImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkZeroFluxNeumannPadImageFilterIUS2IUS2

        Create a new object of the class itkZeroFluxNeumannPadImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkZeroFluxNeumannPadImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkZeroFluxNeumannPadImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkZeroFluxNeumannPadImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkZeroFluxNeumannPadImageFilterIUS2IUS2 in _itkZeroFluxNeumannPadImageFilterPython:
_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIUS2IUS2_swigregister(itkZeroFluxNeumannPadImageFilterIUS2IUS2)
itkZeroFluxNeumannPadImageFilterIUS2IUS2___New_orig__ = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIUS2IUS2___New_orig__
itkZeroFluxNeumannPadImageFilterIUS2IUS2_cast = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIUS2IUS2_cast


def itkZeroFluxNeumannPadImageFilterIUS3IUS3_New():
    return itkZeroFluxNeumannPadImageFilterIUS3IUS3.New()

class itkZeroFluxNeumannPadImageFilterIUS3IUS3(itk.itkPadImageFilterPython.itkPadImageFilterIUS3IUS3):
    r"""


    Increase the image size by padding according to the zero-flux Neumann
    boundary condition.

    A filter which extends the image size and fill the missing pixels
    according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this filter on an image with a corner like:
    returns the following padded image:

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   WrapPadImageFilter, MirrorPadImageFilter,
    ConstantPadImageFilter, ZeroFluxNeumannBoundaryCondition 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIUS3IUS3_Clone)
    OutputEqualityComparableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIUS3IUS3_OutputEqualityComparableCheck
    
    InputConvertibleToOutputCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIUS3IUS3_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIUS3IUS3_SameDimensionCheck
    
    OutputOStreamWritableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIUS3IUS3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkZeroFluxNeumannPadImageFilterPython.delete_itkZeroFluxNeumannPadImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkZeroFluxNeumannPadImageFilterIUS3IUS3

        Create a new object of the class itkZeroFluxNeumannPadImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkZeroFluxNeumannPadImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkZeroFluxNeumannPadImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkZeroFluxNeumannPadImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkZeroFluxNeumannPadImageFilterIUS3IUS3 in _itkZeroFluxNeumannPadImageFilterPython:
_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIUS3IUS3_swigregister(itkZeroFluxNeumannPadImageFilterIUS3IUS3)
itkZeroFluxNeumannPadImageFilterIUS3IUS3___New_orig__ = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIUS3IUS3___New_orig__
itkZeroFluxNeumannPadImageFilterIUS3IUS3_cast = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIUS3IUS3_cast


def itkZeroFluxNeumannPadImageFilterIVF22IVF22_New():
    return itkZeroFluxNeumannPadImageFilterIVF22IVF22.New()

class itkZeroFluxNeumannPadImageFilterIVF22IVF22(itk.itkPadImageFilterPython.itkPadImageFilterIVF22IVF22):
    r"""


    Increase the image size by padding according to the zero-flux Neumann
    boundary condition.

    A filter which extends the image size and fill the missing pixels
    according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this filter on an image with a corner like:
    returns the following padded image:

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   WrapPadImageFilter, MirrorPadImageFilter,
    ConstantPadImageFilter, ZeroFluxNeumannBoundaryCondition 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF22IVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF22IVF22_Clone)
    OutputEqualityComparableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF22IVF22_OutputEqualityComparableCheck
    
    InputConvertibleToOutputCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF22IVF22_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF22IVF22_SameDimensionCheck
    
    OutputOStreamWritableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF22IVF22_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkZeroFluxNeumannPadImageFilterPython.delete_itkZeroFluxNeumannPadImageFilterIVF22IVF22
    cast = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF22IVF22_cast)

    def New(*args, **kargs):
        """New() -> itkZeroFluxNeumannPadImageFilterIVF22IVF22

        Create a new object of the class itkZeroFluxNeumannPadImageFilterIVF22IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkZeroFluxNeumannPadImageFilterIVF22IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkZeroFluxNeumannPadImageFilterIVF22IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkZeroFluxNeumannPadImageFilterIVF22IVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkZeroFluxNeumannPadImageFilterIVF22IVF22 in _itkZeroFluxNeumannPadImageFilterPython:
_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF22IVF22_swigregister(itkZeroFluxNeumannPadImageFilterIVF22IVF22)
itkZeroFluxNeumannPadImageFilterIVF22IVF22___New_orig__ = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF22IVF22___New_orig__
itkZeroFluxNeumannPadImageFilterIVF22IVF22_cast = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF22IVF22_cast


def itkZeroFluxNeumannPadImageFilterIVF23IVF23_New():
    return itkZeroFluxNeumannPadImageFilterIVF23IVF23.New()

class itkZeroFluxNeumannPadImageFilterIVF23IVF23(itk.itkPadImageFilterPython.itkPadImageFilterIVF23IVF23):
    r"""


    Increase the image size by padding according to the zero-flux Neumann
    boundary condition.

    A filter which extends the image size and fill the missing pixels
    according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this filter on an image with a corner like:
    returns the following padded image:

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   WrapPadImageFilter, MirrorPadImageFilter,
    ConstantPadImageFilter, ZeroFluxNeumannBoundaryCondition 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF23IVF23___New_orig__)
    Clone = _swig_new_instance_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF23IVF23_Clone)
    OutputEqualityComparableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF23IVF23_OutputEqualityComparableCheck
    
    InputConvertibleToOutputCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF23IVF23_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF23IVF23_SameDimensionCheck
    
    OutputOStreamWritableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF23IVF23_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkZeroFluxNeumannPadImageFilterPython.delete_itkZeroFluxNeumannPadImageFilterIVF23IVF23
    cast = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF23IVF23_cast)

    def New(*args, **kargs):
        """New() -> itkZeroFluxNeumannPadImageFilterIVF23IVF23

        Create a new object of the class itkZeroFluxNeumannPadImageFilterIVF23IVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkZeroFluxNeumannPadImageFilterIVF23IVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkZeroFluxNeumannPadImageFilterIVF23IVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkZeroFluxNeumannPadImageFilterIVF23IVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkZeroFluxNeumannPadImageFilterIVF23IVF23 in _itkZeroFluxNeumannPadImageFilterPython:
_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF23IVF23_swigregister(itkZeroFluxNeumannPadImageFilterIVF23IVF23)
itkZeroFluxNeumannPadImageFilterIVF23IVF23___New_orig__ = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF23IVF23___New_orig__
itkZeroFluxNeumannPadImageFilterIVF23IVF23_cast = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF23IVF23_cast


def itkZeroFluxNeumannPadImageFilterIVF32IVF32_New():
    return itkZeroFluxNeumannPadImageFilterIVF32IVF32.New()

class itkZeroFluxNeumannPadImageFilterIVF32IVF32(itk.itkPadImageFilterPython.itkPadImageFilterIVF32IVF32):
    r"""


    Increase the image size by padding according to the zero-flux Neumann
    boundary condition.

    A filter which extends the image size and fill the missing pixels
    according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this filter on an image with a corner like:
    returns the following padded image:

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   WrapPadImageFilter, MirrorPadImageFilter,
    ConstantPadImageFilter, ZeroFluxNeumannBoundaryCondition 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF32IVF32___New_orig__)
    Clone = _swig_new_instance_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF32IVF32_Clone)
    OutputEqualityComparableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF32IVF32_OutputEqualityComparableCheck
    
    InputConvertibleToOutputCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF32IVF32_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF32IVF32_SameDimensionCheck
    
    OutputOStreamWritableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF32IVF32_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkZeroFluxNeumannPadImageFilterPython.delete_itkZeroFluxNeumannPadImageFilterIVF32IVF32
    cast = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF32IVF32_cast)

    def New(*args, **kargs):
        """New() -> itkZeroFluxNeumannPadImageFilterIVF32IVF32

        Create a new object of the class itkZeroFluxNeumannPadImageFilterIVF32IVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkZeroFluxNeumannPadImageFilterIVF32IVF32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkZeroFluxNeumannPadImageFilterIVF32IVF32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkZeroFluxNeumannPadImageFilterIVF32IVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkZeroFluxNeumannPadImageFilterIVF32IVF32 in _itkZeroFluxNeumannPadImageFilterPython:
_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF32IVF32_swigregister(itkZeroFluxNeumannPadImageFilterIVF32IVF32)
itkZeroFluxNeumannPadImageFilterIVF32IVF32___New_orig__ = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF32IVF32___New_orig__
itkZeroFluxNeumannPadImageFilterIVF32IVF32_cast = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF32IVF32_cast


def itkZeroFluxNeumannPadImageFilterIVF33IVF33_New():
    return itkZeroFluxNeumannPadImageFilterIVF33IVF33.New()

class itkZeroFluxNeumannPadImageFilterIVF33IVF33(itk.itkPadImageFilterPython.itkPadImageFilterIVF33IVF33):
    r"""


    Increase the image size by padding according to the zero-flux Neumann
    boundary condition.

    A filter which extends the image size and fill the missing pixels
    according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this filter on an image with a corner like:
    returns the following padded image:

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   WrapPadImageFilter, MirrorPadImageFilter,
    ConstantPadImageFilter, ZeroFluxNeumannBoundaryCondition 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF33IVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF33IVF33_Clone)
    OutputEqualityComparableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF33IVF33_OutputEqualityComparableCheck
    
    InputConvertibleToOutputCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF33IVF33_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF33IVF33_SameDimensionCheck
    
    OutputOStreamWritableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF33IVF33_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkZeroFluxNeumannPadImageFilterPython.delete_itkZeroFluxNeumannPadImageFilterIVF33IVF33
    cast = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF33IVF33_cast)

    def New(*args, **kargs):
        """New() -> itkZeroFluxNeumannPadImageFilterIVF33IVF33

        Create a new object of the class itkZeroFluxNeumannPadImageFilterIVF33IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkZeroFluxNeumannPadImageFilterIVF33IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkZeroFluxNeumannPadImageFilterIVF33IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkZeroFluxNeumannPadImageFilterIVF33IVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkZeroFluxNeumannPadImageFilterIVF33IVF33 in _itkZeroFluxNeumannPadImageFilterPython:
_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF33IVF33_swigregister(itkZeroFluxNeumannPadImageFilterIVF33IVF33)
itkZeroFluxNeumannPadImageFilterIVF33IVF33___New_orig__ = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF33IVF33___New_orig__
itkZeroFluxNeumannPadImageFilterIVF33IVF33_cast = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF33IVF33_cast


def itkZeroFluxNeumannPadImageFilterIVF42IVF42_New():
    return itkZeroFluxNeumannPadImageFilterIVF42IVF42.New()

class itkZeroFluxNeumannPadImageFilterIVF42IVF42(itk.itkPadImageFilterPython.itkPadImageFilterIVF42IVF42):
    r"""


    Increase the image size by padding according to the zero-flux Neumann
    boundary condition.

    A filter which extends the image size and fill the missing pixels
    according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this filter on an image with a corner like:
    returns the following padded image:

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   WrapPadImageFilter, MirrorPadImageFilter,
    ConstantPadImageFilter, ZeroFluxNeumannBoundaryCondition 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF42IVF42___New_orig__)
    Clone = _swig_new_instance_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF42IVF42_Clone)
    OutputEqualityComparableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF42IVF42_OutputEqualityComparableCheck
    
    InputConvertibleToOutputCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF42IVF42_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF42IVF42_SameDimensionCheck
    
    OutputOStreamWritableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF42IVF42_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkZeroFluxNeumannPadImageFilterPython.delete_itkZeroFluxNeumannPadImageFilterIVF42IVF42
    cast = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF42IVF42_cast)

    def New(*args, **kargs):
        """New() -> itkZeroFluxNeumannPadImageFilterIVF42IVF42

        Create a new object of the class itkZeroFluxNeumannPadImageFilterIVF42IVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkZeroFluxNeumannPadImageFilterIVF42IVF42.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkZeroFluxNeumannPadImageFilterIVF42IVF42.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkZeroFluxNeumannPadImageFilterIVF42IVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkZeroFluxNeumannPadImageFilterIVF42IVF42 in _itkZeroFluxNeumannPadImageFilterPython:
_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF42IVF42_swigregister(itkZeroFluxNeumannPadImageFilterIVF42IVF42)
itkZeroFluxNeumannPadImageFilterIVF42IVF42___New_orig__ = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF42IVF42___New_orig__
itkZeroFluxNeumannPadImageFilterIVF42IVF42_cast = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF42IVF42_cast


def itkZeroFluxNeumannPadImageFilterIVF43IVF43_New():
    return itkZeroFluxNeumannPadImageFilterIVF43IVF43.New()

class itkZeroFluxNeumannPadImageFilterIVF43IVF43(itk.itkPadImageFilterPython.itkPadImageFilterIVF43IVF43):
    r"""


    Increase the image size by padding according to the zero-flux Neumann
    boundary condition.

    A filter which extends the image size and fill the missing pixels
    according to a Neumann boundary condition where first, upwind
    derivatives on the boundary are zero. This is a useful condition in
    solving some classes of differential equations.

    For example, invoking this filter on an image with a corner like:
    returns the following padded image:

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   WrapPadImageFilter, MirrorPadImageFilter,
    ConstantPadImageFilter, ZeroFluxNeumannBoundaryCondition 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF43IVF43___New_orig__)
    Clone = _swig_new_instance_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF43IVF43_Clone)
    OutputEqualityComparableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF43IVF43_OutputEqualityComparableCheck
    
    InputConvertibleToOutputCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF43IVF43_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF43IVF43_SameDimensionCheck
    
    OutputOStreamWritableCheck = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF43IVF43_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkZeroFluxNeumannPadImageFilterPython.delete_itkZeroFluxNeumannPadImageFilterIVF43IVF43
    cast = _swig_new_static_method(_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF43IVF43_cast)

    def New(*args, **kargs):
        """New() -> itkZeroFluxNeumannPadImageFilterIVF43IVF43

        Create a new object of the class itkZeroFluxNeumannPadImageFilterIVF43IVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkZeroFluxNeumannPadImageFilterIVF43IVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkZeroFluxNeumannPadImageFilterIVF43IVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkZeroFluxNeumannPadImageFilterIVF43IVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkZeroFluxNeumannPadImageFilterIVF43IVF43 in _itkZeroFluxNeumannPadImageFilterPython:
_itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF43IVF43_swigregister(itkZeroFluxNeumannPadImageFilterIVF43IVF43)
itkZeroFluxNeumannPadImageFilterIVF43IVF43___New_orig__ = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF43IVF43___New_orig__
itkZeroFluxNeumannPadImageFilterIVF43IVF43_cast = _itkZeroFluxNeumannPadImageFilterPython.itkZeroFluxNeumannPadImageFilterIVF43IVF43_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def zero_flux_neumann_pad_image_filter(*args, **kwargs):
    """Procedural interface for ZeroFluxNeumannPadImageFilter"""
    import itk
    instance = itk.ZeroFluxNeumannPadImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def zero_flux_neumann_pad_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ZeroFluxNeumannPadImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.ZeroFluxNeumannPadImageFilter.values()[0]
    else:
        filter_object = itk.ZeroFluxNeumannPadImageFilter

    zero_flux_neumann_pad_image_filter.__doc__ = filter_object.__doc__
    zero_flux_neumann_pad_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    zero_flux_neumann_pad_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.ZeroFluxNeumannPadImageFilter, itkTemplate.itkTemplate):
        zero_flux_neumann_pad_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        zero_flux_neumann_pad_image_filter.__doc__ += "\n"
        zero_flux_neumann_pad_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        zero_flux_neumann_pad_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



