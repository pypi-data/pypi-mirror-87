# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKLevelSetsPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkParallelSparseFieldLevelSetImageFilterPython
else:
    import _itkParallelSparseFieldLevelSetImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkParallelSparseFieldLevelSetImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkParallelSparseFieldLevelSetImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkImageRegionPython
import itk.itkFiniteDifferenceImageFilterPython
import itk.itkFiniteDifferenceFunctionPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
import itk.itkImageToImageFilterCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImagePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterBPython

def itkParallelSparseFieldLevelSetImageFilterID2ID2_New():
    return itkParallelSparseFieldLevelSetImageFilterID2ID2.New()

class itkParallelSparseFieldLevelSetImageFilterID2ID2(itk.itkFiniteDifferenceImageFilterPython.itkFiniteDifferenceImageFilterID2ID2):
    r"""


    This class implements a finite difference partial differential
    equation solver for evolving surfaces embedded in volumes as level-
    sets.

    The "sparse field" approach to the level-set model is a logical
    extension of the classical narrow band technique, which seeks to
    minimize computational effort by restricting calculations to those
    pixels in a region of interest around the moving surface (the
    $k$-level curve). The sparse field method uses a narrow band that is
    exactly the width needed to calculate changes on the level curve for
    the next time step. Because the band of grid points under
    consideration is so sparse, this approach has several advantages: the
    algorithm does exactly the number of calculations needed to determine
    the next position of the $k$-level curve, and the distance transform
    around the level curve can be recomputed at each iteration.

    The sparse field algorithm works by constructing a linked list of
    indices that are adjacent to the $k$-level set. These indices are
    called the "active set". The values at these active set indices
    define the position of the $k$-level curve. The active set indices are
    shifted to follow the distance transform embedding of the $k$-level
    curve as their values move in and out of a fixed numerical range about
    $k$. In this way, the active set is maintained as only those pixels
    adjacent to the evolving surface. Calculations are then done only at
    indices contained in the active set.

    The city-block neighborhoods of the active set indices are maintained
    as separate lists called "layers". At each iteration, the values at
    the layers are reinitialized as the distance transform from the active
    set. The number of layers can be adjusted according to the footprint
    needed for the calculations on the level curve.

    Briefly, the sparse field solver algorithm is as follows:

    For each active layer index $x_j$: Compute the change at $u_{x_j}$,
    the grid point in the embedding, based on local geometry and external
    forces and using a stable numerical scheme.

    For each active layer index $x_j$, add the change to the grid point
    value and redefine the active set indices and those of its layers
    based on any value changes which have moved outside of the numerical
    range allowed for the active set.

    Starting with the first layers adjacent to the active set and moving
    outwards, reconstruct the distance transform by setting values in the
    layers according to their neighbors. At the very outer layers, add or
    remove indices which have come into or moved out of the sparse field.

    HOW TO USE THIS CLASS Typically, this class should be subclassed with
    additional functionality for specific applications. It is possible,
    however to use this solver as a filter directly by instantiating it
    and supplying it with an appropriate LevelSetFunction object via the
    SetDifferenceFunction method. See the subclasses and their associated
    documentation for more information on using this class. Also see the
    FiniteDifferenceImageFilter documentation for a general overview of
    this class of solvers. INPUTS This filter takes an itk::Image as
    input. The appropriate type of input image is entirely determined by
    the application. As a rule, however, the input type is immediately
    converted to the output type before processing. This is because the
    input is not assumed to be a real value type and must be converted to
    signed, real values for the calculations. The input values will also
    be shifted by the $k$ isosurface value so that the algorithm only
    needs to consider the zero level set. OUTPUTS The output of the filter
    is the distance transform embedding of the isosurface as the zero
    level set. Values outside the surface will be negative and values
    inside the surface will be positive. The distance transform only holds
    for those indices in layers around the active layer. Elsewhere, the
    values are a fixed positive or negative that is one greater than the
    layer of greatest magnitude. In other words, if there are three
    layers, then inside values increase only to 4.0 and outside values
    only to -4.0. PARAMETERS The NumberOfLayers parameter controls the
    number of layers inside and outside of the active set (see description
    above). The sparse field will contain 2*NumberOfLayers+1 lists of
    indices: the active set and city block neighbors inside and outside
    the active set. It is important to specify enough layers to cover the
    footprint of your calculations. In two dimensions, a minimum of 2
    layers is probably required. Higher order derivatives and other
    geometrical measures may require more layers. If too few layers are
    specified, then the calculations will pull values from the background,
    which may consist of arbitrary or random values.

    The IsoSurfaceValue indicates which value in the input represents the
    interface of interest. By default, this value is zero. When the solver
    initializes, it will subtract the IsoSurfaceValue from all values, in
    the input, shifting the isosurface of interest to zero in the output.
    IMPORTANT! Read the documentation for FiniteDifferenceImageFilter
    before attempting to use this filter. The solver requires that you
    specify a FiniteDifferenceFunction to use for calculations. This is
    set using the method SetDifferenceFunction in the parent class.
    REFERENCES Whitaker, Ross. A Level-Set Approach to 3D Reconstruction
    from Range Data. International Journal of Computer Vision. V. 29 No.
    3, 203-231. 1998.

    Sethian, J.A. Level Set Methods. Cambridge University Press. 1996. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID2ID2_Clone)
    SetNumberOfLayers = _swig_new_instance_method(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID2ID2_SetNumberOfLayers)
    GetNumberOfLayers = _swig_new_instance_method(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID2ID2_GetNumberOfLayers)
    SetIsoSurfaceValue = _swig_new_instance_method(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID2ID2_SetIsoSurfaceValue)
    GetIsoSurfaceValue = _swig_new_instance_method(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID2ID2_GetIsoSurfaceValue)
    GetActiveListForIndex = _swig_new_instance_method(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID2ID2_GetActiveListForIndex)
    OutputEqualityComparableCheck = _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID2ID2_OutputEqualityComparableCheck
    
    DoubleConvertibleToOutputCheck = _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID2ID2_DoubleConvertibleToOutputCheck
    
    OutputOStreamWritableCheck = _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID2ID2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkParallelSparseFieldLevelSetImageFilterPython.delete_itkParallelSparseFieldLevelSetImageFilterID2ID2
    cast = _swig_new_static_method(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkParallelSparseFieldLevelSetImageFilterID2ID2

        Create a new object of the class itkParallelSparseFieldLevelSetImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParallelSparseFieldLevelSetImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParallelSparseFieldLevelSetImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParallelSparseFieldLevelSetImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParallelSparseFieldLevelSetImageFilterID2ID2 in _itkParallelSparseFieldLevelSetImageFilterPython:
_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID2ID2_swigregister(itkParallelSparseFieldLevelSetImageFilterID2ID2)
itkParallelSparseFieldLevelSetImageFilterID2ID2___New_orig__ = _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID2ID2___New_orig__
itkParallelSparseFieldLevelSetImageFilterID2ID2_cast = _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID2ID2_cast


def itkParallelSparseFieldLevelSetImageFilterID3ID3_New():
    return itkParallelSparseFieldLevelSetImageFilterID3ID3.New()

class itkParallelSparseFieldLevelSetImageFilterID3ID3(itk.itkFiniteDifferenceImageFilterPython.itkFiniteDifferenceImageFilterID3ID3):
    r"""


    This class implements a finite difference partial differential
    equation solver for evolving surfaces embedded in volumes as level-
    sets.

    The "sparse field" approach to the level-set model is a logical
    extension of the classical narrow band technique, which seeks to
    minimize computational effort by restricting calculations to those
    pixels in a region of interest around the moving surface (the
    $k$-level curve). The sparse field method uses a narrow band that is
    exactly the width needed to calculate changes on the level curve for
    the next time step. Because the band of grid points under
    consideration is so sparse, this approach has several advantages: the
    algorithm does exactly the number of calculations needed to determine
    the next position of the $k$-level curve, and the distance transform
    around the level curve can be recomputed at each iteration.

    The sparse field algorithm works by constructing a linked list of
    indices that are adjacent to the $k$-level set. These indices are
    called the "active set". The values at these active set indices
    define the position of the $k$-level curve. The active set indices are
    shifted to follow the distance transform embedding of the $k$-level
    curve as their values move in and out of a fixed numerical range about
    $k$. In this way, the active set is maintained as only those pixels
    adjacent to the evolving surface. Calculations are then done only at
    indices contained in the active set.

    The city-block neighborhoods of the active set indices are maintained
    as separate lists called "layers". At each iteration, the values at
    the layers are reinitialized as the distance transform from the active
    set. The number of layers can be adjusted according to the footprint
    needed for the calculations on the level curve.

    Briefly, the sparse field solver algorithm is as follows:

    For each active layer index $x_j$: Compute the change at $u_{x_j}$,
    the grid point in the embedding, based on local geometry and external
    forces and using a stable numerical scheme.

    For each active layer index $x_j$, add the change to the grid point
    value and redefine the active set indices and those of its layers
    based on any value changes which have moved outside of the numerical
    range allowed for the active set.

    Starting with the first layers adjacent to the active set and moving
    outwards, reconstruct the distance transform by setting values in the
    layers according to their neighbors. At the very outer layers, add or
    remove indices which have come into or moved out of the sparse field.

    HOW TO USE THIS CLASS Typically, this class should be subclassed with
    additional functionality for specific applications. It is possible,
    however to use this solver as a filter directly by instantiating it
    and supplying it with an appropriate LevelSetFunction object via the
    SetDifferenceFunction method. See the subclasses and their associated
    documentation for more information on using this class. Also see the
    FiniteDifferenceImageFilter documentation for a general overview of
    this class of solvers. INPUTS This filter takes an itk::Image as
    input. The appropriate type of input image is entirely determined by
    the application. As a rule, however, the input type is immediately
    converted to the output type before processing. This is because the
    input is not assumed to be a real value type and must be converted to
    signed, real values for the calculations. The input values will also
    be shifted by the $k$ isosurface value so that the algorithm only
    needs to consider the zero level set. OUTPUTS The output of the filter
    is the distance transform embedding of the isosurface as the zero
    level set. Values outside the surface will be negative and values
    inside the surface will be positive. The distance transform only holds
    for those indices in layers around the active layer. Elsewhere, the
    values are a fixed positive or negative that is one greater than the
    layer of greatest magnitude. In other words, if there are three
    layers, then inside values increase only to 4.0 and outside values
    only to -4.0. PARAMETERS The NumberOfLayers parameter controls the
    number of layers inside and outside of the active set (see description
    above). The sparse field will contain 2*NumberOfLayers+1 lists of
    indices: the active set and city block neighbors inside and outside
    the active set. It is important to specify enough layers to cover the
    footprint of your calculations. In two dimensions, a minimum of 2
    layers is probably required. Higher order derivatives and other
    geometrical measures may require more layers. If too few layers are
    specified, then the calculations will pull values from the background,
    which may consist of arbitrary or random values.

    The IsoSurfaceValue indicates which value in the input represents the
    interface of interest. By default, this value is zero. When the solver
    initializes, it will subtract the IsoSurfaceValue from all values, in
    the input, shifting the isosurface of interest to zero in the output.
    IMPORTANT! Read the documentation for FiniteDifferenceImageFilter
    before attempting to use this filter. The solver requires that you
    specify a FiniteDifferenceFunction to use for calculations. This is
    set using the method SetDifferenceFunction in the parent class.
    REFERENCES Whitaker, Ross. A Level-Set Approach to 3D Reconstruction
    from Range Data. International Journal of Computer Vision. V. 29 No.
    3, 203-231. 1998.

    Sethian, J.A. Level Set Methods. Cambridge University Press. 1996. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID3ID3_Clone)
    SetNumberOfLayers = _swig_new_instance_method(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID3ID3_SetNumberOfLayers)
    GetNumberOfLayers = _swig_new_instance_method(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID3ID3_GetNumberOfLayers)
    SetIsoSurfaceValue = _swig_new_instance_method(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID3ID3_SetIsoSurfaceValue)
    GetIsoSurfaceValue = _swig_new_instance_method(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID3ID3_GetIsoSurfaceValue)
    GetActiveListForIndex = _swig_new_instance_method(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID3ID3_GetActiveListForIndex)
    OutputEqualityComparableCheck = _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID3ID3_OutputEqualityComparableCheck
    
    DoubleConvertibleToOutputCheck = _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID3ID3_DoubleConvertibleToOutputCheck
    
    OutputOStreamWritableCheck = _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID3ID3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkParallelSparseFieldLevelSetImageFilterPython.delete_itkParallelSparseFieldLevelSetImageFilterID3ID3
    cast = _swig_new_static_method(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkParallelSparseFieldLevelSetImageFilterID3ID3

        Create a new object of the class itkParallelSparseFieldLevelSetImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParallelSparseFieldLevelSetImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParallelSparseFieldLevelSetImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParallelSparseFieldLevelSetImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParallelSparseFieldLevelSetImageFilterID3ID3 in _itkParallelSparseFieldLevelSetImageFilterPython:
_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID3ID3_swigregister(itkParallelSparseFieldLevelSetImageFilterID3ID3)
itkParallelSparseFieldLevelSetImageFilterID3ID3___New_orig__ = _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID3ID3___New_orig__
itkParallelSparseFieldLevelSetImageFilterID3ID3_cast = _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID3ID3_cast


def itkParallelSparseFieldLevelSetImageFilterIF2IF2_New():
    return itkParallelSparseFieldLevelSetImageFilterIF2IF2.New()

class itkParallelSparseFieldLevelSetImageFilterIF2IF2(itk.itkFiniteDifferenceImageFilterPython.itkFiniteDifferenceImageFilterIF2IF2):
    r"""


    This class implements a finite difference partial differential
    equation solver for evolving surfaces embedded in volumes as level-
    sets.

    The "sparse field" approach to the level-set model is a logical
    extension of the classical narrow band technique, which seeks to
    minimize computational effort by restricting calculations to those
    pixels in a region of interest around the moving surface (the
    $k$-level curve). The sparse field method uses a narrow band that is
    exactly the width needed to calculate changes on the level curve for
    the next time step. Because the band of grid points under
    consideration is so sparse, this approach has several advantages: the
    algorithm does exactly the number of calculations needed to determine
    the next position of the $k$-level curve, and the distance transform
    around the level curve can be recomputed at each iteration.

    The sparse field algorithm works by constructing a linked list of
    indices that are adjacent to the $k$-level set. These indices are
    called the "active set". The values at these active set indices
    define the position of the $k$-level curve. The active set indices are
    shifted to follow the distance transform embedding of the $k$-level
    curve as their values move in and out of a fixed numerical range about
    $k$. In this way, the active set is maintained as only those pixels
    adjacent to the evolving surface. Calculations are then done only at
    indices contained in the active set.

    The city-block neighborhoods of the active set indices are maintained
    as separate lists called "layers". At each iteration, the values at
    the layers are reinitialized as the distance transform from the active
    set. The number of layers can be adjusted according to the footprint
    needed for the calculations on the level curve.

    Briefly, the sparse field solver algorithm is as follows:

    For each active layer index $x_j$: Compute the change at $u_{x_j}$,
    the grid point in the embedding, based on local geometry and external
    forces and using a stable numerical scheme.

    For each active layer index $x_j$, add the change to the grid point
    value and redefine the active set indices and those of its layers
    based on any value changes which have moved outside of the numerical
    range allowed for the active set.

    Starting with the first layers adjacent to the active set and moving
    outwards, reconstruct the distance transform by setting values in the
    layers according to their neighbors. At the very outer layers, add or
    remove indices which have come into or moved out of the sparse field.

    HOW TO USE THIS CLASS Typically, this class should be subclassed with
    additional functionality for specific applications. It is possible,
    however to use this solver as a filter directly by instantiating it
    and supplying it with an appropriate LevelSetFunction object via the
    SetDifferenceFunction method. See the subclasses and their associated
    documentation for more information on using this class. Also see the
    FiniteDifferenceImageFilter documentation for a general overview of
    this class of solvers. INPUTS This filter takes an itk::Image as
    input. The appropriate type of input image is entirely determined by
    the application. As a rule, however, the input type is immediately
    converted to the output type before processing. This is because the
    input is not assumed to be a real value type and must be converted to
    signed, real values for the calculations. The input values will also
    be shifted by the $k$ isosurface value so that the algorithm only
    needs to consider the zero level set. OUTPUTS The output of the filter
    is the distance transform embedding of the isosurface as the zero
    level set. Values outside the surface will be negative and values
    inside the surface will be positive. The distance transform only holds
    for those indices in layers around the active layer. Elsewhere, the
    values are a fixed positive or negative that is one greater than the
    layer of greatest magnitude. In other words, if there are three
    layers, then inside values increase only to 4.0 and outside values
    only to -4.0. PARAMETERS The NumberOfLayers parameter controls the
    number of layers inside and outside of the active set (see description
    above). The sparse field will contain 2*NumberOfLayers+1 lists of
    indices: the active set and city block neighbors inside and outside
    the active set. It is important to specify enough layers to cover the
    footprint of your calculations. In two dimensions, a minimum of 2
    layers is probably required. Higher order derivatives and other
    geometrical measures may require more layers. If too few layers are
    specified, then the calculations will pull values from the background,
    which may consist of arbitrary or random values.

    The IsoSurfaceValue indicates which value in the input represents the
    interface of interest. By default, this value is zero. When the solver
    initializes, it will subtract the IsoSurfaceValue from all values, in
    the input, shifting the isosurface of interest to zero in the output.
    IMPORTANT! Read the documentation for FiniteDifferenceImageFilter
    before attempting to use this filter. The solver requires that you
    specify a FiniteDifferenceFunction to use for calculations. This is
    set using the method SetDifferenceFunction in the parent class.
    REFERENCES Whitaker, Ross. A Level-Set Approach to 3D Reconstruction
    from Range Data. International Journal of Computer Vision. V. 29 No.
    3, 203-231. 1998.

    Sethian, J.A. Level Set Methods. Cambridge University Press. 1996. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF2IF2_Clone)
    SetNumberOfLayers = _swig_new_instance_method(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF2IF2_SetNumberOfLayers)
    GetNumberOfLayers = _swig_new_instance_method(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF2IF2_GetNumberOfLayers)
    SetIsoSurfaceValue = _swig_new_instance_method(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF2IF2_SetIsoSurfaceValue)
    GetIsoSurfaceValue = _swig_new_instance_method(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF2IF2_GetIsoSurfaceValue)
    GetActiveListForIndex = _swig_new_instance_method(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF2IF2_GetActiveListForIndex)
    OutputEqualityComparableCheck = _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF2IF2_OutputEqualityComparableCheck
    
    DoubleConvertibleToOutputCheck = _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF2IF2_DoubleConvertibleToOutputCheck
    
    OutputOStreamWritableCheck = _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF2IF2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkParallelSparseFieldLevelSetImageFilterPython.delete_itkParallelSparseFieldLevelSetImageFilterIF2IF2
    cast = _swig_new_static_method(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkParallelSparseFieldLevelSetImageFilterIF2IF2

        Create a new object of the class itkParallelSparseFieldLevelSetImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParallelSparseFieldLevelSetImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParallelSparseFieldLevelSetImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParallelSparseFieldLevelSetImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParallelSparseFieldLevelSetImageFilterIF2IF2 in _itkParallelSparseFieldLevelSetImageFilterPython:
_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF2IF2_swigregister(itkParallelSparseFieldLevelSetImageFilterIF2IF2)
itkParallelSparseFieldLevelSetImageFilterIF2IF2___New_orig__ = _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF2IF2___New_orig__
itkParallelSparseFieldLevelSetImageFilterIF2IF2_cast = _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF2IF2_cast


def itkParallelSparseFieldLevelSetImageFilterIF3IF3_New():
    return itkParallelSparseFieldLevelSetImageFilterIF3IF3.New()

class itkParallelSparseFieldLevelSetImageFilterIF3IF3(itk.itkFiniteDifferenceImageFilterPython.itkFiniteDifferenceImageFilterIF3IF3):
    r"""


    This class implements a finite difference partial differential
    equation solver for evolving surfaces embedded in volumes as level-
    sets.

    The "sparse field" approach to the level-set model is a logical
    extension of the classical narrow band technique, which seeks to
    minimize computational effort by restricting calculations to those
    pixels in a region of interest around the moving surface (the
    $k$-level curve). The sparse field method uses a narrow band that is
    exactly the width needed to calculate changes on the level curve for
    the next time step. Because the band of grid points under
    consideration is so sparse, this approach has several advantages: the
    algorithm does exactly the number of calculations needed to determine
    the next position of the $k$-level curve, and the distance transform
    around the level curve can be recomputed at each iteration.

    The sparse field algorithm works by constructing a linked list of
    indices that are adjacent to the $k$-level set. These indices are
    called the "active set". The values at these active set indices
    define the position of the $k$-level curve. The active set indices are
    shifted to follow the distance transform embedding of the $k$-level
    curve as their values move in and out of a fixed numerical range about
    $k$. In this way, the active set is maintained as only those pixels
    adjacent to the evolving surface. Calculations are then done only at
    indices contained in the active set.

    The city-block neighborhoods of the active set indices are maintained
    as separate lists called "layers". At each iteration, the values at
    the layers are reinitialized as the distance transform from the active
    set. The number of layers can be adjusted according to the footprint
    needed for the calculations on the level curve.

    Briefly, the sparse field solver algorithm is as follows:

    For each active layer index $x_j$: Compute the change at $u_{x_j}$,
    the grid point in the embedding, based on local geometry and external
    forces and using a stable numerical scheme.

    For each active layer index $x_j$, add the change to the grid point
    value and redefine the active set indices and those of its layers
    based on any value changes which have moved outside of the numerical
    range allowed for the active set.

    Starting with the first layers adjacent to the active set and moving
    outwards, reconstruct the distance transform by setting values in the
    layers according to their neighbors. At the very outer layers, add or
    remove indices which have come into or moved out of the sparse field.

    HOW TO USE THIS CLASS Typically, this class should be subclassed with
    additional functionality for specific applications. It is possible,
    however to use this solver as a filter directly by instantiating it
    and supplying it with an appropriate LevelSetFunction object via the
    SetDifferenceFunction method. See the subclasses and their associated
    documentation for more information on using this class. Also see the
    FiniteDifferenceImageFilter documentation for a general overview of
    this class of solvers. INPUTS This filter takes an itk::Image as
    input. The appropriate type of input image is entirely determined by
    the application. As a rule, however, the input type is immediately
    converted to the output type before processing. This is because the
    input is not assumed to be a real value type and must be converted to
    signed, real values for the calculations. The input values will also
    be shifted by the $k$ isosurface value so that the algorithm only
    needs to consider the zero level set. OUTPUTS The output of the filter
    is the distance transform embedding of the isosurface as the zero
    level set. Values outside the surface will be negative and values
    inside the surface will be positive. The distance transform only holds
    for those indices in layers around the active layer. Elsewhere, the
    values are a fixed positive or negative that is one greater than the
    layer of greatest magnitude. In other words, if there are three
    layers, then inside values increase only to 4.0 and outside values
    only to -4.0. PARAMETERS The NumberOfLayers parameter controls the
    number of layers inside and outside of the active set (see description
    above). The sparse field will contain 2*NumberOfLayers+1 lists of
    indices: the active set and city block neighbors inside and outside
    the active set. It is important to specify enough layers to cover the
    footprint of your calculations. In two dimensions, a minimum of 2
    layers is probably required. Higher order derivatives and other
    geometrical measures may require more layers. If too few layers are
    specified, then the calculations will pull values from the background,
    which may consist of arbitrary or random values.

    The IsoSurfaceValue indicates which value in the input represents the
    interface of interest. By default, this value is zero. When the solver
    initializes, it will subtract the IsoSurfaceValue from all values, in
    the input, shifting the isosurface of interest to zero in the output.
    IMPORTANT! Read the documentation for FiniteDifferenceImageFilter
    before attempting to use this filter. The solver requires that you
    specify a FiniteDifferenceFunction to use for calculations. This is
    set using the method SetDifferenceFunction in the parent class.
    REFERENCES Whitaker, Ross. A Level-Set Approach to 3D Reconstruction
    from Range Data. International Journal of Computer Vision. V. 29 No.
    3, 203-231. 1998.

    Sethian, J.A. Level Set Methods. Cambridge University Press. 1996. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF3IF3_Clone)
    SetNumberOfLayers = _swig_new_instance_method(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF3IF3_SetNumberOfLayers)
    GetNumberOfLayers = _swig_new_instance_method(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF3IF3_GetNumberOfLayers)
    SetIsoSurfaceValue = _swig_new_instance_method(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF3IF3_SetIsoSurfaceValue)
    GetIsoSurfaceValue = _swig_new_instance_method(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF3IF3_GetIsoSurfaceValue)
    GetActiveListForIndex = _swig_new_instance_method(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF3IF3_GetActiveListForIndex)
    OutputEqualityComparableCheck = _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF3IF3_OutputEqualityComparableCheck
    
    DoubleConvertibleToOutputCheck = _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF3IF3_DoubleConvertibleToOutputCheck
    
    OutputOStreamWritableCheck = _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF3IF3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkParallelSparseFieldLevelSetImageFilterPython.delete_itkParallelSparseFieldLevelSetImageFilterIF3IF3
    cast = _swig_new_static_method(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkParallelSparseFieldLevelSetImageFilterIF3IF3

        Create a new object of the class itkParallelSparseFieldLevelSetImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParallelSparseFieldLevelSetImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParallelSparseFieldLevelSetImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParallelSparseFieldLevelSetImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParallelSparseFieldLevelSetImageFilterIF3IF3 in _itkParallelSparseFieldLevelSetImageFilterPython:
_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF3IF3_swigregister(itkParallelSparseFieldLevelSetImageFilterIF3IF3)
itkParallelSparseFieldLevelSetImageFilterIF3IF3___New_orig__ = _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF3IF3___New_orig__
itkParallelSparseFieldLevelSetImageFilterIF3IF3_cast = _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF3IF3_cast

class itkParallelSparseFieldLevelSetNodeI2(object):
    r"""Proxy of C++ itkParallelSparseFieldLevelSetNodeI2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkParallelSparseFieldLevelSetNodeI2 self) -> itkParallelSparseFieldLevelSetNodeI2
        __init__(itkParallelSparseFieldLevelSetNodeI2 self, itkParallelSparseFieldLevelSetNodeI2 arg0) -> itkParallelSparseFieldLevelSetNodeI2
        """
        _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetNodeI2_swiginit(self, _itkParallelSparseFieldLevelSetImageFilterPython.new_itkParallelSparseFieldLevelSetNodeI2(*args))
    __swig_destroy__ = _itkParallelSparseFieldLevelSetImageFilterPython.delete_itkParallelSparseFieldLevelSetNodeI2

# Register itkParallelSparseFieldLevelSetNodeI2 in _itkParallelSparseFieldLevelSetImageFilterPython:
_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetNodeI2_swigregister(itkParallelSparseFieldLevelSetNodeI2)

class itkParallelSparseFieldLevelSetNodeI3(object):
    r"""Proxy of C++ itkParallelSparseFieldLevelSetNodeI3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkParallelSparseFieldLevelSetNodeI3 self) -> itkParallelSparseFieldLevelSetNodeI3
        __init__(itkParallelSparseFieldLevelSetNodeI3 self, itkParallelSparseFieldLevelSetNodeI3 arg0) -> itkParallelSparseFieldLevelSetNodeI3
        """
        _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetNodeI3_swiginit(self, _itkParallelSparseFieldLevelSetImageFilterPython.new_itkParallelSparseFieldLevelSetNodeI3(*args))
    __swig_destroy__ = _itkParallelSparseFieldLevelSetImageFilterPython.delete_itkParallelSparseFieldLevelSetNodeI3

# Register itkParallelSparseFieldLevelSetNodeI3 in _itkParallelSparseFieldLevelSetImageFilterPython:
_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetNodeI3_swigregister(itkParallelSparseFieldLevelSetNodeI3)


def itkSparseFieldLayerPSFLSNI2_New():
    return itkSparseFieldLayerPSFLSNI2.New()

class itkSparseFieldLayerPSFLSNI2(itk.ITKCommonBasePython.itkObject):
    r"""


    A very simple linked list that is used to manage nodes in a layer of a
    sparse field level-set solver.

    This class implements a very simple linked list that is used to manage
    nodes in a layer of a sparse field level-set solver. For more
    information on the sparse field level-set solver, see documentation
    for itk::SparseFieldLevelSetImageFilter. IMPORTANT! One important and
    distinctive feature of this list implementation (in fact, the entire
    reason for this object's existence) is that no memory
    allocation/deallocation occurs during linking or unlinking of nodes.
    The nodes themselves are expected to carry the appropriate "Next" &
    "Previous" fields used to link. Guaranteeing that no calls to new or
    delete are ever made for normal list operations allows us to safely
    use this class in a multithread environment without incurring
    penalties from heap contention among threads. Because no
    allocation/deallocation occurs, it is entirely up to the calling
    program to manage the allocating and freeing of the list nodes. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI2___New_orig__)
    Clone = _swig_new_instance_method(_itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI2_Clone)
    Front = _swig_new_instance_method(_itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI2_Front)
    PopFront = _swig_new_instance_method(_itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI2_PopFront)
    PushFront = _swig_new_instance_method(_itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI2_PushFront)
    Unlink = _swig_new_instance_method(_itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI2_Unlink)
    Empty = _swig_new_instance_method(_itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI2_Empty)
    Size = _swig_new_instance_method(_itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI2_Size)
    SplitRegions = _swig_new_instance_method(_itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI2_SplitRegions)
    __swig_destroy__ = _itkParallelSparseFieldLevelSetImageFilterPython.delete_itkSparseFieldLayerPSFLSNI2
    cast = _swig_new_static_method(_itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI2_cast)

    def New(*args, **kargs):
        """New() -> itkSparseFieldLayerPSFLSNI2

        Create a new object of the class itkSparseFieldLayerPSFLSNI2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSparseFieldLayerPSFLSNI2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSparseFieldLayerPSFLSNI2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSparseFieldLayerPSFLSNI2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSparseFieldLayerPSFLSNI2 in _itkParallelSparseFieldLevelSetImageFilterPython:
_itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI2_swigregister(itkSparseFieldLayerPSFLSNI2)
itkSparseFieldLayerPSFLSNI2___New_orig__ = _itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI2___New_orig__
itkSparseFieldLayerPSFLSNI2_cast = _itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI2_cast


def itkSparseFieldLayerPSFLSNI3_New():
    return itkSparseFieldLayerPSFLSNI3.New()

class itkSparseFieldLayerPSFLSNI3(itk.ITKCommonBasePython.itkObject):
    r"""


    A very simple linked list that is used to manage nodes in a layer of a
    sparse field level-set solver.

    This class implements a very simple linked list that is used to manage
    nodes in a layer of a sparse field level-set solver. For more
    information on the sparse field level-set solver, see documentation
    for itk::SparseFieldLevelSetImageFilter. IMPORTANT! One important and
    distinctive feature of this list implementation (in fact, the entire
    reason for this object's existence) is that no memory
    allocation/deallocation occurs during linking or unlinking of nodes.
    The nodes themselves are expected to carry the appropriate "Next" &
    "Previous" fields used to link. Guaranteeing that no calls to new or
    delete are ever made for normal list operations allows us to safely
    use this class in a multithread environment without incurring
    penalties from heap contention among threads. Because no
    allocation/deallocation occurs, it is entirely up to the calling
    program to manage the allocating and freeing of the list nodes. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI3___New_orig__)
    Clone = _swig_new_instance_method(_itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI3_Clone)
    Front = _swig_new_instance_method(_itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI3_Front)
    PopFront = _swig_new_instance_method(_itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI3_PopFront)
    PushFront = _swig_new_instance_method(_itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI3_PushFront)
    Unlink = _swig_new_instance_method(_itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI3_Unlink)
    Empty = _swig_new_instance_method(_itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI3_Empty)
    Size = _swig_new_instance_method(_itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI3_Size)
    SplitRegions = _swig_new_instance_method(_itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI3_SplitRegions)
    __swig_destroy__ = _itkParallelSparseFieldLevelSetImageFilterPython.delete_itkSparseFieldLayerPSFLSNI3
    cast = _swig_new_static_method(_itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI3_cast)

    def New(*args, **kargs):
        """New() -> itkSparseFieldLayerPSFLSNI3

        Create a new object of the class itkSparseFieldLayerPSFLSNI3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSparseFieldLayerPSFLSNI3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSparseFieldLayerPSFLSNI3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSparseFieldLayerPSFLSNI3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSparseFieldLayerPSFLSNI3 in _itkParallelSparseFieldLevelSetImageFilterPython:
_itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI3_swigregister(itkSparseFieldLayerPSFLSNI3)
itkSparseFieldLayerPSFLSNI3___New_orig__ = _itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI3___New_orig__
itkSparseFieldLayerPSFLSNI3_cast = _itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def parallel_sparse_field_level_set_image_filter(*args, **kwargs):
    """Procedural interface for ParallelSparseFieldLevelSetImageFilter"""
    import itk
    instance = itk.ParallelSparseFieldLevelSetImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def parallel_sparse_field_level_set_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ParallelSparseFieldLevelSetImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.ParallelSparseFieldLevelSetImageFilter.values()[0]
    else:
        filter_object = itk.ParallelSparseFieldLevelSetImageFilter

    parallel_sparse_field_level_set_image_filter.__doc__ = filter_object.__doc__
    parallel_sparse_field_level_set_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    parallel_sparse_field_level_set_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.ParallelSparseFieldLevelSetImageFilter, itkTemplate.itkTemplate):
        parallel_sparse_field_level_set_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        parallel_sparse_field_level_set_image_filter.__doc__ += "\n"
        parallel_sparse_field_level_set_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        parallel_sparse_field_level_set_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



