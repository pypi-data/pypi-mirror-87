# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKIOMeshBasePython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkMeshFileReaderPython
else:
    import _itkMeshFileReaderPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkMeshFileReaderPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkMeshFileReaderPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkMeshSourcePython
import itk.itkMeshBasePython
import itk.itkBoundingBoxPython
import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vector_refPython
import itk.itkMapContainerPython
import itk.ITKCommonBasePython
import itk.itkVectorContainerPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkContinuousIndexPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkArrayPython
import itk.itkPointSetPython
import itk.itkMeshIOBasePython

def itkMeshFileReaderMD2_New():
    return itkMeshFileReaderMD2.New()

class itkMeshFileReaderMD2(itk.itkMeshSourcePython.itkMeshSourceMD2):
    r"""


    Mesh source that reads mesh data from a single file.

    This source object is a general filter to read data from a variety of
    file formats. It works with a MeshIOBase subclass to actually do the
    reading of the data. Object factory machinery can be used to
    automatically create the MeshIOBase, or the MeshIOBase can be manually
    created and set.

    TOutputMesh is the type expected by the external users of the filter.
    If data stored in the file is stored in a different format then
    specified by TOutputMesh, than this filter converts data between the
    file type and the external expected type. The ConvertTraits template
    argument is used to do the conversion.

    A Pluggable factory pattern is used this allows different kinds of
    readers to be registered (even at run time) without having to modify
    the code in this class. Normally just setting the FileName with the
    appropriate suffix is enough to get the reader to instantiate the
    correct MeshIO and read the file properly. However, some files have no
    accepted suffix, so you will have to manually create the MeshIO
    instance of the write type.

    See:   MeshIOBase

    Wanlin Zhu. Uviversity of New South Wales, Australia. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMeshFileReaderPython.itkMeshFileReaderMD2___New_orig__)
    Clone = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMD2_Clone)
    SetFileName = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMD2_SetFileName)
    GetFileName = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMD2_GetFileName)
    SetMeshIO = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMD2_SetMeshIO)
    GetModifiableMeshIO = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMD2_GetModifiableMeshIO)
    GetMeshIO = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMD2_GetMeshIO)
    GenerateOutputInformation = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMD2_GenerateOutputInformation)
    ReadPointData = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMD2_ReadPointData)
    ReadCellData = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMD2_ReadCellData)
    __swig_destroy__ = _itkMeshFileReaderPython.delete_itkMeshFileReaderMD2
    cast = _swig_new_static_method(_itkMeshFileReaderPython.itkMeshFileReaderMD2_cast)

    def New(*args, **kargs):
        """New() -> itkMeshFileReaderMD2

        Create a new object of the class itkMeshFileReaderMD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshFileReaderMD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeshFileReaderMD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeshFileReaderMD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshFileReaderMD2 in _itkMeshFileReaderPython:
_itkMeshFileReaderPython.itkMeshFileReaderMD2_swigregister(itkMeshFileReaderMD2)
itkMeshFileReaderMD2___New_orig__ = _itkMeshFileReaderPython.itkMeshFileReaderMD2___New_orig__
itkMeshFileReaderMD2_cast = _itkMeshFileReaderPython.itkMeshFileReaderMD2_cast


def itkMeshFileReaderMD3_New():
    return itkMeshFileReaderMD3.New()

class itkMeshFileReaderMD3(itk.itkMeshSourcePython.itkMeshSourceMD3):
    r"""


    Mesh source that reads mesh data from a single file.

    This source object is a general filter to read data from a variety of
    file formats. It works with a MeshIOBase subclass to actually do the
    reading of the data. Object factory machinery can be used to
    automatically create the MeshIOBase, or the MeshIOBase can be manually
    created and set.

    TOutputMesh is the type expected by the external users of the filter.
    If data stored in the file is stored in a different format then
    specified by TOutputMesh, than this filter converts data between the
    file type and the external expected type. The ConvertTraits template
    argument is used to do the conversion.

    A Pluggable factory pattern is used this allows different kinds of
    readers to be registered (even at run time) without having to modify
    the code in this class. Normally just setting the FileName with the
    appropriate suffix is enough to get the reader to instantiate the
    correct MeshIO and read the file properly. However, some files have no
    accepted suffix, so you will have to manually create the MeshIO
    instance of the write type.

    See:   MeshIOBase

    Wanlin Zhu. Uviversity of New South Wales, Australia. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMeshFileReaderPython.itkMeshFileReaderMD3___New_orig__)
    Clone = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMD3_Clone)
    SetFileName = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMD3_SetFileName)
    GetFileName = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMD3_GetFileName)
    SetMeshIO = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMD3_SetMeshIO)
    GetModifiableMeshIO = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMD3_GetModifiableMeshIO)
    GetMeshIO = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMD3_GetMeshIO)
    GenerateOutputInformation = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMD3_GenerateOutputInformation)
    ReadPointData = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMD3_ReadPointData)
    ReadCellData = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMD3_ReadCellData)
    __swig_destroy__ = _itkMeshFileReaderPython.delete_itkMeshFileReaderMD3
    cast = _swig_new_static_method(_itkMeshFileReaderPython.itkMeshFileReaderMD3_cast)

    def New(*args, **kargs):
        """New() -> itkMeshFileReaderMD3

        Create a new object of the class itkMeshFileReaderMD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshFileReaderMD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeshFileReaderMD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeshFileReaderMD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshFileReaderMD3 in _itkMeshFileReaderPython:
_itkMeshFileReaderPython.itkMeshFileReaderMD3_swigregister(itkMeshFileReaderMD3)
itkMeshFileReaderMD3___New_orig__ = _itkMeshFileReaderPython.itkMeshFileReaderMD3___New_orig__
itkMeshFileReaderMD3_cast = _itkMeshFileReaderPython.itkMeshFileReaderMD3_cast


def itkMeshFileReaderMF2_New():
    return itkMeshFileReaderMF2.New()

class itkMeshFileReaderMF2(itk.itkMeshSourcePython.itkMeshSourceMF2):
    r"""


    Mesh source that reads mesh data from a single file.

    This source object is a general filter to read data from a variety of
    file formats. It works with a MeshIOBase subclass to actually do the
    reading of the data. Object factory machinery can be used to
    automatically create the MeshIOBase, or the MeshIOBase can be manually
    created and set.

    TOutputMesh is the type expected by the external users of the filter.
    If data stored in the file is stored in a different format then
    specified by TOutputMesh, than this filter converts data between the
    file type and the external expected type. The ConvertTraits template
    argument is used to do the conversion.

    A Pluggable factory pattern is used this allows different kinds of
    readers to be registered (even at run time) without having to modify
    the code in this class. Normally just setting the FileName with the
    appropriate suffix is enough to get the reader to instantiate the
    correct MeshIO and read the file properly. However, some files have no
    accepted suffix, so you will have to manually create the MeshIO
    instance of the write type.

    See:   MeshIOBase

    Wanlin Zhu. Uviversity of New South Wales, Australia. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMeshFileReaderPython.itkMeshFileReaderMF2___New_orig__)
    Clone = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMF2_Clone)
    SetFileName = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMF2_SetFileName)
    GetFileName = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMF2_GetFileName)
    SetMeshIO = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMF2_SetMeshIO)
    GetModifiableMeshIO = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMF2_GetModifiableMeshIO)
    GetMeshIO = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMF2_GetMeshIO)
    GenerateOutputInformation = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMF2_GenerateOutputInformation)
    ReadPointData = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMF2_ReadPointData)
    ReadCellData = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMF2_ReadCellData)
    __swig_destroy__ = _itkMeshFileReaderPython.delete_itkMeshFileReaderMF2
    cast = _swig_new_static_method(_itkMeshFileReaderPython.itkMeshFileReaderMF2_cast)

    def New(*args, **kargs):
        """New() -> itkMeshFileReaderMF2

        Create a new object of the class itkMeshFileReaderMF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshFileReaderMF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeshFileReaderMF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeshFileReaderMF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshFileReaderMF2 in _itkMeshFileReaderPython:
_itkMeshFileReaderPython.itkMeshFileReaderMF2_swigregister(itkMeshFileReaderMF2)
itkMeshFileReaderMF2___New_orig__ = _itkMeshFileReaderPython.itkMeshFileReaderMF2___New_orig__
itkMeshFileReaderMF2_cast = _itkMeshFileReaderPython.itkMeshFileReaderMF2_cast


def itkMeshFileReaderMF3_New():
    return itkMeshFileReaderMF3.New()

class itkMeshFileReaderMF3(itk.itkMeshSourcePython.itkMeshSourceMF3):
    r"""


    Mesh source that reads mesh data from a single file.

    This source object is a general filter to read data from a variety of
    file formats. It works with a MeshIOBase subclass to actually do the
    reading of the data. Object factory machinery can be used to
    automatically create the MeshIOBase, or the MeshIOBase can be manually
    created and set.

    TOutputMesh is the type expected by the external users of the filter.
    If data stored in the file is stored in a different format then
    specified by TOutputMesh, than this filter converts data between the
    file type and the external expected type. The ConvertTraits template
    argument is used to do the conversion.

    A Pluggable factory pattern is used this allows different kinds of
    readers to be registered (even at run time) without having to modify
    the code in this class. Normally just setting the FileName with the
    appropriate suffix is enough to get the reader to instantiate the
    correct MeshIO and read the file properly. However, some files have no
    accepted suffix, so you will have to manually create the MeshIO
    instance of the write type.

    See:   MeshIOBase

    Wanlin Zhu. Uviversity of New South Wales, Australia. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMeshFileReaderPython.itkMeshFileReaderMF3___New_orig__)
    Clone = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMF3_Clone)
    SetFileName = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMF3_SetFileName)
    GetFileName = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMF3_GetFileName)
    SetMeshIO = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMF3_SetMeshIO)
    GetModifiableMeshIO = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMF3_GetModifiableMeshIO)
    GetMeshIO = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMF3_GetMeshIO)
    GenerateOutputInformation = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMF3_GenerateOutputInformation)
    ReadPointData = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMF3_ReadPointData)
    ReadCellData = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMF3_ReadCellData)
    __swig_destroy__ = _itkMeshFileReaderPython.delete_itkMeshFileReaderMF3
    cast = _swig_new_static_method(_itkMeshFileReaderPython.itkMeshFileReaderMF3_cast)

    def New(*args, **kargs):
        """New() -> itkMeshFileReaderMF3

        Create a new object of the class itkMeshFileReaderMF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshFileReaderMF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeshFileReaderMF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeshFileReaderMF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshFileReaderMF3 in _itkMeshFileReaderPython:
_itkMeshFileReaderPython.itkMeshFileReaderMF3_swigregister(itkMeshFileReaderMF3)
itkMeshFileReaderMF3___New_orig__ = _itkMeshFileReaderPython.itkMeshFileReaderMF3___New_orig__
itkMeshFileReaderMF3_cast = _itkMeshFileReaderPython.itkMeshFileReaderMF3_cast


def itkMeshFileReaderMSS2_New():
    return itkMeshFileReaderMSS2.New()

class itkMeshFileReaderMSS2(itk.itkMeshSourcePython.itkMeshSourceMSS2):
    r"""


    Mesh source that reads mesh data from a single file.

    This source object is a general filter to read data from a variety of
    file formats. It works with a MeshIOBase subclass to actually do the
    reading of the data. Object factory machinery can be used to
    automatically create the MeshIOBase, or the MeshIOBase can be manually
    created and set.

    TOutputMesh is the type expected by the external users of the filter.
    If data stored in the file is stored in a different format then
    specified by TOutputMesh, than this filter converts data between the
    file type and the external expected type. The ConvertTraits template
    argument is used to do the conversion.

    A Pluggable factory pattern is used this allows different kinds of
    readers to be registered (even at run time) without having to modify
    the code in this class. Normally just setting the FileName with the
    appropriate suffix is enough to get the reader to instantiate the
    correct MeshIO and read the file properly. However, some files have no
    accepted suffix, so you will have to manually create the MeshIO
    instance of the write type.

    See:   MeshIOBase

    Wanlin Zhu. Uviversity of New South Wales, Australia. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMeshFileReaderPython.itkMeshFileReaderMSS2___New_orig__)
    Clone = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMSS2_Clone)
    SetFileName = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMSS2_SetFileName)
    GetFileName = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMSS2_GetFileName)
    SetMeshIO = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMSS2_SetMeshIO)
    GetModifiableMeshIO = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMSS2_GetModifiableMeshIO)
    GetMeshIO = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMSS2_GetMeshIO)
    GenerateOutputInformation = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMSS2_GenerateOutputInformation)
    ReadPointData = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMSS2_ReadPointData)
    ReadCellData = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMSS2_ReadCellData)
    __swig_destroy__ = _itkMeshFileReaderPython.delete_itkMeshFileReaderMSS2
    cast = _swig_new_static_method(_itkMeshFileReaderPython.itkMeshFileReaderMSS2_cast)

    def New(*args, **kargs):
        """New() -> itkMeshFileReaderMSS2

        Create a new object of the class itkMeshFileReaderMSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshFileReaderMSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeshFileReaderMSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeshFileReaderMSS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshFileReaderMSS2 in _itkMeshFileReaderPython:
_itkMeshFileReaderPython.itkMeshFileReaderMSS2_swigregister(itkMeshFileReaderMSS2)
itkMeshFileReaderMSS2___New_orig__ = _itkMeshFileReaderPython.itkMeshFileReaderMSS2___New_orig__
itkMeshFileReaderMSS2_cast = _itkMeshFileReaderPython.itkMeshFileReaderMSS2_cast


def itkMeshFileReaderMSS3_New():
    return itkMeshFileReaderMSS3.New()

class itkMeshFileReaderMSS3(itk.itkMeshSourcePython.itkMeshSourceMSS3):
    r"""


    Mesh source that reads mesh data from a single file.

    This source object is a general filter to read data from a variety of
    file formats. It works with a MeshIOBase subclass to actually do the
    reading of the data. Object factory machinery can be used to
    automatically create the MeshIOBase, or the MeshIOBase can be manually
    created and set.

    TOutputMesh is the type expected by the external users of the filter.
    If data stored in the file is stored in a different format then
    specified by TOutputMesh, than this filter converts data between the
    file type and the external expected type. The ConvertTraits template
    argument is used to do the conversion.

    A Pluggable factory pattern is used this allows different kinds of
    readers to be registered (even at run time) without having to modify
    the code in this class. Normally just setting the FileName with the
    appropriate suffix is enough to get the reader to instantiate the
    correct MeshIO and read the file properly. However, some files have no
    accepted suffix, so you will have to manually create the MeshIO
    instance of the write type.

    See:   MeshIOBase

    Wanlin Zhu. Uviversity of New South Wales, Australia. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMeshFileReaderPython.itkMeshFileReaderMSS3___New_orig__)
    Clone = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMSS3_Clone)
    SetFileName = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMSS3_SetFileName)
    GetFileName = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMSS3_GetFileName)
    SetMeshIO = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMSS3_SetMeshIO)
    GetModifiableMeshIO = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMSS3_GetModifiableMeshIO)
    GetMeshIO = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMSS3_GetMeshIO)
    GenerateOutputInformation = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMSS3_GenerateOutputInformation)
    ReadPointData = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMSS3_ReadPointData)
    ReadCellData = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMSS3_ReadCellData)
    __swig_destroy__ = _itkMeshFileReaderPython.delete_itkMeshFileReaderMSS3
    cast = _swig_new_static_method(_itkMeshFileReaderPython.itkMeshFileReaderMSS3_cast)

    def New(*args, **kargs):
        """New() -> itkMeshFileReaderMSS3

        Create a new object of the class itkMeshFileReaderMSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshFileReaderMSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeshFileReaderMSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeshFileReaderMSS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshFileReaderMSS3 in _itkMeshFileReaderPython:
_itkMeshFileReaderPython.itkMeshFileReaderMSS3_swigregister(itkMeshFileReaderMSS3)
itkMeshFileReaderMSS3___New_orig__ = _itkMeshFileReaderPython.itkMeshFileReaderMSS3___New_orig__
itkMeshFileReaderMSS3_cast = _itkMeshFileReaderPython.itkMeshFileReaderMSS3_cast


def itkMeshFileReaderMUC2_New():
    return itkMeshFileReaderMUC2.New()

class itkMeshFileReaderMUC2(itk.itkMeshSourcePython.itkMeshSourceMUC2):
    r"""


    Mesh source that reads mesh data from a single file.

    This source object is a general filter to read data from a variety of
    file formats. It works with a MeshIOBase subclass to actually do the
    reading of the data. Object factory machinery can be used to
    automatically create the MeshIOBase, or the MeshIOBase can be manually
    created and set.

    TOutputMesh is the type expected by the external users of the filter.
    If data stored in the file is stored in a different format then
    specified by TOutputMesh, than this filter converts data between the
    file type and the external expected type. The ConvertTraits template
    argument is used to do the conversion.

    A Pluggable factory pattern is used this allows different kinds of
    readers to be registered (even at run time) without having to modify
    the code in this class. Normally just setting the FileName with the
    appropriate suffix is enough to get the reader to instantiate the
    correct MeshIO and read the file properly. However, some files have no
    accepted suffix, so you will have to manually create the MeshIO
    instance of the write type.

    See:   MeshIOBase

    Wanlin Zhu. Uviversity of New South Wales, Australia. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMeshFileReaderPython.itkMeshFileReaderMUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMUC2_Clone)
    SetFileName = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMUC2_SetFileName)
    GetFileName = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMUC2_GetFileName)
    SetMeshIO = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMUC2_SetMeshIO)
    GetModifiableMeshIO = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMUC2_GetModifiableMeshIO)
    GetMeshIO = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMUC2_GetMeshIO)
    GenerateOutputInformation = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMUC2_GenerateOutputInformation)
    ReadPointData = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMUC2_ReadPointData)
    ReadCellData = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMUC2_ReadCellData)
    __swig_destroy__ = _itkMeshFileReaderPython.delete_itkMeshFileReaderMUC2
    cast = _swig_new_static_method(_itkMeshFileReaderPython.itkMeshFileReaderMUC2_cast)

    def New(*args, **kargs):
        """New() -> itkMeshFileReaderMUC2

        Create a new object of the class itkMeshFileReaderMUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshFileReaderMUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeshFileReaderMUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeshFileReaderMUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshFileReaderMUC2 in _itkMeshFileReaderPython:
_itkMeshFileReaderPython.itkMeshFileReaderMUC2_swigregister(itkMeshFileReaderMUC2)
itkMeshFileReaderMUC2___New_orig__ = _itkMeshFileReaderPython.itkMeshFileReaderMUC2___New_orig__
itkMeshFileReaderMUC2_cast = _itkMeshFileReaderPython.itkMeshFileReaderMUC2_cast


def itkMeshFileReaderMUC3_New():
    return itkMeshFileReaderMUC3.New()

class itkMeshFileReaderMUC3(itk.itkMeshSourcePython.itkMeshSourceMUC3):
    r"""


    Mesh source that reads mesh data from a single file.

    This source object is a general filter to read data from a variety of
    file formats. It works with a MeshIOBase subclass to actually do the
    reading of the data. Object factory machinery can be used to
    automatically create the MeshIOBase, or the MeshIOBase can be manually
    created and set.

    TOutputMesh is the type expected by the external users of the filter.
    If data stored in the file is stored in a different format then
    specified by TOutputMesh, than this filter converts data between the
    file type and the external expected type. The ConvertTraits template
    argument is used to do the conversion.

    A Pluggable factory pattern is used this allows different kinds of
    readers to be registered (even at run time) without having to modify
    the code in this class. Normally just setting the FileName with the
    appropriate suffix is enough to get the reader to instantiate the
    correct MeshIO and read the file properly. However, some files have no
    accepted suffix, so you will have to manually create the MeshIO
    instance of the write type.

    See:   MeshIOBase

    Wanlin Zhu. Uviversity of New South Wales, Australia. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMeshFileReaderPython.itkMeshFileReaderMUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMUC3_Clone)
    SetFileName = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMUC3_SetFileName)
    GetFileName = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMUC3_GetFileName)
    SetMeshIO = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMUC3_SetMeshIO)
    GetModifiableMeshIO = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMUC3_GetModifiableMeshIO)
    GetMeshIO = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMUC3_GetMeshIO)
    GenerateOutputInformation = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMUC3_GenerateOutputInformation)
    ReadPointData = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMUC3_ReadPointData)
    ReadCellData = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMUC3_ReadCellData)
    __swig_destroy__ = _itkMeshFileReaderPython.delete_itkMeshFileReaderMUC3
    cast = _swig_new_static_method(_itkMeshFileReaderPython.itkMeshFileReaderMUC3_cast)

    def New(*args, **kargs):
        """New() -> itkMeshFileReaderMUC3

        Create a new object of the class itkMeshFileReaderMUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshFileReaderMUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeshFileReaderMUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeshFileReaderMUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshFileReaderMUC3 in _itkMeshFileReaderPython:
_itkMeshFileReaderPython.itkMeshFileReaderMUC3_swigregister(itkMeshFileReaderMUC3)
itkMeshFileReaderMUC3___New_orig__ = _itkMeshFileReaderPython.itkMeshFileReaderMUC3___New_orig__
itkMeshFileReaderMUC3_cast = _itkMeshFileReaderPython.itkMeshFileReaderMUC3_cast


def itkMeshFileReaderMUS2_New():
    return itkMeshFileReaderMUS2.New()

class itkMeshFileReaderMUS2(itk.itkMeshSourcePython.itkMeshSourceMUS2):
    r"""


    Mesh source that reads mesh data from a single file.

    This source object is a general filter to read data from a variety of
    file formats. It works with a MeshIOBase subclass to actually do the
    reading of the data. Object factory machinery can be used to
    automatically create the MeshIOBase, or the MeshIOBase can be manually
    created and set.

    TOutputMesh is the type expected by the external users of the filter.
    If data stored in the file is stored in a different format then
    specified by TOutputMesh, than this filter converts data between the
    file type and the external expected type. The ConvertTraits template
    argument is used to do the conversion.

    A Pluggable factory pattern is used this allows different kinds of
    readers to be registered (even at run time) without having to modify
    the code in this class. Normally just setting the FileName with the
    appropriate suffix is enough to get the reader to instantiate the
    correct MeshIO and read the file properly. However, some files have no
    accepted suffix, so you will have to manually create the MeshIO
    instance of the write type.

    See:   MeshIOBase

    Wanlin Zhu. Uviversity of New South Wales, Australia. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMeshFileReaderPython.itkMeshFileReaderMUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMUS2_Clone)
    SetFileName = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMUS2_SetFileName)
    GetFileName = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMUS2_GetFileName)
    SetMeshIO = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMUS2_SetMeshIO)
    GetModifiableMeshIO = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMUS2_GetModifiableMeshIO)
    GetMeshIO = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMUS2_GetMeshIO)
    GenerateOutputInformation = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMUS2_GenerateOutputInformation)
    ReadPointData = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMUS2_ReadPointData)
    ReadCellData = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMUS2_ReadCellData)
    __swig_destroy__ = _itkMeshFileReaderPython.delete_itkMeshFileReaderMUS2
    cast = _swig_new_static_method(_itkMeshFileReaderPython.itkMeshFileReaderMUS2_cast)

    def New(*args, **kargs):
        """New() -> itkMeshFileReaderMUS2

        Create a new object of the class itkMeshFileReaderMUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshFileReaderMUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeshFileReaderMUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeshFileReaderMUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshFileReaderMUS2 in _itkMeshFileReaderPython:
_itkMeshFileReaderPython.itkMeshFileReaderMUS2_swigregister(itkMeshFileReaderMUS2)
itkMeshFileReaderMUS2___New_orig__ = _itkMeshFileReaderPython.itkMeshFileReaderMUS2___New_orig__
itkMeshFileReaderMUS2_cast = _itkMeshFileReaderPython.itkMeshFileReaderMUS2_cast


def itkMeshFileReaderMUS3_New():
    return itkMeshFileReaderMUS3.New()

class itkMeshFileReaderMUS3(itk.itkMeshSourcePython.itkMeshSourceMUS3):
    r"""


    Mesh source that reads mesh data from a single file.

    This source object is a general filter to read data from a variety of
    file formats. It works with a MeshIOBase subclass to actually do the
    reading of the data. Object factory machinery can be used to
    automatically create the MeshIOBase, or the MeshIOBase can be manually
    created and set.

    TOutputMesh is the type expected by the external users of the filter.
    If data stored in the file is stored in a different format then
    specified by TOutputMesh, than this filter converts data between the
    file type and the external expected type. The ConvertTraits template
    argument is used to do the conversion.

    A Pluggable factory pattern is used this allows different kinds of
    readers to be registered (even at run time) without having to modify
    the code in this class. Normally just setting the FileName with the
    appropriate suffix is enough to get the reader to instantiate the
    correct MeshIO and read the file properly. However, some files have no
    accepted suffix, so you will have to manually create the MeshIO
    instance of the write type.

    See:   MeshIOBase

    Wanlin Zhu. Uviversity of New South Wales, Australia. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMeshFileReaderPython.itkMeshFileReaderMUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMUS3_Clone)
    SetFileName = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMUS3_SetFileName)
    GetFileName = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMUS3_GetFileName)
    SetMeshIO = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMUS3_SetMeshIO)
    GetModifiableMeshIO = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMUS3_GetModifiableMeshIO)
    GetMeshIO = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMUS3_GetMeshIO)
    GenerateOutputInformation = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMUS3_GenerateOutputInformation)
    ReadPointData = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMUS3_ReadPointData)
    ReadCellData = _swig_new_instance_method(_itkMeshFileReaderPython.itkMeshFileReaderMUS3_ReadCellData)
    __swig_destroy__ = _itkMeshFileReaderPython.delete_itkMeshFileReaderMUS3
    cast = _swig_new_static_method(_itkMeshFileReaderPython.itkMeshFileReaderMUS3_cast)

    def New(*args, **kargs):
        """New() -> itkMeshFileReaderMUS3

        Create a new object of the class itkMeshFileReaderMUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshFileReaderMUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeshFileReaderMUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeshFileReaderMUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshFileReaderMUS3 in _itkMeshFileReaderPython:
_itkMeshFileReaderPython.itkMeshFileReaderMUS3_swigregister(itkMeshFileReaderMUS3)
itkMeshFileReaderMUS3___New_orig__ = _itkMeshFileReaderPython.itkMeshFileReaderMUS3___New_orig__
itkMeshFileReaderMUS3_cast = _itkMeshFileReaderPython.itkMeshFileReaderMUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def mesh_file_reader(*args, **kwargs):
    """Procedural interface for MeshFileReader"""
    import itk
    instance = itk.MeshFileReader.New(*args, **kwargs)
    return instance.__internal_call__()

def mesh_file_reader_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.MeshFileReader, itkTemplate.itkTemplate):
        filter_object = itk.MeshFileReader.values()[0]
    else:
        filter_object = itk.MeshFileReader

    mesh_file_reader.__doc__ = filter_object.__doc__
    mesh_file_reader.__doc__ += "\n Args are Input(s) to the filter.\n"
    mesh_file_reader.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.MeshFileReader, itkTemplate.itkTemplate):
        mesh_file_reader.__doc__ += itkHelpers.filter_args(filter_object)[0]
        mesh_file_reader.__doc__ += "\n"
        mesh_file_reader.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        mesh_file_reader.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



