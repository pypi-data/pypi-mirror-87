# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKPathPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkPathToImageFilterPython
else:
    import _itkPathToImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkPathToImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkPathToImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkImagePython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.ITKCommonBasePython
import itk.itkPointPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkRGBAPixelPython
import itk.itkImageSourceCommonPython
import itk.itkPolyLineParametricPathPython
import itk.itkVectorContainerPython
import itk.itkContinuousIndexPython
import itk.itkParametricPathPython
import itk.itkPathBasePython

def itkPathToImageFilterPLPP2ID2_New():
    return itkPathToImageFilterPLPP2ID2.New()

class itkPathToImageFilterPLPP2ID2(itk.itkImageSourcePython.itkImageSourceID2):
    r"""


    Base class for filters that take a Path as input and produce an image
    as output. Base class for filters that take a Path as input and
    produce an image as output. By default, if the user does not specify
    the size of the output image, the maximum size of the path's bounding
    box is used. The default spacing of the image is given by the spacing
    of the input path (currently assumed internally to be 1.0). 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2ID2_Clone)
    SetInput = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2ID2_SetInput)
    GetInput = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2ID2_GetInput)
    SetSpacing = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2ID2_SetSpacing)
    GetSpacing = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2ID2_GetSpacing)
    SetPathValue = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2ID2_SetPathValue)
    GetPathValue = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2ID2_GetPathValue)
    SetBackgroundValue = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2ID2_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2ID2_GetBackgroundValue)
    SetOrigin = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2ID2_SetOrigin)
    GetOrigin = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2ID2_GetOrigin)
    SetSize = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2ID2_SetSize)
    GetSize = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2ID2_GetSize)
    __swig_destroy__ = _itkPathToImageFilterPython.delete_itkPathToImageFilterPLPP2ID2
    cast = _swig_new_static_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkPathToImageFilterPLPP2ID2

        Create a new object of the class itkPathToImageFilterPLPP2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPathToImageFilterPLPP2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPathToImageFilterPLPP2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPathToImageFilterPLPP2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPathToImageFilterPLPP2ID2 in _itkPathToImageFilterPython:
_itkPathToImageFilterPython.itkPathToImageFilterPLPP2ID2_swigregister(itkPathToImageFilterPLPP2ID2)
itkPathToImageFilterPLPP2ID2___New_orig__ = _itkPathToImageFilterPython.itkPathToImageFilterPLPP2ID2___New_orig__
itkPathToImageFilterPLPP2ID2_cast = _itkPathToImageFilterPython.itkPathToImageFilterPLPP2ID2_cast


def itkPathToImageFilterPLPP2IF2_New():
    return itkPathToImageFilterPLPP2IF2.New()

class itkPathToImageFilterPLPP2IF2(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""


    Base class for filters that take a Path as input and produce an image
    as output. Base class for filters that take a Path as input and
    produce an image as output. By default, if the user does not specify
    the size of the output image, the maximum size of the path's bounding
    box is used. The default spacing of the image is given by the spacing
    of the input path (currently assumed internally to be 1.0). 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2IF2_Clone)
    SetInput = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2IF2_SetInput)
    GetInput = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2IF2_GetInput)
    SetSpacing = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2IF2_SetSpacing)
    GetSpacing = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2IF2_GetSpacing)
    SetPathValue = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2IF2_SetPathValue)
    GetPathValue = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2IF2_GetPathValue)
    SetBackgroundValue = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2IF2_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2IF2_GetBackgroundValue)
    SetOrigin = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2IF2_SetOrigin)
    GetOrigin = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2IF2_GetOrigin)
    SetSize = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2IF2_SetSize)
    GetSize = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2IF2_GetSize)
    __swig_destroy__ = _itkPathToImageFilterPython.delete_itkPathToImageFilterPLPP2IF2
    cast = _swig_new_static_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkPathToImageFilterPLPP2IF2

        Create a new object of the class itkPathToImageFilterPLPP2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPathToImageFilterPLPP2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPathToImageFilterPLPP2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPathToImageFilterPLPP2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPathToImageFilterPLPP2IF2 in _itkPathToImageFilterPython:
_itkPathToImageFilterPython.itkPathToImageFilterPLPP2IF2_swigregister(itkPathToImageFilterPLPP2IF2)
itkPathToImageFilterPLPP2IF2___New_orig__ = _itkPathToImageFilterPython.itkPathToImageFilterPLPP2IF2___New_orig__
itkPathToImageFilterPLPP2IF2_cast = _itkPathToImageFilterPython.itkPathToImageFilterPLPP2IF2_cast


def itkPathToImageFilterPLPP2ISS2_New():
    return itkPathToImageFilterPLPP2ISS2.New()

class itkPathToImageFilterPLPP2ISS2(itk.itkImageSourcePython.itkImageSourceISS2):
    r"""


    Base class for filters that take a Path as input and produce an image
    as output. Base class for filters that take a Path as input and
    produce an image as output. By default, if the user does not specify
    the size of the output image, the maximum size of the path's bounding
    box is used. The default spacing of the image is given by the spacing
    of the input path (currently assumed internally to be 1.0). 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2ISS2_Clone)
    SetInput = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2ISS2_SetInput)
    GetInput = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2ISS2_GetInput)
    SetSpacing = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2ISS2_SetSpacing)
    GetSpacing = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2ISS2_GetSpacing)
    SetPathValue = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2ISS2_SetPathValue)
    GetPathValue = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2ISS2_GetPathValue)
    SetBackgroundValue = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2ISS2_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2ISS2_GetBackgroundValue)
    SetOrigin = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2ISS2_SetOrigin)
    GetOrigin = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2ISS2_GetOrigin)
    SetSize = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2ISS2_SetSize)
    GetSize = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2ISS2_GetSize)
    __swig_destroy__ = _itkPathToImageFilterPython.delete_itkPathToImageFilterPLPP2ISS2
    cast = _swig_new_static_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkPathToImageFilterPLPP2ISS2

        Create a new object of the class itkPathToImageFilterPLPP2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPathToImageFilterPLPP2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPathToImageFilterPLPP2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPathToImageFilterPLPP2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPathToImageFilterPLPP2ISS2 in _itkPathToImageFilterPython:
_itkPathToImageFilterPython.itkPathToImageFilterPLPP2ISS2_swigregister(itkPathToImageFilterPLPP2ISS2)
itkPathToImageFilterPLPP2ISS2___New_orig__ = _itkPathToImageFilterPython.itkPathToImageFilterPLPP2ISS2___New_orig__
itkPathToImageFilterPLPP2ISS2_cast = _itkPathToImageFilterPython.itkPathToImageFilterPLPP2ISS2_cast


def itkPathToImageFilterPLPP2IUC2_New():
    return itkPathToImageFilterPLPP2IUC2.New()

class itkPathToImageFilterPLPP2IUC2(itk.itkImageSourcePython.itkImageSourceIUC2):
    r"""


    Base class for filters that take a Path as input and produce an image
    as output. Base class for filters that take a Path as input and
    produce an image as output. By default, if the user does not specify
    the size of the output image, the maximum size of the path's bounding
    box is used. The default spacing of the image is given by the spacing
    of the input path (currently assumed internally to be 1.0). 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUC2_Clone)
    SetInput = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUC2_SetInput)
    GetInput = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUC2_GetInput)
    SetSpacing = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUC2_SetSpacing)
    GetSpacing = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUC2_GetSpacing)
    SetPathValue = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUC2_SetPathValue)
    GetPathValue = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUC2_GetPathValue)
    SetBackgroundValue = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUC2_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUC2_GetBackgroundValue)
    SetOrigin = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUC2_SetOrigin)
    GetOrigin = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUC2_GetOrigin)
    SetSize = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUC2_SetSize)
    GetSize = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUC2_GetSize)
    __swig_destroy__ = _itkPathToImageFilterPython.delete_itkPathToImageFilterPLPP2IUC2
    cast = _swig_new_static_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkPathToImageFilterPLPP2IUC2

        Create a new object of the class itkPathToImageFilterPLPP2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPathToImageFilterPLPP2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPathToImageFilterPLPP2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPathToImageFilterPLPP2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPathToImageFilterPLPP2IUC2 in _itkPathToImageFilterPython:
_itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUC2_swigregister(itkPathToImageFilterPLPP2IUC2)
itkPathToImageFilterPLPP2IUC2___New_orig__ = _itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUC2___New_orig__
itkPathToImageFilterPLPP2IUC2_cast = _itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUC2_cast


def itkPathToImageFilterPLPP2IUS2_New():
    return itkPathToImageFilterPLPP2IUS2.New()

class itkPathToImageFilterPLPP2IUS2(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""


    Base class for filters that take a Path as input and produce an image
    as output. Base class for filters that take a Path as input and
    produce an image as output. By default, if the user does not specify
    the size of the output image, the maximum size of the path's bounding
    box is used. The default spacing of the image is given by the spacing
    of the input path (currently assumed internally to be 1.0). 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUS2_Clone)
    SetInput = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUS2_SetInput)
    GetInput = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUS2_GetInput)
    SetSpacing = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUS2_SetSpacing)
    GetSpacing = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUS2_GetSpacing)
    SetPathValue = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUS2_SetPathValue)
    GetPathValue = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUS2_GetPathValue)
    SetBackgroundValue = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUS2_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUS2_GetBackgroundValue)
    SetOrigin = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUS2_SetOrigin)
    GetOrigin = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUS2_GetOrigin)
    SetSize = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUS2_SetSize)
    GetSize = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUS2_GetSize)
    __swig_destroy__ = _itkPathToImageFilterPython.delete_itkPathToImageFilterPLPP2IUS2
    cast = _swig_new_static_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkPathToImageFilterPLPP2IUS2

        Create a new object of the class itkPathToImageFilterPLPP2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPathToImageFilterPLPP2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPathToImageFilterPLPP2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPathToImageFilterPLPP2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPathToImageFilterPLPP2IUS2 in _itkPathToImageFilterPython:
_itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUS2_swigregister(itkPathToImageFilterPLPP2IUS2)
itkPathToImageFilterPLPP2IUS2___New_orig__ = _itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUS2___New_orig__
itkPathToImageFilterPLPP2IUS2_cast = _itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUS2_cast


def itkPathToImageFilterPLPP3ID3_New():
    return itkPathToImageFilterPLPP3ID3.New()

class itkPathToImageFilterPLPP3ID3(itk.itkImageSourcePython.itkImageSourceID3):
    r"""


    Base class for filters that take a Path as input and produce an image
    as output. Base class for filters that take a Path as input and
    produce an image as output. By default, if the user does not specify
    the size of the output image, the maximum size of the path's bounding
    box is used. The default spacing of the image is given by the spacing
    of the input path (currently assumed internally to be 1.0). 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3ID3_Clone)
    SetInput = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3ID3_SetInput)
    GetInput = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3ID3_GetInput)
    SetSpacing = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3ID3_SetSpacing)
    GetSpacing = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3ID3_GetSpacing)
    SetPathValue = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3ID3_SetPathValue)
    GetPathValue = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3ID3_GetPathValue)
    SetBackgroundValue = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3ID3_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3ID3_GetBackgroundValue)
    SetOrigin = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3ID3_SetOrigin)
    GetOrigin = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3ID3_GetOrigin)
    SetSize = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3ID3_SetSize)
    GetSize = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3ID3_GetSize)
    __swig_destroy__ = _itkPathToImageFilterPython.delete_itkPathToImageFilterPLPP3ID3
    cast = _swig_new_static_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkPathToImageFilterPLPP3ID3

        Create a new object of the class itkPathToImageFilterPLPP3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPathToImageFilterPLPP3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPathToImageFilterPLPP3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPathToImageFilterPLPP3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPathToImageFilterPLPP3ID3 in _itkPathToImageFilterPython:
_itkPathToImageFilterPython.itkPathToImageFilterPLPP3ID3_swigregister(itkPathToImageFilterPLPP3ID3)
itkPathToImageFilterPLPP3ID3___New_orig__ = _itkPathToImageFilterPython.itkPathToImageFilterPLPP3ID3___New_orig__
itkPathToImageFilterPLPP3ID3_cast = _itkPathToImageFilterPython.itkPathToImageFilterPLPP3ID3_cast


def itkPathToImageFilterPLPP3IF3_New():
    return itkPathToImageFilterPLPP3IF3.New()

class itkPathToImageFilterPLPP3IF3(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""


    Base class for filters that take a Path as input and produce an image
    as output. Base class for filters that take a Path as input and
    produce an image as output. By default, if the user does not specify
    the size of the output image, the maximum size of the path's bounding
    box is used. The default spacing of the image is given by the spacing
    of the input path (currently assumed internally to be 1.0). 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3IF3_Clone)
    SetInput = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3IF3_SetInput)
    GetInput = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3IF3_GetInput)
    SetSpacing = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3IF3_SetSpacing)
    GetSpacing = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3IF3_GetSpacing)
    SetPathValue = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3IF3_SetPathValue)
    GetPathValue = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3IF3_GetPathValue)
    SetBackgroundValue = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3IF3_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3IF3_GetBackgroundValue)
    SetOrigin = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3IF3_SetOrigin)
    GetOrigin = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3IF3_GetOrigin)
    SetSize = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3IF3_SetSize)
    GetSize = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3IF3_GetSize)
    __swig_destroy__ = _itkPathToImageFilterPython.delete_itkPathToImageFilterPLPP3IF3
    cast = _swig_new_static_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkPathToImageFilterPLPP3IF3

        Create a new object of the class itkPathToImageFilterPLPP3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPathToImageFilterPLPP3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPathToImageFilterPLPP3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPathToImageFilterPLPP3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPathToImageFilterPLPP3IF3 in _itkPathToImageFilterPython:
_itkPathToImageFilterPython.itkPathToImageFilterPLPP3IF3_swigregister(itkPathToImageFilterPLPP3IF3)
itkPathToImageFilterPLPP3IF3___New_orig__ = _itkPathToImageFilterPython.itkPathToImageFilterPLPP3IF3___New_orig__
itkPathToImageFilterPLPP3IF3_cast = _itkPathToImageFilterPython.itkPathToImageFilterPLPP3IF3_cast


def itkPathToImageFilterPLPP3ISS3_New():
    return itkPathToImageFilterPLPP3ISS3.New()

class itkPathToImageFilterPLPP3ISS3(itk.itkImageSourcePython.itkImageSourceISS3):
    r"""


    Base class for filters that take a Path as input and produce an image
    as output. Base class for filters that take a Path as input and
    produce an image as output. By default, if the user does not specify
    the size of the output image, the maximum size of the path's bounding
    box is used. The default spacing of the image is given by the spacing
    of the input path (currently assumed internally to be 1.0). 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3ISS3_Clone)
    SetInput = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3ISS3_SetInput)
    GetInput = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3ISS3_GetInput)
    SetSpacing = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3ISS3_SetSpacing)
    GetSpacing = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3ISS3_GetSpacing)
    SetPathValue = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3ISS3_SetPathValue)
    GetPathValue = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3ISS3_GetPathValue)
    SetBackgroundValue = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3ISS3_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3ISS3_GetBackgroundValue)
    SetOrigin = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3ISS3_SetOrigin)
    GetOrigin = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3ISS3_GetOrigin)
    SetSize = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3ISS3_SetSize)
    GetSize = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3ISS3_GetSize)
    __swig_destroy__ = _itkPathToImageFilterPython.delete_itkPathToImageFilterPLPP3ISS3
    cast = _swig_new_static_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkPathToImageFilterPLPP3ISS3

        Create a new object of the class itkPathToImageFilterPLPP3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPathToImageFilterPLPP3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPathToImageFilterPLPP3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPathToImageFilterPLPP3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPathToImageFilterPLPP3ISS3 in _itkPathToImageFilterPython:
_itkPathToImageFilterPython.itkPathToImageFilterPLPP3ISS3_swigregister(itkPathToImageFilterPLPP3ISS3)
itkPathToImageFilterPLPP3ISS3___New_orig__ = _itkPathToImageFilterPython.itkPathToImageFilterPLPP3ISS3___New_orig__
itkPathToImageFilterPLPP3ISS3_cast = _itkPathToImageFilterPython.itkPathToImageFilterPLPP3ISS3_cast


def itkPathToImageFilterPLPP3IUC3_New():
    return itkPathToImageFilterPLPP3IUC3.New()

class itkPathToImageFilterPLPP3IUC3(itk.itkImageSourcePython.itkImageSourceIUC3):
    r"""


    Base class for filters that take a Path as input and produce an image
    as output. Base class for filters that take a Path as input and
    produce an image as output. By default, if the user does not specify
    the size of the output image, the maximum size of the path's bounding
    box is used. The default spacing of the image is given by the spacing
    of the input path (currently assumed internally to be 1.0). 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUC3_Clone)
    SetInput = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUC3_SetInput)
    GetInput = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUC3_GetInput)
    SetSpacing = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUC3_SetSpacing)
    GetSpacing = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUC3_GetSpacing)
    SetPathValue = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUC3_SetPathValue)
    GetPathValue = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUC3_GetPathValue)
    SetBackgroundValue = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUC3_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUC3_GetBackgroundValue)
    SetOrigin = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUC3_SetOrigin)
    GetOrigin = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUC3_GetOrigin)
    SetSize = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUC3_SetSize)
    GetSize = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUC3_GetSize)
    __swig_destroy__ = _itkPathToImageFilterPython.delete_itkPathToImageFilterPLPP3IUC3
    cast = _swig_new_static_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkPathToImageFilterPLPP3IUC3

        Create a new object of the class itkPathToImageFilterPLPP3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPathToImageFilterPLPP3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPathToImageFilterPLPP3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPathToImageFilterPLPP3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPathToImageFilterPLPP3IUC3 in _itkPathToImageFilterPython:
_itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUC3_swigregister(itkPathToImageFilterPLPP3IUC3)
itkPathToImageFilterPLPP3IUC3___New_orig__ = _itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUC3___New_orig__
itkPathToImageFilterPLPP3IUC3_cast = _itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUC3_cast


def itkPathToImageFilterPLPP3IUS3_New():
    return itkPathToImageFilterPLPP3IUS3.New()

class itkPathToImageFilterPLPP3IUS3(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""


    Base class for filters that take a Path as input and produce an image
    as output. Base class for filters that take a Path as input and
    produce an image as output. By default, if the user does not specify
    the size of the output image, the maximum size of the path's bounding
    box is used. The default spacing of the image is given by the spacing
    of the input path (currently assumed internally to be 1.0). 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUS3_Clone)
    SetInput = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUS3_SetInput)
    GetInput = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUS3_GetInput)
    SetSpacing = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUS3_SetSpacing)
    GetSpacing = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUS3_GetSpacing)
    SetPathValue = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUS3_SetPathValue)
    GetPathValue = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUS3_GetPathValue)
    SetBackgroundValue = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUS3_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUS3_GetBackgroundValue)
    SetOrigin = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUS3_SetOrigin)
    GetOrigin = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUS3_GetOrigin)
    SetSize = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUS3_SetSize)
    GetSize = _swig_new_instance_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUS3_GetSize)
    __swig_destroy__ = _itkPathToImageFilterPython.delete_itkPathToImageFilterPLPP3IUS3
    cast = _swig_new_static_method(_itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkPathToImageFilterPLPP3IUS3

        Create a new object of the class itkPathToImageFilterPLPP3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPathToImageFilterPLPP3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPathToImageFilterPLPP3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPathToImageFilterPLPP3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPathToImageFilterPLPP3IUS3 in _itkPathToImageFilterPython:
_itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUS3_swigregister(itkPathToImageFilterPLPP3IUS3)
itkPathToImageFilterPLPP3IUS3___New_orig__ = _itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUS3___New_orig__
itkPathToImageFilterPLPP3IUS3_cast = _itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def path_to_image_filter(*args, **kwargs):
    """Procedural interface for PathToImageFilter"""
    import itk
    instance = itk.PathToImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def path_to_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.PathToImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.PathToImageFilter.values()[0]
    else:
        filter_object = itk.PathToImageFilter

    path_to_image_filter.__doc__ = filter_object.__doc__
    path_to_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    path_to_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.PathToImageFilter, itkTemplate.itkTemplate):
        path_to_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        path_to_image_filter.__doc__ += "\n"
        path_to_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        path_to_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



