# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageIntensityPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkComplexToRealImageFilterPython
else:
    import _itkComplexToRealImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkComplexToRealImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkComplexToRealImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkUnaryGeneratorImageFilterPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkImagePython
import itk.stdcomplexPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.vnl_vectorPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkPointPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterAPython
import itk.itkInPlaceImageFilterBPython

def itkComplexToRealImageFilterICF2IF2_New():
    return itkComplexToRealImageFilterICF2IF2.New()

class itkComplexToRealImageFilterICF2IF2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF2IF2):
    r"""


    Computes pixel-wise the real(x) part of a complex image. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkComplexToRealImageFilterPython.itkComplexToRealImageFilterICF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkComplexToRealImageFilterPython.itkComplexToRealImageFilterICF2IF2_Clone)
    InputConvertibleToOutputCheck = _itkComplexToRealImageFilterPython.itkComplexToRealImageFilterICF2IF2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkComplexToRealImageFilterPython.delete_itkComplexToRealImageFilterICF2IF2
    cast = _swig_new_static_method(_itkComplexToRealImageFilterPython.itkComplexToRealImageFilterICF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkComplexToRealImageFilterICF2IF2

        Create a new object of the class itkComplexToRealImageFilterICF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComplexToRealImageFilterICF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComplexToRealImageFilterICF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComplexToRealImageFilterICF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComplexToRealImageFilterICF2IF2 in _itkComplexToRealImageFilterPython:
_itkComplexToRealImageFilterPython.itkComplexToRealImageFilterICF2IF2_swigregister(itkComplexToRealImageFilterICF2IF2)
itkComplexToRealImageFilterICF2IF2___New_orig__ = _itkComplexToRealImageFilterPython.itkComplexToRealImageFilterICF2IF2___New_orig__
itkComplexToRealImageFilterICF2IF2_cast = _itkComplexToRealImageFilterPython.itkComplexToRealImageFilterICF2IF2_cast


def itkComplexToRealImageFilterICF3IF3_New():
    return itkComplexToRealImageFilterICF3IF3.New()

class itkComplexToRealImageFilterICF3IF3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF3IF3):
    r"""


    Computes pixel-wise the real(x) part of a complex image. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkComplexToRealImageFilterPython.itkComplexToRealImageFilterICF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkComplexToRealImageFilterPython.itkComplexToRealImageFilterICF3IF3_Clone)
    InputConvertibleToOutputCheck = _itkComplexToRealImageFilterPython.itkComplexToRealImageFilterICF3IF3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkComplexToRealImageFilterPython.delete_itkComplexToRealImageFilterICF3IF3
    cast = _swig_new_static_method(_itkComplexToRealImageFilterPython.itkComplexToRealImageFilterICF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkComplexToRealImageFilterICF3IF3

        Create a new object of the class itkComplexToRealImageFilterICF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComplexToRealImageFilterICF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComplexToRealImageFilterICF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComplexToRealImageFilterICF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComplexToRealImageFilterICF3IF3 in _itkComplexToRealImageFilterPython:
_itkComplexToRealImageFilterPython.itkComplexToRealImageFilterICF3IF3_swigregister(itkComplexToRealImageFilterICF3IF3)
itkComplexToRealImageFilterICF3IF3___New_orig__ = _itkComplexToRealImageFilterPython.itkComplexToRealImageFilterICF3IF3___New_orig__
itkComplexToRealImageFilterICF3IF3_cast = _itkComplexToRealImageFilterPython.itkComplexToRealImageFilterICF3IF3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def complex_to_real_image_filter(*args, **kwargs):
    """Procedural interface for ComplexToRealImageFilter"""
    import itk
    instance = itk.ComplexToRealImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def complex_to_real_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ComplexToRealImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.ComplexToRealImageFilter.values()[0]
    else:
        filter_object = itk.ComplexToRealImageFilter

    complex_to_real_image_filter.__doc__ = filter_object.__doc__
    complex_to_real_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    complex_to_real_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.ComplexToRealImageFilter, itkTemplate.itkTemplate):
        complex_to_real_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        complex_to_real_image_filter.__doc__ += "\n"
        complex_to_real_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        complex_to_real_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



