# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKQuadEdgeMeshPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkQuadEdgeMeshToQuadEdgeMeshFilterPython
else:
    import _itkQuadEdgeMeshToQuadEdgeMeshFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkQuadEdgeMeshToQuadEdgeMeshFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkQuadEdgeMeshToQuadEdgeMeshFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkQuadEdgeMeshBasePython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vector_refPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.ITKCommonBasePython
import itk.itkRGBPixelPython
import itk.itkQuadEdgeCellTraitsInfoPython
import itk.itkQuadEdgeMeshPointPython
import itk.itkGeometricalQuadEdgePython
import itk.itkQuadEdgePython
import itk.itkMapContainerPython
import itk.itkQuadEdgeMeshLineCellPython
import itk.itkArrayPython

def itkQuadEdgeMeshToQuadEdgeMeshFilterQEMD2QEMD2_New():
    return itkQuadEdgeMeshToQuadEdgeMeshFilterQEMD2QEMD2.New()

class itkQuadEdgeMeshToQuadEdgeMeshFilterQEMD2QEMD2(itk.itkQuadEdgeMeshBasePython.itkMeshToMeshFilterQEMD2QEMD2):
    r"""


    Duplicates the content of a Mesh.

    Alexandre Gouaillard, Leonardo Florez-Valencia, Eric Boix  This
    implementation was contributed as a paper to the Insight
    Journalhttps://hdl.handle.net/1926/306 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkQuadEdgeMeshToQuadEdgeMeshFilterPython.itkQuadEdgeMeshToQuadEdgeMeshFilterQEMD2QEMD2___New_orig__)
    Clone = _swig_new_instance_method(_itkQuadEdgeMeshToQuadEdgeMeshFilterPython.itkQuadEdgeMeshToQuadEdgeMeshFilterQEMD2QEMD2_Clone)
    __swig_destroy__ = _itkQuadEdgeMeshToQuadEdgeMeshFilterPython.delete_itkQuadEdgeMeshToQuadEdgeMeshFilterQEMD2QEMD2
    cast = _swig_new_static_method(_itkQuadEdgeMeshToQuadEdgeMeshFilterPython.itkQuadEdgeMeshToQuadEdgeMeshFilterQEMD2QEMD2_cast)

    def New(*args, **kargs):
        """New() -> itkQuadEdgeMeshToQuadEdgeMeshFilterQEMD2QEMD2

        Create a new object of the class itkQuadEdgeMeshToQuadEdgeMeshFilterQEMD2QEMD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkQuadEdgeMeshToQuadEdgeMeshFilterQEMD2QEMD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkQuadEdgeMeshToQuadEdgeMeshFilterQEMD2QEMD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkQuadEdgeMeshToQuadEdgeMeshFilterQEMD2QEMD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkQuadEdgeMeshToQuadEdgeMeshFilterQEMD2QEMD2 in _itkQuadEdgeMeshToQuadEdgeMeshFilterPython:
_itkQuadEdgeMeshToQuadEdgeMeshFilterPython.itkQuadEdgeMeshToQuadEdgeMeshFilterQEMD2QEMD2_swigregister(itkQuadEdgeMeshToQuadEdgeMeshFilterQEMD2QEMD2)
itkQuadEdgeMeshToQuadEdgeMeshFilterQEMD2QEMD2___New_orig__ = _itkQuadEdgeMeshToQuadEdgeMeshFilterPython.itkQuadEdgeMeshToQuadEdgeMeshFilterQEMD2QEMD2___New_orig__
itkQuadEdgeMeshToQuadEdgeMeshFilterQEMD2QEMD2_cast = _itkQuadEdgeMeshToQuadEdgeMeshFilterPython.itkQuadEdgeMeshToQuadEdgeMeshFilterQEMD2QEMD2_cast


def itkQuadEdgeMeshToQuadEdgeMeshFilterQEMD3QEMD3_New():
    return itkQuadEdgeMeshToQuadEdgeMeshFilterQEMD3QEMD3.New()

class itkQuadEdgeMeshToQuadEdgeMeshFilterQEMD3QEMD3(itk.itkQuadEdgeMeshBasePython.itkMeshToMeshFilterQEMD3QEMD3):
    r"""


    Duplicates the content of a Mesh.

    Alexandre Gouaillard, Leonardo Florez-Valencia, Eric Boix  This
    implementation was contributed as a paper to the Insight
    Journalhttps://hdl.handle.net/1926/306 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkQuadEdgeMeshToQuadEdgeMeshFilterPython.itkQuadEdgeMeshToQuadEdgeMeshFilterQEMD3QEMD3___New_orig__)
    Clone = _swig_new_instance_method(_itkQuadEdgeMeshToQuadEdgeMeshFilterPython.itkQuadEdgeMeshToQuadEdgeMeshFilterQEMD3QEMD3_Clone)
    __swig_destroy__ = _itkQuadEdgeMeshToQuadEdgeMeshFilterPython.delete_itkQuadEdgeMeshToQuadEdgeMeshFilterQEMD3QEMD3
    cast = _swig_new_static_method(_itkQuadEdgeMeshToQuadEdgeMeshFilterPython.itkQuadEdgeMeshToQuadEdgeMeshFilterQEMD3QEMD3_cast)

    def New(*args, **kargs):
        """New() -> itkQuadEdgeMeshToQuadEdgeMeshFilterQEMD3QEMD3

        Create a new object of the class itkQuadEdgeMeshToQuadEdgeMeshFilterQEMD3QEMD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkQuadEdgeMeshToQuadEdgeMeshFilterQEMD3QEMD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkQuadEdgeMeshToQuadEdgeMeshFilterQEMD3QEMD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkQuadEdgeMeshToQuadEdgeMeshFilterQEMD3QEMD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkQuadEdgeMeshToQuadEdgeMeshFilterQEMD3QEMD3 in _itkQuadEdgeMeshToQuadEdgeMeshFilterPython:
_itkQuadEdgeMeshToQuadEdgeMeshFilterPython.itkQuadEdgeMeshToQuadEdgeMeshFilterQEMD3QEMD3_swigregister(itkQuadEdgeMeshToQuadEdgeMeshFilterQEMD3QEMD3)
itkQuadEdgeMeshToQuadEdgeMeshFilterQEMD3QEMD3___New_orig__ = _itkQuadEdgeMeshToQuadEdgeMeshFilterPython.itkQuadEdgeMeshToQuadEdgeMeshFilterQEMD3QEMD3___New_orig__
itkQuadEdgeMeshToQuadEdgeMeshFilterQEMD3QEMD3_cast = _itkQuadEdgeMeshToQuadEdgeMeshFilterPython.itkQuadEdgeMeshToQuadEdgeMeshFilterQEMD3QEMD3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def quad_edge_mesh_to_quad_edge_mesh_filter(*args, **kwargs):
    """Procedural interface for QuadEdgeMeshToQuadEdgeMeshFilter"""
    import itk
    instance = itk.QuadEdgeMeshToQuadEdgeMeshFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def quad_edge_mesh_to_quad_edge_mesh_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.QuadEdgeMeshToQuadEdgeMeshFilter, itkTemplate.itkTemplate):
        filter_object = itk.QuadEdgeMeshToQuadEdgeMeshFilter.values()[0]
    else:
        filter_object = itk.QuadEdgeMeshToQuadEdgeMeshFilter

    quad_edge_mesh_to_quad_edge_mesh_filter.__doc__ = filter_object.__doc__
    quad_edge_mesh_to_quad_edge_mesh_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    quad_edge_mesh_to_quad_edge_mesh_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.QuadEdgeMeshToQuadEdgeMeshFilter, itkTemplate.itkTemplate):
        quad_edge_mesh_to_quad_edge_mesh_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        quad_edge_mesh_to_quad_edge_mesh_filter.__doc__ += "\n"
        quad_edge_mesh_to_quad_edge_mesh_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        quad_edge_mesh_to_quad_edge_mesh_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



