# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageStatisticsPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkImagePCAShapeModelEstimatorPython
else:
    import _itkImagePCAShapeModelEstimatorPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkImagePCAShapeModelEstimatorPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkImagePCAShapeModelEstimatorPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkImageShapeModelEstimatorBasePython
import itk.itkImageToImageFilterAPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkImagePython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkPointPython
import itk.itkRGBPixelPython
import itk.itkIndexPython
import itk.ITKCommonBasePython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython

def itkImagePCAShapeModelEstimatorID2ID2_New():
    return itkImagePCAShapeModelEstimatorID2ID2.New()

class itkImagePCAShapeModelEstimatorID2ID2(itk.itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseID2ID2):
    r"""


    Base class for ImagePCAShapeModelEstimator object.

    itkImagePCAShapeModelEstimator performs a principal component analysis
    (PCA) on a set of images. The user specifies the number of training
    images and also the number of desired largest principal components
    needed. The ITK pipeline mechanism sets up the storage for both input
    and output images. The number of output images are the user specified
    number of desired largest principal components plus 1 (for the mean
    image).

    The algorithm uses the VNL library to perform the eigen analysis. To
    speed the computation of the instead of performing the eigen analysis
    of the covariance vector A*A' where A is a matrix with p x t, p =
    number of pixels or voxels in each images and t = number of training
    images, we calculate the eigen vectors of the inner product matrix
    A'*A. The resulting eigen vectors (E) are then multiplied with the the
    matrix A to get the principal components. The covariance matrix has a
    dimension of p x p. Since number of pixels in any image being
    typically very high the eigen decomposition becomes computationally
    expensive. The inner product on the other hand has the dimension of t
    x t, where t is typically much smaller that p. Hence the eigen
    decomposition (most compute intensive part) is an orders of magnitude
    faster.

    The Update() function enables the calculation of the various models,
    creates the membership function objects and populates them.

    example{Filtering/ImageStatistics/ComputePCAShapeFromSample,Compute
    PCA Shape From Training Sample} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2ID2_Clone)
    SetNumberOfPrincipalComponentsRequired = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2ID2_SetNumberOfPrincipalComponentsRequired)
    GetNumberOfPrincipalComponentsRequired = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2ID2_GetNumberOfPrincipalComponentsRequired)
    SetNumberOfTrainingImages = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2ID2_SetNumberOfTrainingImages)
    GetNumberOfTrainingImages = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2ID2_GetNumberOfTrainingImages)
    GetEigenValues = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2ID2_GetEigenValues)
    __swig_destroy__ = _itkImagePCAShapeModelEstimatorPython.delete_itkImagePCAShapeModelEstimatorID2ID2
    cast = _swig_new_static_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkImagePCAShapeModelEstimatorID2ID2

        Create a new object of the class itkImagePCAShapeModelEstimatorID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImagePCAShapeModelEstimatorID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImagePCAShapeModelEstimatorID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImagePCAShapeModelEstimatorID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImagePCAShapeModelEstimatorID2ID2 in _itkImagePCAShapeModelEstimatorPython:
_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2ID2_swigregister(itkImagePCAShapeModelEstimatorID2ID2)
itkImagePCAShapeModelEstimatorID2ID2___New_orig__ = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2ID2___New_orig__
itkImagePCAShapeModelEstimatorID2ID2_cast = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2ID2_cast


def itkImagePCAShapeModelEstimatorID2IF2_New():
    return itkImagePCAShapeModelEstimatorID2IF2.New()

class itkImagePCAShapeModelEstimatorID2IF2(itk.itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseID2IF2):
    r"""


    Base class for ImagePCAShapeModelEstimator object.

    itkImagePCAShapeModelEstimator performs a principal component analysis
    (PCA) on a set of images. The user specifies the number of training
    images and also the number of desired largest principal components
    needed. The ITK pipeline mechanism sets up the storage for both input
    and output images. The number of output images are the user specified
    number of desired largest principal components plus 1 (for the mean
    image).

    The algorithm uses the VNL library to perform the eigen analysis. To
    speed the computation of the instead of performing the eigen analysis
    of the covariance vector A*A' where A is a matrix with p x t, p =
    number of pixels or voxels in each images and t = number of training
    images, we calculate the eigen vectors of the inner product matrix
    A'*A. The resulting eigen vectors (E) are then multiplied with the the
    matrix A to get the principal components. The covariance matrix has a
    dimension of p x p. Since number of pixels in any image being
    typically very high the eigen decomposition becomes computationally
    expensive. The inner product on the other hand has the dimension of t
    x t, where t is typically much smaller that p. Hence the eigen
    decomposition (most compute intensive part) is an orders of magnitude
    faster.

    The Update() function enables the calculation of the various models,
    creates the membership function objects and populates them.

    example{Filtering/ImageStatistics/ComputePCAShapeFromSample,Compute
    PCA Shape From Training Sample} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2IF2_Clone)
    SetNumberOfPrincipalComponentsRequired = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2IF2_SetNumberOfPrincipalComponentsRequired)
    GetNumberOfPrincipalComponentsRequired = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2IF2_GetNumberOfPrincipalComponentsRequired)
    SetNumberOfTrainingImages = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2IF2_SetNumberOfTrainingImages)
    GetNumberOfTrainingImages = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2IF2_GetNumberOfTrainingImages)
    GetEigenValues = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2IF2_GetEigenValues)
    __swig_destroy__ = _itkImagePCAShapeModelEstimatorPython.delete_itkImagePCAShapeModelEstimatorID2IF2
    cast = _swig_new_static_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkImagePCAShapeModelEstimatorID2IF2

        Create a new object of the class itkImagePCAShapeModelEstimatorID2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImagePCAShapeModelEstimatorID2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImagePCAShapeModelEstimatorID2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImagePCAShapeModelEstimatorID2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImagePCAShapeModelEstimatorID2IF2 in _itkImagePCAShapeModelEstimatorPython:
_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2IF2_swigregister(itkImagePCAShapeModelEstimatorID2IF2)
itkImagePCAShapeModelEstimatorID2IF2___New_orig__ = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2IF2___New_orig__
itkImagePCAShapeModelEstimatorID2IF2_cast = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2IF2_cast


def itkImagePCAShapeModelEstimatorID3ID3_New():
    return itkImagePCAShapeModelEstimatorID3ID3.New()

class itkImagePCAShapeModelEstimatorID3ID3(itk.itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseID3ID3):
    r"""


    Base class for ImagePCAShapeModelEstimator object.

    itkImagePCAShapeModelEstimator performs a principal component analysis
    (PCA) on a set of images. The user specifies the number of training
    images and also the number of desired largest principal components
    needed. The ITK pipeline mechanism sets up the storage for both input
    and output images. The number of output images are the user specified
    number of desired largest principal components plus 1 (for the mean
    image).

    The algorithm uses the VNL library to perform the eigen analysis. To
    speed the computation of the instead of performing the eigen analysis
    of the covariance vector A*A' where A is a matrix with p x t, p =
    number of pixels or voxels in each images and t = number of training
    images, we calculate the eigen vectors of the inner product matrix
    A'*A. The resulting eigen vectors (E) are then multiplied with the the
    matrix A to get the principal components. The covariance matrix has a
    dimension of p x p. Since number of pixels in any image being
    typically very high the eigen decomposition becomes computationally
    expensive. The inner product on the other hand has the dimension of t
    x t, where t is typically much smaller that p. Hence the eigen
    decomposition (most compute intensive part) is an orders of magnitude
    faster.

    The Update() function enables the calculation of the various models,
    creates the membership function objects and populates them.

    example{Filtering/ImageStatistics/ComputePCAShapeFromSample,Compute
    PCA Shape From Training Sample} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3ID3_Clone)
    SetNumberOfPrincipalComponentsRequired = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3ID3_SetNumberOfPrincipalComponentsRequired)
    GetNumberOfPrincipalComponentsRequired = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3ID3_GetNumberOfPrincipalComponentsRequired)
    SetNumberOfTrainingImages = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3ID3_SetNumberOfTrainingImages)
    GetNumberOfTrainingImages = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3ID3_GetNumberOfTrainingImages)
    GetEigenValues = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3ID3_GetEigenValues)
    __swig_destroy__ = _itkImagePCAShapeModelEstimatorPython.delete_itkImagePCAShapeModelEstimatorID3ID3
    cast = _swig_new_static_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkImagePCAShapeModelEstimatorID3ID3

        Create a new object of the class itkImagePCAShapeModelEstimatorID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImagePCAShapeModelEstimatorID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImagePCAShapeModelEstimatorID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImagePCAShapeModelEstimatorID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImagePCAShapeModelEstimatorID3ID3 in _itkImagePCAShapeModelEstimatorPython:
_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3ID3_swigregister(itkImagePCAShapeModelEstimatorID3ID3)
itkImagePCAShapeModelEstimatorID3ID3___New_orig__ = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3ID3___New_orig__
itkImagePCAShapeModelEstimatorID3ID3_cast = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3ID3_cast


def itkImagePCAShapeModelEstimatorID3IF3_New():
    return itkImagePCAShapeModelEstimatorID3IF3.New()

class itkImagePCAShapeModelEstimatorID3IF3(itk.itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseID3IF3):
    r"""


    Base class for ImagePCAShapeModelEstimator object.

    itkImagePCAShapeModelEstimator performs a principal component analysis
    (PCA) on a set of images. The user specifies the number of training
    images and also the number of desired largest principal components
    needed. The ITK pipeline mechanism sets up the storage for both input
    and output images. The number of output images are the user specified
    number of desired largest principal components plus 1 (for the mean
    image).

    The algorithm uses the VNL library to perform the eigen analysis. To
    speed the computation of the instead of performing the eigen analysis
    of the covariance vector A*A' where A is a matrix with p x t, p =
    number of pixels or voxels in each images and t = number of training
    images, we calculate the eigen vectors of the inner product matrix
    A'*A. The resulting eigen vectors (E) are then multiplied with the the
    matrix A to get the principal components. The covariance matrix has a
    dimension of p x p. Since number of pixels in any image being
    typically very high the eigen decomposition becomes computationally
    expensive. The inner product on the other hand has the dimension of t
    x t, where t is typically much smaller that p. Hence the eigen
    decomposition (most compute intensive part) is an orders of magnitude
    faster.

    The Update() function enables the calculation of the various models,
    creates the membership function objects and populates them.

    example{Filtering/ImageStatistics/ComputePCAShapeFromSample,Compute
    PCA Shape From Training Sample} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3IF3_Clone)
    SetNumberOfPrincipalComponentsRequired = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3IF3_SetNumberOfPrincipalComponentsRequired)
    GetNumberOfPrincipalComponentsRequired = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3IF3_GetNumberOfPrincipalComponentsRequired)
    SetNumberOfTrainingImages = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3IF3_SetNumberOfTrainingImages)
    GetNumberOfTrainingImages = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3IF3_GetNumberOfTrainingImages)
    GetEigenValues = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3IF3_GetEigenValues)
    __swig_destroy__ = _itkImagePCAShapeModelEstimatorPython.delete_itkImagePCAShapeModelEstimatorID3IF3
    cast = _swig_new_static_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkImagePCAShapeModelEstimatorID3IF3

        Create a new object of the class itkImagePCAShapeModelEstimatorID3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImagePCAShapeModelEstimatorID3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImagePCAShapeModelEstimatorID3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImagePCAShapeModelEstimatorID3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImagePCAShapeModelEstimatorID3IF3 in _itkImagePCAShapeModelEstimatorPython:
_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3IF3_swigregister(itkImagePCAShapeModelEstimatorID3IF3)
itkImagePCAShapeModelEstimatorID3IF3___New_orig__ = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3IF3___New_orig__
itkImagePCAShapeModelEstimatorID3IF3_cast = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3IF3_cast


def itkImagePCAShapeModelEstimatorIF2ID2_New():
    return itkImagePCAShapeModelEstimatorIF2ID2.New()

class itkImagePCAShapeModelEstimatorIF2ID2(itk.itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIF2ID2):
    r"""


    Base class for ImagePCAShapeModelEstimator object.

    itkImagePCAShapeModelEstimator performs a principal component analysis
    (PCA) on a set of images. The user specifies the number of training
    images and also the number of desired largest principal components
    needed. The ITK pipeline mechanism sets up the storage for both input
    and output images. The number of output images are the user specified
    number of desired largest principal components plus 1 (for the mean
    image).

    The algorithm uses the VNL library to perform the eigen analysis. To
    speed the computation of the instead of performing the eigen analysis
    of the covariance vector A*A' where A is a matrix with p x t, p =
    number of pixels or voxels in each images and t = number of training
    images, we calculate the eigen vectors of the inner product matrix
    A'*A. The resulting eigen vectors (E) are then multiplied with the the
    matrix A to get the principal components. The covariance matrix has a
    dimension of p x p. Since number of pixels in any image being
    typically very high the eigen decomposition becomes computationally
    expensive. The inner product on the other hand has the dimension of t
    x t, where t is typically much smaller that p. Hence the eigen
    decomposition (most compute intensive part) is an orders of magnitude
    faster.

    The Update() function enables the calculation of the various models,
    creates the membership function objects and populates them.

    example{Filtering/ImageStatistics/ComputePCAShapeFromSample,Compute
    PCA Shape From Training Sample} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2ID2_Clone)
    SetNumberOfPrincipalComponentsRequired = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2ID2_SetNumberOfPrincipalComponentsRequired)
    GetNumberOfPrincipalComponentsRequired = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2ID2_GetNumberOfPrincipalComponentsRequired)
    SetNumberOfTrainingImages = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2ID2_SetNumberOfTrainingImages)
    GetNumberOfTrainingImages = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2ID2_GetNumberOfTrainingImages)
    GetEigenValues = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2ID2_GetEigenValues)
    __swig_destroy__ = _itkImagePCAShapeModelEstimatorPython.delete_itkImagePCAShapeModelEstimatorIF2ID2
    cast = _swig_new_static_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkImagePCAShapeModelEstimatorIF2ID2

        Create a new object of the class itkImagePCAShapeModelEstimatorIF2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImagePCAShapeModelEstimatorIF2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImagePCAShapeModelEstimatorIF2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImagePCAShapeModelEstimatorIF2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImagePCAShapeModelEstimatorIF2ID2 in _itkImagePCAShapeModelEstimatorPython:
_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2ID2_swigregister(itkImagePCAShapeModelEstimatorIF2ID2)
itkImagePCAShapeModelEstimatorIF2ID2___New_orig__ = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2ID2___New_orig__
itkImagePCAShapeModelEstimatorIF2ID2_cast = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2ID2_cast


def itkImagePCAShapeModelEstimatorIF2IF2_New():
    return itkImagePCAShapeModelEstimatorIF2IF2.New()

class itkImagePCAShapeModelEstimatorIF2IF2(itk.itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIF2IF2):
    r"""


    Base class for ImagePCAShapeModelEstimator object.

    itkImagePCAShapeModelEstimator performs a principal component analysis
    (PCA) on a set of images. The user specifies the number of training
    images and also the number of desired largest principal components
    needed. The ITK pipeline mechanism sets up the storage for both input
    and output images. The number of output images are the user specified
    number of desired largest principal components plus 1 (for the mean
    image).

    The algorithm uses the VNL library to perform the eigen analysis. To
    speed the computation of the instead of performing the eigen analysis
    of the covariance vector A*A' where A is a matrix with p x t, p =
    number of pixels or voxels in each images and t = number of training
    images, we calculate the eigen vectors of the inner product matrix
    A'*A. The resulting eigen vectors (E) are then multiplied with the the
    matrix A to get the principal components. The covariance matrix has a
    dimension of p x p. Since number of pixels in any image being
    typically very high the eigen decomposition becomes computationally
    expensive. The inner product on the other hand has the dimension of t
    x t, where t is typically much smaller that p. Hence the eigen
    decomposition (most compute intensive part) is an orders of magnitude
    faster.

    The Update() function enables the calculation of the various models,
    creates the membership function objects and populates them.

    example{Filtering/ImageStatistics/ComputePCAShapeFromSample,Compute
    PCA Shape From Training Sample} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2IF2_Clone)
    SetNumberOfPrincipalComponentsRequired = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2IF2_SetNumberOfPrincipalComponentsRequired)
    GetNumberOfPrincipalComponentsRequired = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2IF2_GetNumberOfPrincipalComponentsRequired)
    SetNumberOfTrainingImages = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2IF2_SetNumberOfTrainingImages)
    GetNumberOfTrainingImages = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2IF2_GetNumberOfTrainingImages)
    GetEigenValues = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2IF2_GetEigenValues)
    __swig_destroy__ = _itkImagePCAShapeModelEstimatorPython.delete_itkImagePCAShapeModelEstimatorIF2IF2
    cast = _swig_new_static_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkImagePCAShapeModelEstimatorIF2IF2

        Create a new object of the class itkImagePCAShapeModelEstimatorIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImagePCAShapeModelEstimatorIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImagePCAShapeModelEstimatorIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImagePCAShapeModelEstimatorIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImagePCAShapeModelEstimatorIF2IF2 in _itkImagePCAShapeModelEstimatorPython:
_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2IF2_swigregister(itkImagePCAShapeModelEstimatorIF2IF2)
itkImagePCAShapeModelEstimatorIF2IF2___New_orig__ = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2IF2___New_orig__
itkImagePCAShapeModelEstimatorIF2IF2_cast = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2IF2_cast


def itkImagePCAShapeModelEstimatorIF3ID3_New():
    return itkImagePCAShapeModelEstimatorIF3ID3.New()

class itkImagePCAShapeModelEstimatorIF3ID3(itk.itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIF3ID3):
    r"""


    Base class for ImagePCAShapeModelEstimator object.

    itkImagePCAShapeModelEstimator performs a principal component analysis
    (PCA) on a set of images. The user specifies the number of training
    images and also the number of desired largest principal components
    needed. The ITK pipeline mechanism sets up the storage for both input
    and output images. The number of output images are the user specified
    number of desired largest principal components plus 1 (for the mean
    image).

    The algorithm uses the VNL library to perform the eigen analysis. To
    speed the computation of the instead of performing the eigen analysis
    of the covariance vector A*A' where A is a matrix with p x t, p =
    number of pixels or voxels in each images and t = number of training
    images, we calculate the eigen vectors of the inner product matrix
    A'*A. The resulting eigen vectors (E) are then multiplied with the the
    matrix A to get the principal components. The covariance matrix has a
    dimension of p x p. Since number of pixels in any image being
    typically very high the eigen decomposition becomes computationally
    expensive. The inner product on the other hand has the dimension of t
    x t, where t is typically much smaller that p. Hence the eigen
    decomposition (most compute intensive part) is an orders of magnitude
    faster.

    The Update() function enables the calculation of the various models,
    creates the membership function objects and populates them.

    example{Filtering/ImageStatistics/ComputePCAShapeFromSample,Compute
    PCA Shape From Training Sample} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3ID3_Clone)
    SetNumberOfPrincipalComponentsRequired = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3ID3_SetNumberOfPrincipalComponentsRequired)
    GetNumberOfPrincipalComponentsRequired = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3ID3_GetNumberOfPrincipalComponentsRequired)
    SetNumberOfTrainingImages = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3ID3_SetNumberOfTrainingImages)
    GetNumberOfTrainingImages = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3ID3_GetNumberOfTrainingImages)
    GetEigenValues = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3ID3_GetEigenValues)
    __swig_destroy__ = _itkImagePCAShapeModelEstimatorPython.delete_itkImagePCAShapeModelEstimatorIF3ID3
    cast = _swig_new_static_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkImagePCAShapeModelEstimatorIF3ID3

        Create a new object of the class itkImagePCAShapeModelEstimatorIF3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImagePCAShapeModelEstimatorIF3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImagePCAShapeModelEstimatorIF3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImagePCAShapeModelEstimatorIF3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImagePCAShapeModelEstimatorIF3ID3 in _itkImagePCAShapeModelEstimatorPython:
_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3ID3_swigregister(itkImagePCAShapeModelEstimatorIF3ID3)
itkImagePCAShapeModelEstimatorIF3ID3___New_orig__ = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3ID3___New_orig__
itkImagePCAShapeModelEstimatorIF3ID3_cast = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3ID3_cast


def itkImagePCAShapeModelEstimatorIF3IF3_New():
    return itkImagePCAShapeModelEstimatorIF3IF3.New()

class itkImagePCAShapeModelEstimatorIF3IF3(itk.itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIF3IF3):
    r"""


    Base class for ImagePCAShapeModelEstimator object.

    itkImagePCAShapeModelEstimator performs a principal component analysis
    (PCA) on a set of images. The user specifies the number of training
    images and also the number of desired largest principal components
    needed. The ITK pipeline mechanism sets up the storage for both input
    and output images. The number of output images are the user specified
    number of desired largest principal components plus 1 (for the mean
    image).

    The algorithm uses the VNL library to perform the eigen analysis. To
    speed the computation of the instead of performing the eigen analysis
    of the covariance vector A*A' where A is a matrix with p x t, p =
    number of pixels or voxels in each images and t = number of training
    images, we calculate the eigen vectors of the inner product matrix
    A'*A. The resulting eigen vectors (E) are then multiplied with the the
    matrix A to get the principal components. The covariance matrix has a
    dimension of p x p. Since number of pixels in any image being
    typically very high the eigen decomposition becomes computationally
    expensive. The inner product on the other hand has the dimension of t
    x t, where t is typically much smaller that p. Hence the eigen
    decomposition (most compute intensive part) is an orders of magnitude
    faster.

    The Update() function enables the calculation of the various models,
    creates the membership function objects and populates them.

    example{Filtering/ImageStatistics/ComputePCAShapeFromSample,Compute
    PCA Shape From Training Sample} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3IF3_Clone)
    SetNumberOfPrincipalComponentsRequired = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3IF3_SetNumberOfPrincipalComponentsRequired)
    GetNumberOfPrincipalComponentsRequired = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3IF3_GetNumberOfPrincipalComponentsRequired)
    SetNumberOfTrainingImages = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3IF3_SetNumberOfTrainingImages)
    GetNumberOfTrainingImages = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3IF3_GetNumberOfTrainingImages)
    GetEigenValues = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3IF3_GetEigenValues)
    __swig_destroy__ = _itkImagePCAShapeModelEstimatorPython.delete_itkImagePCAShapeModelEstimatorIF3IF3
    cast = _swig_new_static_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkImagePCAShapeModelEstimatorIF3IF3

        Create a new object of the class itkImagePCAShapeModelEstimatorIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImagePCAShapeModelEstimatorIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImagePCAShapeModelEstimatorIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImagePCAShapeModelEstimatorIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImagePCAShapeModelEstimatorIF3IF3 in _itkImagePCAShapeModelEstimatorPython:
_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3IF3_swigregister(itkImagePCAShapeModelEstimatorIF3IF3)
itkImagePCAShapeModelEstimatorIF3IF3___New_orig__ = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3IF3___New_orig__
itkImagePCAShapeModelEstimatorIF3IF3_cast = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3IF3_cast


def itkImagePCAShapeModelEstimatorISS2ID2_New():
    return itkImagePCAShapeModelEstimatorISS2ID2.New()

class itkImagePCAShapeModelEstimatorISS2ID2(itk.itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseISS2ID2):
    r"""


    Base class for ImagePCAShapeModelEstimator object.

    itkImagePCAShapeModelEstimator performs a principal component analysis
    (PCA) on a set of images. The user specifies the number of training
    images and also the number of desired largest principal components
    needed. The ITK pipeline mechanism sets up the storage for both input
    and output images. The number of output images are the user specified
    number of desired largest principal components plus 1 (for the mean
    image).

    The algorithm uses the VNL library to perform the eigen analysis. To
    speed the computation of the instead of performing the eigen analysis
    of the covariance vector A*A' where A is a matrix with p x t, p =
    number of pixels or voxels in each images and t = number of training
    images, we calculate the eigen vectors of the inner product matrix
    A'*A. The resulting eigen vectors (E) are then multiplied with the the
    matrix A to get the principal components. The covariance matrix has a
    dimension of p x p. Since number of pixels in any image being
    typically very high the eigen decomposition becomes computationally
    expensive. The inner product on the other hand has the dimension of t
    x t, where t is typically much smaller that p. Hence the eigen
    decomposition (most compute intensive part) is an orders of magnitude
    faster.

    The Update() function enables the calculation of the various models,
    creates the membership function objects and populates them.

    example{Filtering/ImageStatistics/ComputePCAShapeFromSample,Compute
    PCA Shape From Training Sample} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2ID2_Clone)
    SetNumberOfPrincipalComponentsRequired = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2ID2_SetNumberOfPrincipalComponentsRequired)
    GetNumberOfPrincipalComponentsRequired = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2ID2_GetNumberOfPrincipalComponentsRequired)
    SetNumberOfTrainingImages = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2ID2_SetNumberOfTrainingImages)
    GetNumberOfTrainingImages = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2ID2_GetNumberOfTrainingImages)
    GetEigenValues = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2ID2_GetEigenValues)
    __swig_destroy__ = _itkImagePCAShapeModelEstimatorPython.delete_itkImagePCAShapeModelEstimatorISS2ID2
    cast = _swig_new_static_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkImagePCAShapeModelEstimatorISS2ID2

        Create a new object of the class itkImagePCAShapeModelEstimatorISS2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImagePCAShapeModelEstimatorISS2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImagePCAShapeModelEstimatorISS2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImagePCAShapeModelEstimatorISS2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImagePCAShapeModelEstimatorISS2ID2 in _itkImagePCAShapeModelEstimatorPython:
_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2ID2_swigregister(itkImagePCAShapeModelEstimatorISS2ID2)
itkImagePCAShapeModelEstimatorISS2ID2___New_orig__ = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2ID2___New_orig__
itkImagePCAShapeModelEstimatorISS2ID2_cast = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2ID2_cast


def itkImagePCAShapeModelEstimatorISS2IF2_New():
    return itkImagePCAShapeModelEstimatorISS2IF2.New()

class itkImagePCAShapeModelEstimatorISS2IF2(itk.itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseISS2IF2):
    r"""


    Base class for ImagePCAShapeModelEstimator object.

    itkImagePCAShapeModelEstimator performs a principal component analysis
    (PCA) on a set of images. The user specifies the number of training
    images and also the number of desired largest principal components
    needed. The ITK pipeline mechanism sets up the storage for both input
    and output images. The number of output images are the user specified
    number of desired largest principal components plus 1 (for the mean
    image).

    The algorithm uses the VNL library to perform the eigen analysis. To
    speed the computation of the instead of performing the eigen analysis
    of the covariance vector A*A' where A is a matrix with p x t, p =
    number of pixels or voxels in each images and t = number of training
    images, we calculate the eigen vectors of the inner product matrix
    A'*A. The resulting eigen vectors (E) are then multiplied with the the
    matrix A to get the principal components. The covariance matrix has a
    dimension of p x p. Since number of pixels in any image being
    typically very high the eigen decomposition becomes computationally
    expensive. The inner product on the other hand has the dimension of t
    x t, where t is typically much smaller that p. Hence the eigen
    decomposition (most compute intensive part) is an orders of magnitude
    faster.

    The Update() function enables the calculation of the various models,
    creates the membership function objects and populates them.

    example{Filtering/ImageStatistics/ComputePCAShapeFromSample,Compute
    PCA Shape From Training Sample} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2IF2_Clone)
    SetNumberOfPrincipalComponentsRequired = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2IF2_SetNumberOfPrincipalComponentsRequired)
    GetNumberOfPrincipalComponentsRequired = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2IF2_GetNumberOfPrincipalComponentsRequired)
    SetNumberOfTrainingImages = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2IF2_SetNumberOfTrainingImages)
    GetNumberOfTrainingImages = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2IF2_GetNumberOfTrainingImages)
    GetEigenValues = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2IF2_GetEigenValues)
    __swig_destroy__ = _itkImagePCAShapeModelEstimatorPython.delete_itkImagePCAShapeModelEstimatorISS2IF2
    cast = _swig_new_static_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkImagePCAShapeModelEstimatorISS2IF2

        Create a new object of the class itkImagePCAShapeModelEstimatorISS2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImagePCAShapeModelEstimatorISS2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImagePCAShapeModelEstimatorISS2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImagePCAShapeModelEstimatorISS2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImagePCAShapeModelEstimatorISS2IF2 in _itkImagePCAShapeModelEstimatorPython:
_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2IF2_swigregister(itkImagePCAShapeModelEstimatorISS2IF2)
itkImagePCAShapeModelEstimatorISS2IF2___New_orig__ = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2IF2___New_orig__
itkImagePCAShapeModelEstimatorISS2IF2_cast = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2IF2_cast


def itkImagePCAShapeModelEstimatorISS3ID3_New():
    return itkImagePCAShapeModelEstimatorISS3ID3.New()

class itkImagePCAShapeModelEstimatorISS3ID3(itk.itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseISS3ID3):
    r"""


    Base class for ImagePCAShapeModelEstimator object.

    itkImagePCAShapeModelEstimator performs a principal component analysis
    (PCA) on a set of images. The user specifies the number of training
    images and also the number of desired largest principal components
    needed. The ITK pipeline mechanism sets up the storage for both input
    and output images. The number of output images are the user specified
    number of desired largest principal components plus 1 (for the mean
    image).

    The algorithm uses the VNL library to perform the eigen analysis. To
    speed the computation of the instead of performing the eigen analysis
    of the covariance vector A*A' where A is a matrix with p x t, p =
    number of pixels or voxels in each images and t = number of training
    images, we calculate the eigen vectors of the inner product matrix
    A'*A. The resulting eigen vectors (E) are then multiplied with the the
    matrix A to get the principal components. The covariance matrix has a
    dimension of p x p. Since number of pixels in any image being
    typically very high the eigen decomposition becomes computationally
    expensive. The inner product on the other hand has the dimension of t
    x t, where t is typically much smaller that p. Hence the eigen
    decomposition (most compute intensive part) is an orders of magnitude
    faster.

    The Update() function enables the calculation of the various models,
    creates the membership function objects and populates them.

    example{Filtering/ImageStatistics/ComputePCAShapeFromSample,Compute
    PCA Shape From Training Sample} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3ID3_Clone)
    SetNumberOfPrincipalComponentsRequired = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3ID3_SetNumberOfPrincipalComponentsRequired)
    GetNumberOfPrincipalComponentsRequired = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3ID3_GetNumberOfPrincipalComponentsRequired)
    SetNumberOfTrainingImages = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3ID3_SetNumberOfTrainingImages)
    GetNumberOfTrainingImages = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3ID3_GetNumberOfTrainingImages)
    GetEigenValues = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3ID3_GetEigenValues)
    __swig_destroy__ = _itkImagePCAShapeModelEstimatorPython.delete_itkImagePCAShapeModelEstimatorISS3ID3
    cast = _swig_new_static_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkImagePCAShapeModelEstimatorISS3ID3

        Create a new object of the class itkImagePCAShapeModelEstimatorISS3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImagePCAShapeModelEstimatorISS3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImagePCAShapeModelEstimatorISS3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImagePCAShapeModelEstimatorISS3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImagePCAShapeModelEstimatorISS3ID3 in _itkImagePCAShapeModelEstimatorPython:
_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3ID3_swigregister(itkImagePCAShapeModelEstimatorISS3ID3)
itkImagePCAShapeModelEstimatorISS3ID3___New_orig__ = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3ID3___New_orig__
itkImagePCAShapeModelEstimatorISS3ID3_cast = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3ID3_cast


def itkImagePCAShapeModelEstimatorISS3IF3_New():
    return itkImagePCAShapeModelEstimatorISS3IF3.New()

class itkImagePCAShapeModelEstimatorISS3IF3(itk.itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseISS3IF3):
    r"""


    Base class for ImagePCAShapeModelEstimator object.

    itkImagePCAShapeModelEstimator performs a principal component analysis
    (PCA) on a set of images. The user specifies the number of training
    images and also the number of desired largest principal components
    needed. The ITK pipeline mechanism sets up the storage for both input
    and output images. The number of output images are the user specified
    number of desired largest principal components plus 1 (for the mean
    image).

    The algorithm uses the VNL library to perform the eigen analysis. To
    speed the computation of the instead of performing the eigen analysis
    of the covariance vector A*A' where A is a matrix with p x t, p =
    number of pixels or voxels in each images and t = number of training
    images, we calculate the eigen vectors of the inner product matrix
    A'*A. The resulting eigen vectors (E) are then multiplied with the the
    matrix A to get the principal components. The covariance matrix has a
    dimension of p x p. Since number of pixels in any image being
    typically very high the eigen decomposition becomes computationally
    expensive. The inner product on the other hand has the dimension of t
    x t, where t is typically much smaller that p. Hence the eigen
    decomposition (most compute intensive part) is an orders of magnitude
    faster.

    The Update() function enables the calculation of the various models,
    creates the membership function objects and populates them.

    example{Filtering/ImageStatistics/ComputePCAShapeFromSample,Compute
    PCA Shape From Training Sample} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3IF3_Clone)
    SetNumberOfPrincipalComponentsRequired = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3IF3_SetNumberOfPrincipalComponentsRequired)
    GetNumberOfPrincipalComponentsRequired = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3IF3_GetNumberOfPrincipalComponentsRequired)
    SetNumberOfTrainingImages = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3IF3_SetNumberOfTrainingImages)
    GetNumberOfTrainingImages = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3IF3_GetNumberOfTrainingImages)
    GetEigenValues = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3IF3_GetEigenValues)
    __swig_destroy__ = _itkImagePCAShapeModelEstimatorPython.delete_itkImagePCAShapeModelEstimatorISS3IF3
    cast = _swig_new_static_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkImagePCAShapeModelEstimatorISS3IF3

        Create a new object of the class itkImagePCAShapeModelEstimatorISS3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImagePCAShapeModelEstimatorISS3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImagePCAShapeModelEstimatorISS3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImagePCAShapeModelEstimatorISS3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImagePCAShapeModelEstimatorISS3IF3 in _itkImagePCAShapeModelEstimatorPython:
_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3IF3_swigregister(itkImagePCAShapeModelEstimatorISS3IF3)
itkImagePCAShapeModelEstimatorISS3IF3___New_orig__ = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3IF3___New_orig__
itkImagePCAShapeModelEstimatorISS3IF3_cast = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3IF3_cast


def itkImagePCAShapeModelEstimatorIUC2ID2_New():
    return itkImagePCAShapeModelEstimatorIUC2ID2.New()

class itkImagePCAShapeModelEstimatorIUC2ID2(itk.itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIUC2ID2):
    r"""


    Base class for ImagePCAShapeModelEstimator object.

    itkImagePCAShapeModelEstimator performs a principal component analysis
    (PCA) on a set of images. The user specifies the number of training
    images and also the number of desired largest principal components
    needed. The ITK pipeline mechanism sets up the storage for both input
    and output images. The number of output images are the user specified
    number of desired largest principal components plus 1 (for the mean
    image).

    The algorithm uses the VNL library to perform the eigen analysis. To
    speed the computation of the instead of performing the eigen analysis
    of the covariance vector A*A' where A is a matrix with p x t, p =
    number of pixels or voxels in each images and t = number of training
    images, we calculate the eigen vectors of the inner product matrix
    A'*A. The resulting eigen vectors (E) are then multiplied with the the
    matrix A to get the principal components. The covariance matrix has a
    dimension of p x p. Since number of pixels in any image being
    typically very high the eigen decomposition becomes computationally
    expensive. The inner product on the other hand has the dimension of t
    x t, where t is typically much smaller that p. Hence the eigen
    decomposition (most compute intensive part) is an orders of magnitude
    faster.

    The Update() function enables the calculation of the various models,
    creates the membership function objects and populates them.

    example{Filtering/ImageStatistics/ComputePCAShapeFromSample,Compute
    PCA Shape From Training Sample} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2ID2_Clone)
    SetNumberOfPrincipalComponentsRequired = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2ID2_SetNumberOfPrincipalComponentsRequired)
    GetNumberOfPrincipalComponentsRequired = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2ID2_GetNumberOfPrincipalComponentsRequired)
    SetNumberOfTrainingImages = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2ID2_SetNumberOfTrainingImages)
    GetNumberOfTrainingImages = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2ID2_GetNumberOfTrainingImages)
    GetEigenValues = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2ID2_GetEigenValues)
    __swig_destroy__ = _itkImagePCAShapeModelEstimatorPython.delete_itkImagePCAShapeModelEstimatorIUC2ID2
    cast = _swig_new_static_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkImagePCAShapeModelEstimatorIUC2ID2

        Create a new object of the class itkImagePCAShapeModelEstimatorIUC2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImagePCAShapeModelEstimatorIUC2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImagePCAShapeModelEstimatorIUC2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImagePCAShapeModelEstimatorIUC2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImagePCAShapeModelEstimatorIUC2ID2 in _itkImagePCAShapeModelEstimatorPython:
_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2ID2_swigregister(itkImagePCAShapeModelEstimatorIUC2ID2)
itkImagePCAShapeModelEstimatorIUC2ID2___New_orig__ = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2ID2___New_orig__
itkImagePCAShapeModelEstimatorIUC2ID2_cast = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2ID2_cast


def itkImagePCAShapeModelEstimatorIUC2IF2_New():
    return itkImagePCAShapeModelEstimatorIUC2IF2.New()

class itkImagePCAShapeModelEstimatorIUC2IF2(itk.itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIUC2IF2):
    r"""


    Base class for ImagePCAShapeModelEstimator object.

    itkImagePCAShapeModelEstimator performs a principal component analysis
    (PCA) on a set of images. The user specifies the number of training
    images and also the number of desired largest principal components
    needed. The ITK pipeline mechanism sets up the storage for both input
    and output images. The number of output images are the user specified
    number of desired largest principal components plus 1 (for the mean
    image).

    The algorithm uses the VNL library to perform the eigen analysis. To
    speed the computation of the instead of performing the eigen analysis
    of the covariance vector A*A' where A is a matrix with p x t, p =
    number of pixels or voxels in each images and t = number of training
    images, we calculate the eigen vectors of the inner product matrix
    A'*A. The resulting eigen vectors (E) are then multiplied with the the
    matrix A to get the principal components. The covariance matrix has a
    dimension of p x p. Since number of pixels in any image being
    typically very high the eigen decomposition becomes computationally
    expensive. The inner product on the other hand has the dimension of t
    x t, where t is typically much smaller that p. Hence the eigen
    decomposition (most compute intensive part) is an orders of magnitude
    faster.

    The Update() function enables the calculation of the various models,
    creates the membership function objects and populates them.

    example{Filtering/ImageStatistics/ComputePCAShapeFromSample,Compute
    PCA Shape From Training Sample} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2IF2_Clone)
    SetNumberOfPrincipalComponentsRequired = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2IF2_SetNumberOfPrincipalComponentsRequired)
    GetNumberOfPrincipalComponentsRequired = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2IF2_GetNumberOfPrincipalComponentsRequired)
    SetNumberOfTrainingImages = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2IF2_SetNumberOfTrainingImages)
    GetNumberOfTrainingImages = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2IF2_GetNumberOfTrainingImages)
    GetEigenValues = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2IF2_GetEigenValues)
    __swig_destroy__ = _itkImagePCAShapeModelEstimatorPython.delete_itkImagePCAShapeModelEstimatorIUC2IF2
    cast = _swig_new_static_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkImagePCAShapeModelEstimatorIUC2IF2

        Create a new object of the class itkImagePCAShapeModelEstimatorIUC2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImagePCAShapeModelEstimatorIUC2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImagePCAShapeModelEstimatorIUC2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImagePCAShapeModelEstimatorIUC2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImagePCAShapeModelEstimatorIUC2IF2 in _itkImagePCAShapeModelEstimatorPython:
_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2IF2_swigregister(itkImagePCAShapeModelEstimatorIUC2IF2)
itkImagePCAShapeModelEstimatorIUC2IF2___New_orig__ = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2IF2___New_orig__
itkImagePCAShapeModelEstimatorIUC2IF2_cast = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2IF2_cast


def itkImagePCAShapeModelEstimatorIUC3ID3_New():
    return itkImagePCAShapeModelEstimatorIUC3ID3.New()

class itkImagePCAShapeModelEstimatorIUC3ID3(itk.itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIUC3ID3):
    r"""


    Base class for ImagePCAShapeModelEstimator object.

    itkImagePCAShapeModelEstimator performs a principal component analysis
    (PCA) on a set of images. The user specifies the number of training
    images and also the number of desired largest principal components
    needed. The ITK pipeline mechanism sets up the storage for both input
    and output images. The number of output images are the user specified
    number of desired largest principal components plus 1 (for the mean
    image).

    The algorithm uses the VNL library to perform the eigen analysis. To
    speed the computation of the instead of performing the eigen analysis
    of the covariance vector A*A' where A is a matrix with p x t, p =
    number of pixels or voxels in each images and t = number of training
    images, we calculate the eigen vectors of the inner product matrix
    A'*A. The resulting eigen vectors (E) are then multiplied with the the
    matrix A to get the principal components. The covariance matrix has a
    dimension of p x p. Since number of pixels in any image being
    typically very high the eigen decomposition becomes computationally
    expensive. The inner product on the other hand has the dimension of t
    x t, where t is typically much smaller that p. Hence the eigen
    decomposition (most compute intensive part) is an orders of magnitude
    faster.

    The Update() function enables the calculation of the various models,
    creates the membership function objects and populates them.

    example{Filtering/ImageStatistics/ComputePCAShapeFromSample,Compute
    PCA Shape From Training Sample} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3ID3_Clone)
    SetNumberOfPrincipalComponentsRequired = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3ID3_SetNumberOfPrincipalComponentsRequired)
    GetNumberOfPrincipalComponentsRequired = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3ID3_GetNumberOfPrincipalComponentsRequired)
    SetNumberOfTrainingImages = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3ID3_SetNumberOfTrainingImages)
    GetNumberOfTrainingImages = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3ID3_GetNumberOfTrainingImages)
    GetEigenValues = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3ID3_GetEigenValues)
    __swig_destroy__ = _itkImagePCAShapeModelEstimatorPython.delete_itkImagePCAShapeModelEstimatorIUC3ID3
    cast = _swig_new_static_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkImagePCAShapeModelEstimatorIUC3ID3

        Create a new object of the class itkImagePCAShapeModelEstimatorIUC3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImagePCAShapeModelEstimatorIUC3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImagePCAShapeModelEstimatorIUC3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImagePCAShapeModelEstimatorIUC3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImagePCAShapeModelEstimatorIUC3ID3 in _itkImagePCAShapeModelEstimatorPython:
_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3ID3_swigregister(itkImagePCAShapeModelEstimatorIUC3ID3)
itkImagePCAShapeModelEstimatorIUC3ID3___New_orig__ = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3ID3___New_orig__
itkImagePCAShapeModelEstimatorIUC3ID3_cast = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3ID3_cast


def itkImagePCAShapeModelEstimatorIUC3IF3_New():
    return itkImagePCAShapeModelEstimatorIUC3IF3.New()

class itkImagePCAShapeModelEstimatorIUC3IF3(itk.itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIUC3IF3):
    r"""


    Base class for ImagePCAShapeModelEstimator object.

    itkImagePCAShapeModelEstimator performs a principal component analysis
    (PCA) on a set of images. The user specifies the number of training
    images and also the number of desired largest principal components
    needed. The ITK pipeline mechanism sets up the storage for both input
    and output images. The number of output images are the user specified
    number of desired largest principal components plus 1 (for the mean
    image).

    The algorithm uses the VNL library to perform the eigen analysis. To
    speed the computation of the instead of performing the eigen analysis
    of the covariance vector A*A' where A is a matrix with p x t, p =
    number of pixels or voxels in each images and t = number of training
    images, we calculate the eigen vectors of the inner product matrix
    A'*A. The resulting eigen vectors (E) are then multiplied with the the
    matrix A to get the principal components. The covariance matrix has a
    dimension of p x p. Since number of pixels in any image being
    typically very high the eigen decomposition becomes computationally
    expensive. The inner product on the other hand has the dimension of t
    x t, where t is typically much smaller that p. Hence the eigen
    decomposition (most compute intensive part) is an orders of magnitude
    faster.

    The Update() function enables the calculation of the various models,
    creates the membership function objects and populates them.

    example{Filtering/ImageStatistics/ComputePCAShapeFromSample,Compute
    PCA Shape From Training Sample} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3IF3_Clone)
    SetNumberOfPrincipalComponentsRequired = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3IF3_SetNumberOfPrincipalComponentsRequired)
    GetNumberOfPrincipalComponentsRequired = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3IF3_GetNumberOfPrincipalComponentsRequired)
    SetNumberOfTrainingImages = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3IF3_SetNumberOfTrainingImages)
    GetNumberOfTrainingImages = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3IF3_GetNumberOfTrainingImages)
    GetEigenValues = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3IF3_GetEigenValues)
    __swig_destroy__ = _itkImagePCAShapeModelEstimatorPython.delete_itkImagePCAShapeModelEstimatorIUC3IF3
    cast = _swig_new_static_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkImagePCAShapeModelEstimatorIUC3IF3

        Create a new object of the class itkImagePCAShapeModelEstimatorIUC3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImagePCAShapeModelEstimatorIUC3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImagePCAShapeModelEstimatorIUC3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImagePCAShapeModelEstimatorIUC3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImagePCAShapeModelEstimatorIUC3IF3 in _itkImagePCAShapeModelEstimatorPython:
_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3IF3_swigregister(itkImagePCAShapeModelEstimatorIUC3IF3)
itkImagePCAShapeModelEstimatorIUC3IF3___New_orig__ = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3IF3___New_orig__
itkImagePCAShapeModelEstimatorIUC3IF3_cast = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3IF3_cast


def itkImagePCAShapeModelEstimatorIUS2ID2_New():
    return itkImagePCAShapeModelEstimatorIUS2ID2.New()

class itkImagePCAShapeModelEstimatorIUS2ID2(itk.itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIUS2ID2):
    r"""


    Base class for ImagePCAShapeModelEstimator object.

    itkImagePCAShapeModelEstimator performs a principal component analysis
    (PCA) on a set of images. The user specifies the number of training
    images and also the number of desired largest principal components
    needed. The ITK pipeline mechanism sets up the storage for both input
    and output images. The number of output images are the user specified
    number of desired largest principal components plus 1 (for the mean
    image).

    The algorithm uses the VNL library to perform the eigen analysis. To
    speed the computation of the instead of performing the eigen analysis
    of the covariance vector A*A' where A is a matrix with p x t, p =
    number of pixels or voxels in each images and t = number of training
    images, we calculate the eigen vectors of the inner product matrix
    A'*A. The resulting eigen vectors (E) are then multiplied with the the
    matrix A to get the principal components. The covariance matrix has a
    dimension of p x p. Since number of pixels in any image being
    typically very high the eigen decomposition becomes computationally
    expensive. The inner product on the other hand has the dimension of t
    x t, where t is typically much smaller that p. Hence the eigen
    decomposition (most compute intensive part) is an orders of magnitude
    faster.

    The Update() function enables the calculation of the various models,
    creates the membership function objects and populates them.

    example{Filtering/ImageStatistics/ComputePCAShapeFromSample,Compute
    PCA Shape From Training Sample} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2ID2_Clone)
    SetNumberOfPrincipalComponentsRequired = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2ID2_SetNumberOfPrincipalComponentsRequired)
    GetNumberOfPrincipalComponentsRequired = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2ID2_GetNumberOfPrincipalComponentsRequired)
    SetNumberOfTrainingImages = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2ID2_SetNumberOfTrainingImages)
    GetNumberOfTrainingImages = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2ID2_GetNumberOfTrainingImages)
    GetEigenValues = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2ID2_GetEigenValues)
    __swig_destroy__ = _itkImagePCAShapeModelEstimatorPython.delete_itkImagePCAShapeModelEstimatorIUS2ID2
    cast = _swig_new_static_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkImagePCAShapeModelEstimatorIUS2ID2

        Create a new object of the class itkImagePCAShapeModelEstimatorIUS2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImagePCAShapeModelEstimatorIUS2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImagePCAShapeModelEstimatorIUS2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImagePCAShapeModelEstimatorIUS2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImagePCAShapeModelEstimatorIUS2ID2 in _itkImagePCAShapeModelEstimatorPython:
_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2ID2_swigregister(itkImagePCAShapeModelEstimatorIUS2ID2)
itkImagePCAShapeModelEstimatorIUS2ID2___New_orig__ = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2ID2___New_orig__
itkImagePCAShapeModelEstimatorIUS2ID2_cast = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2ID2_cast


def itkImagePCAShapeModelEstimatorIUS2IF2_New():
    return itkImagePCAShapeModelEstimatorIUS2IF2.New()

class itkImagePCAShapeModelEstimatorIUS2IF2(itk.itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIUS2IF2):
    r"""


    Base class for ImagePCAShapeModelEstimator object.

    itkImagePCAShapeModelEstimator performs a principal component analysis
    (PCA) on a set of images. The user specifies the number of training
    images and also the number of desired largest principal components
    needed. The ITK pipeline mechanism sets up the storage for both input
    and output images. The number of output images are the user specified
    number of desired largest principal components plus 1 (for the mean
    image).

    The algorithm uses the VNL library to perform the eigen analysis. To
    speed the computation of the instead of performing the eigen analysis
    of the covariance vector A*A' where A is a matrix with p x t, p =
    number of pixels or voxels in each images and t = number of training
    images, we calculate the eigen vectors of the inner product matrix
    A'*A. The resulting eigen vectors (E) are then multiplied with the the
    matrix A to get the principal components. The covariance matrix has a
    dimension of p x p. Since number of pixels in any image being
    typically very high the eigen decomposition becomes computationally
    expensive. The inner product on the other hand has the dimension of t
    x t, where t is typically much smaller that p. Hence the eigen
    decomposition (most compute intensive part) is an orders of magnitude
    faster.

    The Update() function enables the calculation of the various models,
    creates the membership function objects and populates them.

    example{Filtering/ImageStatistics/ComputePCAShapeFromSample,Compute
    PCA Shape From Training Sample} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2IF2_Clone)
    SetNumberOfPrincipalComponentsRequired = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2IF2_SetNumberOfPrincipalComponentsRequired)
    GetNumberOfPrincipalComponentsRequired = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2IF2_GetNumberOfPrincipalComponentsRequired)
    SetNumberOfTrainingImages = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2IF2_SetNumberOfTrainingImages)
    GetNumberOfTrainingImages = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2IF2_GetNumberOfTrainingImages)
    GetEigenValues = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2IF2_GetEigenValues)
    __swig_destroy__ = _itkImagePCAShapeModelEstimatorPython.delete_itkImagePCAShapeModelEstimatorIUS2IF2
    cast = _swig_new_static_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkImagePCAShapeModelEstimatorIUS2IF2

        Create a new object of the class itkImagePCAShapeModelEstimatorIUS2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImagePCAShapeModelEstimatorIUS2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImagePCAShapeModelEstimatorIUS2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImagePCAShapeModelEstimatorIUS2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImagePCAShapeModelEstimatorIUS2IF2 in _itkImagePCAShapeModelEstimatorPython:
_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2IF2_swigregister(itkImagePCAShapeModelEstimatorIUS2IF2)
itkImagePCAShapeModelEstimatorIUS2IF2___New_orig__ = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2IF2___New_orig__
itkImagePCAShapeModelEstimatorIUS2IF2_cast = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2IF2_cast


def itkImagePCAShapeModelEstimatorIUS3ID3_New():
    return itkImagePCAShapeModelEstimatorIUS3ID3.New()

class itkImagePCAShapeModelEstimatorIUS3ID3(itk.itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIUS3ID3):
    r"""


    Base class for ImagePCAShapeModelEstimator object.

    itkImagePCAShapeModelEstimator performs a principal component analysis
    (PCA) on a set of images. The user specifies the number of training
    images and also the number of desired largest principal components
    needed. The ITK pipeline mechanism sets up the storage for both input
    and output images. The number of output images are the user specified
    number of desired largest principal components plus 1 (for the mean
    image).

    The algorithm uses the VNL library to perform the eigen analysis. To
    speed the computation of the instead of performing the eigen analysis
    of the covariance vector A*A' where A is a matrix with p x t, p =
    number of pixels or voxels in each images and t = number of training
    images, we calculate the eigen vectors of the inner product matrix
    A'*A. The resulting eigen vectors (E) are then multiplied with the the
    matrix A to get the principal components. The covariance matrix has a
    dimension of p x p. Since number of pixels in any image being
    typically very high the eigen decomposition becomes computationally
    expensive. The inner product on the other hand has the dimension of t
    x t, where t is typically much smaller that p. Hence the eigen
    decomposition (most compute intensive part) is an orders of magnitude
    faster.

    The Update() function enables the calculation of the various models,
    creates the membership function objects and populates them.

    example{Filtering/ImageStatistics/ComputePCAShapeFromSample,Compute
    PCA Shape From Training Sample} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3ID3_Clone)
    SetNumberOfPrincipalComponentsRequired = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3ID3_SetNumberOfPrincipalComponentsRequired)
    GetNumberOfPrincipalComponentsRequired = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3ID3_GetNumberOfPrincipalComponentsRequired)
    SetNumberOfTrainingImages = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3ID3_SetNumberOfTrainingImages)
    GetNumberOfTrainingImages = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3ID3_GetNumberOfTrainingImages)
    GetEigenValues = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3ID3_GetEigenValues)
    __swig_destroy__ = _itkImagePCAShapeModelEstimatorPython.delete_itkImagePCAShapeModelEstimatorIUS3ID3
    cast = _swig_new_static_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkImagePCAShapeModelEstimatorIUS3ID3

        Create a new object of the class itkImagePCAShapeModelEstimatorIUS3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImagePCAShapeModelEstimatorIUS3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImagePCAShapeModelEstimatorIUS3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImagePCAShapeModelEstimatorIUS3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImagePCAShapeModelEstimatorIUS3ID3 in _itkImagePCAShapeModelEstimatorPython:
_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3ID3_swigregister(itkImagePCAShapeModelEstimatorIUS3ID3)
itkImagePCAShapeModelEstimatorIUS3ID3___New_orig__ = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3ID3___New_orig__
itkImagePCAShapeModelEstimatorIUS3ID3_cast = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3ID3_cast


def itkImagePCAShapeModelEstimatorIUS3IF3_New():
    return itkImagePCAShapeModelEstimatorIUS3IF3.New()

class itkImagePCAShapeModelEstimatorIUS3IF3(itk.itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIUS3IF3):
    r"""


    Base class for ImagePCAShapeModelEstimator object.

    itkImagePCAShapeModelEstimator performs a principal component analysis
    (PCA) on a set of images. The user specifies the number of training
    images and also the number of desired largest principal components
    needed. The ITK pipeline mechanism sets up the storage for both input
    and output images. The number of output images are the user specified
    number of desired largest principal components plus 1 (for the mean
    image).

    The algorithm uses the VNL library to perform the eigen analysis. To
    speed the computation of the instead of performing the eigen analysis
    of the covariance vector A*A' where A is a matrix with p x t, p =
    number of pixels or voxels in each images and t = number of training
    images, we calculate the eigen vectors of the inner product matrix
    A'*A. The resulting eigen vectors (E) are then multiplied with the the
    matrix A to get the principal components. The covariance matrix has a
    dimension of p x p. Since number of pixels in any image being
    typically very high the eigen decomposition becomes computationally
    expensive. The inner product on the other hand has the dimension of t
    x t, where t is typically much smaller that p. Hence the eigen
    decomposition (most compute intensive part) is an orders of magnitude
    faster.

    The Update() function enables the calculation of the various models,
    creates the membership function objects and populates them.

    example{Filtering/ImageStatistics/ComputePCAShapeFromSample,Compute
    PCA Shape From Training Sample} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3IF3_Clone)
    SetNumberOfPrincipalComponentsRequired = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3IF3_SetNumberOfPrincipalComponentsRequired)
    GetNumberOfPrincipalComponentsRequired = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3IF3_GetNumberOfPrincipalComponentsRequired)
    SetNumberOfTrainingImages = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3IF3_SetNumberOfTrainingImages)
    GetNumberOfTrainingImages = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3IF3_GetNumberOfTrainingImages)
    GetEigenValues = _swig_new_instance_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3IF3_GetEigenValues)
    __swig_destroy__ = _itkImagePCAShapeModelEstimatorPython.delete_itkImagePCAShapeModelEstimatorIUS3IF3
    cast = _swig_new_static_method(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkImagePCAShapeModelEstimatorIUS3IF3

        Create a new object of the class itkImagePCAShapeModelEstimatorIUS3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImagePCAShapeModelEstimatorIUS3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImagePCAShapeModelEstimatorIUS3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImagePCAShapeModelEstimatorIUS3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImagePCAShapeModelEstimatorIUS3IF3 in _itkImagePCAShapeModelEstimatorPython:
_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3IF3_swigregister(itkImagePCAShapeModelEstimatorIUS3IF3)
itkImagePCAShapeModelEstimatorIUS3IF3___New_orig__ = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3IF3___New_orig__
itkImagePCAShapeModelEstimatorIUS3IF3_cast = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3IF3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def image_pca_shape_model_estimator(*args, **kwargs):
    """Procedural interface for ImagePCAShapeModelEstimator"""
    import itk
    instance = itk.ImagePCAShapeModelEstimator.New(*args, **kwargs)
    return instance.__internal_call__()

def image_pca_shape_model_estimator_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ImagePCAShapeModelEstimator, itkTemplate.itkTemplate):
        filter_object = itk.ImagePCAShapeModelEstimator.values()[0]
    else:
        filter_object = itk.ImagePCAShapeModelEstimator

    image_pca_shape_model_estimator.__doc__ = filter_object.__doc__
    image_pca_shape_model_estimator.__doc__ += "\n Args are Input(s) to the filter.\n"
    image_pca_shape_model_estimator.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.ImagePCAShapeModelEstimator, itkTemplate.itkTemplate):
        image_pca_shape_model_estimator.__doc__ += itkHelpers.filter_args(filter_object)[0]
        image_pca_shape_model_estimator.__doc__ += "\n"
        image_pca_shape_model_estimator.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        image_pca_shape_model_estimator.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



