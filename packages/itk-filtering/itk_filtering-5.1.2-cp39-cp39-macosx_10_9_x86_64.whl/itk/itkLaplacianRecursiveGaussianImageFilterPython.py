# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageFeaturePython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkLaplacianRecursiveGaussianImageFilterPython
else:
    import _itkLaplacianRecursiveGaussianImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkLaplacianRecursiveGaussianImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkLaplacianRecursiveGaussianImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkImageToImageFilterAPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkImagePython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.stdcomplexPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.vnl_vectorPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkPointPython
import itk.itkRGBPixelPython
import itk.itkIndexPython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython

def itkLaplacianRecursiveGaussianImageFilterID2ID2_New():
    return itkLaplacianRecursiveGaussianImageFilterID2ID2.New()

class itkLaplacianRecursiveGaussianImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""


    Computes the Laplacian of Gaussian (LoG) of an image.

    Computes the Laplacian of Gaussian (LoG) of an image by convolution
    with the second derivative of a Gaussian. This filter is implemented
    using the recursive gaussian filters.

    example{Filtering/ImageFeature/ComputeLaplacian,Compute Laplacian} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterID2ID2_Clone)
    SetSigma = _swig_new_instance_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterID2ID2_SetSigma)
    GetSigma = _swig_new_instance_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterID2ID2_GetSigma)
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterID2ID2_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterID2ID2_GetNormalizeAcrossScale)
    __swig_destroy__ = _itkLaplacianRecursiveGaussianImageFilterPython.delete_itkLaplacianRecursiveGaussianImageFilterID2ID2
    cast = _swig_new_static_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkLaplacianRecursiveGaussianImageFilterID2ID2

        Create a new object of the class itkLaplacianRecursiveGaussianImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLaplacianRecursiveGaussianImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLaplacianRecursiveGaussianImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLaplacianRecursiveGaussianImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLaplacianRecursiveGaussianImageFilterID2ID2 in _itkLaplacianRecursiveGaussianImageFilterPython:
_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterID2ID2_swigregister(itkLaplacianRecursiveGaussianImageFilterID2ID2)
itkLaplacianRecursiveGaussianImageFilterID2ID2___New_orig__ = _itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterID2ID2___New_orig__
itkLaplacianRecursiveGaussianImageFilterID2ID2_cast = _itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterID2ID2_cast


def itkLaplacianRecursiveGaussianImageFilterID3ID3_New():
    return itkLaplacianRecursiveGaussianImageFilterID3ID3.New()

class itkLaplacianRecursiveGaussianImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""


    Computes the Laplacian of Gaussian (LoG) of an image.

    Computes the Laplacian of Gaussian (LoG) of an image by convolution
    with the second derivative of a Gaussian. This filter is implemented
    using the recursive gaussian filters.

    example{Filtering/ImageFeature/ComputeLaplacian,Compute Laplacian} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterID3ID3_Clone)
    SetSigma = _swig_new_instance_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterID3ID3_SetSigma)
    GetSigma = _swig_new_instance_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterID3ID3_GetSigma)
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterID3ID3_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterID3ID3_GetNormalizeAcrossScale)
    __swig_destroy__ = _itkLaplacianRecursiveGaussianImageFilterPython.delete_itkLaplacianRecursiveGaussianImageFilterID3ID3
    cast = _swig_new_static_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkLaplacianRecursiveGaussianImageFilterID3ID3

        Create a new object of the class itkLaplacianRecursiveGaussianImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLaplacianRecursiveGaussianImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLaplacianRecursiveGaussianImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLaplacianRecursiveGaussianImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLaplacianRecursiveGaussianImageFilterID3ID3 in _itkLaplacianRecursiveGaussianImageFilterPython:
_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterID3ID3_swigregister(itkLaplacianRecursiveGaussianImageFilterID3ID3)
itkLaplacianRecursiveGaussianImageFilterID3ID3___New_orig__ = _itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterID3ID3___New_orig__
itkLaplacianRecursiveGaussianImageFilterID3ID3_cast = _itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterID3ID3_cast


def itkLaplacianRecursiveGaussianImageFilterIF2IF2_New():
    return itkLaplacianRecursiveGaussianImageFilterIF2IF2.New()

class itkLaplacianRecursiveGaussianImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""


    Computes the Laplacian of Gaussian (LoG) of an image.

    Computes the Laplacian of Gaussian (LoG) of an image by convolution
    with the second derivative of a Gaussian. This filter is implemented
    using the recursive gaussian filters.

    example{Filtering/ImageFeature/ComputeLaplacian,Compute Laplacian} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIF2IF2_Clone)
    SetSigma = _swig_new_instance_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIF2IF2_SetSigma)
    GetSigma = _swig_new_instance_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIF2IF2_GetSigma)
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIF2IF2_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIF2IF2_GetNormalizeAcrossScale)
    __swig_destroy__ = _itkLaplacianRecursiveGaussianImageFilterPython.delete_itkLaplacianRecursiveGaussianImageFilterIF2IF2
    cast = _swig_new_static_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkLaplacianRecursiveGaussianImageFilterIF2IF2

        Create a new object of the class itkLaplacianRecursiveGaussianImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLaplacianRecursiveGaussianImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLaplacianRecursiveGaussianImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLaplacianRecursiveGaussianImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLaplacianRecursiveGaussianImageFilterIF2IF2 in _itkLaplacianRecursiveGaussianImageFilterPython:
_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIF2IF2_swigregister(itkLaplacianRecursiveGaussianImageFilterIF2IF2)
itkLaplacianRecursiveGaussianImageFilterIF2IF2___New_orig__ = _itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIF2IF2___New_orig__
itkLaplacianRecursiveGaussianImageFilterIF2IF2_cast = _itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIF2IF2_cast


def itkLaplacianRecursiveGaussianImageFilterIF3IF3_New():
    return itkLaplacianRecursiveGaussianImageFilterIF3IF3.New()

class itkLaplacianRecursiveGaussianImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""


    Computes the Laplacian of Gaussian (LoG) of an image.

    Computes the Laplacian of Gaussian (LoG) of an image by convolution
    with the second derivative of a Gaussian. This filter is implemented
    using the recursive gaussian filters.

    example{Filtering/ImageFeature/ComputeLaplacian,Compute Laplacian} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIF3IF3_Clone)
    SetSigma = _swig_new_instance_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIF3IF3_SetSigma)
    GetSigma = _swig_new_instance_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIF3IF3_GetSigma)
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIF3IF3_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIF3IF3_GetNormalizeAcrossScale)
    __swig_destroy__ = _itkLaplacianRecursiveGaussianImageFilterPython.delete_itkLaplacianRecursiveGaussianImageFilterIF3IF3
    cast = _swig_new_static_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkLaplacianRecursiveGaussianImageFilterIF3IF3

        Create a new object of the class itkLaplacianRecursiveGaussianImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLaplacianRecursiveGaussianImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLaplacianRecursiveGaussianImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLaplacianRecursiveGaussianImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLaplacianRecursiveGaussianImageFilterIF3IF3 in _itkLaplacianRecursiveGaussianImageFilterPython:
_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIF3IF3_swigregister(itkLaplacianRecursiveGaussianImageFilterIF3IF3)
itkLaplacianRecursiveGaussianImageFilterIF3IF3___New_orig__ = _itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIF3IF3___New_orig__
itkLaplacianRecursiveGaussianImageFilterIF3IF3_cast = _itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIF3IF3_cast


def itkLaplacianRecursiveGaussianImageFilterISS2ISS2_New():
    return itkLaplacianRecursiveGaussianImageFilterISS2ISS2.New()

class itkLaplacianRecursiveGaussianImageFilterISS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""


    Computes the Laplacian of Gaussian (LoG) of an image.

    Computes the Laplacian of Gaussian (LoG) of an image by convolution
    with the second derivative of a Gaussian. This filter is implemented
    using the recursive gaussian filters.

    example{Filtering/ImageFeature/ComputeLaplacian,Compute Laplacian} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterISS2ISS2_Clone)
    SetSigma = _swig_new_instance_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterISS2ISS2_SetSigma)
    GetSigma = _swig_new_instance_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterISS2ISS2_GetSigma)
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterISS2ISS2_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterISS2ISS2_GetNormalizeAcrossScale)
    __swig_destroy__ = _itkLaplacianRecursiveGaussianImageFilterPython.delete_itkLaplacianRecursiveGaussianImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkLaplacianRecursiveGaussianImageFilterISS2ISS2

        Create a new object of the class itkLaplacianRecursiveGaussianImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLaplacianRecursiveGaussianImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLaplacianRecursiveGaussianImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLaplacianRecursiveGaussianImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLaplacianRecursiveGaussianImageFilterISS2ISS2 in _itkLaplacianRecursiveGaussianImageFilterPython:
_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterISS2ISS2_swigregister(itkLaplacianRecursiveGaussianImageFilterISS2ISS2)
itkLaplacianRecursiveGaussianImageFilterISS2ISS2___New_orig__ = _itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterISS2ISS2___New_orig__
itkLaplacianRecursiveGaussianImageFilterISS2ISS2_cast = _itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterISS2ISS2_cast


def itkLaplacianRecursiveGaussianImageFilterISS3ISS3_New():
    return itkLaplacianRecursiveGaussianImageFilterISS3ISS3.New()

class itkLaplacianRecursiveGaussianImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""


    Computes the Laplacian of Gaussian (LoG) of an image.

    Computes the Laplacian of Gaussian (LoG) of an image by convolution
    with the second derivative of a Gaussian. This filter is implemented
    using the recursive gaussian filters.

    example{Filtering/ImageFeature/ComputeLaplacian,Compute Laplacian} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterISS3ISS3_Clone)
    SetSigma = _swig_new_instance_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterISS3ISS3_SetSigma)
    GetSigma = _swig_new_instance_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterISS3ISS3_GetSigma)
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterISS3ISS3_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterISS3ISS3_GetNormalizeAcrossScale)
    __swig_destroy__ = _itkLaplacianRecursiveGaussianImageFilterPython.delete_itkLaplacianRecursiveGaussianImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkLaplacianRecursiveGaussianImageFilterISS3ISS3

        Create a new object of the class itkLaplacianRecursiveGaussianImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLaplacianRecursiveGaussianImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLaplacianRecursiveGaussianImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLaplacianRecursiveGaussianImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLaplacianRecursiveGaussianImageFilterISS3ISS3 in _itkLaplacianRecursiveGaussianImageFilterPython:
_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterISS3ISS3_swigregister(itkLaplacianRecursiveGaussianImageFilterISS3ISS3)
itkLaplacianRecursiveGaussianImageFilterISS3ISS3___New_orig__ = _itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterISS3ISS3___New_orig__
itkLaplacianRecursiveGaussianImageFilterISS3ISS3_cast = _itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterISS3ISS3_cast


def itkLaplacianRecursiveGaussianImageFilterIUC2IUC2_New():
    return itkLaplacianRecursiveGaussianImageFilterIUC2IUC2.New()

class itkLaplacianRecursiveGaussianImageFilterIUC2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""


    Computes the Laplacian of Gaussian (LoG) of an image.

    Computes the Laplacian of Gaussian (LoG) of an image by convolution
    with the second derivative of a Gaussian. This filter is implemented
    using the recursive gaussian filters.

    example{Filtering/ImageFeature/ComputeLaplacian,Compute Laplacian} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIUC2IUC2_Clone)
    SetSigma = _swig_new_instance_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIUC2IUC2_SetSigma)
    GetSigma = _swig_new_instance_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIUC2IUC2_GetSigma)
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIUC2IUC2_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIUC2IUC2_GetNormalizeAcrossScale)
    __swig_destroy__ = _itkLaplacianRecursiveGaussianImageFilterPython.delete_itkLaplacianRecursiveGaussianImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkLaplacianRecursiveGaussianImageFilterIUC2IUC2

        Create a new object of the class itkLaplacianRecursiveGaussianImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLaplacianRecursiveGaussianImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLaplacianRecursiveGaussianImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLaplacianRecursiveGaussianImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLaplacianRecursiveGaussianImageFilterIUC2IUC2 in _itkLaplacianRecursiveGaussianImageFilterPython:
_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIUC2IUC2_swigregister(itkLaplacianRecursiveGaussianImageFilterIUC2IUC2)
itkLaplacianRecursiveGaussianImageFilterIUC2IUC2___New_orig__ = _itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIUC2IUC2___New_orig__
itkLaplacianRecursiveGaussianImageFilterIUC2IUC2_cast = _itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIUC2IUC2_cast


def itkLaplacianRecursiveGaussianImageFilterIUC3IUC3_New():
    return itkLaplacianRecursiveGaussianImageFilterIUC3IUC3.New()

class itkLaplacianRecursiveGaussianImageFilterIUC3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""


    Computes the Laplacian of Gaussian (LoG) of an image.

    Computes the Laplacian of Gaussian (LoG) of an image by convolution
    with the second derivative of a Gaussian. This filter is implemented
    using the recursive gaussian filters.

    example{Filtering/ImageFeature/ComputeLaplacian,Compute Laplacian} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIUC3IUC3_Clone)
    SetSigma = _swig_new_instance_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIUC3IUC3_SetSigma)
    GetSigma = _swig_new_instance_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIUC3IUC3_GetSigma)
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIUC3IUC3_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIUC3IUC3_GetNormalizeAcrossScale)
    __swig_destroy__ = _itkLaplacianRecursiveGaussianImageFilterPython.delete_itkLaplacianRecursiveGaussianImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkLaplacianRecursiveGaussianImageFilterIUC3IUC3

        Create a new object of the class itkLaplacianRecursiveGaussianImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLaplacianRecursiveGaussianImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLaplacianRecursiveGaussianImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLaplacianRecursiveGaussianImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLaplacianRecursiveGaussianImageFilterIUC3IUC3 in _itkLaplacianRecursiveGaussianImageFilterPython:
_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIUC3IUC3_swigregister(itkLaplacianRecursiveGaussianImageFilterIUC3IUC3)
itkLaplacianRecursiveGaussianImageFilterIUC3IUC3___New_orig__ = _itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIUC3IUC3___New_orig__
itkLaplacianRecursiveGaussianImageFilterIUC3IUC3_cast = _itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIUC3IUC3_cast


def itkLaplacianRecursiveGaussianImageFilterIUS2IUS2_New():
    return itkLaplacianRecursiveGaussianImageFilterIUS2IUS2.New()

class itkLaplacianRecursiveGaussianImageFilterIUS2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""


    Computes the Laplacian of Gaussian (LoG) of an image.

    Computes the Laplacian of Gaussian (LoG) of an image by convolution
    with the second derivative of a Gaussian. This filter is implemented
    using the recursive gaussian filters.

    example{Filtering/ImageFeature/ComputeLaplacian,Compute Laplacian} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIUS2IUS2_Clone)
    SetSigma = _swig_new_instance_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIUS2IUS2_SetSigma)
    GetSigma = _swig_new_instance_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIUS2IUS2_GetSigma)
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIUS2IUS2_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIUS2IUS2_GetNormalizeAcrossScale)
    __swig_destroy__ = _itkLaplacianRecursiveGaussianImageFilterPython.delete_itkLaplacianRecursiveGaussianImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkLaplacianRecursiveGaussianImageFilterIUS2IUS2

        Create a new object of the class itkLaplacianRecursiveGaussianImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLaplacianRecursiveGaussianImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLaplacianRecursiveGaussianImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLaplacianRecursiveGaussianImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLaplacianRecursiveGaussianImageFilterIUS2IUS2 in _itkLaplacianRecursiveGaussianImageFilterPython:
_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIUS2IUS2_swigregister(itkLaplacianRecursiveGaussianImageFilterIUS2IUS2)
itkLaplacianRecursiveGaussianImageFilterIUS2IUS2___New_orig__ = _itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIUS2IUS2___New_orig__
itkLaplacianRecursiveGaussianImageFilterIUS2IUS2_cast = _itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIUS2IUS2_cast


def itkLaplacianRecursiveGaussianImageFilterIUS3IUS3_New():
    return itkLaplacianRecursiveGaussianImageFilterIUS3IUS3.New()

class itkLaplacianRecursiveGaussianImageFilterIUS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""


    Computes the Laplacian of Gaussian (LoG) of an image.

    Computes the Laplacian of Gaussian (LoG) of an image by convolution
    with the second derivative of a Gaussian. This filter is implemented
    using the recursive gaussian filters.

    example{Filtering/ImageFeature/ComputeLaplacian,Compute Laplacian} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIUS3IUS3_Clone)
    SetSigma = _swig_new_instance_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIUS3IUS3_SetSigma)
    GetSigma = _swig_new_instance_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIUS3IUS3_GetSigma)
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIUS3IUS3_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIUS3IUS3_GetNormalizeAcrossScale)
    __swig_destroy__ = _itkLaplacianRecursiveGaussianImageFilterPython.delete_itkLaplacianRecursiveGaussianImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkLaplacianRecursiveGaussianImageFilterIUS3IUS3

        Create a new object of the class itkLaplacianRecursiveGaussianImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLaplacianRecursiveGaussianImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLaplacianRecursiveGaussianImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLaplacianRecursiveGaussianImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLaplacianRecursiveGaussianImageFilterIUS3IUS3 in _itkLaplacianRecursiveGaussianImageFilterPython:
_itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIUS3IUS3_swigregister(itkLaplacianRecursiveGaussianImageFilterIUS3IUS3)
itkLaplacianRecursiveGaussianImageFilterIUS3IUS3___New_orig__ = _itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIUS3IUS3___New_orig__
itkLaplacianRecursiveGaussianImageFilterIUS3IUS3_cast = _itkLaplacianRecursiveGaussianImageFilterPython.itkLaplacianRecursiveGaussianImageFilterIUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def laplacian_recursive_gaussian_image_filter(*args, **kwargs):
    """Procedural interface for LaplacianRecursiveGaussianImageFilter"""
    import itk
    instance = itk.LaplacianRecursiveGaussianImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def laplacian_recursive_gaussian_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.LaplacianRecursiveGaussianImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.LaplacianRecursiveGaussianImageFilter.values()[0]
    else:
        filter_object = itk.LaplacianRecursiveGaussianImageFilter

    laplacian_recursive_gaussian_image_filter.__doc__ = filter_object.__doc__
    laplacian_recursive_gaussian_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    laplacian_recursive_gaussian_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.LaplacianRecursiveGaussianImageFilter, itkTemplate.itkTemplate):
        laplacian_recursive_gaussian_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        laplacian_recursive_gaussian_image_filter.__doc__ += "\n"
        laplacian_recursive_gaussian_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        laplacian_recursive_gaussian_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



