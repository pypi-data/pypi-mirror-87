"""Tests for models."""
# pylint: disable=protected-access

import sys

import pytest

from open_alchemy import models_file

_DOCSTRING = '"""Autogenerated SQLAlchemy models based on OpenAlchemy models."""'
_ADDITIONAL_IMPORT = ""
if sys.version_info[1] < 8:
    _ADDITIONAL_IMPORT = """
import typing_extensions"""


@pytest.mark.parametrize(
    "models, expected_source",
    [
        (
            ["model 1"],
            f"""{_DOCSTRING}
# pylint: disable=no-member,super-init-not-called,unused-argument

import typing

import sqlalchemy{_ADDITIONAL_IMPORT}
from sqlalchemy import orm

from open_alchemy import models

Base = models.Base  # type: ignore
model 1
""",
        ),
        (
            ["model 1", "model 2"],
            f"""{_DOCSTRING}
# pylint: disable=no-member,super-init-not-called,unused-argument

import typing

import sqlalchemy{_ADDITIONAL_IMPORT}
from sqlalchemy import orm

from open_alchemy import models

Base = models.Base  # type: ignore
model 1
model 2
""",
        ),
        (
            ["model 1 datetime."],
            f"""{_DOCSTRING}
# pylint: disable=no-member,super-init-not-called,unused-argument

import datetime
import typing

import sqlalchemy{_ADDITIONAL_IMPORT}
from sqlalchemy import orm

from open_alchemy import models

Base = models.Base  # type: ignore
model 1 datetime.
""",
        ),
        (
            ["model 1 datetime.", "model 2 datetime."],
            f"""{_DOCSTRING}
# pylint: disable=no-member,super-init-not-called,unused-argument

import datetime
import typing

import sqlalchemy{_ADDITIONAL_IMPORT}
from sqlalchemy import orm

from open_alchemy import models

Base = models.Base  # type: ignore
model 1 datetime.
model 2 datetime.
""",
        ),
    ],
    ids=[
        "single model",
        "multiple models",
        "contains datetime",
        "contains duplicate imports",
    ],
)
@pytest.mark.models_file
def test_generate(models, expected_source):
    """
    GIVEN single model
    WHEN generate is called
    THEN the source for the models file is returned.
    """
    source = models_file._models.generate(models=models)

    assert source == expected_source
