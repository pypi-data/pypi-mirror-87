# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKQuadEdgeMeshPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkQuadEdgeMeshBasePython
else:
    import _itkQuadEdgeMeshBasePython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkQuadEdgeMeshBasePython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkQuadEdgeMeshBasePython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkQuadEdgeCellTraitsInfoPython
import itk.itkQuadEdgeMeshPointPython
import itk.itkGeometricalQuadEdgePython
import itk.itkQuadEdgePython
import itk.itkMapContainerPython
import itk.itkQuadEdgeMeshLineCellPython
import itk.itkArrayPython

def itkBoundingBoxULL2FMCULLQEMPF2_New():
    return itkBoundingBoxULL2FMCULLQEMPF2.New()

class itkBoundingBoxULL2FMCULLQEMPF2(itk.ITKCommonBasePython.itkObject):
    r"""


    Represent and compute information about bounding boxes.

    BoundingBox is a supporting class that represents, computes, and
    caches information about bounding boxes. The bounding box can be
    computed from several sources, including manual specification and
    computation from an input points container.

    This is a templated, n-dimensional version of the bounding box.
    Bounding boxes are represented by n pairs of (min,max) pairs, where
    min is the minimum coordinate value and max is the maximum coordinate
    value for coordinate axis i.

    Template parameters for BoundingBox:

    Parameters:
    -----------

    TPointIdentifier:  The type used to access a particular point (i.e., a
    point's id)

    TCoordRep:  Numerical type with which to represent each coordinate
    value.

    VPointDimension:  Geometric dimension of space. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkQuadEdgeMeshBasePython.itkBoundingBoxULL2FMCULLQEMPF2___New_orig__)
    Clone = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkBoundingBoxULL2FMCULLQEMPF2_Clone)
    SetPoints = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkBoundingBoxULL2FMCULLQEMPF2_SetPoints)
    GetPoints = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkBoundingBoxULL2FMCULLQEMPF2_GetPoints)
    ComputeCorners = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkBoundingBoxULL2FMCULLQEMPF2_ComputeCorners)
    ComputeBoundingBox = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkBoundingBoxULL2FMCULLQEMPF2_ComputeBoundingBox)
    GetBounds = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkBoundingBoxULL2FMCULLQEMPF2_GetBounds)
    GetCenter = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkBoundingBoxULL2FMCULLQEMPF2_GetCenter)
    GetMinimum = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkBoundingBoxULL2FMCULLQEMPF2_GetMinimum)
    SetMinimum = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkBoundingBoxULL2FMCULLQEMPF2_SetMinimum)
    GetMaximum = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkBoundingBoxULL2FMCULLQEMPF2_GetMaximum)
    SetMaximum = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkBoundingBoxULL2FMCULLQEMPF2_SetMaximum)
    ConsiderPoint = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkBoundingBoxULL2FMCULLQEMPF2_ConsiderPoint)
    GetDiagonalLength2 = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkBoundingBoxULL2FMCULLQEMPF2_GetDiagonalLength2)
    IsInside = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkBoundingBoxULL2FMCULLQEMPF2_IsInside)
    DeepCopy = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkBoundingBoxULL2FMCULLQEMPF2_DeepCopy)
    __swig_destroy__ = _itkQuadEdgeMeshBasePython.delete_itkBoundingBoxULL2FMCULLQEMPF2
    cast = _swig_new_static_method(_itkQuadEdgeMeshBasePython.itkBoundingBoxULL2FMCULLQEMPF2_cast)

    def New(*args, **kargs):
        """New() -> itkBoundingBoxULL2FMCULLQEMPF2

        Create a new object of the class itkBoundingBoxULL2FMCULLQEMPF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundingBoxULL2FMCULLQEMPF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBoundingBoxULL2FMCULLQEMPF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBoundingBoxULL2FMCULLQEMPF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBoundingBoxULL2FMCULLQEMPF2 in _itkQuadEdgeMeshBasePython:
_itkQuadEdgeMeshBasePython.itkBoundingBoxULL2FMCULLQEMPF2_swigregister(itkBoundingBoxULL2FMCULLQEMPF2)
itkBoundingBoxULL2FMCULLQEMPF2___New_orig__ = _itkQuadEdgeMeshBasePython.itkBoundingBoxULL2FMCULLQEMPF2___New_orig__
itkBoundingBoxULL2FMCULLQEMPF2_cast = _itkQuadEdgeMeshBasePython.itkBoundingBoxULL2FMCULLQEMPF2_cast


def itkBoundingBoxULL3FMCULLQEMPF3_New():
    return itkBoundingBoxULL3FMCULLQEMPF3.New()

class itkBoundingBoxULL3FMCULLQEMPF3(itk.ITKCommonBasePython.itkObject):
    r"""


    Represent and compute information about bounding boxes.

    BoundingBox is a supporting class that represents, computes, and
    caches information about bounding boxes. The bounding box can be
    computed from several sources, including manual specification and
    computation from an input points container.

    This is a templated, n-dimensional version of the bounding box.
    Bounding boxes are represented by n pairs of (min,max) pairs, where
    min is the minimum coordinate value and max is the maximum coordinate
    value for coordinate axis i.

    Template parameters for BoundingBox:

    Parameters:
    -----------

    TPointIdentifier:  The type used to access a particular point (i.e., a
    point's id)

    TCoordRep:  Numerical type with which to represent each coordinate
    value.

    VPointDimension:  Geometric dimension of space. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkQuadEdgeMeshBasePython.itkBoundingBoxULL3FMCULLQEMPF3___New_orig__)
    Clone = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkBoundingBoxULL3FMCULLQEMPF3_Clone)
    SetPoints = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkBoundingBoxULL3FMCULLQEMPF3_SetPoints)
    GetPoints = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkBoundingBoxULL3FMCULLQEMPF3_GetPoints)
    ComputeCorners = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkBoundingBoxULL3FMCULLQEMPF3_ComputeCorners)
    ComputeBoundingBox = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkBoundingBoxULL3FMCULLQEMPF3_ComputeBoundingBox)
    GetBounds = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkBoundingBoxULL3FMCULLQEMPF3_GetBounds)
    GetCenter = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkBoundingBoxULL3FMCULLQEMPF3_GetCenter)
    GetMinimum = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkBoundingBoxULL3FMCULLQEMPF3_GetMinimum)
    SetMinimum = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkBoundingBoxULL3FMCULLQEMPF3_SetMinimum)
    GetMaximum = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkBoundingBoxULL3FMCULLQEMPF3_GetMaximum)
    SetMaximum = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkBoundingBoxULL3FMCULLQEMPF3_SetMaximum)
    ConsiderPoint = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkBoundingBoxULL3FMCULLQEMPF3_ConsiderPoint)
    GetDiagonalLength2 = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkBoundingBoxULL3FMCULLQEMPF3_GetDiagonalLength2)
    IsInside = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkBoundingBoxULL3FMCULLQEMPF3_IsInside)
    DeepCopy = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkBoundingBoxULL3FMCULLQEMPF3_DeepCopy)
    __swig_destroy__ = _itkQuadEdgeMeshBasePython.delete_itkBoundingBoxULL3FMCULLQEMPF3
    cast = _swig_new_static_method(_itkQuadEdgeMeshBasePython.itkBoundingBoxULL3FMCULLQEMPF3_cast)

    def New(*args, **kargs):
        """New() -> itkBoundingBoxULL3FMCULLQEMPF3

        Create a new object of the class itkBoundingBoxULL3FMCULLQEMPF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundingBoxULL3FMCULLQEMPF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBoundingBoxULL3FMCULLQEMPF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBoundingBoxULL3FMCULLQEMPF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBoundingBoxULL3FMCULLQEMPF3 in _itkQuadEdgeMeshBasePython:
_itkQuadEdgeMeshBasePython.itkBoundingBoxULL3FMCULLQEMPF3_swigregister(itkBoundingBoxULL3FMCULLQEMPF3)
itkBoundingBoxULL3FMCULLQEMPF3___New_orig__ = _itkQuadEdgeMeshBasePython.itkBoundingBoxULL3FMCULLQEMPF3___New_orig__
itkBoundingBoxULL3FMCULLQEMPF3_cast = _itkQuadEdgeMeshBasePython.itkBoundingBoxULL3FMCULLQEMPF3_cast


def itkMapContainerULLCIDQEMCTI2_New():
    return itkMapContainerULLCIDQEMCTI2.New()

class itkMapContainerULLCIDQEMCTI2(itk.ITKCommonBasePython.itkObject):
    r"""


    A wrapper of the STL "map" container.

    Define a front-end to the STL "map" container that conforms to the
    IndexedContainerInterface. This is a full-fleged Object, so there are
    events, modification time, debug, and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  A type that shall be used to index the container.
    It must have a < operator defined for ordering.

    TElement:  The element type stored in the container. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkMapContainerULLCIDQEMCTI2 self) -> itkMapContainerULLCIDQEMCTI2
        __init__(itkMapContainerULLCIDQEMCTI2 self, std::less< unsigned long long > const & comp) -> itkMapContainerULLCIDQEMCTI2


        A wrapper of the STL "map" container.

        Define a front-end to the STL "map" container that conforms to the
        IndexedContainerInterface. This is a full-fleged Object, so there are
        events, modification time, debug, and reference count information.

        Parameters:
        -----------

        TElementIdentifier:  A type that shall be used to index the container.
        It must have a < operator defined for ordering.

        TElement:  The element type stored in the container. 
        """
        _itkQuadEdgeMeshBasePython.itkMapContainerULLCIDQEMCTI2_swiginit(self, _itkQuadEdgeMeshBasePython.new_itkMapContainerULLCIDQEMCTI2(*args))
    __New_orig__ = _swig_new_static_method(_itkQuadEdgeMeshBasePython.itkMapContainerULLCIDQEMCTI2___New_orig__)
    Clone = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMapContainerULLCIDQEMCTI2_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMapContainerULLCIDQEMCTI2_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMapContainerULLCIDQEMCTI2_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMapContainerULLCIDQEMCTI2_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMapContainerULLCIDQEMCTI2_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMapContainerULLCIDQEMCTI2_GetElement)
    SetElement = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMapContainerULLCIDQEMCTI2_SetElement)
    InsertElement = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMapContainerULLCIDQEMCTI2_InsertElement)
    IndexExists = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMapContainerULLCIDQEMCTI2_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMapContainerULLCIDQEMCTI2_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMapContainerULLCIDQEMCTI2_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMapContainerULLCIDQEMCTI2_DeleteIndex)
    Size = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMapContainerULLCIDQEMCTI2_Size)
    Reserve = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMapContainerULLCIDQEMCTI2_Reserve)
    Squeeze = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMapContainerULLCIDQEMCTI2_Squeeze)
    Initialize = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMapContainerULLCIDQEMCTI2_Initialize)
    __swig_destroy__ = _itkQuadEdgeMeshBasePython.delete_itkMapContainerULLCIDQEMCTI2
    cast = _swig_new_static_method(_itkQuadEdgeMeshBasePython.itkMapContainerULLCIDQEMCTI2_cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerULLCIDQEMCTI2

        Create a new object of the class itkMapContainerULLCIDQEMCTI2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULLCIDQEMCTI2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerULLCIDQEMCTI2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerULLCIDQEMCTI2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerULLCIDQEMCTI2 in _itkQuadEdgeMeshBasePython:
_itkQuadEdgeMeshBasePython.itkMapContainerULLCIDQEMCTI2_swigregister(itkMapContainerULLCIDQEMCTI2)
itkMapContainerULLCIDQEMCTI2___New_orig__ = _itkQuadEdgeMeshBasePython.itkMapContainerULLCIDQEMCTI2___New_orig__
itkMapContainerULLCIDQEMCTI2_cast = _itkQuadEdgeMeshBasePython.itkMapContainerULLCIDQEMCTI2_cast


def itkMapContainerULLCIDQEMCTI3_New():
    return itkMapContainerULLCIDQEMCTI3.New()

class itkMapContainerULLCIDQEMCTI3(itk.ITKCommonBasePython.itkObject):
    r"""


    A wrapper of the STL "map" container.

    Define a front-end to the STL "map" container that conforms to the
    IndexedContainerInterface. This is a full-fleged Object, so there are
    events, modification time, debug, and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  A type that shall be used to index the container.
    It must have a < operator defined for ordering.

    TElement:  The element type stored in the container. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkMapContainerULLCIDQEMCTI3 self) -> itkMapContainerULLCIDQEMCTI3
        __init__(itkMapContainerULLCIDQEMCTI3 self, std::less< unsigned long long > const & comp) -> itkMapContainerULLCIDQEMCTI3


        A wrapper of the STL "map" container.

        Define a front-end to the STL "map" container that conforms to the
        IndexedContainerInterface. This is a full-fleged Object, so there are
        events, modification time, debug, and reference count information.

        Parameters:
        -----------

        TElementIdentifier:  A type that shall be used to index the container.
        It must have a < operator defined for ordering.

        TElement:  The element type stored in the container. 
        """
        _itkQuadEdgeMeshBasePython.itkMapContainerULLCIDQEMCTI3_swiginit(self, _itkQuadEdgeMeshBasePython.new_itkMapContainerULLCIDQEMCTI3(*args))
    __New_orig__ = _swig_new_static_method(_itkQuadEdgeMeshBasePython.itkMapContainerULLCIDQEMCTI3___New_orig__)
    Clone = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMapContainerULLCIDQEMCTI3_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMapContainerULLCIDQEMCTI3_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMapContainerULLCIDQEMCTI3_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMapContainerULLCIDQEMCTI3_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMapContainerULLCIDQEMCTI3_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMapContainerULLCIDQEMCTI3_GetElement)
    SetElement = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMapContainerULLCIDQEMCTI3_SetElement)
    InsertElement = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMapContainerULLCIDQEMCTI3_InsertElement)
    IndexExists = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMapContainerULLCIDQEMCTI3_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMapContainerULLCIDQEMCTI3_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMapContainerULLCIDQEMCTI3_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMapContainerULLCIDQEMCTI3_DeleteIndex)
    Size = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMapContainerULLCIDQEMCTI3_Size)
    Reserve = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMapContainerULLCIDQEMCTI3_Reserve)
    Squeeze = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMapContainerULLCIDQEMCTI3_Squeeze)
    Initialize = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMapContainerULLCIDQEMCTI3_Initialize)
    __swig_destroy__ = _itkQuadEdgeMeshBasePython.delete_itkMapContainerULLCIDQEMCTI3
    cast = _swig_new_static_method(_itkQuadEdgeMeshBasePython.itkMapContainerULLCIDQEMCTI3_cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerULLCIDQEMCTI3

        Create a new object of the class itkMapContainerULLCIDQEMCTI3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULLCIDQEMCTI3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerULLCIDQEMCTI3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerULLCIDQEMCTI3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerULLCIDQEMCTI3 in _itkQuadEdgeMeshBasePython:
_itkQuadEdgeMeshBasePython.itkMapContainerULLCIDQEMCTI3_swigregister(itkMapContainerULLCIDQEMCTI3)
itkMapContainerULLCIDQEMCTI3___New_orig__ = _itkQuadEdgeMeshBasePython.itkMapContainerULLCIDQEMCTI3___New_orig__
itkMapContainerULLCIDQEMCTI3_cast = _itkQuadEdgeMeshBasePython.itkMapContainerULLCIDQEMCTI3_cast


def itkMeshSourceMD2QEMTD2BBFF_New():
    return itkMeshSourceMD2QEMTD2BBFF.New()

class itkMeshSourceMD2QEMTD2BBFF(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Base class for all process objects that output mesh data.

    MeshSource is the base class for all process objects that output mesh
    data. Specifically, this class defines the GetOutput() method that
    returns a pointer to the output mesh. The class also defines some
    internal private data members that are used to manage streaming of
    data. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkQuadEdgeMeshBasePython.itkMeshSourceMD2QEMTD2BBFF___New_orig__)
    Clone = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshSourceMD2QEMTD2BBFF_Clone)
    GetOutput = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshSourceMD2QEMTD2BBFF_GetOutput)
    SetOutput = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshSourceMD2QEMTD2BBFF_SetOutput)
    GraftOutput = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshSourceMD2QEMTD2BBFF_GraftOutput)
    GraftNthOutput = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshSourceMD2QEMTD2BBFF_GraftNthOutput)
    __swig_destroy__ = _itkQuadEdgeMeshBasePython.delete_itkMeshSourceMD2QEMTD2BBFF
    cast = _swig_new_static_method(_itkQuadEdgeMeshBasePython.itkMeshSourceMD2QEMTD2BBFF_cast)

    def New(*args, **kargs):
        """New() -> itkMeshSourceMD2QEMTD2BBFF

        Create a new object of the class itkMeshSourceMD2QEMTD2BBFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshSourceMD2QEMTD2BBFF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeshSourceMD2QEMTD2BBFF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeshSourceMD2QEMTD2BBFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshSourceMD2QEMTD2BBFF in _itkQuadEdgeMeshBasePython:
_itkQuadEdgeMeshBasePython.itkMeshSourceMD2QEMTD2BBFF_swigregister(itkMeshSourceMD2QEMTD2BBFF)
itkMeshSourceMD2QEMTD2BBFF___New_orig__ = _itkQuadEdgeMeshBasePython.itkMeshSourceMD2QEMTD2BBFF___New_orig__
itkMeshSourceMD2QEMTD2BBFF_cast = _itkQuadEdgeMeshBasePython.itkMeshSourceMD2QEMTD2BBFF_cast


def itkMeshSourceMD3QEMTD3BBFF_New():
    return itkMeshSourceMD3QEMTD3BBFF.New()

class itkMeshSourceMD3QEMTD3BBFF(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Base class for all process objects that output mesh data.

    MeshSource is the base class for all process objects that output mesh
    data. Specifically, this class defines the GetOutput() method that
    returns a pointer to the output mesh. The class also defines some
    internal private data members that are used to manage streaming of
    data. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkQuadEdgeMeshBasePython.itkMeshSourceMD3QEMTD3BBFF___New_orig__)
    Clone = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshSourceMD3QEMTD3BBFF_Clone)
    GetOutput = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshSourceMD3QEMTD3BBFF_GetOutput)
    SetOutput = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshSourceMD3QEMTD3BBFF_SetOutput)
    GraftOutput = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshSourceMD3QEMTD3BBFF_GraftOutput)
    GraftNthOutput = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshSourceMD3QEMTD3BBFF_GraftNthOutput)
    __swig_destroy__ = _itkQuadEdgeMeshBasePython.delete_itkMeshSourceMD3QEMTD3BBFF
    cast = _swig_new_static_method(_itkQuadEdgeMeshBasePython.itkMeshSourceMD3QEMTD3BBFF_cast)

    def New(*args, **kargs):
        """New() -> itkMeshSourceMD3QEMTD3BBFF

        Create a new object of the class itkMeshSourceMD3QEMTD3BBFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshSourceMD3QEMTD3BBFF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeshSourceMD3QEMTD3BBFF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeshSourceMD3QEMTD3BBFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshSourceMD3QEMTD3BBFF in _itkQuadEdgeMeshBasePython:
_itkQuadEdgeMeshBasePython.itkMeshSourceMD3QEMTD3BBFF_swigregister(itkMeshSourceMD3QEMTD3BBFF)
itkMeshSourceMD3QEMTD3BBFF___New_orig__ = _itkQuadEdgeMeshBasePython.itkMeshSourceMD3QEMTD3BBFF___New_orig__
itkMeshSourceMD3QEMTD3BBFF_cast = _itkQuadEdgeMeshBasePython.itkMeshSourceMD3QEMTD3BBFF_cast


def itkMeshSourceQEMD2_New():
    return itkMeshSourceQEMD2.New()

class itkMeshSourceQEMD2(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Base class for all process objects that output mesh data.

    MeshSource is the base class for all process objects that output mesh
    data. Specifically, this class defines the GetOutput() method that
    returns a pointer to the output mesh. The class also defines some
    internal private data members that are used to manage streaming of
    data. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkQuadEdgeMeshBasePython.itkMeshSourceQEMD2___New_orig__)
    Clone = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshSourceQEMD2_Clone)
    GetOutput = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshSourceQEMD2_GetOutput)
    SetOutput = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshSourceQEMD2_SetOutput)
    GraftOutput = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshSourceQEMD2_GraftOutput)
    GraftNthOutput = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshSourceQEMD2_GraftNthOutput)
    __swig_destroy__ = _itkQuadEdgeMeshBasePython.delete_itkMeshSourceQEMD2
    cast = _swig_new_static_method(_itkQuadEdgeMeshBasePython.itkMeshSourceQEMD2_cast)

    def New(*args, **kargs):
        """New() -> itkMeshSourceQEMD2

        Create a new object of the class itkMeshSourceQEMD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshSourceQEMD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeshSourceQEMD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeshSourceQEMD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshSourceQEMD2 in _itkQuadEdgeMeshBasePython:
_itkQuadEdgeMeshBasePython.itkMeshSourceQEMD2_swigregister(itkMeshSourceQEMD2)
itkMeshSourceQEMD2___New_orig__ = _itkQuadEdgeMeshBasePython.itkMeshSourceQEMD2___New_orig__
itkMeshSourceQEMD2_cast = _itkQuadEdgeMeshBasePython.itkMeshSourceQEMD2_cast


def itkMeshSourceQEMD3_New():
    return itkMeshSourceQEMD3.New()

class itkMeshSourceQEMD3(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Base class for all process objects that output mesh data.

    MeshSource is the base class for all process objects that output mesh
    data. Specifically, this class defines the GetOutput() method that
    returns a pointer to the output mesh. The class also defines some
    internal private data members that are used to manage streaming of
    data. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkQuadEdgeMeshBasePython.itkMeshSourceQEMD3___New_orig__)
    Clone = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshSourceQEMD3_Clone)
    GetOutput = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshSourceQEMD3_GetOutput)
    SetOutput = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshSourceQEMD3_SetOutput)
    GraftOutput = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshSourceQEMD3_GraftOutput)
    GraftNthOutput = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshSourceQEMD3_GraftNthOutput)
    __swig_destroy__ = _itkQuadEdgeMeshBasePython.delete_itkMeshSourceQEMD3
    cast = _swig_new_static_method(_itkQuadEdgeMeshBasePython.itkMeshSourceQEMD3_cast)

    def New(*args, **kargs):
        """New() -> itkMeshSourceQEMD3

        Create a new object of the class itkMeshSourceQEMD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshSourceQEMD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeshSourceQEMD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeshSourceQEMD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshSourceQEMD3 in _itkQuadEdgeMeshBasePython:
_itkQuadEdgeMeshBasePython.itkMeshSourceQEMD3_swigregister(itkMeshSourceQEMD3)
itkMeshSourceQEMD3___New_orig__ = _itkQuadEdgeMeshBasePython.itkMeshSourceQEMD3___New_orig__
itkMeshSourceQEMD3_cast = _itkQuadEdgeMeshBasePython.itkMeshSourceQEMD3_cast


def itkMeshToMeshFilterQEMD2QEMD2_New():
    return itkMeshToMeshFilterQEMD2QEMD2.New()

class itkMeshToMeshFilterQEMD2QEMD2(itkMeshSourceQEMD2):
    r"""


    MeshToMeshFilter is the base class for all process objects that output
    mesh data, and require mesh data as input. Specifically, this class
    defines the SetInput() method for defining the input to a filter. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkQuadEdgeMeshBasePython.itkMeshToMeshFilterQEMD2QEMD2___New_orig__)
    Clone = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshToMeshFilterQEMD2QEMD2_Clone)
    SetInput = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshToMeshFilterQEMD2QEMD2_SetInput)
    GetInput = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshToMeshFilterQEMD2QEMD2_GetInput)
    __swig_destroy__ = _itkQuadEdgeMeshBasePython.delete_itkMeshToMeshFilterQEMD2QEMD2
    cast = _swig_new_static_method(_itkQuadEdgeMeshBasePython.itkMeshToMeshFilterQEMD2QEMD2_cast)

    def New(*args, **kargs):
        """New() -> itkMeshToMeshFilterQEMD2QEMD2

        Create a new object of the class itkMeshToMeshFilterQEMD2QEMD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshToMeshFilterQEMD2QEMD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeshToMeshFilterQEMD2QEMD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeshToMeshFilterQEMD2QEMD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshToMeshFilterQEMD2QEMD2 in _itkQuadEdgeMeshBasePython:
_itkQuadEdgeMeshBasePython.itkMeshToMeshFilterQEMD2QEMD2_swigregister(itkMeshToMeshFilterQEMD2QEMD2)
itkMeshToMeshFilterQEMD2QEMD2___New_orig__ = _itkQuadEdgeMeshBasePython.itkMeshToMeshFilterQEMD2QEMD2___New_orig__
itkMeshToMeshFilterQEMD2QEMD2_cast = _itkQuadEdgeMeshBasePython.itkMeshToMeshFilterQEMD2QEMD2_cast


def itkMeshToMeshFilterQEMD3QEMD3_New():
    return itkMeshToMeshFilterQEMD3QEMD3.New()

class itkMeshToMeshFilterQEMD3QEMD3(itkMeshSourceQEMD3):
    r"""


    MeshToMeshFilter is the base class for all process objects that output
    mesh data, and require mesh data as input. Specifically, this class
    defines the SetInput() method for defining the input to a filter. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkQuadEdgeMeshBasePython.itkMeshToMeshFilterQEMD3QEMD3___New_orig__)
    Clone = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshToMeshFilterQEMD3QEMD3_Clone)
    SetInput = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshToMeshFilterQEMD3QEMD3_SetInput)
    GetInput = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshToMeshFilterQEMD3QEMD3_GetInput)
    __swig_destroy__ = _itkQuadEdgeMeshBasePython.delete_itkMeshToMeshFilterQEMD3QEMD3
    cast = _swig_new_static_method(_itkQuadEdgeMeshBasePython.itkMeshToMeshFilterQEMD3QEMD3_cast)

    def New(*args, **kargs):
        """New() -> itkMeshToMeshFilterQEMD3QEMD3

        Create a new object of the class itkMeshToMeshFilterQEMD3QEMD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshToMeshFilterQEMD3QEMD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeshToMeshFilterQEMD3QEMD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeshToMeshFilterQEMD3QEMD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshToMeshFilterQEMD3QEMD3 in _itkQuadEdgeMeshBasePython:
_itkQuadEdgeMeshBasePython.itkMeshToMeshFilterQEMD3QEMD3_swigregister(itkMeshToMeshFilterQEMD3QEMD3)
itkMeshToMeshFilterQEMD3QEMD3___New_orig__ = _itkQuadEdgeMeshBasePython.itkMeshToMeshFilterQEMD3QEMD3___New_orig__
itkMeshToMeshFilterQEMD3QEMD3_cast = _itkQuadEdgeMeshBasePython.itkMeshToMeshFilterQEMD3QEMD3_cast


def itkPointSetD2QEMTD2BBFF_New():
    return itkPointSetD2QEMTD2BBFF.New()

class itkPointSetD2QEMTD2BBFF(itk.ITKCommonBasePython.itkDataObject):
    r"""


    A superclass of the N-dimensional mesh structure; supports point
    (geometric coordinate and attribute) definition.

    PointSet is a superclass of the N-dimensional mesh structure (
    itk::Mesh). It provides the portion of the mesh definition for
    geometric coordinates (and associated attribute or pixel information).
    The defined API provides operations on points but does not tie down
    the underlying implementation and storage. A "MeshTraits" structure
    is used to define the container and identifier to access the points.
    See DefaultStaticMeshTraits for the set of type definitions needed.
    All types that are defined in the "MeshTraits" structure will have
    duplicate type alias in the resulting mesh itself.

    PointSet has two template parameters. The first is the pixel type, or
    the type of data stored (optionally) with the points. The second is
    the "MeshTraits" structure controlling type information
    characterizing the point set. Most users will be happy with the
    defaults, and will not have to worry about this second argument.

    Template parameters for PointSet:

    TPixelType = The type stored as data for the point.

    TMeshTraits = Type information structure for the point set.

    {Core/Common/CreateAPointSet,Create a PointSet}
    {Core/Common/ReadAPointSet,Read a PointSet}
    {Core/Common/WriteAPointSet,Write a PointSet}
    {Core/Common/BoundingBoxOfAPointSet,Bounding Box Of A Point Set} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkQuadEdgeMeshBasePython.itkPointSetD2QEMTD2BBFF___New_orig__)
    Clone = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkPointSetD2QEMTD2BBFF_Clone)
    GetMaximumNumberOfRegions = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkPointSetD2QEMTD2BBFF_GetMaximumNumberOfRegions)
    PassStructure = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkPointSetD2QEMTD2BBFF_PassStructure)
    GetNumberOfPoints = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkPointSetD2QEMTD2BBFF_GetNumberOfPoints)
    SetPoints = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkPointSetD2QEMTD2BBFF_SetPoints)
    GetPoints = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkPointSetD2QEMTD2BBFF_GetPoints)
    SetPoint = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkPointSetD2QEMTD2BBFF_SetPoint)
    GetPoint = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkPointSetD2QEMTD2BBFF_GetPoint)
    SetPointData = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkPointSetD2QEMTD2BBFF_SetPointData)
    GetPointData = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkPointSetD2QEMTD2BBFF_GetPointData)
    SetRequestedRegion = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkPointSetD2QEMTD2BBFF_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkPointSetD2QEMTD2BBFF_GetRequestedRegion)
    SetBufferedRegion = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkPointSetD2QEMTD2BBFF_SetBufferedRegion)
    GetBufferedRegion = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkPointSetD2QEMTD2BBFF_GetBufferedRegion)
    __swig_destroy__ = _itkQuadEdgeMeshBasePython.delete_itkPointSetD2QEMTD2BBFF
    cast = _swig_new_static_method(_itkQuadEdgeMeshBasePython.itkPointSetD2QEMTD2BBFF_cast)

    def New(*args, **kargs):
        """New() -> itkPointSetD2QEMTD2BBFF

        Create a new object of the class itkPointSetD2QEMTD2BBFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetD2QEMTD2BBFF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetD2QEMTD2BBFF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetD2QEMTD2BBFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetD2QEMTD2BBFF in _itkQuadEdgeMeshBasePython:
_itkQuadEdgeMeshBasePython.itkPointSetD2QEMTD2BBFF_swigregister(itkPointSetD2QEMTD2BBFF)
itkPointSetD2QEMTD2BBFF___New_orig__ = _itkQuadEdgeMeshBasePython.itkPointSetD2QEMTD2BBFF___New_orig__
itkPointSetD2QEMTD2BBFF_cast = _itkQuadEdgeMeshBasePython.itkPointSetD2QEMTD2BBFF_cast


def itkPointSetD3QEMTD3BBFF_New():
    return itkPointSetD3QEMTD3BBFF.New()

class itkPointSetD3QEMTD3BBFF(itk.ITKCommonBasePython.itkDataObject):
    r"""


    A superclass of the N-dimensional mesh structure; supports point
    (geometric coordinate and attribute) definition.

    PointSet is a superclass of the N-dimensional mesh structure (
    itk::Mesh). It provides the portion of the mesh definition for
    geometric coordinates (and associated attribute or pixel information).
    The defined API provides operations on points but does not tie down
    the underlying implementation and storage. A "MeshTraits" structure
    is used to define the container and identifier to access the points.
    See DefaultStaticMeshTraits for the set of type definitions needed.
    All types that are defined in the "MeshTraits" structure will have
    duplicate type alias in the resulting mesh itself.

    PointSet has two template parameters. The first is the pixel type, or
    the type of data stored (optionally) with the points. The second is
    the "MeshTraits" structure controlling type information
    characterizing the point set. Most users will be happy with the
    defaults, and will not have to worry about this second argument.

    Template parameters for PointSet:

    TPixelType = The type stored as data for the point.

    TMeshTraits = Type information structure for the point set.

    {Core/Common/CreateAPointSet,Create a PointSet}
    {Core/Common/ReadAPointSet,Read a PointSet}
    {Core/Common/WriteAPointSet,Write a PointSet}
    {Core/Common/BoundingBoxOfAPointSet,Bounding Box Of A Point Set} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkQuadEdgeMeshBasePython.itkPointSetD3QEMTD3BBFF___New_orig__)
    Clone = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkPointSetD3QEMTD3BBFF_Clone)
    GetMaximumNumberOfRegions = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkPointSetD3QEMTD3BBFF_GetMaximumNumberOfRegions)
    PassStructure = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkPointSetD3QEMTD3BBFF_PassStructure)
    GetNumberOfPoints = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkPointSetD3QEMTD3BBFF_GetNumberOfPoints)
    SetPoints = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkPointSetD3QEMTD3BBFF_SetPoints)
    GetPoints = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkPointSetD3QEMTD3BBFF_GetPoints)
    SetPoint = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkPointSetD3QEMTD3BBFF_SetPoint)
    GetPoint = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkPointSetD3QEMTD3BBFF_GetPoint)
    SetPointData = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkPointSetD3QEMTD3BBFF_SetPointData)
    GetPointData = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkPointSetD3QEMTD3BBFF_GetPointData)
    SetRequestedRegion = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkPointSetD3QEMTD3BBFF_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkPointSetD3QEMTD3BBFF_GetRequestedRegion)
    SetBufferedRegion = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkPointSetD3QEMTD3BBFF_SetBufferedRegion)
    GetBufferedRegion = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkPointSetD3QEMTD3BBFF_GetBufferedRegion)
    __swig_destroy__ = _itkQuadEdgeMeshBasePython.delete_itkPointSetD3QEMTD3BBFF
    cast = _swig_new_static_method(_itkQuadEdgeMeshBasePython.itkPointSetD3QEMTD3BBFF_cast)

    def New(*args, **kargs):
        """New() -> itkPointSetD3QEMTD3BBFF

        Create a new object of the class itkPointSetD3QEMTD3BBFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetD3QEMTD3BBFF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetD3QEMTD3BBFF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetD3QEMTD3BBFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetD3QEMTD3BBFF in _itkQuadEdgeMeshBasePython:
_itkQuadEdgeMeshBasePython.itkPointSetD3QEMTD3BBFF_swigregister(itkPointSetD3QEMTD3BBFF)
itkPointSetD3QEMTD3BBFF___New_orig__ = _itkQuadEdgeMeshBasePython.itkPointSetD3QEMTD3BBFF___New_orig__
itkPointSetD3QEMTD3BBFF_cast = _itkQuadEdgeMeshBasePython.itkPointSetD3QEMTD3BBFF_cast

class itkImageToMeshFilterISS2MD2QEMTD2BBFF(itkMeshSourceMD2QEMTD2BBFF):
    r"""


    ImageToMeshFilter is the base class for all process objects that
    output Mesh data and require image data as input. Specifically, this
    class defines the SetInput() method for defining the input to a
    filter. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterISS2MD2QEMTD2BBFF_SetInput)
    GetInput = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterISS2MD2QEMTD2BBFF_GetInput)
    GetOutput = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterISS2MD2QEMTD2BBFF_GetOutput)
    GenerateOutputInformation = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterISS2MD2QEMTD2BBFF_GenerateOutputInformation)
    __swig_destroy__ = _itkQuadEdgeMeshBasePython.delete_itkImageToMeshFilterISS2MD2QEMTD2BBFF
    cast = _swig_new_static_method(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterISS2MD2QEMTD2BBFF_cast)

# Register itkImageToMeshFilterISS2MD2QEMTD2BBFF in _itkQuadEdgeMeshBasePython:
_itkQuadEdgeMeshBasePython.itkImageToMeshFilterISS2MD2QEMTD2BBFF_swigregister(itkImageToMeshFilterISS2MD2QEMTD2BBFF)
itkImageToMeshFilterISS2MD2QEMTD2BBFF_cast = _itkQuadEdgeMeshBasePython.itkImageToMeshFilterISS2MD2QEMTD2BBFF_cast

class itkImageToMeshFilterISS3MD3QEMTD3BBFF(itkMeshSourceMD3QEMTD3BBFF):
    r"""


    ImageToMeshFilter is the base class for all process objects that
    output Mesh data and require image data as input. Specifically, this
    class defines the SetInput() method for defining the input to a
    filter. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterISS3MD3QEMTD3BBFF_SetInput)
    GetInput = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterISS3MD3QEMTD3BBFF_GetInput)
    GetOutput = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterISS3MD3QEMTD3BBFF_GetOutput)
    GenerateOutputInformation = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterISS3MD3QEMTD3BBFF_GenerateOutputInformation)
    __swig_destroy__ = _itkQuadEdgeMeshBasePython.delete_itkImageToMeshFilterISS3MD3QEMTD3BBFF
    cast = _swig_new_static_method(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterISS3MD3QEMTD3BBFF_cast)

# Register itkImageToMeshFilterISS3MD3QEMTD3BBFF in _itkQuadEdgeMeshBasePython:
_itkQuadEdgeMeshBasePython.itkImageToMeshFilterISS3MD3QEMTD3BBFF_swigregister(itkImageToMeshFilterISS3MD3QEMTD3BBFF)
itkImageToMeshFilterISS3MD3QEMTD3BBFF_cast = _itkQuadEdgeMeshBasePython.itkImageToMeshFilterISS3MD3QEMTD3BBFF_cast

class itkImageToMeshFilterIUC2MD2QEMTD2BBFF(itkMeshSourceMD2QEMTD2BBFF):
    r"""


    ImageToMeshFilter is the base class for all process objects that
    output Mesh data and require image data as input. Specifically, this
    class defines the SetInput() method for defining the input to a
    filter. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUC2MD2QEMTD2BBFF_SetInput)
    GetInput = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUC2MD2QEMTD2BBFF_GetInput)
    GetOutput = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUC2MD2QEMTD2BBFF_GetOutput)
    GenerateOutputInformation = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUC2MD2QEMTD2BBFF_GenerateOutputInformation)
    __swig_destroy__ = _itkQuadEdgeMeshBasePython.delete_itkImageToMeshFilterIUC2MD2QEMTD2BBFF
    cast = _swig_new_static_method(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUC2MD2QEMTD2BBFF_cast)

# Register itkImageToMeshFilterIUC2MD2QEMTD2BBFF in _itkQuadEdgeMeshBasePython:
_itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUC2MD2QEMTD2BBFF_swigregister(itkImageToMeshFilterIUC2MD2QEMTD2BBFF)
itkImageToMeshFilterIUC2MD2QEMTD2BBFF_cast = _itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUC2MD2QEMTD2BBFF_cast

class itkImageToMeshFilterIUC3MD3QEMTD3BBFF(itkMeshSourceMD3QEMTD3BBFF):
    r"""


    ImageToMeshFilter is the base class for all process objects that
    output Mesh data and require image data as input. Specifically, this
    class defines the SetInput() method for defining the input to a
    filter. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUC3MD3QEMTD3BBFF_SetInput)
    GetInput = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUC3MD3QEMTD3BBFF_GetInput)
    GetOutput = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUC3MD3QEMTD3BBFF_GetOutput)
    GenerateOutputInformation = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUC3MD3QEMTD3BBFF_GenerateOutputInformation)
    __swig_destroy__ = _itkQuadEdgeMeshBasePython.delete_itkImageToMeshFilterIUC3MD3QEMTD3BBFF
    cast = _swig_new_static_method(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUC3MD3QEMTD3BBFF_cast)

# Register itkImageToMeshFilterIUC3MD3QEMTD3BBFF in _itkQuadEdgeMeshBasePython:
_itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUC3MD3QEMTD3BBFF_swigregister(itkImageToMeshFilterIUC3MD3QEMTD3BBFF)
itkImageToMeshFilterIUC3MD3QEMTD3BBFF_cast = _itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUC3MD3QEMTD3BBFF_cast

class itkImageToMeshFilterIUS2MD2QEMTD2BBFF(itkMeshSourceMD2QEMTD2BBFF):
    r"""


    ImageToMeshFilter is the base class for all process objects that
    output Mesh data and require image data as input. Specifically, this
    class defines the SetInput() method for defining the input to a
    filter. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUS2MD2QEMTD2BBFF_SetInput)
    GetInput = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUS2MD2QEMTD2BBFF_GetInput)
    GetOutput = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUS2MD2QEMTD2BBFF_GetOutput)
    GenerateOutputInformation = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUS2MD2QEMTD2BBFF_GenerateOutputInformation)
    __swig_destroy__ = _itkQuadEdgeMeshBasePython.delete_itkImageToMeshFilterIUS2MD2QEMTD2BBFF
    cast = _swig_new_static_method(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUS2MD2QEMTD2BBFF_cast)

# Register itkImageToMeshFilterIUS2MD2QEMTD2BBFF in _itkQuadEdgeMeshBasePython:
_itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUS2MD2QEMTD2BBFF_swigregister(itkImageToMeshFilterIUS2MD2QEMTD2BBFF)
itkImageToMeshFilterIUS2MD2QEMTD2BBFF_cast = _itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUS2MD2QEMTD2BBFF_cast

class itkImageToMeshFilterIUS3MD3QEMTD3BBFF(itkMeshSourceMD3QEMTD3BBFF):
    r"""


    ImageToMeshFilter is the base class for all process objects that
    output Mesh data and require image data as input. Specifically, this
    class defines the SetInput() method for defining the input to a
    filter. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUS3MD3QEMTD3BBFF_SetInput)
    GetInput = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUS3MD3QEMTD3BBFF_GetInput)
    GetOutput = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUS3MD3QEMTD3BBFF_GetOutput)
    GenerateOutputInformation = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUS3MD3QEMTD3BBFF_GenerateOutputInformation)
    __swig_destroy__ = _itkQuadEdgeMeshBasePython.delete_itkImageToMeshFilterIUS3MD3QEMTD3BBFF
    cast = _swig_new_static_method(_itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUS3MD3QEMTD3BBFF_cast)

# Register itkImageToMeshFilterIUS3MD3QEMTD3BBFF in _itkQuadEdgeMeshBasePython:
_itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUS3MD3QEMTD3BBFF_swigregister(itkImageToMeshFilterIUS3MD3QEMTD3BBFF)
itkImageToMeshFilterIUS3MD3QEMTD3BBFF_cast = _itkQuadEdgeMeshBasePython.itkImageToMeshFilterIUS3MD3QEMTD3BBFF_cast


def itkMeshD2QEMTD2BBFF_New():
    return itkMeshD2QEMTD2BBFF.New()

class itkMeshD2QEMTD2BBFF(itkPointSetD2QEMTD2BBFF):
    r"""


    Implements the N-dimensional mesh structure.

    Overview  Mesh implements the N-dimensional mesh structure for ITK. It
    provides an API to perform operations on points, cells, boundaries,
    etc., but does not tie down the underlying implementation and storage.
    A "MeshTraits" structure is used to define the container and
    identifier types that will be used to access the mesh. See
    DefaultStaticMeshTraits for the set of type definitions needed. All
    types that are defined in the "MeshTraits" structure will have
    duplicate type alias in the resulting mesh itself.  Mesh is an
    adaptive, evolving structure. Typically points and cells are created,
    with the cells referring to their defining points. If additional
    topological information is required, then BuildCellLinks() is called
    and links from the points back to the cells that use them are created.
    This allows implicit topological information about the faces and edges
    of the cells to be determined. (For example, a "face" neighbor to a
    cell can be determined by intersection the sets of cells that use the
    points defining the face. This is an inherent assumption on the
    manifold relationship of the cells in the mesh.) In some cases, either
    because the mesh is non-manifold, because we wish to explicitly store
    information with the faces and edges of the mesh, or because
    performance requirements demand that boundaries are explicitly
    represented (the set intersection does not need to be performed); then
    Mesh can be further extended by adding explicit boundary assignments.

    Usage  Mesh has three template parameters. The first is the pixel
    type, or the type of data stored (optionally) with points, cells,
    and/or boundaries. The second is the geometric dimension of the points
    defining the mesh. This also limits the maximum topological dimension
    of the cells that can be inserted. The third template parameter is the
    "MeshTraits" structure controlling type information for the mesh.
    Most users will be happy with the defaults, and will not have to worry
    about this third argument.  One of the most important parts of using
    this mesh is how to create cells to insert into it. The cells for the
    mesh take two template parameters. The first is the pixel type, and
    should correspond exactly to that type given to the mesh. The second
    is a "CellTraits" which holds a sub-set of the "MeshTraits"
    structure definitions, and is also a member of them. Any cell which is
    to be inserted to a mesh should have MeshTraits::CellTraits as its
    second template parameter.

    Template parameters for Mesh:

    TPixelType = The type stored as data for an entity (cell, point, or
    boundary).

    TMeshTraits = Type information structure for the mesh.

    References No reference information is available.
    {Core/Mesh/AddPointsAndEdges,Add Points And Edges}
    {Core/Mesh/ConvertMeshToUnstructeredGrid,Convert Mesh To Unstructered
    Grid} {Core/Mesh/WorkingWithPointAndCellData,Working With Point And
    Cell Data} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF___New_orig__)
    Clone = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_Clone)
    GetNumberOfCells = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_GetNumberOfCells)
    PassStructure = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_PassStructure)
    GetBoundingBox = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_GetBoundingBox)
    SetCellLinks = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_SetCellLinks)
    GetCellLinks = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_GetCellLinks)
    SetCells = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_SetCells)
    GetCells = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_GetCells)
    DeleteUnusedCellData = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_DeleteUnusedCellData)
    SetCell = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_SetCell)
    GetCell = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_GetCell)
    SetCellData = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_SetCellData)
    GetCellData = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_GetCellData)
    SetBoundaryAssignment = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_SetBoundaryAssignment)
    GetBoundaryAssignment = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_GetBoundaryAssignment)
    RemoveBoundaryAssignment = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_RemoveBoundaryAssignment)
    GetNumberOfCellBoundaryFeatures = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_GetNumberOfCellBoundaryFeatures)
    GetCellBoundaryFeature = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_GetCellBoundaryFeature)
    GetCellBoundaryFeatureNeighbors = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_GetCellBoundaryFeatureNeighbors)
    GetCellNeighbors = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_GetCellNeighbors)
    GetAssignedCellBoundaryIfOneExists = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_GetAssignedCellBoundaryIfOneExists)
    BuildCellLinks = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_BuildCellLinks)
    Accept = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_Accept)
    SetCellsAllocationMethod = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_SetCellsAllocationMethod)
    GetCellsAllocationMethod = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_GetCellsAllocationMethod)
    __swig_destroy__ = _itkQuadEdgeMeshBasePython.delete_itkMeshD2QEMTD2BBFF
    cast = _swig_new_static_method(_itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_cast)

    def New(*args, **kargs):
        """New() -> itkMeshD2QEMTD2BBFF

        Create a new object of the class itkMeshD2QEMTD2BBFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshD2QEMTD2BBFF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeshD2QEMTD2BBFF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeshD2QEMTD2BBFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshD2QEMTD2BBFF in _itkQuadEdgeMeshBasePython:
_itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_swigregister(itkMeshD2QEMTD2BBFF)
itkMeshD2QEMTD2BBFF___New_orig__ = _itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF___New_orig__
itkMeshD2QEMTD2BBFF_cast = _itkQuadEdgeMeshBasePython.itkMeshD2QEMTD2BBFF_cast


def itkMeshD3QEMTD3BBFF_New():
    return itkMeshD3QEMTD3BBFF.New()

class itkMeshD3QEMTD3BBFF(itkPointSetD3QEMTD3BBFF):
    r"""


    Implements the N-dimensional mesh structure.

    Overview  Mesh implements the N-dimensional mesh structure for ITK. It
    provides an API to perform operations on points, cells, boundaries,
    etc., but does not tie down the underlying implementation and storage.
    A "MeshTraits" structure is used to define the container and
    identifier types that will be used to access the mesh. See
    DefaultStaticMeshTraits for the set of type definitions needed. All
    types that are defined in the "MeshTraits" structure will have
    duplicate type alias in the resulting mesh itself.  Mesh is an
    adaptive, evolving structure. Typically points and cells are created,
    with the cells referring to their defining points. If additional
    topological information is required, then BuildCellLinks() is called
    and links from the points back to the cells that use them are created.
    This allows implicit topological information about the faces and edges
    of the cells to be determined. (For example, a "face" neighbor to a
    cell can be determined by intersection the sets of cells that use the
    points defining the face. This is an inherent assumption on the
    manifold relationship of the cells in the mesh.) In some cases, either
    because the mesh is non-manifold, because we wish to explicitly store
    information with the faces and edges of the mesh, or because
    performance requirements demand that boundaries are explicitly
    represented (the set intersection does not need to be performed); then
    Mesh can be further extended by adding explicit boundary assignments.

    Usage  Mesh has three template parameters. The first is the pixel
    type, or the type of data stored (optionally) with points, cells,
    and/or boundaries. The second is the geometric dimension of the points
    defining the mesh. This also limits the maximum topological dimension
    of the cells that can be inserted. The third template parameter is the
    "MeshTraits" structure controlling type information for the mesh.
    Most users will be happy with the defaults, and will not have to worry
    about this third argument.  One of the most important parts of using
    this mesh is how to create cells to insert into it. The cells for the
    mesh take two template parameters. The first is the pixel type, and
    should correspond exactly to that type given to the mesh. The second
    is a "CellTraits" which holds a sub-set of the "MeshTraits"
    structure definitions, and is also a member of them. Any cell which is
    to be inserted to a mesh should have MeshTraits::CellTraits as its
    second template parameter.

    Template parameters for Mesh:

    TPixelType = The type stored as data for an entity (cell, point, or
    boundary).

    TMeshTraits = Type information structure for the mesh.

    References No reference information is available.
    {Core/Mesh/AddPointsAndEdges,Add Points And Edges}
    {Core/Mesh/ConvertMeshToUnstructeredGrid,Convert Mesh To Unstructered
    Grid} {Core/Mesh/WorkingWithPointAndCellData,Working With Point And
    Cell Data} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF___New_orig__)
    Clone = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_Clone)
    GetNumberOfCells = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_GetNumberOfCells)
    PassStructure = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_PassStructure)
    GetBoundingBox = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_GetBoundingBox)
    SetCellLinks = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_SetCellLinks)
    GetCellLinks = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_GetCellLinks)
    SetCells = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_SetCells)
    GetCells = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_GetCells)
    DeleteUnusedCellData = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_DeleteUnusedCellData)
    SetCell = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_SetCell)
    GetCell = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_GetCell)
    SetCellData = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_SetCellData)
    GetCellData = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_GetCellData)
    SetBoundaryAssignment = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_SetBoundaryAssignment)
    GetBoundaryAssignment = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_GetBoundaryAssignment)
    RemoveBoundaryAssignment = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_RemoveBoundaryAssignment)
    GetNumberOfCellBoundaryFeatures = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_GetNumberOfCellBoundaryFeatures)
    GetCellBoundaryFeature = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_GetCellBoundaryFeature)
    GetCellBoundaryFeatureNeighbors = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_GetCellBoundaryFeatureNeighbors)
    GetCellNeighbors = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_GetCellNeighbors)
    GetAssignedCellBoundaryIfOneExists = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_GetAssignedCellBoundaryIfOneExists)
    BuildCellLinks = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_BuildCellLinks)
    Accept = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_Accept)
    SetCellsAllocationMethod = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_SetCellsAllocationMethod)
    GetCellsAllocationMethod = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_GetCellsAllocationMethod)
    __swig_destroy__ = _itkQuadEdgeMeshBasePython.delete_itkMeshD3QEMTD3BBFF
    cast = _swig_new_static_method(_itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_cast)

    def New(*args, **kargs):
        """New() -> itkMeshD3QEMTD3BBFF

        Create a new object of the class itkMeshD3QEMTD3BBFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshD3QEMTD3BBFF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeshD3QEMTD3BBFF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeshD3QEMTD3BBFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshD3QEMTD3BBFF in _itkQuadEdgeMeshBasePython:
_itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_swigregister(itkMeshD3QEMTD3BBFF)
itkMeshD3QEMTD3BBFF___New_orig__ = _itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF___New_orig__
itkMeshD3QEMTD3BBFF_cast = _itkQuadEdgeMeshBasePython.itkMeshD3QEMTD3BBFF_cast


def itkQuadEdgeMeshD2_New():
    return itkQuadEdgeMeshD2.New()

class itkQuadEdgeMeshD2(itkMeshD2QEMTD2BBFF):
    r"""


    Mesh class for 2D manifolds embedded in ND space.

    Alexandre Gouaillard, Leonardo Florez-Valencia, Eric Boix  This
    implementation was contributed as a paper to the Insight
    Journalhttps://hdl.handle.net/1926/306 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2___New_orig__)
    Clone = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_Clone)
    Clear = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_Clear)
    GetEdgeCells = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_GetEdgeCells)
    SetEdgeCells = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_SetEdgeCells)
    SetEdgeCell = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_SetEdgeCell)
    SqueezePointsIds = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_SqueezePointsIds)
    BuildCellLinks = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_BuildCellLinks)
    SetBoundaryAssignment = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_SetBoundaryAssignment)
    GetBoundaryAssignment = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_GetBoundaryAssignment)
    RemoveBoundaryAssignment = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_RemoveBoundaryAssignment)
    GetCellBoundaryFeature = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_GetCellBoundaryFeature)
    GetCellBoundaryFeatureNeighbors = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_GetCellBoundaryFeatureNeighbors)
    GetCellNeighbors = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_GetCellNeighbors)
    GetAssignedCellBoundaryIfOneExists = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_GetAssignedCellBoundaryIfOneExists)
    SetCell = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_SetCell)
    FindFirstUnusedPointIndex = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_FindFirstUnusedPointIndex)
    FindFirstUnusedCellIndex = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_FindFirstUnusedCellIndex)
    PushOnContainer = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_PushOnContainer)
    AddPoint = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_AddPoint)
    AddEdge = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_AddEdge)
    AddEdgeWithSecurePointList = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_AddEdgeWithSecurePointList)
    AddFace = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_AddFace)
    AddFaceWithSecurePointList = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_AddFaceWithSecurePointList)
    AddFaceTriangle = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_AddFaceTriangle)
    DeletePoint = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_DeletePoint)
    DeleteEdge = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_DeleteEdge)
    LightWeightDeleteEdge = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_LightWeightDeleteEdge)
    DeleteFace = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_DeleteFace)
    GetPoint = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_GetPoint)
    GetVector = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_GetVector)
    GetEdge = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_GetEdge)
    FindEdge = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_FindEdge)
    FindEdgeCell = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_FindEdgeCell)
    ComputeEdgeLength = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_ComputeEdgeLength)
    ComputeNumberOfPoints = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_ComputeNumberOfPoints)
    ComputeNumberOfFaces = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_ComputeNumberOfFaces)
    ComputeNumberOfEdges = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_ComputeNumberOfEdges)
    Splice = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_Splice)
    ClearFreePointAndCellIndexesLists = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_ClearFreePointAndCellIndexesLists)
    GetNumberOfFaces = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_GetNumberOfFaces)
    GetNumberOfEdges = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_GetNumberOfEdges)
    __swig_destroy__ = _itkQuadEdgeMeshBasePython.delete_itkQuadEdgeMeshD2
    cast = _swig_new_static_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_cast)

    def New(*args, **kargs):
        """New() -> itkQuadEdgeMeshD2

        Create a new object of the class itkQuadEdgeMeshD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkQuadEdgeMeshD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkQuadEdgeMeshD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkQuadEdgeMeshD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkQuadEdgeMeshD2 in _itkQuadEdgeMeshBasePython:
_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_swigregister(itkQuadEdgeMeshD2)
itkQuadEdgeMeshD2___New_orig__ = _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2___New_orig__
itkQuadEdgeMeshD2_cast = _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD2_cast


def itkQuadEdgeMeshD3_New():
    return itkQuadEdgeMeshD3.New()

class itkQuadEdgeMeshD3(itkMeshD3QEMTD3BBFF):
    r"""


    Mesh class for 2D manifolds embedded in ND space.

    Alexandre Gouaillard, Leonardo Florez-Valencia, Eric Boix  This
    implementation was contributed as a paper to the Insight
    Journalhttps://hdl.handle.net/1926/306 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3___New_orig__)
    Clone = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_Clone)
    Clear = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_Clear)
    GetEdgeCells = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_GetEdgeCells)
    SetEdgeCells = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_SetEdgeCells)
    SetEdgeCell = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_SetEdgeCell)
    SqueezePointsIds = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_SqueezePointsIds)
    BuildCellLinks = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_BuildCellLinks)
    SetBoundaryAssignment = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_SetBoundaryAssignment)
    GetBoundaryAssignment = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_GetBoundaryAssignment)
    RemoveBoundaryAssignment = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_RemoveBoundaryAssignment)
    GetCellBoundaryFeature = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_GetCellBoundaryFeature)
    GetCellBoundaryFeatureNeighbors = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_GetCellBoundaryFeatureNeighbors)
    GetCellNeighbors = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_GetCellNeighbors)
    GetAssignedCellBoundaryIfOneExists = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_GetAssignedCellBoundaryIfOneExists)
    SetCell = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_SetCell)
    FindFirstUnusedPointIndex = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_FindFirstUnusedPointIndex)
    FindFirstUnusedCellIndex = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_FindFirstUnusedCellIndex)
    PushOnContainer = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_PushOnContainer)
    AddPoint = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_AddPoint)
    AddEdge = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_AddEdge)
    AddEdgeWithSecurePointList = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_AddEdgeWithSecurePointList)
    AddFace = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_AddFace)
    AddFaceWithSecurePointList = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_AddFaceWithSecurePointList)
    AddFaceTriangle = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_AddFaceTriangle)
    DeletePoint = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_DeletePoint)
    DeleteEdge = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_DeleteEdge)
    LightWeightDeleteEdge = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_LightWeightDeleteEdge)
    DeleteFace = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_DeleteFace)
    GetPoint = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_GetPoint)
    GetVector = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_GetVector)
    GetEdge = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_GetEdge)
    FindEdge = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_FindEdge)
    FindEdgeCell = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_FindEdgeCell)
    ComputeEdgeLength = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_ComputeEdgeLength)
    ComputeNumberOfPoints = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_ComputeNumberOfPoints)
    ComputeNumberOfFaces = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_ComputeNumberOfFaces)
    ComputeNumberOfEdges = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_ComputeNumberOfEdges)
    Splice = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_Splice)
    ClearFreePointAndCellIndexesLists = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_ClearFreePointAndCellIndexesLists)
    GetNumberOfFaces = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_GetNumberOfFaces)
    GetNumberOfEdges = _swig_new_instance_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_GetNumberOfEdges)
    __swig_destroy__ = _itkQuadEdgeMeshBasePython.delete_itkQuadEdgeMeshD3
    cast = _swig_new_static_method(_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_cast)

    def New(*args, **kargs):
        """New() -> itkQuadEdgeMeshD3

        Create a new object of the class itkQuadEdgeMeshD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkQuadEdgeMeshD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkQuadEdgeMeshD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkQuadEdgeMeshD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkQuadEdgeMeshD3 in _itkQuadEdgeMeshBasePython:
_itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_swigregister(itkQuadEdgeMeshD3)
itkQuadEdgeMeshD3___New_orig__ = _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3___New_orig__
itkQuadEdgeMeshD3_cast = _itkQuadEdgeMeshBasePython.itkQuadEdgeMeshD3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def mesh_to_mesh_filter(*args, **kwargs):
    """Procedural interface for MeshToMeshFilter"""
    import itk
    instance = itk.MeshToMeshFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def mesh_to_mesh_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.MeshToMeshFilter, itkTemplate.itkTemplate):
        filter_object = itk.MeshToMeshFilter.values()[0]
    else:
        filter_object = itk.MeshToMeshFilter

    mesh_to_mesh_filter.__doc__ = filter_object.__doc__
    mesh_to_mesh_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    mesh_to_mesh_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.MeshToMeshFilter, itkTemplate.itkTemplate):
        mesh_to_mesh_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        mesh_to_mesh_filter.__doc__ += "\n"
        mesh_to_mesh_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        mesh_to_mesh_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])
import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def image_to_mesh_filter(*args, **kwargs):
    """Procedural interface for ImageToMeshFilter"""
    import itk
    instance = itk.ImageToMeshFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def image_to_mesh_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ImageToMeshFilter, itkTemplate.itkTemplate):
        filter_object = itk.ImageToMeshFilter.values()[0]
    else:
        filter_object = itk.ImageToMeshFilter

    image_to_mesh_filter.__doc__ = filter_object.__doc__
    image_to_mesh_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    image_to_mesh_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.ImageToMeshFilter, itkTemplate.itkTemplate):
        image_to_mesh_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        image_to_mesh_filter.__doc__ += "\n"
        image_to_mesh_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        image_to_mesh_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])
import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def mesh_source(*args, **kwargs):
    """Procedural interface for MeshSource"""
    import itk
    instance = itk.MeshSource.New(*args, **kwargs)
    return instance.__internal_call__()

def mesh_source_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.MeshSource, itkTemplate.itkTemplate):
        filter_object = itk.MeshSource.values()[0]
    else:
        filter_object = itk.MeshSource

    mesh_source.__doc__ = filter_object.__doc__
    mesh_source.__doc__ += "\n Args are Input(s) to the filter.\n"
    mesh_source.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.MeshSource, itkTemplate.itkTemplate):
        mesh_source.__doc__ += itkHelpers.filter_args(filter_object)[0]
        mesh_source.__doc__ += "\n"
        mesh_source.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        mesh_source.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



