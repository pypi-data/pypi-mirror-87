# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKStatisticsPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkHistogramToProbabilityImageFilterPython
else:
    import _itkHistogramToProbabilityImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkHistogramToProbabilityImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkHistogramToProbabilityImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkHistogramPython
import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkArrayPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkSamplePython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkImageSourcePython
import itk.itkImagePython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkCovariantVectorPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkIndexPython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython

def itkHistogramToProbabilityImageFilterHDID2_Superclass_New():
    return itkHistogramToProbabilityImageFilterHDID2_Superclass.New()

class itkHistogramToProbabilityImageFilterHDID2_Superclass(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkHistogramToProbabilityImageFilterHDID2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2_Superclass_Clone)
    SetInput = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2_Superclass_GetInput)
    SetFunctor = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2_Superclass_SetFunctor)
    GetFunctor = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2_Superclass_GetFunctor)
    SetTotalFrequency = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2_Superclass_SetTotalFrequency)
    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHDID2_Superclass
    cast = _swig_new_static_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHDID2_Superclass

        Create a new object of the class itkHistogramToProbabilityImageFilterHDID2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHDID2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHDID2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToProbabilityImageFilterHDID2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToProbabilityImageFilterHDID2_Superclass in _itkHistogramToProbabilityImageFilterPython:
_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2_Superclass_swigregister(itkHistogramToProbabilityImageFilterHDID2_Superclass)
itkHistogramToProbabilityImageFilterHDID2_Superclass___New_orig__ = _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2_Superclass___New_orig__
itkHistogramToProbabilityImageFilterHDID2_Superclass_cast = _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2_Superclass_cast


def itkHistogramToProbabilityImageFilterHDID3_Superclass_New():
    return itkHistogramToProbabilityImageFilterHDID3_Superclass.New()

class itkHistogramToProbabilityImageFilterHDID3_Superclass(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkHistogramToProbabilityImageFilterHDID3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3_Superclass_Clone)
    SetInput = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3_Superclass_GetInput)
    SetFunctor = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3_Superclass_SetFunctor)
    GetFunctor = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3_Superclass_GetFunctor)
    SetTotalFrequency = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3_Superclass_SetTotalFrequency)
    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHDID3_Superclass
    cast = _swig_new_static_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHDID3_Superclass

        Create a new object of the class itkHistogramToProbabilityImageFilterHDID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHDID3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHDID3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToProbabilityImageFilterHDID3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToProbabilityImageFilterHDID3_Superclass in _itkHistogramToProbabilityImageFilterPython:
_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3_Superclass_swigregister(itkHistogramToProbabilityImageFilterHDID3_Superclass)
itkHistogramToProbabilityImageFilterHDID3_Superclass___New_orig__ = _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3_Superclass___New_orig__
itkHistogramToProbabilityImageFilterHDID3_Superclass_cast = _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3_Superclass_cast


def itkHistogramToProbabilityImageFilterHDIF2_Superclass_New():
    return itkHistogramToProbabilityImageFilterHDIF2_Superclass.New()

class itkHistogramToProbabilityImageFilterHDIF2_Superclass(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkHistogramToProbabilityImageFilterHDIF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2_Superclass_Clone)
    SetInput = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2_Superclass_GetInput)
    SetFunctor = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2_Superclass_SetFunctor)
    GetFunctor = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2_Superclass_GetFunctor)
    SetTotalFrequency = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2_Superclass_SetTotalFrequency)
    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHDIF2_Superclass
    cast = _swig_new_static_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHDIF2_Superclass

        Create a new object of the class itkHistogramToProbabilityImageFilterHDIF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHDIF2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHDIF2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToProbabilityImageFilterHDIF2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToProbabilityImageFilterHDIF2_Superclass in _itkHistogramToProbabilityImageFilterPython:
_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2_Superclass_swigregister(itkHistogramToProbabilityImageFilterHDIF2_Superclass)
itkHistogramToProbabilityImageFilterHDIF2_Superclass___New_orig__ = _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2_Superclass___New_orig__
itkHistogramToProbabilityImageFilterHDIF2_Superclass_cast = _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2_Superclass_cast


def itkHistogramToProbabilityImageFilterHDIF3_Superclass_New():
    return itkHistogramToProbabilityImageFilterHDIF3_Superclass.New()

class itkHistogramToProbabilityImageFilterHDIF3_Superclass(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkHistogramToProbabilityImageFilterHDIF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3_Superclass_Clone)
    SetInput = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3_Superclass_GetInput)
    SetFunctor = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3_Superclass_SetFunctor)
    GetFunctor = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3_Superclass_GetFunctor)
    SetTotalFrequency = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3_Superclass_SetTotalFrequency)
    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHDIF3_Superclass
    cast = _swig_new_static_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHDIF3_Superclass

        Create a new object of the class itkHistogramToProbabilityImageFilterHDIF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHDIF3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHDIF3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToProbabilityImageFilterHDIF3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToProbabilityImageFilterHDIF3_Superclass in _itkHistogramToProbabilityImageFilterPython:
_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3_Superclass_swigregister(itkHistogramToProbabilityImageFilterHDIF3_Superclass)
itkHistogramToProbabilityImageFilterHDIF3_Superclass___New_orig__ = _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3_Superclass___New_orig__
itkHistogramToProbabilityImageFilterHDIF3_Superclass_cast = _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3_Superclass_cast


def itkHistogramToProbabilityImageFilterHFID2_Superclass_New():
    return itkHistogramToProbabilityImageFilterHFID2_Superclass.New()

class itkHistogramToProbabilityImageFilterHFID2_Superclass(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkHistogramToProbabilityImageFilterHFID2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2_Superclass_Clone)
    SetInput = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2_Superclass_GetInput)
    SetFunctor = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2_Superclass_SetFunctor)
    GetFunctor = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2_Superclass_GetFunctor)
    SetTotalFrequency = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2_Superclass_SetTotalFrequency)
    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHFID2_Superclass
    cast = _swig_new_static_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHFID2_Superclass

        Create a new object of the class itkHistogramToProbabilityImageFilterHFID2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHFID2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHFID2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToProbabilityImageFilterHFID2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToProbabilityImageFilterHFID2_Superclass in _itkHistogramToProbabilityImageFilterPython:
_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2_Superclass_swigregister(itkHistogramToProbabilityImageFilterHFID2_Superclass)
itkHistogramToProbabilityImageFilterHFID2_Superclass___New_orig__ = _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2_Superclass___New_orig__
itkHistogramToProbabilityImageFilterHFID2_Superclass_cast = _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2_Superclass_cast


def itkHistogramToProbabilityImageFilterHFID3_Superclass_New():
    return itkHistogramToProbabilityImageFilterHFID3_Superclass.New()

class itkHistogramToProbabilityImageFilterHFID3_Superclass(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkHistogramToProbabilityImageFilterHFID3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3_Superclass_Clone)
    SetInput = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3_Superclass_GetInput)
    SetFunctor = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3_Superclass_SetFunctor)
    GetFunctor = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3_Superclass_GetFunctor)
    SetTotalFrequency = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3_Superclass_SetTotalFrequency)
    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHFID3_Superclass
    cast = _swig_new_static_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHFID3_Superclass

        Create a new object of the class itkHistogramToProbabilityImageFilterHFID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHFID3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHFID3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToProbabilityImageFilterHFID3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToProbabilityImageFilterHFID3_Superclass in _itkHistogramToProbabilityImageFilterPython:
_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3_Superclass_swigregister(itkHistogramToProbabilityImageFilterHFID3_Superclass)
itkHistogramToProbabilityImageFilterHFID3_Superclass___New_orig__ = _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3_Superclass___New_orig__
itkHistogramToProbabilityImageFilterHFID3_Superclass_cast = _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3_Superclass_cast


def itkHistogramToProbabilityImageFilterHFIF2_Superclass_New():
    return itkHistogramToProbabilityImageFilterHFIF2_Superclass.New()

class itkHistogramToProbabilityImageFilterHFIF2_Superclass(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkHistogramToProbabilityImageFilterHFIF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2_Superclass_Clone)
    SetInput = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2_Superclass_GetInput)
    SetFunctor = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2_Superclass_SetFunctor)
    GetFunctor = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2_Superclass_GetFunctor)
    SetTotalFrequency = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2_Superclass_SetTotalFrequency)
    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHFIF2_Superclass
    cast = _swig_new_static_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHFIF2_Superclass

        Create a new object of the class itkHistogramToProbabilityImageFilterHFIF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHFIF2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHFIF2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToProbabilityImageFilterHFIF2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToProbabilityImageFilterHFIF2_Superclass in _itkHistogramToProbabilityImageFilterPython:
_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2_Superclass_swigregister(itkHistogramToProbabilityImageFilterHFIF2_Superclass)
itkHistogramToProbabilityImageFilterHFIF2_Superclass___New_orig__ = _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2_Superclass___New_orig__
itkHistogramToProbabilityImageFilterHFIF2_Superclass_cast = _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2_Superclass_cast


def itkHistogramToProbabilityImageFilterHFIF3_Superclass_New():
    return itkHistogramToProbabilityImageFilterHFIF3_Superclass.New()

class itkHistogramToProbabilityImageFilterHFIF3_Superclass(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkHistogramToProbabilityImageFilterHFIF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3_Superclass_Clone)
    SetInput = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3_Superclass_GetInput)
    SetFunctor = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3_Superclass_SetFunctor)
    GetFunctor = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3_Superclass_GetFunctor)
    SetTotalFrequency = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3_Superclass_SetTotalFrequency)
    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHFIF3_Superclass
    cast = _swig_new_static_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHFIF3_Superclass

        Create a new object of the class itkHistogramToProbabilityImageFilterHFIF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHFIF3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHFIF3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToProbabilityImageFilterHFIF3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToProbabilityImageFilterHFIF3_Superclass in _itkHistogramToProbabilityImageFilterPython:
_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3_Superclass_swigregister(itkHistogramToProbabilityImageFilterHFIF3_Superclass)
itkHistogramToProbabilityImageFilterHFIF3_Superclass___New_orig__ = _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3_Superclass___New_orig__
itkHistogramToProbabilityImageFilterHFIF3_Superclass_cast = _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3_Superclass_cast


def itkHistogramToProbabilityImageFilterHDID2_New():
    return itkHistogramToProbabilityImageFilterHDID2.New()

class itkHistogramToProbabilityImageFilterHDID2(itkHistogramToProbabilityImageFilterHDID2_Superclass):
    r"""


    The class takes a histogram as an input and gives the probability
    image as the output. A pixel, at position I, in the output image is
    given by.

    \\[ f(I) = \\frac{q_I}{\\sum_{i \\in I} q_I} \\] where $q_I$
    is the frequency of measurement vector, I.

    This is the frequency of a measurement vector by the sum of all
    frequencies = Probability of the the measurement vector

    The output image is of type float.

    This is useful in plotting the joint histograms during registration.

    See:  HistogramToImageFilter, HistogramToLogProbabilityImageFilter,
    HistogramToIntensityImageFilter, HistogramToEntropyImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2_Clone)
    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHDID2
    cast = _swig_new_static_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHDID2

        Create a new object of the class itkHistogramToProbabilityImageFilterHDID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHDID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHDID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToProbabilityImageFilterHDID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToProbabilityImageFilterHDID2 in _itkHistogramToProbabilityImageFilterPython:
_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2_swigregister(itkHistogramToProbabilityImageFilterHDID2)
itkHistogramToProbabilityImageFilterHDID2___New_orig__ = _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2___New_orig__
itkHistogramToProbabilityImageFilterHDID2_cast = _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2_cast


def itkHistogramToProbabilityImageFilterHDID3_New():
    return itkHistogramToProbabilityImageFilterHDID3.New()

class itkHistogramToProbabilityImageFilterHDID3(itkHistogramToProbabilityImageFilterHDID3_Superclass):
    r"""


    The class takes a histogram as an input and gives the probability
    image as the output. A pixel, at position I, in the output image is
    given by.

    \\[ f(I) = \\frac{q_I}{\\sum_{i \\in I} q_I} \\] where $q_I$
    is the frequency of measurement vector, I.

    This is the frequency of a measurement vector by the sum of all
    frequencies = Probability of the the measurement vector

    The output image is of type float.

    This is useful in plotting the joint histograms during registration.

    See:  HistogramToImageFilter, HistogramToLogProbabilityImageFilter,
    HistogramToIntensityImageFilter, HistogramToEntropyImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3_Clone)
    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHDID3
    cast = _swig_new_static_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHDID3

        Create a new object of the class itkHistogramToProbabilityImageFilterHDID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHDID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHDID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToProbabilityImageFilterHDID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToProbabilityImageFilterHDID3 in _itkHistogramToProbabilityImageFilterPython:
_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3_swigregister(itkHistogramToProbabilityImageFilterHDID3)
itkHistogramToProbabilityImageFilterHDID3___New_orig__ = _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3___New_orig__
itkHistogramToProbabilityImageFilterHDID3_cast = _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3_cast


def itkHistogramToProbabilityImageFilterHDIF2_New():
    return itkHistogramToProbabilityImageFilterHDIF2.New()

class itkHistogramToProbabilityImageFilterHDIF2(itkHistogramToProbabilityImageFilterHDIF2_Superclass):
    r"""


    The class takes a histogram as an input and gives the probability
    image as the output. A pixel, at position I, in the output image is
    given by.

    \\[ f(I) = \\frac{q_I}{\\sum_{i \\in I} q_I} \\] where $q_I$
    is the frequency of measurement vector, I.

    This is the frequency of a measurement vector by the sum of all
    frequencies = Probability of the the measurement vector

    The output image is of type float.

    This is useful in plotting the joint histograms during registration.

    See:  HistogramToImageFilter, HistogramToLogProbabilityImageFilter,
    HistogramToIntensityImageFilter, HistogramToEntropyImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2_Clone)
    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHDIF2
    cast = _swig_new_static_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHDIF2

        Create a new object of the class itkHistogramToProbabilityImageFilterHDIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHDIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHDIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToProbabilityImageFilterHDIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToProbabilityImageFilterHDIF2 in _itkHistogramToProbabilityImageFilterPython:
_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2_swigregister(itkHistogramToProbabilityImageFilterHDIF2)
itkHistogramToProbabilityImageFilterHDIF2___New_orig__ = _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2___New_orig__
itkHistogramToProbabilityImageFilterHDIF2_cast = _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2_cast


def itkHistogramToProbabilityImageFilterHDIF3_New():
    return itkHistogramToProbabilityImageFilterHDIF3.New()

class itkHistogramToProbabilityImageFilterHDIF3(itkHistogramToProbabilityImageFilterHDIF3_Superclass):
    r"""


    The class takes a histogram as an input and gives the probability
    image as the output. A pixel, at position I, in the output image is
    given by.

    \\[ f(I) = \\frac{q_I}{\\sum_{i \\in I} q_I} \\] where $q_I$
    is the frequency of measurement vector, I.

    This is the frequency of a measurement vector by the sum of all
    frequencies = Probability of the the measurement vector

    The output image is of type float.

    This is useful in plotting the joint histograms during registration.

    See:  HistogramToImageFilter, HistogramToLogProbabilityImageFilter,
    HistogramToIntensityImageFilter, HistogramToEntropyImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3_Clone)
    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHDIF3
    cast = _swig_new_static_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHDIF3

        Create a new object of the class itkHistogramToProbabilityImageFilterHDIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHDIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHDIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToProbabilityImageFilterHDIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToProbabilityImageFilterHDIF3 in _itkHistogramToProbabilityImageFilterPython:
_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3_swigregister(itkHistogramToProbabilityImageFilterHDIF3)
itkHistogramToProbabilityImageFilterHDIF3___New_orig__ = _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3___New_orig__
itkHistogramToProbabilityImageFilterHDIF3_cast = _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3_cast


def itkHistogramToProbabilityImageFilterHFID2_New():
    return itkHistogramToProbabilityImageFilterHFID2.New()

class itkHistogramToProbabilityImageFilterHFID2(itkHistogramToProbabilityImageFilterHFID2_Superclass):
    r"""


    The class takes a histogram as an input and gives the probability
    image as the output. A pixel, at position I, in the output image is
    given by.

    \\[ f(I) = \\frac{q_I}{\\sum_{i \\in I} q_I} \\] where $q_I$
    is the frequency of measurement vector, I.

    This is the frequency of a measurement vector by the sum of all
    frequencies = Probability of the the measurement vector

    The output image is of type float.

    This is useful in plotting the joint histograms during registration.

    See:  HistogramToImageFilter, HistogramToLogProbabilityImageFilter,
    HistogramToIntensityImageFilter, HistogramToEntropyImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2_Clone)
    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHFID2
    cast = _swig_new_static_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHFID2

        Create a new object of the class itkHistogramToProbabilityImageFilterHFID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHFID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHFID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToProbabilityImageFilterHFID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToProbabilityImageFilterHFID2 in _itkHistogramToProbabilityImageFilterPython:
_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2_swigregister(itkHistogramToProbabilityImageFilterHFID2)
itkHistogramToProbabilityImageFilterHFID2___New_orig__ = _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2___New_orig__
itkHistogramToProbabilityImageFilterHFID2_cast = _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2_cast


def itkHistogramToProbabilityImageFilterHFID3_New():
    return itkHistogramToProbabilityImageFilterHFID3.New()

class itkHistogramToProbabilityImageFilterHFID3(itkHistogramToProbabilityImageFilterHFID3_Superclass):
    r"""


    The class takes a histogram as an input and gives the probability
    image as the output. A pixel, at position I, in the output image is
    given by.

    \\[ f(I) = \\frac{q_I}{\\sum_{i \\in I} q_I} \\] where $q_I$
    is the frequency of measurement vector, I.

    This is the frequency of a measurement vector by the sum of all
    frequencies = Probability of the the measurement vector

    The output image is of type float.

    This is useful in plotting the joint histograms during registration.

    See:  HistogramToImageFilter, HistogramToLogProbabilityImageFilter,
    HistogramToIntensityImageFilter, HistogramToEntropyImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3_Clone)
    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHFID3
    cast = _swig_new_static_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHFID3

        Create a new object of the class itkHistogramToProbabilityImageFilterHFID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHFID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHFID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToProbabilityImageFilterHFID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToProbabilityImageFilterHFID3 in _itkHistogramToProbabilityImageFilterPython:
_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3_swigregister(itkHistogramToProbabilityImageFilterHFID3)
itkHistogramToProbabilityImageFilterHFID3___New_orig__ = _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3___New_orig__
itkHistogramToProbabilityImageFilterHFID3_cast = _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3_cast


def itkHistogramToProbabilityImageFilterHFIF2_New():
    return itkHistogramToProbabilityImageFilterHFIF2.New()

class itkHistogramToProbabilityImageFilterHFIF2(itkHistogramToProbabilityImageFilterHFIF2_Superclass):
    r"""


    The class takes a histogram as an input and gives the probability
    image as the output. A pixel, at position I, in the output image is
    given by.

    \\[ f(I) = \\frac{q_I}{\\sum_{i \\in I} q_I} \\] where $q_I$
    is the frequency of measurement vector, I.

    This is the frequency of a measurement vector by the sum of all
    frequencies = Probability of the the measurement vector

    The output image is of type float.

    This is useful in plotting the joint histograms during registration.

    See:  HistogramToImageFilter, HistogramToLogProbabilityImageFilter,
    HistogramToIntensityImageFilter, HistogramToEntropyImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2_Clone)
    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHFIF2
    cast = _swig_new_static_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHFIF2

        Create a new object of the class itkHistogramToProbabilityImageFilterHFIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHFIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHFIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToProbabilityImageFilterHFIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToProbabilityImageFilterHFIF2 in _itkHistogramToProbabilityImageFilterPython:
_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2_swigregister(itkHistogramToProbabilityImageFilterHFIF2)
itkHistogramToProbabilityImageFilterHFIF2___New_orig__ = _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2___New_orig__
itkHistogramToProbabilityImageFilterHFIF2_cast = _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2_cast


def itkHistogramToProbabilityImageFilterHFIF3_New():
    return itkHistogramToProbabilityImageFilterHFIF3.New()

class itkHistogramToProbabilityImageFilterHFIF3(itkHistogramToProbabilityImageFilterHFIF3_Superclass):
    r"""


    The class takes a histogram as an input and gives the probability
    image as the output. A pixel, at position I, in the output image is
    given by.

    \\[ f(I) = \\frac{q_I}{\\sum_{i \\in I} q_I} \\] where $q_I$
    is the frequency of measurement vector, I.

    This is the frequency of a measurement vector by the sum of all
    frequencies = Probability of the the measurement vector

    The output image is of type float.

    This is useful in plotting the joint histograms during registration.

    See:  HistogramToImageFilter, HistogramToLogProbabilityImageFilter,
    HistogramToIntensityImageFilter, HistogramToEntropyImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3_Clone)
    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHFIF3
    cast = _swig_new_static_method(_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHFIF3

        Create a new object of the class itkHistogramToProbabilityImageFilterHFIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHFIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHFIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToProbabilityImageFilterHFIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToProbabilityImageFilterHFIF3 in _itkHistogramToProbabilityImageFilterPython:
_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3_swigregister(itkHistogramToProbabilityImageFilterHFIF3)
itkHistogramToProbabilityImageFilterHFIF3___New_orig__ = _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3___New_orig__
itkHistogramToProbabilityImageFilterHFIF3_cast = _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def histogram_to_probability_image_filter(*args, **kwargs):
    """Procedural interface for HistogramToProbabilityImageFilter"""
    import itk
    instance = itk.HistogramToProbabilityImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def histogram_to_probability_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.HistogramToProbabilityImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.HistogramToProbabilityImageFilter.values()[0]
    else:
        filter_object = itk.HistogramToProbabilityImageFilter

    histogram_to_probability_image_filter.__doc__ = filter_object.__doc__
    histogram_to_probability_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    histogram_to_probability_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.HistogramToProbabilityImageFilter, itkTemplate.itkTemplate):
        histogram_to_probability_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        histogram_to_probability_image_filter.__doc__ += "\n"
        histogram_to_probability_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        histogram_to_probability_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])
import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def histogram_to_image_filter(*args, **kwargs):
    """Procedural interface for HistogramToImageFilter"""
    import itk
    instance = itk.HistogramToImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def histogram_to_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.HistogramToImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.HistogramToImageFilter.values()[0]
    else:
        filter_object = itk.HistogramToImageFilter

    histogram_to_image_filter.__doc__ = filter_object.__doc__
    histogram_to_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    histogram_to_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.HistogramToImageFilter, itkTemplate.itkTemplate):
        histogram_to_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        histogram_to_image_filter.__doc__ += "\n"
        histogram_to_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        histogram_to_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



