# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageIntensityPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkSubtractImageFilterPython
else:
    import _itkSubtractImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkSubtractImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkSubtractImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkBinaryGeneratorImageFilterPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImagePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterBPython
import itk.itkInPlaceImageFilterBPython
import itk.itkSimpleDataObjectDecoratorPython
import itk.itkArrayPython

def itkSubtractImageFilterID2ID2ID2_New():
    return itkSubtractImageFilterID2ID2ID2.New()

class itkSubtractImageFilterID2ID2ID2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID2ID2ID2):
    r"""


    Pixel-wise subtraction of two images.

    Subtract each pixel from image2 from its corresponding pixel in
    image1:

    This is done using

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    Additionally, a constant can be subtracted from every pixel in an
    image using:

    The result of AddImageFilter with a negative constant is not
    necessarily the same as SubtractImageFilter. This would be the case
    when the PixelType defines an operator-() that is not the inverse of
    operator+()  {Filtering/ImageIntensity/SubtractTwoImages,Subtract Two
    Images}
    {Filtering/ImageIntensity/SubtractConstantFromEveryPixel,Subtract
    Constant From Every Pixel} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSubtractImageFilterPython.itkSubtractImageFilterID2ID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkSubtractImageFilterPython.itkSubtractImageFilterID2ID2ID2_Clone)
    Input1Input2OutputAdditiveOperatorsCheck = _itkSubtractImageFilterPython.itkSubtractImageFilterID2ID2ID2_Input1Input2OutputAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkSubtractImageFilterPython.delete_itkSubtractImageFilterID2ID2ID2
    cast = _swig_new_static_method(_itkSubtractImageFilterPython.itkSubtractImageFilterID2ID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkSubtractImageFilterID2ID2ID2

        Create a new object of the class itkSubtractImageFilterID2ID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSubtractImageFilterID2ID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSubtractImageFilterID2ID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSubtractImageFilterID2ID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSubtractImageFilterID2ID2ID2 in _itkSubtractImageFilterPython:
_itkSubtractImageFilterPython.itkSubtractImageFilterID2ID2ID2_swigregister(itkSubtractImageFilterID2ID2ID2)
itkSubtractImageFilterID2ID2ID2___New_orig__ = _itkSubtractImageFilterPython.itkSubtractImageFilterID2ID2ID2___New_orig__
itkSubtractImageFilterID2ID2ID2_cast = _itkSubtractImageFilterPython.itkSubtractImageFilterID2ID2ID2_cast


def itkSubtractImageFilterID3ID3ID3_New():
    return itkSubtractImageFilterID3ID3ID3.New()

class itkSubtractImageFilterID3ID3ID3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID3ID3ID3):
    r"""


    Pixel-wise subtraction of two images.

    Subtract each pixel from image2 from its corresponding pixel in
    image1:

    This is done using

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    Additionally, a constant can be subtracted from every pixel in an
    image using:

    The result of AddImageFilter with a negative constant is not
    necessarily the same as SubtractImageFilter. This would be the case
    when the PixelType defines an operator-() that is not the inverse of
    operator+()  {Filtering/ImageIntensity/SubtractTwoImages,Subtract Two
    Images}
    {Filtering/ImageIntensity/SubtractConstantFromEveryPixel,Subtract
    Constant From Every Pixel} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSubtractImageFilterPython.itkSubtractImageFilterID3ID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkSubtractImageFilterPython.itkSubtractImageFilterID3ID3ID3_Clone)
    Input1Input2OutputAdditiveOperatorsCheck = _itkSubtractImageFilterPython.itkSubtractImageFilterID3ID3ID3_Input1Input2OutputAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkSubtractImageFilterPython.delete_itkSubtractImageFilterID3ID3ID3
    cast = _swig_new_static_method(_itkSubtractImageFilterPython.itkSubtractImageFilterID3ID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkSubtractImageFilterID3ID3ID3

        Create a new object of the class itkSubtractImageFilterID3ID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSubtractImageFilterID3ID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSubtractImageFilterID3ID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSubtractImageFilterID3ID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSubtractImageFilterID3ID3ID3 in _itkSubtractImageFilterPython:
_itkSubtractImageFilterPython.itkSubtractImageFilterID3ID3ID3_swigregister(itkSubtractImageFilterID3ID3ID3)
itkSubtractImageFilterID3ID3ID3___New_orig__ = _itkSubtractImageFilterPython.itkSubtractImageFilterID3ID3ID3___New_orig__
itkSubtractImageFilterID3ID3ID3_cast = _itkSubtractImageFilterPython.itkSubtractImageFilterID3ID3ID3_cast


def itkSubtractImageFilterIF2IF2IF2_New():
    return itkSubtractImageFilterIF2IF2IF2.New()

class itkSubtractImageFilterIF2IF2IF2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF2IF2IF2):
    r"""


    Pixel-wise subtraction of two images.

    Subtract each pixel from image2 from its corresponding pixel in
    image1:

    This is done using

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    Additionally, a constant can be subtracted from every pixel in an
    image using:

    The result of AddImageFilter with a negative constant is not
    necessarily the same as SubtractImageFilter. This would be the case
    when the PixelType defines an operator-() that is not the inverse of
    operator+()  {Filtering/ImageIntensity/SubtractTwoImages,Subtract Two
    Images}
    {Filtering/ImageIntensity/SubtractConstantFromEveryPixel,Subtract
    Constant From Every Pixel} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSubtractImageFilterPython.itkSubtractImageFilterIF2IF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkSubtractImageFilterPython.itkSubtractImageFilterIF2IF2IF2_Clone)
    Input1Input2OutputAdditiveOperatorsCheck = _itkSubtractImageFilterPython.itkSubtractImageFilterIF2IF2IF2_Input1Input2OutputAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkSubtractImageFilterPython.delete_itkSubtractImageFilterIF2IF2IF2
    cast = _swig_new_static_method(_itkSubtractImageFilterPython.itkSubtractImageFilterIF2IF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkSubtractImageFilterIF2IF2IF2

        Create a new object of the class itkSubtractImageFilterIF2IF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSubtractImageFilterIF2IF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSubtractImageFilterIF2IF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSubtractImageFilterIF2IF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSubtractImageFilterIF2IF2IF2 in _itkSubtractImageFilterPython:
_itkSubtractImageFilterPython.itkSubtractImageFilterIF2IF2IF2_swigregister(itkSubtractImageFilterIF2IF2IF2)
itkSubtractImageFilterIF2IF2IF2___New_orig__ = _itkSubtractImageFilterPython.itkSubtractImageFilterIF2IF2IF2___New_orig__
itkSubtractImageFilterIF2IF2IF2_cast = _itkSubtractImageFilterPython.itkSubtractImageFilterIF2IF2IF2_cast


def itkSubtractImageFilterIF3IF3IF3_New():
    return itkSubtractImageFilterIF3IF3IF3.New()

class itkSubtractImageFilterIF3IF3IF3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF3IF3IF3):
    r"""


    Pixel-wise subtraction of two images.

    Subtract each pixel from image2 from its corresponding pixel in
    image1:

    This is done using

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    Additionally, a constant can be subtracted from every pixel in an
    image using:

    The result of AddImageFilter with a negative constant is not
    necessarily the same as SubtractImageFilter. This would be the case
    when the PixelType defines an operator-() that is not the inverse of
    operator+()  {Filtering/ImageIntensity/SubtractTwoImages,Subtract Two
    Images}
    {Filtering/ImageIntensity/SubtractConstantFromEveryPixel,Subtract
    Constant From Every Pixel} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSubtractImageFilterPython.itkSubtractImageFilterIF3IF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkSubtractImageFilterPython.itkSubtractImageFilterIF3IF3IF3_Clone)
    Input1Input2OutputAdditiveOperatorsCheck = _itkSubtractImageFilterPython.itkSubtractImageFilterIF3IF3IF3_Input1Input2OutputAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkSubtractImageFilterPython.delete_itkSubtractImageFilterIF3IF3IF3
    cast = _swig_new_static_method(_itkSubtractImageFilterPython.itkSubtractImageFilterIF3IF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkSubtractImageFilterIF3IF3IF3

        Create a new object of the class itkSubtractImageFilterIF3IF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSubtractImageFilterIF3IF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSubtractImageFilterIF3IF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSubtractImageFilterIF3IF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSubtractImageFilterIF3IF3IF3 in _itkSubtractImageFilterPython:
_itkSubtractImageFilterPython.itkSubtractImageFilterIF3IF3IF3_swigregister(itkSubtractImageFilterIF3IF3IF3)
itkSubtractImageFilterIF3IF3IF3___New_orig__ = _itkSubtractImageFilterPython.itkSubtractImageFilterIF3IF3IF3___New_orig__
itkSubtractImageFilterIF3IF3IF3_cast = _itkSubtractImageFilterPython.itkSubtractImageFilterIF3IF3IF3_cast


def itkSubtractImageFilterISS2ISS2ISS2_New():
    return itkSubtractImageFilterISS2ISS2ISS2.New()

class itkSubtractImageFilterISS2ISS2ISS2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS2ISS2ISS2):
    r"""


    Pixel-wise subtraction of two images.

    Subtract each pixel from image2 from its corresponding pixel in
    image1:

    This is done using

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    Additionally, a constant can be subtracted from every pixel in an
    image using:

    The result of AddImageFilter with a negative constant is not
    necessarily the same as SubtractImageFilter. This would be the case
    when the PixelType defines an operator-() that is not the inverse of
    operator+()  {Filtering/ImageIntensity/SubtractTwoImages,Subtract Two
    Images}
    {Filtering/ImageIntensity/SubtractConstantFromEveryPixel,Subtract
    Constant From Every Pixel} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSubtractImageFilterPython.itkSubtractImageFilterISS2ISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSubtractImageFilterPython.itkSubtractImageFilterISS2ISS2ISS2_Clone)
    Input1Input2OutputAdditiveOperatorsCheck = _itkSubtractImageFilterPython.itkSubtractImageFilterISS2ISS2ISS2_Input1Input2OutputAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkSubtractImageFilterPython.delete_itkSubtractImageFilterISS2ISS2ISS2
    cast = _swig_new_static_method(_itkSubtractImageFilterPython.itkSubtractImageFilterISS2ISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkSubtractImageFilterISS2ISS2ISS2

        Create a new object of the class itkSubtractImageFilterISS2ISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSubtractImageFilterISS2ISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSubtractImageFilterISS2ISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSubtractImageFilterISS2ISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSubtractImageFilterISS2ISS2ISS2 in _itkSubtractImageFilterPython:
_itkSubtractImageFilterPython.itkSubtractImageFilterISS2ISS2ISS2_swigregister(itkSubtractImageFilterISS2ISS2ISS2)
itkSubtractImageFilterISS2ISS2ISS2___New_orig__ = _itkSubtractImageFilterPython.itkSubtractImageFilterISS2ISS2ISS2___New_orig__
itkSubtractImageFilterISS2ISS2ISS2_cast = _itkSubtractImageFilterPython.itkSubtractImageFilterISS2ISS2ISS2_cast


def itkSubtractImageFilterISS3ISS3ISS3_New():
    return itkSubtractImageFilterISS3ISS3ISS3.New()

class itkSubtractImageFilterISS3ISS3ISS3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS3ISS3ISS3):
    r"""


    Pixel-wise subtraction of two images.

    Subtract each pixel from image2 from its corresponding pixel in
    image1:

    This is done using

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    Additionally, a constant can be subtracted from every pixel in an
    image using:

    The result of AddImageFilter with a negative constant is not
    necessarily the same as SubtractImageFilter. This would be the case
    when the PixelType defines an operator-() that is not the inverse of
    operator+()  {Filtering/ImageIntensity/SubtractTwoImages,Subtract Two
    Images}
    {Filtering/ImageIntensity/SubtractConstantFromEveryPixel,Subtract
    Constant From Every Pixel} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSubtractImageFilterPython.itkSubtractImageFilterISS3ISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSubtractImageFilterPython.itkSubtractImageFilterISS3ISS3ISS3_Clone)
    Input1Input2OutputAdditiveOperatorsCheck = _itkSubtractImageFilterPython.itkSubtractImageFilterISS3ISS3ISS3_Input1Input2OutputAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkSubtractImageFilterPython.delete_itkSubtractImageFilterISS3ISS3ISS3
    cast = _swig_new_static_method(_itkSubtractImageFilterPython.itkSubtractImageFilterISS3ISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkSubtractImageFilterISS3ISS3ISS3

        Create a new object of the class itkSubtractImageFilterISS3ISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSubtractImageFilterISS3ISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSubtractImageFilterISS3ISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSubtractImageFilterISS3ISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSubtractImageFilterISS3ISS3ISS3 in _itkSubtractImageFilterPython:
_itkSubtractImageFilterPython.itkSubtractImageFilterISS3ISS3ISS3_swigregister(itkSubtractImageFilterISS3ISS3ISS3)
itkSubtractImageFilterISS3ISS3ISS3___New_orig__ = _itkSubtractImageFilterPython.itkSubtractImageFilterISS3ISS3ISS3___New_orig__
itkSubtractImageFilterISS3ISS3ISS3_cast = _itkSubtractImageFilterPython.itkSubtractImageFilterISS3ISS3ISS3_cast


def itkSubtractImageFilterIUC2IUC2IUC2_New():
    return itkSubtractImageFilterIUC2IUC2IUC2.New()

class itkSubtractImageFilterIUC2IUC2IUC2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC2IUC2IUC2):
    r"""


    Pixel-wise subtraction of two images.

    Subtract each pixel from image2 from its corresponding pixel in
    image1:

    This is done using

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    Additionally, a constant can be subtracted from every pixel in an
    image using:

    The result of AddImageFilter with a negative constant is not
    necessarily the same as SubtractImageFilter. This would be the case
    when the PixelType defines an operator-() that is not the inverse of
    operator+()  {Filtering/ImageIntensity/SubtractTwoImages,Subtract Two
    Images}
    {Filtering/ImageIntensity/SubtractConstantFromEveryPixel,Subtract
    Constant From Every Pixel} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSubtractImageFilterPython.itkSubtractImageFilterIUC2IUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkSubtractImageFilterPython.itkSubtractImageFilterIUC2IUC2IUC2_Clone)
    Input1Input2OutputAdditiveOperatorsCheck = _itkSubtractImageFilterPython.itkSubtractImageFilterIUC2IUC2IUC2_Input1Input2OutputAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkSubtractImageFilterPython.delete_itkSubtractImageFilterIUC2IUC2IUC2
    cast = _swig_new_static_method(_itkSubtractImageFilterPython.itkSubtractImageFilterIUC2IUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkSubtractImageFilterIUC2IUC2IUC2

        Create a new object of the class itkSubtractImageFilterIUC2IUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSubtractImageFilterIUC2IUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSubtractImageFilterIUC2IUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSubtractImageFilterIUC2IUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSubtractImageFilterIUC2IUC2IUC2 in _itkSubtractImageFilterPython:
_itkSubtractImageFilterPython.itkSubtractImageFilterIUC2IUC2IUC2_swigregister(itkSubtractImageFilterIUC2IUC2IUC2)
itkSubtractImageFilterIUC2IUC2IUC2___New_orig__ = _itkSubtractImageFilterPython.itkSubtractImageFilterIUC2IUC2IUC2___New_orig__
itkSubtractImageFilterIUC2IUC2IUC2_cast = _itkSubtractImageFilterPython.itkSubtractImageFilterIUC2IUC2IUC2_cast


def itkSubtractImageFilterIUC3IUC3IUC3_New():
    return itkSubtractImageFilterIUC3IUC3IUC3.New()

class itkSubtractImageFilterIUC3IUC3IUC3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC3IUC3IUC3):
    r"""


    Pixel-wise subtraction of two images.

    Subtract each pixel from image2 from its corresponding pixel in
    image1:

    This is done using

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    Additionally, a constant can be subtracted from every pixel in an
    image using:

    The result of AddImageFilter with a negative constant is not
    necessarily the same as SubtractImageFilter. This would be the case
    when the PixelType defines an operator-() that is not the inverse of
    operator+()  {Filtering/ImageIntensity/SubtractTwoImages,Subtract Two
    Images}
    {Filtering/ImageIntensity/SubtractConstantFromEveryPixel,Subtract
    Constant From Every Pixel} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSubtractImageFilterPython.itkSubtractImageFilterIUC3IUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkSubtractImageFilterPython.itkSubtractImageFilterIUC3IUC3IUC3_Clone)
    Input1Input2OutputAdditiveOperatorsCheck = _itkSubtractImageFilterPython.itkSubtractImageFilterIUC3IUC3IUC3_Input1Input2OutputAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkSubtractImageFilterPython.delete_itkSubtractImageFilterIUC3IUC3IUC3
    cast = _swig_new_static_method(_itkSubtractImageFilterPython.itkSubtractImageFilterIUC3IUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkSubtractImageFilterIUC3IUC3IUC3

        Create a new object of the class itkSubtractImageFilterIUC3IUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSubtractImageFilterIUC3IUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSubtractImageFilterIUC3IUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSubtractImageFilterIUC3IUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSubtractImageFilterIUC3IUC3IUC3 in _itkSubtractImageFilterPython:
_itkSubtractImageFilterPython.itkSubtractImageFilterIUC3IUC3IUC3_swigregister(itkSubtractImageFilterIUC3IUC3IUC3)
itkSubtractImageFilterIUC3IUC3IUC3___New_orig__ = _itkSubtractImageFilterPython.itkSubtractImageFilterIUC3IUC3IUC3___New_orig__
itkSubtractImageFilterIUC3IUC3IUC3_cast = _itkSubtractImageFilterPython.itkSubtractImageFilterIUC3IUC3IUC3_cast


def itkSubtractImageFilterIUS2IUS2IUS2_New():
    return itkSubtractImageFilterIUS2IUS2IUS2.New()

class itkSubtractImageFilterIUS2IUS2IUS2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS2IUS2IUS2):
    r"""


    Pixel-wise subtraction of two images.

    Subtract each pixel from image2 from its corresponding pixel in
    image1:

    This is done using

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    Additionally, a constant can be subtracted from every pixel in an
    image using:

    The result of AddImageFilter with a negative constant is not
    necessarily the same as SubtractImageFilter. This would be the case
    when the PixelType defines an operator-() that is not the inverse of
    operator+()  {Filtering/ImageIntensity/SubtractTwoImages,Subtract Two
    Images}
    {Filtering/ImageIntensity/SubtractConstantFromEveryPixel,Subtract
    Constant From Every Pixel} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSubtractImageFilterPython.itkSubtractImageFilterIUS2IUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSubtractImageFilterPython.itkSubtractImageFilterIUS2IUS2IUS2_Clone)
    Input1Input2OutputAdditiveOperatorsCheck = _itkSubtractImageFilterPython.itkSubtractImageFilterIUS2IUS2IUS2_Input1Input2OutputAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkSubtractImageFilterPython.delete_itkSubtractImageFilterIUS2IUS2IUS2
    cast = _swig_new_static_method(_itkSubtractImageFilterPython.itkSubtractImageFilterIUS2IUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSubtractImageFilterIUS2IUS2IUS2

        Create a new object of the class itkSubtractImageFilterIUS2IUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSubtractImageFilterIUS2IUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSubtractImageFilterIUS2IUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSubtractImageFilterIUS2IUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSubtractImageFilterIUS2IUS2IUS2 in _itkSubtractImageFilterPython:
_itkSubtractImageFilterPython.itkSubtractImageFilterIUS2IUS2IUS2_swigregister(itkSubtractImageFilterIUS2IUS2IUS2)
itkSubtractImageFilterIUS2IUS2IUS2___New_orig__ = _itkSubtractImageFilterPython.itkSubtractImageFilterIUS2IUS2IUS2___New_orig__
itkSubtractImageFilterIUS2IUS2IUS2_cast = _itkSubtractImageFilterPython.itkSubtractImageFilterIUS2IUS2IUS2_cast


def itkSubtractImageFilterIUS3IUS3IUS3_New():
    return itkSubtractImageFilterIUS3IUS3IUS3.New()

class itkSubtractImageFilterIUS3IUS3IUS3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS3IUS3IUS3):
    r"""


    Pixel-wise subtraction of two images.

    Subtract each pixel from image2 from its corresponding pixel in
    image1:

    This is done using

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    Additionally, a constant can be subtracted from every pixel in an
    image using:

    The result of AddImageFilter with a negative constant is not
    necessarily the same as SubtractImageFilter. This would be the case
    when the PixelType defines an operator-() that is not the inverse of
    operator+()  {Filtering/ImageIntensity/SubtractTwoImages,Subtract Two
    Images}
    {Filtering/ImageIntensity/SubtractConstantFromEveryPixel,Subtract
    Constant From Every Pixel} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSubtractImageFilterPython.itkSubtractImageFilterIUS3IUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSubtractImageFilterPython.itkSubtractImageFilterIUS3IUS3IUS3_Clone)
    Input1Input2OutputAdditiveOperatorsCheck = _itkSubtractImageFilterPython.itkSubtractImageFilterIUS3IUS3IUS3_Input1Input2OutputAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkSubtractImageFilterPython.delete_itkSubtractImageFilterIUS3IUS3IUS3
    cast = _swig_new_static_method(_itkSubtractImageFilterPython.itkSubtractImageFilterIUS3IUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSubtractImageFilterIUS3IUS3IUS3

        Create a new object of the class itkSubtractImageFilterIUS3IUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSubtractImageFilterIUS3IUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSubtractImageFilterIUS3IUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSubtractImageFilterIUS3IUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSubtractImageFilterIUS3IUS3IUS3 in _itkSubtractImageFilterPython:
_itkSubtractImageFilterPython.itkSubtractImageFilterIUS3IUS3IUS3_swigregister(itkSubtractImageFilterIUS3IUS3IUS3)
itkSubtractImageFilterIUS3IUS3IUS3___New_orig__ = _itkSubtractImageFilterPython.itkSubtractImageFilterIUS3IUS3IUS3___New_orig__
itkSubtractImageFilterIUS3IUS3IUS3_cast = _itkSubtractImageFilterPython.itkSubtractImageFilterIUS3IUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def subtract_image_filter(*args, **kwargs):
    """Procedural interface for SubtractImageFilter"""
    import itk
    instance = itk.SubtractImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def subtract_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.SubtractImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.SubtractImageFilter.values()[0]
    else:
        filter_object = itk.SubtractImageFilter

    subtract_image_filter.__doc__ = filter_object.__doc__
    subtract_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    subtract_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.SubtractImageFilter, itkTemplate.itkTemplate):
        subtract_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        subtract_image_filter.__doc__ += "\n"
        subtract_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        subtract_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



