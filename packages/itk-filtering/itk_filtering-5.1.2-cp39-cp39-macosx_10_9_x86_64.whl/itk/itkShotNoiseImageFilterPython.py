# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageNoisePython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkShotNoiseImageFilterPython
else:
    import _itkShotNoiseImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkShotNoiseImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkShotNoiseImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkNoiseBaseImageFilterPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkImagePython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.pyBasePython
import itk.stdcomplexPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.vnl_vectorPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkPointPython
import itk.itkRGBPixelPython
import itk.itkIndexPython
import itk.ITKCommonBasePython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterAPython

def itkShotNoiseImageFilterID2ID2_New():
    return itkShotNoiseImageFilterID2ID2.New()

class itkShotNoiseImageFilterID2ID2(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterID2ID2):
    r"""


    Alter an image with shot noise.

    The shot noise follows a Poisson distribution:

    $ I = N(I_0) $

    where $ N(I_0) $ is a Poisson-distributed random variable of mean $
    I_0 $. The noise is thus dependent on the pixel intensities in the
    image.  The intensities in the image can be scaled by a user provided
    value to map pixel values to the actual number of particles. The
    scaling can be seen as the inverse of the gain used during the
    acquisition. The noisy signal is then scaled back to its input
    intensity range:

    $ I = \\frac{N(I_0 \\times s)}{s} $

    where $ s $ is the scale factor.  The Poisson-distributed variable $
    \\lambda $ is computed by using the algorithm:

    $ \\begin{array}{l} k \\leftarrow 0 \\\\ p \\leftarrow 1
    \\\\ \\textbf{repeat} \\\\ \\left\\{ \\begin{array}{l}
    k \\leftarrow k+1 \\\\ p \\leftarrow p \\ast U()
    \\end{array} \\right. \\\\ \\textbf{until } p >
    e^{\\lambda} \\\\ \\textbf{return} (k) \\end{array} $

    where $ U() $ provides a uniformly distributed random variable in the
    interval $ [0,1] $.  This algorithm is very inefficient for large
    values of $ \\lambda $, though. Fortunately, the Poisson
    distribution can be accurately approximated by a Gaussian distribution
    of mean and variance $ \\lambda $ when $ \\lambda $ is large
    enough. In this implementation, this value is considered to be 50.
    This leads to the faster algorithm:

    $ \\lambda + \\sqrt{\\lambda} \\times N()$

    where $ N() $ is a normally distributed random variable of mean 0 and
    variance 1.

    Gaetan Lehmann  This code was contributed in the Insight Journal paper
    "Noise Simulation".https://hdl.handle.net/10380/3158 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID2ID2_Clone)
    GetScale = _swig_new_instance_method(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID2ID2_GetScale)
    SetScale = _swig_new_instance_method(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID2ID2_SetScale)
    InputConvertibleToOutputCheck = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID2ID2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkShotNoiseImageFilterPython.delete_itkShotNoiseImageFilterID2ID2
    cast = _swig_new_static_method(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkShotNoiseImageFilterID2ID2

        Create a new object of the class itkShotNoiseImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShotNoiseImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkShotNoiseImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkShotNoiseImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkShotNoiseImageFilterID2ID2 in _itkShotNoiseImageFilterPython:
_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID2ID2_swigregister(itkShotNoiseImageFilterID2ID2)
itkShotNoiseImageFilterID2ID2___New_orig__ = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID2ID2___New_orig__
itkShotNoiseImageFilterID2ID2_cast = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID2ID2_cast


def itkShotNoiseImageFilterID3ID3_New():
    return itkShotNoiseImageFilterID3ID3.New()

class itkShotNoiseImageFilterID3ID3(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterID3ID3):
    r"""


    Alter an image with shot noise.

    The shot noise follows a Poisson distribution:

    $ I = N(I_0) $

    where $ N(I_0) $ is a Poisson-distributed random variable of mean $
    I_0 $. The noise is thus dependent on the pixel intensities in the
    image.  The intensities in the image can be scaled by a user provided
    value to map pixel values to the actual number of particles. The
    scaling can be seen as the inverse of the gain used during the
    acquisition. The noisy signal is then scaled back to its input
    intensity range:

    $ I = \\frac{N(I_0 \\times s)}{s} $

    where $ s $ is the scale factor.  The Poisson-distributed variable $
    \\lambda $ is computed by using the algorithm:

    $ \\begin{array}{l} k \\leftarrow 0 \\\\ p \\leftarrow 1
    \\\\ \\textbf{repeat} \\\\ \\left\\{ \\begin{array}{l}
    k \\leftarrow k+1 \\\\ p \\leftarrow p \\ast U()
    \\end{array} \\right. \\\\ \\textbf{until } p >
    e^{\\lambda} \\\\ \\textbf{return} (k) \\end{array} $

    where $ U() $ provides a uniformly distributed random variable in the
    interval $ [0,1] $.  This algorithm is very inefficient for large
    values of $ \\lambda $, though. Fortunately, the Poisson
    distribution can be accurately approximated by a Gaussian distribution
    of mean and variance $ \\lambda $ when $ \\lambda $ is large
    enough. In this implementation, this value is considered to be 50.
    This leads to the faster algorithm:

    $ \\lambda + \\sqrt{\\lambda} \\times N()$

    where $ N() $ is a normally distributed random variable of mean 0 and
    variance 1.

    Gaetan Lehmann  This code was contributed in the Insight Journal paper
    "Noise Simulation".https://hdl.handle.net/10380/3158 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID3ID3_Clone)
    GetScale = _swig_new_instance_method(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID3ID3_GetScale)
    SetScale = _swig_new_instance_method(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID3ID3_SetScale)
    InputConvertibleToOutputCheck = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID3ID3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkShotNoiseImageFilterPython.delete_itkShotNoiseImageFilterID3ID3
    cast = _swig_new_static_method(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkShotNoiseImageFilterID3ID3

        Create a new object of the class itkShotNoiseImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShotNoiseImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkShotNoiseImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkShotNoiseImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkShotNoiseImageFilterID3ID3 in _itkShotNoiseImageFilterPython:
_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID3ID3_swigregister(itkShotNoiseImageFilterID3ID3)
itkShotNoiseImageFilterID3ID3___New_orig__ = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID3ID3___New_orig__
itkShotNoiseImageFilterID3ID3_cast = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID3ID3_cast


def itkShotNoiseImageFilterIF2IF2_New():
    return itkShotNoiseImageFilterIF2IF2.New()

class itkShotNoiseImageFilterIF2IF2(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIF2IF2):
    r"""


    Alter an image with shot noise.

    The shot noise follows a Poisson distribution:

    $ I = N(I_0) $

    where $ N(I_0) $ is a Poisson-distributed random variable of mean $
    I_0 $. The noise is thus dependent on the pixel intensities in the
    image.  The intensities in the image can be scaled by a user provided
    value to map pixel values to the actual number of particles. The
    scaling can be seen as the inverse of the gain used during the
    acquisition. The noisy signal is then scaled back to its input
    intensity range:

    $ I = \\frac{N(I_0 \\times s)}{s} $

    where $ s $ is the scale factor.  The Poisson-distributed variable $
    \\lambda $ is computed by using the algorithm:

    $ \\begin{array}{l} k \\leftarrow 0 \\\\ p \\leftarrow 1
    \\\\ \\textbf{repeat} \\\\ \\left\\{ \\begin{array}{l}
    k \\leftarrow k+1 \\\\ p \\leftarrow p \\ast U()
    \\end{array} \\right. \\\\ \\textbf{until } p >
    e^{\\lambda} \\\\ \\textbf{return} (k) \\end{array} $

    where $ U() $ provides a uniformly distributed random variable in the
    interval $ [0,1] $.  This algorithm is very inefficient for large
    values of $ \\lambda $, though. Fortunately, the Poisson
    distribution can be accurately approximated by a Gaussian distribution
    of mean and variance $ \\lambda $ when $ \\lambda $ is large
    enough. In this implementation, this value is considered to be 50.
    This leads to the faster algorithm:

    $ \\lambda + \\sqrt{\\lambda} \\times N()$

    where $ N() $ is a normally distributed random variable of mean 0 and
    variance 1.

    Gaetan Lehmann  This code was contributed in the Insight Journal paper
    "Noise Simulation".https://hdl.handle.net/10380/3158 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF2IF2_Clone)
    GetScale = _swig_new_instance_method(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF2IF2_GetScale)
    SetScale = _swig_new_instance_method(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF2IF2_SetScale)
    InputConvertibleToOutputCheck = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF2IF2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkShotNoiseImageFilterPython.delete_itkShotNoiseImageFilterIF2IF2
    cast = _swig_new_static_method(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkShotNoiseImageFilterIF2IF2

        Create a new object of the class itkShotNoiseImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShotNoiseImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkShotNoiseImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkShotNoiseImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkShotNoiseImageFilterIF2IF2 in _itkShotNoiseImageFilterPython:
_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF2IF2_swigregister(itkShotNoiseImageFilterIF2IF2)
itkShotNoiseImageFilterIF2IF2___New_orig__ = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF2IF2___New_orig__
itkShotNoiseImageFilterIF2IF2_cast = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF2IF2_cast


def itkShotNoiseImageFilterIF3IF3_New():
    return itkShotNoiseImageFilterIF3IF3.New()

class itkShotNoiseImageFilterIF3IF3(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIF3IF3):
    r"""


    Alter an image with shot noise.

    The shot noise follows a Poisson distribution:

    $ I = N(I_0) $

    where $ N(I_0) $ is a Poisson-distributed random variable of mean $
    I_0 $. The noise is thus dependent on the pixel intensities in the
    image.  The intensities in the image can be scaled by a user provided
    value to map pixel values to the actual number of particles. The
    scaling can be seen as the inverse of the gain used during the
    acquisition. The noisy signal is then scaled back to its input
    intensity range:

    $ I = \\frac{N(I_0 \\times s)}{s} $

    where $ s $ is the scale factor.  The Poisson-distributed variable $
    \\lambda $ is computed by using the algorithm:

    $ \\begin{array}{l} k \\leftarrow 0 \\\\ p \\leftarrow 1
    \\\\ \\textbf{repeat} \\\\ \\left\\{ \\begin{array}{l}
    k \\leftarrow k+1 \\\\ p \\leftarrow p \\ast U()
    \\end{array} \\right. \\\\ \\textbf{until } p >
    e^{\\lambda} \\\\ \\textbf{return} (k) \\end{array} $

    where $ U() $ provides a uniformly distributed random variable in the
    interval $ [0,1] $.  This algorithm is very inefficient for large
    values of $ \\lambda $, though. Fortunately, the Poisson
    distribution can be accurately approximated by a Gaussian distribution
    of mean and variance $ \\lambda $ when $ \\lambda $ is large
    enough. In this implementation, this value is considered to be 50.
    This leads to the faster algorithm:

    $ \\lambda + \\sqrt{\\lambda} \\times N()$

    where $ N() $ is a normally distributed random variable of mean 0 and
    variance 1.

    Gaetan Lehmann  This code was contributed in the Insight Journal paper
    "Noise Simulation".https://hdl.handle.net/10380/3158 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF3IF3_Clone)
    GetScale = _swig_new_instance_method(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF3IF3_GetScale)
    SetScale = _swig_new_instance_method(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF3IF3_SetScale)
    InputConvertibleToOutputCheck = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF3IF3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkShotNoiseImageFilterPython.delete_itkShotNoiseImageFilterIF3IF3
    cast = _swig_new_static_method(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkShotNoiseImageFilterIF3IF3

        Create a new object of the class itkShotNoiseImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShotNoiseImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkShotNoiseImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkShotNoiseImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkShotNoiseImageFilterIF3IF3 in _itkShotNoiseImageFilterPython:
_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF3IF3_swigregister(itkShotNoiseImageFilterIF3IF3)
itkShotNoiseImageFilterIF3IF3___New_orig__ = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF3IF3___New_orig__
itkShotNoiseImageFilterIF3IF3_cast = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF3IF3_cast


def itkShotNoiseImageFilterISS2ISS2_New():
    return itkShotNoiseImageFilterISS2ISS2.New()

class itkShotNoiseImageFilterISS2ISS2(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterISS2ISS2):
    r"""


    Alter an image with shot noise.

    The shot noise follows a Poisson distribution:

    $ I = N(I_0) $

    where $ N(I_0) $ is a Poisson-distributed random variable of mean $
    I_0 $. The noise is thus dependent on the pixel intensities in the
    image.  The intensities in the image can be scaled by a user provided
    value to map pixel values to the actual number of particles. The
    scaling can be seen as the inverse of the gain used during the
    acquisition. The noisy signal is then scaled back to its input
    intensity range:

    $ I = \\frac{N(I_0 \\times s)}{s} $

    where $ s $ is the scale factor.  The Poisson-distributed variable $
    \\lambda $ is computed by using the algorithm:

    $ \\begin{array}{l} k \\leftarrow 0 \\\\ p \\leftarrow 1
    \\\\ \\textbf{repeat} \\\\ \\left\\{ \\begin{array}{l}
    k \\leftarrow k+1 \\\\ p \\leftarrow p \\ast U()
    \\end{array} \\right. \\\\ \\textbf{until } p >
    e^{\\lambda} \\\\ \\textbf{return} (k) \\end{array} $

    where $ U() $ provides a uniformly distributed random variable in the
    interval $ [0,1] $.  This algorithm is very inefficient for large
    values of $ \\lambda $, though. Fortunately, the Poisson
    distribution can be accurately approximated by a Gaussian distribution
    of mean and variance $ \\lambda $ when $ \\lambda $ is large
    enough. In this implementation, this value is considered to be 50.
    This leads to the faster algorithm:

    $ \\lambda + \\sqrt{\\lambda} \\times N()$

    where $ N() $ is a normally distributed random variable of mean 0 and
    variance 1.

    Gaetan Lehmann  This code was contributed in the Insight Journal paper
    "Noise Simulation".https://hdl.handle.net/10380/3158 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS2ISS2_Clone)
    GetScale = _swig_new_instance_method(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS2ISS2_GetScale)
    SetScale = _swig_new_instance_method(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS2ISS2_SetScale)
    InputConvertibleToOutputCheck = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS2ISS2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkShotNoiseImageFilterPython.delete_itkShotNoiseImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkShotNoiseImageFilterISS2ISS2

        Create a new object of the class itkShotNoiseImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShotNoiseImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkShotNoiseImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkShotNoiseImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkShotNoiseImageFilterISS2ISS2 in _itkShotNoiseImageFilterPython:
_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS2ISS2_swigregister(itkShotNoiseImageFilterISS2ISS2)
itkShotNoiseImageFilterISS2ISS2___New_orig__ = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS2ISS2___New_orig__
itkShotNoiseImageFilterISS2ISS2_cast = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS2ISS2_cast


def itkShotNoiseImageFilterISS3ISS3_New():
    return itkShotNoiseImageFilterISS3ISS3.New()

class itkShotNoiseImageFilterISS3ISS3(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterISS3ISS3):
    r"""


    Alter an image with shot noise.

    The shot noise follows a Poisson distribution:

    $ I = N(I_0) $

    where $ N(I_0) $ is a Poisson-distributed random variable of mean $
    I_0 $. The noise is thus dependent on the pixel intensities in the
    image.  The intensities in the image can be scaled by a user provided
    value to map pixel values to the actual number of particles. The
    scaling can be seen as the inverse of the gain used during the
    acquisition. The noisy signal is then scaled back to its input
    intensity range:

    $ I = \\frac{N(I_0 \\times s)}{s} $

    where $ s $ is the scale factor.  The Poisson-distributed variable $
    \\lambda $ is computed by using the algorithm:

    $ \\begin{array}{l} k \\leftarrow 0 \\\\ p \\leftarrow 1
    \\\\ \\textbf{repeat} \\\\ \\left\\{ \\begin{array}{l}
    k \\leftarrow k+1 \\\\ p \\leftarrow p \\ast U()
    \\end{array} \\right. \\\\ \\textbf{until } p >
    e^{\\lambda} \\\\ \\textbf{return} (k) \\end{array} $

    where $ U() $ provides a uniformly distributed random variable in the
    interval $ [0,1] $.  This algorithm is very inefficient for large
    values of $ \\lambda $, though. Fortunately, the Poisson
    distribution can be accurately approximated by a Gaussian distribution
    of mean and variance $ \\lambda $ when $ \\lambda $ is large
    enough. In this implementation, this value is considered to be 50.
    This leads to the faster algorithm:

    $ \\lambda + \\sqrt{\\lambda} \\times N()$

    where $ N() $ is a normally distributed random variable of mean 0 and
    variance 1.

    Gaetan Lehmann  This code was contributed in the Insight Journal paper
    "Noise Simulation".https://hdl.handle.net/10380/3158 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS3ISS3_Clone)
    GetScale = _swig_new_instance_method(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS3ISS3_GetScale)
    SetScale = _swig_new_instance_method(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS3ISS3_SetScale)
    InputConvertibleToOutputCheck = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS3ISS3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkShotNoiseImageFilterPython.delete_itkShotNoiseImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkShotNoiseImageFilterISS3ISS3

        Create a new object of the class itkShotNoiseImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShotNoiseImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkShotNoiseImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkShotNoiseImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkShotNoiseImageFilterISS3ISS3 in _itkShotNoiseImageFilterPython:
_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS3ISS3_swigregister(itkShotNoiseImageFilterISS3ISS3)
itkShotNoiseImageFilterISS3ISS3___New_orig__ = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS3ISS3___New_orig__
itkShotNoiseImageFilterISS3ISS3_cast = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS3ISS3_cast


def itkShotNoiseImageFilterIUC2IUC2_New():
    return itkShotNoiseImageFilterIUC2IUC2.New()

class itkShotNoiseImageFilterIUC2IUC2(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIUC2IUC2):
    r"""


    Alter an image with shot noise.

    The shot noise follows a Poisson distribution:

    $ I = N(I_0) $

    where $ N(I_0) $ is a Poisson-distributed random variable of mean $
    I_0 $. The noise is thus dependent on the pixel intensities in the
    image.  The intensities in the image can be scaled by a user provided
    value to map pixel values to the actual number of particles. The
    scaling can be seen as the inverse of the gain used during the
    acquisition. The noisy signal is then scaled back to its input
    intensity range:

    $ I = \\frac{N(I_0 \\times s)}{s} $

    where $ s $ is the scale factor.  The Poisson-distributed variable $
    \\lambda $ is computed by using the algorithm:

    $ \\begin{array}{l} k \\leftarrow 0 \\\\ p \\leftarrow 1
    \\\\ \\textbf{repeat} \\\\ \\left\\{ \\begin{array}{l}
    k \\leftarrow k+1 \\\\ p \\leftarrow p \\ast U()
    \\end{array} \\right. \\\\ \\textbf{until } p >
    e^{\\lambda} \\\\ \\textbf{return} (k) \\end{array} $

    where $ U() $ provides a uniformly distributed random variable in the
    interval $ [0,1] $.  This algorithm is very inefficient for large
    values of $ \\lambda $, though. Fortunately, the Poisson
    distribution can be accurately approximated by a Gaussian distribution
    of mean and variance $ \\lambda $ when $ \\lambda $ is large
    enough. In this implementation, this value is considered to be 50.
    This leads to the faster algorithm:

    $ \\lambda + \\sqrt{\\lambda} \\times N()$

    where $ N() $ is a normally distributed random variable of mean 0 and
    variance 1.

    Gaetan Lehmann  This code was contributed in the Insight Journal paper
    "Noise Simulation".https://hdl.handle.net/10380/3158 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC2IUC2_Clone)
    GetScale = _swig_new_instance_method(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC2IUC2_GetScale)
    SetScale = _swig_new_instance_method(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC2IUC2_SetScale)
    InputConvertibleToOutputCheck = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC2IUC2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkShotNoiseImageFilterPython.delete_itkShotNoiseImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkShotNoiseImageFilterIUC2IUC2

        Create a new object of the class itkShotNoiseImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShotNoiseImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkShotNoiseImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkShotNoiseImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkShotNoiseImageFilterIUC2IUC2 in _itkShotNoiseImageFilterPython:
_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC2IUC2_swigregister(itkShotNoiseImageFilterIUC2IUC2)
itkShotNoiseImageFilterIUC2IUC2___New_orig__ = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC2IUC2___New_orig__
itkShotNoiseImageFilterIUC2IUC2_cast = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC2IUC2_cast


def itkShotNoiseImageFilterIUC3IUC3_New():
    return itkShotNoiseImageFilterIUC3IUC3.New()

class itkShotNoiseImageFilterIUC3IUC3(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIUC3IUC3):
    r"""


    Alter an image with shot noise.

    The shot noise follows a Poisson distribution:

    $ I = N(I_0) $

    where $ N(I_0) $ is a Poisson-distributed random variable of mean $
    I_0 $. The noise is thus dependent on the pixel intensities in the
    image.  The intensities in the image can be scaled by a user provided
    value to map pixel values to the actual number of particles. The
    scaling can be seen as the inverse of the gain used during the
    acquisition. The noisy signal is then scaled back to its input
    intensity range:

    $ I = \\frac{N(I_0 \\times s)}{s} $

    where $ s $ is the scale factor.  The Poisson-distributed variable $
    \\lambda $ is computed by using the algorithm:

    $ \\begin{array}{l} k \\leftarrow 0 \\\\ p \\leftarrow 1
    \\\\ \\textbf{repeat} \\\\ \\left\\{ \\begin{array}{l}
    k \\leftarrow k+1 \\\\ p \\leftarrow p \\ast U()
    \\end{array} \\right. \\\\ \\textbf{until } p >
    e^{\\lambda} \\\\ \\textbf{return} (k) \\end{array} $

    where $ U() $ provides a uniformly distributed random variable in the
    interval $ [0,1] $.  This algorithm is very inefficient for large
    values of $ \\lambda $, though. Fortunately, the Poisson
    distribution can be accurately approximated by a Gaussian distribution
    of mean and variance $ \\lambda $ when $ \\lambda $ is large
    enough. In this implementation, this value is considered to be 50.
    This leads to the faster algorithm:

    $ \\lambda + \\sqrt{\\lambda} \\times N()$

    where $ N() $ is a normally distributed random variable of mean 0 and
    variance 1.

    Gaetan Lehmann  This code was contributed in the Insight Journal paper
    "Noise Simulation".https://hdl.handle.net/10380/3158 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC3IUC3_Clone)
    GetScale = _swig_new_instance_method(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC3IUC3_GetScale)
    SetScale = _swig_new_instance_method(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC3IUC3_SetScale)
    InputConvertibleToOutputCheck = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC3IUC3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkShotNoiseImageFilterPython.delete_itkShotNoiseImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkShotNoiseImageFilterIUC3IUC3

        Create a new object of the class itkShotNoiseImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShotNoiseImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkShotNoiseImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkShotNoiseImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkShotNoiseImageFilterIUC3IUC3 in _itkShotNoiseImageFilterPython:
_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC3IUC3_swigregister(itkShotNoiseImageFilterIUC3IUC3)
itkShotNoiseImageFilterIUC3IUC3___New_orig__ = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC3IUC3___New_orig__
itkShotNoiseImageFilterIUC3IUC3_cast = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC3IUC3_cast


def itkShotNoiseImageFilterIUS2IUS2_New():
    return itkShotNoiseImageFilterIUS2IUS2.New()

class itkShotNoiseImageFilterIUS2IUS2(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIUS2IUS2):
    r"""


    Alter an image with shot noise.

    The shot noise follows a Poisson distribution:

    $ I = N(I_0) $

    where $ N(I_0) $ is a Poisson-distributed random variable of mean $
    I_0 $. The noise is thus dependent on the pixel intensities in the
    image.  The intensities in the image can be scaled by a user provided
    value to map pixel values to the actual number of particles. The
    scaling can be seen as the inverse of the gain used during the
    acquisition. The noisy signal is then scaled back to its input
    intensity range:

    $ I = \\frac{N(I_0 \\times s)}{s} $

    where $ s $ is the scale factor.  The Poisson-distributed variable $
    \\lambda $ is computed by using the algorithm:

    $ \\begin{array}{l} k \\leftarrow 0 \\\\ p \\leftarrow 1
    \\\\ \\textbf{repeat} \\\\ \\left\\{ \\begin{array}{l}
    k \\leftarrow k+1 \\\\ p \\leftarrow p \\ast U()
    \\end{array} \\right. \\\\ \\textbf{until } p >
    e^{\\lambda} \\\\ \\textbf{return} (k) \\end{array} $

    where $ U() $ provides a uniformly distributed random variable in the
    interval $ [0,1] $.  This algorithm is very inefficient for large
    values of $ \\lambda $, though. Fortunately, the Poisson
    distribution can be accurately approximated by a Gaussian distribution
    of mean and variance $ \\lambda $ when $ \\lambda $ is large
    enough. In this implementation, this value is considered to be 50.
    This leads to the faster algorithm:

    $ \\lambda + \\sqrt{\\lambda} \\times N()$

    where $ N() $ is a normally distributed random variable of mean 0 and
    variance 1.

    Gaetan Lehmann  This code was contributed in the Insight Journal paper
    "Noise Simulation".https://hdl.handle.net/10380/3158 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS2IUS2_Clone)
    GetScale = _swig_new_instance_method(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS2IUS2_GetScale)
    SetScale = _swig_new_instance_method(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS2IUS2_SetScale)
    InputConvertibleToOutputCheck = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS2IUS2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkShotNoiseImageFilterPython.delete_itkShotNoiseImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkShotNoiseImageFilterIUS2IUS2

        Create a new object of the class itkShotNoiseImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShotNoiseImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkShotNoiseImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkShotNoiseImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkShotNoiseImageFilterIUS2IUS2 in _itkShotNoiseImageFilterPython:
_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS2IUS2_swigregister(itkShotNoiseImageFilterIUS2IUS2)
itkShotNoiseImageFilterIUS2IUS2___New_orig__ = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS2IUS2___New_orig__
itkShotNoiseImageFilterIUS2IUS2_cast = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS2IUS2_cast


def itkShotNoiseImageFilterIUS3IUS3_New():
    return itkShotNoiseImageFilterIUS3IUS3.New()

class itkShotNoiseImageFilterIUS3IUS3(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIUS3IUS3):
    r"""


    Alter an image with shot noise.

    The shot noise follows a Poisson distribution:

    $ I = N(I_0) $

    where $ N(I_0) $ is a Poisson-distributed random variable of mean $
    I_0 $. The noise is thus dependent on the pixel intensities in the
    image.  The intensities in the image can be scaled by a user provided
    value to map pixel values to the actual number of particles. The
    scaling can be seen as the inverse of the gain used during the
    acquisition. The noisy signal is then scaled back to its input
    intensity range:

    $ I = \\frac{N(I_0 \\times s)}{s} $

    where $ s $ is the scale factor.  The Poisson-distributed variable $
    \\lambda $ is computed by using the algorithm:

    $ \\begin{array}{l} k \\leftarrow 0 \\\\ p \\leftarrow 1
    \\\\ \\textbf{repeat} \\\\ \\left\\{ \\begin{array}{l}
    k \\leftarrow k+1 \\\\ p \\leftarrow p \\ast U()
    \\end{array} \\right. \\\\ \\textbf{until } p >
    e^{\\lambda} \\\\ \\textbf{return} (k) \\end{array} $

    where $ U() $ provides a uniformly distributed random variable in the
    interval $ [0,1] $.  This algorithm is very inefficient for large
    values of $ \\lambda $, though. Fortunately, the Poisson
    distribution can be accurately approximated by a Gaussian distribution
    of mean and variance $ \\lambda $ when $ \\lambda $ is large
    enough. In this implementation, this value is considered to be 50.
    This leads to the faster algorithm:

    $ \\lambda + \\sqrt{\\lambda} \\times N()$

    where $ N() $ is a normally distributed random variable of mean 0 and
    variance 1.

    Gaetan Lehmann  This code was contributed in the Insight Journal paper
    "Noise Simulation".https://hdl.handle.net/10380/3158 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS3IUS3_Clone)
    GetScale = _swig_new_instance_method(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS3IUS3_GetScale)
    SetScale = _swig_new_instance_method(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS3IUS3_SetScale)
    InputConvertibleToOutputCheck = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS3IUS3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkShotNoiseImageFilterPython.delete_itkShotNoiseImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkShotNoiseImageFilterIUS3IUS3

        Create a new object of the class itkShotNoiseImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShotNoiseImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkShotNoiseImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkShotNoiseImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkShotNoiseImageFilterIUS3IUS3 in _itkShotNoiseImageFilterPython:
_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS3IUS3_swigregister(itkShotNoiseImageFilterIUS3IUS3)
itkShotNoiseImageFilterIUS3IUS3___New_orig__ = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS3IUS3___New_orig__
itkShotNoiseImageFilterIUS3IUS3_cast = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def shot_noise_image_filter(*args, **kwargs):
    """Procedural interface for ShotNoiseImageFilter"""
    import itk
    instance = itk.ShotNoiseImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def shot_noise_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ShotNoiseImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.ShotNoiseImageFilter.values()[0]
    else:
        filter_object = itk.ShotNoiseImageFilter

    shot_noise_image_filter.__doc__ = filter_object.__doc__
    shot_noise_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    shot_noise_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.ShotNoiseImageFilter, itkTemplate.itkTemplate):
        shot_noise_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        shot_noise_image_filter.__doc__ += "\n"
        shot_noise_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        shot_noise_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



