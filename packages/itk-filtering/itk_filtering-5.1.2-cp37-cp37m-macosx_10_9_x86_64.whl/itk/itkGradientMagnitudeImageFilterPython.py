# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageGradientPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkGradientMagnitudeImageFilterPython
else:
    import _itkGradientMagnitudeImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkGradientMagnitudeImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkGradientMagnitudeImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkOffsetPython
import itk.ITKCommonBasePython
import itk.itkImageToImageFilterAPython
import itk.itkImagePython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkRGBPixelPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython

def itkGradientMagnitudeImageFilterID2ID2_New():
    return itkGradientMagnitudeImageFilterID2ID2.New()

class itkGradientMagnitudeImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""


    Computes the gradient magnitude of an image region at each pixel.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    example{Filtering/ImageGradient/ComputeGradientMagnitude,Compute
    Gradient Magnitude Of Grayscale Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID2ID2_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID2ID2_GenerateInputRequestedRegion)
    SetUseImageSpacingOn = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID2ID2_SetUseImageSpacingOn)
    SetUseImageSpacingOff = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID2ID2_SetUseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID2ID2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID2ID2_GetUseImageSpacing)
    InputHasNumericTraitsCheck = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID2ID2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkGradientMagnitudeImageFilterPython.delete_itkGradientMagnitudeImageFilterID2ID2
    cast = _swig_new_static_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkGradientMagnitudeImageFilterID2ID2

        Create a new object of the class itkGradientMagnitudeImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientMagnitudeImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientMagnitudeImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientMagnitudeImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientMagnitudeImageFilterID2ID2 in _itkGradientMagnitudeImageFilterPython:
_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID2ID2_swigregister(itkGradientMagnitudeImageFilterID2ID2)
itkGradientMagnitudeImageFilterID2ID2___New_orig__ = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID2ID2___New_orig__
itkGradientMagnitudeImageFilterID2ID2_cast = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID2ID2_cast


def itkGradientMagnitudeImageFilterID3ID3_New():
    return itkGradientMagnitudeImageFilterID3ID3.New()

class itkGradientMagnitudeImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""


    Computes the gradient magnitude of an image region at each pixel.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    example{Filtering/ImageGradient/ComputeGradientMagnitude,Compute
    Gradient Magnitude Of Grayscale Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID3ID3_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID3ID3_GenerateInputRequestedRegion)
    SetUseImageSpacingOn = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID3ID3_SetUseImageSpacingOn)
    SetUseImageSpacingOff = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID3ID3_SetUseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID3ID3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID3ID3_GetUseImageSpacing)
    InputHasNumericTraitsCheck = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID3ID3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkGradientMagnitudeImageFilterPython.delete_itkGradientMagnitudeImageFilterID3ID3
    cast = _swig_new_static_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkGradientMagnitudeImageFilterID3ID3

        Create a new object of the class itkGradientMagnitudeImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientMagnitudeImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientMagnitudeImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientMagnitudeImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientMagnitudeImageFilterID3ID3 in _itkGradientMagnitudeImageFilterPython:
_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID3ID3_swigregister(itkGradientMagnitudeImageFilterID3ID3)
itkGradientMagnitudeImageFilterID3ID3___New_orig__ = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID3ID3___New_orig__
itkGradientMagnitudeImageFilterID3ID3_cast = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID3ID3_cast


def itkGradientMagnitudeImageFilterIF2IF2_New():
    return itkGradientMagnitudeImageFilterIF2IF2.New()

class itkGradientMagnitudeImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""


    Computes the gradient magnitude of an image region at each pixel.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    example{Filtering/ImageGradient/ComputeGradientMagnitude,Compute
    Gradient Magnitude Of Grayscale Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF2IF2_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF2IF2_GenerateInputRequestedRegion)
    SetUseImageSpacingOn = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF2IF2_SetUseImageSpacingOn)
    SetUseImageSpacingOff = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF2IF2_SetUseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF2IF2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF2IF2_GetUseImageSpacing)
    InputHasNumericTraitsCheck = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF2IF2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkGradientMagnitudeImageFilterPython.delete_itkGradientMagnitudeImageFilterIF2IF2
    cast = _swig_new_static_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkGradientMagnitudeImageFilterIF2IF2

        Create a new object of the class itkGradientMagnitudeImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientMagnitudeImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientMagnitudeImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientMagnitudeImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientMagnitudeImageFilterIF2IF2 in _itkGradientMagnitudeImageFilterPython:
_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF2IF2_swigregister(itkGradientMagnitudeImageFilterIF2IF2)
itkGradientMagnitudeImageFilterIF2IF2___New_orig__ = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF2IF2___New_orig__
itkGradientMagnitudeImageFilterIF2IF2_cast = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF2IF2_cast


def itkGradientMagnitudeImageFilterIF3IF3_New():
    return itkGradientMagnitudeImageFilterIF3IF3.New()

class itkGradientMagnitudeImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""


    Computes the gradient magnitude of an image region at each pixel.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    example{Filtering/ImageGradient/ComputeGradientMagnitude,Compute
    Gradient Magnitude Of Grayscale Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF3IF3_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF3IF3_GenerateInputRequestedRegion)
    SetUseImageSpacingOn = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF3IF3_SetUseImageSpacingOn)
    SetUseImageSpacingOff = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF3IF3_SetUseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF3IF3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF3IF3_GetUseImageSpacing)
    InputHasNumericTraitsCheck = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF3IF3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkGradientMagnitudeImageFilterPython.delete_itkGradientMagnitudeImageFilterIF3IF3
    cast = _swig_new_static_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkGradientMagnitudeImageFilterIF3IF3

        Create a new object of the class itkGradientMagnitudeImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientMagnitudeImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientMagnitudeImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientMagnitudeImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientMagnitudeImageFilterIF3IF3 in _itkGradientMagnitudeImageFilterPython:
_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF3IF3_swigregister(itkGradientMagnitudeImageFilterIF3IF3)
itkGradientMagnitudeImageFilterIF3IF3___New_orig__ = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF3IF3___New_orig__
itkGradientMagnitudeImageFilterIF3IF3_cast = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF3IF3_cast


def itkGradientMagnitudeImageFilterISS2ISS2_New():
    return itkGradientMagnitudeImageFilterISS2ISS2.New()

class itkGradientMagnitudeImageFilterISS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""


    Computes the gradient magnitude of an image region at each pixel.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    example{Filtering/ImageGradient/ComputeGradientMagnitude,Compute
    Gradient Magnitude Of Grayscale Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS2ISS2_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS2ISS2_GenerateInputRequestedRegion)
    SetUseImageSpacingOn = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS2ISS2_SetUseImageSpacingOn)
    SetUseImageSpacingOff = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS2ISS2_SetUseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS2ISS2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS2ISS2_GetUseImageSpacing)
    InputHasNumericTraitsCheck = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS2ISS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkGradientMagnitudeImageFilterPython.delete_itkGradientMagnitudeImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkGradientMagnitudeImageFilterISS2ISS2

        Create a new object of the class itkGradientMagnitudeImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientMagnitudeImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientMagnitudeImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientMagnitudeImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientMagnitudeImageFilterISS2ISS2 in _itkGradientMagnitudeImageFilterPython:
_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS2ISS2_swigregister(itkGradientMagnitudeImageFilterISS2ISS2)
itkGradientMagnitudeImageFilterISS2ISS2___New_orig__ = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS2ISS2___New_orig__
itkGradientMagnitudeImageFilterISS2ISS2_cast = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS2ISS2_cast


def itkGradientMagnitudeImageFilterISS3ISS3_New():
    return itkGradientMagnitudeImageFilterISS3ISS3.New()

class itkGradientMagnitudeImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""


    Computes the gradient magnitude of an image region at each pixel.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    example{Filtering/ImageGradient/ComputeGradientMagnitude,Compute
    Gradient Magnitude Of Grayscale Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS3ISS3_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS3ISS3_GenerateInputRequestedRegion)
    SetUseImageSpacingOn = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS3ISS3_SetUseImageSpacingOn)
    SetUseImageSpacingOff = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS3ISS3_SetUseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS3ISS3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS3ISS3_GetUseImageSpacing)
    InputHasNumericTraitsCheck = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS3ISS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkGradientMagnitudeImageFilterPython.delete_itkGradientMagnitudeImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkGradientMagnitudeImageFilterISS3ISS3

        Create a new object of the class itkGradientMagnitudeImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientMagnitudeImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientMagnitudeImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientMagnitudeImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientMagnitudeImageFilterISS3ISS3 in _itkGradientMagnitudeImageFilterPython:
_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS3ISS3_swigregister(itkGradientMagnitudeImageFilterISS3ISS3)
itkGradientMagnitudeImageFilterISS3ISS3___New_orig__ = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS3ISS3___New_orig__
itkGradientMagnitudeImageFilterISS3ISS3_cast = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS3ISS3_cast


def itkGradientMagnitudeImageFilterIUC2IUC2_New():
    return itkGradientMagnitudeImageFilterIUC2IUC2.New()

class itkGradientMagnitudeImageFilterIUC2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""


    Computes the gradient magnitude of an image region at each pixel.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    example{Filtering/ImageGradient/ComputeGradientMagnitude,Compute
    Gradient Magnitude Of Grayscale Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC2IUC2_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC2IUC2_GenerateInputRequestedRegion)
    SetUseImageSpacingOn = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC2IUC2_SetUseImageSpacingOn)
    SetUseImageSpacingOff = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC2IUC2_SetUseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC2IUC2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC2IUC2_GetUseImageSpacing)
    InputHasNumericTraitsCheck = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC2IUC2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkGradientMagnitudeImageFilterPython.delete_itkGradientMagnitudeImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkGradientMagnitudeImageFilterIUC2IUC2

        Create a new object of the class itkGradientMagnitudeImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientMagnitudeImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientMagnitudeImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientMagnitudeImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientMagnitudeImageFilterIUC2IUC2 in _itkGradientMagnitudeImageFilterPython:
_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC2IUC2_swigregister(itkGradientMagnitudeImageFilterIUC2IUC2)
itkGradientMagnitudeImageFilterIUC2IUC2___New_orig__ = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC2IUC2___New_orig__
itkGradientMagnitudeImageFilterIUC2IUC2_cast = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC2IUC2_cast


def itkGradientMagnitudeImageFilterIUC3IUC3_New():
    return itkGradientMagnitudeImageFilterIUC3IUC3.New()

class itkGradientMagnitudeImageFilterIUC3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""


    Computes the gradient magnitude of an image region at each pixel.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    example{Filtering/ImageGradient/ComputeGradientMagnitude,Compute
    Gradient Magnitude Of Grayscale Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC3IUC3_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC3IUC3_GenerateInputRequestedRegion)
    SetUseImageSpacingOn = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC3IUC3_SetUseImageSpacingOn)
    SetUseImageSpacingOff = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC3IUC3_SetUseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC3IUC3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC3IUC3_GetUseImageSpacing)
    InputHasNumericTraitsCheck = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC3IUC3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkGradientMagnitudeImageFilterPython.delete_itkGradientMagnitudeImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkGradientMagnitudeImageFilterIUC3IUC3

        Create a new object of the class itkGradientMagnitudeImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientMagnitudeImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientMagnitudeImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientMagnitudeImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientMagnitudeImageFilterIUC3IUC3 in _itkGradientMagnitudeImageFilterPython:
_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC3IUC3_swigregister(itkGradientMagnitudeImageFilterIUC3IUC3)
itkGradientMagnitudeImageFilterIUC3IUC3___New_orig__ = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC3IUC3___New_orig__
itkGradientMagnitudeImageFilterIUC3IUC3_cast = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC3IUC3_cast


def itkGradientMagnitudeImageFilterIUS2IUS2_New():
    return itkGradientMagnitudeImageFilterIUS2IUS2.New()

class itkGradientMagnitudeImageFilterIUS2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""


    Computes the gradient magnitude of an image region at each pixel.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    example{Filtering/ImageGradient/ComputeGradientMagnitude,Compute
    Gradient Magnitude Of Grayscale Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS2IUS2_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS2IUS2_GenerateInputRequestedRegion)
    SetUseImageSpacingOn = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS2IUS2_SetUseImageSpacingOn)
    SetUseImageSpacingOff = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS2IUS2_SetUseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS2IUS2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS2IUS2_GetUseImageSpacing)
    InputHasNumericTraitsCheck = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS2IUS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkGradientMagnitudeImageFilterPython.delete_itkGradientMagnitudeImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkGradientMagnitudeImageFilterIUS2IUS2

        Create a new object of the class itkGradientMagnitudeImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientMagnitudeImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientMagnitudeImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientMagnitudeImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientMagnitudeImageFilterIUS2IUS2 in _itkGradientMagnitudeImageFilterPython:
_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS2IUS2_swigregister(itkGradientMagnitudeImageFilterIUS2IUS2)
itkGradientMagnitudeImageFilterIUS2IUS2___New_orig__ = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS2IUS2___New_orig__
itkGradientMagnitudeImageFilterIUS2IUS2_cast = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS2IUS2_cast


def itkGradientMagnitudeImageFilterIUS3IUS3_New():
    return itkGradientMagnitudeImageFilterIUS3IUS3.New()

class itkGradientMagnitudeImageFilterIUS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""


    Computes the gradient magnitude of an image region at each pixel.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    example{Filtering/ImageGradient/ComputeGradientMagnitude,Compute
    Gradient Magnitude Of Grayscale Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS3IUS3_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS3IUS3_GenerateInputRequestedRegion)
    SetUseImageSpacingOn = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS3IUS3_SetUseImageSpacingOn)
    SetUseImageSpacingOff = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS3IUS3_SetUseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS3IUS3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS3IUS3_GetUseImageSpacing)
    InputHasNumericTraitsCheck = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS3IUS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkGradientMagnitudeImageFilterPython.delete_itkGradientMagnitudeImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkGradientMagnitudeImageFilterIUS3IUS3

        Create a new object of the class itkGradientMagnitudeImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientMagnitudeImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientMagnitudeImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientMagnitudeImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientMagnitudeImageFilterIUS3IUS3 in _itkGradientMagnitudeImageFilterPython:
_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS3IUS3_swigregister(itkGradientMagnitudeImageFilterIUS3IUS3)
itkGradientMagnitudeImageFilterIUS3IUS3___New_orig__ = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS3IUS3___New_orig__
itkGradientMagnitudeImageFilterIUS3IUS3_cast = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def gradient_magnitude_image_filter(*args, **kwargs):
    """Procedural interface for GradientMagnitudeImageFilter"""
    import itk
    instance = itk.GradientMagnitudeImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def gradient_magnitude_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.GradientMagnitudeImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.GradientMagnitudeImageFilter.values()[0]
    else:
        filter_object = itk.GradientMagnitudeImageFilter

    gradient_magnitude_image_filter.__doc__ = filter_object.__doc__
    gradient_magnitude_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    gradient_magnitude_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.GradientMagnitudeImageFilter, itkTemplate.itkTemplate):
        gradient_magnitude_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        gradient_magnitude_image_filter.__doc__ += "\n"
        gradient_magnitude_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        gradient_magnitude_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



