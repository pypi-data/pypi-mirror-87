# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKThresholdingPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkIntermodesThresholdImageFilterPython
else:
    import _itkIntermodesThresholdImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkIntermodesThresholdImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkIntermodesThresholdImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkHistogramThresholdImageFilterPython
import itk.itkImageToImageFilterAPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkFixedArrayPython
import itk.itkSizePython
import itk.itkCovariantVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkRGBPixelPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToHistogramFilterPython
import itk.itkArrayPython
import itk.itkImageSinkPython
import itk.itkHistogramPython
import itk.itkSamplePython
import itk.itkSimpleDataObjectDecoratorPython
import itk.itkHistogramThresholdCalculatorPython

def itkIntermodesThresholdImageFilterID2ISS2_New():
    return itkIntermodesThresholdImageFilterID2ISS2.New()

class itkIntermodesThresholdImageFilterID2ISS2(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterID2ISS2):
    r"""


    Threshold an image using the Intermodes Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the IntermodesThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2ISS2_Clone)
    SetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2ISS2_SetMaximumSmoothingIterations)
    GetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2ISS2_GetMaximumSmoothingIterations)
    SetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2ISS2_SetUseInterMode)
    GetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2ISS2_GetUseInterMode)
    UseInterModeOn = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2ISS2_UseInterModeOn)
    UseInterModeOff = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2ISS2_UseInterModeOff)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterID2ISS2
    cast = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterID2ISS2

        Create a new object of the class itkIntermodesThresholdImageFilterID2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterID2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterID2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterID2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterID2ISS2 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2ISS2_swigregister(itkIntermodesThresholdImageFilterID2ISS2)
itkIntermodesThresholdImageFilterID2ISS2___New_orig__ = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2ISS2___New_orig__
itkIntermodesThresholdImageFilterID2ISS2_cast = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2ISS2_cast


def itkIntermodesThresholdImageFilterID2IUC2_New():
    return itkIntermodesThresholdImageFilterID2IUC2.New()

class itkIntermodesThresholdImageFilterID2IUC2(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterID2IUC2):
    r"""


    Threshold an image using the Intermodes Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the IntermodesThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2IUC2_Clone)
    SetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2IUC2_SetMaximumSmoothingIterations)
    GetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2IUC2_GetMaximumSmoothingIterations)
    SetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2IUC2_SetUseInterMode)
    GetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2IUC2_GetUseInterMode)
    UseInterModeOn = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2IUC2_UseInterModeOn)
    UseInterModeOff = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2IUC2_UseInterModeOff)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterID2IUC2
    cast = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterID2IUC2

        Create a new object of the class itkIntermodesThresholdImageFilterID2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterID2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterID2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterID2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterID2IUC2 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2IUC2_swigregister(itkIntermodesThresholdImageFilterID2IUC2)
itkIntermodesThresholdImageFilterID2IUC2___New_orig__ = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2IUC2___New_orig__
itkIntermodesThresholdImageFilterID2IUC2_cast = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2IUC2_cast


def itkIntermodesThresholdImageFilterID2IUS2_New():
    return itkIntermodesThresholdImageFilterID2IUS2.New()

class itkIntermodesThresholdImageFilterID2IUS2(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterID2IUS2):
    r"""


    Threshold an image using the Intermodes Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the IntermodesThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2IUS2_Clone)
    SetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2IUS2_SetMaximumSmoothingIterations)
    GetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2IUS2_GetMaximumSmoothingIterations)
    SetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2IUS2_SetUseInterMode)
    GetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2IUS2_GetUseInterMode)
    UseInterModeOn = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2IUS2_UseInterModeOn)
    UseInterModeOff = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2IUS2_UseInterModeOff)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterID2IUS2
    cast = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterID2IUS2

        Create a new object of the class itkIntermodesThresholdImageFilterID2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterID2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterID2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterID2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterID2IUS2 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2IUS2_swigregister(itkIntermodesThresholdImageFilterID2IUS2)
itkIntermodesThresholdImageFilterID2IUS2___New_orig__ = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2IUS2___New_orig__
itkIntermodesThresholdImageFilterID2IUS2_cast = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2IUS2_cast


def itkIntermodesThresholdImageFilterID3ISS3_New():
    return itkIntermodesThresholdImageFilterID3ISS3.New()

class itkIntermodesThresholdImageFilterID3ISS3(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterID3ISS3):
    r"""


    Threshold an image using the Intermodes Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the IntermodesThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3ISS3_Clone)
    SetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3ISS3_SetMaximumSmoothingIterations)
    GetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3ISS3_GetMaximumSmoothingIterations)
    SetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3ISS3_SetUseInterMode)
    GetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3ISS3_GetUseInterMode)
    UseInterModeOn = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3ISS3_UseInterModeOn)
    UseInterModeOff = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3ISS3_UseInterModeOff)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterID3ISS3
    cast = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterID3ISS3

        Create a new object of the class itkIntermodesThresholdImageFilterID3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterID3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterID3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterID3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterID3ISS3 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3ISS3_swigregister(itkIntermodesThresholdImageFilterID3ISS3)
itkIntermodesThresholdImageFilterID3ISS3___New_orig__ = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3ISS3___New_orig__
itkIntermodesThresholdImageFilterID3ISS3_cast = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3ISS3_cast


def itkIntermodesThresholdImageFilterID3IUC3_New():
    return itkIntermodesThresholdImageFilterID3IUC3.New()

class itkIntermodesThresholdImageFilterID3IUC3(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterID3IUC3):
    r"""


    Threshold an image using the Intermodes Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the IntermodesThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3IUC3_Clone)
    SetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3IUC3_SetMaximumSmoothingIterations)
    GetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3IUC3_GetMaximumSmoothingIterations)
    SetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3IUC3_SetUseInterMode)
    GetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3IUC3_GetUseInterMode)
    UseInterModeOn = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3IUC3_UseInterModeOn)
    UseInterModeOff = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3IUC3_UseInterModeOff)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterID3IUC3
    cast = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterID3IUC3

        Create a new object of the class itkIntermodesThresholdImageFilterID3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterID3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterID3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterID3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterID3IUC3 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3IUC3_swigregister(itkIntermodesThresholdImageFilterID3IUC3)
itkIntermodesThresholdImageFilterID3IUC3___New_orig__ = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3IUC3___New_orig__
itkIntermodesThresholdImageFilterID3IUC3_cast = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3IUC3_cast


def itkIntermodesThresholdImageFilterID3IUS3_New():
    return itkIntermodesThresholdImageFilterID3IUS3.New()

class itkIntermodesThresholdImageFilterID3IUS3(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterID3IUS3):
    r"""


    Threshold an image using the Intermodes Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the IntermodesThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3IUS3_Clone)
    SetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3IUS3_SetMaximumSmoothingIterations)
    GetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3IUS3_GetMaximumSmoothingIterations)
    SetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3IUS3_SetUseInterMode)
    GetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3IUS3_GetUseInterMode)
    UseInterModeOn = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3IUS3_UseInterModeOn)
    UseInterModeOff = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3IUS3_UseInterModeOff)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterID3IUS3
    cast = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterID3IUS3

        Create a new object of the class itkIntermodesThresholdImageFilterID3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterID3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterID3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterID3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterID3IUS3 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3IUS3_swigregister(itkIntermodesThresholdImageFilterID3IUS3)
itkIntermodesThresholdImageFilterID3IUS3___New_orig__ = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3IUS3___New_orig__
itkIntermodesThresholdImageFilterID3IUS3_cast = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3IUS3_cast


def itkIntermodesThresholdImageFilterIF2ISS2_New():
    return itkIntermodesThresholdImageFilterIF2ISS2.New()

class itkIntermodesThresholdImageFilterIF2ISS2(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIF2ISS2):
    r"""


    Threshold an image using the Intermodes Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the IntermodesThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2ISS2_Clone)
    SetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2ISS2_SetMaximumSmoothingIterations)
    GetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2ISS2_GetMaximumSmoothingIterations)
    SetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2ISS2_SetUseInterMode)
    GetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2ISS2_GetUseInterMode)
    UseInterModeOn = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2ISS2_UseInterModeOn)
    UseInterModeOff = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2ISS2_UseInterModeOff)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterIF2ISS2
    cast = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterIF2ISS2

        Create a new object of the class itkIntermodesThresholdImageFilterIF2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterIF2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterIF2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterIF2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterIF2ISS2 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2ISS2_swigregister(itkIntermodesThresholdImageFilterIF2ISS2)
itkIntermodesThresholdImageFilterIF2ISS2___New_orig__ = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2ISS2___New_orig__
itkIntermodesThresholdImageFilterIF2ISS2_cast = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2ISS2_cast


def itkIntermodesThresholdImageFilterIF2IUC2_New():
    return itkIntermodesThresholdImageFilterIF2IUC2.New()

class itkIntermodesThresholdImageFilterIF2IUC2(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIF2IUC2):
    r"""


    Threshold an image using the Intermodes Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the IntermodesThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUC2_Clone)
    SetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUC2_SetMaximumSmoothingIterations)
    GetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUC2_GetMaximumSmoothingIterations)
    SetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUC2_SetUseInterMode)
    GetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUC2_GetUseInterMode)
    UseInterModeOn = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUC2_UseInterModeOn)
    UseInterModeOff = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUC2_UseInterModeOff)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterIF2IUC2
    cast = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterIF2IUC2

        Create a new object of the class itkIntermodesThresholdImageFilterIF2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterIF2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterIF2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterIF2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterIF2IUC2 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUC2_swigregister(itkIntermodesThresholdImageFilterIF2IUC2)
itkIntermodesThresholdImageFilterIF2IUC2___New_orig__ = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUC2___New_orig__
itkIntermodesThresholdImageFilterIF2IUC2_cast = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUC2_cast


def itkIntermodesThresholdImageFilterIF2IUS2_New():
    return itkIntermodesThresholdImageFilterIF2IUS2.New()

class itkIntermodesThresholdImageFilterIF2IUS2(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIF2IUS2):
    r"""


    Threshold an image using the Intermodes Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the IntermodesThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUS2_Clone)
    SetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUS2_SetMaximumSmoothingIterations)
    GetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUS2_GetMaximumSmoothingIterations)
    SetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUS2_SetUseInterMode)
    GetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUS2_GetUseInterMode)
    UseInterModeOn = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUS2_UseInterModeOn)
    UseInterModeOff = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUS2_UseInterModeOff)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterIF2IUS2
    cast = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterIF2IUS2

        Create a new object of the class itkIntermodesThresholdImageFilterIF2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterIF2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterIF2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterIF2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterIF2IUS2 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUS2_swigregister(itkIntermodesThresholdImageFilterIF2IUS2)
itkIntermodesThresholdImageFilterIF2IUS2___New_orig__ = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUS2___New_orig__
itkIntermodesThresholdImageFilterIF2IUS2_cast = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUS2_cast


def itkIntermodesThresholdImageFilterIF3ISS3_New():
    return itkIntermodesThresholdImageFilterIF3ISS3.New()

class itkIntermodesThresholdImageFilterIF3ISS3(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIF3ISS3):
    r"""


    Threshold an image using the Intermodes Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the IntermodesThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3ISS3_Clone)
    SetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3ISS3_SetMaximumSmoothingIterations)
    GetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3ISS3_GetMaximumSmoothingIterations)
    SetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3ISS3_SetUseInterMode)
    GetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3ISS3_GetUseInterMode)
    UseInterModeOn = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3ISS3_UseInterModeOn)
    UseInterModeOff = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3ISS3_UseInterModeOff)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterIF3ISS3
    cast = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterIF3ISS3

        Create a new object of the class itkIntermodesThresholdImageFilterIF3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterIF3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterIF3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterIF3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterIF3ISS3 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3ISS3_swigregister(itkIntermodesThresholdImageFilterIF3ISS3)
itkIntermodesThresholdImageFilterIF3ISS3___New_orig__ = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3ISS3___New_orig__
itkIntermodesThresholdImageFilterIF3ISS3_cast = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3ISS3_cast


def itkIntermodesThresholdImageFilterIF3IUC3_New():
    return itkIntermodesThresholdImageFilterIF3IUC3.New()

class itkIntermodesThresholdImageFilterIF3IUC3(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIF3IUC3):
    r"""


    Threshold an image using the Intermodes Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the IntermodesThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUC3_Clone)
    SetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUC3_SetMaximumSmoothingIterations)
    GetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUC3_GetMaximumSmoothingIterations)
    SetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUC3_SetUseInterMode)
    GetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUC3_GetUseInterMode)
    UseInterModeOn = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUC3_UseInterModeOn)
    UseInterModeOff = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUC3_UseInterModeOff)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterIF3IUC3
    cast = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterIF3IUC3

        Create a new object of the class itkIntermodesThresholdImageFilterIF3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterIF3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterIF3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterIF3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterIF3IUC3 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUC3_swigregister(itkIntermodesThresholdImageFilterIF3IUC3)
itkIntermodesThresholdImageFilterIF3IUC3___New_orig__ = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUC3___New_orig__
itkIntermodesThresholdImageFilterIF3IUC3_cast = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUC3_cast


def itkIntermodesThresholdImageFilterIF3IUS3_New():
    return itkIntermodesThresholdImageFilterIF3IUS3.New()

class itkIntermodesThresholdImageFilterIF3IUS3(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIF3IUS3):
    r"""


    Threshold an image using the Intermodes Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the IntermodesThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUS3_Clone)
    SetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUS3_SetMaximumSmoothingIterations)
    GetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUS3_GetMaximumSmoothingIterations)
    SetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUS3_SetUseInterMode)
    GetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUS3_GetUseInterMode)
    UseInterModeOn = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUS3_UseInterModeOn)
    UseInterModeOff = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUS3_UseInterModeOff)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterIF3IUS3
    cast = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterIF3IUS3

        Create a new object of the class itkIntermodesThresholdImageFilterIF3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterIF3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterIF3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterIF3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterIF3IUS3 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUS3_swigregister(itkIntermodesThresholdImageFilterIF3IUS3)
itkIntermodesThresholdImageFilterIF3IUS3___New_orig__ = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUS3___New_orig__
itkIntermodesThresholdImageFilterIF3IUS3_cast = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUS3_cast


def itkIntermodesThresholdImageFilterISS2ISS2_New():
    return itkIntermodesThresholdImageFilterISS2ISS2.New()

class itkIntermodesThresholdImageFilterISS2ISS2(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterISS2ISS2):
    r"""


    Threshold an image using the Intermodes Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the IntermodesThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2ISS2_Clone)
    SetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2ISS2_SetMaximumSmoothingIterations)
    GetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2ISS2_GetMaximumSmoothingIterations)
    SetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2ISS2_SetUseInterMode)
    GetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2ISS2_GetUseInterMode)
    UseInterModeOn = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2ISS2_UseInterModeOn)
    UseInterModeOff = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2ISS2_UseInterModeOff)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterISS2ISS2

        Create a new object of the class itkIntermodesThresholdImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterISS2ISS2 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2ISS2_swigregister(itkIntermodesThresholdImageFilterISS2ISS2)
itkIntermodesThresholdImageFilterISS2ISS2___New_orig__ = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2ISS2___New_orig__
itkIntermodesThresholdImageFilterISS2ISS2_cast = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2ISS2_cast


def itkIntermodesThresholdImageFilterISS2IUC2_New():
    return itkIntermodesThresholdImageFilterISS2IUC2.New()

class itkIntermodesThresholdImageFilterISS2IUC2(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterISS2IUC2):
    r"""


    Threshold an image using the Intermodes Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the IntermodesThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUC2_Clone)
    SetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUC2_SetMaximumSmoothingIterations)
    GetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUC2_GetMaximumSmoothingIterations)
    SetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUC2_SetUseInterMode)
    GetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUC2_GetUseInterMode)
    UseInterModeOn = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUC2_UseInterModeOn)
    UseInterModeOff = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUC2_UseInterModeOff)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterISS2IUC2
    cast = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterISS2IUC2

        Create a new object of the class itkIntermodesThresholdImageFilterISS2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterISS2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterISS2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterISS2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterISS2IUC2 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUC2_swigregister(itkIntermodesThresholdImageFilterISS2IUC2)
itkIntermodesThresholdImageFilterISS2IUC2___New_orig__ = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUC2___New_orig__
itkIntermodesThresholdImageFilterISS2IUC2_cast = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUC2_cast


def itkIntermodesThresholdImageFilterISS2IUS2_New():
    return itkIntermodesThresholdImageFilterISS2IUS2.New()

class itkIntermodesThresholdImageFilterISS2IUS2(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterISS2IUS2):
    r"""


    Threshold an image using the Intermodes Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the IntermodesThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUS2_Clone)
    SetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUS2_SetMaximumSmoothingIterations)
    GetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUS2_GetMaximumSmoothingIterations)
    SetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUS2_SetUseInterMode)
    GetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUS2_GetUseInterMode)
    UseInterModeOn = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUS2_UseInterModeOn)
    UseInterModeOff = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUS2_UseInterModeOff)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterISS2IUS2
    cast = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterISS2IUS2

        Create a new object of the class itkIntermodesThresholdImageFilterISS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterISS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterISS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterISS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterISS2IUS2 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUS2_swigregister(itkIntermodesThresholdImageFilterISS2IUS2)
itkIntermodesThresholdImageFilterISS2IUS2___New_orig__ = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUS2___New_orig__
itkIntermodesThresholdImageFilterISS2IUS2_cast = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUS2_cast


def itkIntermodesThresholdImageFilterISS3ISS3_New():
    return itkIntermodesThresholdImageFilterISS3ISS3.New()

class itkIntermodesThresholdImageFilterISS3ISS3(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterISS3ISS3):
    r"""


    Threshold an image using the Intermodes Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the IntermodesThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3ISS3_Clone)
    SetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3ISS3_SetMaximumSmoothingIterations)
    GetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3ISS3_GetMaximumSmoothingIterations)
    SetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3ISS3_SetUseInterMode)
    GetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3ISS3_GetUseInterMode)
    UseInterModeOn = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3ISS3_UseInterModeOn)
    UseInterModeOff = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3ISS3_UseInterModeOff)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterISS3ISS3

        Create a new object of the class itkIntermodesThresholdImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterISS3ISS3 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3ISS3_swigregister(itkIntermodesThresholdImageFilterISS3ISS3)
itkIntermodesThresholdImageFilterISS3ISS3___New_orig__ = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3ISS3___New_orig__
itkIntermodesThresholdImageFilterISS3ISS3_cast = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3ISS3_cast


def itkIntermodesThresholdImageFilterISS3IUC3_New():
    return itkIntermodesThresholdImageFilterISS3IUC3.New()

class itkIntermodesThresholdImageFilterISS3IUC3(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterISS3IUC3):
    r"""


    Threshold an image using the Intermodes Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the IntermodesThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUC3_Clone)
    SetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUC3_SetMaximumSmoothingIterations)
    GetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUC3_GetMaximumSmoothingIterations)
    SetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUC3_SetUseInterMode)
    GetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUC3_GetUseInterMode)
    UseInterModeOn = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUC3_UseInterModeOn)
    UseInterModeOff = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUC3_UseInterModeOff)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterISS3IUC3
    cast = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterISS3IUC3

        Create a new object of the class itkIntermodesThresholdImageFilterISS3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterISS3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterISS3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterISS3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterISS3IUC3 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUC3_swigregister(itkIntermodesThresholdImageFilterISS3IUC3)
itkIntermodesThresholdImageFilterISS3IUC3___New_orig__ = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUC3___New_orig__
itkIntermodesThresholdImageFilterISS3IUC3_cast = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUC3_cast


def itkIntermodesThresholdImageFilterISS3IUS3_New():
    return itkIntermodesThresholdImageFilterISS3IUS3.New()

class itkIntermodesThresholdImageFilterISS3IUS3(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterISS3IUS3):
    r"""


    Threshold an image using the Intermodes Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the IntermodesThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUS3_Clone)
    SetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUS3_SetMaximumSmoothingIterations)
    GetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUS3_GetMaximumSmoothingIterations)
    SetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUS3_SetUseInterMode)
    GetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUS3_GetUseInterMode)
    UseInterModeOn = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUS3_UseInterModeOn)
    UseInterModeOff = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUS3_UseInterModeOff)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterISS3IUS3
    cast = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterISS3IUS3

        Create a new object of the class itkIntermodesThresholdImageFilterISS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterISS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterISS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterISS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterISS3IUS3 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUS3_swigregister(itkIntermodesThresholdImageFilterISS3IUS3)
itkIntermodesThresholdImageFilterISS3IUS3___New_orig__ = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUS3___New_orig__
itkIntermodesThresholdImageFilterISS3IUS3_cast = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUS3_cast


def itkIntermodesThresholdImageFilterIUC2ISS2_New():
    return itkIntermodesThresholdImageFilterIUC2ISS2.New()

class itkIntermodesThresholdImageFilterIUC2ISS2(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIUC2ISS2):
    r"""


    Threshold an image using the Intermodes Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the IntermodesThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2ISS2_Clone)
    SetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2ISS2_SetMaximumSmoothingIterations)
    GetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2ISS2_GetMaximumSmoothingIterations)
    SetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2ISS2_SetUseInterMode)
    GetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2ISS2_GetUseInterMode)
    UseInterModeOn = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2ISS2_UseInterModeOn)
    UseInterModeOff = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2ISS2_UseInterModeOff)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterIUC2ISS2
    cast = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterIUC2ISS2

        Create a new object of the class itkIntermodesThresholdImageFilterIUC2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterIUC2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterIUC2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterIUC2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterIUC2ISS2 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2ISS2_swigregister(itkIntermodesThresholdImageFilterIUC2ISS2)
itkIntermodesThresholdImageFilterIUC2ISS2___New_orig__ = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2ISS2___New_orig__
itkIntermodesThresholdImageFilterIUC2ISS2_cast = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2ISS2_cast


def itkIntermodesThresholdImageFilterIUC2IUC2_New():
    return itkIntermodesThresholdImageFilterIUC2IUC2.New()

class itkIntermodesThresholdImageFilterIUC2IUC2(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIUC2IUC2):
    r"""


    Threshold an image using the Intermodes Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the IntermodesThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUC2_Clone)
    SetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUC2_SetMaximumSmoothingIterations)
    GetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUC2_GetMaximumSmoothingIterations)
    SetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUC2_SetUseInterMode)
    GetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUC2_GetUseInterMode)
    UseInterModeOn = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUC2_UseInterModeOn)
    UseInterModeOff = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUC2_UseInterModeOff)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterIUC2IUC2

        Create a new object of the class itkIntermodesThresholdImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterIUC2IUC2 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUC2_swigregister(itkIntermodesThresholdImageFilterIUC2IUC2)
itkIntermodesThresholdImageFilterIUC2IUC2___New_orig__ = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUC2___New_orig__
itkIntermodesThresholdImageFilterIUC2IUC2_cast = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUC2_cast


def itkIntermodesThresholdImageFilterIUC2IUS2_New():
    return itkIntermodesThresholdImageFilterIUC2IUS2.New()

class itkIntermodesThresholdImageFilterIUC2IUS2(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIUC2IUS2):
    r"""


    Threshold an image using the Intermodes Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the IntermodesThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUS2_Clone)
    SetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUS2_SetMaximumSmoothingIterations)
    GetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUS2_GetMaximumSmoothingIterations)
    SetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUS2_SetUseInterMode)
    GetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUS2_GetUseInterMode)
    UseInterModeOn = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUS2_UseInterModeOn)
    UseInterModeOff = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUS2_UseInterModeOff)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterIUC2IUS2
    cast = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterIUC2IUS2

        Create a new object of the class itkIntermodesThresholdImageFilterIUC2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterIUC2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterIUC2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterIUC2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterIUC2IUS2 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUS2_swigregister(itkIntermodesThresholdImageFilterIUC2IUS2)
itkIntermodesThresholdImageFilterIUC2IUS2___New_orig__ = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUS2___New_orig__
itkIntermodesThresholdImageFilterIUC2IUS2_cast = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUS2_cast


def itkIntermodesThresholdImageFilterIUC3ISS3_New():
    return itkIntermodesThresholdImageFilterIUC3ISS3.New()

class itkIntermodesThresholdImageFilterIUC3ISS3(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIUC3ISS3):
    r"""


    Threshold an image using the Intermodes Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the IntermodesThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3ISS3_Clone)
    SetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3ISS3_SetMaximumSmoothingIterations)
    GetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3ISS3_GetMaximumSmoothingIterations)
    SetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3ISS3_SetUseInterMode)
    GetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3ISS3_GetUseInterMode)
    UseInterModeOn = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3ISS3_UseInterModeOn)
    UseInterModeOff = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3ISS3_UseInterModeOff)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterIUC3ISS3
    cast = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterIUC3ISS3

        Create a new object of the class itkIntermodesThresholdImageFilterIUC3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterIUC3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterIUC3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterIUC3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterIUC3ISS3 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3ISS3_swigregister(itkIntermodesThresholdImageFilterIUC3ISS3)
itkIntermodesThresholdImageFilterIUC3ISS3___New_orig__ = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3ISS3___New_orig__
itkIntermodesThresholdImageFilterIUC3ISS3_cast = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3ISS3_cast


def itkIntermodesThresholdImageFilterIUC3IUC3_New():
    return itkIntermodesThresholdImageFilterIUC3IUC3.New()

class itkIntermodesThresholdImageFilterIUC3IUC3(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIUC3IUC3):
    r"""


    Threshold an image using the Intermodes Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the IntermodesThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUC3_Clone)
    SetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUC3_SetMaximumSmoothingIterations)
    GetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUC3_GetMaximumSmoothingIterations)
    SetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUC3_SetUseInterMode)
    GetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUC3_GetUseInterMode)
    UseInterModeOn = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUC3_UseInterModeOn)
    UseInterModeOff = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUC3_UseInterModeOff)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterIUC3IUC3

        Create a new object of the class itkIntermodesThresholdImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterIUC3IUC3 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUC3_swigregister(itkIntermodesThresholdImageFilterIUC3IUC3)
itkIntermodesThresholdImageFilterIUC3IUC3___New_orig__ = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUC3___New_orig__
itkIntermodesThresholdImageFilterIUC3IUC3_cast = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUC3_cast


def itkIntermodesThresholdImageFilterIUC3IUS3_New():
    return itkIntermodesThresholdImageFilterIUC3IUS3.New()

class itkIntermodesThresholdImageFilterIUC3IUS3(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIUC3IUS3):
    r"""


    Threshold an image using the Intermodes Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the IntermodesThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUS3_Clone)
    SetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUS3_SetMaximumSmoothingIterations)
    GetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUS3_GetMaximumSmoothingIterations)
    SetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUS3_SetUseInterMode)
    GetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUS3_GetUseInterMode)
    UseInterModeOn = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUS3_UseInterModeOn)
    UseInterModeOff = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUS3_UseInterModeOff)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterIUC3IUS3
    cast = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterIUC3IUS3

        Create a new object of the class itkIntermodesThresholdImageFilterIUC3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterIUC3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterIUC3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterIUC3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterIUC3IUS3 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUS3_swigregister(itkIntermodesThresholdImageFilterIUC3IUS3)
itkIntermodesThresholdImageFilterIUC3IUS3___New_orig__ = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUS3___New_orig__
itkIntermodesThresholdImageFilterIUC3IUS3_cast = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUS3_cast


def itkIntermodesThresholdImageFilterIUS2ISS2_New():
    return itkIntermodesThresholdImageFilterIUS2ISS2.New()

class itkIntermodesThresholdImageFilterIUS2ISS2(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIUS2ISS2):
    r"""


    Threshold an image using the Intermodes Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the IntermodesThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2ISS2_Clone)
    SetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2ISS2_SetMaximumSmoothingIterations)
    GetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2ISS2_GetMaximumSmoothingIterations)
    SetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2ISS2_SetUseInterMode)
    GetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2ISS2_GetUseInterMode)
    UseInterModeOn = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2ISS2_UseInterModeOn)
    UseInterModeOff = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2ISS2_UseInterModeOff)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterIUS2ISS2
    cast = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterIUS2ISS2

        Create a new object of the class itkIntermodesThresholdImageFilterIUS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterIUS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterIUS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterIUS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterIUS2ISS2 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2ISS2_swigregister(itkIntermodesThresholdImageFilterIUS2ISS2)
itkIntermodesThresholdImageFilterIUS2ISS2___New_orig__ = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2ISS2___New_orig__
itkIntermodesThresholdImageFilterIUS2ISS2_cast = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2ISS2_cast


def itkIntermodesThresholdImageFilterIUS2IUC2_New():
    return itkIntermodesThresholdImageFilterIUS2IUC2.New()

class itkIntermodesThresholdImageFilterIUS2IUC2(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIUS2IUC2):
    r"""


    Threshold an image using the Intermodes Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the IntermodesThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2IUC2_Clone)
    SetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2IUC2_SetMaximumSmoothingIterations)
    GetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2IUC2_GetMaximumSmoothingIterations)
    SetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2IUC2_SetUseInterMode)
    GetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2IUC2_GetUseInterMode)
    UseInterModeOn = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2IUC2_UseInterModeOn)
    UseInterModeOff = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2IUC2_UseInterModeOff)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterIUS2IUC2
    cast = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterIUS2IUC2

        Create a new object of the class itkIntermodesThresholdImageFilterIUS2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterIUS2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterIUS2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterIUS2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterIUS2IUC2 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2IUC2_swigregister(itkIntermodesThresholdImageFilterIUS2IUC2)
itkIntermodesThresholdImageFilterIUS2IUC2___New_orig__ = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2IUC2___New_orig__
itkIntermodesThresholdImageFilterIUS2IUC2_cast = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2IUC2_cast


def itkIntermodesThresholdImageFilterIUS2IUS2_New():
    return itkIntermodesThresholdImageFilterIUS2IUS2.New()

class itkIntermodesThresholdImageFilterIUS2IUS2(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIUS2IUS2):
    r"""


    Threshold an image using the Intermodes Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the IntermodesThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2IUS2_Clone)
    SetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2IUS2_SetMaximumSmoothingIterations)
    GetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2IUS2_GetMaximumSmoothingIterations)
    SetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2IUS2_SetUseInterMode)
    GetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2IUS2_GetUseInterMode)
    UseInterModeOn = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2IUS2_UseInterModeOn)
    UseInterModeOff = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2IUS2_UseInterModeOff)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterIUS2IUS2

        Create a new object of the class itkIntermodesThresholdImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterIUS2IUS2 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2IUS2_swigregister(itkIntermodesThresholdImageFilterIUS2IUS2)
itkIntermodesThresholdImageFilterIUS2IUS2___New_orig__ = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2IUS2___New_orig__
itkIntermodesThresholdImageFilterIUS2IUS2_cast = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2IUS2_cast


def itkIntermodesThresholdImageFilterIUS3ISS3_New():
    return itkIntermodesThresholdImageFilterIUS3ISS3.New()

class itkIntermodesThresholdImageFilterIUS3ISS3(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIUS3ISS3):
    r"""


    Threshold an image using the Intermodes Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the IntermodesThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3ISS3_Clone)
    SetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3ISS3_SetMaximumSmoothingIterations)
    GetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3ISS3_GetMaximumSmoothingIterations)
    SetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3ISS3_SetUseInterMode)
    GetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3ISS3_GetUseInterMode)
    UseInterModeOn = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3ISS3_UseInterModeOn)
    UseInterModeOff = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3ISS3_UseInterModeOff)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterIUS3ISS3
    cast = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterIUS3ISS3

        Create a new object of the class itkIntermodesThresholdImageFilterIUS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterIUS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterIUS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterIUS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterIUS3ISS3 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3ISS3_swigregister(itkIntermodesThresholdImageFilterIUS3ISS3)
itkIntermodesThresholdImageFilterIUS3ISS3___New_orig__ = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3ISS3___New_orig__
itkIntermodesThresholdImageFilterIUS3ISS3_cast = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3ISS3_cast


def itkIntermodesThresholdImageFilterIUS3IUC3_New():
    return itkIntermodesThresholdImageFilterIUS3IUC3.New()

class itkIntermodesThresholdImageFilterIUS3IUC3(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIUS3IUC3):
    r"""


    Threshold an image using the Intermodes Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the IntermodesThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3IUC3_Clone)
    SetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3IUC3_SetMaximumSmoothingIterations)
    GetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3IUC3_GetMaximumSmoothingIterations)
    SetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3IUC3_SetUseInterMode)
    GetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3IUC3_GetUseInterMode)
    UseInterModeOn = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3IUC3_UseInterModeOn)
    UseInterModeOff = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3IUC3_UseInterModeOff)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterIUS3IUC3
    cast = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterIUS3IUC3

        Create a new object of the class itkIntermodesThresholdImageFilterIUS3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterIUS3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterIUS3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterIUS3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterIUS3IUC3 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3IUC3_swigregister(itkIntermodesThresholdImageFilterIUS3IUC3)
itkIntermodesThresholdImageFilterIUS3IUC3___New_orig__ = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3IUC3___New_orig__
itkIntermodesThresholdImageFilterIUS3IUC3_cast = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3IUC3_cast


def itkIntermodesThresholdImageFilterIUS3IUS3_New():
    return itkIntermodesThresholdImageFilterIUS3IUS3.New()

class itkIntermodesThresholdImageFilterIUS3IUS3(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIUS3IUS3):
    r"""


    Threshold an image using the Intermodes Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the IntermodesThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3IUS3_Clone)
    SetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3IUS3_SetMaximumSmoothingIterations)
    GetMaximumSmoothingIterations = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3IUS3_GetMaximumSmoothingIterations)
    SetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3IUS3_SetUseInterMode)
    GetUseInterMode = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3IUS3_GetUseInterMode)
    UseInterModeOn = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3IUS3_UseInterModeOn)
    UseInterModeOff = _swig_new_instance_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3IUS3_UseInterModeOff)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterIUS3IUS3

        Create a new object of the class itkIntermodesThresholdImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterIUS3IUS3 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3IUS3_swigregister(itkIntermodesThresholdImageFilterIUS3IUS3)
itkIntermodesThresholdImageFilterIUS3IUS3___New_orig__ = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3IUS3___New_orig__
itkIntermodesThresholdImageFilterIUS3IUS3_cast = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def intermodes_threshold_image_filter(*args, **kwargs):
    """Procedural interface for IntermodesThresholdImageFilter"""
    import itk
    instance = itk.IntermodesThresholdImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def intermodes_threshold_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.IntermodesThresholdImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.IntermodesThresholdImageFilter.values()[0]
    else:
        filter_object = itk.IntermodesThresholdImageFilter

    intermodes_threshold_image_filter.__doc__ = filter_object.__doc__
    intermodes_threshold_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    intermodes_threshold_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.IntermodesThresholdImageFilter, itkTemplate.itkTemplate):
        intermodes_threshold_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        intermodes_threshold_image_filter.__doc__ += "\n"
        intermodes_threshold_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        intermodes_threshold_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



