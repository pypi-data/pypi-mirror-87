{"version":3,"sources":["store/actions.ts","utils/requests.ts","components/DataNodeActions.tsx","components/SourceList.tsx","components/PythonEditor.tsx","components/SourceConfigEditor.tsx","components/Filters.tsx","store/reducers.ts","store/state.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["addSources","sources","type","setSelectedSource","source","updateSource","updateNode","node","setOpenModal","modal","httpRequest","a","method","url","body","params","resolve","reject","onStart","onFinish","URLSearchParams","toString","fetch","headers","JSON","stringify","response","ok","json","data","Error","statusText","detail","message","ViewButton","dispatch","page","useState","loading","setLoading","onClick","window","open","error","openNewTab","dtaleChartsUrl","dtaleUrl","icon","LineChartOutlined","TableOutlined","ViewTableButton","ViewChartsButton","ShutdownButton","title","newNode","disabled","PoweroffOutlined","NumResultsTag","size","Object","keys","nodes","length","NumActiveTag","numActive","values","filter","color","ErrorTag","content","LoadMoreButton","loadMore","nodesFullyLoaded","event","stopPropagation","NodeDescription","closable","onClose","undefined","href","target","rel","SourceList","loadMoreNodes","nodeIsVisible","visible","useEffect","forEach","defaultActiveKey","map","Panel","key","id","style","header","name","extra","SettingOutlined","bordered","dataSource","renderItem","Item","actions","Meta","path","description","PythonEditor","value","onChange","width","theme","maxLines","minLines","editorProps","$blockScrolling","wrapEnabled","additionalProps","mode","Label","text","marginTop","marginBottom","Editor","setError","clone","checkRequired","requiredFields","missing","f","join","every","defaultValue","packagePath","addonBefore","addonAfter","CopyOutlined","navigator","clipboard","writeText","then","notification","duration","editable","e","readOnly","listPaths","v","getData","block","updatedSource","submitCreate","submitUpdate","makeSourceKey","makeNodeKey","dataId","isSourceKey","startsWith","isNodeKey","getSourceByKey","state","sourceId","slice","find","s","getNodeByKey","nodeDataId","sourcesToHide","defaultCheckedKeys","checkedKeys","k","includes","sourcesToShow","nodesToHide","nodesToShow","getTreeData","isLeaf","children","splitIntoCheckedAndHalfChecked","checked","halfChecked","push","Filters","setDefaultCheckedKeys","currentCheckedKeys","setCurrentCheckedKeys","getDefaultCheckedKeys","openModal","onClickOk","changes","initialKeys","currentKeys","showSources","hideSources","showNodes","hideNodes","getVisibilityChanges","n","onCancel","destroyOnClose","bodyStyle","height","centered","onOk","treeData","blockNode","checkable","onCheck","halfCheckedKeys","reducer","action","selectedSource","updatedNode","fromEntries","entries","initialState","Content","Layout","App","useReducer","margin","minHeight","className","subTitle","packageName","saveData","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.1191e43e.chunk.js","sourcesContent":["import { DataNode, DataSource, RootState } from \"./state\";\n\nexport const ACTION_TYPES = [\n  \"ADD_SOURCES\",\n  \"SET_SELECTED_SOURCE\",\n  \"UPDATE_SOURCE\",\n  \"UPDATE_NODE\",\n  \"SET_OPEN_MODAL\",\n] as const;\n\nexport const addSources = (sources: DataSource[]) => ({\n  type: \"ADD_SOURCES\" as const,\n  sources: sources,\n});\n\nexport const setSelectedSource = (source: DataSource | null) => ({\n  type: \"SET_SELECTED_SOURCE\" as const,\n  source: source,\n});\n\nexport const updateSource = (source: DataSource) => ({\n  type: \"UPDATE_SOURCE\" as const,\n  source: source,\n});\n\nexport const updateNode = (node: DataNode) => ({\n  type: \"UPDATE_NODE\" as const,\n  node: node,\n});\n\nexport const setOpenModal = (modal: RootState[\"openModal\"]) => ({\n  type: \"SET_OPEN_MODAL\" as const,\n  modal: modal, \n});\n\nexport type Action = ReturnType<\n  | typeof addSources\n  | typeof setSelectedSource\n  | typeof updateSource\n  | typeof updateNode\n  | typeof setOpenModal\n>;\n","interface SharedParams {\n  url: string;\n  resolve: (data: any) => any;\n  reject: (error: string) => any;\n  params?: { [k: string]: string };\n  onStart?: () => any;\n  onFinish?: () => any;\n}\n\ninterface ReadParams extends SharedParams {\n  method: \"GET\";\n  body?: undefined;\n}\n\ninterface WriteParams extends SharedParams {\n  method: \"POST\";\n  body: Object;\n}\n\nexport type RequestParams = ReadParams | WriteParams;\n\nexport const httpRequest = async ({\n  method,\n  url,\n  body,\n  params,\n  resolve,\n  reject,\n  onStart,\n  onFinish,\n}: RequestParams) => {\n  if (onStart) {\n    onStart();\n  }\n  if (params) {\n    url = `${url}?${new URLSearchParams(params).toString()}`;\n  }\n  try {\n    const response = await fetch(url, {\n      method: method,\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(body),\n    });\n    if (!response.ok) {\n      const data = await response.json();\n      throw new Error(`${response.statusText}: ${data.detail}`);\n    }\n    const data = await response.json();\n    resolve(data);\n  } catch (error) {\n    reject(error.message);\n  }\n  if (onFinish) {\n    onFinish();\n  }\n};\n\nexport const openNewTab = (url: string) => {\n  try {\n    window.open(url);\n  } catch (error) {\n    // do nothing\n  }\n};\n","import React, { Dispatch, useState } from \"react\";\nimport { DataNode } from \"../store/state\";\nimport { updateNode } from \"../store/actions\";\nimport { Button } from \"antd\";\nimport { httpRequest, openNewTab } from \"../utils/requests\";\nimport {\n  LineChartOutlined,\n  TableOutlined,\n  PoweroffOutlined,\n} from \"@ant-design/icons\";\n\nconst ViewButton: React.FC<{\n  dispatch: Dispatch<any>;\n  node: DataNode;\n  page: \"table\" | \"charts\";\n}> = ({ dispatch, node, page = \"table\" }) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  return (\n    <Button\n      onClick={() => {\n        httpRequest({\n          method: \"POST\",\n          url: \"/node/view/\",\n          body: node,\n          resolve: (data: DataNode) => {\n            openNewTab(\n              page === \"charts\" ? data.dtaleChartsUrl! : data.dtaleUrl!\n            );\n            dispatch(updateNode(data));\n          },\n          reject: (error: string) =>\n            dispatch(updateNode({ ...node, error: error })),\n          onStart: () => setLoading(true),\n          onFinish: () => setLoading(false),\n        });\n      }}\n      loading={loading}\n      icon={page === \"charts\" ? <LineChartOutlined /> : <TableOutlined />}\n    >\n      {`${page === \"charts\" ? \"Charts\" : \"Table\"}`}\n    </Button>\n  );\n};\n\nexport const ViewTableButton: React.FC<{\n  dispatch: Dispatch<any>;\n  node: DataNode;\n}> = ({ dispatch, node }) => (\n  <ViewButton dispatch={dispatch} node={node} page=\"table\" />\n);\n\nexport const ViewChartsButton: React.FC<{\n  dispatch: Dispatch<any>;\n  node: DataNode;\n}> = ({ dispatch, node }) => (\n  <ViewButton dispatch={dispatch} node={node} page=\"charts\" />\n);\n\nexport const ShutdownButton: React.FC<{\n  dispatch: Dispatch<any>;\n  node: DataNode;\n}> = ({ dispatch, node }) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  return (\n    <Button\n      title=\"shut down\"\n      onClick={() => {\n        setLoading(true);\n        httpRequest({\n          method: \"POST\",\n          url: \"node/kill/\",\n          body: node,\n          resolve: (data: DataNode) => {\n            dispatch(updateNode(data));\n            setLoading(false);\n          },\n          reject: (error) => {\n            const newNode = { ...node, error: error };\n            dispatch(updateNode(newNode));\n            setLoading(false);\n          },\n        });\n      }}\n      disabled={!node.dtaleUrl}\n      loading={loading}\n      icon={<PoweroffOutlined />}\n    ></Button>\n  );\n};\n","import React, { Dispatch, useEffect } from \"react\";\nimport { DataSource, DataNode } from \"../store/state\";\nimport {\n  Action,\n  updateSource,\n  setSelectedSource,\n  updateNode,\n} from \"../store/actions\";\nimport { httpRequest } from \"../utils/requests\";\nimport { List, Alert, Collapse, Tag, Popover, Space, Spin, Button } from \"antd\";\nimport {\n  SettingOutlined,\n} from \"@ant-design/icons\";\nimport {\n  ViewTableButton,\n  ViewChartsButton,\n  ShutdownButton,\n} from \"./DataNodeActions\";\n\ntype SourceListProps = {\n  sources: DataSource[];\n  dispatch: Dispatch<Action>;\n};\n\nconst NumResultsTag: React.FC<{ source: DataSource }> = ({ source }) => (\n  <Tag>\n    {source.loading ? (\n      <Spin size=\"small\" />\n    ) : (\n      `${Object.keys(source.nodes || {}).length} results`\n    )}\n  </Tag>\n);\n\nconst NumActiveTag: React.FC<{ source: DataSource }> = ({ source }) => {\n  const numActive: number = Object.values(source.nodes || {}).filter(\n    (node) => node.dtaleUrl\n  ).length;\n  return numActive === 0 ? null : (\n    <Tag color=\"green\">{`${numActive} active`}</Tag>\n  );\n};\n\nconst ErrorTag: React.FC<{ source: DataSource }> = ({ source }) =>\n  source.error ? (\n    <Tag color=\"error\">\n      <Popover content={source.error}>Error</Popover>\n    </Tag>\n  ) : null;\n\nconst LoadMoreButton: React.FC<{\n  source: DataSource;\n  loadMore: (source: DataSource) => void;\n}> = ({ source, loadMore }) =>\n  source.nodesFullyLoaded || source.loading || source.error ? null : (\n    <Button\n      size=\"small\"\n      onClick={(event) => {\n        event.stopPropagation();\n        loadMore(source);\n      }}\n    >\n      Load more\n    </Button>\n  );\n\nconst NodeDescription: React.FC<{\n  node: DataNode;\n  dispatch: Dispatch<Action>;\n}> = ({ node, dispatch }) => {\n  if (node.error) {\n    return (\n      <Alert\n        type=\"error\"\n        message={node.error}\n        closable\n        onClose={() => dispatch(updateNode({ ...node, error: undefined }))}\n      />\n    );\n  } else if (node.dtaleUrl) {\n    return (\n      <a href={node.dtaleUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n        {node.dtaleUrl}\n      </a>\n    );\n  } else {\n    return null;\n  }\n};\n\nconst SourceList: React.FC<SourceListProps> = ({\n  sources,\n  dispatch,\n}) => {\n  const loadMoreNodes = (source: DataSource) => {\n    dispatch(updateSource({ ...source, loading: true }));\n    httpRequest({\n      method: \"POST\",\n      url: \"/source/nodes/list/\",\n      body: source,\n      resolve: (data) => dispatch(updateSource({ ...data, loading: false })),\n      reject: (error) =>\n        dispatch(updateSource({ ...source, loading: false, error: error })),\n    });\n  };\n\n  const nodeIsVisible = (node: DataNode): boolean => node.visible;\n\n  const sourceIsVisible = (source: DataSource): boolean => source.visible;\n\n  useEffect(() => {\n    sources.forEach((source) => {\n      if (\n        !source.loading &&\n        !source.nodesFullyLoaded &&\n        !source.error &&\n        Object.keys(source.nodes || {}).length === 0\n      ) {\n        loadMoreNodes(source);\n      }\n    });\n  });\n\n  return (\n    <Collapse defaultActiveKey={[]}>\n      {sources.filter(sourceIsVisible).map((source) => (\n        <Collapse.Panel\n          key={source.id}\n          style={source.visible ? {} : { color: \"lightgray\" }}\n          disabled={source.loading}\n          header={\n            <Space>\n              <span>{source.name}</span>\n              <NumResultsTag source={source} />\n              <NumActiveTag source={source} />\n              <ErrorTag source={source} />\n              <LoadMoreButton source={source} loadMore={loadMoreNodes} />\n            </Space>\n          }\n          extra={\n            <Space>\n              <Button\n                icon={<SettingOutlined />}\n                onClick={(event) => {\n                  event.stopPropagation();\n                  dispatch(setSelectedSource(source));\n                }}\n              >\n                Settings\n              </Button>\n            </Space>\n          }\n        >\n          <List\n            size=\"small\"\n            bordered\n            dataSource={Object.values(source.nodes || {}).filter(nodeIsVisible)}\n            renderItem={(node) => (\n              <List.Item\n                actions={[\n                  <ShutdownButton dispatch={dispatch} node={node} />,\n                  <ViewTableButton dispatch={dispatch} node={node} />,\n                  <ViewChartsButton dispatch={dispatch} node={node} />,\n                ]}\n              >\n                <List.Item.Meta\n                  title={node.path}\n                  description={\n                    <NodeDescription node={node} dispatch={dispatch} />\n                  }\n                />\n              </List.Item>\n            )}\n          />\n        </Collapse.Panel>\n      ))}\n    </Collapse>\n  );\n};\n\nexport default SourceList;\n","import React from \"react\";\nimport AceEditor, { IAceEditorProps } from \"react-ace\";\n\nimport \"ace-builds/src-noconflict/mode-python\";\nimport \"ace-builds/src-noconflict/theme-monokai\";\n\ntype RequiredProps = \"name\" | \"value\" | \"onChange\" | \"width\";\n\ntype Props = Required<Pick<IAceEditorProps, RequiredProps>> &\n  Omit<IAceEditorProps, RequiredProps>;\n\nconst PythonEditor: React.FC<Props> = ({\n  name,\n  value,\n  onChange,\n  width,\n  theme = \"monokai\",\n  maxLines = 20,\n  minLines = 4,\n  editorProps = { $blockScrolling: true },\n  wrapEnabled = true,\n  ...additionalProps\n}) => (\n  <AceEditor\n    mode=\"python\"\n    name={name}\n    value={value}\n    onChange={onChange}\n    width={width}\n    theme={theme}\n    maxLines={maxLines}\n    minLines={minLines}\n    editorProps={editorProps}\n    wrapEnabled={wrapEnabled}\n    {...additionalProps}\n  />\n);\n\nexport { PythonEditor };\n","import React, { useState, Dispatch } from \"react\";\nimport { Drawer, Button, Input, Alert, notification } from \"antd\";\nimport { CopyOutlined } from \"@ant-design/icons\";\nimport { httpRequest } from \"../utils/requests\";\nimport { addSources, updateSource, setSelectedSource } from \"../store/actions\";\nimport { DataSource } from \"../store/state\";\nimport { PythonEditor } from \"./PythonEditor\";\n\ntype Props = {\n  source: DataSource;\n  dispatch: Dispatch<any>;\n};\n\nconst Label: React.FC<{ text: string }> = ({ text }) => (\n  <div style={{ marginTop: 5, marginBottom: 5 }}>{text}</div>\n);\n\nconst Editor: React.FC<Props> = ({ source, dispatch }) => {\n  const [error, setError] = useState<string | null>(null);\n\n  // Determine if new source or existing\n  const mode: \"edit\" | \"new\" = source.name !== \"\" ? \"edit\" : \"new\";\n\n  // Make a copy of the source object and edit that.\n  const clone: DataSource = { ...source };\n\n  const checkRequired = (): boolean => {\n    const requiredFields = [\"name\", \"listPaths\", \"getData\"] as const;\n    const missing = requiredFields.filter((f) => !clone[f]);\n    if (missing.length > 0) {\n      setError(`Fill out the required fields: ${missing.join(\", \")}`);\n      return false;\n    } else if (\n      mode === \"edit\" &&\n      requiredFields.every((f) => clone[f] === source[f])\n    ) {\n      setError(\"No changes were made\");\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  const submitCreate = () => {\n    if (checkRequired()) {\n      const { nodes, ...updatedSource } = clone;\n      httpRequest({\n        method: \"POST\",\n        url: \"/source/create/\",\n        body: updatedSource,\n        resolve: (data: DataSource) => {\n          dispatch(addSources([data]));\n          dispatch(setSelectedSource(null));\n        },\n        reject: (error) => setError(error),\n      });\n    }\n  };\n\n  const submitUpdate = () => {\n    if (checkRequired()) {\n      const { nodes, ...updatedSource } = clone;\n      httpRequest({\n        method: \"POST\",\n        url: \"/source/update/\",\n        body: updatedSource,\n        resolve: (data: DataSource) => {\n          dispatch(updateSource(data));\n          dispatch(setSelectedSource(null));\n        },\n        reject: (error) => setError(error),\n      });\n    }\n  };\n\n  return (\n    <Drawer\n      title={mode === \"new\" ? \"Add Data Source\" : \"Edit Data Source\"}\n      width={800}\n      onClose={() => dispatch(setSelectedSource(null))}\n      visible={true}\n    >\n      {error ? (\n        <Alert\n          type=\"error\"\n          message={error}\n          closable\n          onClose={() => setError(null)}\n        />\n      ) : null}\n      {mode === \"new\" ? null : (\n        <Input\n          style={{ marginTop: 5, marginBottom: 5 }}\n          disabled={true}\n          defaultValue={clone.packagePath}\n          size=\"small\"\n          addonBefore=\"Package\"\n          addonAfter={\n            <CopyOutlined\n              onClick={() =>\n                navigator.clipboard.writeText(clone.packagePath).then(() =>\n                  notification.open({\n                    message: \"Copied to clipboard!\",\n                    duration: 1,\n                  })\n                )\n              }\n            />\n          }\n        />\n      )}\n      <Input\n        style={{ marginTop: 5, marginBottom: 5 }}\n        addonBefore=\"Name\"\n        disabled={!source.editable}\n        defaultValue={clone.name}\n        onChange={(e) => {\n          clone.name = e.target.value;\n        }}\n        size=\"small\"\n      />\n      <Label text=\"list_paths.py\" />\n      <PythonEditor\n        readOnly={!source.editable}\n        name=\"list_paths_code\"\n        value={clone.listPaths}\n        onChange={(v) => {\n          clone.listPaths = v;\n        }}\n        width=\"720\"\n        maxLines={16}\n        minLines={16}\n      />\n      <Label text=\"get_data.py\" />\n      <PythonEditor\n        readOnly={!source.editable}\n        name=\"get_data_code\"\n        value={clone.getData}\n        onChange={(v) => {\n          clone.getData = v;\n        }}\n        width=\"720\"\n        maxLines={16}\n        minLines={16}\n      />\n      {source.editable ? (\n        <Button\n          type=\"primary\"\n          block\n          style={{ marginTop: 10 }}\n          onClick={() => {\n            if (mode === \"new\") {\n              submitCreate();\n            } else {\n              submitUpdate();\n            }\n          }}\n        >\n          {mode === \"new\" ? \"Create source\" : \"Save changes\"}\n        </Button>\n      ) : null}\n    </Drawer>\n  );\n};\n\nexport default Editor;\n","import React, { useState, useEffect, Dispatch } from \"react\";\nimport { Modal, Tree } from \"antd\";\nimport { httpRequest } from \"../utils/requests\";\nimport { updateSource, setOpenModal, Action } from \"../store/actions\";\nimport { DataSource, RootState, DataNode } from \"../store/state\";\n\ntype VisibilityChanges = {\n  showSources: DataSource[];\n  hideSources: DataSource[];\n  showNodes: DataNode[];\n  hideNodes: DataNode[];\n};\n\nconst sourceKeyPrefix = \"___source___\";\nconst nodeKeyPrefix = \"___node___\";\n\nconst makeSourceKey = (source: DataSource): string =>\n  `${sourceKeyPrefix}${source.id}`;\n\nconst makeNodeKey = (node: DataNode): string =>\n  `${nodeKeyPrefix}${node.dataId}`;\n\nconst isSourceKey = (key: string): boolean => key.startsWith(sourceKeyPrefix);\n\nconst isNodeKey = (key: string): boolean => key.startsWith(nodeKeyPrefix);\n\nconst getSourceByKey = (state: RootState, key: string): DataSource => {\n  const sourceId = key.slice(sourceKeyPrefix.length);\n  return (state.sources || []).find((s) => s.id === sourceId)!;\n};\n\nconst getNodeByKey = (state: RootState, key: string): DataNode => {\n  const nodeDataId = key.slice(nodeKeyPrefix.length);\n  return state.sources!.find((s) => nodeDataId in (s.nodes || {}))!.nodes![\n    nodeDataId\n  ];\n};\n\nconst sourcesToHide = (\n  state: RootState,\n  defaultCheckedKeys: string[],\n  checkedKeys: string[]\n): DataSource[] =>\n  defaultCheckedKeys\n    .filter((k) => isSourceKey(k) && !checkedKeys.includes(k))\n    .map((k) => getSourceByKey(state, k));\n\nconst sourcesToShow = (\n  state: RootState,\n  defaultCheckedKeys: string[],\n  checkedKeys: string[]\n): DataSource[] =>\n  checkedKeys\n    .filter((k) => isSourceKey(k) && !defaultCheckedKeys.includes(k))\n    .map((k) => getSourceByKey(state, k));\n\nconst nodesToHide = (\n  state: RootState,\n  defaultCheckedKeys: string[],\n  checkedKeys: string[]\n): DataNode[] =>\n  defaultCheckedKeys\n    .filter((k) => isNodeKey(k) && !checkedKeys.includes(k))\n    .map((k) => getNodeByKey(state, k));\n\nconst nodesToShow = (\n  state: RootState,\n  defaultCheckedKeys: string[],\n  checkedKeys: string[]\n): DataNode[] =>\n  checkedKeys\n    .filter((k) => isNodeKey(k) && !defaultCheckedKeys.includes(k))\n    .map((k) => getNodeByKey(state, k));\n\nconst getVisibilityChanges = (\n  state: RootState,\n  initialKeys: string[],\n  currentKeys: string[]\n): VisibilityChanges => ({\n  showSources: sourcesToShow(state, initialKeys, currentKeys),\n  hideSources: sourcesToHide(state, initialKeys, currentKeys),\n  showNodes: nodesToShow(state, initialKeys, currentKeys),\n  hideNodes: nodesToHide(state, initialKeys, currentKeys),\n});\n\nconst getDefaultCheckedKeys = (state: RootState): string[] => {\n  const keys: string[] = [];\n  (state.sources || [])\n    .filter((source) => source.visible)\n    .forEach((source) => {\n      keys.push(makeSourceKey(source));\n      Object.values(source.nodes || {})\n        .filter((node) => node.visible)\n        .forEach((node) => {\n          keys.push(makeNodeKey(node));\n        });\n    });\n  return keys;\n};\n\nconst getTreeData = (state: RootState) =>\n  (state.sources || []).map((source) => ({\n    title: source.name,\n    key: makeSourceKey(source),\n    isLeaf: Object.keys(source.nodes || {}).length === 0 ? true : false,\n    children: Object.values(source.nodes || {}).map((node) => ({\n      title: node.path,\n      key: makeNodeKey(node),\n      isLeaf: true,\n    })),\n  }));\n\nconst splitIntoCheckedAndHalfChecked = (\n  state: RootState,\n  keys: string[]\n): { checked: string[]; halfChecked: string[] } => {\n  const checked: string[] = [];\n  const halfChecked: string[] = [];\n  keys.forEach((key) => {\n    if (isNodeKey(key)) {\n      checked.push(key);\n    } else {\n      const source = getSourceByKey(state, key);\n      if (Object.values(source.nodes || {}).every((node) => node.visible)) {\n        checked.push(key);\n      } else {\n        halfChecked.push(key);\n      }\n    }\n  });\n  return { checked: checked, halfChecked: halfChecked };\n};\n\nconst Filters: React.FC<{ state: RootState; dispatch: Dispatch<Action> }> = ({\n  state,\n  dispatch,\n}) => {\n  const [defaultCheckedKeys, setDefaultCheckedKeys] = useState<string[]>([]);\n  const [currentCheckedKeys, setCurrentCheckedKeys] = useState<string[]>([]);\n\n  useEffect(() => {\n    const keys = getDefaultCheckedKeys(state);\n    setDefaultCheckedKeys(keys);\n    setCurrentCheckedKeys(keys);\n  }, [state.openModal]);\n\n  const onClickOk = () => {\n    const changes = getVisibilityChanges(\n      state,\n      defaultCheckedKeys,\n      currentCheckedKeys\n    );\n    httpRequest({\n      method: \"POST\",\n      url: \"/update-filters/\",\n      body: {\n        showSources: changes.showSources.map((s) => s.id),\n        hideSources: changes.hideSources.map((s) => s.id),\n        showNodes: changes.showNodes.map((n) => n.dataId),\n        hideNodes: changes.hideNodes.map((n) => n.dataId),\n      },\n      resolve: (sources: DataSource[]) => {\n        sources.forEach((source) => {\n          dispatch(updateSource(source));\n        });\n      },\n      reject: (error) => null,\n      onFinish: () => dispatch(setOpenModal(null)),\n    });\n  };\n\n  return (\n    <Modal\n      visible={state.openModal === \"filters\"}\n      title=\"Visible Sources\"\n      onCancel={() => dispatch(setOpenModal(null))}\n      destroyOnClose={true}\n      width={\"90%\"}\n      bodyStyle={{ height: \"80vh\" }}\n      centered\n      onOk={() => onClickOk()}\n    >\n      <Tree\n        treeData={getTreeData(state)}\n        // @ts-ignore\n        defaultCheckedKeys={splitIntoCheckedAndHalfChecked(\n          state,\n          defaultCheckedKeys\n        )}\n        blockNode={true}\n        checkable={true}\n        onCheck={(k, e) => {\n          setCurrentCheckedKeys([\n            ...(k as string[]),\n            ...(e.halfCheckedKeys || []),\n          ] as string[]);\n        }}\n      />\n    </Modal>\n  );\n};\n\nexport default Filters;\n","import { DataNode, DataSource, RootState } from \"./state\";\nimport { Action } from \"./actions\";\n\nconst updateSourceNode = (\n  source: DataSource,\n  updatedNode: DataNode\n): DataSource => {\n  return {\n    ...source,\n    nodes: Object.fromEntries(\n      Object.entries(source.nodes || {}).map(([k, node]) =>\n        node.dataId === updatedNode.dataId ? [k, updatedNode] : [k, node]\n      )\n    ),\n  };\n};\n\nexport function reducer(state: RootState, action: Action): RootState {\n  switch (action.type) {\n    case \"ADD_SOURCES\":\n      return {\n        ...state,\n        sources: [...action.sources, ...(state.sources || [])],\n      };\n    case \"SET_SELECTED_SOURCE\":\n      return {\n        ...state,\n        selectedSource: action.source,\n      };\n    case \"UPDATE_SOURCE\":\n      return {\n        ...state,\n        sources: state.sources!.map((s) =>\n          s.id === action.source.id ? action.source : s\n        ),\n      };\n    case \"UPDATE_NODE\":\n      return {\n        ...state,\n        sources: state.sources!.map((s) =>\n          s.id === action.node.sourceId ? updateSourceNode(s, action.node) : s\n        ),\n      };\n    case \"SET_OPEN_MODAL\":\n      return {\n        ...state,\n        openModal: action.modal,\n      };\n    default:\n      return { ...state, sources: state.sources || [] };\n  }\n}\n","export type DataNode = {\n  sourceId: string;\n  path: string;\n  dataId: string;\n  dtaleUrl: null | string;\n  dtaleChartsUrl: null | string;\n  error?: string;\n  visible: boolean;\n};\n\nexport type DataSource = {\n  id: string;\n  name: string;\n  packageName: string;\n  packagePath: string;\n  nodes?: { [k: string]: DataNode };\n  nodesFullyLoaded: boolean;\n  error: null | string;\n  visible: boolean;\n  editable: boolean;\n  listPaths: string;\n  getData: string;\n  saveData: string;\n  loading?: boolean;\n};\n\nexport type RootState = {\n  sources?: DataSource[];\n  selectedSource: DataSource | null;\n  openModal: null | \"filters\";\n};\n\nexport const initialState: RootState = {\n  sources: undefined,\n  selectedSource: null,\n  openModal: null,\n};\n","import React, { useEffect, useReducer } from \"react\";\nimport { Layout, Button, PageHeader, Spin, Space } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport \"./App.css\";\nimport SourceList from \"./components/SourceList\";\nimport ConfigEditor from \"./components/SourceConfigEditor\";\nimport Filters from \"./components/Filters\";\nimport { addSources, setSelectedSource, setOpenModal } from \"./store/actions\";\nimport { reducer } from \"./store/reducers\";\nimport { initialState, DataSource } from \"./store/state\";\nimport { httpRequest } from \"./utils/requests\";\n\nconst { Content } = Layout;\n\nconst listPathsTemplate: string = `from typing import Iterable\n\n\ndef main() -> Iterable[str]:\n    \"\"\"\n    Return an iterable of paths identifying where data is located, such as file paths or URLs.\n    These paths will be passed to your function in get_data.py.\n    \"\"\"\n    raise NotImplementedError()\n`;\n\nconst getDataTemplate: string = `import pandas as pd\n\n\ndef main(path: str) -> pd.DataFrame:\n    \"\"\"\n    Given a path, retrieve that data and return it as a pandas dataframe\n    \"\"\"\n    raise NotImplementedError()\n`;\n\nconst templateDataSource = (): DataSource => ({\n  id: \"\",\n  name: \"\",\n  packageName: \"\",\n  packagePath: \"\",\n  nodes: undefined,\n  nodesFullyLoaded: false,\n  error: null,\n  visible: true,\n  editable: true,\n  listPaths: listPathsTemplate,\n  getData: getDataTemplate,\n  saveData: \"\",\n});\n\nconst App = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  useEffect(() => {\n    httpRequest({\n      method: \"GET\",\n      url: \"/source/list/\",\n      resolve: (sources) => dispatch(addSources(sources)),\n      reject: (error) => null,\n    });\n  }, []);\n\n  return (\n    <Layout>\n      <Content style={{ width: \"95vw\", margin: \"0 auto\", minHeight: \"100vh\" }}>\n        <PageHeader\n          title=\"D-Tale Desktop\"\n          className=\"site-page-header\"\n          subTitle=\"\"\n          extra={\n            <Space>\n              <Button\n                onClick={() => {\n                  dispatch(setOpenModal(\"filters\"));\n                }}\n              >\n                Filters\n              </Button>\n              <Button\n                type=\"primary\"\n                onClick={() => {\n                  dispatch(setSelectedSource(templateDataSource()));\n                }}\n              >\n                Add Data Source\n              </Button>\n            </Space>\n          }\n        />\n        <div style={{ width: \"100%\" }}>\n          {state.sources === undefined ? (\n            <Spin />\n          ) : (\n            <SourceList\n              sources={state.sources}\n              dispatch={dispatch}\n            />\n          )}\n        </div>\n        {state.selectedSource ? (\n          <ConfigEditor source={state.selectedSource} dispatch={dispatch} />\n        ) : null}\n        <Filters state={state} dispatch={dispatch} />\n      </Content>\n    </Layout>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}