# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKMathematicalMorphologyPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkGrayscaleConnectedClosingImageFilterPython
else:
    import _itkGrayscaleConnectedClosingImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkGrayscaleConnectedClosingImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkGrayscaleConnectedClosingImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkIndexPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkOffsetPython
import itk.itkImageToImageFilterAPython
import itk.ITKCommonBasePython
import itk.itkImagePython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython

def itkGrayscaleConnectedClosingImageFilterID2ID2_New():
    return itkGrayscaleConnectedClosingImageFilterID2ID2.New()

class itkGrayscaleConnectedClosingImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""


    Enhance pixels associated with a dark object (identified by a seed
    pixel) where the dark object is surrounded by a brighter object.

    GrayscaleConnectedClosingImagefilter is useful for enhancing dark
    objects that are surrounded by bright borders. This filter makes it
    easier to threshold the image and extract just the object of interest.

    Geodesic morphology and the connected closing algorithm are described
    in Chapter 6 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    See:   GrayscaleGeodesicDilateImageFilter

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterID2ID2_Clone)
    SetSeed = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterID2ID2_SetSeed)
    GetSeed = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterID2ID2_GetSeed)
    SetFullyConnected = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterID2ID2_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterID2ID2_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterID2ID2_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterID2ID2_FullyConnectedOff)
    InputEqualityComparableCheck = _itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterID2ID2_InputEqualityComparableCheck
    
    InputConvertibleToOutputCheck = _itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterID2ID2_InputConvertibleToOutputCheck
    
    InputOStreamWritableCheck = _itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterID2ID2_InputOStreamWritableCheck
    
    __swig_destroy__ = _itkGrayscaleConnectedClosingImageFilterPython.delete_itkGrayscaleConnectedClosingImageFilterID2ID2
    cast = _swig_new_static_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkGrayscaleConnectedClosingImageFilterID2ID2

        Create a new object of the class itkGrayscaleConnectedClosingImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGrayscaleConnectedClosingImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGrayscaleConnectedClosingImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGrayscaleConnectedClosingImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGrayscaleConnectedClosingImageFilterID2ID2 in _itkGrayscaleConnectedClosingImageFilterPython:
_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterID2ID2_swigregister(itkGrayscaleConnectedClosingImageFilterID2ID2)
itkGrayscaleConnectedClosingImageFilterID2ID2___New_orig__ = _itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterID2ID2___New_orig__
itkGrayscaleConnectedClosingImageFilterID2ID2_cast = _itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterID2ID2_cast


def itkGrayscaleConnectedClosingImageFilterID3ID3_New():
    return itkGrayscaleConnectedClosingImageFilterID3ID3.New()

class itkGrayscaleConnectedClosingImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""


    Enhance pixels associated with a dark object (identified by a seed
    pixel) where the dark object is surrounded by a brighter object.

    GrayscaleConnectedClosingImagefilter is useful for enhancing dark
    objects that are surrounded by bright borders. This filter makes it
    easier to threshold the image and extract just the object of interest.

    Geodesic morphology and the connected closing algorithm are described
    in Chapter 6 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    See:   GrayscaleGeodesicDilateImageFilter

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterID3ID3_Clone)
    SetSeed = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterID3ID3_SetSeed)
    GetSeed = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterID3ID3_GetSeed)
    SetFullyConnected = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterID3ID3_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterID3ID3_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterID3ID3_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterID3ID3_FullyConnectedOff)
    InputEqualityComparableCheck = _itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterID3ID3_InputEqualityComparableCheck
    
    InputConvertibleToOutputCheck = _itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterID3ID3_InputConvertibleToOutputCheck
    
    InputOStreamWritableCheck = _itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterID3ID3_InputOStreamWritableCheck
    
    __swig_destroy__ = _itkGrayscaleConnectedClosingImageFilterPython.delete_itkGrayscaleConnectedClosingImageFilterID3ID3
    cast = _swig_new_static_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkGrayscaleConnectedClosingImageFilterID3ID3

        Create a new object of the class itkGrayscaleConnectedClosingImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGrayscaleConnectedClosingImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGrayscaleConnectedClosingImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGrayscaleConnectedClosingImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGrayscaleConnectedClosingImageFilterID3ID3 in _itkGrayscaleConnectedClosingImageFilterPython:
_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterID3ID3_swigregister(itkGrayscaleConnectedClosingImageFilterID3ID3)
itkGrayscaleConnectedClosingImageFilterID3ID3___New_orig__ = _itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterID3ID3___New_orig__
itkGrayscaleConnectedClosingImageFilterID3ID3_cast = _itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterID3ID3_cast


def itkGrayscaleConnectedClosingImageFilterIF2IF2_New():
    return itkGrayscaleConnectedClosingImageFilterIF2IF2.New()

class itkGrayscaleConnectedClosingImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""


    Enhance pixels associated with a dark object (identified by a seed
    pixel) where the dark object is surrounded by a brighter object.

    GrayscaleConnectedClosingImagefilter is useful for enhancing dark
    objects that are surrounded by bright borders. This filter makes it
    easier to threshold the image and extract just the object of interest.

    Geodesic morphology and the connected closing algorithm are described
    in Chapter 6 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    See:   GrayscaleGeodesicDilateImageFilter

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIF2IF2_Clone)
    SetSeed = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIF2IF2_SetSeed)
    GetSeed = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIF2IF2_GetSeed)
    SetFullyConnected = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIF2IF2_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIF2IF2_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIF2IF2_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIF2IF2_FullyConnectedOff)
    InputEqualityComparableCheck = _itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIF2IF2_InputEqualityComparableCheck
    
    InputConvertibleToOutputCheck = _itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIF2IF2_InputConvertibleToOutputCheck
    
    InputOStreamWritableCheck = _itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIF2IF2_InputOStreamWritableCheck
    
    __swig_destroy__ = _itkGrayscaleConnectedClosingImageFilterPython.delete_itkGrayscaleConnectedClosingImageFilterIF2IF2
    cast = _swig_new_static_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkGrayscaleConnectedClosingImageFilterIF2IF2

        Create a new object of the class itkGrayscaleConnectedClosingImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGrayscaleConnectedClosingImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGrayscaleConnectedClosingImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGrayscaleConnectedClosingImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGrayscaleConnectedClosingImageFilterIF2IF2 in _itkGrayscaleConnectedClosingImageFilterPython:
_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIF2IF2_swigregister(itkGrayscaleConnectedClosingImageFilterIF2IF2)
itkGrayscaleConnectedClosingImageFilterIF2IF2___New_orig__ = _itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIF2IF2___New_orig__
itkGrayscaleConnectedClosingImageFilterIF2IF2_cast = _itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIF2IF2_cast


def itkGrayscaleConnectedClosingImageFilterIF3IF3_New():
    return itkGrayscaleConnectedClosingImageFilterIF3IF3.New()

class itkGrayscaleConnectedClosingImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""


    Enhance pixels associated with a dark object (identified by a seed
    pixel) where the dark object is surrounded by a brighter object.

    GrayscaleConnectedClosingImagefilter is useful for enhancing dark
    objects that are surrounded by bright borders. This filter makes it
    easier to threshold the image and extract just the object of interest.

    Geodesic morphology and the connected closing algorithm are described
    in Chapter 6 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    See:   GrayscaleGeodesicDilateImageFilter

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIF3IF3_Clone)
    SetSeed = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIF3IF3_SetSeed)
    GetSeed = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIF3IF3_GetSeed)
    SetFullyConnected = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIF3IF3_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIF3IF3_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIF3IF3_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIF3IF3_FullyConnectedOff)
    InputEqualityComparableCheck = _itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIF3IF3_InputEqualityComparableCheck
    
    InputConvertibleToOutputCheck = _itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIF3IF3_InputConvertibleToOutputCheck
    
    InputOStreamWritableCheck = _itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIF3IF3_InputOStreamWritableCheck
    
    __swig_destroy__ = _itkGrayscaleConnectedClosingImageFilterPython.delete_itkGrayscaleConnectedClosingImageFilterIF3IF3
    cast = _swig_new_static_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkGrayscaleConnectedClosingImageFilterIF3IF3

        Create a new object of the class itkGrayscaleConnectedClosingImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGrayscaleConnectedClosingImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGrayscaleConnectedClosingImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGrayscaleConnectedClosingImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGrayscaleConnectedClosingImageFilterIF3IF3 in _itkGrayscaleConnectedClosingImageFilterPython:
_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIF3IF3_swigregister(itkGrayscaleConnectedClosingImageFilterIF3IF3)
itkGrayscaleConnectedClosingImageFilterIF3IF3___New_orig__ = _itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIF3IF3___New_orig__
itkGrayscaleConnectedClosingImageFilterIF3IF3_cast = _itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIF3IF3_cast


def itkGrayscaleConnectedClosingImageFilterISS2ISS2_New():
    return itkGrayscaleConnectedClosingImageFilterISS2ISS2.New()

class itkGrayscaleConnectedClosingImageFilterISS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""


    Enhance pixels associated with a dark object (identified by a seed
    pixel) where the dark object is surrounded by a brighter object.

    GrayscaleConnectedClosingImagefilter is useful for enhancing dark
    objects that are surrounded by bright borders. This filter makes it
    easier to threshold the image and extract just the object of interest.

    Geodesic morphology and the connected closing algorithm are described
    in Chapter 6 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    See:   GrayscaleGeodesicDilateImageFilter

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterISS2ISS2_Clone)
    SetSeed = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterISS2ISS2_SetSeed)
    GetSeed = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterISS2ISS2_GetSeed)
    SetFullyConnected = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterISS2ISS2_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterISS2ISS2_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterISS2ISS2_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterISS2ISS2_FullyConnectedOff)
    InputEqualityComparableCheck = _itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterISS2ISS2_InputEqualityComparableCheck
    
    InputConvertibleToOutputCheck = _itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterISS2ISS2_InputConvertibleToOutputCheck
    
    InputOStreamWritableCheck = _itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterISS2ISS2_InputOStreamWritableCheck
    
    __swig_destroy__ = _itkGrayscaleConnectedClosingImageFilterPython.delete_itkGrayscaleConnectedClosingImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkGrayscaleConnectedClosingImageFilterISS2ISS2

        Create a new object of the class itkGrayscaleConnectedClosingImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGrayscaleConnectedClosingImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGrayscaleConnectedClosingImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGrayscaleConnectedClosingImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGrayscaleConnectedClosingImageFilterISS2ISS2 in _itkGrayscaleConnectedClosingImageFilterPython:
_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterISS2ISS2_swigregister(itkGrayscaleConnectedClosingImageFilterISS2ISS2)
itkGrayscaleConnectedClosingImageFilterISS2ISS2___New_orig__ = _itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterISS2ISS2___New_orig__
itkGrayscaleConnectedClosingImageFilterISS2ISS2_cast = _itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterISS2ISS2_cast


def itkGrayscaleConnectedClosingImageFilterISS3ISS3_New():
    return itkGrayscaleConnectedClosingImageFilterISS3ISS3.New()

class itkGrayscaleConnectedClosingImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""


    Enhance pixels associated with a dark object (identified by a seed
    pixel) where the dark object is surrounded by a brighter object.

    GrayscaleConnectedClosingImagefilter is useful for enhancing dark
    objects that are surrounded by bright borders. This filter makes it
    easier to threshold the image and extract just the object of interest.

    Geodesic morphology and the connected closing algorithm are described
    in Chapter 6 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    See:   GrayscaleGeodesicDilateImageFilter

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterISS3ISS3_Clone)
    SetSeed = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterISS3ISS3_SetSeed)
    GetSeed = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterISS3ISS3_GetSeed)
    SetFullyConnected = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterISS3ISS3_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterISS3ISS3_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterISS3ISS3_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterISS3ISS3_FullyConnectedOff)
    InputEqualityComparableCheck = _itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterISS3ISS3_InputEqualityComparableCheck
    
    InputConvertibleToOutputCheck = _itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterISS3ISS3_InputConvertibleToOutputCheck
    
    InputOStreamWritableCheck = _itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterISS3ISS3_InputOStreamWritableCheck
    
    __swig_destroy__ = _itkGrayscaleConnectedClosingImageFilterPython.delete_itkGrayscaleConnectedClosingImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkGrayscaleConnectedClosingImageFilterISS3ISS3

        Create a new object of the class itkGrayscaleConnectedClosingImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGrayscaleConnectedClosingImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGrayscaleConnectedClosingImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGrayscaleConnectedClosingImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGrayscaleConnectedClosingImageFilterISS3ISS3 in _itkGrayscaleConnectedClosingImageFilterPython:
_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterISS3ISS3_swigregister(itkGrayscaleConnectedClosingImageFilterISS3ISS3)
itkGrayscaleConnectedClosingImageFilterISS3ISS3___New_orig__ = _itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterISS3ISS3___New_orig__
itkGrayscaleConnectedClosingImageFilterISS3ISS3_cast = _itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterISS3ISS3_cast


def itkGrayscaleConnectedClosingImageFilterIUC2IUC2_New():
    return itkGrayscaleConnectedClosingImageFilterIUC2IUC2.New()

class itkGrayscaleConnectedClosingImageFilterIUC2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""


    Enhance pixels associated with a dark object (identified by a seed
    pixel) where the dark object is surrounded by a brighter object.

    GrayscaleConnectedClosingImagefilter is useful for enhancing dark
    objects that are surrounded by bright borders. This filter makes it
    easier to threshold the image and extract just the object of interest.

    Geodesic morphology and the connected closing algorithm are described
    in Chapter 6 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    See:   GrayscaleGeodesicDilateImageFilter

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUC2IUC2_Clone)
    SetSeed = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUC2IUC2_SetSeed)
    GetSeed = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUC2IUC2_GetSeed)
    SetFullyConnected = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUC2IUC2_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUC2IUC2_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUC2IUC2_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUC2IUC2_FullyConnectedOff)
    InputEqualityComparableCheck = _itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUC2IUC2_InputEqualityComparableCheck
    
    InputConvertibleToOutputCheck = _itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUC2IUC2_InputConvertibleToOutputCheck
    
    InputOStreamWritableCheck = _itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUC2IUC2_InputOStreamWritableCheck
    
    __swig_destroy__ = _itkGrayscaleConnectedClosingImageFilterPython.delete_itkGrayscaleConnectedClosingImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkGrayscaleConnectedClosingImageFilterIUC2IUC2

        Create a new object of the class itkGrayscaleConnectedClosingImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGrayscaleConnectedClosingImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGrayscaleConnectedClosingImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGrayscaleConnectedClosingImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGrayscaleConnectedClosingImageFilterIUC2IUC2 in _itkGrayscaleConnectedClosingImageFilterPython:
_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUC2IUC2_swigregister(itkGrayscaleConnectedClosingImageFilterIUC2IUC2)
itkGrayscaleConnectedClosingImageFilterIUC2IUC2___New_orig__ = _itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUC2IUC2___New_orig__
itkGrayscaleConnectedClosingImageFilterIUC2IUC2_cast = _itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUC2IUC2_cast


def itkGrayscaleConnectedClosingImageFilterIUC3IUC3_New():
    return itkGrayscaleConnectedClosingImageFilterIUC3IUC3.New()

class itkGrayscaleConnectedClosingImageFilterIUC3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""


    Enhance pixels associated with a dark object (identified by a seed
    pixel) where the dark object is surrounded by a brighter object.

    GrayscaleConnectedClosingImagefilter is useful for enhancing dark
    objects that are surrounded by bright borders. This filter makes it
    easier to threshold the image and extract just the object of interest.

    Geodesic morphology and the connected closing algorithm are described
    in Chapter 6 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    See:   GrayscaleGeodesicDilateImageFilter

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUC3IUC3_Clone)
    SetSeed = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUC3IUC3_SetSeed)
    GetSeed = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUC3IUC3_GetSeed)
    SetFullyConnected = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUC3IUC3_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUC3IUC3_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUC3IUC3_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUC3IUC3_FullyConnectedOff)
    InputEqualityComparableCheck = _itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUC3IUC3_InputEqualityComparableCheck
    
    InputConvertibleToOutputCheck = _itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUC3IUC3_InputConvertibleToOutputCheck
    
    InputOStreamWritableCheck = _itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUC3IUC3_InputOStreamWritableCheck
    
    __swig_destroy__ = _itkGrayscaleConnectedClosingImageFilterPython.delete_itkGrayscaleConnectedClosingImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkGrayscaleConnectedClosingImageFilterIUC3IUC3

        Create a new object of the class itkGrayscaleConnectedClosingImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGrayscaleConnectedClosingImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGrayscaleConnectedClosingImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGrayscaleConnectedClosingImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGrayscaleConnectedClosingImageFilterIUC3IUC3 in _itkGrayscaleConnectedClosingImageFilterPython:
_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUC3IUC3_swigregister(itkGrayscaleConnectedClosingImageFilterIUC3IUC3)
itkGrayscaleConnectedClosingImageFilterIUC3IUC3___New_orig__ = _itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUC3IUC3___New_orig__
itkGrayscaleConnectedClosingImageFilterIUC3IUC3_cast = _itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUC3IUC3_cast


def itkGrayscaleConnectedClosingImageFilterIUS2IUS2_New():
    return itkGrayscaleConnectedClosingImageFilterIUS2IUS2.New()

class itkGrayscaleConnectedClosingImageFilterIUS2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""


    Enhance pixels associated with a dark object (identified by a seed
    pixel) where the dark object is surrounded by a brighter object.

    GrayscaleConnectedClosingImagefilter is useful for enhancing dark
    objects that are surrounded by bright borders. This filter makes it
    easier to threshold the image and extract just the object of interest.

    Geodesic morphology and the connected closing algorithm are described
    in Chapter 6 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    See:   GrayscaleGeodesicDilateImageFilter

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUS2IUS2_Clone)
    SetSeed = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUS2IUS2_SetSeed)
    GetSeed = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUS2IUS2_GetSeed)
    SetFullyConnected = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUS2IUS2_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUS2IUS2_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUS2IUS2_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUS2IUS2_FullyConnectedOff)
    InputEqualityComparableCheck = _itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUS2IUS2_InputEqualityComparableCheck
    
    InputConvertibleToOutputCheck = _itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUS2IUS2_InputConvertibleToOutputCheck
    
    InputOStreamWritableCheck = _itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUS2IUS2_InputOStreamWritableCheck
    
    __swig_destroy__ = _itkGrayscaleConnectedClosingImageFilterPython.delete_itkGrayscaleConnectedClosingImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkGrayscaleConnectedClosingImageFilterIUS2IUS2

        Create a new object of the class itkGrayscaleConnectedClosingImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGrayscaleConnectedClosingImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGrayscaleConnectedClosingImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGrayscaleConnectedClosingImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGrayscaleConnectedClosingImageFilterIUS2IUS2 in _itkGrayscaleConnectedClosingImageFilterPython:
_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUS2IUS2_swigregister(itkGrayscaleConnectedClosingImageFilterIUS2IUS2)
itkGrayscaleConnectedClosingImageFilterIUS2IUS2___New_orig__ = _itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUS2IUS2___New_orig__
itkGrayscaleConnectedClosingImageFilterIUS2IUS2_cast = _itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUS2IUS2_cast


def itkGrayscaleConnectedClosingImageFilterIUS3IUS3_New():
    return itkGrayscaleConnectedClosingImageFilterIUS3IUS3.New()

class itkGrayscaleConnectedClosingImageFilterIUS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""


    Enhance pixels associated with a dark object (identified by a seed
    pixel) where the dark object is surrounded by a brighter object.

    GrayscaleConnectedClosingImagefilter is useful for enhancing dark
    objects that are surrounded by bright borders. This filter makes it
    easier to threshold the image and extract just the object of interest.

    Geodesic morphology and the connected closing algorithm are described
    in Chapter 6 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    See:   GrayscaleGeodesicDilateImageFilter

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUS3IUS3_Clone)
    SetSeed = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUS3IUS3_SetSeed)
    GetSeed = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUS3IUS3_GetSeed)
    SetFullyConnected = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUS3IUS3_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUS3IUS3_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUS3IUS3_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUS3IUS3_FullyConnectedOff)
    InputEqualityComparableCheck = _itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUS3IUS3_InputEqualityComparableCheck
    
    InputConvertibleToOutputCheck = _itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUS3IUS3_InputConvertibleToOutputCheck
    
    InputOStreamWritableCheck = _itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUS3IUS3_InputOStreamWritableCheck
    
    __swig_destroy__ = _itkGrayscaleConnectedClosingImageFilterPython.delete_itkGrayscaleConnectedClosingImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkGrayscaleConnectedClosingImageFilterIUS3IUS3

        Create a new object of the class itkGrayscaleConnectedClosingImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGrayscaleConnectedClosingImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGrayscaleConnectedClosingImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGrayscaleConnectedClosingImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGrayscaleConnectedClosingImageFilterIUS3IUS3 in _itkGrayscaleConnectedClosingImageFilterPython:
_itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUS3IUS3_swigregister(itkGrayscaleConnectedClosingImageFilterIUS3IUS3)
itkGrayscaleConnectedClosingImageFilterIUS3IUS3___New_orig__ = _itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUS3IUS3___New_orig__
itkGrayscaleConnectedClosingImageFilterIUS3IUS3_cast = _itkGrayscaleConnectedClosingImageFilterPython.itkGrayscaleConnectedClosingImageFilterIUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def grayscale_connected_closing_image_filter(*args, **kwargs):
    """Procedural interface for GrayscaleConnectedClosingImageFilter"""
    import itk
    instance = itk.GrayscaleConnectedClosingImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def grayscale_connected_closing_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.GrayscaleConnectedClosingImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.GrayscaleConnectedClosingImageFilter.values()[0]
    else:
        filter_object = itk.GrayscaleConnectedClosingImageFilter

    grayscale_connected_closing_image_filter.__doc__ = filter_object.__doc__
    grayscale_connected_closing_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    grayscale_connected_closing_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.GrayscaleConnectedClosingImageFilter, itkTemplate.itkTemplate):
        grayscale_connected_closing_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        grayscale_connected_closing_image_filter.__doc__ += "\n"
        grayscale_connected_closing_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        grayscale_connected_closing_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



