# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKMathematicalMorphologyPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkFlatStructuringElementPython
else:
    import _itkFlatStructuringElementPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkFlatStructuringElementPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkFlatStructuringElementPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkIndexPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkOffsetPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.ITKCommonBasePython
import itk.itkImagePython
import itk.itkCovariantVectorPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.itkBoxImageFilterPython
import itk.itkImageToImageFilterAPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkNeighborhoodPython
class itkFlatStructuringElement2(itk.itkNeighborhoodPython.itkNeighborhoodB2):
    r"""


    A class to support a variety of flat structuring elements, including
    versions created by decomposition of lines.

    FlatStructuringElement provides several static methods, which can be
    used to create a structuring element with a particular shape, size,
    etc. Currently, those methods enable the creation of the following
    structuring elements: ball, box, cross, annulus, or polygon. Polygons
    are available as fast approximations of balls using line
    decompositions. Boxes also use line decompositions.

    "Flat" refers to binary as opposed to grayscale structuring
    elements. Flat structuring elements can be used for both binary and
    grayscale images.

    A Neighborhood has an N-dimensional radius. The radius is defined
    separately for each dimension as the number of pixels that the
    neighborhood extends outward from the center pixel. For example, a 2D
    Neighborhood object with a radius of 2x3 has sides of length 5x7.
    However, in the case of balls and annuli, this definition is slightly
    different from the parametric definition of those objects. For
    example, an ellipse of radius 2x3 has a diameter of 4x6, not 5x7. To
    have a diameter of 5x7, the radius would need to increase by 0.5 in
    each dimension. Thus, the "radius" of the neighborhood and the
    "radius" of the object should be distinguished.

    To accomplish this, the "ball" and "annulus" structuring elements
    have an optional flag called "radiusIsParametric" (off by default).
    Setting this flag to true will use the parametric definition of the
    object and will generate structuring elements with more accurate
    areas, which can be especially important when morphological operations
    are intended to remove or retain objects of particular sizes. When the
    mode is turned off (default), the radius is the same, but the object
    diameter is set to (radius*2)+1, which is the size of the neighborhood
    region. Thus, the original ball and annulus structuring elements have
    a systematic bias in the radius of +0.5 voxels in each dimension
    relative to the parametric definition of the radius. Thus, we
    recommend turning this mode on for more accurate structuring elements,
    but this mode is turned off by default for backward compatibility.

    As an example, a 3D ball of radius 5 should have an area of 523. With
    this mode turned on, the number of "on" pixels is 515 (error 1.6%),
    but with it turned off, the area is 739 (error 41%). For a 3D annulus
    of radius 5 and thickness 2, the area should be 410. With this mode
    turned on, the area is 392 (error 4.5%), but when turned off it is 560
    (error 36%). This same trend holds for balls and annuli of any radius
    or dimension. For more detailed experiments with this mode, please
    refer to the results of the test itkFlatStructuringElementTest.cxx or
    the wiki example.

    example{Filtering/MathematicalMorphology/ErodeBinaryImageUsingFlatS
    truct,Erode Binary Image Using Flat Structure Element}      example{Fi
    ltering/MathematicalMorphology/GenerateStructureElementsWithAccurateAr
    ea,Generate Structuring Elements With Accurate Area} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _itkFlatStructuringElementPython.delete_itkFlatStructuringElement2
    Box = _swig_new_static_method(_itkFlatStructuringElementPython.itkFlatStructuringElement2_Box)
    Ball = _swig_new_static_method(_itkFlatStructuringElementPython.itkFlatStructuringElement2_Ball)
    Cross = _swig_new_static_method(_itkFlatStructuringElementPython.itkFlatStructuringElement2_Cross)
    Annulus = _swig_new_static_method(_itkFlatStructuringElementPython.itkFlatStructuringElement2_Annulus)
    Polygon = _swig_new_static_method(_itkFlatStructuringElementPython.itkFlatStructuringElement2_Polygon)
    GetDecomposable = _swig_new_instance_method(_itkFlatStructuringElementPython.itkFlatStructuringElement2_GetDecomposable)
    SetDecomposable = _swig_new_instance_method(_itkFlatStructuringElementPython.itkFlatStructuringElement2_SetDecomposable)
    GetLines = _swig_new_instance_method(_itkFlatStructuringElementPython.itkFlatStructuringElement2_GetLines)
    AddLine = _swig_new_instance_method(_itkFlatStructuringElementPython.itkFlatStructuringElement2_AddLine)
    CheckParallel = _swig_new_instance_method(_itkFlatStructuringElementPython.itkFlatStructuringElement2_CheckParallel)
    ComputeBufferFromLines = _swig_new_instance_method(_itkFlatStructuringElementPython.itkFlatStructuringElement2_ComputeBufferFromLines)
    GetRadiusIsParametric = _swig_new_instance_method(_itkFlatStructuringElementPython.itkFlatStructuringElement2_GetRadiusIsParametric)
    SetRadiusIsParametric = _swig_new_instance_method(_itkFlatStructuringElementPython.itkFlatStructuringElement2_SetRadiusIsParametric)
    RadiusIsParametricOn = _swig_new_instance_method(_itkFlatStructuringElementPython.itkFlatStructuringElement2_RadiusIsParametricOn)
    RadiusIsParametricOff = _swig_new_instance_method(_itkFlatStructuringElementPython.itkFlatStructuringElement2_RadiusIsParametricOff)
    FromImage = _swig_new_static_method(_itkFlatStructuringElementPython.itkFlatStructuringElement2_FromImage)

    def __init__(self, *args):
        r"""
        __init__(itkFlatStructuringElement2 self) -> itkFlatStructuringElement2
        __init__(itkFlatStructuringElement2 self, itkFlatStructuringElement2 arg0) -> itkFlatStructuringElement2


        A class to support a variety of flat structuring elements, including
        versions created by decomposition of lines.

        FlatStructuringElement provides several static methods, which can be
        used to create a structuring element with a particular shape, size,
        etc. Currently, those methods enable the creation of the following
        structuring elements: ball, box, cross, annulus, or polygon. Polygons
        are available as fast approximations of balls using line
        decompositions. Boxes also use line decompositions.

        "Flat" refers to binary as opposed to grayscale structuring
        elements. Flat structuring elements can be used for both binary and
        grayscale images.

        A Neighborhood has an N-dimensional radius. The radius is defined
        separately for each dimension as the number of pixels that the
        neighborhood extends outward from the center pixel. For example, a 2D
        Neighborhood object with a radius of 2x3 has sides of length 5x7.
        However, in the case of balls and annuli, this definition is slightly
        different from the parametric definition of those objects. For
        example, an ellipse of radius 2x3 has a diameter of 4x6, not 5x7. To
        have a diameter of 5x7, the radius would need to increase by 0.5 in
        each dimension. Thus, the "radius" of the neighborhood and the
        "radius" of the object should be distinguished.

        To accomplish this, the "ball" and "annulus" structuring elements
        have an optional flag called "radiusIsParametric" (off by default).
        Setting this flag to true will use the parametric definition of the
        object and will generate structuring elements with more accurate
        areas, which can be especially important when morphological operations
        are intended to remove or retain objects of particular sizes. When the
        mode is turned off (default), the radius is the same, but the object
        diameter is set to (radius*2)+1, which is the size of the neighborhood
        region. Thus, the original ball and annulus structuring elements have
        a systematic bias in the radius of +0.5 voxels in each dimension
        relative to the parametric definition of the radius. Thus, we
        recommend turning this mode on for more accurate structuring elements,
        but this mode is turned off by default for backward compatibility.

        As an example, a 3D ball of radius 5 should have an area of 523. With
        this mode turned on, the number of "on" pixels is 515 (error 1.6%),
        but with it turned off, the area is 739 (error 41%). For a 3D annulus
        of radius 5 and thickness 2, the area should be 410. With this mode
        turned on, the area is 392 (error 4.5%), but when turned off it is 560
        (error 36%). This same trend holds for balls and annuli of any radius
        or dimension. For more detailed experiments with this mode, please
        refer to the results of the test itkFlatStructuringElementTest.cxx or
        the wiki example.

        example{Filtering/MathematicalMorphology/ErodeBinaryImageUsingFlatS
        truct,Erode Binary Image Using Flat Structure Element}      example{Fi
        ltering/MathematicalMorphology/GenerateStructureElementsWithAccurateAr
        ea,Generate Structuring Elements With Accurate Area} 
        """
        _itkFlatStructuringElementPython.itkFlatStructuringElement2_swiginit(self, _itkFlatStructuringElementPython.new_itkFlatStructuringElement2(*args))

# Register itkFlatStructuringElement2 in _itkFlatStructuringElementPython:
_itkFlatStructuringElementPython.itkFlatStructuringElement2_swigregister(itkFlatStructuringElement2)
itkFlatStructuringElement2_Box = _itkFlatStructuringElementPython.itkFlatStructuringElement2_Box
itkFlatStructuringElement2_Ball = _itkFlatStructuringElementPython.itkFlatStructuringElement2_Ball
itkFlatStructuringElement2_Cross = _itkFlatStructuringElementPython.itkFlatStructuringElement2_Cross
itkFlatStructuringElement2_Annulus = _itkFlatStructuringElementPython.itkFlatStructuringElement2_Annulus
itkFlatStructuringElement2_Polygon = _itkFlatStructuringElementPython.itkFlatStructuringElement2_Polygon
itkFlatStructuringElement2_FromImage = _itkFlatStructuringElementPython.itkFlatStructuringElement2_FromImage

class itkFlatStructuringElement3(itk.itkNeighborhoodPython.itkNeighborhoodB3):
    r"""


    A class to support a variety of flat structuring elements, including
    versions created by decomposition of lines.

    FlatStructuringElement provides several static methods, which can be
    used to create a structuring element with a particular shape, size,
    etc. Currently, those methods enable the creation of the following
    structuring elements: ball, box, cross, annulus, or polygon. Polygons
    are available as fast approximations of balls using line
    decompositions. Boxes also use line decompositions.

    "Flat" refers to binary as opposed to grayscale structuring
    elements. Flat structuring elements can be used for both binary and
    grayscale images.

    A Neighborhood has an N-dimensional radius. The radius is defined
    separately for each dimension as the number of pixels that the
    neighborhood extends outward from the center pixel. For example, a 2D
    Neighborhood object with a radius of 2x3 has sides of length 5x7.
    However, in the case of balls and annuli, this definition is slightly
    different from the parametric definition of those objects. For
    example, an ellipse of radius 2x3 has a diameter of 4x6, not 5x7. To
    have a diameter of 5x7, the radius would need to increase by 0.5 in
    each dimension. Thus, the "radius" of the neighborhood and the
    "radius" of the object should be distinguished.

    To accomplish this, the "ball" and "annulus" structuring elements
    have an optional flag called "radiusIsParametric" (off by default).
    Setting this flag to true will use the parametric definition of the
    object and will generate structuring elements with more accurate
    areas, which can be especially important when morphological operations
    are intended to remove or retain objects of particular sizes. When the
    mode is turned off (default), the radius is the same, but the object
    diameter is set to (radius*2)+1, which is the size of the neighborhood
    region. Thus, the original ball and annulus structuring elements have
    a systematic bias in the radius of +0.5 voxels in each dimension
    relative to the parametric definition of the radius. Thus, we
    recommend turning this mode on for more accurate structuring elements,
    but this mode is turned off by default for backward compatibility.

    As an example, a 3D ball of radius 5 should have an area of 523. With
    this mode turned on, the number of "on" pixels is 515 (error 1.6%),
    but with it turned off, the area is 739 (error 41%). For a 3D annulus
    of radius 5 and thickness 2, the area should be 410. With this mode
    turned on, the area is 392 (error 4.5%), but when turned off it is 560
    (error 36%). This same trend holds for balls and annuli of any radius
    or dimension. For more detailed experiments with this mode, please
    refer to the results of the test itkFlatStructuringElementTest.cxx or
    the wiki example.

    example{Filtering/MathematicalMorphology/ErodeBinaryImageUsingFlatS
    truct,Erode Binary Image Using Flat Structure Element}      example{Fi
    ltering/MathematicalMorphology/GenerateStructureElementsWithAccurateAr
    ea,Generate Structuring Elements With Accurate Area} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _itkFlatStructuringElementPython.delete_itkFlatStructuringElement3
    Box = _swig_new_static_method(_itkFlatStructuringElementPython.itkFlatStructuringElement3_Box)
    Ball = _swig_new_static_method(_itkFlatStructuringElementPython.itkFlatStructuringElement3_Ball)
    Cross = _swig_new_static_method(_itkFlatStructuringElementPython.itkFlatStructuringElement3_Cross)
    Annulus = _swig_new_static_method(_itkFlatStructuringElementPython.itkFlatStructuringElement3_Annulus)
    Polygon = _swig_new_static_method(_itkFlatStructuringElementPython.itkFlatStructuringElement3_Polygon)
    GetDecomposable = _swig_new_instance_method(_itkFlatStructuringElementPython.itkFlatStructuringElement3_GetDecomposable)
    SetDecomposable = _swig_new_instance_method(_itkFlatStructuringElementPython.itkFlatStructuringElement3_SetDecomposable)
    GetLines = _swig_new_instance_method(_itkFlatStructuringElementPython.itkFlatStructuringElement3_GetLines)
    AddLine = _swig_new_instance_method(_itkFlatStructuringElementPython.itkFlatStructuringElement3_AddLine)
    CheckParallel = _swig_new_instance_method(_itkFlatStructuringElementPython.itkFlatStructuringElement3_CheckParallel)
    ComputeBufferFromLines = _swig_new_instance_method(_itkFlatStructuringElementPython.itkFlatStructuringElement3_ComputeBufferFromLines)
    GetRadiusIsParametric = _swig_new_instance_method(_itkFlatStructuringElementPython.itkFlatStructuringElement3_GetRadiusIsParametric)
    SetRadiusIsParametric = _swig_new_instance_method(_itkFlatStructuringElementPython.itkFlatStructuringElement3_SetRadiusIsParametric)
    RadiusIsParametricOn = _swig_new_instance_method(_itkFlatStructuringElementPython.itkFlatStructuringElement3_RadiusIsParametricOn)
    RadiusIsParametricOff = _swig_new_instance_method(_itkFlatStructuringElementPython.itkFlatStructuringElement3_RadiusIsParametricOff)
    FromImage = _swig_new_static_method(_itkFlatStructuringElementPython.itkFlatStructuringElement3_FromImage)

    def __init__(self, *args):
        r"""
        __init__(itkFlatStructuringElement3 self) -> itkFlatStructuringElement3
        __init__(itkFlatStructuringElement3 self, itkFlatStructuringElement3 arg0) -> itkFlatStructuringElement3


        A class to support a variety of flat structuring elements, including
        versions created by decomposition of lines.

        FlatStructuringElement provides several static methods, which can be
        used to create a structuring element with a particular shape, size,
        etc. Currently, those methods enable the creation of the following
        structuring elements: ball, box, cross, annulus, or polygon. Polygons
        are available as fast approximations of balls using line
        decompositions. Boxes also use line decompositions.

        "Flat" refers to binary as opposed to grayscale structuring
        elements. Flat structuring elements can be used for both binary and
        grayscale images.

        A Neighborhood has an N-dimensional radius. The radius is defined
        separately for each dimension as the number of pixels that the
        neighborhood extends outward from the center pixel. For example, a 2D
        Neighborhood object with a radius of 2x3 has sides of length 5x7.
        However, in the case of balls and annuli, this definition is slightly
        different from the parametric definition of those objects. For
        example, an ellipse of radius 2x3 has a diameter of 4x6, not 5x7. To
        have a diameter of 5x7, the radius would need to increase by 0.5 in
        each dimension. Thus, the "radius" of the neighborhood and the
        "radius" of the object should be distinguished.

        To accomplish this, the "ball" and "annulus" structuring elements
        have an optional flag called "radiusIsParametric" (off by default).
        Setting this flag to true will use the parametric definition of the
        object and will generate structuring elements with more accurate
        areas, which can be especially important when morphological operations
        are intended to remove or retain objects of particular sizes. When the
        mode is turned off (default), the radius is the same, but the object
        diameter is set to (radius*2)+1, which is the size of the neighborhood
        region. Thus, the original ball and annulus structuring elements have
        a systematic bias in the radius of +0.5 voxels in each dimension
        relative to the parametric definition of the radius. Thus, we
        recommend turning this mode on for more accurate structuring elements,
        but this mode is turned off by default for backward compatibility.

        As an example, a 3D ball of radius 5 should have an area of 523. With
        this mode turned on, the number of "on" pixels is 515 (error 1.6%),
        but with it turned off, the area is 739 (error 41%). For a 3D annulus
        of radius 5 and thickness 2, the area should be 410. With this mode
        turned on, the area is 392 (error 4.5%), but when turned off it is 560
        (error 36%). This same trend holds for balls and annuli of any radius
        or dimension. For more detailed experiments with this mode, please
        refer to the results of the test itkFlatStructuringElementTest.cxx or
        the wiki example.

        example{Filtering/MathematicalMorphology/ErodeBinaryImageUsingFlatS
        truct,Erode Binary Image Using Flat Structure Element}      example{Fi
        ltering/MathematicalMorphology/GenerateStructureElementsWithAccurateAr
        ea,Generate Structuring Elements With Accurate Area} 
        """
        _itkFlatStructuringElementPython.itkFlatStructuringElement3_swiginit(self, _itkFlatStructuringElementPython.new_itkFlatStructuringElement3(*args))

# Register itkFlatStructuringElement3 in _itkFlatStructuringElementPython:
_itkFlatStructuringElementPython.itkFlatStructuringElement3_swigregister(itkFlatStructuringElement3)
itkFlatStructuringElement3_Box = _itkFlatStructuringElementPython.itkFlatStructuringElement3_Box
itkFlatStructuringElement3_Ball = _itkFlatStructuringElementPython.itkFlatStructuringElement3_Ball
itkFlatStructuringElement3_Cross = _itkFlatStructuringElementPython.itkFlatStructuringElement3_Cross
itkFlatStructuringElement3_Annulus = _itkFlatStructuringElementPython.itkFlatStructuringElement3_Annulus
itkFlatStructuringElement3_Polygon = _itkFlatStructuringElementPython.itkFlatStructuringElement3_Polygon
itkFlatStructuringElement3_FromImage = _itkFlatStructuringElementPython.itkFlatStructuringElement3_FromImage


def itkKernelImageFilterID2ID2SE2_New():
    return itkKernelImageFilterID2ID2SE2.New()

class itkKernelImageFilterID2ID2SE2(itk.itkBoxImageFilterPython.itkBoxImageFilterID2ID2):
    r"""


    A base class for all the filters working on an arbitrary shaped
    neighborhood.

    This filter provides the code to store the radius information about
    the neighborhood used in the subclasses.

    Gaetan Lehmann 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFlatStructuringElementPython.itkKernelImageFilterID2ID2SE2___New_orig__)
    Clone = _swig_new_instance_method(_itkFlatStructuringElementPython.itkKernelImageFilterID2ID2SE2_Clone)
    SetKernel = _swig_new_instance_method(_itkFlatStructuringElementPython.itkKernelImageFilterID2ID2SE2_SetKernel)
    GetKernel = _swig_new_instance_method(_itkFlatStructuringElementPython.itkKernelImageFilterID2ID2SE2_GetKernel)
    SetRadius = _swig_new_instance_method(_itkFlatStructuringElementPython.itkKernelImageFilterID2ID2SE2_SetRadius)
    __swig_destroy__ = _itkFlatStructuringElementPython.delete_itkKernelImageFilterID2ID2SE2
    cast = _swig_new_static_method(_itkFlatStructuringElementPython.itkKernelImageFilterID2ID2SE2_cast)

    def New(*args, **kargs):
        """New() -> itkKernelImageFilterID2ID2SE2

        Create a new object of the class itkKernelImageFilterID2ID2SE2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKernelImageFilterID2ID2SE2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkKernelImageFilterID2ID2SE2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkKernelImageFilterID2ID2SE2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkKernelImageFilterID2ID2SE2 in _itkFlatStructuringElementPython:
_itkFlatStructuringElementPython.itkKernelImageFilterID2ID2SE2_swigregister(itkKernelImageFilterID2ID2SE2)
itkKernelImageFilterID2ID2SE2___New_orig__ = _itkFlatStructuringElementPython.itkKernelImageFilterID2ID2SE2___New_orig__
itkKernelImageFilterID2ID2SE2_cast = _itkFlatStructuringElementPython.itkKernelImageFilterID2ID2SE2_cast


def itkKernelImageFilterID3ID3SE3_New():
    return itkKernelImageFilterID3ID3SE3.New()

class itkKernelImageFilterID3ID3SE3(itk.itkBoxImageFilterPython.itkBoxImageFilterID3ID3):
    r"""


    A base class for all the filters working on an arbitrary shaped
    neighborhood.

    This filter provides the code to store the radius information about
    the neighborhood used in the subclasses.

    Gaetan Lehmann 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFlatStructuringElementPython.itkKernelImageFilterID3ID3SE3___New_orig__)
    Clone = _swig_new_instance_method(_itkFlatStructuringElementPython.itkKernelImageFilterID3ID3SE3_Clone)
    SetKernel = _swig_new_instance_method(_itkFlatStructuringElementPython.itkKernelImageFilterID3ID3SE3_SetKernel)
    GetKernel = _swig_new_instance_method(_itkFlatStructuringElementPython.itkKernelImageFilterID3ID3SE3_GetKernel)
    SetRadius = _swig_new_instance_method(_itkFlatStructuringElementPython.itkKernelImageFilterID3ID3SE3_SetRadius)
    __swig_destroy__ = _itkFlatStructuringElementPython.delete_itkKernelImageFilterID3ID3SE3
    cast = _swig_new_static_method(_itkFlatStructuringElementPython.itkKernelImageFilterID3ID3SE3_cast)

    def New(*args, **kargs):
        """New() -> itkKernelImageFilterID3ID3SE3

        Create a new object of the class itkKernelImageFilterID3ID3SE3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKernelImageFilterID3ID3SE3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkKernelImageFilterID3ID3SE3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkKernelImageFilterID3ID3SE3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkKernelImageFilterID3ID3SE3 in _itkFlatStructuringElementPython:
_itkFlatStructuringElementPython.itkKernelImageFilterID3ID3SE3_swigregister(itkKernelImageFilterID3ID3SE3)
itkKernelImageFilterID3ID3SE3___New_orig__ = _itkFlatStructuringElementPython.itkKernelImageFilterID3ID3SE3___New_orig__
itkKernelImageFilterID3ID3SE3_cast = _itkFlatStructuringElementPython.itkKernelImageFilterID3ID3SE3_cast


def itkKernelImageFilterIF2IF2SE2_New():
    return itkKernelImageFilterIF2IF2SE2.New()

class itkKernelImageFilterIF2IF2SE2(itk.itkBoxImageFilterPython.itkBoxImageFilterIF2IF2):
    r"""


    A base class for all the filters working on an arbitrary shaped
    neighborhood.

    This filter provides the code to store the radius information about
    the neighborhood used in the subclasses.

    Gaetan Lehmann 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFlatStructuringElementPython.itkKernelImageFilterIF2IF2SE2___New_orig__)
    Clone = _swig_new_instance_method(_itkFlatStructuringElementPython.itkKernelImageFilterIF2IF2SE2_Clone)
    SetKernel = _swig_new_instance_method(_itkFlatStructuringElementPython.itkKernelImageFilterIF2IF2SE2_SetKernel)
    GetKernel = _swig_new_instance_method(_itkFlatStructuringElementPython.itkKernelImageFilterIF2IF2SE2_GetKernel)
    SetRadius = _swig_new_instance_method(_itkFlatStructuringElementPython.itkKernelImageFilterIF2IF2SE2_SetRadius)
    __swig_destroy__ = _itkFlatStructuringElementPython.delete_itkKernelImageFilterIF2IF2SE2
    cast = _swig_new_static_method(_itkFlatStructuringElementPython.itkKernelImageFilterIF2IF2SE2_cast)

    def New(*args, **kargs):
        """New() -> itkKernelImageFilterIF2IF2SE2

        Create a new object of the class itkKernelImageFilterIF2IF2SE2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKernelImageFilterIF2IF2SE2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkKernelImageFilterIF2IF2SE2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkKernelImageFilterIF2IF2SE2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkKernelImageFilterIF2IF2SE2 in _itkFlatStructuringElementPython:
_itkFlatStructuringElementPython.itkKernelImageFilterIF2IF2SE2_swigregister(itkKernelImageFilterIF2IF2SE2)
itkKernelImageFilterIF2IF2SE2___New_orig__ = _itkFlatStructuringElementPython.itkKernelImageFilterIF2IF2SE2___New_orig__
itkKernelImageFilterIF2IF2SE2_cast = _itkFlatStructuringElementPython.itkKernelImageFilterIF2IF2SE2_cast


def itkKernelImageFilterIF3IF3SE3_New():
    return itkKernelImageFilterIF3IF3SE3.New()

class itkKernelImageFilterIF3IF3SE3(itk.itkBoxImageFilterPython.itkBoxImageFilterIF3IF3):
    r"""


    A base class for all the filters working on an arbitrary shaped
    neighborhood.

    This filter provides the code to store the radius information about
    the neighborhood used in the subclasses.

    Gaetan Lehmann 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFlatStructuringElementPython.itkKernelImageFilterIF3IF3SE3___New_orig__)
    Clone = _swig_new_instance_method(_itkFlatStructuringElementPython.itkKernelImageFilterIF3IF3SE3_Clone)
    SetKernel = _swig_new_instance_method(_itkFlatStructuringElementPython.itkKernelImageFilterIF3IF3SE3_SetKernel)
    GetKernel = _swig_new_instance_method(_itkFlatStructuringElementPython.itkKernelImageFilterIF3IF3SE3_GetKernel)
    SetRadius = _swig_new_instance_method(_itkFlatStructuringElementPython.itkKernelImageFilterIF3IF3SE3_SetRadius)
    __swig_destroy__ = _itkFlatStructuringElementPython.delete_itkKernelImageFilterIF3IF3SE3
    cast = _swig_new_static_method(_itkFlatStructuringElementPython.itkKernelImageFilterIF3IF3SE3_cast)

    def New(*args, **kargs):
        """New() -> itkKernelImageFilterIF3IF3SE3

        Create a new object of the class itkKernelImageFilterIF3IF3SE3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKernelImageFilterIF3IF3SE3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkKernelImageFilterIF3IF3SE3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkKernelImageFilterIF3IF3SE3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkKernelImageFilterIF3IF3SE3 in _itkFlatStructuringElementPython:
_itkFlatStructuringElementPython.itkKernelImageFilterIF3IF3SE3_swigregister(itkKernelImageFilterIF3IF3SE3)
itkKernelImageFilterIF3IF3SE3___New_orig__ = _itkFlatStructuringElementPython.itkKernelImageFilterIF3IF3SE3___New_orig__
itkKernelImageFilterIF3IF3SE3_cast = _itkFlatStructuringElementPython.itkKernelImageFilterIF3IF3SE3_cast


def itkKernelImageFilterISS2ISS2SE2_New():
    return itkKernelImageFilterISS2ISS2SE2.New()

class itkKernelImageFilterISS2ISS2SE2(itk.itkBoxImageFilterPython.itkBoxImageFilterISS2ISS2):
    r"""


    A base class for all the filters working on an arbitrary shaped
    neighborhood.

    This filter provides the code to store the radius information about
    the neighborhood used in the subclasses.

    Gaetan Lehmann 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFlatStructuringElementPython.itkKernelImageFilterISS2ISS2SE2___New_orig__)
    Clone = _swig_new_instance_method(_itkFlatStructuringElementPython.itkKernelImageFilterISS2ISS2SE2_Clone)
    SetKernel = _swig_new_instance_method(_itkFlatStructuringElementPython.itkKernelImageFilterISS2ISS2SE2_SetKernel)
    GetKernel = _swig_new_instance_method(_itkFlatStructuringElementPython.itkKernelImageFilterISS2ISS2SE2_GetKernel)
    SetRadius = _swig_new_instance_method(_itkFlatStructuringElementPython.itkKernelImageFilterISS2ISS2SE2_SetRadius)
    __swig_destroy__ = _itkFlatStructuringElementPython.delete_itkKernelImageFilterISS2ISS2SE2
    cast = _swig_new_static_method(_itkFlatStructuringElementPython.itkKernelImageFilterISS2ISS2SE2_cast)

    def New(*args, **kargs):
        """New() -> itkKernelImageFilterISS2ISS2SE2

        Create a new object of the class itkKernelImageFilterISS2ISS2SE2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKernelImageFilterISS2ISS2SE2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkKernelImageFilterISS2ISS2SE2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkKernelImageFilterISS2ISS2SE2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkKernelImageFilterISS2ISS2SE2 in _itkFlatStructuringElementPython:
_itkFlatStructuringElementPython.itkKernelImageFilterISS2ISS2SE2_swigregister(itkKernelImageFilterISS2ISS2SE2)
itkKernelImageFilterISS2ISS2SE2___New_orig__ = _itkFlatStructuringElementPython.itkKernelImageFilterISS2ISS2SE2___New_orig__
itkKernelImageFilterISS2ISS2SE2_cast = _itkFlatStructuringElementPython.itkKernelImageFilterISS2ISS2SE2_cast


def itkKernelImageFilterISS3ISS3SE3_New():
    return itkKernelImageFilterISS3ISS3SE3.New()

class itkKernelImageFilterISS3ISS3SE3(itk.itkBoxImageFilterPython.itkBoxImageFilterISS3ISS3):
    r"""


    A base class for all the filters working on an arbitrary shaped
    neighborhood.

    This filter provides the code to store the radius information about
    the neighborhood used in the subclasses.

    Gaetan Lehmann 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFlatStructuringElementPython.itkKernelImageFilterISS3ISS3SE3___New_orig__)
    Clone = _swig_new_instance_method(_itkFlatStructuringElementPython.itkKernelImageFilterISS3ISS3SE3_Clone)
    SetKernel = _swig_new_instance_method(_itkFlatStructuringElementPython.itkKernelImageFilterISS3ISS3SE3_SetKernel)
    GetKernel = _swig_new_instance_method(_itkFlatStructuringElementPython.itkKernelImageFilterISS3ISS3SE3_GetKernel)
    SetRadius = _swig_new_instance_method(_itkFlatStructuringElementPython.itkKernelImageFilterISS3ISS3SE3_SetRadius)
    __swig_destroy__ = _itkFlatStructuringElementPython.delete_itkKernelImageFilterISS3ISS3SE3
    cast = _swig_new_static_method(_itkFlatStructuringElementPython.itkKernelImageFilterISS3ISS3SE3_cast)

    def New(*args, **kargs):
        """New() -> itkKernelImageFilterISS3ISS3SE3

        Create a new object of the class itkKernelImageFilterISS3ISS3SE3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKernelImageFilterISS3ISS3SE3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkKernelImageFilterISS3ISS3SE3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkKernelImageFilterISS3ISS3SE3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkKernelImageFilterISS3ISS3SE3 in _itkFlatStructuringElementPython:
_itkFlatStructuringElementPython.itkKernelImageFilterISS3ISS3SE3_swigregister(itkKernelImageFilterISS3ISS3SE3)
itkKernelImageFilterISS3ISS3SE3___New_orig__ = _itkFlatStructuringElementPython.itkKernelImageFilterISS3ISS3SE3___New_orig__
itkKernelImageFilterISS3ISS3SE3_cast = _itkFlatStructuringElementPython.itkKernelImageFilterISS3ISS3SE3_cast


def itkKernelImageFilterIUC2IUC2SE2_New():
    return itkKernelImageFilterIUC2IUC2SE2.New()

class itkKernelImageFilterIUC2IUC2SE2(itk.itkBoxImageFilterPython.itkBoxImageFilterIUC2IUC2):
    r"""


    A base class for all the filters working on an arbitrary shaped
    neighborhood.

    This filter provides the code to store the radius information about
    the neighborhood used in the subclasses.

    Gaetan Lehmann 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFlatStructuringElementPython.itkKernelImageFilterIUC2IUC2SE2___New_orig__)
    Clone = _swig_new_instance_method(_itkFlatStructuringElementPython.itkKernelImageFilterIUC2IUC2SE2_Clone)
    SetKernel = _swig_new_instance_method(_itkFlatStructuringElementPython.itkKernelImageFilterIUC2IUC2SE2_SetKernel)
    GetKernel = _swig_new_instance_method(_itkFlatStructuringElementPython.itkKernelImageFilterIUC2IUC2SE2_GetKernel)
    SetRadius = _swig_new_instance_method(_itkFlatStructuringElementPython.itkKernelImageFilterIUC2IUC2SE2_SetRadius)
    __swig_destroy__ = _itkFlatStructuringElementPython.delete_itkKernelImageFilterIUC2IUC2SE2
    cast = _swig_new_static_method(_itkFlatStructuringElementPython.itkKernelImageFilterIUC2IUC2SE2_cast)

    def New(*args, **kargs):
        """New() -> itkKernelImageFilterIUC2IUC2SE2

        Create a new object of the class itkKernelImageFilterIUC2IUC2SE2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKernelImageFilterIUC2IUC2SE2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkKernelImageFilterIUC2IUC2SE2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkKernelImageFilterIUC2IUC2SE2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkKernelImageFilterIUC2IUC2SE2 in _itkFlatStructuringElementPython:
_itkFlatStructuringElementPython.itkKernelImageFilterIUC2IUC2SE2_swigregister(itkKernelImageFilterIUC2IUC2SE2)
itkKernelImageFilterIUC2IUC2SE2___New_orig__ = _itkFlatStructuringElementPython.itkKernelImageFilterIUC2IUC2SE2___New_orig__
itkKernelImageFilterIUC2IUC2SE2_cast = _itkFlatStructuringElementPython.itkKernelImageFilterIUC2IUC2SE2_cast


def itkKernelImageFilterIUC3IUC3SE3_New():
    return itkKernelImageFilterIUC3IUC3SE3.New()

class itkKernelImageFilterIUC3IUC3SE3(itk.itkBoxImageFilterPython.itkBoxImageFilterIUC3IUC3):
    r"""


    A base class for all the filters working on an arbitrary shaped
    neighborhood.

    This filter provides the code to store the radius information about
    the neighborhood used in the subclasses.

    Gaetan Lehmann 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFlatStructuringElementPython.itkKernelImageFilterIUC3IUC3SE3___New_orig__)
    Clone = _swig_new_instance_method(_itkFlatStructuringElementPython.itkKernelImageFilterIUC3IUC3SE3_Clone)
    SetKernel = _swig_new_instance_method(_itkFlatStructuringElementPython.itkKernelImageFilterIUC3IUC3SE3_SetKernel)
    GetKernel = _swig_new_instance_method(_itkFlatStructuringElementPython.itkKernelImageFilterIUC3IUC3SE3_GetKernel)
    SetRadius = _swig_new_instance_method(_itkFlatStructuringElementPython.itkKernelImageFilterIUC3IUC3SE3_SetRadius)
    __swig_destroy__ = _itkFlatStructuringElementPython.delete_itkKernelImageFilterIUC3IUC3SE3
    cast = _swig_new_static_method(_itkFlatStructuringElementPython.itkKernelImageFilterIUC3IUC3SE3_cast)

    def New(*args, **kargs):
        """New() -> itkKernelImageFilterIUC3IUC3SE3

        Create a new object of the class itkKernelImageFilterIUC3IUC3SE3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKernelImageFilterIUC3IUC3SE3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkKernelImageFilterIUC3IUC3SE3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkKernelImageFilterIUC3IUC3SE3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkKernelImageFilterIUC3IUC3SE3 in _itkFlatStructuringElementPython:
_itkFlatStructuringElementPython.itkKernelImageFilterIUC3IUC3SE3_swigregister(itkKernelImageFilterIUC3IUC3SE3)
itkKernelImageFilterIUC3IUC3SE3___New_orig__ = _itkFlatStructuringElementPython.itkKernelImageFilterIUC3IUC3SE3___New_orig__
itkKernelImageFilterIUC3IUC3SE3_cast = _itkFlatStructuringElementPython.itkKernelImageFilterIUC3IUC3SE3_cast


def itkKernelImageFilterIUS2IUS2SE2_New():
    return itkKernelImageFilterIUS2IUS2SE2.New()

class itkKernelImageFilterIUS2IUS2SE2(itk.itkBoxImageFilterPython.itkBoxImageFilterIUS2IUS2):
    r"""


    A base class for all the filters working on an arbitrary shaped
    neighborhood.

    This filter provides the code to store the radius information about
    the neighborhood used in the subclasses.

    Gaetan Lehmann 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFlatStructuringElementPython.itkKernelImageFilterIUS2IUS2SE2___New_orig__)
    Clone = _swig_new_instance_method(_itkFlatStructuringElementPython.itkKernelImageFilterIUS2IUS2SE2_Clone)
    SetKernel = _swig_new_instance_method(_itkFlatStructuringElementPython.itkKernelImageFilterIUS2IUS2SE2_SetKernel)
    GetKernel = _swig_new_instance_method(_itkFlatStructuringElementPython.itkKernelImageFilterIUS2IUS2SE2_GetKernel)
    SetRadius = _swig_new_instance_method(_itkFlatStructuringElementPython.itkKernelImageFilterIUS2IUS2SE2_SetRadius)
    __swig_destroy__ = _itkFlatStructuringElementPython.delete_itkKernelImageFilterIUS2IUS2SE2
    cast = _swig_new_static_method(_itkFlatStructuringElementPython.itkKernelImageFilterIUS2IUS2SE2_cast)

    def New(*args, **kargs):
        """New() -> itkKernelImageFilterIUS2IUS2SE2

        Create a new object of the class itkKernelImageFilterIUS2IUS2SE2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKernelImageFilterIUS2IUS2SE2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkKernelImageFilterIUS2IUS2SE2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkKernelImageFilterIUS2IUS2SE2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkKernelImageFilterIUS2IUS2SE2 in _itkFlatStructuringElementPython:
_itkFlatStructuringElementPython.itkKernelImageFilterIUS2IUS2SE2_swigregister(itkKernelImageFilterIUS2IUS2SE2)
itkKernelImageFilterIUS2IUS2SE2___New_orig__ = _itkFlatStructuringElementPython.itkKernelImageFilterIUS2IUS2SE2___New_orig__
itkKernelImageFilterIUS2IUS2SE2_cast = _itkFlatStructuringElementPython.itkKernelImageFilterIUS2IUS2SE2_cast


def itkKernelImageFilterIUS3IUS3SE3_New():
    return itkKernelImageFilterIUS3IUS3SE3.New()

class itkKernelImageFilterIUS3IUS3SE3(itk.itkBoxImageFilterPython.itkBoxImageFilterIUS3IUS3):
    r"""


    A base class for all the filters working on an arbitrary shaped
    neighborhood.

    This filter provides the code to store the radius information about
    the neighborhood used in the subclasses.

    Gaetan Lehmann 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFlatStructuringElementPython.itkKernelImageFilterIUS3IUS3SE3___New_orig__)
    Clone = _swig_new_instance_method(_itkFlatStructuringElementPython.itkKernelImageFilterIUS3IUS3SE3_Clone)
    SetKernel = _swig_new_instance_method(_itkFlatStructuringElementPython.itkKernelImageFilterIUS3IUS3SE3_SetKernel)
    GetKernel = _swig_new_instance_method(_itkFlatStructuringElementPython.itkKernelImageFilterIUS3IUS3SE3_GetKernel)
    SetRadius = _swig_new_instance_method(_itkFlatStructuringElementPython.itkKernelImageFilterIUS3IUS3SE3_SetRadius)
    __swig_destroy__ = _itkFlatStructuringElementPython.delete_itkKernelImageFilterIUS3IUS3SE3
    cast = _swig_new_static_method(_itkFlatStructuringElementPython.itkKernelImageFilterIUS3IUS3SE3_cast)

    def New(*args, **kargs):
        """New() -> itkKernelImageFilterIUS3IUS3SE3

        Create a new object of the class itkKernelImageFilterIUS3IUS3SE3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKernelImageFilterIUS3IUS3SE3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkKernelImageFilterIUS3IUS3SE3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkKernelImageFilterIUS3IUS3SE3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkKernelImageFilterIUS3IUS3SE3 in _itkFlatStructuringElementPython:
_itkFlatStructuringElementPython.itkKernelImageFilterIUS3IUS3SE3_swigregister(itkKernelImageFilterIUS3IUS3SE3)
itkKernelImageFilterIUS3IUS3SE3___New_orig__ = _itkFlatStructuringElementPython.itkKernelImageFilterIUS3IUS3SE3___New_orig__
itkKernelImageFilterIUS3IUS3SE3_cast = _itkFlatStructuringElementPython.itkKernelImageFilterIUS3IUS3SE3_cast


def itkMovingHistogramImageFilterBaseID2ID2SE2_New():
    return itkMovingHistogramImageFilterBaseID2ID2SE2.New()

class itkMovingHistogramImageFilterBaseID2ID2SE2(itkKernelImageFilterID2ID2SE2):
    r"""


    Implements a generic moving histogram algorithm.

    This filter is a base class to implement efficiently many neighborhood
    filters. Instead of visiting all the neighbors of a pixel, the set of
    pixels in the neighborhood is updated when the filter is moving to a
    new pixel. The number of pixels read for each pixel can be very
    smaller than the number of pixels read by a basic algorithm.

    This filter moves the neighborhood over all the pixels of the output
    requested region, and pass the pixel added and removed of the
    neighborhood to the an histogram class. This filter doesn't implement
    the histogram class - it must be implement and passed as template
    parameter. The histogram class is not necessary a real histogram. It
    can be implemented in many ways, and only has to provide the methods
    described below.

    This filter takes 4 template parameters: the input and output image
    type, the structuring element (or kernel) type, and the histogram
    type. The input and output image must have the same number of
    dimension.

    The histogram type is a class which has to implements seven methods: a
    default constructor which takes no parameter.

    void AddPixel( const InputPixelType &p ) is called when a new pixel is
    added to the histogram.

    void RemovePixel( const InputPixelType &p ) is called when a pixel is
    removed of the histogram.

    void AddBoundary() is called when a pixel outside the image is added.
    No value is provided: it's the responsibility to the histogram class
    to get it if needed. This method can be kept empty to ignore the
    boundary pixels.

    void RemoveBoundary() is called to when a pixel outside the image is
    removed. No value is provided: it's the responsibility to the
    histogram class to get it if needed. This method can be kept empty to
    ignore the boundary pixels.

    AType GetValue() is called to set the value of the output image. AType
    must be the output pixel type, or a type castable to the output pixel
    type.

    MovingHistogramImageFilterBase add the new pixels before removing the
    old ones, so, if AddBoundary() is implemented and/or the kernel is
    symmetric, it is safe to consider that the histogram will never be
    empty.

    One histogram is created for each thread by the method NewHistogram().
    The NewHistogram() method can be overriden to pass some parameters to
    the histogram.

    The neighborhood is defined by a structuring element, and must a
    itk::Neighborhood object or a subclass. The structuring element is
    assumed to be composed of binary values (zero or one). Only elements
    of the structuring element having values > 0 are candidates for
    affecting the center pixel.

    See:  MovingWindowMeanImageFilter, RankImageFilter,
    MaskedMovingHistogramImageFilter,

    See:  MovingHistogramMorphologicalGradientImageFilter

    Gaetan Lehmann

    Richard Beare 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseID2ID2SE2___New_orig__)
    Clone = _swig_new_instance_method(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseID2ID2SE2_Clone)
    GetPixelsPerTranslation = _swig_new_instance_method(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseID2ID2SE2_GetPixelsPerTranslation)
    __swig_destroy__ = _itkFlatStructuringElementPython.delete_itkMovingHistogramImageFilterBaseID2ID2SE2
    cast = _swig_new_static_method(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseID2ID2SE2_cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterBaseID2ID2SE2

        Create a new object of the class itkMovingHistogramImageFilterBaseID2ID2SE2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterBaseID2ID2SE2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterBaseID2ID2SE2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMovingHistogramImageFilterBaseID2ID2SE2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMovingHistogramImageFilterBaseID2ID2SE2 in _itkFlatStructuringElementPython:
_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseID2ID2SE2_swigregister(itkMovingHistogramImageFilterBaseID2ID2SE2)
itkMovingHistogramImageFilterBaseID2ID2SE2___New_orig__ = _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseID2ID2SE2___New_orig__
itkMovingHistogramImageFilterBaseID2ID2SE2_cast = _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseID2ID2SE2_cast


def itkMovingHistogramImageFilterBaseID3ID3SE3_New():
    return itkMovingHistogramImageFilterBaseID3ID3SE3.New()

class itkMovingHistogramImageFilterBaseID3ID3SE3(itkKernelImageFilterID3ID3SE3):
    r"""


    Implements a generic moving histogram algorithm.

    This filter is a base class to implement efficiently many neighborhood
    filters. Instead of visiting all the neighbors of a pixel, the set of
    pixels in the neighborhood is updated when the filter is moving to a
    new pixel. The number of pixels read for each pixel can be very
    smaller than the number of pixels read by a basic algorithm.

    This filter moves the neighborhood over all the pixels of the output
    requested region, and pass the pixel added and removed of the
    neighborhood to the an histogram class. This filter doesn't implement
    the histogram class - it must be implement and passed as template
    parameter. The histogram class is not necessary a real histogram. It
    can be implemented in many ways, and only has to provide the methods
    described below.

    This filter takes 4 template parameters: the input and output image
    type, the structuring element (or kernel) type, and the histogram
    type. The input and output image must have the same number of
    dimension.

    The histogram type is a class which has to implements seven methods: a
    default constructor which takes no parameter.

    void AddPixel( const InputPixelType &p ) is called when a new pixel is
    added to the histogram.

    void RemovePixel( const InputPixelType &p ) is called when a pixel is
    removed of the histogram.

    void AddBoundary() is called when a pixel outside the image is added.
    No value is provided: it's the responsibility to the histogram class
    to get it if needed. This method can be kept empty to ignore the
    boundary pixels.

    void RemoveBoundary() is called to when a pixel outside the image is
    removed. No value is provided: it's the responsibility to the
    histogram class to get it if needed. This method can be kept empty to
    ignore the boundary pixels.

    AType GetValue() is called to set the value of the output image. AType
    must be the output pixel type, or a type castable to the output pixel
    type.

    MovingHistogramImageFilterBase add the new pixels before removing the
    old ones, so, if AddBoundary() is implemented and/or the kernel is
    symmetric, it is safe to consider that the histogram will never be
    empty.

    One histogram is created for each thread by the method NewHistogram().
    The NewHistogram() method can be overriden to pass some parameters to
    the histogram.

    The neighborhood is defined by a structuring element, and must a
    itk::Neighborhood object or a subclass. The structuring element is
    assumed to be composed of binary values (zero or one). Only elements
    of the structuring element having values > 0 are candidates for
    affecting the center pixel.

    See:  MovingWindowMeanImageFilter, RankImageFilter,
    MaskedMovingHistogramImageFilter,

    See:  MovingHistogramMorphologicalGradientImageFilter

    Gaetan Lehmann

    Richard Beare 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseID3ID3SE3___New_orig__)
    Clone = _swig_new_instance_method(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseID3ID3SE3_Clone)
    GetPixelsPerTranslation = _swig_new_instance_method(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseID3ID3SE3_GetPixelsPerTranslation)
    __swig_destroy__ = _itkFlatStructuringElementPython.delete_itkMovingHistogramImageFilterBaseID3ID3SE3
    cast = _swig_new_static_method(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseID3ID3SE3_cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterBaseID3ID3SE3

        Create a new object of the class itkMovingHistogramImageFilterBaseID3ID3SE3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterBaseID3ID3SE3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterBaseID3ID3SE3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMovingHistogramImageFilterBaseID3ID3SE3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMovingHistogramImageFilterBaseID3ID3SE3 in _itkFlatStructuringElementPython:
_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseID3ID3SE3_swigregister(itkMovingHistogramImageFilterBaseID3ID3SE3)
itkMovingHistogramImageFilterBaseID3ID3SE3___New_orig__ = _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseID3ID3SE3___New_orig__
itkMovingHistogramImageFilterBaseID3ID3SE3_cast = _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseID3ID3SE3_cast


def itkMovingHistogramImageFilterBaseIF2IF2SE2_New():
    return itkMovingHistogramImageFilterBaseIF2IF2SE2.New()

class itkMovingHistogramImageFilterBaseIF2IF2SE2(itkKernelImageFilterIF2IF2SE2):
    r"""


    Implements a generic moving histogram algorithm.

    This filter is a base class to implement efficiently many neighborhood
    filters. Instead of visiting all the neighbors of a pixel, the set of
    pixels in the neighborhood is updated when the filter is moving to a
    new pixel. The number of pixels read for each pixel can be very
    smaller than the number of pixels read by a basic algorithm.

    This filter moves the neighborhood over all the pixels of the output
    requested region, and pass the pixel added and removed of the
    neighborhood to the an histogram class. This filter doesn't implement
    the histogram class - it must be implement and passed as template
    parameter. The histogram class is not necessary a real histogram. It
    can be implemented in many ways, and only has to provide the methods
    described below.

    This filter takes 4 template parameters: the input and output image
    type, the structuring element (or kernel) type, and the histogram
    type. The input and output image must have the same number of
    dimension.

    The histogram type is a class which has to implements seven methods: a
    default constructor which takes no parameter.

    void AddPixel( const InputPixelType &p ) is called when a new pixel is
    added to the histogram.

    void RemovePixel( const InputPixelType &p ) is called when a pixel is
    removed of the histogram.

    void AddBoundary() is called when a pixel outside the image is added.
    No value is provided: it's the responsibility to the histogram class
    to get it if needed. This method can be kept empty to ignore the
    boundary pixels.

    void RemoveBoundary() is called to when a pixel outside the image is
    removed. No value is provided: it's the responsibility to the
    histogram class to get it if needed. This method can be kept empty to
    ignore the boundary pixels.

    AType GetValue() is called to set the value of the output image. AType
    must be the output pixel type, or a type castable to the output pixel
    type.

    MovingHistogramImageFilterBase add the new pixels before removing the
    old ones, so, if AddBoundary() is implemented and/or the kernel is
    symmetric, it is safe to consider that the histogram will never be
    empty.

    One histogram is created for each thread by the method NewHistogram().
    The NewHistogram() method can be overriden to pass some parameters to
    the histogram.

    The neighborhood is defined by a structuring element, and must a
    itk::Neighborhood object or a subclass. The structuring element is
    assumed to be composed of binary values (zero or one). Only elements
    of the structuring element having values > 0 are candidates for
    affecting the center pixel.

    See:  MovingWindowMeanImageFilter, RankImageFilter,
    MaskedMovingHistogramImageFilter,

    See:  MovingHistogramMorphologicalGradientImageFilter

    Gaetan Lehmann

    Richard Beare 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIF2IF2SE2___New_orig__)
    Clone = _swig_new_instance_method(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIF2IF2SE2_Clone)
    GetPixelsPerTranslation = _swig_new_instance_method(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIF2IF2SE2_GetPixelsPerTranslation)
    __swig_destroy__ = _itkFlatStructuringElementPython.delete_itkMovingHistogramImageFilterBaseIF2IF2SE2
    cast = _swig_new_static_method(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIF2IF2SE2_cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterBaseIF2IF2SE2

        Create a new object of the class itkMovingHistogramImageFilterBaseIF2IF2SE2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterBaseIF2IF2SE2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterBaseIF2IF2SE2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMovingHistogramImageFilterBaseIF2IF2SE2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMovingHistogramImageFilterBaseIF2IF2SE2 in _itkFlatStructuringElementPython:
_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIF2IF2SE2_swigregister(itkMovingHistogramImageFilterBaseIF2IF2SE2)
itkMovingHistogramImageFilterBaseIF2IF2SE2___New_orig__ = _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIF2IF2SE2___New_orig__
itkMovingHistogramImageFilterBaseIF2IF2SE2_cast = _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIF2IF2SE2_cast


def itkMovingHistogramImageFilterBaseIF3IF3SE3_New():
    return itkMovingHistogramImageFilterBaseIF3IF3SE3.New()

class itkMovingHistogramImageFilterBaseIF3IF3SE3(itkKernelImageFilterIF3IF3SE3):
    r"""


    Implements a generic moving histogram algorithm.

    This filter is a base class to implement efficiently many neighborhood
    filters. Instead of visiting all the neighbors of a pixel, the set of
    pixels in the neighborhood is updated when the filter is moving to a
    new pixel. The number of pixels read for each pixel can be very
    smaller than the number of pixels read by a basic algorithm.

    This filter moves the neighborhood over all the pixels of the output
    requested region, and pass the pixel added and removed of the
    neighborhood to the an histogram class. This filter doesn't implement
    the histogram class - it must be implement and passed as template
    parameter. The histogram class is not necessary a real histogram. It
    can be implemented in many ways, and only has to provide the methods
    described below.

    This filter takes 4 template parameters: the input and output image
    type, the structuring element (or kernel) type, and the histogram
    type. The input and output image must have the same number of
    dimension.

    The histogram type is a class which has to implements seven methods: a
    default constructor which takes no parameter.

    void AddPixel( const InputPixelType &p ) is called when a new pixel is
    added to the histogram.

    void RemovePixel( const InputPixelType &p ) is called when a pixel is
    removed of the histogram.

    void AddBoundary() is called when a pixel outside the image is added.
    No value is provided: it's the responsibility to the histogram class
    to get it if needed. This method can be kept empty to ignore the
    boundary pixels.

    void RemoveBoundary() is called to when a pixel outside the image is
    removed. No value is provided: it's the responsibility to the
    histogram class to get it if needed. This method can be kept empty to
    ignore the boundary pixels.

    AType GetValue() is called to set the value of the output image. AType
    must be the output pixel type, or a type castable to the output pixel
    type.

    MovingHistogramImageFilterBase add the new pixels before removing the
    old ones, so, if AddBoundary() is implemented and/or the kernel is
    symmetric, it is safe to consider that the histogram will never be
    empty.

    One histogram is created for each thread by the method NewHistogram().
    The NewHistogram() method can be overriden to pass some parameters to
    the histogram.

    The neighborhood is defined by a structuring element, and must a
    itk::Neighborhood object or a subclass. The structuring element is
    assumed to be composed of binary values (zero or one). Only elements
    of the structuring element having values > 0 are candidates for
    affecting the center pixel.

    See:  MovingWindowMeanImageFilter, RankImageFilter,
    MaskedMovingHistogramImageFilter,

    See:  MovingHistogramMorphologicalGradientImageFilter

    Gaetan Lehmann

    Richard Beare 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIF3IF3SE3___New_orig__)
    Clone = _swig_new_instance_method(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIF3IF3SE3_Clone)
    GetPixelsPerTranslation = _swig_new_instance_method(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIF3IF3SE3_GetPixelsPerTranslation)
    __swig_destroy__ = _itkFlatStructuringElementPython.delete_itkMovingHistogramImageFilterBaseIF3IF3SE3
    cast = _swig_new_static_method(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIF3IF3SE3_cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterBaseIF3IF3SE3

        Create a new object of the class itkMovingHistogramImageFilterBaseIF3IF3SE3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterBaseIF3IF3SE3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterBaseIF3IF3SE3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMovingHistogramImageFilterBaseIF3IF3SE3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMovingHistogramImageFilterBaseIF3IF3SE3 in _itkFlatStructuringElementPython:
_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIF3IF3SE3_swigregister(itkMovingHistogramImageFilterBaseIF3IF3SE3)
itkMovingHistogramImageFilterBaseIF3IF3SE3___New_orig__ = _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIF3IF3SE3___New_orig__
itkMovingHistogramImageFilterBaseIF3IF3SE3_cast = _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIF3IF3SE3_cast


def itkMovingHistogramImageFilterBaseISS2ISS2SE2_New():
    return itkMovingHistogramImageFilterBaseISS2ISS2SE2.New()

class itkMovingHistogramImageFilterBaseISS2ISS2SE2(itkKernelImageFilterISS2ISS2SE2):
    r"""


    Implements a generic moving histogram algorithm.

    This filter is a base class to implement efficiently many neighborhood
    filters. Instead of visiting all the neighbors of a pixel, the set of
    pixels in the neighborhood is updated when the filter is moving to a
    new pixel. The number of pixels read for each pixel can be very
    smaller than the number of pixels read by a basic algorithm.

    This filter moves the neighborhood over all the pixels of the output
    requested region, and pass the pixel added and removed of the
    neighborhood to the an histogram class. This filter doesn't implement
    the histogram class - it must be implement and passed as template
    parameter. The histogram class is not necessary a real histogram. It
    can be implemented in many ways, and only has to provide the methods
    described below.

    This filter takes 4 template parameters: the input and output image
    type, the structuring element (or kernel) type, and the histogram
    type. The input and output image must have the same number of
    dimension.

    The histogram type is a class which has to implements seven methods: a
    default constructor which takes no parameter.

    void AddPixel( const InputPixelType &p ) is called when a new pixel is
    added to the histogram.

    void RemovePixel( const InputPixelType &p ) is called when a pixel is
    removed of the histogram.

    void AddBoundary() is called when a pixel outside the image is added.
    No value is provided: it's the responsibility to the histogram class
    to get it if needed. This method can be kept empty to ignore the
    boundary pixels.

    void RemoveBoundary() is called to when a pixel outside the image is
    removed. No value is provided: it's the responsibility to the
    histogram class to get it if needed. This method can be kept empty to
    ignore the boundary pixels.

    AType GetValue() is called to set the value of the output image. AType
    must be the output pixel type, or a type castable to the output pixel
    type.

    MovingHistogramImageFilterBase add the new pixels before removing the
    old ones, so, if AddBoundary() is implemented and/or the kernel is
    symmetric, it is safe to consider that the histogram will never be
    empty.

    One histogram is created for each thread by the method NewHistogram().
    The NewHistogram() method can be overriden to pass some parameters to
    the histogram.

    The neighborhood is defined by a structuring element, and must a
    itk::Neighborhood object or a subclass. The structuring element is
    assumed to be composed of binary values (zero or one). Only elements
    of the structuring element having values > 0 are candidates for
    affecting the center pixel.

    See:  MovingWindowMeanImageFilter, RankImageFilter,
    MaskedMovingHistogramImageFilter,

    See:  MovingHistogramMorphologicalGradientImageFilter

    Gaetan Lehmann

    Richard Beare 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseISS2ISS2SE2___New_orig__)
    Clone = _swig_new_instance_method(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseISS2ISS2SE2_Clone)
    GetPixelsPerTranslation = _swig_new_instance_method(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseISS2ISS2SE2_GetPixelsPerTranslation)
    __swig_destroy__ = _itkFlatStructuringElementPython.delete_itkMovingHistogramImageFilterBaseISS2ISS2SE2
    cast = _swig_new_static_method(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseISS2ISS2SE2_cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterBaseISS2ISS2SE2

        Create a new object of the class itkMovingHistogramImageFilterBaseISS2ISS2SE2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterBaseISS2ISS2SE2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterBaseISS2ISS2SE2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMovingHistogramImageFilterBaseISS2ISS2SE2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMovingHistogramImageFilterBaseISS2ISS2SE2 in _itkFlatStructuringElementPython:
_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseISS2ISS2SE2_swigregister(itkMovingHistogramImageFilterBaseISS2ISS2SE2)
itkMovingHistogramImageFilterBaseISS2ISS2SE2___New_orig__ = _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseISS2ISS2SE2___New_orig__
itkMovingHistogramImageFilterBaseISS2ISS2SE2_cast = _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseISS2ISS2SE2_cast


def itkMovingHistogramImageFilterBaseISS3ISS3SE3_New():
    return itkMovingHistogramImageFilterBaseISS3ISS3SE3.New()

class itkMovingHistogramImageFilterBaseISS3ISS3SE3(itkKernelImageFilterISS3ISS3SE3):
    r"""


    Implements a generic moving histogram algorithm.

    This filter is a base class to implement efficiently many neighborhood
    filters. Instead of visiting all the neighbors of a pixel, the set of
    pixels in the neighborhood is updated when the filter is moving to a
    new pixel. The number of pixels read for each pixel can be very
    smaller than the number of pixels read by a basic algorithm.

    This filter moves the neighborhood over all the pixels of the output
    requested region, and pass the pixel added and removed of the
    neighborhood to the an histogram class. This filter doesn't implement
    the histogram class - it must be implement and passed as template
    parameter. The histogram class is not necessary a real histogram. It
    can be implemented in many ways, and only has to provide the methods
    described below.

    This filter takes 4 template parameters: the input and output image
    type, the structuring element (or kernel) type, and the histogram
    type. The input and output image must have the same number of
    dimension.

    The histogram type is a class which has to implements seven methods: a
    default constructor which takes no parameter.

    void AddPixel( const InputPixelType &p ) is called when a new pixel is
    added to the histogram.

    void RemovePixel( const InputPixelType &p ) is called when a pixel is
    removed of the histogram.

    void AddBoundary() is called when a pixel outside the image is added.
    No value is provided: it's the responsibility to the histogram class
    to get it if needed. This method can be kept empty to ignore the
    boundary pixels.

    void RemoveBoundary() is called to when a pixel outside the image is
    removed. No value is provided: it's the responsibility to the
    histogram class to get it if needed. This method can be kept empty to
    ignore the boundary pixels.

    AType GetValue() is called to set the value of the output image. AType
    must be the output pixel type, or a type castable to the output pixel
    type.

    MovingHistogramImageFilterBase add the new pixels before removing the
    old ones, so, if AddBoundary() is implemented and/or the kernel is
    symmetric, it is safe to consider that the histogram will never be
    empty.

    One histogram is created for each thread by the method NewHistogram().
    The NewHistogram() method can be overriden to pass some parameters to
    the histogram.

    The neighborhood is defined by a structuring element, and must a
    itk::Neighborhood object or a subclass. The structuring element is
    assumed to be composed of binary values (zero or one). Only elements
    of the structuring element having values > 0 are candidates for
    affecting the center pixel.

    See:  MovingWindowMeanImageFilter, RankImageFilter,
    MaskedMovingHistogramImageFilter,

    See:  MovingHistogramMorphologicalGradientImageFilter

    Gaetan Lehmann

    Richard Beare 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseISS3ISS3SE3___New_orig__)
    Clone = _swig_new_instance_method(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseISS3ISS3SE3_Clone)
    GetPixelsPerTranslation = _swig_new_instance_method(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseISS3ISS3SE3_GetPixelsPerTranslation)
    __swig_destroy__ = _itkFlatStructuringElementPython.delete_itkMovingHistogramImageFilterBaseISS3ISS3SE3
    cast = _swig_new_static_method(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseISS3ISS3SE3_cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterBaseISS3ISS3SE3

        Create a new object of the class itkMovingHistogramImageFilterBaseISS3ISS3SE3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterBaseISS3ISS3SE3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterBaseISS3ISS3SE3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMovingHistogramImageFilterBaseISS3ISS3SE3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMovingHistogramImageFilterBaseISS3ISS3SE3 in _itkFlatStructuringElementPython:
_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseISS3ISS3SE3_swigregister(itkMovingHistogramImageFilterBaseISS3ISS3SE3)
itkMovingHistogramImageFilterBaseISS3ISS3SE3___New_orig__ = _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseISS3ISS3SE3___New_orig__
itkMovingHistogramImageFilterBaseISS3ISS3SE3_cast = _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseISS3ISS3SE3_cast


def itkMovingHistogramImageFilterBaseIUC2IUC2SE2_New():
    return itkMovingHistogramImageFilterBaseIUC2IUC2SE2.New()

class itkMovingHistogramImageFilterBaseIUC2IUC2SE2(itkKernelImageFilterIUC2IUC2SE2):
    r"""


    Implements a generic moving histogram algorithm.

    This filter is a base class to implement efficiently many neighborhood
    filters. Instead of visiting all the neighbors of a pixel, the set of
    pixels in the neighborhood is updated when the filter is moving to a
    new pixel. The number of pixels read for each pixel can be very
    smaller than the number of pixels read by a basic algorithm.

    This filter moves the neighborhood over all the pixels of the output
    requested region, and pass the pixel added and removed of the
    neighborhood to the an histogram class. This filter doesn't implement
    the histogram class - it must be implement and passed as template
    parameter. The histogram class is not necessary a real histogram. It
    can be implemented in many ways, and only has to provide the methods
    described below.

    This filter takes 4 template parameters: the input and output image
    type, the structuring element (or kernel) type, and the histogram
    type. The input and output image must have the same number of
    dimension.

    The histogram type is a class which has to implements seven methods: a
    default constructor which takes no parameter.

    void AddPixel( const InputPixelType &p ) is called when a new pixel is
    added to the histogram.

    void RemovePixel( const InputPixelType &p ) is called when a pixel is
    removed of the histogram.

    void AddBoundary() is called when a pixel outside the image is added.
    No value is provided: it's the responsibility to the histogram class
    to get it if needed. This method can be kept empty to ignore the
    boundary pixels.

    void RemoveBoundary() is called to when a pixel outside the image is
    removed. No value is provided: it's the responsibility to the
    histogram class to get it if needed. This method can be kept empty to
    ignore the boundary pixels.

    AType GetValue() is called to set the value of the output image. AType
    must be the output pixel type, or a type castable to the output pixel
    type.

    MovingHistogramImageFilterBase add the new pixels before removing the
    old ones, so, if AddBoundary() is implemented and/or the kernel is
    symmetric, it is safe to consider that the histogram will never be
    empty.

    One histogram is created for each thread by the method NewHistogram().
    The NewHistogram() method can be overriden to pass some parameters to
    the histogram.

    The neighborhood is defined by a structuring element, and must a
    itk::Neighborhood object or a subclass. The structuring element is
    assumed to be composed of binary values (zero or one). Only elements
    of the structuring element having values > 0 are candidates for
    affecting the center pixel.

    See:  MovingWindowMeanImageFilter, RankImageFilter,
    MaskedMovingHistogramImageFilter,

    See:  MovingHistogramMorphologicalGradientImageFilter

    Gaetan Lehmann

    Richard Beare 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUC2IUC2SE2___New_orig__)
    Clone = _swig_new_instance_method(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUC2IUC2SE2_Clone)
    GetPixelsPerTranslation = _swig_new_instance_method(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUC2IUC2SE2_GetPixelsPerTranslation)
    __swig_destroy__ = _itkFlatStructuringElementPython.delete_itkMovingHistogramImageFilterBaseIUC2IUC2SE2
    cast = _swig_new_static_method(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUC2IUC2SE2_cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterBaseIUC2IUC2SE2

        Create a new object of the class itkMovingHistogramImageFilterBaseIUC2IUC2SE2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterBaseIUC2IUC2SE2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterBaseIUC2IUC2SE2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMovingHistogramImageFilterBaseIUC2IUC2SE2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMovingHistogramImageFilterBaseIUC2IUC2SE2 in _itkFlatStructuringElementPython:
_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUC2IUC2SE2_swigregister(itkMovingHistogramImageFilterBaseIUC2IUC2SE2)
itkMovingHistogramImageFilterBaseIUC2IUC2SE2___New_orig__ = _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUC2IUC2SE2___New_orig__
itkMovingHistogramImageFilterBaseIUC2IUC2SE2_cast = _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUC2IUC2SE2_cast


def itkMovingHistogramImageFilterBaseIUC3IUC3SE3_New():
    return itkMovingHistogramImageFilterBaseIUC3IUC3SE3.New()

class itkMovingHistogramImageFilterBaseIUC3IUC3SE3(itkKernelImageFilterIUC3IUC3SE3):
    r"""


    Implements a generic moving histogram algorithm.

    This filter is a base class to implement efficiently many neighborhood
    filters. Instead of visiting all the neighbors of a pixel, the set of
    pixels in the neighborhood is updated when the filter is moving to a
    new pixel. The number of pixels read for each pixel can be very
    smaller than the number of pixels read by a basic algorithm.

    This filter moves the neighborhood over all the pixels of the output
    requested region, and pass the pixel added and removed of the
    neighborhood to the an histogram class. This filter doesn't implement
    the histogram class - it must be implement and passed as template
    parameter. The histogram class is not necessary a real histogram. It
    can be implemented in many ways, and only has to provide the methods
    described below.

    This filter takes 4 template parameters: the input and output image
    type, the structuring element (or kernel) type, and the histogram
    type. The input and output image must have the same number of
    dimension.

    The histogram type is a class which has to implements seven methods: a
    default constructor which takes no parameter.

    void AddPixel( const InputPixelType &p ) is called when a new pixel is
    added to the histogram.

    void RemovePixel( const InputPixelType &p ) is called when a pixel is
    removed of the histogram.

    void AddBoundary() is called when a pixel outside the image is added.
    No value is provided: it's the responsibility to the histogram class
    to get it if needed. This method can be kept empty to ignore the
    boundary pixels.

    void RemoveBoundary() is called to when a pixel outside the image is
    removed. No value is provided: it's the responsibility to the
    histogram class to get it if needed. This method can be kept empty to
    ignore the boundary pixels.

    AType GetValue() is called to set the value of the output image. AType
    must be the output pixel type, or a type castable to the output pixel
    type.

    MovingHistogramImageFilterBase add the new pixels before removing the
    old ones, so, if AddBoundary() is implemented and/or the kernel is
    symmetric, it is safe to consider that the histogram will never be
    empty.

    One histogram is created for each thread by the method NewHistogram().
    The NewHistogram() method can be overriden to pass some parameters to
    the histogram.

    The neighborhood is defined by a structuring element, and must a
    itk::Neighborhood object or a subclass. The structuring element is
    assumed to be composed of binary values (zero or one). Only elements
    of the structuring element having values > 0 are candidates for
    affecting the center pixel.

    See:  MovingWindowMeanImageFilter, RankImageFilter,
    MaskedMovingHistogramImageFilter,

    See:  MovingHistogramMorphologicalGradientImageFilter

    Gaetan Lehmann

    Richard Beare 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUC3IUC3SE3___New_orig__)
    Clone = _swig_new_instance_method(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUC3IUC3SE3_Clone)
    GetPixelsPerTranslation = _swig_new_instance_method(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUC3IUC3SE3_GetPixelsPerTranslation)
    __swig_destroy__ = _itkFlatStructuringElementPython.delete_itkMovingHistogramImageFilterBaseIUC3IUC3SE3
    cast = _swig_new_static_method(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUC3IUC3SE3_cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterBaseIUC3IUC3SE3

        Create a new object of the class itkMovingHistogramImageFilterBaseIUC3IUC3SE3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterBaseIUC3IUC3SE3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterBaseIUC3IUC3SE3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMovingHistogramImageFilterBaseIUC3IUC3SE3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMovingHistogramImageFilterBaseIUC3IUC3SE3 in _itkFlatStructuringElementPython:
_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUC3IUC3SE3_swigregister(itkMovingHistogramImageFilterBaseIUC3IUC3SE3)
itkMovingHistogramImageFilterBaseIUC3IUC3SE3___New_orig__ = _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUC3IUC3SE3___New_orig__
itkMovingHistogramImageFilterBaseIUC3IUC3SE3_cast = _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUC3IUC3SE3_cast


def itkMovingHistogramImageFilterBaseIUS2IUS2SE2_New():
    return itkMovingHistogramImageFilterBaseIUS2IUS2SE2.New()

class itkMovingHistogramImageFilterBaseIUS2IUS2SE2(itkKernelImageFilterIUS2IUS2SE2):
    r"""


    Implements a generic moving histogram algorithm.

    This filter is a base class to implement efficiently many neighborhood
    filters. Instead of visiting all the neighbors of a pixel, the set of
    pixels in the neighborhood is updated when the filter is moving to a
    new pixel. The number of pixels read for each pixel can be very
    smaller than the number of pixels read by a basic algorithm.

    This filter moves the neighborhood over all the pixels of the output
    requested region, and pass the pixel added and removed of the
    neighborhood to the an histogram class. This filter doesn't implement
    the histogram class - it must be implement and passed as template
    parameter. The histogram class is not necessary a real histogram. It
    can be implemented in many ways, and only has to provide the methods
    described below.

    This filter takes 4 template parameters: the input and output image
    type, the structuring element (or kernel) type, and the histogram
    type. The input and output image must have the same number of
    dimension.

    The histogram type is a class which has to implements seven methods: a
    default constructor which takes no parameter.

    void AddPixel( const InputPixelType &p ) is called when a new pixel is
    added to the histogram.

    void RemovePixel( const InputPixelType &p ) is called when a pixel is
    removed of the histogram.

    void AddBoundary() is called when a pixel outside the image is added.
    No value is provided: it's the responsibility to the histogram class
    to get it if needed. This method can be kept empty to ignore the
    boundary pixels.

    void RemoveBoundary() is called to when a pixel outside the image is
    removed. No value is provided: it's the responsibility to the
    histogram class to get it if needed. This method can be kept empty to
    ignore the boundary pixels.

    AType GetValue() is called to set the value of the output image. AType
    must be the output pixel type, or a type castable to the output pixel
    type.

    MovingHistogramImageFilterBase add the new pixels before removing the
    old ones, so, if AddBoundary() is implemented and/or the kernel is
    symmetric, it is safe to consider that the histogram will never be
    empty.

    One histogram is created for each thread by the method NewHistogram().
    The NewHistogram() method can be overriden to pass some parameters to
    the histogram.

    The neighborhood is defined by a structuring element, and must a
    itk::Neighborhood object or a subclass. The structuring element is
    assumed to be composed of binary values (zero or one). Only elements
    of the structuring element having values > 0 are candidates for
    affecting the center pixel.

    See:  MovingWindowMeanImageFilter, RankImageFilter,
    MaskedMovingHistogramImageFilter,

    See:  MovingHistogramMorphologicalGradientImageFilter

    Gaetan Lehmann

    Richard Beare 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUS2IUS2SE2___New_orig__)
    Clone = _swig_new_instance_method(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUS2IUS2SE2_Clone)
    GetPixelsPerTranslation = _swig_new_instance_method(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUS2IUS2SE2_GetPixelsPerTranslation)
    __swig_destroy__ = _itkFlatStructuringElementPython.delete_itkMovingHistogramImageFilterBaseIUS2IUS2SE2
    cast = _swig_new_static_method(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUS2IUS2SE2_cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterBaseIUS2IUS2SE2

        Create a new object of the class itkMovingHistogramImageFilterBaseIUS2IUS2SE2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterBaseIUS2IUS2SE2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterBaseIUS2IUS2SE2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMovingHistogramImageFilterBaseIUS2IUS2SE2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMovingHistogramImageFilterBaseIUS2IUS2SE2 in _itkFlatStructuringElementPython:
_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUS2IUS2SE2_swigregister(itkMovingHistogramImageFilterBaseIUS2IUS2SE2)
itkMovingHistogramImageFilterBaseIUS2IUS2SE2___New_orig__ = _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUS2IUS2SE2___New_orig__
itkMovingHistogramImageFilterBaseIUS2IUS2SE2_cast = _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUS2IUS2SE2_cast


def itkMovingHistogramImageFilterBaseIUS3IUS3SE3_New():
    return itkMovingHistogramImageFilterBaseIUS3IUS3SE3.New()

class itkMovingHistogramImageFilterBaseIUS3IUS3SE3(itkKernelImageFilterIUS3IUS3SE3):
    r"""


    Implements a generic moving histogram algorithm.

    This filter is a base class to implement efficiently many neighborhood
    filters. Instead of visiting all the neighbors of a pixel, the set of
    pixels in the neighborhood is updated when the filter is moving to a
    new pixel. The number of pixels read for each pixel can be very
    smaller than the number of pixels read by a basic algorithm.

    This filter moves the neighborhood over all the pixels of the output
    requested region, and pass the pixel added and removed of the
    neighborhood to the an histogram class. This filter doesn't implement
    the histogram class - it must be implement and passed as template
    parameter. The histogram class is not necessary a real histogram. It
    can be implemented in many ways, and only has to provide the methods
    described below.

    This filter takes 4 template parameters: the input and output image
    type, the structuring element (or kernel) type, and the histogram
    type. The input and output image must have the same number of
    dimension.

    The histogram type is a class which has to implements seven methods: a
    default constructor which takes no parameter.

    void AddPixel( const InputPixelType &p ) is called when a new pixel is
    added to the histogram.

    void RemovePixel( const InputPixelType &p ) is called when a pixel is
    removed of the histogram.

    void AddBoundary() is called when a pixel outside the image is added.
    No value is provided: it's the responsibility to the histogram class
    to get it if needed. This method can be kept empty to ignore the
    boundary pixels.

    void RemoveBoundary() is called to when a pixel outside the image is
    removed. No value is provided: it's the responsibility to the
    histogram class to get it if needed. This method can be kept empty to
    ignore the boundary pixels.

    AType GetValue() is called to set the value of the output image. AType
    must be the output pixel type, or a type castable to the output pixel
    type.

    MovingHistogramImageFilterBase add the new pixels before removing the
    old ones, so, if AddBoundary() is implemented and/or the kernel is
    symmetric, it is safe to consider that the histogram will never be
    empty.

    One histogram is created for each thread by the method NewHistogram().
    The NewHistogram() method can be overriden to pass some parameters to
    the histogram.

    The neighborhood is defined by a structuring element, and must a
    itk::Neighborhood object or a subclass. The structuring element is
    assumed to be composed of binary values (zero or one). Only elements
    of the structuring element having values > 0 are candidates for
    affecting the center pixel.

    See:  MovingWindowMeanImageFilter, RankImageFilter,
    MaskedMovingHistogramImageFilter,

    See:  MovingHistogramMorphologicalGradientImageFilter

    Gaetan Lehmann

    Richard Beare 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUS3IUS3SE3___New_orig__)
    Clone = _swig_new_instance_method(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUS3IUS3SE3_Clone)
    GetPixelsPerTranslation = _swig_new_instance_method(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUS3IUS3SE3_GetPixelsPerTranslation)
    __swig_destroy__ = _itkFlatStructuringElementPython.delete_itkMovingHistogramImageFilterBaseIUS3IUS3SE3
    cast = _swig_new_static_method(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUS3IUS3SE3_cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterBaseIUS3IUS3SE3

        Create a new object of the class itkMovingHistogramImageFilterBaseIUS3IUS3SE3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterBaseIUS3IUS3SE3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterBaseIUS3IUS3SE3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMovingHistogramImageFilterBaseIUS3IUS3SE3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMovingHistogramImageFilterBaseIUS3IUS3SE3 in _itkFlatStructuringElementPython:
_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUS3IUS3SE3_swigregister(itkMovingHistogramImageFilterBaseIUS3IUS3SE3)
itkMovingHistogramImageFilterBaseIUS3IUS3SE3___New_orig__ = _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUS3IUS3SE3___New_orig__
itkMovingHistogramImageFilterBaseIUS3IUS3SE3_cast = _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUS3IUS3SE3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def moving_histogram_image_filter_base(*args, **kwargs):
    """Procedural interface for MovingHistogramImageFilterBase"""
    import itk
    instance = itk.MovingHistogramImageFilterBase.New(*args, **kwargs)
    return instance.__internal_call__()

def moving_histogram_image_filter_base_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.MovingHistogramImageFilterBase, itkTemplate.itkTemplate):
        filter_object = itk.MovingHistogramImageFilterBase.values()[0]
    else:
        filter_object = itk.MovingHistogramImageFilterBase

    moving_histogram_image_filter_base.__doc__ = filter_object.__doc__
    moving_histogram_image_filter_base.__doc__ += "\n Args are Input(s) to the filter.\n"
    moving_histogram_image_filter_base.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.MovingHistogramImageFilterBase, itkTemplate.itkTemplate):
        moving_histogram_image_filter_base.__doc__ += itkHelpers.filter_args(filter_object)[0]
        moving_histogram_image_filter_base.__doc__ += "\n"
        moving_histogram_image_filter_base.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        moving_histogram_image_filter_base.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])
import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def kernel_image_filter(*args, **kwargs):
    """Procedural interface for KernelImageFilter"""
    import itk
    instance = itk.KernelImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def kernel_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.KernelImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.KernelImageFilter.values()[0]
    else:
        filter_object = itk.KernelImageFilter

    kernel_image_filter.__doc__ = filter_object.__doc__
    kernel_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    kernel_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.KernelImageFilter, itkTemplate.itkTemplate):
        kernel_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        kernel_image_filter.__doc__ += "\n"
        kernel_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        kernel_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



