# coding: utf-8

"""
    ExaVault API

    See our API reference documentation at https://www.exavault.com/developer/api-docs/  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@exavault.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResourceRelationships(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'share': 'ResourceRelationshipsShare',
        'notifications': 'list[ResourceRelationshipsNotifications]',
        'direct_file': 'ResourceRelationshipsDirectFile',
        'parent_resource': 'ResourceRelationshipsParentResource'
    }

    attribute_map = {
        'share': 'share',
        'notifications': 'notifications',
        'direct_file': 'directFile',
        'parent_resource': 'parentResource'
    }

    def __init__(self, share=None, notifications=None, direct_file=None, parent_resource=None):  # noqa: E501
        """ResourceRelationships - a model defined in Swagger"""  # noqa: E501
        self._share = None
        self._notifications = None
        self._direct_file = None
        self._parent_resource = None
        self.discriminator = None
        if share is not None:
            self.share = share
        if notifications is not None:
            self.notifications = notifications
        if direct_file is not None:
            self.direct_file = direct_file
        if parent_resource is not None:
            self.parent_resource = parent_resource

    @property
    def share(self):
        """Gets the share of this ResourceRelationships.  # noqa: E501


        :return: The share of this ResourceRelationships.  # noqa: E501
        :rtype: ResourceRelationshipsShare
        """
        return self._share

    @share.setter
    def share(self, share):
        """Sets the share of this ResourceRelationships.


        :param share: The share of this ResourceRelationships.  # noqa: E501
        :type: ResourceRelationshipsShare
        """

        self._share = share

    @property
    def notifications(self):
        """Gets the notifications of this ResourceRelationships.  # noqa: E501


        :return: The notifications of this ResourceRelationships.  # noqa: E501
        :rtype: list[ResourceRelationshipsNotifications]
        """
        return self._notifications

    @notifications.setter
    def notifications(self, notifications):
        """Sets the notifications of this ResourceRelationships.


        :param notifications: The notifications of this ResourceRelationships.  # noqa: E501
        :type: list[ResourceRelationshipsNotifications]
        """

        self._notifications = notifications

    @property
    def direct_file(self):
        """Gets the direct_file of this ResourceRelationships.  # noqa: E501


        :return: The direct_file of this ResourceRelationships.  # noqa: E501
        :rtype: ResourceRelationshipsDirectFile
        """
        return self._direct_file

    @direct_file.setter
    def direct_file(self, direct_file):
        """Sets the direct_file of this ResourceRelationships.


        :param direct_file: The direct_file of this ResourceRelationships.  # noqa: E501
        :type: ResourceRelationshipsDirectFile
        """

        self._direct_file = direct_file

    @property
    def parent_resource(self):
        """Gets the parent_resource of this ResourceRelationships.  # noqa: E501


        :return: The parent_resource of this ResourceRelationships.  # noqa: E501
        :rtype: ResourceRelationshipsParentResource
        """
        return self._parent_resource

    @parent_resource.setter
    def parent_resource(self, parent_resource):
        """Sets the parent_resource of this ResourceRelationships.


        :param parent_resource: The parent_resource of this ResourceRelationships.  # noqa: E501
        :type: ResourceRelationshipsParentResource
        """

        self._parent_resource = parent_resource

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResourceRelationships, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourceRelationships):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
