# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageIntensityPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkPowImageFilterPython
else:
    import _itkPowImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkPowImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkPowImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkBinaryGeneratorImageFilterPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkVectorImagePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkImagePython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterAPython
import itk.itkSimpleDataObjectDecoratorPython
import itk.itkArrayPython
import itk.itkInPlaceImageFilterBPython

def itkPowImageFilterID2ID2ID2_New():
    return itkPowImageFilterID2ID2ID2.New()

class itkPowImageFilterID2ID2ID2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID2ID2ID2):
    r"""


    Computes the powers of 2 images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    The output of the pow function will be cast to the pixel type of the
    output image.

    The total operation over one pixel will be

    The pow function can be applied to two images with the following:

    Additionally, this filter can be used to raise every pixel of an image
    to a power of a constant by using 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPowImageFilterPython.itkPowImageFilterID2ID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkPowImageFilterPython.itkPowImageFilterID2ID2ID2_Clone)
    __swig_destroy__ = _itkPowImageFilterPython.delete_itkPowImageFilterID2ID2ID2
    cast = _swig_new_static_method(_itkPowImageFilterPython.itkPowImageFilterID2ID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkPowImageFilterID2ID2ID2

        Create a new object of the class itkPowImageFilterID2ID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPowImageFilterID2ID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPowImageFilterID2ID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPowImageFilterID2ID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPowImageFilterID2ID2ID2 in _itkPowImageFilterPython:
_itkPowImageFilterPython.itkPowImageFilterID2ID2ID2_swigregister(itkPowImageFilterID2ID2ID2)
itkPowImageFilterID2ID2ID2___New_orig__ = _itkPowImageFilterPython.itkPowImageFilterID2ID2ID2___New_orig__
itkPowImageFilterID2ID2ID2_cast = _itkPowImageFilterPython.itkPowImageFilterID2ID2ID2_cast


def itkPowImageFilterID3ID3ID3_New():
    return itkPowImageFilterID3ID3ID3.New()

class itkPowImageFilterID3ID3ID3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID3ID3ID3):
    r"""


    Computes the powers of 2 images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    The output of the pow function will be cast to the pixel type of the
    output image.

    The total operation over one pixel will be

    The pow function can be applied to two images with the following:

    Additionally, this filter can be used to raise every pixel of an image
    to a power of a constant by using 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPowImageFilterPython.itkPowImageFilterID3ID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkPowImageFilterPython.itkPowImageFilterID3ID3ID3_Clone)
    __swig_destroy__ = _itkPowImageFilterPython.delete_itkPowImageFilterID3ID3ID3
    cast = _swig_new_static_method(_itkPowImageFilterPython.itkPowImageFilterID3ID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkPowImageFilterID3ID3ID3

        Create a new object of the class itkPowImageFilterID3ID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPowImageFilterID3ID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPowImageFilterID3ID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPowImageFilterID3ID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPowImageFilterID3ID3ID3 in _itkPowImageFilterPython:
_itkPowImageFilterPython.itkPowImageFilterID3ID3ID3_swigregister(itkPowImageFilterID3ID3ID3)
itkPowImageFilterID3ID3ID3___New_orig__ = _itkPowImageFilterPython.itkPowImageFilterID3ID3ID3___New_orig__
itkPowImageFilterID3ID3ID3_cast = _itkPowImageFilterPython.itkPowImageFilterID3ID3ID3_cast


def itkPowImageFilterIF2IF2IF2_New():
    return itkPowImageFilterIF2IF2IF2.New()

class itkPowImageFilterIF2IF2IF2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF2IF2IF2):
    r"""


    Computes the powers of 2 images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    The output of the pow function will be cast to the pixel type of the
    output image.

    The total operation over one pixel will be

    The pow function can be applied to two images with the following:

    Additionally, this filter can be used to raise every pixel of an image
    to a power of a constant by using 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPowImageFilterPython.itkPowImageFilterIF2IF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkPowImageFilterPython.itkPowImageFilterIF2IF2IF2_Clone)
    __swig_destroy__ = _itkPowImageFilterPython.delete_itkPowImageFilterIF2IF2IF2
    cast = _swig_new_static_method(_itkPowImageFilterPython.itkPowImageFilterIF2IF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkPowImageFilterIF2IF2IF2

        Create a new object of the class itkPowImageFilterIF2IF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPowImageFilterIF2IF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPowImageFilterIF2IF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPowImageFilterIF2IF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPowImageFilterIF2IF2IF2 in _itkPowImageFilterPython:
_itkPowImageFilterPython.itkPowImageFilterIF2IF2IF2_swigregister(itkPowImageFilterIF2IF2IF2)
itkPowImageFilterIF2IF2IF2___New_orig__ = _itkPowImageFilterPython.itkPowImageFilterIF2IF2IF2___New_orig__
itkPowImageFilterIF2IF2IF2_cast = _itkPowImageFilterPython.itkPowImageFilterIF2IF2IF2_cast


def itkPowImageFilterIF3IF3IF3_New():
    return itkPowImageFilterIF3IF3IF3.New()

class itkPowImageFilterIF3IF3IF3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF3IF3IF3):
    r"""


    Computes the powers of 2 images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    The output of the pow function will be cast to the pixel type of the
    output image.

    The total operation over one pixel will be

    The pow function can be applied to two images with the following:

    Additionally, this filter can be used to raise every pixel of an image
    to a power of a constant by using 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPowImageFilterPython.itkPowImageFilterIF3IF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkPowImageFilterPython.itkPowImageFilterIF3IF3IF3_Clone)
    __swig_destroy__ = _itkPowImageFilterPython.delete_itkPowImageFilterIF3IF3IF3
    cast = _swig_new_static_method(_itkPowImageFilterPython.itkPowImageFilterIF3IF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkPowImageFilterIF3IF3IF3

        Create a new object of the class itkPowImageFilterIF3IF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPowImageFilterIF3IF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPowImageFilterIF3IF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPowImageFilterIF3IF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPowImageFilterIF3IF3IF3 in _itkPowImageFilterPython:
_itkPowImageFilterPython.itkPowImageFilterIF3IF3IF3_swigregister(itkPowImageFilterIF3IF3IF3)
itkPowImageFilterIF3IF3IF3___New_orig__ = _itkPowImageFilterPython.itkPowImageFilterIF3IF3IF3___New_orig__
itkPowImageFilterIF3IF3IF3_cast = _itkPowImageFilterPython.itkPowImageFilterIF3IF3IF3_cast


def itkPowImageFilterISS2ISS2ISS2_New():
    return itkPowImageFilterISS2ISS2ISS2.New()

class itkPowImageFilterISS2ISS2ISS2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS2ISS2ISS2):
    r"""


    Computes the powers of 2 images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    The output of the pow function will be cast to the pixel type of the
    output image.

    The total operation over one pixel will be

    The pow function can be applied to two images with the following:

    Additionally, this filter can be used to raise every pixel of an image
    to a power of a constant by using 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPowImageFilterPython.itkPowImageFilterISS2ISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkPowImageFilterPython.itkPowImageFilterISS2ISS2ISS2_Clone)
    __swig_destroy__ = _itkPowImageFilterPython.delete_itkPowImageFilterISS2ISS2ISS2
    cast = _swig_new_static_method(_itkPowImageFilterPython.itkPowImageFilterISS2ISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkPowImageFilterISS2ISS2ISS2

        Create a new object of the class itkPowImageFilterISS2ISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPowImageFilterISS2ISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPowImageFilterISS2ISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPowImageFilterISS2ISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPowImageFilterISS2ISS2ISS2 in _itkPowImageFilterPython:
_itkPowImageFilterPython.itkPowImageFilterISS2ISS2ISS2_swigregister(itkPowImageFilterISS2ISS2ISS2)
itkPowImageFilterISS2ISS2ISS2___New_orig__ = _itkPowImageFilterPython.itkPowImageFilterISS2ISS2ISS2___New_orig__
itkPowImageFilterISS2ISS2ISS2_cast = _itkPowImageFilterPython.itkPowImageFilterISS2ISS2ISS2_cast


def itkPowImageFilterISS3ISS3ISS3_New():
    return itkPowImageFilterISS3ISS3ISS3.New()

class itkPowImageFilterISS3ISS3ISS3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS3ISS3ISS3):
    r"""


    Computes the powers of 2 images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    The output of the pow function will be cast to the pixel type of the
    output image.

    The total operation over one pixel will be

    The pow function can be applied to two images with the following:

    Additionally, this filter can be used to raise every pixel of an image
    to a power of a constant by using 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPowImageFilterPython.itkPowImageFilterISS3ISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkPowImageFilterPython.itkPowImageFilterISS3ISS3ISS3_Clone)
    __swig_destroy__ = _itkPowImageFilterPython.delete_itkPowImageFilterISS3ISS3ISS3
    cast = _swig_new_static_method(_itkPowImageFilterPython.itkPowImageFilterISS3ISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkPowImageFilterISS3ISS3ISS3

        Create a new object of the class itkPowImageFilterISS3ISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPowImageFilterISS3ISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPowImageFilterISS3ISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPowImageFilterISS3ISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPowImageFilterISS3ISS3ISS3 in _itkPowImageFilterPython:
_itkPowImageFilterPython.itkPowImageFilterISS3ISS3ISS3_swigregister(itkPowImageFilterISS3ISS3ISS3)
itkPowImageFilterISS3ISS3ISS3___New_orig__ = _itkPowImageFilterPython.itkPowImageFilterISS3ISS3ISS3___New_orig__
itkPowImageFilterISS3ISS3ISS3_cast = _itkPowImageFilterPython.itkPowImageFilterISS3ISS3ISS3_cast


def itkPowImageFilterIUC2IUC2IUC2_New():
    return itkPowImageFilterIUC2IUC2IUC2.New()

class itkPowImageFilterIUC2IUC2IUC2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC2IUC2IUC2):
    r"""


    Computes the powers of 2 images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    The output of the pow function will be cast to the pixel type of the
    output image.

    The total operation over one pixel will be

    The pow function can be applied to two images with the following:

    Additionally, this filter can be used to raise every pixel of an image
    to a power of a constant by using 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPowImageFilterPython.itkPowImageFilterIUC2IUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkPowImageFilterPython.itkPowImageFilterIUC2IUC2IUC2_Clone)
    __swig_destroy__ = _itkPowImageFilterPython.delete_itkPowImageFilterIUC2IUC2IUC2
    cast = _swig_new_static_method(_itkPowImageFilterPython.itkPowImageFilterIUC2IUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkPowImageFilterIUC2IUC2IUC2

        Create a new object of the class itkPowImageFilterIUC2IUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPowImageFilterIUC2IUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPowImageFilterIUC2IUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPowImageFilterIUC2IUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPowImageFilterIUC2IUC2IUC2 in _itkPowImageFilterPython:
_itkPowImageFilterPython.itkPowImageFilterIUC2IUC2IUC2_swigregister(itkPowImageFilterIUC2IUC2IUC2)
itkPowImageFilterIUC2IUC2IUC2___New_orig__ = _itkPowImageFilterPython.itkPowImageFilterIUC2IUC2IUC2___New_orig__
itkPowImageFilterIUC2IUC2IUC2_cast = _itkPowImageFilterPython.itkPowImageFilterIUC2IUC2IUC2_cast


def itkPowImageFilterIUC3IUC3IUC3_New():
    return itkPowImageFilterIUC3IUC3IUC3.New()

class itkPowImageFilterIUC3IUC3IUC3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC3IUC3IUC3):
    r"""


    Computes the powers of 2 images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    The output of the pow function will be cast to the pixel type of the
    output image.

    The total operation over one pixel will be

    The pow function can be applied to two images with the following:

    Additionally, this filter can be used to raise every pixel of an image
    to a power of a constant by using 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPowImageFilterPython.itkPowImageFilterIUC3IUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkPowImageFilterPython.itkPowImageFilterIUC3IUC3IUC3_Clone)
    __swig_destroy__ = _itkPowImageFilterPython.delete_itkPowImageFilterIUC3IUC3IUC3
    cast = _swig_new_static_method(_itkPowImageFilterPython.itkPowImageFilterIUC3IUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkPowImageFilterIUC3IUC3IUC3

        Create a new object of the class itkPowImageFilterIUC3IUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPowImageFilterIUC3IUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPowImageFilterIUC3IUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPowImageFilterIUC3IUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPowImageFilterIUC3IUC3IUC3 in _itkPowImageFilterPython:
_itkPowImageFilterPython.itkPowImageFilterIUC3IUC3IUC3_swigregister(itkPowImageFilterIUC3IUC3IUC3)
itkPowImageFilterIUC3IUC3IUC3___New_orig__ = _itkPowImageFilterPython.itkPowImageFilterIUC3IUC3IUC3___New_orig__
itkPowImageFilterIUC3IUC3IUC3_cast = _itkPowImageFilterPython.itkPowImageFilterIUC3IUC3IUC3_cast


def itkPowImageFilterIUS2IUS2IUS2_New():
    return itkPowImageFilterIUS2IUS2IUS2.New()

class itkPowImageFilterIUS2IUS2IUS2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS2IUS2IUS2):
    r"""


    Computes the powers of 2 images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    The output of the pow function will be cast to the pixel type of the
    output image.

    The total operation over one pixel will be

    The pow function can be applied to two images with the following:

    Additionally, this filter can be used to raise every pixel of an image
    to a power of a constant by using 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPowImageFilterPython.itkPowImageFilterIUS2IUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkPowImageFilterPython.itkPowImageFilterIUS2IUS2IUS2_Clone)
    __swig_destroy__ = _itkPowImageFilterPython.delete_itkPowImageFilterIUS2IUS2IUS2
    cast = _swig_new_static_method(_itkPowImageFilterPython.itkPowImageFilterIUS2IUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkPowImageFilterIUS2IUS2IUS2

        Create a new object of the class itkPowImageFilterIUS2IUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPowImageFilterIUS2IUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPowImageFilterIUS2IUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPowImageFilterIUS2IUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPowImageFilterIUS2IUS2IUS2 in _itkPowImageFilterPython:
_itkPowImageFilterPython.itkPowImageFilterIUS2IUS2IUS2_swigregister(itkPowImageFilterIUS2IUS2IUS2)
itkPowImageFilterIUS2IUS2IUS2___New_orig__ = _itkPowImageFilterPython.itkPowImageFilterIUS2IUS2IUS2___New_orig__
itkPowImageFilterIUS2IUS2IUS2_cast = _itkPowImageFilterPython.itkPowImageFilterIUS2IUS2IUS2_cast


def itkPowImageFilterIUS3IUS3IUS3_New():
    return itkPowImageFilterIUS3IUS3IUS3.New()

class itkPowImageFilterIUS3IUS3IUS3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS3IUS3IUS3):
    r"""


    Computes the powers of 2 images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    The output of the pow function will be cast to the pixel type of the
    output image.

    The total operation over one pixel will be

    The pow function can be applied to two images with the following:

    Additionally, this filter can be used to raise every pixel of an image
    to a power of a constant by using 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPowImageFilterPython.itkPowImageFilterIUS3IUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkPowImageFilterPython.itkPowImageFilterIUS3IUS3IUS3_Clone)
    __swig_destroy__ = _itkPowImageFilterPython.delete_itkPowImageFilterIUS3IUS3IUS3
    cast = _swig_new_static_method(_itkPowImageFilterPython.itkPowImageFilterIUS3IUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkPowImageFilterIUS3IUS3IUS3

        Create a new object of the class itkPowImageFilterIUS3IUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPowImageFilterIUS3IUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPowImageFilterIUS3IUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPowImageFilterIUS3IUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPowImageFilterIUS3IUS3IUS3 in _itkPowImageFilterPython:
_itkPowImageFilterPython.itkPowImageFilterIUS3IUS3IUS3_swigregister(itkPowImageFilterIUS3IUS3IUS3)
itkPowImageFilterIUS3IUS3IUS3___New_orig__ = _itkPowImageFilterPython.itkPowImageFilterIUS3IUS3IUS3___New_orig__
itkPowImageFilterIUS3IUS3IUS3_cast = _itkPowImageFilterPython.itkPowImageFilterIUS3IUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def pow_image_filter(*args, **kwargs):
    """Procedural interface for PowImageFilter"""
    import itk
    instance = itk.PowImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def pow_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.PowImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.PowImageFilter.values()[0]
    else:
        filter_object = itk.PowImageFilter

    pow_image_filter.__doc__ = filter_object.__doc__
    pow_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    pow_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.PowImageFilter, itkTemplate.itkTemplate):
        pow_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        pow_image_filter.__doc__ += "\n"
        pow_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        pow_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



