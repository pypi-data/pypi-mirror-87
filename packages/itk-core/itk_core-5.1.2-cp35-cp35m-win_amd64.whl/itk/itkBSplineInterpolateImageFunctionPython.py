# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageFunctionPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkBSplineInterpolateImageFunctionPython
else:
    import _itkBSplineInterpolateImageFunctionPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkBSplineInterpolateImageFunctionPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkBSplineInterpolateImageFunctionPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.itkPointPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.itkContinuousIndexPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkCovariantVectorPython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkInterpolateImageFunctionPython
import itk.itkImageFunctionBasePython
import itk.itkFunctionBasePython
import itk.itkArrayPython

def itkBSplineInterpolateImageFunctionID2DD_New():
    return itkBSplineInterpolateImageFunctionID2DD.New()

class itkBSplineInterpolateImageFunctionID2DD(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID2D):
    r"""


    Evaluates the B-Spline interpolation of an image. Spline order may be
    from 0 to 5.

    This class defines N-Dimension B-Spline transformation. It is based
    on:[1] M. Unser,     "Splines: A Perfect Fit for Signal and Image
    Processing,"     IEEE Signal Processing Magazine, vol. 16, no. 6, pp.
    22-38,     November 1999. [2] M. Unser, A. Aldroubi and M. Eden,
    "B-Spline Signal Processing: Part I--Theory,"     IEEE Transactions
    on Signal Processing, vol. 41, no. 2, pp. 821-832,     February 1993.
    [3] M. Unser, A. Aldroubi and M. Eden,     "B-Spline Signal
    Processing: Part II--Efficient Design and Applications,"      IEEE
    Transactions on Signal Processing, vol. 41, no. 2, pp. 834-848,
    February 1993. And code obtained from bigwww.epfl.ch by Philippe
    Thevenaz

    The B spline coefficients are calculated through the
    BSplineDecompositionImageFilter

    Limitations: Spline order must be between 0 and 5. Spline order must
    be set before setting the image. Uses mirror boundary conditions.
    Requires the same order of Spline for each dimension. Spline is
    determined in all dimensions, cannot selectively pick dimension for
    calculating spline.

    See:   BSplineDecompositionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD___New_orig__)
    Clone = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_Clone)
    Evaluate = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_Evaluate)
    EvaluateAtContinuousIndex = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_EvaluateAtContinuousIndex)
    EvaluateDerivative = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_EvaluateDerivative)
    EvaluateDerivativeAtContinuousIndex = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_EvaluateDerivativeAtContinuousIndex)
    EvaluateValueAndDerivative = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_EvaluateValueAndDerivative)
    EvaluateValueAndDerivativeAtContinuousIndex = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_EvaluateValueAndDerivativeAtContinuousIndex)
    SetSplineOrder = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_GetSplineOrder)
    SetNumberOfWorkUnits = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_SetNumberOfWorkUnits)
    GetNumberOfWorkUnits = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_GetNumberOfWorkUnits)
    SetUseImageDirection = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_SetUseImageDirection)
    GetUseImageDirection = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_GetUseImageDirection)
    UseImageDirectionOn = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_UseImageDirectionOn)
    UseImageDirectionOff = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_UseImageDirectionOff)
    __swig_destroy__ = _itkBSplineInterpolateImageFunctionPython.delete_itkBSplineInterpolateImageFunctionID2DD
    cast = _swig_new_static_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_cast)

    def New(*args, **kargs):
        """New() -> itkBSplineInterpolateImageFunctionID2DD

        Create a new object of the class itkBSplineInterpolateImageFunctionID2DD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineInterpolateImageFunctionID2DD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineInterpolateImageFunctionID2DD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineInterpolateImageFunctionID2DD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineInterpolateImageFunctionID2DD in _itkBSplineInterpolateImageFunctionPython:
_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_swigregister(itkBSplineInterpolateImageFunctionID2DD)
itkBSplineInterpolateImageFunctionID2DD___New_orig__ = _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD___New_orig__
itkBSplineInterpolateImageFunctionID2DD_cast = _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_cast


def itkBSplineInterpolateImageFunctionID3DD_New():
    return itkBSplineInterpolateImageFunctionID3DD.New()

class itkBSplineInterpolateImageFunctionID3DD(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID3D):
    r"""


    Evaluates the B-Spline interpolation of an image. Spline order may be
    from 0 to 5.

    This class defines N-Dimension B-Spline transformation. It is based
    on:[1] M. Unser,     "Splines: A Perfect Fit for Signal and Image
    Processing,"     IEEE Signal Processing Magazine, vol. 16, no. 6, pp.
    22-38,     November 1999. [2] M. Unser, A. Aldroubi and M. Eden,
    "B-Spline Signal Processing: Part I--Theory,"     IEEE Transactions
    on Signal Processing, vol. 41, no. 2, pp. 821-832,     February 1993.
    [3] M. Unser, A. Aldroubi and M. Eden,     "B-Spline Signal
    Processing: Part II--Efficient Design and Applications,"      IEEE
    Transactions on Signal Processing, vol. 41, no. 2, pp. 834-848,
    February 1993. And code obtained from bigwww.epfl.ch by Philippe
    Thevenaz

    The B spline coefficients are calculated through the
    BSplineDecompositionImageFilter

    Limitations: Spline order must be between 0 and 5. Spline order must
    be set before setting the image. Uses mirror boundary conditions.
    Requires the same order of Spline for each dimension. Spline is
    determined in all dimensions, cannot selectively pick dimension for
    calculating spline.

    See:   BSplineDecompositionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD___New_orig__)
    Clone = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_Clone)
    Evaluate = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_Evaluate)
    EvaluateAtContinuousIndex = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_EvaluateAtContinuousIndex)
    EvaluateDerivative = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_EvaluateDerivative)
    EvaluateDerivativeAtContinuousIndex = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_EvaluateDerivativeAtContinuousIndex)
    EvaluateValueAndDerivative = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_EvaluateValueAndDerivative)
    EvaluateValueAndDerivativeAtContinuousIndex = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_EvaluateValueAndDerivativeAtContinuousIndex)
    SetSplineOrder = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_GetSplineOrder)
    SetNumberOfWorkUnits = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_SetNumberOfWorkUnits)
    GetNumberOfWorkUnits = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_GetNumberOfWorkUnits)
    SetUseImageDirection = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_SetUseImageDirection)
    GetUseImageDirection = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_GetUseImageDirection)
    UseImageDirectionOn = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_UseImageDirectionOn)
    UseImageDirectionOff = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_UseImageDirectionOff)
    __swig_destroy__ = _itkBSplineInterpolateImageFunctionPython.delete_itkBSplineInterpolateImageFunctionID3DD
    cast = _swig_new_static_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_cast)

    def New(*args, **kargs):
        """New() -> itkBSplineInterpolateImageFunctionID3DD

        Create a new object of the class itkBSplineInterpolateImageFunctionID3DD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineInterpolateImageFunctionID3DD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineInterpolateImageFunctionID3DD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineInterpolateImageFunctionID3DD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineInterpolateImageFunctionID3DD in _itkBSplineInterpolateImageFunctionPython:
_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_swigregister(itkBSplineInterpolateImageFunctionID3DD)
itkBSplineInterpolateImageFunctionID3DD___New_orig__ = _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD___New_orig__
itkBSplineInterpolateImageFunctionID3DD_cast = _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_cast


def itkBSplineInterpolateImageFunctionIF2DF_New():
    return itkBSplineInterpolateImageFunctionIF2DF.New()

class itkBSplineInterpolateImageFunctionIF2DF(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF2D):
    r"""


    Evaluates the B-Spline interpolation of an image. Spline order may be
    from 0 to 5.

    This class defines N-Dimension B-Spline transformation. It is based
    on:[1] M. Unser,     "Splines: A Perfect Fit for Signal and Image
    Processing,"     IEEE Signal Processing Magazine, vol. 16, no. 6, pp.
    22-38,     November 1999. [2] M. Unser, A. Aldroubi and M. Eden,
    "B-Spline Signal Processing: Part I--Theory,"     IEEE Transactions
    on Signal Processing, vol. 41, no. 2, pp. 821-832,     February 1993.
    [3] M. Unser, A. Aldroubi and M. Eden,     "B-Spline Signal
    Processing: Part II--Efficient Design and Applications,"      IEEE
    Transactions on Signal Processing, vol. 41, no. 2, pp. 834-848,
    February 1993. And code obtained from bigwww.epfl.ch by Philippe
    Thevenaz

    The B spline coefficients are calculated through the
    BSplineDecompositionImageFilter

    Limitations: Spline order must be between 0 and 5. Spline order must
    be set before setting the image. Uses mirror boundary conditions.
    Requires the same order of Spline for each dimension. Spline is
    determined in all dimensions, cannot selectively pick dimension for
    calculating spline.

    See:   BSplineDecompositionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF___New_orig__)
    Clone = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_Clone)
    Evaluate = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_Evaluate)
    EvaluateAtContinuousIndex = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_EvaluateAtContinuousIndex)
    EvaluateDerivative = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_EvaluateDerivative)
    EvaluateDerivativeAtContinuousIndex = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_EvaluateDerivativeAtContinuousIndex)
    EvaluateValueAndDerivative = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_EvaluateValueAndDerivative)
    EvaluateValueAndDerivativeAtContinuousIndex = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_EvaluateValueAndDerivativeAtContinuousIndex)
    SetSplineOrder = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_GetSplineOrder)
    SetNumberOfWorkUnits = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_SetNumberOfWorkUnits)
    GetNumberOfWorkUnits = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_GetNumberOfWorkUnits)
    SetUseImageDirection = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_SetUseImageDirection)
    GetUseImageDirection = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_GetUseImageDirection)
    UseImageDirectionOn = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_UseImageDirectionOn)
    UseImageDirectionOff = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_UseImageDirectionOff)
    __swig_destroy__ = _itkBSplineInterpolateImageFunctionPython.delete_itkBSplineInterpolateImageFunctionIF2DF
    cast = _swig_new_static_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_cast)

    def New(*args, **kargs):
        """New() -> itkBSplineInterpolateImageFunctionIF2DF

        Create a new object of the class itkBSplineInterpolateImageFunctionIF2DF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineInterpolateImageFunctionIF2DF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineInterpolateImageFunctionIF2DF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineInterpolateImageFunctionIF2DF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineInterpolateImageFunctionIF2DF in _itkBSplineInterpolateImageFunctionPython:
_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_swigregister(itkBSplineInterpolateImageFunctionIF2DF)
itkBSplineInterpolateImageFunctionIF2DF___New_orig__ = _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF___New_orig__
itkBSplineInterpolateImageFunctionIF2DF_cast = _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_cast


def itkBSplineInterpolateImageFunctionIF3DF_New():
    return itkBSplineInterpolateImageFunctionIF3DF.New()

class itkBSplineInterpolateImageFunctionIF3DF(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF3D):
    r"""


    Evaluates the B-Spline interpolation of an image. Spline order may be
    from 0 to 5.

    This class defines N-Dimension B-Spline transformation. It is based
    on:[1] M. Unser,     "Splines: A Perfect Fit for Signal and Image
    Processing,"     IEEE Signal Processing Magazine, vol. 16, no. 6, pp.
    22-38,     November 1999. [2] M. Unser, A. Aldroubi and M. Eden,
    "B-Spline Signal Processing: Part I--Theory,"     IEEE Transactions
    on Signal Processing, vol. 41, no. 2, pp. 821-832,     February 1993.
    [3] M. Unser, A. Aldroubi and M. Eden,     "B-Spline Signal
    Processing: Part II--Efficient Design and Applications,"      IEEE
    Transactions on Signal Processing, vol. 41, no. 2, pp. 834-848,
    February 1993. And code obtained from bigwww.epfl.ch by Philippe
    Thevenaz

    The B spline coefficients are calculated through the
    BSplineDecompositionImageFilter

    Limitations: Spline order must be between 0 and 5. Spline order must
    be set before setting the image. Uses mirror boundary conditions.
    Requires the same order of Spline for each dimension. Spline is
    determined in all dimensions, cannot selectively pick dimension for
    calculating spline.

    See:   BSplineDecompositionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF___New_orig__)
    Clone = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_Clone)
    Evaluate = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_Evaluate)
    EvaluateAtContinuousIndex = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_EvaluateAtContinuousIndex)
    EvaluateDerivative = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_EvaluateDerivative)
    EvaluateDerivativeAtContinuousIndex = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_EvaluateDerivativeAtContinuousIndex)
    EvaluateValueAndDerivative = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_EvaluateValueAndDerivative)
    EvaluateValueAndDerivativeAtContinuousIndex = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_EvaluateValueAndDerivativeAtContinuousIndex)
    SetSplineOrder = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_GetSplineOrder)
    SetNumberOfWorkUnits = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_SetNumberOfWorkUnits)
    GetNumberOfWorkUnits = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_GetNumberOfWorkUnits)
    SetUseImageDirection = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_SetUseImageDirection)
    GetUseImageDirection = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_GetUseImageDirection)
    UseImageDirectionOn = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_UseImageDirectionOn)
    UseImageDirectionOff = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_UseImageDirectionOff)
    __swig_destroy__ = _itkBSplineInterpolateImageFunctionPython.delete_itkBSplineInterpolateImageFunctionIF3DF
    cast = _swig_new_static_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_cast)

    def New(*args, **kargs):
        """New() -> itkBSplineInterpolateImageFunctionIF3DF

        Create a new object of the class itkBSplineInterpolateImageFunctionIF3DF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineInterpolateImageFunctionIF3DF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineInterpolateImageFunctionIF3DF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineInterpolateImageFunctionIF3DF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineInterpolateImageFunctionIF3DF in _itkBSplineInterpolateImageFunctionPython:
_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_swigregister(itkBSplineInterpolateImageFunctionIF3DF)
itkBSplineInterpolateImageFunctionIF3DF___New_orig__ = _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF___New_orig__
itkBSplineInterpolateImageFunctionIF3DF_cast = _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_cast


def itkBSplineInterpolateImageFunctionISS2DSS_New():
    return itkBSplineInterpolateImageFunctionISS2DSS.New()

class itkBSplineInterpolateImageFunctionISS2DSS(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS2D):
    r"""


    Evaluates the B-Spline interpolation of an image. Spline order may be
    from 0 to 5.

    This class defines N-Dimension B-Spline transformation. It is based
    on:[1] M. Unser,     "Splines: A Perfect Fit for Signal and Image
    Processing,"     IEEE Signal Processing Magazine, vol. 16, no. 6, pp.
    22-38,     November 1999. [2] M. Unser, A. Aldroubi and M. Eden,
    "B-Spline Signal Processing: Part I--Theory,"     IEEE Transactions
    on Signal Processing, vol. 41, no. 2, pp. 821-832,     February 1993.
    [3] M. Unser, A. Aldroubi and M. Eden,     "B-Spline Signal
    Processing: Part II--Efficient Design and Applications,"      IEEE
    Transactions on Signal Processing, vol. 41, no. 2, pp. 834-848,
    February 1993. And code obtained from bigwww.epfl.ch by Philippe
    Thevenaz

    The B spline coefficients are calculated through the
    BSplineDecompositionImageFilter

    Limitations: Spline order must be between 0 and 5. Spline order must
    be set before setting the image. Uses mirror boundary conditions.
    Requires the same order of Spline for each dimension. Spline is
    determined in all dimensions, cannot selectively pick dimension for
    calculating spline.

    See:   BSplineDecompositionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS___New_orig__)
    Clone = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_Clone)
    Evaluate = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_Evaluate)
    EvaluateAtContinuousIndex = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_EvaluateAtContinuousIndex)
    EvaluateDerivative = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_EvaluateDerivative)
    EvaluateDerivativeAtContinuousIndex = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_EvaluateDerivativeAtContinuousIndex)
    EvaluateValueAndDerivative = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_EvaluateValueAndDerivative)
    EvaluateValueAndDerivativeAtContinuousIndex = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_EvaluateValueAndDerivativeAtContinuousIndex)
    SetSplineOrder = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_GetSplineOrder)
    SetNumberOfWorkUnits = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_SetNumberOfWorkUnits)
    GetNumberOfWorkUnits = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_GetNumberOfWorkUnits)
    SetUseImageDirection = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_SetUseImageDirection)
    GetUseImageDirection = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_GetUseImageDirection)
    UseImageDirectionOn = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_UseImageDirectionOn)
    UseImageDirectionOff = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_UseImageDirectionOff)
    __swig_destroy__ = _itkBSplineInterpolateImageFunctionPython.delete_itkBSplineInterpolateImageFunctionISS2DSS
    cast = _swig_new_static_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_cast)

    def New(*args, **kargs):
        """New() -> itkBSplineInterpolateImageFunctionISS2DSS

        Create a new object of the class itkBSplineInterpolateImageFunctionISS2DSS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineInterpolateImageFunctionISS2DSS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineInterpolateImageFunctionISS2DSS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineInterpolateImageFunctionISS2DSS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineInterpolateImageFunctionISS2DSS in _itkBSplineInterpolateImageFunctionPython:
_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_swigregister(itkBSplineInterpolateImageFunctionISS2DSS)
itkBSplineInterpolateImageFunctionISS2DSS___New_orig__ = _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS___New_orig__
itkBSplineInterpolateImageFunctionISS2DSS_cast = _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_cast


def itkBSplineInterpolateImageFunctionISS3DSS_New():
    return itkBSplineInterpolateImageFunctionISS3DSS.New()

class itkBSplineInterpolateImageFunctionISS3DSS(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS3D):
    r"""


    Evaluates the B-Spline interpolation of an image. Spline order may be
    from 0 to 5.

    This class defines N-Dimension B-Spline transformation. It is based
    on:[1] M. Unser,     "Splines: A Perfect Fit for Signal and Image
    Processing,"     IEEE Signal Processing Magazine, vol. 16, no. 6, pp.
    22-38,     November 1999. [2] M. Unser, A. Aldroubi and M. Eden,
    "B-Spline Signal Processing: Part I--Theory,"     IEEE Transactions
    on Signal Processing, vol. 41, no. 2, pp. 821-832,     February 1993.
    [3] M. Unser, A. Aldroubi and M. Eden,     "B-Spline Signal
    Processing: Part II--Efficient Design and Applications,"      IEEE
    Transactions on Signal Processing, vol. 41, no. 2, pp. 834-848,
    February 1993. And code obtained from bigwww.epfl.ch by Philippe
    Thevenaz

    The B spline coefficients are calculated through the
    BSplineDecompositionImageFilter

    Limitations: Spline order must be between 0 and 5. Spline order must
    be set before setting the image. Uses mirror boundary conditions.
    Requires the same order of Spline for each dimension. Spline is
    determined in all dimensions, cannot selectively pick dimension for
    calculating spline.

    See:   BSplineDecompositionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS___New_orig__)
    Clone = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_Clone)
    Evaluate = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_Evaluate)
    EvaluateAtContinuousIndex = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_EvaluateAtContinuousIndex)
    EvaluateDerivative = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_EvaluateDerivative)
    EvaluateDerivativeAtContinuousIndex = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_EvaluateDerivativeAtContinuousIndex)
    EvaluateValueAndDerivative = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_EvaluateValueAndDerivative)
    EvaluateValueAndDerivativeAtContinuousIndex = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_EvaluateValueAndDerivativeAtContinuousIndex)
    SetSplineOrder = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_GetSplineOrder)
    SetNumberOfWorkUnits = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_SetNumberOfWorkUnits)
    GetNumberOfWorkUnits = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_GetNumberOfWorkUnits)
    SetUseImageDirection = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_SetUseImageDirection)
    GetUseImageDirection = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_GetUseImageDirection)
    UseImageDirectionOn = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_UseImageDirectionOn)
    UseImageDirectionOff = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_UseImageDirectionOff)
    __swig_destroy__ = _itkBSplineInterpolateImageFunctionPython.delete_itkBSplineInterpolateImageFunctionISS3DSS
    cast = _swig_new_static_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_cast)

    def New(*args, **kargs):
        """New() -> itkBSplineInterpolateImageFunctionISS3DSS

        Create a new object of the class itkBSplineInterpolateImageFunctionISS3DSS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineInterpolateImageFunctionISS3DSS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineInterpolateImageFunctionISS3DSS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineInterpolateImageFunctionISS3DSS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineInterpolateImageFunctionISS3DSS in _itkBSplineInterpolateImageFunctionPython:
_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_swigregister(itkBSplineInterpolateImageFunctionISS3DSS)
itkBSplineInterpolateImageFunctionISS3DSS___New_orig__ = _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS___New_orig__
itkBSplineInterpolateImageFunctionISS3DSS_cast = _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_cast


def itkBSplineInterpolateImageFunctionIUC2DUC_New():
    return itkBSplineInterpolateImageFunctionIUC2DUC.New()

class itkBSplineInterpolateImageFunctionIUC2DUC(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC2D):
    r"""


    Evaluates the B-Spline interpolation of an image. Spline order may be
    from 0 to 5.

    This class defines N-Dimension B-Spline transformation. It is based
    on:[1] M. Unser,     "Splines: A Perfect Fit for Signal and Image
    Processing,"     IEEE Signal Processing Magazine, vol. 16, no. 6, pp.
    22-38,     November 1999. [2] M. Unser, A. Aldroubi and M. Eden,
    "B-Spline Signal Processing: Part I--Theory,"     IEEE Transactions
    on Signal Processing, vol. 41, no. 2, pp. 821-832,     February 1993.
    [3] M. Unser, A. Aldroubi and M. Eden,     "B-Spline Signal
    Processing: Part II--Efficient Design and Applications,"      IEEE
    Transactions on Signal Processing, vol. 41, no. 2, pp. 834-848,
    February 1993. And code obtained from bigwww.epfl.ch by Philippe
    Thevenaz

    The B spline coefficients are calculated through the
    BSplineDecompositionImageFilter

    Limitations: Spline order must be between 0 and 5. Spline order must
    be set before setting the image. Uses mirror boundary conditions.
    Requires the same order of Spline for each dimension. Spline is
    determined in all dimensions, cannot selectively pick dimension for
    calculating spline.

    See:   BSplineDecompositionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC___New_orig__)
    Clone = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_Clone)
    Evaluate = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_Evaluate)
    EvaluateAtContinuousIndex = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_EvaluateAtContinuousIndex)
    EvaluateDerivative = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_EvaluateDerivative)
    EvaluateDerivativeAtContinuousIndex = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_EvaluateDerivativeAtContinuousIndex)
    EvaluateValueAndDerivative = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_EvaluateValueAndDerivative)
    EvaluateValueAndDerivativeAtContinuousIndex = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_EvaluateValueAndDerivativeAtContinuousIndex)
    SetSplineOrder = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_GetSplineOrder)
    SetNumberOfWorkUnits = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_SetNumberOfWorkUnits)
    GetNumberOfWorkUnits = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_GetNumberOfWorkUnits)
    SetUseImageDirection = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_SetUseImageDirection)
    GetUseImageDirection = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_GetUseImageDirection)
    UseImageDirectionOn = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_UseImageDirectionOn)
    UseImageDirectionOff = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_UseImageDirectionOff)
    __swig_destroy__ = _itkBSplineInterpolateImageFunctionPython.delete_itkBSplineInterpolateImageFunctionIUC2DUC
    cast = _swig_new_static_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_cast)

    def New(*args, **kargs):
        """New() -> itkBSplineInterpolateImageFunctionIUC2DUC

        Create a new object of the class itkBSplineInterpolateImageFunctionIUC2DUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineInterpolateImageFunctionIUC2DUC.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineInterpolateImageFunctionIUC2DUC.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineInterpolateImageFunctionIUC2DUC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineInterpolateImageFunctionIUC2DUC in _itkBSplineInterpolateImageFunctionPython:
_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_swigregister(itkBSplineInterpolateImageFunctionIUC2DUC)
itkBSplineInterpolateImageFunctionIUC2DUC___New_orig__ = _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC___New_orig__
itkBSplineInterpolateImageFunctionIUC2DUC_cast = _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_cast


def itkBSplineInterpolateImageFunctionIUC3DUC_New():
    return itkBSplineInterpolateImageFunctionIUC3DUC.New()

class itkBSplineInterpolateImageFunctionIUC3DUC(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC3D):
    r"""


    Evaluates the B-Spline interpolation of an image. Spline order may be
    from 0 to 5.

    This class defines N-Dimension B-Spline transformation. It is based
    on:[1] M. Unser,     "Splines: A Perfect Fit for Signal and Image
    Processing,"     IEEE Signal Processing Magazine, vol. 16, no. 6, pp.
    22-38,     November 1999. [2] M. Unser, A. Aldroubi and M. Eden,
    "B-Spline Signal Processing: Part I--Theory,"     IEEE Transactions
    on Signal Processing, vol. 41, no. 2, pp. 821-832,     February 1993.
    [3] M. Unser, A. Aldroubi and M. Eden,     "B-Spline Signal
    Processing: Part II--Efficient Design and Applications,"      IEEE
    Transactions on Signal Processing, vol. 41, no. 2, pp. 834-848,
    February 1993. And code obtained from bigwww.epfl.ch by Philippe
    Thevenaz

    The B spline coefficients are calculated through the
    BSplineDecompositionImageFilter

    Limitations: Spline order must be between 0 and 5. Spline order must
    be set before setting the image. Uses mirror boundary conditions.
    Requires the same order of Spline for each dimension. Spline is
    determined in all dimensions, cannot selectively pick dimension for
    calculating spline.

    See:   BSplineDecompositionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC___New_orig__)
    Clone = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_Clone)
    Evaluate = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_Evaluate)
    EvaluateAtContinuousIndex = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_EvaluateAtContinuousIndex)
    EvaluateDerivative = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_EvaluateDerivative)
    EvaluateDerivativeAtContinuousIndex = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_EvaluateDerivativeAtContinuousIndex)
    EvaluateValueAndDerivative = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_EvaluateValueAndDerivative)
    EvaluateValueAndDerivativeAtContinuousIndex = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_EvaluateValueAndDerivativeAtContinuousIndex)
    SetSplineOrder = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_GetSplineOrder)
    SetNumberOfWorkUnits = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_SetNumberOfWorkUnits)
    GetNumberOfWorkUnits = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_GetNumberOfWorkUnits)
    SetUseImageDirection = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_SetUseImageDirection)
    GetUseImageDirection = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_GetUseImageDirection)
    UseImageDirectionOn = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_UseImageDirectionOn)
    UseImageDirectionOff = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_UseImageDirectionOff)
    __swig_destroy__ = _itkBSplineInterpolateImageFunctionPython.delete_itkBSplineInterpolateImageFunctionIUC3DUC
    cast = _swig_new_static_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_cast)

    def New(*args, **kargs):
        """New() -> itkBSplineInterpolateImageFunctionIUC3DUC

        Create a new object of the class itkBSplineInterpolateImageFunctionIUC3DUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineInterpolateImageFunctionIUC3DUC.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineInterpolateImageFunctionIUC3DUC.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineInterpolateImageFunctionIUC3DUC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineInterpolateImageFunctionIUC3DUC in _itkBSplineInterpolateImageFunctionPython:
_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_swigregister(itkBSplineInterpolateImageFunctionIUC3DUC)
itkBSplineInterpolateImageFunctionIUC3DUC___New_orig__ = _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC___New_orig__
itkBSplineInterpolateImageFunctionIUC3DUC_cast = _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_cast


def itkBSplineInterpolateImageFunctionIUS2DUS_New():
    return itkBSplineInterpolateImageFunctionIUS2DUS.New()

class itkBSplineInterpolateImageFunctionIUS2DUS(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS2D):
    r"""


    Evaluates the B-Spline interpolation of an image. Spline order may be
    from 0 to 5.

    This class defines N-Dimension B-Spline transformation. It is based
    on:[1] M. Unser,     "Splines: A Perfect Fit for Signal and Image
    Processing,"     IEEE Signal Processing Magazine, vol. 16, no. 6, pp.
    22-38,     November 1999. [2] M. Unser, A. Aldroubi and M. Eden,
    "B-Spline Signal Processing: Part I--Theory,"     IEEE Transactions
    on Signal Processing, vol. 41, no. 2, pp. 821-832,     February 1993.
    [3] M. Unser, A. Aldroubi and M. Eden,     "B-Spline Signal
    Processing: Part II--Efficient Design and Applications,"      IEEE
    Transactions on Signal Processing, vol. 41, no. 2, pp. 834-848,
    February 1993. And code obtained from bigwww.epfl.ch by Philippe
    Thevenaz

    The B spline coefficients are calculated through the
    BSplineDecompositionImageFilter

    Limitations: Spline order must be between 0 and 5. Spline order must
    be set before setting the image. Uses mirror boundary conditions.
    Requires the same order of Spline for each dimension. Spline is
    determined in all dimensions, cannot selectively pick dimension for
    calculating spline.

    See:   BSplineDecompositionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS___New_orig__)
    Clone = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_Clone)
    Evaluate = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_Evaluate)
    EvaluateAtContinuousIndex = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_EvaluateAtContinuousIndex)
    EvaluateDerivative = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_EvaluateDerivative)
    EvaluateDerivativeAtContinuousIndex = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_EvaluateDerivativeAtContinuousIndex)
    EvaluateValueAndDerivative = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_EvaluateValueAndDerivative)
    EvaluateValueAndDerivativeAtContinuousIndex = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_EvaluateValueAndDerivativeAtContinuousIndex)
    SetSplineOrder = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_GetSplineOrder)
    SetNumberOfWorkUnits = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_SetNumberOfWorkUnits)
    GetNumberOfWorkUnits = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_GetNumberOfWorkUnits)
    SetUseImageDirection = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_SetUseImageDirection)
    GetUseImageDirection = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_GetUseImageDirection)
    UseImageDirectionOn = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_UseImageDirectionOn)
    UseImageDirectionOff = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_UseImageDirectionOff)
    __swig_destroy__ = _itkBSplineInterpolateImageFunctionPython.delete_itkBSplineInterpolateImageFunctionIUS2DUS
    cast = _swig_new_static_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_cast)

    def New(*args, **kargs):
        """New() -> itkBSplineInterpolateImageFunctionIUS2DUS

        Create a new object of the class itkBSplineInterpolateImageFunctionIUS2DUS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineInterpolateImageFunctionIUS2DUS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineInterpolateImageFunctionIUS2DUS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineInterpolateImageFunctionIUS2DUS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineInterpolateImageFunctionIUS2DUS in _itkBSplineInterpolateImageFunctionPython:
_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_swigregister(itkBSplineInterpolateImageFunctionIUS2DUS)
itkBSplineInterpolateImageFunctionIUS2DUS___New_orig__ = _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS___New_orig__
itkBSplineInterpolateImageFunctionIUS2DUS_cast = _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_cast


def itkBSplineInterpolateImageFunctionIUS3DUS_New():
    return itkBSplineInterpolateImageFunctionIUS3DUS.New()

class itkBSplineInterpolateImageFunctionIUS3DUS(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS3D):
    r"""


    Evaluates the B-Spline interpolation of an image. Spline order may be
    from 0 to 5.

    This class defines N-Dimension B-Spline transformation. It is based
    on:[1] M. Unser,     "Splines: A Perfect Fit for Signal and Image
    Processing,"     IEEE Signal Processing Magazine, vol. 16, no. 6, pp.
    22-38,     November 1999. [2] M. Unser, A. Aldroubi and M. Eden,
    "B-Spline Signal Processing: Part I--Theory,"     IEEE Transactions
    on Signal Processing, vol. 41, no. 2, pp. 821-832,     February 1993.
    [3] M. Unser, A. Aldroubi and M. Eden,     "B-Spline Signal
    Processing: Part II--Efficient Design and Applications,"      IEEE
    Transactions on Signal Processing, vol. 41, no. 2, pp. 834-848,
    February 1993. And code obtained from bigwww.epfl.ch by Philippe
    Thevenaz

    The B spline coefficients are calculated through the
    BSplineDecompositionImageFilter

    Limitations: Spline order must be between 0 and 5. Spline order must
    be set before setting the image. Uses mirror boundary conditions.
    Requires the same order of Spline for each dimension. Spline is
    determined in all dimensions, cannot selectively pick dimension for
    calculating spline.

    See:   BSplineDecompositionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS___New_orig__)
    Clone = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_Clone)
    Evaluate = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_Evaluate)
    EvaluateAtContinuousIndex = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_EvaluateAtContinuousIndex)
    EvaluateDerivative = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_EvaluateDerivative)
    EvaluateDerivativeAtContinuousIndex = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_EvaluateDerivativeAtContinuousIndex)
    EvaluateValueAndDerivative = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_EvaluateValueAndDerivative)
    EvaluateValueAndDerivativeAtContinuousIndex = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_EvaluateValueAndDerivativeAtContinuousIndex)
    SetSplineOrder = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_GetSplineOrder)
    SetNumberOfWorkUnits = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_SetNumberOfWorkUnits)
    GetNumberOfWorkUnits = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_GetNumberOfWorkUnits)
    SetUseImageDirection = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_SetUseImageDirection)
    GetUseImageDirection = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_GetUseImageDirection)
    UseImageDirectionOn = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_UseImageDirectionOn)
    UseImageDirectionOff = _swig_new_instance_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_UseImageDirectionOff)
    __swig_destroy__ = _itkBSplineInterpolateImageFunctionPython.delete_itkBSplineInterpolateImageFunctionIUS3DUS
    cast = _swig_new_static_method(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_cast)

    def New(*args, **kargs):
        """New() -> itkBSplineInterpolateImageFunctionIUS3DUS

        Create a new object of the class itkBSplineInterpolateImageFunctionIUS3DUS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineInterpolateImageFunctionIUS3DUS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineInterpolateImageFunctionIUS3DUS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineInterpolateImageFunctionIUS3DUS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineInterpolateImageFunctionIUS3DUS in _itkBSplineInterpolateImageFunctionPython:
_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_swigregister(itkBSplineInterpolateImageFunctionIUS3DUS)
itkBSplineInterpolateImageFunctionIUS3DUS___New_orig__ = _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS___New_orig__
itkBSplineInterpolateImageFunctionIUS3DUS_cast = _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_cast



