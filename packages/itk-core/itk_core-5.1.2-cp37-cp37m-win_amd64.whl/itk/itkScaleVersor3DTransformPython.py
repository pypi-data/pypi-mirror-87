# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKTransformPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkScaleVersor3DTransformPython
else:
    import _itkScaleVersor3DTransformPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkScaleVersor3DTransformPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkScaleVersor3DTransformPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkVersorRigid3DTransformPython
import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkArrayPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkVersorTransformPython
import itk.itkVersorPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkRigid3DTransformPython
import itk.itkMatrixOffsetTransformBasePython
import itk.itkDiffusionTensor3DPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVariableLengthVectorPython
import itk.itkTransformBasePython
import itk.itkArray2DPython
import itk.itkOptimizerParametersPython

def itkScaleVersor3DTransformD_New():
    return itkScaleVersor3DTransformD.New()

class itkScaleVersor3DTransformD(itk.itkVersorRigid3DTransformPython.itkVersorRigid3DTransformD):
    r"""


    This transform applies a Versor rotation, translation and anisotropic
    scale to the space.

    The transform can be described as: $ (\\textbf{R}_v +
    \\textbf{S})\\textbf{x} $ where $\\textbf{R}_v$ is the rotation
    matrix given the versor, and $S=\\left( \\begin{array}{ccc}s_0-1 &
    0 & 0 \\\\ 0 & s_1-1 & 0 \\\\ 0 & 0 & s_2-1 \\end{array}
    \\right)\\ $

    This transform's scale parameters are not related to the uniform
    scaling parameter of the Similarity3DTransform.

    Johnson H.J., Harris G., Williams K. University of Iowa Carver College
    of Medicine, Department of Psychiatry NeuroImaging Center  This
    implementation was taken from the Insight Journal
    paper:https://hdl.handle.net/1926/1291 orhttp://www.insight-
    journal.org/browse/publication/180 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScaleVersor3DTransformPython.itkScaleVersor3DTransformD___New_orig__)
    Clone = _swig_new_instance_method(_itkScaleVersor3DTransformPython.itkScaleVersor3DTransformD_Clone)
    SetMatrix = _swig_new_instance_method(_itkScaleVersor3DTransformPython.itkScaleVersor3DTransformD_SetMatrix)
    SetScale = _swig_new_instance_method(_itkScaleVersor3DTransformPython.itkScaleVersor3DTransformD_SetScale)
    GetScale = _swig_new_instance_method(_itkScaleVersor3DTransformPython.itkScaleVersor3DTransformD_GetScale)
    __swig_destroy__ = _itkScaleVersor3DTransformPython.delete_itkScaleVersor3DTransformD
    cast = _swig_new_static_method(_itkScaleVersor3DTransformPython.itkScaleVersor3DTransformD_cast)

    def New(*args, **kargs):
        """New() -> itkScaleVersor3DTransformD

        Create a new object of the class itkScaleVersor3DTransformD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScaleVersor3DTransformD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScaleVersor3DTransformD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScaleVersor3DTransformD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScaleVersor3DTransformD in _itkScaleVersor3DTransformPython:
_itkScaleVersor3DTransformPython.itkScaleVersor3DTransformD_swigregister(itkScaleVersor3DTransformD)
itkScaleVersor3DTransformD___New_orig__ = _itkScaleVersor3DTransformPython.itkScaleVersor3DTransformD___New_orig__
itkScaleVersor3DTransformD_cast = _itkScaleVersor3DTransformPython.itkScaleVersor3DTransformD_cast



