# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKFastMarchingPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkFastMarchingReachedTargetNodesStoppingCriterionPython
else:
    import _itkFastMarchingReachedTargetNodesStoppingCriterionPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkFastMarchingReachedTargetNodesStoppingCriterionPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkFastMarchingReachedTargetNodesStoppingCriterionPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkFastMarchingStoppingCriterionBasePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkNodePairPython
import itk.itkImagePython
import itk.itkImageRegionPython
import itk.itkRGBPixelPython
import itk.itkFixedArrayPython
import itk.stdcomplexPython
import itk.itkRGBAPixelPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.itkCovariantVectorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkSymmetricSecondRankTensorPython
class itkFastMarchingReachedTargetNodesStoppingCriterionEnums(object):
    r"""Proxy of C++ itkFastMarchingReachedTargetNodesStoppingCriterionEnums class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    TargetCondition_OneTarget = _itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionEnums_TargetCondition_OneTarget
    
    TargetCondition_SomeTargets = _itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionEnums_TargetCondition_SomeTargets
    
    TargetCondition_AllTargets = _itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionEnums_TargetCondition_AllTargets
    

    def __init__(self, *args):
        r"""
        __init__(itkFastMarchingReachedTargetNodesStoppingCriterionEnums self) -> itkFastMarchingReachedTargetNodesStoppingCriterionEnums
        __init__(itkFastMarchingReachedTargetNodesStoppingCriterionEnums self, itkFastMarchingReachedTargetNodesStoppingCriterionEnums arg0) -> itkFastMarchingReachedTargetNodesStoppingCriterionEnums
        """
        _itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionEnums_swiginit(self, _itkFastMarchingReachedTargetNodesStoppingCriterionPython.new_itkFastMarchingReachedTargetNodesStoppingCriterionEnums(*args))
    __swig_destroy__ = _itkFastMarchingReachedTargetNodesStoppingCriterionPython.delete_itkFastMarchingReachedTargetNodesStoppingCriterionEnums

# Register itkFastMarchingReachedTargetNodesStoppingCriterionEnums in _itkFastMarchingReachedTargetNodesStoppingCriterionPython:
_itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionEnums_swigregister(itkFastMarchingReachedTargetNodesStoppingCriterionEnums)


def itkFastMarchingReachedTargetNodesStoppingCriterionID2ID2_New():
    return itkFastMarchingReachedTargetNodesStoppingCriterionID2ID2.New()

class itkFastMarchingReachedTargetNodesStoppingCriterionID2ID2(itk.itkFastMarchingStoppingCriterionBasePython.itkFastMarchingStoppingCriterionBaseID2ID2):
    r"""


    Stopping criterion for FastMarchingFilterBase.

    Stopping criterion where the condition is satisfied when the front
    reaches one, several or all target nodes (provided by the user). 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionID2ID2_Clone)
    SetTargetCondition = _swig_new_instance_method(_itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionID2ID2_SetTargetCondition)
    GetTargetCondition = _swig_new_instance_method(_itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionID2ID2_GetTargetCondition)
    SetTargetOffset = _swig_new_instance_method(_itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionID2ID2_SetTargetOffset)
    GetTargetOffset = _swig_new_instance_method(_itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionID2ID2_GetTargetOffset)
    SetNumberOfTargetsToBeReached = _swig_new_instance_method(_itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionID2ID2_SetNumberOfTargetsToBeReached)
    SetTargetNodes = _swig_new_instance_method(_itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionID2ID2_SetTargetNodes)
    SetCurrentNode = _swig_new_instance_method(_itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionID2ID2_SetCurrentNode)
    __swig_destroy__ = _itkFastMarchingReachedTargetNodesStoppingCriterionPython.delete_itkFastMarchingReachedTargetNodesStoppingCriterionID2ID2
    cast = _swig_new_static_method(_itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkFastMarchingReachedTargetNodesStoppingCriterionID2ID2

        Create a new object of the class itkFastMarchingReachedTargetNodesStoppingCriterionID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFastMarchingReachedTargetNodesStoppingCriterionID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFastMarchingReachedTargetNodesStoppingCriterionID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFastMarchingReachedTargetNodesStoppingCriterionID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFastMarchingReachedTargetNodesStoppingCriterionID2ID2 in _itkFastMarchingReachedTargetNodesStoppingCriterionPython:
_itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionID2ID2_swigregister(itkFastMarchingReachedTargetNodesStoppingCriterionID2ID2)
itkFastMarchingReachedTargetNodesStoppingCriterionID2ID2___New_orig__ = _itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionID2ID2___New_orig__
itkFastMarchingReachedTargetNodesStoppingCriterionID2ID2_cast = _itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionID2ID2_cast


def itkFastMarchingReachedTargetNodesStoppingCriterionID3ID3_New():
    return itkFastMarchingReachedTargetNodesStoppingCriterionID3ID3.New()

class itkFastMarchingReachedTargetNodesStoppingCriterionID3ID3(itk.itkFastMarchingStoppingCriterionBasePython.itkFastMarchingStoppingCriterionBaseID3ID3):
    r"""


    Stopping criterion for FastMarchingFilterBase.

    Stopping criterion where the condition is satisfied when the front
    reaches one, several or all target nodes (provided by the user). 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionID3ID3_Clone)
    SetTargetCondition = _swig_new_instance_method(_itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionID3ID3_SetTargetCondition)
    GetTargetCondition = _swig_new_instance_method(_itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionID3ID3_GetTargetCondition)
    SetTargetOffset = _swig_new_instance_method(_itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionID3ID3_SetTargetOffset)
    GetTargetOffset = _swig_new_instance_method(_itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionID3ID3_GetTargetOffset)
    SetNumberOfTargetsToBeReached = _swig_new_instance_method(_itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionID3ID3_SetNumberOfTargetsToBeReached)
    SetTargetNodes = _swig_new_instance_method(_itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionID3ID3_SetTargetNodes)
    SetCurrentNode = _swig_new_instance_method(_itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionID3ID3_SetCurrentNode)
    __swig_destroy__ = _itkFastMarchingReachedTargetNodesStoppingCriterionPython.delete_itkFastMarchingReachedTargetNodesStoppingCriterionID3ID3
    cast = _swig_new_static_method(_itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkFastMarchingReachedTargetNodesStoppingCriterionID3ID3

        Create a new object of the class itkFastMarchingReachedTargetNodesStoppingCriterionID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFastMarchingReachedTargetNodesStoppingCriterionID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFastMarchingReachedTargetNodesStoppingCriterionID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFastMarchingReachedTargetNodesStoppingCriterionID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFastMarchingReachedTargetNodesStoppingCriterionID3ID3 in _itkFastMarchingReachedTargetNodesStoppingCriterionPython:
_itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionID3ID3_swigregister(itkFastMarchingReachedTargetNodesStoppingCriterionID3ID3)
itkFastMarchingReachedTargetNodesStoppingCriterionID3ID3___New_orig__ = _itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionID3ID3___New_orig__
itkFastMarchingReachedTargetNodesStoppingCriterionID3ID3_cast = _itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionID3ID3_cast


def itkFastMarchingReachedTargetNodesStoppingCriterionIF2IF2_New():
    return itkFastMarchingReachedTargetNodesStoppingCriterionIF2IF2.New()

class itkFastMarchingReachedTargetNodesStoppingCriterionIF2IF2(itk.itkFastMarchingStoppingCriterionBasePython.itkFastMarchingStoppingCriterionBaseIF2IF2):
    r"""


    Stopping criterion for FastMarchingFilterBase.

    Stopping criterion where the condition is satisfied when the front
    reaches one, several or all target nodes (provided by the user). 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionIF2IF2_Clone)
    SetTargetCondition = _swig_new_instance_method(_itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionIF2IF2_SetTargetCondition)
    GetTargetCondition = _swig_new_instance_method(_itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionIF2IF2_GetTargetCondition)
    SetTargetOffset = _swig_new_instance_method(_itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionIF2IF2_SetTargetOffset)
    GetTargetOffset = _swig_new_instance_method(_itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionIF2IF2_GetTargetOffset)
    SetNumberOfTargetsToBeReached = _swig_new_instance_method(_itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionIF2IF2_SetNumberOfTargetsToBeReached)
    SetTargetNodes = _swig_new_instance_method(_itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionIF2IF2_SetTargetNodes)
    SetCurrentNode = _swig_new_instance_method(_itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionIF2IF2_SetCurrentNode)
    __swig_destroy__ = _itkFastMarchingReachedTargetNodesStoppingCriterionPython.delete_itkFastMarchingReachedTargetNodesStoppingCriterionIF2IF2
    cast = _swig_new_static_method(_itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkFastMarchingReachedTargetNodesStoppingCriterionIF2IF2

        Create a new object of the class itkFastMarchingReachedTargetNodesStoppingCriterionIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFastMarchingReachedTargetNodesStoppingCriterionIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFastMarchingReachedTargetNodesStoppingCriterionIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFastMarchingReachedTargetNodesStoppingCriterionIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFastMarchingReachedTargetNodesStoppingCriterionIF2IF2 in _itkFastMarchingReachedTargetNodesStoppingCriterionPython:
_itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionIF2IF2_swigregister(itkFastMarchingReachedTargetNodesStoppingCriterionIF2IF2)
itkFastMarchingReachedTargetNodesStoppingCriterionIF2IF2___New_orig__ = _itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionIF2IF2___New_orig__
itkFastMarchingReachedTargetNodesStoppingCriterionIF2IF2_cast = _itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionIF2IF2_cast


def itkFastMarchingReachedTargetNodesStoppingCriterionIF3IF3_New():
    return itkFastMarchingReachedTargetNodesStoppingCriterionIF3IF3.New()

class itkFastMarchingReachedTargetNodesStoppingCriterionIF3IF3(itk.itkFastMarchingStoppingCriterionBasePython.itkFastMarchingStoppingCriterionBaseIF3IF3):
    r"""


    Stopping criterion for FastMarchingFilterBase.

    Stopping criterion where the condition is satisfied when the front
    reaches one, several or all target nodes (provided by the user). 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionIF3IF3_Clone)
    SetTargetCondition = _swig_new_instance_method(_itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionIF3IF3_SetTargetCondition)
    GetTargetCondition = _swig_new_instance_method(_itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionIF3IF3_GetTargetCondition)
    SetTargetOffset = _swig_new_instance_method(_itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionIF3IF3_SetTargetOffset)
    GetTargetOffset = _swig_new_instance_method(_itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionIF3IF3_GetTargetOffset)
    SetNumberOfTargetsToBeReached = _swig_new_instance_method(_itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionIF3IF3_SetNumberOfTargetsToBeReached)
    SetTargetNodes = _swig_new_instance_method(_itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionIF3IF3_SetTargetNodes)
    SetCurrentNode = _swig_new_instance_method(_itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionIF3IF3_SetCurrentNode)
    __swig_destroy__ = _itkFastMarchingReachedTargetNodesStoppingCriterionPython.delete_itkFastMarchingReachedTargetNodesStoppingCriterionIF3IF3
    cast = _swig_new_static_method(_itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkFastMarchingReachedTargetNodesStoppingCriterionIF3IF3

        Create a new object of the class itkFastMarchingReachedTargetNodesStoppingCriterionIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFastMarchingReachedTargetNodesStoppingCriterionIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFastMarchingReachedTargetNodesStoppingCriterionIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFastMarchingReachedTargetNodesStoppingCriterionIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFastMarchingReachedTargetNodesStoppingCriterionIF3IF3 in _itkFastMarchingReachedTargetNodesStoppingCriterionPython:
_itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionIF3IF3_swigregister(itkFastMarchingReachedTargetNodesStoppingCriterionIF3IF3)
itkFastMarchingReachedTargetNodesStoppingCriterionIF3IF3___New_orig__ = _itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionIF3IF3___New_orig__
itkFastMarchingReachedTargetNodesStoppingCriterionIF3IF3_cast = _itkFastMarchingReachedTargetNodesStoppingCriterionPython.itkFastMarchingReachedTargetNodesStoppingCriterionIF3IF3_cast



