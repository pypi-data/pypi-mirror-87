# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKDeconvolutionPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkProjectedLandweberDeconvolutionImageFilterPython
else:
    import _itkProjectedLandweberDeconvolutionImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkProjectedLandweberDeconvolutionImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkProjectedLandweberDeconvolutionImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkLandweberDeconvolutionImageFilterPython
import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkIterativeDeconvolutionImageFilterPython
import itk.itkFFTConvolutionImageFilterPython
import itk.itkSizePython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkFixedArrayPython
import itk.itkPointPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkRGBPixelPython
import itk.itkConvolutionImageFilterBasePython
import itk.itkImageBoundaryConditionPython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython

def itkProjectedLandweberDeconvolutionImageFilterID2ID2_Superclass_New():
    return itkProjectedLandweberDeconvolutionImageFilterID2ID2_Superclass.New()

class itkProjectedLandweberDeconvolutionImageFilterID2ID2_Superclass(itk.itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterID2ID2):
    r"""Proxy of C++ itkProjectedLandweberDeconvolutionImageFilterID2ID2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterID2ID2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterID2ID2_Superclass_Clone)
    __swig_destroy__ = _itkProjectedLandweberDeconvolutionImageFilterPython.delete_itkProjectedLandweberDeconvolutionImageFilterID2ID2_Superclass
    cast = _swig_new_static_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterID2ID2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkProjectedLandweberDeconvolutionImageFilterID2ID2_Superclass

        Create a new object of the class itkProjectedLandweberDeconvolutionImageFilterID2ID2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkProjectedLandweberDeconvolutionImageFilterID2ID2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkProjectedLandweberDeconvolutionImageFilterID2ID2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkProjectedLandweberDeconvolutionImageFilterID2ID2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkProjectedLandweberDeconvolutionImageFilterID2ID2_Superclass in _itkProjectedLandweberDeconvolutionImageFilterPython:
_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterID2ID2_Superclass_swigregister(itkProjectedLandweberDeconvolutionImageFilterID2ID2_Superclass)
itkProjectedLandweberDeconvolutionImageFilterID2ID2_Superclass___New_orig__ = _itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterID2ID2_Superclass___New_orig__
itkProjectedLandweberDeconvolutionImageFilterID2ID2_Superclass_cast = _itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterID2ID2_Superclass_cast


def itkProjectedLandweberDeconvolutionImageFilterID3ID3_Superclass_New():
    return itkProjectedLandweberDeconvolutionImageFilterID3ID3_Superclass.New()

class itkProjectedLandweberDeconvolutionImageFilterID3ID3_Superclass(itk.itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterID3ID3):
    r"""Proxy of C++ itkProjectedLandweberDeconvolutionImageFilterID3ID3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterID3ID3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterID3ID3_Superclass_Clone)
    __swig_destroy__ = _itkProjectedLandweberDeconvolutionImageFilterPython.delete_itkProjectedLandweberDeconvolutionImageFilterID3ID3_Superclass
    cast = _swig_new_static_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterID3ID3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkProjectedLandweberDeconvolutionImageFilterID3ID3_Superclass

        Create a new object of the class itkProjectedLandweberDeconvolutionImageFilterID3ID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkProjectedLandweberDeconvolutionImageFilterID3ID3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkProjectedLandweberDeconvolutionImageFilterID3ID3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkProjectedLandweberDeconvolutionImageFilterID3ID3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkProjectedLandweberDeconvolutionImageFilterID3ID3_Superclass in _itkProjectedLandweberDeconvolutionImageFilterPython:
_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterID3ID3_Superclass_swigregister(itkProjectedLandweberDeconvolutionImageFilterID3ID3_Superclass)
itkProjectedLandweberDeconvolutionImageFilterID3ID3_Superclass___New_orig__ = _itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterID3ID3_Superclass___New_orig__
itkProjectedLandweberDeconvolutionImageFilterID3ID3_Superclass_cast = _itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterID3ID3_Superclass_cast


def itkProjectedLandweberDeconvolutionImageFilterIF2IF2_Superclass_New():
    return itkProjectedLandweberDeconvolutionImageFilterIF2IF2_Superclass.New()

class itkProjectedLandweberDeconvolutionImageFilterIF2IF2_Superclass(itk.itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF2IF2):
    r"""Proxy of C++ itkProjectedLandweberDeconvolutionImageFilterIF2IF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIF2IF2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIF2IF2_Superclass_Clone)
    __swig_destroy__ = _itkProjectedLandweberDeconvolutionImageFilterPython.delete_itkProjectedLandweberDeconvolutionImageFilterIF2IF2_Superclass
    cast = _swig_new_static_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIF2IF2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkProjectedLandweberDeconvolutionImageFilterIF2IF2_Superclass

        Create a new object of the class itkProjectedLandweberDeconvolutionImageFilterIF2IF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkProjectedLandweberDeconvolutionImageFilterIF2IF2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkProjectedLandweberDeconvolutionImageFilterIF2IF2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkProjectedLandweberDeconvolutionImageFilterIF2IF2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkProjectedLandweberDeconvolutionImageFilterIF2IF2_Superclass in _itkProjectedLandweberDeconvolutionImageFilterPython:
_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIF2IF2_Superclass_swigregister(itkProjectedLandweberDeconvolutionImageFilterIF2IF2_Superclass)
itkProjectedLandweberDeconvolutionImageFilterIF2IF2_Superclass___New_orig__ = _itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIF2IF2_Superclass___New_orig__
itkProjectedLandweberDeconvolutionImageFilterIF2IF2_Superclass_cast = _itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIF2IF2_Superclass_cast


def itkProjectedLandweberDeconvolutionImageFilterIF3IF3_Superclass_New():
    return itkProjectedLandweberDeconvolutionImageFilterIF3IF3_Superclass.New()

class itkProjectedLandweberDeconvolutionImageFilterIF3IF3_Superclass(itk.itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF3IF3):
    r"""Proxy of C++ itkProjectedLandweberDeconvolutionImageFilterIF3IF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIF3IF3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIF3IF3_Superclass_Clone)
    __swig_destroy__ = _itkProjectedLandweberDeconvolutionImageFilterPython.delete_itkProjectedLandweberDeconvolutionImageFilterIF3IF3_Superclass
    cast = _swig_new_static_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIF3IF3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkProjectedLandweberDeconvolutionImageFilterIF3IF3_Superclass

        Create a new object of the class itkProjectedLandweberDeconvolutionImageFilterIF3IF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkProjectedLandweberDeconvolutionImageFilterIF3IF3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkProjectedLandweberDeconvolutionImageFilterIF3IF3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkProjectedLandweberDeconvolutionImageFilterIF3IF3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkProjectedLandweberDeconvolutionImageFilterIF3IF3_Superclass in _itkProjectedLandweberDeconvolutionImageFilterPython:
_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIF3IF3_Superclass_swigregister(itkProjectedLandweberDeconvolutionImageFilterIF3IF3_Superclass)
itkProjectedLandweberDeconvolutionImageFilterIF3IF3_Superclass___New_orig__ = _itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIF3IF3_Superclass___New_orig__
itkProjectedLandweberDeconvolutionImageFilterIF3IF3_Superclass_cast = _itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIF3IF3_Superclass_cast


def itkProjectedLandweberDeconvolutionImageFilterISS2ISS2_Superclass_New():
    return itkProjectedLandweberDeconvolutionImageFilterISS2ISS2_Superclass.New()

class itkProjectedLandweberDeconvolutionImageFilterISS2ISS2_Superclass(itk.itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS2ISS2):
    r"""Proxy of C++ itkProjectedLandweberDeconvolutionImageFilterISS2ISS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterISS2ISS2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterISS2ISS2_Superclass_Clone)
    __swig_destroy__ = _itkProjectedLandweberDeconvolutionImageFilterPython.delete_itkProjectedLandweberDeconvolutionImageFilterISS2ISS2_Superclass
    cast = _swig_new_static_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterISS2ISS2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkProjectedLandweberDeconvolutionImageFilterISS2ISS2_Superclass

        Create a new object of the class itkProjectedLandweberDeconvolutionImageFilterISS2ISS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkProjectedLandweberDeconvolutionImageFilterISS2ISS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkProjectedLandweberDeconvolutionImageFilterISS2ISS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkProjectedLandweberDeconvolutionImageFilterISS2ISS2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkProjectedLandweberDeconvolutionImageFilterISS2ISS2_Superclass in _itkProjectedLandweberDeconvolutionImageFilterPython:
_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterISS2ISS2_Superclass_swigregister(itkProjectedLandweberDeconvolutionImageFilterISS2ISS2_Superclass)
itkProjectedLandweberDeconvolutionImageFilterISS2ISS2_Superclass___New_orig__ = _itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterISS2ISS2_Superclass___New_orig__
itkProjectedLandweberDeconvolutionImageFilterISS2ISS2_Superclass_cast = _itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterISS2ISS2_Superclass_cast


def itkProjectedLandweberDeconvolutionImageFilterISS3ISS3_Superclass_New():
    return itkProjectedLandweberDeconvolutionImageFilterISS3ISS3_Superclass.New()

class itkProjectedLandweberDeconvolutionImageFilterISS3ISS3_Superclass(itk.itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS3ISS3):
    r"""Proxy of C++ itkProjectedLandweberDeconvolutionImageFilterISS3ISS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterISS3ISS3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterISS3ISS3_Superclass_Clone)
    __swig_destroy__ = _itkProjectedLandweberDeconvolutionImageFilterPython.delete_itkProjectedLandweberDeconvolutionImageFilterISS3ISS3_Superclass
    cast = _swig_new_static_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterISS3ISS3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkProjectedLandweberDeconvolutionImageFilterISS3ISS3_Superclass

        Create a new object of the class itkProjectedLandweberDeconvolutionImageFilterISS3ISS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkProjectedLandweberDeconvolutionImageFilterISS3ISS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkProjectedLandweberDeconvolutionImageFilterISS3ISS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkProjectedLandweberDeconvolutionImageFilterISS3ISS3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkProjectedLandweberDeconvolutionImageFilterISS3ISS3_Superclass in _itkProjectedLandweberDeconvolutionImageFilterPython:
_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterISS3ISS3_Superclass_swigregister(itkProjectedLandweberDeconvolutionImageFilterISS3ISS3_Superclass)
itkProjectedLandweberDeconvolutionImageFilterISS3ISS3_Superclass___New_orig__ = _itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterISS3ISS3_Superclass___New_orig__
itkProjectedLandweberDeconvolutionImageFilterISS3ISS3_Superclass_cast = _itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterISS3ISS3_Superclass_cast


def itkProjectedLandweberDeconvolutionImageFilterIUC2IUC2_Superclass_New():
    return itkProjectedLandweberDeconvolutionImageFilterIUC2IUC2_Superclass.New()

class itkProjectedLandweberDeconvolutionImageFilterIUC2IUC2_Superclass(itk.itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC2IUC2):
    r"""Proxy of C++ itkProjectedLandweberDeconvolutionImageFilterIUC2IUC2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIUC2IUC2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIUC2IUC2_Superclass_Clone)
    __swig_destroy__ = _itkProjectedLandweberDeconvolutionImageFilterPython.delete_itkProjectedLandweberDeconvolutionImageFilterIUC2IUC2_Superclass
    cast = _swig_new_static_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIUC2IUC2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkProjectedLandweberDeconvolutionImageFilterIUC2IUC2_Superclass

        Create a new object of the class itkProjectedLandweberDeconvolutionImageFilterIUC2IUC2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkProjectedLandweberDeconvolutionImageFilterIUC2IUC2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkProjectedLandweberDeconvolutionImageFilterIUC2IUC2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkProjectedLandweberDeconvolutionImageFilterIUC2IUC2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkProjectedLandweberDeconvolutionImageFilterIUC2IUC2_Superclass in _itkProjectedLandweberDeconvolutionImageFilterPython:
_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIUC2IUC2_Superclass_swigregister(itkProjectedLandweberDeconvolutionImageFilterIUC2IUC2_Superclass)
itkProjectedLandweberDeconvolutionImageFilterIUC2IUC2_Superclass___New_orig__ = _itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIUC2IUC2_Superclass___New_orig__
itkProjectedLandweberDeconvolutionImageFilterIUC2IUC2_Superclass_cast = _itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIUC2IUC2_Superclass_cast


def itkProjectedLandweberDeconvolutionImageFilterIUC3IUC3_Superclass_New():
    return itkProjectedLandweberDeconvolutionImageFilterIUC3IUC3_Superclass.New()

class itkProjectedLandweberDeconvolutionImageFilterIUC3IUC3_Superclass(itk.itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC3IUC3):
    r"""Proxy of C++ itkProjectedLandweberDeconvolutionImageFilterIUC3IUC3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIUC3IUC3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIUC3IUC3_Superclass_Clone)
    __swig_destroy__ = _itkProjectedLandweberDeconvolutionImageFilterPython.delete_itkProjectedLandweberDeconvolutionImageFilterIUC3IUC3_Superclass
    cast = _swig_new_static_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIUC3IUC3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkProjectedLandweberDeconvolutionImageFilterIUC3IUC3_Superclass

        Create a new object of the class itkProjectedLandweberDeconvolutionImageFilterIUC3IUC3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkProjectedLandweberDeconvolutionImageFilterIUC3IUC3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkProjectedLandweberDeconvolutionImageFilterIUC3IUC3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkProjectedLandweberDeconvolutionImageFilterIUC3IUC3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkProjectedLandweberDeconvolutionImageFilterIUC3IUC3_Superclass in _itkProjectedLandweberDeconvolutionImageFilterPython:
_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIUC3IUC3_Superclass_swigregister(itkProjectedLandweberDeconvolutionImageFilterIUC3IUC3_Superclass)
itkProjectedLandweberDeconvolutionImageFilterIUC3IUC3_Superclass___New_orig__ = _itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIUC3IUC3_Superclass___New_orig__
itkProjectedLandweberDeconvolutionImageFilterIUC3IUC3_Superclass_cast = _itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIUC3IUC3_Superclass_cast


def itkProjectedLandweberDeconvolutionImageFilterIUS2IUS2_Superclass_New():
    return itkProjectedLandweberDeconvolutionImageFilterIUS2IUS2_Superclass.New()

class itkProjectedLandweberDeconvolutionImageFilterIUS2IUS2_Superclass(itk.itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUS2IUS2):
    r"""Proxy of C++ itkProjectedLandweberDeconvolutionImageFilterIUS2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIUS2IUS2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIUS2IUS2_Superclass_Clone)
    __swig_destroy__ = _itkProjectedLandweberDeconvolutionImageFilterPython.delete_itkProjectedLandweberDeconvolutionImageFilterIUS2IUS2_Superclass
    cast = _swig_new_static_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIUS2IUS2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkProjectedLandweberDeconvolutionImageFilterIUS2IUS2_Superclass

        Create a new object of the class itkProjectedLandweberDeconvolutionImageFilterIUS2IUS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkProjectedLandweberDeconvolutionImageFilterIUS2IUS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkProjectedLandweberDeconvolutionImageFilterIUS2IUS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkProjectedLandweberDeconvolutionImageFilterIUS2IUS2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkProjectedLandweberDeconvolutionImageFilterIUS2IUS2_Superclass in _itkProjectedLandweberDeconvolutionImageFilterPython:
_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIUS2IUS2_Superclass_swigregister(itkProjectedLandweberDeconvolutionImageFilterIUS2IUS2_Superclass)
itkProjectedLandweberDeconvolutionImageFilterIUS2IUS2_Superclass___New_orig__ = _itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIUS2IUS2_Superclass___New_orig__
itkProjectedLandweberDeconvolutionImageFilterIUS2IUS2_Superclass_cast = _itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIUS2IUS2_Superclass_cast


def itkProjectedLandweberDeconvolutionImageFilterIUS3IUS3_Superclass_New():
    return itkProjectedLandweberDeconvolutionImageFilterIUS3IUS3_Superclass.New()

class itkProjectedLandweberDeconvolutionImageFilterIUS3IUS3_Superclass(itk.itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUS3IUS3):
    r"""Proxy of C++ itkProjectedLandweberDeconvolutionImageFilterIUS3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIUS3IUS3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIUS3IUS3_Superclass_Clone)
    __swig_destroy__ = _itkProjectedLandweberDeconvolutionImageFilterPython.delete_itkProjectedLandweberDeconvolutionImageFilterIUS3IUS3_Superclass
    cast = _swig_new_static_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIUS3IUS3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkProjectedLandweberDeconvolutionImageFilterIUS3IUS3_Superclass

        Create a new object of the class itkProjectedLandweberDeconvolutionImageFilterIUS3IUS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkProjectedLandweberDeconvolutionImageFilterIUS3IUS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkProjectedLandweberDeconvolutionImageFilterIUS3IUS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkProjectedLandweberDeconvolutionImageFilterIUS3IUS3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkProjectedLandweberDeconvolutionImageFilterIUS3IUS3_Superclass in _itkProjectedLandweberDeconvolutionImageFilterPython:
_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIUS3IUS3_Superclass_swigregister(itkProjectedLandweberDeconvolutionImageFilterIUS3IUS3_Superclass)
itkProjectedLandweberDeconvolutionImageFilterIUS3IUS3_Superclass___New_orig__ = _itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIUS3IUS3_Superclass___New_orig__
itkProjectedLandweberDeconvolutionImageFilterIUS3IUS3_Superclass_cast = _itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIUS3IUS3_Superclass_cast


def itkProjectedLandweberDeconvolutionImageFilterID2ID2_New():
    return itkProjectedLandweberDeconvolutionImageFilterID2ID2.New()

class itkProjectedLandweberDeconvolutionImageFilterID2ID2(itkProjectedLandweberDeconvolutionImageFilterID2ID2_Superclass):
    r"""


    Deconvolve an image using the projected Landweber deconvolution
    algorithm.

    This filter performs the same calculation per iteration as the
    LandweberDeconvolutionImageFilter. However, at each iteration,
    negative pixels in the intermediate result are projected (set) to
    zero. This is useful if the solution is assumed to always be non-
    negative, which is the case when dealing with images formed by
    counting photons, for example.

    This code was adapted from the Insight Journal contribution:

    "Deconvolution: infrastructure and reference algorithms" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3207

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill

    See:   IterativeDeconvolutionImageFilter

    See:   RichardsonLucyDeconvolutionImageFilter

    See:   LandweberDeconvolutionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterID2ID2_Clone)
    __swig_destroy__ = _itkProjectedLandweberDeconvolutionImageFilterPython.delete_itkProjectedLandweberDeconvolutionImageFilterID2ID2
    cast = _swig_new_static_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkProjectedLandweberDeconvolutionImageFilterID2ID2

        Create a new object of the class itkProjectedLandweberDeconvolutionImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkProjectedLandweberDeconvolutionImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkProjectedLandweberDeconvolutionImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkProjectedLandweberDeconvolutionImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkProjectedLandweberDeconvolutionImageFilterID2ID2 in _itkProjectedLandweberDeconvolutionImageFilterPython:
_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterID2ID2_swigregister(itkProjectedLandweberDeconvolutionImageFilterID2ID2)
itkProjectedLandweberDeconvolutionImageFilterID2ID2___New_orig__ = _itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterID2ID2___New_orig__
itkProjectedLandweberDeconvolutionImageFilterID2ID2_cast = _itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterID2ID2_cast


def itkProjectedLandweberDeconvolutionImageFilterID3ID3_New():
    return itkProjectedLandweberDeconvolutionImageFilterID3ID3.New()

class itkProjectedLandweberDeconvolutionImageFilterID3ID3(itkProjectedLandweberDeconvolutionImageFilterID3ID3_Superclass):
    r"""


    Deconvolve an image using the projected Landweber deconvolution
    algorithm.

    This filter performs the same calculation per iteration as the
    LandweberDeconvolutionImageFilter. However, at each iteration,
    negative pixels in the intermediate result are projected (set) to
    zero. This is useful if the solution is assumed to always be non-
    negative, which is the case when dealing with images formed by
    counting photons, for example.

    This code was adapted from the Insight Journal contribution:

    "Deconvolution: infrastructure and reference algorithms" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3207

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill

    See:   IterativeDeconvolutionImageFilter

    See:   RichardsonLucyDeconvolutionImageFilter

    See:   LandweberDeconvolutionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterID3ID3_Clone)
    __swig_destroy__ = _itkProjectedLandweberDeconvolutionImageFilterPython.delete_itkProjectedLandweberDeconvolutionImageFilterID3ID3
    cast = _swig_new_static_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkProjectedLandweberDeconvolutionImageFilterID3ID3

        Create a new object of the class itkProjectedLandweberDeconvolutionImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkProjectedLandweberDeconvolutionImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkProjectedLandweberDeconvolutionImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkProjectedLandweberDeconvolutionImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkProjectedLandweberDeconvolutionImageFilterID3ID3 in _itkProjectedLandweberDeconvolutionImageFilterPython:
_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterID3ID3_swigregister(itkProjectedLandweberDeconvolutionImageFilterID3ID3)
itkProjectedLandweberDeconvolutionImageFilterID3ID3___New_orig__ = _itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterID3ID3___New_orig__
itkProjectedLandweberDeconvolutionImageFilterID3ID3_cast = _itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterID3ID3_cast


def itkProjectedLandweberDeconvolutionImageFilterIF2IF2_New():
    return itkProjectedLandweberDeconvolutionImageFilterIF2IF2.New()

class itkProjectedLandweberDeconvolutionImageFilterIF2IF2(itkProjectedLandweberDeconvolutionImageFilterIF2IF2_Superclass):
    r"""


    Deconvolve an image using the projected Landweber deconvolution
    algorithm.

    This filter performs the same calculation per iteration as the
    LandweberDeconvolutionImageFilter. However, at each iteration,
    negative pixels in the intermediate result are projected (set) to
    zero. This is useful if the solution is assumed to always be non-
    negative, which is the case when dealing with images formed by
    counting photons, for example.

    This code was adapted from the Insight Journal contribution:

    "Deconvolution: infrastructure and reference algorithms" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3207

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill

    See:   IterativeDeconvolutionImageFilter

    See:   RichardsonLucyDeconvolutionImageFilter

    See:   LandweberDeconvolutionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIF2IF2_Clone)
    __swig_destroy__ = _itkProjectedLandweberDeconvolutionImageFilterPython.delete_itkProjectedLandweberDeconvolutionImageFilterIF2IF2
    cast = _swig_new_static_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkProjectedLandweberDeconvolutionImageFilterIF2IF2

        Create a new object of the class itkProjectedLandweberDeconvolutionImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkProjectedLandweberDeconvolutionImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkProjectedLandweberDeconvolutionImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkProjectedLandweberDeconvolutionImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkProjectedLandweberDeconvolutionImageFilterIF2IF2 in _itkProjectedLandweberDeconvolutionImageFilterPython:
_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIF2IF2_swigregister(itkProjectedLandweberDeconvolutionImageFilterIF2IF2)
itkProjectedLandweberDeconvolutionImageFilterIF2IF2___New_orig__ = _itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIF2IF2___New_orig__
itkProjectedLandweberDeconvolutionImageFilterIF2IF2_cast = _itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIF2IF2_cast


def itkProjectedLandweberDeconvolutionImageFilterIF3IF3_New():
    return itkProjectedLandweberDeconvolutionImageFilterIF3IF3.New()

class itkProjectedLandweberDeconvolutionImageFilterIF3IF3(itkProjectedLandweberDeconvolutionImageFilterIF3IF3_Superclass):
    r"""


    Deconvolve an image using the projected Landweber deconvolution
    algorithm.

    This filter performs the same calculation per iteration as the
    LandweberDeconvolutionImageFilter. However, at each iteration,
    negative pixels in the intermediate result are projected (set) to
    zero. This is useful if the solution is assumed to always be non-
    negative, which is the case when dealing with images formed by
    counting photons, for example.

    This code was adapted from the Insight Journal contribution:

    "Deconvolution: infrastructure and reference algorithms" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3207

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill

    See:   IterativeDeconvolutionImageFilter

    See:   RichardsonLucyDeconvolutionImageFilter

    See:   LandweberDeconvolutionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIF3IF3_Clone)
    __swig_destroy__ = _itkProjectedLandweberDeconvolutionImageFilterPython.delete_itkProjectedLandweberDeconvolutionImageFilterIF3IF3
    cast = _swig_new_static_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkProjectedLandweberDeconvolutionImageFilterIF3IF3

        Create a new object of the class itkProjectedLandweberDeconvolutionImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkProjectedLandweberDeconvolutionImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkProjectedLandweberDeconvolutionImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkProjectedLandweberDeconvolutionImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkProjectedLandweberDeconvolutionImageFilterIF3IF3 in _itkProjectedLandweberDeconvolutionImageFilterPython:
_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIF3IF3_swigregister(itkProjectedLandweberDeconvolutionImageFilterIF3IF3)
itkProjectedLandweberDeconvolutionImageFilterIF3IF3___New_orig__ = _itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIF3IF3___New_orig__
itkProjectedLandweberDeconvolutionImageFilterIF3IF3_cast = _itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIF3IF3_cast


def itkProjectedLandweberDeconvolutionImageFilterISS2ISS2_New():
    return itkProjectedLandweberDeconvolutionImageFilterISS2ISS2.New()

class itkProjectedLandweberDeconvolutionImageFilterISS2ISS2(itkProjectedLandweberDeconvolutionImageFilterISS2ISS2_Superclass):
    r"""


    Deconvolve an image using the projected Landweber deconvolution
    algorithm.

    This filter performs the same calculation per iteration as the
    LandweberDeconvolutionImageFilter. However, at each iteration,
    negative pixels in the intermediate result are projected (set) to
    zero. This is useful if the solution is assumed to always be non-
    negative, which is the case when dealing with images formed by
    counting photons, for example.

    This code was adapted from the Insight Journal contribution:

    "Deconvolution: infrastructure and reference algorithms" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3207

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill

    See:   IterativeDeconvolutionImageFilter

    See:   RichardsonLucyDeconvolutionImageFilter

    See:   LandweberDeconvolutionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterISS2ISS2_Clone)
    __swig_destroy__ = _itkProjectedLandweberDeconvolutionImageFilterPython.delete_itkProjectedLandweberDeconvolutionImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkProjectedLandweberDeconvolutionImageFilterISS2ISS2

        Create a new object of the class itkProjectedLandweberDeconvolutionImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkProjectedLandweberDeconvolutionImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkProjectedLandweberDeconvolutionImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkProjectedLandweberDeconvolutionImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkProjectedLandweberDeconvolutionImageFilterISS2ISS2 in _itkProjectedLandweberDeconvolutionImageFilterPython:
_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterISS2ISS2_swigregister(itkProjectedLandweberDeconvolutionImageFilterISS2ISS2)
itkProjectedLandweberDeconvolutionImageFilterISS2ISS2___New_orig__ = _itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterISS2ISS2___New_orig__
itkProjectedLandweberDeconvolutionImageFilterISS2ISS2_cast = _itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterISS2ISS2_cast


def itkProjectedLandweberDeconvolutionImageFilterISS3ISS3_New():
    return itkProjectedLandweberDeconvolutionImageFilterISS3ISS3.New()

class itkProjectedLandweberDeconvolutionImageFilterISS3ISS3(itkProjectedLandweberDeconvolutionImageFilterISS3ISS3_Superclass):
    r"""


    Deconvolve an image using the projected Landweber deconvolution
    algorithm.

    This filter performs the same calculation per iteration as the
    LandweberDeconvolutionImageFilter. However, at each iteration,
    negative pixels in the intermediate result are projected (set) to
    zero. This is useful if the solution is assumed to always be non-
    negative, which is the case when dealing with images formed by
    counting photons, for example.

    This code was adapted from the Insight Journal contribution:

    "Deconvolution: infrastructure and reference algorithms" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3207

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill

    See:   IterativeDeconvolutionImageFilter

    See:   RichardsonLucyDeconvolutionImageFilter

    See:   LandweberDeconvolutionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterISS3ISS3_Clone)
    __swig_destroy__ = _itkProjectedLandweberDeconvolutionImageFilterPython.delete_itkProjectedLandweberDeconvolutionImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkProjectedLandweberDeconvolutionImageFilterISS3ISS3

        Create a new object of the class itkProjectedLandweberDeconvolutionImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkProjectedLandweberDeconvolutionImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkProjectedLandweberDeconvolutionImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkProjectedLandweberDeconvolutionImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkProjectedLandweberDeconvolutionImageFilterISS3ISS3 in _itkProjectedLandweberDeconvolutionImageFilterPython:
_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterISS3ISS3_swigregister(itkProjectedLandweberDeconvolutionImageFilterISS3ISS3)
itkProjectedLandweberDeconvolutionImageFilterISS3ISS3___New_orig__ = _itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterISS3ISS3___New_orig__
itkProjectedLandweberDeconvolutionImageFilterISS3ISS3_cast = _itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterISS3ISS3_cast


def itkProjectedLandweberDeconvolutionImageFilterIUC2IUC2_New():
    return itkProjectedLandweberDeconvolutionImageFilterIUC2IUC2.New()

class itkProjectedLandweberDeconvolutionImageFilterIUC2IUC2(itkProjectedLandweberDeconvolutionImageFilterIUC2IUC2_Superclass):
    r"""


    Deconvolve an image using the projected Landweber deconvolution
    algorithm.

    This filter performs the same calculation per iteration as the
    LandweberDeconvolutionImageFilter. However, at each iteration,
    negative pixels in the intermediate result are projected (set) to
    zero. This is useful if the solution is assumed to always be non-
    negative, which is the case when dealing with images formed by
    counting photons, for example.

    This code was adapted from the Insight Journal contribution:

    "Deconvolution: infrastructure and reference algorithms" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3207

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill

    See:   IterativeDeconvolutionImageFilter

    See:   RichardsonLucyDeconvolutionImageFilter

    See:   LandweberDeconvolutionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIUC2IUC2_Clone)
    __swig_destroy__ = _itkProjectedLandweberDeconvolutionImageFilterPython.delete_itkProjectedLandweberDeconvolutionImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkProjectedLandweberDeconvolutionImageFilterIUC2IUC2

        Create a new object of the class itkProjectedLandweberDeconvolutionImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkProjectedLandweberDeconvolutionImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkProjectedLandweberDeconvolutionImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkProjectedLandweberDeconvolutionImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkProjectedLandweberDeconvolutionImageFilterIUC2IUC2 in _itkProjectedLandweberDeconvolutionImageFilterPython:
_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIUC2IUC2_swigregister(itkProjectedLandweberDeconvolutionImageFilterIUC2IUC2)
itkProjectedLandweberDeconvolutionImageFilterIUC2IUC2___New_orig__ = _itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIUC2IUC2___New_orig__
itkProjectedLandweberDeconvolutionImageFilterIUC2IUC2_cast = _itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIUC2IUC2_cast


def itkProjectedLandweberDeconvolutionImageFilterIUC3IUC3_New():
    return itkProjectedLandweberDeconvolutionImageFilterIUC3IUC3.New()

class itkProjectedLandweberDeconvolutionImageFilterIUC3IUC3(itkProjectedLandweberDeconvolutionImageFilterIUC3IUC3_Superclass):
    r"""


    Deconvolve an image using the projected Landweber deconvolution
    algorithm.

    This filter performs the same calculation per iteration as the
    LandweberDeconvolutionImageFilter. However, at each iteration,
    negative pixels in the intermediate result are projected (set) to
    zero. This is useful if the solution is assumed to always be non-
    negative, which is the case when dealing with images formed by
    counting photons, for example.

    This code was adapted from the Insight Journal contribution:

    "Deconvolution: infrastructure and reference algorithms" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3207

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill

    See:   IterativeDeconvolutionImageFilter

    See:   RichardsonLucyDeconvolutionImageFilter

    See:   LandweberDeconvolutionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIUC3IUC3_Clone)
    __swig_destroy__ = _itkProjectedLandweberDeconvolutionImageFilterPython.delete_itkProjectedLandweberDeconvolutionImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkProjectedLandweberDeconvolutionImageFilterIUC3IUC3

        Create a new object of the class itkProjectedLandweberDeconvolutionImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkProjectedLandweberDeconvolutionImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkProjectedLandweberDeconvolutionImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkProjectedLandweberDeconvolutionImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkProjectedLandweberDeconvolutionImageFilterIUC3IUC3 in _itkProjectedLandweberDeconvolutionImageFilterPython:
_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIUC3IUC3_swigregister(itkProjectedLandweberDeconvolutionImageFilterIUC3IUC3)
itkProjectedLandweberDeconvolutionImageFilterIUC3IUC3___New_orig__ = _itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIUC3IUC3___New_orig__
itkProjectedLandweberDeconvolutionImageFilterIUC3IUC3_cast = _itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIUC3IUC3_cast


def itkProjectedLandweberDeconvolutionImageFilterIUS2IUS2_New():
    return itkProjectedLandweberDeconvolutionImageFilterIUS2IUS2.New()

class itkProjectedLandweberDeconvolutionImageFilterIUS2IUS2(itkProjectedLandweberDeconvolutionImageFilterIUS2IUS2_Superclass):
    r"""


    Deconvolve an image using the projected Landweber deconvolution
    algorithm.

    This filter performs the same calculation per iteration as the
    LandweberDeconvolutionImageFilter. However, at each iteration,
    negative pixels in the intermediate result are projected (set) to
    zero. This is useful if the solution is assumed to always be non-
    negative, which is the case when dealing with images formed by
    counting photons, for example.

    This code was adapted from the Insight Journal contribution:

    "Deconvolution: infrastructure and reference algorithms" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3207

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill

    See:   IterativeDeconvolutionImageFilter

    See:   RichardsonLucyDeconvolutionImageFilter

    See:   LandweberDeconvolutionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIUS2IUS2_Clone)
    __swig_destroy__ = _itkProjectedLandweberDeconvolutionImageFilterPython.delete_itkProjectedLandweberDeconvolutionImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkProjectedLandweberDeconvolutionImageFilterIUS2IUS2

        Create a new object of the class itkProjectedLandweberDeconvolutionImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkProjectedLandweberDeconvolutionImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkProjectedLandweberDeconvolutionImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkProjectedLandweberDeconvolutionImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkProjectedLandweberDeconvolutionImageFilterIUS2IUS2 in _itkProjectedLandweberDeconvolutionImageFilterPython:
_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIUS2IUS2_swigregister(itkProjectedLandweberDeconvolutionImageFilterIUS2IUS2)
itkProjectedLandweberDeconvolutionImageFilterIUS2IUS2___New_orig__ = _itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIUS2IUS2___New_orig__
itkProjectedLandweberDeconvolutionImageFilterIUS2IUS2_cast = _itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIUS2IUS2_cast


def itkProjectedLandweberDeconvolutionImageFilterIUS3IUS3_New():
    return itkProjectedLandweberDeconvolutionImageFilterIUS3IUS3.New()

class itkProjectedLandweberDeconvolutionImageFilterIUS3IUS3(itkProjectedLandweberDeconvolutionImageFilterIUS3IUS3_Superclass):
    r"""


    Deconvolve an image using the projected Landweber deconvolution
    algorithm.

    This filter performs the same calculation per iteration as the
    LandweberDeconvolutionImageFilter. However, at each iteration,
    negative pixels in the intermediate result are projected (set) to
    zero. This is useful if the solution is assumed to always be non-
    negative, which is the case when dealing with images formed by
    counting photons, for example.

    This code was adapted from the Insight Journal contribution:

    "Deconvolution: infrastructure and reference algorithms" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3207

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill

    See:   IterativeDeconvolutionImageFilter

    See:   RichardsonLucyDeconvolutionImageFilter

    See:   LandweberDeconvolutionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIUS3IUS3_Clone)
    __swig_destroy__ = _itkProjectedLandweberDeconvolutionImageFilterPython.delete_itkProjectedLandweberDeconvolutionImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkProjectedLandweberDeconvolutionImageFilterIUS3IUS3

        Create a new object of the class itkProjectedLandweberDeconvolutionImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkProjectedLandweberDeconvolutionImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkProjectedLandweberDeconvolutionImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkProjectedLandweberDeconvolutionImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkProjectedLandweberDeconvolutionImageFilterIUS3IUS3 in _itkProjectedLandweberDeconvolutionImageFilterPython:
_itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIUS3IUS3_swigregister(itkProjectedLandweberDeconvolutionImageFilterIUS3IUS3)
itkProjectedLandweberDeconvolutionImageFilterIUS3IUS3___New_orig__ = _itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIUS3IUS3___New_orig__
itkProjectedLandweberDeconvolutionImageFilterIUS3IUS3_cast = _itkProjectedLandweberDeconvolutionImageFilterPython.itkProjectedLandweberDeconvolutionImageFilterIUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def projected_iterative_deconvolution_image_filter(*args, **kwargs):
    """Procedural interface for ProjectedIterativeDeconvolutionImageFilter"""
    import itk
    instance = itk.ProjectedIterativeDeconvolutionImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def projected_iterative_deconvolution_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ProjectedIterativeDeconvolutionImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.ProjectedIterativeDeconvolutionImageFilter.values()[0]
    else:
        filter_object = itk.ProjectedIterativeDeconvolutionImageFilter

    projected_iterative_deconvolution_image_filter.__doc__ = filter_object.__doc__
    projected_iterative_deconvolution_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    projected_iterative_deconvolution_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.ProjectedIterativeDeconvolutionImageFilter, itkTemplate.itkTemplate):
        projected_iterative_deconvolution_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        projected_iterative_deconvolution_image_filter.__doc__ += "\n"
        projected_iterative_deconvolution_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        projected_iterative_deconvolution_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])
import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def projected_landweber_deconvolution_image_filter(*args, **kwargs):
    """Procedural interface for ProjectedLandweberDeconvolutionImageFilter"""
    import itk
    instance = itk.ProjectedLandweberDeconvolutionImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def projected_landweber_deconvolution_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ProjectedLandweberDeconvolutionImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.ProjectedLandweberDeconvolutionImageFilter.values()[0]
    else:
        filter_object = itk.ProjectedLandweberDeconvolutionImageFilter

    projected_landweber_deconvolution_image_filter.__doc__ = filter_object.__doc__
    projected_landweber_deconvolution_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    projected_landweber_deconvolution_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.ProjectedLandweberDeconvolutionImageFilter, itkTemplate.itkTemplate):
        projected_landweber_deconvolution_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        projected_landweber_deconvolution_image_filter.__doc__ += "\n"
        projected_landweber_deconvolution_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        projected_landweber_deconvolution_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



