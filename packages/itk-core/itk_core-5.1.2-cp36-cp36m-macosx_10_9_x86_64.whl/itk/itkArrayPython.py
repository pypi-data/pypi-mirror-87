# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkArrayPython
else:
    import _itkArrayPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkArrayPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkArrayPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
class itkArrayD(itk.vnl_vectorPython.vnl_vectorD):
    r"""


    Array class with size defined at construction time.

    This class derives from the vnl_vector<> class. Its size is assigned
    at construction time (run time) and can not be changed afterwards
    except by using assignment to another Array.

    The class is templated over the type of the elements.

    Template parameters for class Array:

    TValue = Element type stored at each location in the array. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(itkArrayD self) -> itkArrayD
        __init__(itkArrayD self, itkArrayD arg0) -> itkArrayD
        __init__(itkArrayD self, vnl_vectorD arg0) -> itkArrayD
        __init__(itkArrayD self, unsigned long dimension) -> itkArrayD
        __init__(itkArrayD self, double * datain, unsigned long sz, bool LetArrayManageMemory=False) -> itkArrayD
        __init__(itkArrayD self, double const * datain, unsigned long sz) -> itkArrayD


        Array class with size defined at construction time.

        This class derives from the vnl_vector<> class. Its size is assigned
        at construction time (run time) and can not be changed afterwards
        except by using assignment to another Array.

        The class is templated over the type of the elements.

        Template parameters for class Array:

        TValue = Element type stored at each location in the array. 
        """
        _itkArrayPython.itkArrayD_swiginit(self, _itkArrayPython.new_itkArrayD(*args))
    Fill = _swig_new_instance_method(_itkArrayPython.itkArrayD_Fill)
    Size = _swig_new_instance_method(_itkArrayPython.itkArrayD_Size)
    GetNumberOfElements = _swig_new_instance_method(_itkArrayPython.itkArrayD_GetNumberOfElements)
    GetElement = _swig_new_instance_method(_itkArrayPython.itkArrayD_GetElement)
    SetElement = _swig_new_instance_method(_itkArrayPython.itkArrayD_SetElement)
    SetSize = _swig_new_instance_method(_itkArrayPython.itkArrayD_SetSize)
    GetSize = _swig_new_instance_method(_itkArrayPython.itkArrayD_GetSize)
    SetDataSameSize = _swig_new_instance_method(_itkArrayPython.itkArrayD_SetDataSameSize)
    SetData = _swig_new_instance_method(_itkArrayPython.itkArrayD_SetData)
    __swig_destroy__ = _itkArrayPython.delete_itkArrayD
    Swap = _swig_new_instance_method(_itkArrayPython.itkArrayD_Swap)
    __getitem__ = _swig_new_instance_method(_itkArrayPython.itkArrayD___getitem__)
    __setitem__ = _swig_new_instance_method(_itkArrayPython.itkArrayD___setitem__)
    __len__ = _swig_new_instance_method(_itkArrayPython.itkArrayD___len__)
    __repr__ = _swig_new_instance_method(_itkArrayPython.itkArrayD___repr__)

# Register itkArrayD in _itkArrayPython:
_itkArrayPython.itkArrayD_swigregister(itkArrayD)

class itkArrayF(itk.vnl_vectorPython.vnl_vectorF):
    r"""


    Array class with size defined at construction time.

    This class derives from the vnl_vector<> class. Its size is assigned
    at construction time (run time) and can not be changed afterwards
    except by using assignment to another Array.

    The class is templated over the type of the elements.

    Template parameters for class Array:

    TValue = Element type stored at each location in the array. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(itkArrayF self) -> itkArrayF
        __init__(itkArrayF self, itkArrayF arg0) -> itkArrayF
        __init__(itkArrayF self, vnl_vectorF arg0) -> itkArrayF
        __init__(itkArrayF self, unsigned long dimension) -> itkArrayF
        __init__(itkArrayF self, float * datain, unsigned long sz, bool LetArrayManageMemory=False) -> itkArrayF
        __init__(itkArrayF self, float const * datain, unsigned long sz) -> itkArrayF


        Array class with size defined at construction time.

        This class derives from the vnl_vector<> class. Its size is assigned
        at construction time (run time) and can not be changed afterwards
        except by using assignment to another Array.

        The class is templated over the type of the elements.

        Template parameters for class Array:

        TValue = Element type stored at each location in the array. 
        """
        _itkArrayPython.itkArrayF_swiginit(self, _itkArrayPython.new_itkArrayF(*args))
    Fill = _swig_new_instance_method(_itkArrayPython.itkArrayF_Fill)
    Size = _swig_new_instance_method(_itkArrayPython.itkArrayF_Size)
    GetNumberOfElements = _swig_new_instance_method(_itkArrayPython.itkArrayF_GetNumberOfElements)
    GetElement = _swig_new_instance_method(_itkArrayPython.itkArrayF_GetElement)
    SetElement = _swig_new_instance_method(_itkArrayPython.itkArrayF_SetElement)
    SetSize = _swig_new_instance_method(_itkArrayPython.itkArrayF_SetSize)
    GetSize = _swig_new_instance_method(_itkArrayPython.itkArrayF_GetSize)
    SetDataSameSize = _swig_new_instance_method(_itkArrayPython.itkArrayF_SetDataSameSize)
    SetData = _swig_new_instance_method(_itkArrayPython.itkArrayF_SetData)
    __swig_destroy__ = _itkArrayPython.delete_itkArrayF
    Swap = _swig_new_instance_method(_itkArrayPython.itkArrayF_Swap)
    __getitem__ = _swig_new_instance_method(_itkArrayPython.itkArrayF___getitem__)
    __setitem__ = _swig_new_instance_method(_itkArrayPython.itkArrayF___setitem__)
    __len__ = _swig_new_instance_method(_itkArrayPython.itkArrayF___len__)
    __repr__ = _swig_new_instance_method(_itkArrayPython.itkArrayF___repr__)

# Register itkArrayF in _itkArrayPython:
_itkArrayPython.itkArrayF_swigregister(itkArrayF)

class itkArraySL(itk.vnl_vectorPython.vnl_vectorSL):
    r"""


    Array class with size defined at construction time.

    This class derives from the vnl_vector<> class. Its size is assigned
    at construction time (run time) and can not be changed afterwards
    except by using assignment to another Array.

    The class is templated over the type of the elements.

    Template parameters for class Array:

    TValue = Element type stored at each location in the array. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(itkArraySL self) -> itkArraySL
        __init__(itkArraySL self, itkArraySL arg0) -> itkArraySL
        __init__(itkArraySL self, vnl_vectorSL arg0) -> itkArraySL
        __init__(itkArraySL self, unsigned long dimension) -> itkArraySL
        __init__(itkArraySL self, long * datain, unsigned long sz, bool LetArrayManageMemory=False) -> itkArraySL
        __init__(itkArraySL self, long const * datain, unsigned long sz) -> itkArraySL


        Array class with size defined at construction time.

        This class derives from the vnl_vector<> class. Its size is assigned
        at construction time (run time) and can not be changed afterwards
        except by using assignment to another Array.

        The class is templated over the type of the elements.

        Template parameters for class Array:

        TValue = Element type stored at each location in the array. 
        """
        _itkArrayPython.itkArraySL_swiginit(self, _itkArrayPython.new_itkArraySL(*args))
    Fill = _swig_new_instance_method(_itkArrayPython.itkArraySL_Fill)
    Size = _swig_new_instance_method(_itkArrayPython.itkArraySL_Size)
    GetNumberOfElements = _swig_new_instance_method(_itkArrayPython.itkArraySL_GetNumberOfElements)
    GetElement = _swig_new_instance_method(_itkArrayPython.itkArraySL_GetElement)
    SetElement = _swig_new_instance_method(_itkArrayPython.itkArraySL_SetElement)
    SetSize = _swig_new_instance_method(_itkArrayPython.itkArraySL_SetSize)
    GetSize = _swig_new_instance_method(_itkArrayPython.itkArraySL_GetSize)
    SetDataSameSize = _swig_new_instance_method(_itkArrayPython.itkArraySL_SetDataSameSize)
    SetData = _swig_new_instance_method(_itkArrayPython.itkArraySL_SetData)
    __swig_destroy__ = _itkArrayPython.delete_itkArraySL
    Swap = _swig_new_instance_method(_itkArrayPython.itkArraySL_Swap)
    __getitem__ = _swig_new_instance_method(_itkArrayPython.itkArraySL___getitem__)
    __setitem__ = _swig_new_instance_method(_itkArrayPython.itkArraySL___setitem__)
    __len__ = _swig_new_instance_method(_itkArrayPython.itkArraySL___len__)
    __repr__ = _swig_new_instance_method(_itkArrayPython.itkArraySL___repr__)

# Register itkArraySL in _itkArrayPython:
_itkArrayPython.itkArraySL_swigregister(itkArraySL)

class itkArraySLL(itk.vnl_vectorPython.vnl_vectorSLL):
    r"""


    Array class with size defined at construction time.

    This class derives from the vnl_vector<> class. Its size is assigned
    at construction time (run time) and can not be changed afterwards
    except by using assignment to another Array.

    The class is templated over the type of the elements.

    Template parameters for class Array:

    TValue = Element type stored at each location in the array. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(itkArraySLL self) -> itkArraySLL
        __init__(itkArraySLL self, itkArraySLL arg0) -> itkArraySLL
        __init__(itkArraySLL self, vnl_vectorSLL arg0) -> itkArraySLL
        __init__(itkArraySLL self, unsigned long dimension) -> itkArraySLL
        __init__(itkArraySLL self, long long * datain, unsigned long sz, bool LetArrayManageMemory=False) -> itkArraySLL
        __init__(itkArraySLL self, long long const * datain, unsigned long sz) -> itkArraySLL


        Array class with size defined at construction time.

        This class derives from the vnl_vector<> class. Its size is assigned
        at construction time (run time) and can not be changed afterwards
        except by using assignment to another Array.

        The class is templated over the type of the elements.

        Template parameters for class Array:

        TValue = Element type stored at each location in the array. 
        """
        _itkArrayPython.itkArraySLL_swiginit(self, _itkArrayPython.new_itkArraySLL(*args))
    Fill = _swig_new_instance_method(_itkArrayPython.itkArraySLL_Fill)
    Size = _swig_new_instance_method(_itkArrayPython.itkArraySLL_Size)
    GetNumberOfElements = _swig_new_instance_method(_itkArrayPython.itkArraySLL_GetNumberOfElements)
    GetElement = _swig_new_instance_method(_itkArrayPython.itkArraySLL_GetElement)
    SetElement = _swig_new_instance_method(_itkArrayPython.itkArraySLL_SetElement)
    SetSize = _swig_new_instance_method(_itkArrayPython.itkArraySLL_SetSize)
    GetSize = _swig_new_instance_method(_itkArrayPython.itkArraySLL_GetSize)
    SetDataSameSize = _swig_new_instance_method(_itkArrayPython.itkArraySLL_SetDataSameSize)
    SetData = _swig_new_instance_method(_itkArrayPython.itkArraySLL_SetData)
    __swig_destroy__ = _itkArrayPython.delete_itkArraySLL
    Swap = _swig_new_instance_method(_itkArrayPython.itkArraySLL_Swap)
    __getitem__ = _swig_new_instance_method(_itkArrayPython.itkArraySLL___getitem__)
    __setitem__ = _swig_new_instance_method(_itkArrayPython.itkArraySLL___setitem__)
    __len__ = _swig_new_instance_method(_itkArrayPython.itkArraySLL___len__)
    __repr__ = _swig_new_instance_method(_itkArrayPython.itkArraySLL___repr__)

# Register itkArraySLL in _itkArrayPython:
_itkArrayPython.itkArraySLL_swigregister(itkArraySLL)

class itkArrayUI(itk.vnl_vectorPython.vnl_vectorUI):
    r"""


    Array class with size defined at construction time.

    This class derives from the vnl_vector<> class. Its size is assigned
    at construction time (run time) and can not be changed afterwards
    except by using assignment to another Array.

    The class is templated over the type of the elements.

    Template parameters for class Array:

    TValue = Element type stored at each location in the array. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(itkArrayUI self) -> itkArrayUI
        __init__(itkArrayUI self, itkArrayUI arg0) -> itkArrayUI
        __init__(itkArrayUI self, vnl_vectorUI arg0) -> itkArrayUI
        __init__(itkArrayUI self, unsigned long dimension) -> itkArrayUI
        __init__(itkArrayUI self, unsigned int * datain, unsigned long sz, bool LetArrayManageMemory=False) -> itkArrayUI
        __init__(itkArrayUI self, unsigned int const * datain, unsigned long sz) -> itkArrayUI


        Array class with size defined at construction time.

        This class derives from the vnl_vector<> class. Its size is assigned
        at construction time (run time) and can not be changed afterwards
        except by using assignment to another Array.

        The class is templated over the type of the elements.

        Template parameters for class Array:

        TValue = Element type stored at each location in the array. 
        """
        _itkArrayPython.itkArrayUI_swiginit(self, _itkArrayPython.new_itkArrayUI(*args))
    Fill = _swig_new_instance_method(_itkArrayPython.itkArrayUI_Fill)
    Size = _swig_new_instance_method(_itkArrayPython.itkArrayUI_Size)
    GetNumberOfElements = _swig_new_instance_method(_itkArrayPython.itkArrayUI_GetNumberOfElements)
    GetElement = _swig_new_instance_method(_itkArrayPython.itkArrayUI_GetElement)
    SetElement = _swig_new_instance_method(_itkArrayPython.itkArrayUI_SetElement)
    SetSize = _swig_new_instance_method(_itkArrayPython.itkArrayUI_SetSize)
    GetSize = _swig_new_instance_method(_itkArrayPython.itkArrayUI_GetSize)
    SetDataSameSize = _swig_new_instance_method(_itkArrayPython.itkArrayUI_SetDataSameSize)
    SetData = _swig_new_instance_method(_itkArrayPython.itkArrayUI_SetData)
    __swig_destroy__ = _itkArrayPython.delete_itkArrayUI
    Swap = _swig_new_instance_method(_itkArrayPython.itkArrayUI_Swap)
    __getitem__ = _swig_new_instance_method(_itkArrayPython.itkArrayUI___getitem__)
    __setitem__ = _swig_new_instance_method(_itkArrayPython.itkArrayUI___setitem__)
    __len__ = _swig_new_instance_method(_itkArrayPython.itkArrayUI___len__)
    __repr__ = _swig_new_instance_method(_itkArrayPython.itkArrayUI___repr__)

# Register itkArrayUI in _itkArrayPython:
_itkArrayPython.itkArrayUI_swigregister(itkArrayUI)

class itkArrayUL(itk.vnl_vectorPython.vnl_vectorUL):
    r"""


    Array class with size defined at construction time.

    This class derives from the vnl_vector<> class. Its size is assigned
    at construction time (run time) and can not be changed afterwards
    except by using assignment to another Array.

    The class is templated over the type of the elements.

    Template parameters for class Array:

    TValue = Element type stored at each location in the array. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(itkArrayUL self) -> itkArrayUL
        __init__(itkArrayUL self, itkArrayUL arg0) -> itkArrayUL
        __init__(itkArrayUL self, vnl_vectorUL arg0) -> itkArrayUL
        __init__(itkArrayUL self, unsigned long dimension) -> itkArrayUL
        __init__(itkArrayUL self, unsigned long * datain, unsigned long sz, bool LetArrayManageMemory=False) -> itkArrayUL
        __init__(itkArrayUL self, unsigned long const * datain, unsigned long sz) -> itkArrayUL


        Array class with size defined at construction time.

        This class derives from the vnl_vector<> class. Its size is assigned
        at construction time (run time) and can not be changed afterwards
        except by using assignment to another Array.

        The class is templated over the type of the elements.

        Template parameters for class Array:

        TValue = Element type stored at each location in the array. 
        """
        _itkArrayPython.itkArrayUL_swiginit(self, _itkArrayPython.new_itkArrayUL(*args))
    Fill = _swig_new_instance_method(_itkArrayPython.itkArrayUL_Fill)
    Size = _swig_new_instance_method(_itkArrayPython.itkArrayUL_Size)
    GetNumberOfElements = _swig_new_instance_method(_itkArrayPython.itkArrayUL_GetNumberOfElements)
    GetElement = _swig_new_instance_method(_itkArrayPython.itkArrayUL_GetElement)
    SetElement = _swig_new_instance_method(_itkArrayPython.itkArrayUL_SetElement)
    SetSize = _swig_new_instance_method(_itkArrayPython.itkArrayUL_SetSize)
    GetSize = _swig_new_instance_method(_itkArrayPython.itkArrayUL_GetSize)
    SetDataSameSize = _swig_new_instance_method(_itkArrayPython.itkArrayUL_SetDataSameSize)
    SetData = _swig_new_instance_method(_itkArrayPython.itkArrayUL_SetData)
    __swig_destroy__ = _itkArrayPython.delete_itkArrayUL
    Swap = _swig_new_instance_method(_itkArrayPython.itkArrayUL_Swap)
    __getitem__ = _swig_new_instance_method(_itkArrayPython.itkArrayUL___getitem__)
    __setitem__ = _swig_new_instance_method(_itkArrayPython.itkArrayUL___setitem__)
    __len__ = _swig_new_instance_method(_itkArrayPython.itkArrayUL___len__)
    __repr__ = _swig_new_instance_method(_itkArrayPython.itkArrayUL___repr__)

# Register itkArrayUL in _itkArrayPython:
_itkArrayPython.itkArrayUL_swigregister(itkArrayUL)

class itkArrayULL(itk.vnl_vectorPython.vnl_vectorULL):
    r"""


    Array class with size defined at construction time.

    This class derives from the vnl_vector<> class. Its size is assigned
    at construction time (run time) and can not be changed afterwards
    except by using assignment to another Array.

    The class is templated over the type of the elements.

    Template parameters for class Array:

    TValue = Element type stored at each location in the array. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(itkArrayULL self) -> itkArrayULL
        __init__(itkArrayULL self, itkArrayULL arg0) -> itkArrayULL
        __init__(itkArrayULL self, vnl_vectorULL arg0) -> itkArrayULL
        __init__(itkArrayULL self, unsigned long dimension) -> itkArrayULL
        __init__(itkArrayULL self, unsigned long long * datain, unsigned long sz, bool LetArrayManageMemory=False) -> itkArrayULL
        __init__(itkArrayULL self, unsigned long long const * datain, unsigned long sz) -> itkArrayULL


        Array class with size defined at construction time.

        This class derives from the vnl_vector<> class. Its size is assigned
        at construction time (run time) and can not be changed afterwards
        except by using assignment to another Array.

        The class is templated over the type of the elements.

        Template parameters for class Array:

        TValue = Element type stored at each location in the array. 
        """
        _itkArrayPython.itkArrayULL_swiginit(self, _itkArrayPython.new_itkArrayULL(*args))
    Fill = _swig_new_instance_method(_itkArrayPython.itkArrayULL_Fill)
    Size = _swig_new_instance_method(_itkArrayPython.itkArrayULL_Size)
    GetNumberOfElements = _swig_new_instance_method(_itkArrayPython.itkArrayULL_GetNumberOfElements)
    GetElement = _swig_new_instance_method(_itkArrayPython.itkArrayULL_GetElement)
    SetElement = _swig_new_instance_method(_itkArrayPython.itkArrayULL_SetElement)
    SetSize = _swig_new_instance_method(_itkArrayPython.itkArrayULL_SetSize)
    GetSize = _swig_new_instance_method(_itkArrayPython.itkArrayULL_GetSize)
    SetDataSameSize = _swig_new_instance_method(_itkArrayPython.itkArrayULL_SetDataSameSize)
    SetData = _swig_new_instance_method(_itkArrayPython.itkArrayULL_SetData)
    __swig_destroy__ = _itkArrayPython.delete_itkArrayULL
    Swap = _swig_new_instance_method(_itkArrayPython.itkArrayULL_Swap)
    __getitem__ = _swig_new_instance_method(_itkArrayPython.itkArrayULL___getitem__)
    __setitem__ = _swig_new_instance_method(_itkArrayPython.itkArrayULL___setitem__)
    __len__ = _swig_new_instance_method(_itkArrayPython.itkArrayULL___len__)
    __repr__ = _swig_new_instance_method(_itkArrayPython.itkArrayULL___repr__)

# Register itkArrayULL in _itkArrayPython:
_itkArrayPython.itkArrayULL_swigregister(itkArrayULL)



