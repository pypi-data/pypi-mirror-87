# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKBiasCorrectionPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkN4BiasFieldCorrectionImageFilterPython
else:
    import _itkN4BiasFieldCorrectionImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkN4BiasFieldCorrectionImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkN4BiasFieldCorrectionImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImageSourcePython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkFixedArrayPython
import itk.stdcomplexPython
import itk.itkRGBAPixelPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.itkCovariantVectorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkArrayPython
import itk.itkImageToImageFilterCommonPython
class itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_Superclass(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_Superclass
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_Superclass_cast)

# Register itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_Superclass in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_Superclass_swigregister(itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_Superclass)
itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_Superclass_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_Superclass_cast

class itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_Superclass(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_Superclass
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_Superclass_cast)

# Register itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_Superclass in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_Superclass_swigregister(itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_Superclass)
itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_Superclass_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_Superclass_cast

class itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_Superclass(itk.itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_Superclass
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_Superclass_cast)

# Register itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_Superclass in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_Superclass_swigregister(itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_Superclass)
itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_Superclass_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_Superclass_cast

class itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_Superclass(itk.itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_Superclass
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_Superclass_cast)

# Register itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_Superclass in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_Superclass_swigregister(itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_Superclass)
itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_Superclass_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_Superclass_cast

class itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_Superclass
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_Superclass_cast)

# Register itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_Superclass in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_Superclass_swigregister(itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_Superclass)
itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_Superclass_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_Superclass_cast

class itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_Superclass(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_Superclass
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_Superclass_cast)

# Register itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_Superclass in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_Superclass_swigregister(itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_Superclass)
itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_Superclass_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_Superclass_cast

class itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_Superclass(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_Superclass
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_Superclass_cast)

# Register itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_Superclass in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_Superclass_swigregister(itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_Superclass)
itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_Superclass_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_Superclass_cast

class itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_Superclass(itk.itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_Superclass
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_Superclass_cast)

# Register itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_Superclass in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_Superclass_swigregister(itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_Superclass)
itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_Superclass_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_Superclass_cast

class itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_Superclass(itk.itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_Superclass
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_Superclass_cast)

# Register itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_Superclass in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_Superclass_swigregister(itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_Superclass)
itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_Superclass_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_Superclass_cast

class itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_Superclass
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_Superclass_cast)

# Register itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_Superclass in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_Superclass_swigregister(itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_Superclass)
itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_Superclass_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_Superclass_cast

class itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_Superclass(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_Superclass
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_Superclass_cast)

# Register itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_Superclass in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_Superclass_swigregister(itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_Superclass)
itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_Superclass_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_Superclass_cast

class itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_Superclass(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_Superclass
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_Superclass_cast)

# Register itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_Superclass in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_Superclass_swigregister(itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_Superclass)
itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_Superclass_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_Superclass_cast

class itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_Superclass(itk.itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_Superclass
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_Superclass_cast)

# Register itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_Superclass in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_Superclass_swigregister(itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_Superclass)
itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_Superclass_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_Superclass_cast

class itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_Superclass(itk.itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_Superclass
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_Superclass_cast)

# Register itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_Superclass in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_Superclass_swigregister(itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_Superclass)
itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_Superclass_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_Superclass_cast

class itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_Superclass
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_Superclass_cast)

# Register itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_Superclass in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_Superclass_swigregister(itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_Superclass)
itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_Superclass_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_Superclass_cast

class itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_Superclass(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_Superclass
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_Superclass_cast)

# Register itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_Superclass in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_Superclass_swigregister(itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_Superclass)
itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_Superclass_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_Superclass_cast

class itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_Superclass(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_Superclass
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_Superclass_cast)

# Register itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_Superclass in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_Superclass_swigregister(itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_Superclass)
itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_Superclass_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_Superclass_cast

class itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_Superclass(itk.itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_Superclass
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_Superclass_cast)

# Register itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_Superclass in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_Superclass_swigregister(itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_Superclass)
itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_Superclass_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_Superclass_cast

class itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_Superclass(itk.itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_Superclass
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_Superclass_cast)

# Register itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_Superclass in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_Superclass_swigregister(itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_Superclass)
itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_Superclass_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_Superclass_cast

class itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_Superclass
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_Superclass_cast)

# Register itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_Superclass in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_Superclass_swigregister(itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_Superclass)
itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_Superclass_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_Superclass_cast

class itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_Superclass(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_Superclass
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_Superclass_cast)

# Register itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_Superclass in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_Superclass_swigregister(itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_Superclass)
itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_Superclass_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_Superclass_cast

class itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_Superclass(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_Superclass
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_Superclass_cast)

# Register itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_Superclass in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_Superclass_swigregister(itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_Superclass)
itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_Superclass_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_Superclass_cast

class itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_Superclass(itk.itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_Superclass
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_Superclass_cast)

# Register itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_Superclass in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_Superclass_swigregister(itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_Superclass)
itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_Superclass_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_Superclass_cast

class itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_Superclass(itk.itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_Superclass
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_Superclass_cast)

# Register itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_Superclass in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_Superclass_swigregister(itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_Superclass)
itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_Superclass_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_Superclass_cast

class itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_Superclass
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_Superclass_cast)

# Register itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_Superclass in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_Superclass_swigregister(itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_Superclass)
itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_Superclass_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_Superclass_cast

class itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_Superclass(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_Superclass
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_Superclass_cast)

# Register itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_Superclass in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_Superclass_swigregister(itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_Superclass)
itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_Superclass_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_Superclass_cast

class itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_Superclass(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_Superclass
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_Superclass_cast)

# Register itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_Superclass in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_Superclass_swigregister(itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_Superclass)
itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_Superclass_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_Superclass_cast

class itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_Superclass(itk.itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_Superclass
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_Superclass_cast)

# Register itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_Superclass in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_Superclass_swigregister(itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_Superclass)
itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_Superclass_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_Superclass_cast

class itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_Superclass(itk.itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_Superclass
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_Superclass_cast)

# Register itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_Superclass in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_Superclass_swigregister(itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_Superclass)
itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_Superclass_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_Superclass_cast

class itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_Superclass
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_Superclass_cast)

# Register itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_Superclass in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_Superclass_swigregister(itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_Superclass)
itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_Superclass_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_Superclass_cast

class itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_Superclass(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_Superclass
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_Superclass_cast)

# Register itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_Superclass in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_Superclass_swigregister(itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_Superclass)
itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_Superclass_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_Superclass_cast

class itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_Superclass(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_Superclass
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_Superclass_cast)

# Register itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_Superclass in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_Superclass_swigregister(itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_Superclass)
itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_Superclass_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_Superclass_cast

class itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_Superclass(itk.itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_Superclass
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_Superclass_cast)

# Register itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_Superclass in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_Superclass_swigregister(itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_Superclass)
itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_Superclass_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_Superclass_cast

class itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_Superclass(itk.itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_Superclass
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_Superclass_cast)

# Register itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_Superclass in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_Superclass_swigregister(itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_Superclass)
itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_Superclass_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_Superclass_cast

class itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_Superclass
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_Superclass_cast)

# Register itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_Superclass in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_Superclass_swigregister(itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_Superclass)
itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_Superclass_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_Superclass_cast

class itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_Superclass(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_Superclass
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_Superclass_cast)

# Register itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_Superclass in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_Superclass_swigregister(itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_Superclass)
itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_Superclass_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_Superclass_cast

class itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_Superclass(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_Superclass
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_Superclass_cast)

# Register itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_Superclass in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_Superclass_swigregister(itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_Superclass)
itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_Superclass_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_Superclass_cast

class itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_Superclass(itk.itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_Superclass
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_Superclass_cast)

# Register itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_Superclass in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_Superclass_swigregister(itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_Superclass)
itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_Superclass_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_Superclass_cast

class itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_Superclass(itk.itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_Superclass
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_Superclass_cast)

# Register itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_Superclass in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_Superclass_swigregister(itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_Superclass)
itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_Superclass_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_Superclass_cast

class itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_Superclass
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_Superclass_cast)

# Register itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_Superclass in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_Superclass_swigregister(itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_Superclass)
itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_Superclass_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_Superclass_cast

class itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_Superclass(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_Superclass
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_Superclass_cast)

# Register itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_Superclass in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_Superclass_swigregister(itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_Superclass)
itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_Superclass_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_Superclass_cast

class itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_Superclass(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_Superclass
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_Superclass_cast)

# Register itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_Superclass in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_Superclass_swigregister(itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_Superclass)
itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_Superclass_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_Superclass_cast

class itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_Superclass(itk.itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_Superclass
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_Superclass_cast)

# Register itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_Superclass in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_Superclass_swigregister(itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_Superclass)
itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_Superclass_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_Superclass_cast

class itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_Superclass(itk.itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_Superclass
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_Superclass_cast)

# Register itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_Superclass in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_Superclass_swigregister(itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_Superclass)
itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_Superclass_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_Superclass_cast

class itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_Superclass
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_Superclass_cast)

# Register itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_Superclass in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_Superclass_swigregister(itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_Superclass)
itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_Superclass_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_Superclass_cast

class itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_Superclass(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_Superclass
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_Superclass_cast)

# Register itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_Superclass in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_Superclass_swigregister(itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_Superclass)
itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_Superclass_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_Superclass_cast

class itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_Superclass(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_Superclass
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_Superclass_cast)

# Register itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_Superclass in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_Superclass_swigregister(itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_Superclass)
itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_Superclass_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_Superclass_cast

class itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_Superclass(itk.itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_Superclass
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_Superclass_cast)

# Register itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_Superclass in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_Superclass_swigregister(itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_Superclass)
itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_Superclass_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_Superclass_cast

class itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_Superclass(itk.itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_Superclass
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_Superclass_cast)

# Register itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_Superclass in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_Superclass_swigregister(itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_Superclass)
itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_Superclass_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_Superclass_cast

class itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_Superclass
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_Superclass_cast)

# Register itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_Superclass in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_Superclass_swigregister(itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_Superclass)
itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_Superclass_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_Superclass_cast


def itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_New():
    return itkN4BiasFieldCorrectionImageFilterID2IUC2ID2.New()

class itkN4BiasFieldCorrectionImageFilterID2IUC2ID2(itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_Superclass):
    r"""


    Implementation of the N4 bias field correction algorithm.

    The nonparametric nonuniform intensity normalization (N3) algorithm,
    as introduced by Sled et al. in 1998 is a method for correcting
    nonuniformity associated with MR images. The algorithm assumes a
    simple parametric model (Gaussian) for the bias field and does not
    require tissue class segmentation. In addition, there are only a
    couple of parameters to tune with the default values performing quite
    well. N3 has been publicly available as a set of perl scripts (http://
    www.bic.mni.mcgill.ca/ServicesSoftwareAdvancedImageProcessingTo
    ols/HomePage)

    The N4 algorithm, encapsulated with this class, is a variation of the
    original N3 algorithm with the additional benefits of an improved
    B-spline fitting routine which allows for multiple resolutions to be
    used during the correction process. We also modify the iterative
    update component of algorithm such that the residual bias field is
    continually updated

    Notes for the user: Since much of the image manipulation is done in
    the log space of the intensities, input images with negative and small
    values (< 1) can produce poor results.

    The original authors recommend performing the bias field correction on
    a downsampled version of the original image.

    A binary mask or a weighted image can be supplied. If a binary mask is
    specified, those voxels in the input image which correspond to the
    voxels in the mask image are used to estimate the bias field. If a
    UseMaskLabel value is set to false (the default), all non-zero voxels
    in the MaskImage will be masked; otherwise only voxels in the
    MaskImage that match the MaskLabel will be used. If a confidence image
    is specified, the input voxels are weighted in the b-spline fitting
    routine according to the confidence voxel values.

    The filter returns the corrected image. If the bias field is wanted,
    one can reconstruct it using the class
    itkBSplineControlPointImageFilter.

    The 'Z' parameter in Sled's 1998 paper is the square root of the class
    variable 'm_WienerFilterNoise'.

    The basic algorithm iterates between sharpening the intensity
    histogram of the corrected input image and spatially smoothing those
    results with a B-spline scalar field estimate of the bias field.

    Nicholas J. Tustison  Contributed by Nicholas J. Tustison, James C.
    Gee in the Insight Journal paper:https://hdl.handle.net/10380/3053

    REFERENCE  J.G. Sled, A.P. Zijdenbos and A.C. Evans. "A Nonparametric
    Method for Automatic Correction of Intensity Nonuniformity in  Data"
    IEEE Transactions on Medical Imaging, Vol 17, No 1. Feb 1998.

    N.J. Tustison, B.B. Avants, P.A. Cook, Y. Zheng, A. Egan, P.A.
    Yushkevich, and J.C. Gee. "N4ITK:  Improved N3 Bias Correction" IEEE
    Transactions on Medical Imaging, 29(6):1310-1320, June 2010. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_Clone)
    SetInput1 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_GetMaskImage)
    SetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_SetMaskLabel)
    GetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_GetMaskLabel)
    SetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_SetUseMaskLabel)
    GetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_GetUseMaskLabel)
    UseMaskLabelOn = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_UseMaskLabelOn)
    UseMaskLabelOff = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_UseMaskLabelOff)
    SetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_SetConfidenceImage)
    SetInput3 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_SetInput3)
    GetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_GetConfidenceImage)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_GetNumberOfHistogramBins)
    SetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_SetWienerFilterNoise)
    GetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_GetWienerFilterNoise)
    SetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_SetBiasFieldFullWidthAtHalfMaximum)
    GetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_GetBiasFieldFullWidthAtHalfMaximum)
    SetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_GetSplineOrder)
    SetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_SetNumberOfControlPoints)
    GetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_GetNumberOfControlPoints)
    SetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_SetNumberOfFittingLevels)
    GetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_GetNumberOfFittingLevels)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_GetMaximumNumberOfIterations)
    SetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_GetConvergenceThreshold)
    GetLogBiasFieldControlPointLattice = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_GetLogBiasFieldControlPointLattice)
    GetElapsedIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_GetElapsedIterations)
    GetCurrentConvergenceMeasurement = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_GetCurrentConvergenceMeasurement)
    GetCurrentLevel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_GetCurrentLevel)
    ReconstructBiasField = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_ReconstructBiasField)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterID2IUC2ID2
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkN4BiasFieldCorrectionImageFilterID2IUC2ID2

        Create a new object of the class itkN4BiasFieldCorrectionImageFilterID2IUC2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkN4BiasFieldCorrectionImageFilterID2IUC2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkN4BiasFieldCorrectionImageFilterID2IUC2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkN4BiasFieldCorrectionImageFilterID2IUC2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkN4BiasFieldCorrectionImageFilterID2IUC2ID2 in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_swigregister(itkN4BiasFieldCorrectionImageFilterID2IUC2ID2)
itkN4BiasFieldCorrectionImageFilterID2IUC2ID2___New_orig__ = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ID2___New_orig__
itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ID2_cast


def itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_New():
    return itkN4BiasFieldCorrectionImageFilterID2IUC2IF2.New()

class itkN4BiasFieldCorrectionImageFilterID2IUC2IF2(itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_Superclass):
    r"""


    Implementation of the N4 bias field correction algorithm.

    The nonparametric nonuniform intensity normalization (N3) algorithm,
    as introduced by Sled et al. in 1998 is a method for correcting
    nonuniformity associated with MR images. The algorithm assumes a
    simple parametric model (Gaussian) for the bias field and does not
    require tissue class segmentation. In addition, there are only a
    couple of parameters to tune with the default values performing quite
    well. N3 has been publicly available as a set of perl scripts (http://
    www.bic.mni.mcgill.ca/ServicesSoftwareAdvancedImageProcessingTo
    ols/HomePage)

    The N4 algorithm, encapsulated with this class, is a variation of the
    original N3 algorithm with the additional benefits of an improved
    B-spline fitting routine which allows for multiple resolutions to be
    used during the correction process. We also modify the iterative
    update component of algorithm such that the residual bias field is
    continually updated

    Notes for the user: Since much of the image manipulation is done in
    the log space of the intensities, input images with negative and small
    values (< 1) can produce poor results.

    The original authors recommend performing the bias field correction on
    a downsampled version of the original image.

    A binary mask or a weighted image can be supplied. If a binary mask is
    specified, those voxels in the input image which correspond to the
    voxels in the mask image are used to estimate the bias field. If a
    UseMaskLabel value is set to false (the default), all non-zero voxels
    in the MaskImage will be masked; otherwise only voxels in the
    MaskImage that match the MaskLabel will be used. If a confidence image
    is specified, the input voxels are weighted in the b-spline fitting
    routine according to the confidence voxel values.

    The filter returns the corrected image. If the bias field is wanted,
    one can reconstruct it using the class
    itkBSplineControlPointImageFilter.

    The 'Z' parameter in Sled's 1998 paper is the square root of the class
    variable 'm_WienerFilterNoise'.

    The basic algorithm iterates between sharpening the intensity
    histogram of the corrected input image and spatially smoothing those
    results with a B-spline scalar field estimate of the bias field.

    Nicholas J. Tustison  Contributed by Nicholas J. Tustison, James C.
    Gee in the Insight Journal paper:https://hdl.handle.net/10380/3053

    REFERENCE  J.G. Sled, A.P. Zijdenbos and A.C. Evans. "A Nonparametric
    Method for Automatic Correction of Intensity Nonuniformity in  Data"
    IEEE Transactions on Medical Imaging, Vol 17, No 1. Feb 1998.

    N.J. Tustison, B.B. Avants, P.A. Cook, Y. Zheng, A. Egan, P.A.
    Yushkevich, and J.C. Gee. "N4ITK:  Improved N3 Bias Correction" IEEE
    Transactions on Medical Imaging, 29(6):1310-1320, June 2010. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_Clone)
    SetInput1 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_GetMaskImage)
    SetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_SetMaskLabel)
    GetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_GetMaskLabel)
    SetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_SetUseMaskLabel)
    GetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_GetUseMaskLabel)
    UseMaskLabelOn = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_UseMaskLabelOn)
    UseMaskLabelOff = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_UseMaskLabelOff)
    SetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_SetConfidenceImage)
    SetInput3 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_SetInput3)
    GetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_GetConfidenceImage)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_GetNumberOfHistogramBins)
    SetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_SetWienerFilterNoise)
    GetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_GetWienerFilterNoise)
    SetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_SetBiasFieldFullWidthAtHalfMaximum)
    GetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_GetBiasFieldFullWidthAtHalfMaximum)
    SetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_GetSplineOrder)
    SetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_SetNumberOfControlPoints)
    GetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_GetNumberOfControlPoints)
    SetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_SetNumberOfFittingLevels)
    GetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_GetNumberOfFittingLevels)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_GetMaximumNumberOfIterations)
    SetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_GetConvergenceThreshold)
    GetLogBiasFieldControlPointLattice = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_GetLogBiasFieldControlPointLattice)
    GetElapsedIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_GetElapsedIterations)
    GetCurrentConvergenceMeasurement = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_GetCurrentConvergenceMeasurement)
    GetCurrentLevel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_GetCurrentLevel)
    ReconstructBiasField = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_ReconstructBiasField)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterID2IUC2IF2
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkN4BiasFieldCorrectionImageFilterID2IUC2IF2

        Create a new object of the class itkN4BiasFieldCorrectionImageFilterID2IUC2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkN4BiasFieldCorrectionImageFilterID2IUC2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkN4BiasFieldCorrectionImageFilterID2IUC2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkN4BiasFieldCorrectionImageFilterID2IUC2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkN4BiasFieldCorrectionImageFilterID2IUC2IF2 in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_swigregister(itkN4BiasFieldCorrectionImageFilterID2IUC2IF2)
itkN4BiasFieldCorrectionImageFilterID2IUC2IF2___New_orig__ = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IF2___New_orig__
itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IF2_cast


def itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_New():
    return itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2.New()

class itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2(itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_Superclass):
    r"""


    Implementation of the N4 bias field correction algorithm.

    The nonparametric nonuniform intensity normalization (N3) algorithm,
    as introduced by Sled et al. in 1998 is a method for correcting
    nonuniformity associated with MR images. The algorithm assumes a
    simple parametric model (Gaussian) for the bias field and does not
    require tissue class segmentation. In addition, there are only a
    couple of parameters to tune with the default values performing quite
    well. N3 has been publicly available as a set of perl scripts (http://
    www.bic.mni.mcgill.ca/ServicesSoftwareAdvancedImageProcessingTo
    ols/HomePage)

    The N4 algorithm, encapsulated with this class, is a variation of the
    original N3 algorithm with the additional benefits of an improved
    B-spline fitting routine which allows for multiple resolutions to be
    used during the correction process. We also modify the iterative
    update component of algorithm such that the residual bias field is
    continually updated

    Notes for the user: Since much of the image manipulation is done in
    the log space of the intensities, input images with negative and small
    values (< 1) can produce poor results.

    The original authors recommend performing the bias field correction on
    a downsampled version of the original image.

    A binary mask or a weighted image can be supplied. If a binary mask is
    specified, those voxels in the input image which correspond to the
    voxels in the mask image are used to estimate the bias field. If a
    UseMaskLabel value is set to false (the default), all non-zero voxels
    in the MaskImage will be masked; otherwise only voxels in the
    MaskImage that match the MaskLabel will be used. If a confidence image
    is specified, the input voxels are weighted in the b-spline fitting
    routine according to the confidence voxel values.

    The filter returns the corrected image. If the bias field is wanted,
    one can reconstruct it using the class
    itkBSplineControlPointImageFilter.

    The 'Z' parameter in Sled's 1998 paper is the square root of the class
    variable 'm_WienerFilterNoise'.

    The basic algorithm iterates between sharpening the intensity
    histogram of the corrected input image and spatially smoothing those
    results with a B-spline scalar field estimate of the bias field.

    Nicholas J. Tustison  Contributed by Nicholas J. Tustison, James C.
    Gee in the Insight Journal paper:https://hdl.handle.net/10380/3053

    REFERENCE  J.G. Sled, A.P. Zijdenbos and A.C. Evans. "A Nonparametric
    Method for Automatic Correction of Intensity Nonuniformity in  Data"
    IEEE Transactions on Medical Imaging, Vol 17, No 1. Feb 1998.

    N.J. Tustison, B.B. Avants, P.A. Cook, Y. Zheng, A. Egan, P.A.
    Yushkevich, and J.C. Gee. "N4ITK:  Improved N3 Bias Correction" IEEE
    Transactions on Medical Imaging, 29(6):1310-1320, June 2010. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_Clone)
    SetInput1 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_GetMaskImage)
    SetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_SetMaskLabel)
    GetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_GetMaskLabel)
    SetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_SetUseMaskLabel)
    GetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_GetUseMaskLabel)
    UseMaskLabelOn = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_UseMaskLabelOn)
    UseMaskLabelOff = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_UseMaskLabelOff)
    SetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_SetConfidenceImage)
    SetInput3 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_SetInput3)
    GetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_GetConfidenceImage)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_GetNumberOfHistogramBins)
    SetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_SetWienerFilterNoise)
    GetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_GetWienerFilterNoise)
    SetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_SetBiasFieldFullWidthAtHalfMaximum)
    GetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_GetBiasFieldFullWidthAtHalfMaximum)
    SetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_GetSplineOrder)
    SetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_SetNumberOfControlPoints)
    GetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_GetNumberOfControlPoints)
    SetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_SetNumberOfFittingLevels)
    GetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_GetNumberOfFittingLevels)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_GetMaximumNumberOfIterations)
    SetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_GetConvergenceThreshold)
    GetLogBiasFieldControlPointLattice = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_GetLogBiasFieldControlPointLattice)
    GetElapsedIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_GetElapsedIterations)
    GetCurrentConvergenceMeasurement = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_GetCurrentConvergenceMeasurement)
    GetCurrentLevel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_GetCurrentLevel)
    ReconstructBiasField = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_ReconstructBiasField)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2

        Create a new object of the class itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2 in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_swigregister(itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2)
itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2___New_orig__ = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2___New_orig__
itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2ISS2_cast


def itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_New():
    return itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2.New()

class itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2(itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_Superclass):
    r"""


    Implementation of the N4 bias field correction algorithm.

    The nonparametric nonuniform intensity normalization (N3) algorithm,
    as introduced by Sled et al. in 1998 is a method for correcting
    nonuniformity associated with MR images. The algorithm assumes a
    simple parametric model (Gaussian) for the bias field and does not
    require tissue class segmentation. In addition, there are only a
    couple of parameters to tune with the default values performing quite
    well. N3 has been publicly available as a set of perl scripts (http://
    www.bic.mni.mcgill.ca/ServicesSoftwareAdvancedImageProcessingTo
    ols/HomePage)

    The N4 algorithm, encapsulated with this class, is a variation of the
    original N3 algorithm with the additional benefits of an improved
    B-spline fitting routine which allows for multiple resolutions to be
    used during the correction process. We also modify the iterative
    update component of algorithm such that the residual bias field is
    continually updated

    Notes for the user: Since much of the image manipulation is done in
    the log space of the intensities, input images with negative and small
    values (< 1) can produce poor results.

    The original authors recommend performing the bias field correction on
    a downsampled version of the original image.

    A binary mask or a weighted image can be supplied. If a binary mask is
    specified, those voxels in the input image which correspond to the
    voxels in the mask image are used to estimate the bias field. If a
    UseMaskLabel value is set to false (the default), all non-zero voxels
    in the MaskImage will be masked; otherwise only voxels in the
    MaskImage that match the MaskLabel will be used. If a confidence image
    is specified, the input voxels are weighted in the b-spline fitting
    routine according to the confidence voxel values.

    The filter returns the corrected image. If the bias field is wanted,
    one can reconstruct it using the class
    itkBSplineControlPointImageFilter.

    The 'Z' parameter in Sled's 1998 paper is the square root of the class
    variable 'm_WienerFilterNoise'.

    The basic algorithm iterates between sharpening the intensity
    histogram of the corrected input image and spatially smoothing those
    results with a B-spline scalar field estimate of the bias field.

    Nicholas J. Tustison  Contributed by Nicholas J. Tustison, James C.
    Gee in the Insight Journal paper:https://hdl.handle.net/10380/3053

    REFERENCE  J.G. Sled, A.P. Zijdenbos and A.C. Evans. "A Nonparametric
    Method for Automatic Correction of Intensity Nonuniformity in  Data"
    IEEE Transactions on Medical Imaging, Vol 17, No 1. Feb 1998.

    N.J. Tustison, B.B. Avants, P.A. Cook, Y. Zheng, A. Egan, P.A.
    Yushkevich, and J.C. Gee. "N4ITK:  Improved N3 Bias Correction" IEEE
    Transactions on Medical Imaging, 29(6):1310-1320, June 2010. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_Clone)
    SetInput1 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_GetMaskImage)
    SetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_SetMaskLabel)
    GetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_GetMaskLabel)
    SetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_SetUseMaskLabel)
    GetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_GetUseMaskLabel)
    UseMaskLabelOn = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_UseMaskLabelOn)
    UseMaskLabelOff = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_UseMaskLabelOff)
    SetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_SetConfidenceImage)
    SetInput3 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_SetInput3)
    GetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_GetConfidenceImage)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_GetNumberOfHistogramBins)
    SetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_SetWienerFilterNoise)
    GetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_GetWienerFilterNoise)
    SetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_SetBiasFieldFullWidthAtHalfMaximum)
    GetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_GetBiasFieldFullWidthAtHalfMaximum)
    SetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_GetSplineOrder)
    SetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_SetNumberOfControlPoints)
    GetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_GetNumberOfControlPoints)
    SetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_SetNumberOfFittingLevels)
    GetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_GetNumberOfFittingLevels)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_GetMaximumNumberOfIterations)
    SetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_GetConvergenceThreshold)
    GetLogBiasFieldControlPointLattice = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_GetLogBiasFieldControlPointLattice)
    GetElapsedIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_GetElapsedIterations)
    GetCurrentConvergenceMeasurement = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_GetCurrentConvergenceMeasurement)
    GetCurrentLevel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_GetCurrentLevel)
    ReconstructBiasField = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_ReconstructBiasField)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2

        Create a new object of the class itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2 in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_swigregister(itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2)
itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2___New_orig__ = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2___New_orig__
itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUC2_cast


def itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_New():
    return itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2.New()

class itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2(itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_Superclass):
    r"""


    Implementation of the N4 bias field correction algorithm.

    The nonparametric nonuniform intensity normalization (N3) algorithm,
    as introduced by Sled et al. in 1998 is a method for correcting
    nonuniformity associated with MR images. The algorithm assumes a
    simple parametric model (Gaussian) for the bias field and does not
    require tissue class segmentation. In addition, there are only a
    couple of parameters to tune with the default values performing quite
    well. N3 has been publicly available as a set of perl scripts (http://
    www.bic.mni.mcgill.ca/ServicesSoftwareAdvancedImageProcessingTo
    ols/HomePage)

    The N4 algorithm, encapsulated with this class, is a variation of the
    original N3 algorithm with the additional benefits of an improved
    B-spline fitting routine which allows for multiple resolutions to be
    used during the correction process. We also modify the iterative
    update component of algorithm such that the residual bias field is
    continually updated

    Notes for the user: Since much of the image manipulation is done in
    the log space of the intensities, input images with negative and small
    values (< 1) can produce poor results.

    The original authors recommend performing the bias field correction on
    a downsampled version of the original image.

    A binary mask or a weighted image can be supplied. If a binary mask is
    specified, those voxels in the input image which correspond to the
    voxels in the mask image are used to estimate the bias field. If a
    UseMaskLabel value is set to false (the default), all non-zero voxels
    in the MaskImage will be masked; otherwise only voxels in the
    MaskImage that match the MaskLabel will be used. If a confidence image
    is specified, the input voxels are weighted in the b-spline fitting
    routine according to the confidence voxel values.

    The filter returns the corrected image. If the bias field is wanted,
    one can reconstruct it using the class
    itkBSplineControlPointImageFilter.

    The 'Z' parameter in Sled's 1998 paper is the square root of the class
    variable 'm_WienerFilterNoise'.

    The basic algorithm iterates between sharpening the intensity
    histogram of the corrected input image and spatially smoothing those
    results with a B-spline scalar field estimate of the bias field.

    Nicholas J. Tustison  Contributed by Nicholas J. Tustison, James C.
    Gee in the Insight Journal paper:https://hdl.handle.net/10380/3053

    REFERENCE  J.G. Sled, A.P. Zijdenbos and A.C. Evans. "A Nonparametric
    Method for Automatic Correction of Intensity Nonuniformity in  Data"
    IEEE Transactions on Medical Imaging, Vol 17, No 1. Feb 1998.

    N.J. Tustison, B.B. Avants, P.A. Cook, Y. Zheng, A. Egan, P.A.
    Yushkevich, and J.C. Gee. "N4ITK:  Improved N3 Bias Correction" IEEE
    Transactions on Medical Imaging, 29(6):1310-1320, June 2010. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_Clone)
    SetInput1 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_GetMaskImage)
    SetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_SetMaskLabel)
    GetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_GetMaskLabel)
    SetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_SetUseMaskLabel)
    GetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_GetUseMaskLabel)
    UseMaskLabelOn = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_UseMaskLabelOn)
    UseMaskLabelOff = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_UseMaskLabelOff)
    SetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_SetConfidenceImage)
    SetInput3 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_SetInput3)
    GetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_GetConfidenceImage)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_GetNumberOfHistogramBins)
    SetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_SetWienerFilterNoise)
    GetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_GetWienerFilterNoise)
    SetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_SetBiasFieldFullWidthAtHalfMaximum)
    GetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_GetBiasFieldFullWidthAtHalfMaximum)
    SetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_GetSplineOrder)
    SetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_SetNumberOfControlPoints)
    GetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_GetNumberOfControlPoints)
    SetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_SetNumberOfFittingLevels)
    GetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_GetNumberOfFittingLevels)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_GetMaximumNumberOfIterations)
    SetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_GetConvergenceThreshold)
    GetLogBiasFieldControlPointLattice = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_GetLogBiasFieldControlPointLattice)
    GetElapsedIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_GetElapsedIterations)
    GetCurrentConvergenceMeasurement = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_GetCurrentConvergenceMeasurement)
    GetCurrentLevel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_GetCurrentLevel)
    ReconstructBiasField = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_ReconstructBiasField)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2

        Create a new object of the class itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2 in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_swigregister(itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2)
itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2___New_orig__ = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2___New_orig__
itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID2IUC2IUS2_cast


def itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_New():
    return itkN4BiasFieldCorrectionImageFilterID3IUC3ID3.New()

class itkN4BiasFieldCorrectionImageFilterID3IUC3ID3(itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_Superclass):
    r"""


    Implementation of the N4 bias field correction algorithm.

    The nonparametric nonuniform intensity normalization (N3) algorithm,
    as introduced by Sled et al. in 1998 is a method for correcting
    nonuniformity associated with MR images. The algorithm assumes a
    simple parametric model (Gaussian) for the bias field and does not
    require tissue class segmentation. In addition, there are only a
    couple of parameters to tune with the default values performing quite
    well. N3 has been publicly available as a set of perl scripts (http://
    www.bic.mni.mcgill.ca/ServicesSoftwareAdvancedImageProcessingTo
    ols/HomePage)

    The N4 algorithm, encapsulated with this class, is a variation of the
    original N3 algorithm with the additional benefits of an improved
    B-spline fitting routine which allows for multiple resolutions to be
    used during the correction process. We also modify the iterative
    update component of algorithm such that the residual bias field is
    continually updated

    Notes for the user: Since much of the image manipulation is done in
    the log space of the intensities, input images with negative and small
    values (< 1) can produce poor results.

    The original authors recommend performing the bias field correction on
    a downsampled version of the original image.

    A binary mask or a weighted image can be supplied. If a binary mask is
    specified, those voxels in the input image which correspond to the
    voxels in the mask image are used to estimate the bias field. If a
    UseMaskLabel value is set to false (the default), all non-zero voxels
    in the MaskImage will be masked; otherwise only voxels in the
    MaskImage that match the MaskLabel will be used. If a confidence image
    is specified, the input voxels are weighted in the b-spline fitting
    routine according to the confidence voxel values.

    The filter returns the corrected image. If the bias field is wanted,
    one can reconstruct it using the class
    itkBSplineControlPointImageFilter.

    The 'Z' parameter in Sled's 1998 paper is the square root of the class
    variable 'm_WienerFilterNoise'.

    The basic algorithm iterates between sharpening the intensity
    histogram of the corrected input image and spatially smoothing those
    results with a B-spline scalar field estimate of the bias field.

    Nicholas J. Tustison  Contributed by Nicholas J. Tustison, James C.
    Gee in the Insight Journal paper:https://hdl.handle.net/10380/3053

    REFERENCE  J.G. Sled, A.P. Zijdenbos and A.C. Evans. "A Nonparametric
    Method for Automatic Correction of Intensity Nonuniformity in  Data"
    IEEE Transactions on Medical Imaging, Vol 17, No 1. Feb 1998.

    N.J. Tustison, B.B. Avants, P.A. Cook, Y. Zheng, A. Egan, P.A.
    Yushkevich, and J.C. Gee. "N4ITK:  Improved N3 Bias Correction" IEEE
    Transactions on Medical Imaging, 29(6):1310-1320, June 2010. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_Clone)
    SetInput1 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_GetMaskImage)
    SetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_SetMaskLabel)
    GetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_GetMaskLabel)
    SetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_SetUseMaskLabel)
    GetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_GetUseMaskLabel)
    UseMaskLabelOn = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_UseMaskLabelOn)
    UseMaskLabelOff = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_UseMaskLabelOff)
    SetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_SetConfidenceImage)
    SetInput3 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_SetInput3)
    GetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_GetConfidenceImage)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_GetNumberOfHistogramBins)
    SetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_SetWienerFilterNoise)
    GetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_GetWienerFilterNoise)
    SetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_SetBiasFieldFullWidthAtHalfMaximum)
    GetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_GetBiasFieldFullWidthAtHalfMaximum)
    SetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_GetSplineOrder)
    SetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_SetNumberOfControlPoints)
    GetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_GetNumberOfControlPoints)
    SetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_SetNumberOfFittingLevels)
    GetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_GetNumberOfFittingLevels)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_GetMaximumNumberOfIterations)
    SetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_GetConvergenceThreshold)
    GetLogBiasFieldControlPointLattice = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_GetLogBiasFieldControlPointLattice)
    GetElapsedIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_GetElapsedIterations)
    GetCurrentConvergenceMeasurement = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_GetCurrentConvergenceMeasurement)
    GetCurrentLevel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_GetCurrentLevel)
    ReconstructBiasField = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_ReconstructBiasField)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterID3IUC3ID3
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkN4BiasFieldCorrectionImageFilterID3IUC3ID3

        Create a new object of the class itkN4BiasFieldCorrectionImageFilterID3IUC3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkN4BiasFieldCorrectionImageFilterID3IUC3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkN4BiasFieldCorrectionImageFilterID3IUC3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkN4BiasFieldCorrectionImageFilterID3IUC3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkN4BiasFieldCorrectionImageFilterID3IUC3ID3 in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_swigregister(itkN4BiasFieldCorrectionImageFilterID3IUC3ID3)
itkN4BiasFieldCorrectionImageFilterID3IUC3ID3___New_orig__ = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ID3___New_orig__
itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ID3_cast


def itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_New():
    return itkN4BiasFieldCorrectionImageFilterID3IUC3IF3.New()

class itkN4BiasFieldCorrectionImageFilterID3IUC3IF3(itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_Superclass):
    r"""


    Implementation of the N4 bias field correction algorithm.

    The nonparametric nonuniform intensity normalization (N3) algorithm,
    as introduced by Sled et al. in 1998 is a method for correcting
    nonuniformity associated with MR images. The algorithm assumes a
    simple parametric model (Gaussian) for the bias field and does not
    require tissue class segmentation. In addition, there are only a
    couple of parameters to tune with the default values performing quite
    well. N3 has been publicly available as a set of perl scripts (http://
    www.bic.mni.mcgill.ca/ServicesSoftwareAdvancedImageProcessingTo
    ols/HomePage)

    The N4 algorithm, encapsulated with this class, is a variation of the
    original N3 algorithm with the additional benefits of an improved
    B-spline fitting routine which allows for multiple resolutions to be
    used during the correction process. We also modify the iterative
    update component of algorithm such that the residual bias field is
    continually updated

    Notes for the user: Since much of the image manipulation is done in
    the log space of the intensities, input images with negative and small
    values (< 1) can produce poor results.

    The original authors recommend performing the bias field correction on
    a downsampled version of the original image.

    A binary mask or a weighted image can be supplied. If a binary mask is
    specified, those voxels in the input image which correspond to the
    voxels in the mask image are used to estimate the bias field. If a
    UseMaskLabel value is set to false (the default), all non-zero voxels
    in the MaskImage will be masked; otherwise only voxels in the
    MaskImage that match the MaskLabel will be used. If a confidence image
    is specified, the input voxels are weighted in the b-spline fitting
    routine according to the confidence voxel values.

    The filter returns the corrected image. If the bias field is wanted,
    one can reconstruct it using the class
    itkBSplineControlPointImageFilter.

    The 'Z' parameter in Sled's 1998 paper is the square root of the class
    variable 'm_WienerFilterNoise'.

    The basic algorithm iterates between sharpening the intensity
    histogram of the corrected input image and spatially smoothing those
    results with a B-spline scalar field estimate of the bias field.

    Nicholas J. Tustison  Contributed by Nicholas J. Tustison, James C.
    Gee in the Insight Journal paper:https://hdl.handle.net/10380/3053

    REFERENCE  J.G. Sled, A.P. Zijdenbos and A.C. Evans. "A Nonparametric
    Method for Automatic Correction of Intensity Nonuniformity in  Data"
    IEEE Transactions on Medical Imaging, Vol 17, No 1. Feb 1998.

    N.J. Tustison, B.B. Avants, P.A. Cook, Y. Zheng, A. Egan, P.A.
    Yushkevich, and J.C. Gee. "N4ITK:  Improved N3 Bias Correction" IEEE
    Transactions on Medical Imaging, 29(6):1310-1320, June 2010. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_Clone)
    SetInput1 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_GetMaskImage)
    SetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_SetMaskLabel)
    GetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_GetMaskLabel)
    SetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_SetUseMaskLabel)
    GetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_GetUseMaskLabel)
    UseMaskLabelOn = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_UseMaskLabelOn)
    UseMaskLabelOff = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_UseMaskLabelOff)
    SetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_SetConfidenceImage)
    SetInput3 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_SetInput3)
    GetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_GetConfidenceImage)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_GetNumberOfHistogramBins)
    SetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_SetWienerFilterNoise)
    GetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_GetWienerFilterNoise)
    SetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_SetBiasFieldFullWidthAtHalfMaximum)
    GetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_GetBiasFieldFullWidthAtHalfMaximum)
    SetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_GetSplineOrder)
    SetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_SetNumberOfControlPoints)
    GetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_GetNumberOfControlPoints)
    SetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_SetNumberOfFittingLevels)
    GetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_GetNumberOfFittingLevels)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_GetMaximumNumberOfIterations)
    SetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_GetConvergenceThreshold)
    GetLogBiasFieldControlPointLattice = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_GetLogBiasFieldControlPointLattice)
    GetElapsedIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_GetElapsedIterations)
    GetCurrentConvergenceMeasurement = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_GetCurrentConvergenceMeasurement)
    GetCurrentLevel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_GetCurrentLevel)
    ReconstructBiasField = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_ReconstructBiasField)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterID3IUC3IF3
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkN4BiasFieldCorrectionImageFilterID3IUC3IF3

        Create a new object of the class itkN4BiasFieldCorrectionImageFilterID3IUC3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkN4BiasFieldCorrectionImageFilterID3IUC3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkN4BiasFieldCorrectionImageFilterID3IUC3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkN4BiasFieldCorrectionImageFilterID3IUC3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkN4BiasFieldCorrectionImageFilterID3IUC3IF3 in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_swigregister(itkN4BiasFieldCorrectionImageFilterID3IUC3IF3)
itkN4BiasFieldCorrectionImageFilterID3IUC3IF3___New_orig__ = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IF3___New_orig__
itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IF3_cast


def itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_New():
    return itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3.New()

class itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3(itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_Superclass):
    r"""


    Implementation of the N4 bias field correction algorithm.

    The nonparametric nonuniform intensity normalization (N3) algorithm,
    as introduced by Sled et al. in 1998 is a method for correcting
    nonuniformity associated with MR images. The algorithm assumes a
    simple parametric model (Gaussian) for the bias field and does not
    require tissue class segmentation. In addition, there are only a
    couple of parameters to tune with the default values performing quite
    well. N3 has been publicly available as a set of perl scripts (http://
    www.bic.mni.mcgill.ca/ServicesSoftwareAdvancedImageProcessingTo
    ols/HomePage)

    The N4 algorithm, encapsulated with this class, is a variation of the
    original N3 algorithm with the additional benefits of an improved
    B-spline fitting routine which allows for multiple resolutions to be
    used during the correction process. We also modify the iterative
    update component of algorithm such that the residual bias field is
    continually updated

    Notes for the user: Since much of the image manipulation is done in
    the log space of the intensities, input images with negative and small
    values (< 1) can produce poor results.

    The original authors recommend performing the bias field correction on
    a downsampled version of the original image.

    A binary mask or a weighted image can be supplied. If a binary mask is
    specified, those voxels in the input image which correspond to the
    voxels in the mask image are used to estimate the bias field. If a
    UseMaskLabel value is set to false (the default), all non-zero voxels
    in the MaskImage will be masked; otherwise only voxels in the
    MaskImage that match the MaskLabel will be used. If a confidence image
    is specified, the input voxels are weighted in the b-spline fitting
    routine according to the confidence voxel values.

    The filter returns the corrected image. If the bias field is wanted,
    one can reconstruct it using the class
    itkBSplineControlPointImageFilter.

    The 'Z' parameter in Sled's 1998 paper is the square root of the class
    variable 'm_WienerFilterNoise'.

    The basic algorithm iterates between sharpening the intensity
    histogram of the corrected input image and spatially smoothing those
    results with a B-spline scalar field estimate of the bias field.

    Nicholas J. Tustison  Contributed by Nicholas J. Tustison, James C.
    Gee in the Insight Journal paper:https://hdl.handle.net/10380/3053

    REFERENCE  J.G. Sled, A.P. Zijdenbos and A.C. Evans. "A Nonparametric
    Method for Automatic Correction of Intensity Nonuniformity in  Data"
    IEEE Transactions on Medical Imaging, Vol 17, No 1. Feb 1998.

    N.J. Tustison, B.B. Avants, P.A. Cook, Y. Zheng, A. Egan, P.A.
    Yushkevich, and J.C. Gee. "N4ITK:  Improved N3 Bias Correction" IEEE
    Transactions on Medical Imaging, 29(6):1310-1320, June 2010. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_Clone)
    SetInput1 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_GetMaskImage)
    SetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_SetMaskLabel)
    GetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_GetMaskLabel)
    SetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_SetUseMaskLabel)
    GetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_GetUseMaskLabel)
    UseMaskLabelOn = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_UseMaskLabelOn)
    UseMaskLabelOff = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_UseMaskLabelOff)
    SetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_SetConfidenceImage)
    SetInput3 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_SetInput3)
    GetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_GetConfidenceImage)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_GetNumberOfHistogramBins)
    SetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_SetWienerFilterNoise)
    GetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_GetWienerFilterNoise)
    SetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_SetBiasFieldFullWidthAtHalfMaximum)
    GetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_GetBiasFieldFullWidthAtHalfMaximum)
    SetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_GetSplineOrder)
    SetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_SetNumberOfControlPoints)
    GetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_GetNumberOfControlPoints)
    SetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_SetNumberOfFittingLevels)
    GetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_GetNumberOfFittingLevels)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_GetMaximumNumberOfIterations)
    SetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_GetConvergenceThreshold)
    GetLogBiasFieldControlPointLattice = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_GetLogBiasFieldControlPointLattice)
    GetElapsedIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_GetElapsedIterations)
    GetCurrentConvergenceMeasurement = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_GetCurrentConvergenceMeasurement)
    GetCurrentLevel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_GetCurrentLevel)
    ReconstructBiasField = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_ReconstructBiasField)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3

        Create a new object of the class itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3 in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_swigregister(itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3)
itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3___New_orig__ = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3___New_orig__
itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3ISS3_cast


def itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_New():
    return itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3.New()

class itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3(itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_Superclass):
    r"""


    Implementation of the N4 bias field correction algorithm.

    The nonparametric nonuniform intensity normalization (N3) algorithm,
    as introduced by Sled et al. in 1998 is a method for correcting
    nonuniformity associated with MR images. The algorithm assumes a
    simple parametric model (Gaussian) for the bias field and does not
    require tissue class segmentation. In addition, there are only a
    couple of parameters to tune with the default values performing quite
    well. N3 has been publicly available as a set of perl scripts (http://
    www.bic.mni.mcgill.ca/ServicesSoftwareAdvancedImageProcessingTo
    ols/HomePage)

    The N4 algorithm, encapsulated with this class, is a variation of the
    original N3 algorithm with the additional benefits of an improved
    B-spline fitting routine which allows for multiple resolutions to be
    used during the correction process. We also modify the iterative
    update component of algorithm such that the residual bias field is
    continually updated

    Notes for the user: Since much of the image manipulation is done in
    the log space of the intensities, input images with negative and small
    values (< 1) can produce poor results.

    The original authors recommend performing the bias field correction on
    a downsampled version of the original image.

    A binary mask or a weighted image can be supplied. If a binary mask is
    specified, those voxels in the input image which correspond to the
    voxels in the mask image are used to estimate the bias field. If a
    UseMaskLabel value is set to false (the default), all non-zero voxels
    in the MaskImage will be masked; otherwise only voxels in the
    MaskImage that match the MaskLabel will be used. If a confidence image
    is specified, the input voxels are weighted in the b-spline fitting
    routine according to the confidence voxel values.

    The filter returns the corrected image. If the bias field is wanted,
    one can reconstruct it using the class
    itkBSplineControlPointImageFilter.

    The 'Z' parameter in Sled's 1998 paper is the square root of the class
    variable 'm_WienerFilterNoise'.

    The basic algorithm iterates between sharpening the intensity
    histogram of the corrected input image and spatially smoothing those
    results with a B-spline scalar field estimate of the bias field.

    Nicholas J. Tustison  Contributed by Nicholas J. Tustison, James C.
    Gee in the Insight Journal paper:https://hdl.handle.net/10380/3053

    REFERENCE  J.G. Sled, A.P. Zijdenbos and A.C. Evans. "A Nonparametric
    Method for Automatic Correction of Intensity Nonuniformity in  Data"
    IEEE Transactions on Medical Imaging, Vol 17, No 1. Feb 1998.

    N.J. Tustison, B.B. Avants, P.A. Cook, Y. Zheng, A. Egan, P.A.
    Yushkevich, and J.C. Gee. "N4ITK:  Improved N3 Bias Correction" IEEE
    Transactions on Medical Imaging, 29(6):1310-1320, June 2010. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_Clone)
    SetInput1 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_GetMaskImage)
    SetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_SetMaskLabel)
    GetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_GetMaskLabel)
    SetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_SetUseMaskLabel)
    GetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_GetUseMaskLabel)
    UseMaskLabelOn = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_UseMaskLabelOn)
    UseMaskLabelOff = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_UseMaskLabelOff)
    SetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_SetConfidenceImage)
    SetInput3 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_SetInput3)
    GetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_GetConfidenceImage)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_GetNumberOfHistogramBins)
    SetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_SetWienerFilterNoise)
    GetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_GetWienerFilterNoise)
    SetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_SetBiasFieldFullWidthAtHalfMaximum)
    GetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_GetBiasFieldFullWidthAtHalfMaximum)
    SetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_GetSplineOrder)
    SetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_SetNumberOfControlPoints)
    GetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_GetNumberOfControlPoints)
    SetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_SetNumberOfFittingLevels)
    GetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_GetNumberOfFittingLevels)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_GetMaximumNumberOfIterations)
    SetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_GetConvergenceThreshold)
    GetLogBiasFieldControlPointLattice = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_GetLogBiasFieldControlPointLattice)
    GetElapsedIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_GetElapsedIterations)
    GetCurrentConvergenceMeasurement = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_GetCurrentConvergenceMeasurement)
    GetCurrentLevel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_GetCurrentLevel)
    ReconstructBiasField = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_ReconstructBiasField)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3

        Create a new object of the class itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3 in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_swigregister(itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3)
itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3___New_orig__ = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3___New_orig__
itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUC3_cast


def itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_New():
    return itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3.New()

class itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3(itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_Superclass):
    r"""


    Implementation of the N4 bias field correction algorithm.

    The nonparametric nonuniform intensity normalization (N3) algorithm,
    as introduced by Sled et al. in 1998 is a method for correcting
    nonuniformity associated with MR images. The algorithm assumes a
    simple parametric model (Gaussian) for the bias field and does not
    require tissue class segmentation. In addition, there are only a
    couple of parameters to tune with the default values performing quite
    well. N3 has been publicly available as a set of perl scripts (http://
    www.bic.mni.mcgill.ca/ServicesSoftwareAdvancedImageProcessingTo
    ols/HomePage)

    The N4 algorithm, encapsulated with this class, is a variation of the
    original N3 algorithm with the additional benefits of an improved
    B-spline fitting routine which allows for multiple resolutions to be
    used during the correction process. We also modify the iterative
    update component of algorithm such that the residual bias field is
    continually updated

    Notes for the user: Since much of the image manipulation is done in
    the log space of the intensities, input images with negative and small
    values (< 1) can produce poor results.

    The original authors recommend performing the bias field correction on
    a downsampled version of the original image.

    A binary mask or a weighted image can be supplied. If a binary mask is
    specified, those voxels in the input image which correspond to the
    voxels in the mask image are used to estimate the bias field. If a
    UseMaskLabel value is set to false (the default), all non-zero voxels
    in the MaskImage will be masked; otherwise only voxels in the
    MaskImage that match the MaskLabel will be used. If a confidence image
    is specified, the input voxels are weighted in the b-spline fitting
    routine according to the confidence voxel values.

    The filter returns the corrected image. If the bias field is wanted,
    one can reconstruct it using the class
    itkBSplineControlPointImageFilter.

    The 'Z' parameter in Sled's 1998 paper is the square root of the class
    variable 'm_WienerFilterNoise'.

    The basic algorithm iterates between sharpening the intensity
    histogram of the corrected input image and spatially smoothing those
    results with a B-spline scalar field estimate of the bias field.

    Nicholas J. Tustison  Contributed by Nicholas J. Tustison, James C.
    Gee in the Insight Journal paper:https://hdl.handle.net/10380/3053

    REFERENCE  J.G. Sled, A.P. Zijdenbos and A.C. Evans. "A Nonparametric
    Method for Automatic Correction of Intensity Nonuniformity in  Data"
    IEEE Transactions on Medical Imaging, Vol 17, No 1. Feb 1998.

    N.J. Tustison, B.B. Avants, P.A. Cook, Y. Zheng, A. Egan, P.A.
    Yushkevich, and J.C. Gee. "N4ITK:  Improved N3 Bias Correction" IEEE
    Transactions on Medical Imaging, 29(6):1310-1320, June 2010. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_Clone)
    SetInput1 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_GetMaskImage)
    SetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_SetMaskLabel)
    GetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_GetMaskLabel)
    SetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_SetUseMaskLabel)
    GetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_GetUseMaskLabel)
    UseMaskLabelOn = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_UseMaskLabelOn)
    UseMaskLabelOff = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_UseMaskLabelOff)
    SetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_SetConfidenceImage)
    SetInput3 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_SetInput3)
    GetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_GetConfidenceImage)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_GetNumberOfHistogramBins)
    SetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_SetWienerFilterNoise)
    GetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_GetWienerFilterNoise)
    SetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_SetBiasFieldFullWidthAtHalfMaximum)
    GetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_GetBiasFieldFullWidthAtHalfMaximum)
    SetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_GetSplineOrder)
    SetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_SetNumberOfControlPoints)
    GetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_GetNumberOfControlPoints)
    SetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_SetNumberOfFittingLevels)
    GetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_GetNumberOfFittingLevels)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_GetMaximumNumberOfIterations)
    SetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_GetConvergenceThreshold)
    GetLogBiasFieldControlPointLattice = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_GetLogBiasFieldControlPointLattice)
    GetElapsedIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_GetElapsedIterations)
    GetCurrentConvergenceMeasurement = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_GetCurrentConvergenceMeasurement)
    GetCurrentLevel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_GetCurrentLevel)
    ReconstructBiasField = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_ReconstructBiasField)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3

        Create a new object of the class itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3 in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_swigregister(itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3)
itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3___New_orig__ = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3___New_orig__
itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterID3IUC3IUS3_cast


def itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_New():
    return itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2.New()

class itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2(itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_Superclass):
    r"""


    Implementation of the N4 bias field correction algorithm.

    The nonparametric nonuniform intensity normalization (N3) algorithm,
    as introduced by Sled et al. in 1998 is a method for correcting
    nonuniformity associated with MR images. The algorithm assumes a
    simple parametric model (Gaussian) for the bias field and does not
    require tissue class segmentation. In addition, there are only a
    couple of parameters to tune with the default values performing quite
    well. N3 has been publicly available as a set of perl scripts (http://
    www.bic.mni.mcgill.ca/ServicesSoftwareAdvancedImageProcessingTo
    ols/HomePage)

    The N4 algorithm, encapsulated with this class, is a variation of the
    original N3 algorithm with the additional benefits of an improved
    B-spline fitting routine which allows for multiple resolutions to be
    used during the correction process. We also modify the iterative
    update component of algorithm such that the residual bias field is
    continually updated

    Notes for the user: Since much of the image manipulation is done in
    the log space of the intensities, input images with negative and small
    values (< 1) can produce poor results.

    The original authors recommend performing the bias field correction on
    a downsampled version of the original image.

    A binary mask or a weighted image can be supplied. If a binary mask is
    specified, those voxels in the input image which correspond to the
    voxels in the mask image are used to estimate the bias field. If a
    UseMaskLabel value is set to false (the default), all non-zero voxels
    in the MaskImage will be masked; otherwise only voxels in the
    MaskImage that match the MaskLabel will be used. If a confidence image
    is specified, the input voxels are weighted in the b-spline fitting
    routine according to the confidence voxel values.

    The filter returns the corrected image. If the bias field is wanted,
    one can reconstruct it using the class
    itkBSplineControlPointImageFilter.

    The 'Z' parameter in Sled's 1998 paper is the square root of the class
    variable 'm_WienerFilterNoise'.

    The basic algorithm iterates between sharpening the intensity
    histogram of the corrected input image and spatially smoothing those
    results with a B-spline scalar field estimate of the bias field.

    Nicholas J. Tustison  Contributed by Nicholas J. Tustison, James C.
    Gee in the Insight Journal paper:https://hdl.handle.net/10380/3053

    REFERENCE  J.G. Sled, A.P. Zijdenbos and A.C. Evans. "A Nonparametric
    Method for Automatic Correction of Intensity Nonuniformity in  Data"
    IEEE Transactions on Medical Imaging, Vol 17, No 1. Feb 1998.

    N.J. Tustison, B.B. Avants, P.A. Cook, Y. Zheng, A. Egan, P.A.
    Yushkevich, and J.C. Gee. "N4ITK:  Improved N3 Bias Correction" IEEE
    Transactions on Medical Imaging, 29(6):1310-1320, June 2010. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_Clone)
    SetInput1 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_GetMaskImage)
    SetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_SetMaskLabel)
    GetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_GetMaskLabel)
    SetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_SetUseMaskLabel)
    GetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_GetUseMaskLabel)
    UseMaskLabelOn = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_UseMaskLabelOn)
    UseMaskLabelOff = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_UseMaskLabelOff)
    SetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_SetConfidenceImage)
    SetInput3 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_SetInput3)
    GetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_GetConfidenceImage)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_GetNumberOfHistogramBins)
    SetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_SetWienerFilterNoise)
    GetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_GetWienerFilterNoise)
    SetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_SetBiasFieldFullWidthAtHalfMaximum)
    GetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_GetBiasFieldFullWidthAtHalfMaximum)
    SetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_GetSplineOrder)
    SetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_SetNumberOfControlPoints)
    GetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_GetNumberOfControlPoints)
    SetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_SetNumberOfFittingLevels)
    GetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_GetNumberOfFittingLevels)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_GetMaximumNumberOfIterations)
    SetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_GetConvergenceThreshold)
    GetLogBiasFieldControlPointLattice = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_GetLogBiasFieldControlPointLattice)
    GetElapsedIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_GetElapsedIterations)
    GetCurrentConvergenceMeasurement = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_GetCurrentConvergenceMeasurement)
    GetCurrentLevel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_GetCurrentLevel)
    ReconstructBiasField = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_ReconstructBiasField)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2

        Create a new object of the class itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2 in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_swigregister(itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2)
itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2___New_orig__ = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2___New_orig__
itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ID2_cast


def itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_New():
    return itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2.New()

class itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2(itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_Superclass):
    r"""


    Implementation of the N4 bias field correction algorithm.

    The nonparametric nonuniform intensity normalization (N3) algorithm,
    as introduced by Sled et al. in 1998 is a method for correcting
    nonuniformity associated with MR images. The algorithm assumes a
    simple parametric model (Gaussian) for the bias field and does not
    require tissue class segmentation. In addition, there are only a
    couple of parameters to tune with the default values performing quite
    well. N3 has been publicly available as a set of perl scripts (http://
    www.bic.mni.mcgill.ca/ServicesSoftwareAdvancedImageProcessingTo
    ols/HomePage)

    The N4 algorithm, encapsulated with this class, is a variation of the
    original N3 algorithm with the additional benefits of an improved
    B-spline fitting routine which allows for multiple resolutions to be
    used during the correction process. We also modify the iterative
    update component of algorithm such that the residual bias field is
    continually updated

    Notes for the user: Since much of the image manipulation is done in
    the log space of the intensities, input images with negative and small
    values (< 1) can produce poor results.

    The original authors recommend performing the bias field correction on
    a downsampled version of the original image.

    A binary mask or a weighted image can be supplied. If a binary mask is
    specified, those voxels in the input image which correspond to the
    voxels in the mask image are used to estimate the bias field. If a
    UseMaskLabel value is set to false (the default), all non-zero voxels
    in the MaskImage will be masked; otherwise only voxels in the
    MaskImage that match the MaskLabel will be used. If a confidence image
    is specified, the input voxels are weighted in the b-spline fitting
    routine according to the confidence voxel values.

    The filter returns the corrected image. If the bias field is wanted,
    one can reconstruct it using the class
    itkBSplineControlPointImageFilter.

    The 'Z' parameter in Sled's 1998 paper is the square root of the class
    variable 'm_WienerFilterNoise'.

    The basic algorithm iterates between sharpening the intensity
    histogram of the corrected input image and spatially smoothing those
    results with a B-spline scalar field estimate of the bias field.

    Nicholas J. Tustison  Contributed by Nicholas J. Tustison, James C.
    Gee in the Insight Journal paper:https://hdl.handle.net/10380/3053

    REFERENCE  J.G. Sled, A.P. Zijdenbos and A.C. Evans. "A Nonparametric
    Method for Automatic Correction of Intensity Nonuniformity in  Data"
    IEEE Transactions on Medical Imaging, Vol 17, No 1. Feb 1998.

    N.J. Tustison, B.B. Avants, P.A. Cook, Y. Zheng, A. Egan, P.A.
    Yushkevich, and J.C. Gee. "N4ITK:  Improved N3 Bias Correction" IEEE
    Transactions on Medical Imaging, 29(6):1310-1320, June 2010. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_Clone)
    SetInput1 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_GetMaskImage)
    SetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_SetMaskLabel)
    GetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_GetMaskLabel)
    SetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_SetUseMaskLabel)
    GetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_GetUseMaskLabel)
    UseMaskLabelOn = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_UseMaskLabelOn)
    UseMaskLabelOff = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_UseMaskLabelOff)
    SetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_SetConfidenceImage)
    SetInput3 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_SetInput3)
    GetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_GetConfidenceImage)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_GetNumberOfHistogramBins)
    SetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_SetWienerFilterNoise)
    GetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_GetWienerFilterNoise)
    SetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_SetBiasFieldFullWidthAtHalfMaximum)
    GetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_GetBiasFieldFullWidthAtHalfMaximum)
    SetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_GetSplineOrder)
    SetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_SetNumberOfControlPoints)
    GetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_GetNumberOfControlPoints)
    SetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_SetNumberOfFittingLevels)
    GetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_GetNumberOfFittingLevels)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_GetMaximumNumberOfIterations)
    SetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_GetConvergenceThreshold)
    GetLogBiasFieldControlPointLattice = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_GetLogBiasFieldControlPointLattice)
    GetElapsedIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_GetElapsedIterations)
    GetCurrentConvergenceMeasurement = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_GetCurrentConvergenceMeasurement)
    GetCurrentLevel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_GetCurrentLevel)
    ReconstructBiasField = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_ReconstructBiasField)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2

        Create a new object of the class itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2 in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_swigregister(itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2)
itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2___New_orig__ = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2___New_orig__
itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IF2_cast


def itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_New():
    return itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2.New()

class itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2(itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_Superclass):
    r"""


    Implementation of the N4 bias field correction algorithm.

    The nonparametric nonuniform intensity normalization (N3) algorithm,
    as introduced by Sled et al. in 1998 is a method for correcting
    nonuniformity associated with MR images. The algorithm assumes a
    simple parametric model (Gaussian) for the bias field and does not
    require tissue class segmentation. In addition, there are only a
    couple of parameters to tune with the default values performing quite
    well. N3 has been publicly available as a set of perl scripts (http://
    www.bic.mni.mcgill.ca/ServicesSoftwareAdvancedImageProcessingTo
    ols/HomePage)

    The N4 algorithm, encapsulated with this class, is a variation of the
    original N3 algorithm with the additional benefits of an improved
    B-spline fitting routine which allows for multiple resolutions to be
    used during the correction process. We also modify the iterative
    update component of algorithm such that the residual bias field is
    continually updated

    Notes for the user: Since much of the image manipulation is done in
    the log space of the intensities, input images with negative and small
    values (< 1) can produce poor results.

    The original authors recommend performing the bias field correction on
    a downsampled version of the original image.

    A binary mask or a weighted image can be supplied. If a binary mask is
    specified, those voxels in the input image which correspond to the
    voxels in the mask image are used to estimate the bias field. If a
    UseMaskLabel value is set to false (the default), all non-zero voxels
    in the MaskImage will be masked; otherwise only voxels in the
    MaskImage that match the MaskLabel will be used. If a confidence image
    is specified, the input voxels are weighted in the b-spline fitting
    routine according to the confidence voxel values.

    The filter returns the corrected image. If the bias field is wanted,
    one can reconstruct it using the class
    itkBSplineControlPointImageFilter.

    The 'Z' parameter in Sled's 1998 paper is the square root of the class
    variable 'm_WienerFilterNoise'.

    The basic algorithm iterates between sharpening the intensity
    histogram of the corrected input image and spatially smoothing those
    results with a B-spline scalar field estimate of the bias field.

    Nicholas J. Tustison  Contributed by Nicholas J. Tustison, James C.
    Gee in the Insight Journal paper:https://hdl.handle.net/10380/3053

    REFERENCE  J.G. Sled, A.P. Zijdenbos and A.C. Evans. "A Nonparametric
    Method for Automatic Correction of Intensity Nonuniformity in  Data"
    IEEE Transactions on Medical Imaging, Vol 17, No 1. Feb 1998.

    N.J. Tustison, B.B. Avants, P.A. Cook, Y. Zheng, A. Egan, P.A.
    Yushkevich, and J.C. Gee. "N4ITK:  Improved N3 Bias Correction" IEEE
    Transactions on Medical Imaging, 29(6):1310-1320, June 2010. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_Clone)
    SetInput1 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_GetMaskImage)
    SetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_SetMaskLabel)
    GetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_GetMaskLabel)
    SetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_SetUseMaskLabel)
    GetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_GetUseMaskLabel)
    UseMaskLabelOn = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_UseMaskLabelOn)
    UseMaskLabelOff = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_UseMaskLabelOff)
    SetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_SetConfidenceImage)
    SetInput3 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_SetInput3)
    GetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_GetConfidenceImage)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_GetNumberOfHistogramBins)
    SetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_SetWienerFilterNoise)
    GetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_GetWienerFilterNoise)
    SetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_SetBiasFieldFullWidthAtHalfMaximum)
    GetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_GetBiasFieldFullWidthAtHalfMaximum)
    SetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_GetSplineOrder)
    SetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_SetNumberOfControlPoints)
    GetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_GetNumberOfControlPoints)
    SetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_SetNumberOfFittingLevels)
    GetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_GetNumberOfFittingLevels)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_GetMaximumNumberOfIterations)
    SetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_GetConvergenceThreshold)
    GetLogBiasFieldControlPointLattice = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_GetLogBiasFieldControlPointLattice)
    GetElapsedIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_GetElapsedIterations)
    GetCurrentConvergenceMeasurement = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_GetCurrentConvergenceMeasurement)
    GetCurrentLevel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_GetCurrentLevel)
    ReconstructBiasField = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_ReconstructBiasField)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2

        Create a new object of the class itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2 in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_swigregister(itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2)
itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2___New_orig__ = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2___New_orig__
itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2ISS2_cast


def itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_New():
    return itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2.New()

class itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2(itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_Superclass):
    r"""


    Implementation of the N4 bias field correction algorithm.

    The nonparametric nonuniform intensity normalization (N3) algorithm,
    as introduced by Sled et al. in 1998 is a method for correcting
    nonuniformity associated with MR images. The algorithm assumes a
    simple parametric model (Gaussian) for the bias field and does not
    require tissue class segmentation. In addition, there are only a
    couple of parameters to tune with the default values performing quite
    well. N3 has been publicly available as a set of perl scripts (http://
    www.bic.mni.mcgill.ca/ServicesSoftwareAdvancedImageProcessingTo
    ols/HomePage)

    The N4 algorithm, encapsulated with this class, is a variation of the
    original N3 algorithm with the additional benefits of an improved
    B-spline fitting routine which allows for multiple resolutions to be
    used during the correction process. We also modify the iterative
    update component of algorithm such that the residual bias field is
    continually updated

    Notes for the user: Since much of the image manipulation is done in
    the log space of the intensities, input images with negative and small
    values (< 1) can produce poor results.

    The original authors recommend performing the bias field correction on
    a downsampled version of the original image.

    A binary mask or a weighted image can be supplied. If a binary mask is
    specified, those voxels in the input image which correspond to the
    voxels in the mask image are used to estimate the bias field. If a
    UseMaskLabel value is set to false (the default), all non-zero voxels
    in the MaskImage will be masked; otherwise only voxels in the
    MaskImage that match the MaskLabel will be used. If a confidence image
    is specified, the input voxels are weighted in the b-spline fitting
    routine according to the confidence voxel values.

    The filter returns the corrected image. If the bias field is wanted,
    one can reconstruct it using the class
    itkBSplineControlPointImageFilter.

    The 'Z' parameter in Sled's 1998 paper is the square root of the class
    variable 'm_WienerFilterNoise'.

    The basic algorithm iterates between sharpening the intensity
    histogram of the corrected input image and spatially smoothing those
    results with a B-spline scalar field estimate of the bias field.

    Nicholas J. Tustison  Contributed by Nicholas J. Tustison, James C.
    Gee in the Insight Journal paper:https://hdl.handle.net/10380/3053

    REFERENCE  J.G. Sled, A.P. Zijdenbos and A.C. Evans. "A Nonparametric
    Method for Automatic Correction of Intensity Nonuniformity in  Data"
    IEEE Transactions on Medical Imaging, Vol 17, No 1. Feb 1998.

    N.J. Tustison, B.B. Avants, P.A. Cook, Y. Zheng, A. Egan, P.A.
    Yushkevich, and J.C. Gee. "N4ITK:  Improved N3 Bias Correction" IEEE
    Transactions on Medical Imaging, 29(6):1310-1320, June 2010. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_Clone)
    SetInput1 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_GetMaskImage)
    SetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_SetMaskLabel)
    GetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_GetMaskLabel)
    SetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_SetUseMaskLabel)
    GetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_GetUseMaskLabel)
    UseMaskLabelOn = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_UseMaskLabelOn)
    UseMaskLabelOff = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_UseMaskLabelOff)
    SetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_SetConfidenceImage)
    SetInput3 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_SetInput3)
    GetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_GetConfidenceImage)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_GetNumberOfHistogramBins)
    SetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_SetWienerFilterNoise)
    GetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_GetWienerFilterNoise)
    SetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_SetBiasFieldFullWidthAtHalfMaximum)
    GetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_GetBiasFieldFullWidthAtHalfMaximum)
    SetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_GetSplineOrder)
    SetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_SetNumberOfControlPoints)
    GetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_GetNumberOfControlPoints)
    SetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_SetNumberOfFittingLevels)
    GetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_GetNumberOfFittingLevels)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_GetMaximumNumberOfIterations)
    SetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_GetConvergenceThreshold)
    GetLogBiasFieldControlPointLattice = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_GetLogBiasFieldControlPointLattice)
    GetElapsedIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_GetElapsedIterations)
    GetCurrentConvergenceMeasurement = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_GetCurrentConvergenceMeasurement)
    GetCurrentLevel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_GetCurrentLevel)
    ReconstructBiasField = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_ReconstructBiasField)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2

        Create a new object of the class itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2 in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_swigregister(itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2)
itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2___New_orig__ = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2___New_orig__
itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUC2_cast


def itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_New():
    return itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2.New()

class itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2(itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_Superclass):
    r"""


    Implementation of the N4 bias field correction algorithm.

    The nonparametric nonuniform intensity normalization (N3) algorithm,
    as introduced by Sled et al. in 1998 is a method for correcting
    nonuniformity associated with MR images. The algorithm assumes a
    simple parametric model (Gaussian) for the bias field and does not
    require tissue class segmentation. In addition, there are only a
    couple of parameters to tune with the default values performing quite
    well. N3 has been publicly available as a set of perl scripts (http://
    www.bic.mni.mcgill.ca/ServicesSoftwareAdvancedImageProcessingTo
    ols/HomePage)

    The N4 algorithm, encapsulated with this class, is a variation of the
    original N3 algorithm with the additional benefits of an improved
    B-spline fitting routine which allows for multiple resolutions to be
    used during the correction process. We also modify the iterative
    update component of algorithm such that the residual bias field is
    continually updated

    Notes for the user: Since much of the image manipulation is done in
    the log space of the intensities, input images with negative and small
    values (< 1) can produce poor results.

    The original authors recommend performing the bias field correction on
    a downsampled version of the original image.

    A binary mask or a weighted image can be supplied. If a binary mask is
    specified, those voxels in the input image which correspond to the
    voxels in the mask image are used to estimate the bias field. If a
    UseMaskLabel value is set to false (the default), all non-zero voxels
    in the MaskImage will be masked; otherwise only voxels in the
    MaskImage that match the MaskLabel will be used. If a confidence image
    is specified, the input voxels are weighted in the b-spline fitting
    routine according to the confidence voxel values.

    The filter returns the corrected image. If the bias field is wanted,
    one can reconstruct it using the class
    itkBSplineControlPointImageFilter.

    The 'Z' parameter in Sled's 1998 paper is the square root of the class
    variable 'm_WienerFilterNoise'.

    The basic algorithm iterates between sharpening the intensity
    histogram of the corrected input image and spatially smoothing those
    results with a B-spline scalar field estimate of the bias field.

    Nicholas J. Tustison  Contributed by Nicholas J. Tustison, James C.
    Gee in the Insight Journal paper:https://hdl.handle.net/10380/3053

    REFERENCE  J.G. Sled, A.P. Zijdenbos and A.C. Evans. "A Nonparametric
    Method for Automatic Correction of Intensity Nonuniformity in  Data"
    IEEE Transactions on Medical Imaging, Vol 17, No 1. Feb 1998.

    N.J. Tustison, B.B. Avants, P.A. Cook, Y. Zheng, A. Egan, P.A.
    Yushkevich, and J.C. Gee. "N4ITK:  Improved N3 Bias Correction" IEEE
    Transactions on Medical Imaging, 29(6):1310-1320, June 2010. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_Clone)
    SetInput1 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_GetMaskImage)
    SetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_SetMaskLabel)
    GetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_GetMaskLabel)
    SetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_SetUseMaskLabel)
    GetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_GetUseMaskLabel)
    UseMaskLabelOn = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_UseMaskLabelOn)
    UseMaskLabelOff = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_UseMaskLabelOff)
    SetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_SetConfidenceImage)
    SetInput3 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_SetInput3)
    GetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_GetConfidenceImage)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_GetNumberOfHistogramBins)
    SetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_SetWienerFilterNoise)
    GetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_GetWienerFilterNoise)
    SetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_SetBiasFieldFullWidthAtHalfMaximum)
    GetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_GetBiasFieldFullWidthAtHalfMaximum)
    SetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_GetSplineOrder)
    SetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_SetNumberOfControlPoints)
    GetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_GetNumberOfControlPoints)
    SetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_SetNumberOfFittingLevels)
    GetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_GetNumberOfFittingLevels)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_GetMaximumNumberOfIterations)
    SetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_GetConvergenceThreshold)
    GetLogBiasFieldControlPointLattice = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_GetLogBiasFieldControlPointLattice)
    GetElapsedIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_GetElapsedIterations)
    GetCurrentConvergenceMeasurement = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_GetCurrentConvergenceMeasurement)
    GetCurrentLevel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_GetCurrentLevel)
    ReconstructBiasField = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_ReconstructBiasField)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2

        Create a new object of the class itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2 in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_swigregister(itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2)
itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2___New_orig__ = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2___New_orig__
itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF2IUC2IUS2_cast


def itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_New():
    return itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3.New()

class itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3(itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_Superclass):
    r"""


    Implementation of the N4 bias field correction algorithm.

    The nonparametric nonuniform intensity normalization (N3) algorithm,
    as introduced by Sled et al. in 1998 is a method for correcting
    nonuniformity associated with MR images. The algorithm assumes a
    simple parametric model (Gaussian) for the bias field and does not
    require tissue class segmentation. In addition, there are only a
    couple of parameters to tune with the default values performing quite
    well. N3 has been publicly available as a set of perl scripts (http://
    www.bic.mni.mcgill.ca/ServicesSoftwareAdvancedImageProcessingTo
    ols/HomePage)

    The N4 algorithm, encapsulated with this class, is a variation of the
    original N3 algorithm with the additional benefits of an improved
    B-spline fitting routine which allows for multiple resolutions to be
    used during the correction process. We also modify the iterative
    update component of algorithm such that the residual bias field is
    continually updated

    Notes for the user: Since much of the image manipulation is done in
    the log space of the intensities, input images with negative and small
    values (< 1) can produce poor results.

    The original authors recommend performing the bias field correction on
    a downsampled version of the original image.

    A binary mask or a weighted image can be supplied. If a binary mask is
    specified, those voxels in the input image which correspond to the
    voxels in the mask image are used to estimate the bias field. If a
    UseMaskLabel value is set to false (the default), all non-zero voxels
    in the MaskImage will be masked; otherwise only voxels in the
    MaskImage that match the MaskLabel will be used. If a confidence image
    is specified, the input voxels are weighted in the b-spline fitting
    routine according to the confidence voxel values.

    The filter returns the corrected image. If the bias field is wanted,
    one can reconstruct it using the class
    itkBSplineControlPointImageFilter.

    The 'Z' parameter in Sled's 1998 paper is the square root of the class
    variable 'm_WienerFilterNoise'.

    The basic algorithm iterates between sharpening the intensity
    histogram of the corrected input image and spatially smoothing those
    results with a B-spline scalar field estimate of the bias field.

    Nicholas J. Tustison  Contributed by Nicholas J. Tustison, James C.
    Gee in the Insight Journal paper:https://hdl.handle.net/10380/3053

    REFERENCE  J.G. Sled, A.P. Zijdenbos and A.C. Evans. "A Nonparametric
    Method for Automatic Correction of Intensity Nonuniformity in  Data"
    IEEE Transactions on Medical Imaging, Vol 17, No 1. Feb 1998.

    N.J. Tustison, B.B. Avants, P.A. Cook, Y. Zheng, A. Egan, P.A.
    Yushkevich, and J.C. Gee. "N4ITK:  Improved N3 Bias Correction" IEEE
    Transactions on Medical Imaging, 29(6):1310-1320, June 2010. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_Clone)
    SetInput1 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_GetMaskImage)
    SetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_SetMaskLabel)
    GetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_GetMaskLabel)
    SetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_SetUseMaskLabel)
    GetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_GetUseMaskLabel)
    UseMaskLabelOn = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_UseMaskLabelOn)
    UseMaskLabelOff = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_UseMaskLabelOff)
    SetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_SetConfidenceImage)
    SetInput3 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_SetInput3)
    GetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_GetConfidenceImage)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_GetNumberOfHistogramBins)
    SetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_SetWienerFilterNoise)
    GetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_GetWienerFilterNoise)
    SetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_SetBiasFieldFullWidthAtHalfMaximum)
    GetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_GetBiasFieldFullWidthAtHalfMaximum)
    SetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_GetSplineOrder)
    SetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_SetNumberOfControlPoints)
    GetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_GetNumberOfControlPoints)
    SetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_SetNumberOfFittingLevels)
    GetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_GetNumberOfFittingLevels)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_GetMaximumNumberOfIterations)
    SetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_GetConvergenceThreshold)
    GetLogBiasFieldControlPointLattice = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_GetLogBiasFieldControlPointLattice)
    GetElapsedIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_GetElapsedIterations)
    GetCurrentConvergenceMeasurement = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_GetCurrentConvergenceMeasurement)
    GetCurrentLevel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_GetCurrentLevel)
    ReconstructBiasField = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_ReconstructBiasField)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3

        Create a new object of the class itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3 in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_swigregister(itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3)
itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3___New_orig__ = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3___New_orig__
itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ID3_cast


def itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_New():
    return itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3.New()

class itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3(itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_Superclass):
    r"""


    Implementation of the N4 bias field correction algorithm.

    The nonparametric nonuniform intensity normalization (N3) algorithm,
    as introduced by Sled et al. in 1998 is a method for correcting
    nonuniformity associated with MR images. The algorithm assumes a
    simple parametric model (Gaussian) for the bias field and does not
    require tissue class segmentation. In addition, there are only a
    couple of parameters to tune with the default values performing quite
    well. N3 has been publicly available as a set of perl scripts (http://
    www.bic.mni.mcgill.ca/ServicesSoftwareAdvancedImageProcessingTo
    ols/HomePage)

    The N4 algorithm, encapsulated with this class, is a variation of the
    original N3 algorithm with the additional benefits of an improved
    B-spline fitting routine which allows for multiple resolutions to be
    used during the correction process. We also modify the iterative
    update component of algorithm such that the residual bias field is
    continually updated

    Notes for the user: Since much of the image manipulation is done in
    the log space of the intensities, input images with negative and small
    values (< 1) can produce poor results.

    The original authors recommend performing the bias field correction on
    a downsampled version of the original image.

    A binary mask or a weighted image can be supplied. If a binary mask is
    specified, those voxels in the input image which correspond to the
    voxels in the mask image are used to estimate the bias field. If a
    UseMaskLabel value is set to false (the default), all non-zero voxels
    in the MaskImage will be masked; otherwise only voxels in the
    MaskImage that match the MaskLabel will be used. If a confidence image
    is specified, the input voxels are weighted in the b-spline fitting
    routine according to the confidence voxel values.

    The filter returns the corrected image. If the bias field is wanted,
    one can reconstruct it using the class
    itkBSplineControlPointImageFilter.

    The 'Z' parameter in Sled's 1998 paper is the square root of the class
    variable 'm_WienerFilterNoise'.

    The basic algorithm iterates between sharpening the intensity
    histogram of the corrected input image and spatially smoothing those
    results with a B-spline scalar field estimate of the bias field.

    Nicholas J. Tustison  Contributed by Nicholas J. Tustison, James C.
    Gee in the Insight Journal paper:https://hdl.handle.net/10380/3053

    REFERENCE  J.G. Sled, A.P. Zijdenbos and A.C. Evans. "A Nonparametric
    Method for Automatic Correction of Intensity Nonuniformity in  Data"
    IEEE Transactions on Medical Imaging, Vol 17, No 1. Feb 1998.

    N.J. Tustison, B.B. Avants, P.A. Cook, Y. Zheng, A. Egan, P.A.
    Yushkevich, and J.C. Gee. "N4ITK:  Improved N3 Bias Correction" IEEE
    Transactions on Medical Imaging, 29(6):1310-1320, June 2010. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_Clone)
    SetInput1 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_GetMaskImage)
    SetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_SetMaskLabel)
    GetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_GetMaskLabel)
    SetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_SetUseMaskLabel)
    GetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_GetUseMaskLabel)
    UseMaskLabelOn = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_UseMaskLabelOn)
    UseMaskLabelOff = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_UseMaskLabelOff)
    SetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_SetConfidenceImage)
    SetInput3 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_SetInput3)
    GetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_GetConfidenceImage)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_GetNumberOfHistogramBins)
    SetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_SetWienerFilterNoise)
    GetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_GetWienerFilterNoise)
    SetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_SetBiasFieldFullWidthAtHalfMaximum)
    GetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_GetBiasFieldFullWidthAtHalfMaximum)
    SetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_GetSplineOrder)
    SetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_SetNumberOfControlPoints)
    GetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_GetNumberOfControlPoints)
    SetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_SetNumberOfFittingLevels)
    GetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_GetNumberOfFittingLevels)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_GetMaximumNumberOfIterations)
    SetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_GetConvergenceThreshold)
    GetLogBiasFieldControlPointLattice = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_GetLogBiasFieldControlPointLattice)
    GetElapsedIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_GetElapsedIterations)
    GetCurrentConvergenceMeasurement = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_GetCurrentConvergenceMeasurement)
    GetCurrentLevel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_GetCurrentLevel)
    ReconstructBiasField = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_ReconstructBiasField)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3

        Create a new object of the class itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3 in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_swigregister(itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3)
itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3___New_orig__ = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3___New_orig__
itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IF3_cast


def itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_New():
    return itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3.New()

class itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3(itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_Superclass):
    r"""


    Implementation of the N4 bias field correction algorithm.

    The nonparametric nonuniform intensity normalization (N3) algorithm,
    as introduced by Sled et al. in 1998 is a method for correcting
    nonuniformity associated with MR images. The algorithm assumes a
    simple parametric model (Gaussian) for the bias field and does not
    require tissue class segmentation. In addition, there are only a
    couple of parameters to tune with the default values performing quite
    well. N3 has been publicly available as a set of perl scripts (http://
    www.bic.mni.mcgill.ca/ServicesSoftwareAdvancedImageProcessingTo
    ols/HomePage)

    The N4 algorithm, encapsulated with this class, is a variation of the
    original N3 algorithm with the additional benefits of an improved
    B-spline fitting routine which allows for multiple resolutions to be
    used during the correction process. We also modify the iterative
    update component of algorithm such that the residual bias field is
    continually updated

    Notes for the user: Since much of the image manipulation is done in
    the log space of the intensities, input images with negative and small
    values (< 1) can produce poor results.

    The original authors recommend performing the bias field correction on
    a downsampled version of the original image.

    A binary mask or a weighted image can be supplied. If a binary mask is
    specified, those voxels in the input image which correspond to the
    voxels in the mask image are used to estimate the bias field. If a
    UseMaskLabel value is set to false (the default), all non-zero voxels
    in the MaskImage will be masked; otherwise only voxels in the
    MaskImage that match the MaskLabel will be used. If a confidence image
    is specified, the input voxels are weighted in the b-spline fitting
    routine according to the confidence voxel values.

    The filter returns the corrected image. If the bias field is wanted,
    one can reconstruct it using the class
    itkBSplineControlPointImageFilter.

    The 'Z' parameter in Sled's 1998 paper is the square root of the class
    variable 'm_WienerFilterNoise'.

    The basic algorithm iterates between sharpening the intensity
    histogram of the corrected input image and spatially smoothing those
    results with a B-spline scalar field estimate of the bias field.

    Nicholas J. Tustison  Contributed by Nicholas J. Tustison, James C.
    Gee in the Insight Journal paper:https://hdl.handle.net/10380/3053

    REFERENCE  J.G. Sled, A.P. Zijdenbos and A.C. Evans. "A Nonparametric
    Method for Automatic Correction of Intensity Nonuniformity in  Data"
    IEEE Transactions on Medical Imaging, Vol 17, No 1. Feb 1998.

    N.J. Tustison, B.B. Avants, P.A. Cook, Y. Zheng, A. Egan, P.A.
    Yushkevich, and J.C. Gee. "N4ITK:  Improved N3 Bias Correction" IEEE
    Transactions on Medical Imaging, 29(6):1310-1320, June 2010. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_Clone)
    SetInput1 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_GetMaskImage)
    SetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_SetMaskLabel)
    GetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_GetMaskLabel)
    SetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_SetUseMaskLabel)
    GetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_GetUseMaskLabel)
    UseMaskLabelOn = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_UseMaskLabelOn)
    UseMaskLabelOff = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_UseMaskLabelOff)
    SetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_SetConfidenceImage)
    SetInput3 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_SetInput3)
    GetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_GetConfidenceImage)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_GetNumberOfHistogramBins)
    SetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_SetWienerFilterNoise)
    GetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_GetWienerFilterNoise)
    SetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_SetBiasFieldFullWidthAtHalfMaximum)
    GetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_GetBiasFieldFullWidthAtHalfMaximum)
    SetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_GetSplineOrder)
    SetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_SetNumberOfControlPoints)
    GetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_GetNumberOfControlPoints)
    SetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_SetNumberOfFittingLevels)
    GetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_GetNumberOfFittingLevels)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_GetMaximumNumberOfIterations)
    SetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_GetConvergenceThreshold)
    GetLogBiasFieldControlPointLattice = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_GetLogBiasFieldControlPointLattice)
    GetElapsedIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_GetElapsedIterations)
    GetCurrentConvergenceMeasurement = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_GetCurrentConvergenceMeasurement)
    GetCurrentLevel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_GetCurrentLevel)
    ReconstructBiasField = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_ReconstructBiasField)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3

        Create a new object of the class itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3 in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_swigregister(itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3)
itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3___New_orig__ = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3___New_orig__
itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3ISS3_cast


def itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_New():
    return itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3.New()

class itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3(itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_Superclass):
    r"""


    Implementation of the N4 bias field correction algorithm.

    The nonparametric nonuniform intensity normalization (N3) algorithm,
    as introduced by Sled et al. in 1998 is a method for correcting
    nonuniformity associated with MR images. The algorithm assumes a
    simple parametric model (Gaussian) for the bias field and does not
    require tissue class segmentation. In addition, there are only a
    couple of parameters to tune with the default values performing quite
    well. N3 has been publicly available as a set of perl scripts (http://
    www.bic.mni.mcgill.ca/ServicesSoftwareAdvancedImageProcessingTo
    ols/HomePage)

    The N4 algorithm, encapsulated with this class, is a variation of the
    original N3 algorithm with the additional benefits of an improved
    B-spline fitting routine which allows for multiple resolutions to be
    used during the correction process. We also modify the iterative
    update component of algorithm such that the residual bias field is
    continually updated

    Notes for the user: Since much of the image manipulation is done in
    the log space of the intensities, input images with negative and small
    values (< 1) can produce poor results.

    The original authors recommend performing the bias field correction on
    a downsampled version of the original image.

    A binary mask or a weighted image can be supplied. If a binary mask is
    specified, those voxels in the input image which correspond to the
    voxels in the mask image are used to estimate the bias field. If a
    UseMaskLabel value is set to false (the default), all non-zero voxels
    in the MaskImage will be masked; otherwise only voxels in the
    MaskImage that match the MaskLabel will be used. If a confidence image
    is specified, the input voxels are weighted in the b-spline fitting
    routine according to the confidence voxel values.

    The filter returns the corrected image. If the bias field is wanted,
    one can reconstruct it using the class
    itkBSplineControlPointImageFilter.

    The 'Z' parameter in Sled's 1998 paper is the square root of the class
    variable 'm_WienerFilterNoise'.

    The basic algorithm iterates between sharpening the intensity
    histogram of the corrected input image and spatially smoothing those
    results with a B-spline scalar field estimate of the bias field.

    Nicholas J. Tustison  Contributed by Nicholas J. Tustison, James C.
    Gee in the Insight Journal paper:https://hdl.handle.net/10380/3053

    REFERENCE  J.G. Sled, A.P. Zijdenbos and A.C. Evans. "A Nonparametric
    Method for Automatic Correction of Intensity Nonuniformity in  Data"
    IEEE Transactions on Medical Imaging, Vol 17, No 1. Feb 1998.

    N.J. Tustison, B.B. Avants, P.A. Cook, Y. Zheng, A. Egan, P.A.
    Yushkevich, and J.C. Gee. "N4ITK:  Improved N3 Bias Correction" IEEE
    Transactions on Medical Imaging, 29(6):1310-1320, June 2010. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_Clone)
    SetInput1 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_GetMaskImage)
    SetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_SetMaskLabel)
    GetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_GetMaskLabel)
    SetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_SetUseMaskLabel)
    GetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_GetUseMaskLabel)
    UseMaskLabelOn = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_UseMaskLabelOn)
    UseMaskLabelOff = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_UseMaskLabelOff)
    SetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_SetConfidenceImage)
    SetInput3 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_SetInput3)
    GetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_GetConfidenceImage)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_GetNumberOfHistogramBins)
    SetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_SetWienerFilterNoise)
    GetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_GetWienerFilterNoise)
    SetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_SetBiasFieldFullWidthAtHalfMaximum)
    GetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_GetBiasFieldFullWidthAtHalfMaximum)
    SetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_GetSplineOrder)
    SetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_SetNumberOfControlPoints)
    GetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_GetNumberOfControlPoints)
    SetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_SetNumberOfFittingLevels)
    GetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_GetNumberOfFittingLevels)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_GetMaximumNumberOfIterations)
    SetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_GetConvergenceThreshold)
    GetLogBiasFieldControlPointLattice = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_GetLogBiasFieldControlPointLattice)
    GetElapsedIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_GetElapsedIterations)
    GetCurrentConvergenceMeasurement = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_GetCurrentConvergenceMeasurement)
    GetCurrentLevel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_GetCurrentLevel)
    ReconstructBiasField = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_ReconstructBiasField)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3

        Create a new object of the class itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3 in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_swigregister(itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3)
itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3___New_orig__ = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3___New_orig__
itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUC3_cast


def itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_New():
    return itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3.New()

class itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3(itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_Superclass):
    r"""


    Implementation of the N4 bias field correction algorithm.

    The nonparametric nonuniform intensity normalization (N3) algorithm,
    as introduced by Sled et al. in 1998 is a method for correcting
    nonuniformity associated with MR images. The algorithm assumes a
    simple parametric model (Gaussian) for the bias field and does not
    require tissue class segmentation. In addition, there are only a
    couple of parameters to tune with the default values performing quite
    well. N3 has been publicly available as a set of perl scripts (http://
    www.bic.mni.mcgill.ca/ServicesSoftwareAdvancedImageProcessingTo
    ols/HomePage)

    The N4 algorithm, encapsulated with this class, is a variation of the
    original N3 algorithm with the additional benefits of an improved
    B-spline fitting routine which allows for multiple resolutions to be
    used during the correction process. We also modify the iterative
    update component of algorithm such that the residual bias field is
    continually updated

    Notes for the user: Since much of the image manipulation is done in
    the log space of the intensities, input images with negative and small
    values (< 1) can produce poor results.

    The original authors recommend performing the bias field correction on
    a downsampled version of the original image.

    A binary mask or a weighted image can be supplied. If a binary mask is
    specified, those voxels in the input image which correspond to the
    voxels in the mask image are used to estimate the bias field. If a
    UseMaskLabel value is set to false (the default), all non-zero voxels
    in the MaskImage will be masked; otherwise only voxels in the
    MaskImage that match the MaskLabel will be used. If a confidence image
    is specified, the input voxels are weighted in the b-spline fitting
    routine according to the confidence voxel values.

    The filter returns the corrected image. If the bias field is wanted,
    one can reconstruct it using the class
    itkBSplineControlPointImageFilter.

    The 'Z' parameter in Sled's 1998 paper is the square root of the class
    variable 'm_WienerFilterNoise'.

    The basic algorithm iterates between sharpening the intensity
    histogram of the corrected input image and spatially smoothing those
    results with a B-spline scalar field estimate of the bias field.

    Nicholas J. Tustison  Contributed by Nicholas J. Tustison, James C.
    Gee in the Insight Journal paper:https://hdl.handle.net/10380/3053

    REFERENCE  J.G. Sled, A.P. Zijdenbos and A.C. Evans. "A Nonparametric
    Method for Automatic Correction of Intensity Nonuniformity in  Data"
    IEEE Transactions on Medical Imaging, Vol 17, No 1. Feb 1998.

    N.J. Tustison, B.B. Avants, P.A. Cook, Y. Zheng, A. Egan, P.A.
    Yushkevich, and J.C. Gee. "N4ITK:  Improved N3 Bias Correction" IEEE
    Transactions on Medical Imaging, 29(6):1310-1320, June 2010. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_Clone)
    SetInput1 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_GetMaskImage)
    SetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_SetMaskLabel)
    GetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_GetMaskLabel)
    SetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_SetUseMaskLabel)
    GetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_GetUseMaskLabel)
    UseMaskLabelOn = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_UseMaskLabelOn)
    UseMaskLabelOff = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_UseMaskLabelOff)
    SetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_SetConfidenceImage)
    SetInput3 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_SetInput3)
    GetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_GetConfidenceImage)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_GetNumberOfHistogramBins)
    SetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_SetWienerFilterNoise)
    GetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_GetWienerFilterNoise)
    SetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_SetBiasFieldFullWidthAtHalfMaximum)
    GetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_GetBiasFieldFullWidthAtHalfMaximum)
    SetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_GetSplineOrder)
    SetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_SetNumberOfControlPoints)
    GetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_GetNumberOfControlPoints)
    SetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_SetNumberOfFittingLevels)
    GetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_GetNumberOfFittingLevels)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_GetMaximumNumberOfIterations)
    SetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_GetConvergenceThreshold)
    GetLogBiasFieldControlPointLattice = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_GetLogBiasFieldControlPointLattice)
    GetElapsedIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_GetElapsedIterations)
    GetCurrentConvergenceMeasurement = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_GetCurrentConvergenceMeasurement)
    GetCurrentLevel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_GetCurrentLevel)
    ReconstructBiasField = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_ReconstructBiasField)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3

        Create a new object of the class itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3 in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_swigregister(itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3)
itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3___New_orig__ = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3___New_orig__
itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIF3IUC3IUS3_cast


def itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_New():
    return itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2.New()

class itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2(itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_Superclass):
    r"""


    Implementation of the N4 bias field correction algorithm.

    The nonparametric nonuniform intensity normalization (N3) algorithm,
    as introduced by Sled et al. in 1998 is a method for correcting
    nonuniformity associated with MR images. The algorithm assumes a
    simple parametric model (Gaussian) for the bias field and does not
    require tissue class segmentation. In addition, there are only a
    couple of parameters to tune with the default values performing quite
    well. N3 has been publicly available as a set of perl scripts (http://
    www.bic.mni.mcgill.ca/ServicesSoftwareAdvancedImageProcessingTo
    ols/HomePage)

    The N4 algorithm, encapsulated with this class, is a variation of the
    original N3 algorithm with the additional benefits of an improved
    B-spline fitting routine which allows for multiple resolutions to be
    used during the correction process. We also modify the iterative
    update component of algorithm such that the residual bias field is
    continually updated

    Notes for the user: Since much of the image manipulation is done in
    the log space of the intensities, input images with negative and small
    values (< 1) can produce poor results.

    The original authors recommend performing the bias field correction on
    a downsampled version of the original image.

    A binary mask or a weighted image can be supplied. If a binary mask is
    specified, those voxels in the input image which correspond to the
    voxels in the mask image are used to estimate the bias field. If a
    UseMaskLabel value is set to false (the default), all non-zero voxels
    in the MaskImage will be masked; otherwise only voxels in the
    MaskImage that match the MaskLabel will be used. If a confidence image
    is specified, the input voxels are weighted in the b-spline fitting
    routine according to the confidence voxel values.

    The filter returns the corrected image. If the bias field is wanted,
    one can reconstruct it using the class
    itkBSplineControlPointImageFilter.

    The 'Z' parameter in Sled's 1998 paper is the square root of the class
    variable 'm_WienerFilterNoise'.

    The basic algorithm iterates between sharpening the intensity
    histogram of the corrected input image and spatially smoothing those
    results with a B-spline scalar field estimate of the bias field.

    Nicholas J. Tustison  Contributed by Nicholas J. Tustison, James C.
    Gee in the Insight Journal paper:https://hdl.handle.net/10380/3053

    REFERENCE  J.G. Sled, A.P. Zijdenbos and A.C. Evans. "A Nonparametric
    Method for Automatic Correction of Intensity Nonuniformity in  Data"
    IEEE Transactions on Medical Imaging, Vol 17, No 1. Feb 1998.

    N.J. Tustison, B.B. Avants, P.A. Cook, Y. Zheng, A. Egan, P.A.
    Yushkevich, and J.C. Gee. "N4ITK:  Improved N3 Bias Correction" IEEE
    Transactions on Medical Imaging, 29(6):1310-1320, June 2010. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_Clone)
    SetInput1 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_GetMaskImage)
    SetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_SetMaskLabel)
    GetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_GetMaskLabel)
    SetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_SetUseMaskLabel)
    GetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_GetUseMaskLabel)
    UseMaskLabelOn = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_UseMaskLabelOn)
    UseMaskLabelOff = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_UseMaskLabelOff)
    SetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_SetConfidenceImage)
    SetInput3 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_SetInput3)
    GetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_GetConfidenceImage)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_GetNumberOfHistogramBins)
    SetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_SetWienerFilterNoise)
    GetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_GetWienerFilterNoise)
    SetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_SetBiasFieldFullWidthAtHalfMaximum)
    GetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_GetBiasFieldFullWidthAtHalfMaximum)
    SetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_GetSplineOrder)
    SetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_SetNumberOfControlPoints)
    GetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_GetNumberOfControlPoints)
    SetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_SetNumberOfFittingLevels)
    GetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_GetNumberOfFittingLevels)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_GetMaximumNumberOfIterations)
    SetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_GetConvergenceThreshold)
    GetLogBiasFieldControlPointLattice = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_GetLogBiasFieldControlPointLattice)
    GetElapsedIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_GetElapsedIterations)
    GetCurrentConvergenceMeasurement = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_GetCurrentConvergenceMeasurement)
    GetCurrentLevel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_GetCurrentLevel)
    ReconstructBiasField = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_ReconstructBiasField)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2

        Create a new object of the class itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2 in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_swigregister(itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2)
itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2___New_orig__ = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2___New_orig__
itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ID2_cast


def itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_New():
    return itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2.New()

class itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2(itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_Superclass):
    r"""


    Implementation of the N4 bias field correction algorithm.

    The nonparametric nonuniform intensity normalization (N3) algorithm,
    as introduced by Sled et al. in 1998 is a method for correcting
    nonuniformity associated with MR images. The algorithm assumes a
    simple parametric model (Gaussian) for the bias field and does not
    require tissue class segmentation. In addition, there are only a
    couple of parameters to tune with the default values performing quite
    well. N3 has been publicly available as a set of perl scripts (http://
    www.bic.mni.mcgill.ca/ServicesSoftwareAdvancedImageProcessingTo
    ols/HomePage)

    The N4 algorithm, encapsulated with this class, is a variation of the
    original N3 algorithm with the additional benefits of an improved
    B-spline fitting routine which allows for multiple resolutions to be
    used during the correction process. We also modify the iterative
    update component of algorithm such that the residual bias field is
    continually updated

    Notes for the user: Since much of the image manipulation is done in
    the log space of the intensities, input images with negative and small
    values (< 1) can produce poor results.

    The original authors recommend performing the bias field correction on
    a downsampled version of the original image.

    A binary mask or a weighted image can be supplied. If a binary mask is
    specified, those voxels in the input image which correspond to the
    voxels in the mask image are used to estimate the bias field. If a
    UseMaskLabel value is set to false (the default), all non-zero voxels
    in the MaskImage will be masked; otherwise only voxels in the
    MaskImage that match the MaskLabel will be used. If a confidence image
    is specified, the input voxels are weighted in the b-spline fitting
    routine according to the confidence voxel values.

    The filter returns the corrected image. If the bias field is wanted,
    one can reconstruct it using the class
    itkBSplineControlPointImageFilter.

    The 'Z' parameter in Sled's 1998 paper is the square root of the class
    variable 'm_WienerFilterNoise'.

    The basic algorithm iterates between sharpening the intensity
    histogram of the corrected input image and spatially smoothing those
    results with a B-spline scalar field estimate of the bias field.

    Nicholas J. Tustison  Contributed by Nicholas J. Tustison, James C.
    Gee in the Insight Journal paper:https://hdl.handle.net/10380/3053

    REFERENCE  J.G. Sled, A.P. Zijdenbos and A.C. Evans. "A Nonparametric
    Method for Automatic Correction of Intensity Nonuniformity in  Data"
    IEEE Transactions on Medical Imaging, Vol 17, No 1. Feb 1998.

    N.J. Tustison, B.B. Avants, P.A. Cook, Y. Zheng, A. Egan, P.A.
    Yushkevich, and J.C. Gee. "N4ITK:  Improved N3 Bias Correction" IEEE
    Transactions on Medical Imaging, 29(6):1310-1320, June 2010. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_Clone)
    SetInput1 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_GetMaskImage)
    SetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_SetMaskLabel)
    GetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_GetMaskLabel)
    SetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_SetUseMaskLabel)
    GetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_GetUseMaskLabel)
    UseMaskLabelOn = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_UseMaskLabelOn)
    UseMaskLabelOff = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_UseMaskLabelOff)
    SetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_SetConfidenceImage)
    SetInput3 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_SetInput3)
    GetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_GetConfidenceImage)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_GetNumberOfHistogramBins)
    SetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_SetWienerFilterNoise)
    GetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_GetWienerFilterNoise)
    SetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_SetBiasFieldFullWidthAtHalfMaximum)
    GetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_GetBiasFieldFullWidthAtHalfMaximum)
    SetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_GetSplineOrder)
    SetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_SetNumberOfControlPoints)
    GetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_GetNumberOfControlPoints)
    SetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_SetNumberOfFittingLevels)
    GetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_GetNumberOfFittingLevels)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_GetMaximumNumberOfIterations)
    SetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_GetConvergenceThreshold)
    GetLogBiasFieldControlPointLattice = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_GetLogBiasFieldControlPointLattice)
    GetElapsedIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_GetElapsedIterations)
    GetCurrentConvergenceMeasurement = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_GetCurrentConvergenceMeasurement)
    GetCurrentLevel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_GetCurrentLevel)
    ReconstructBiasField = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_ReconstructBiasField)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2

        Create a new object of the class itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2 in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_swigregister(itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2)
itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2___New_orig__ = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2___New_orig__
itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IF2_cast


def itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_New():
    return itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2.New()

class itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2(itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_Superclass):
    r"""


    Implementation of the N4 bias field correction algorithm.

    The nonparametric nonuniform intensity normalization (N3) algorithm,
    as introduced by Sled et al. in 1998 is a method for correcting
    nonuniformity associated with MR images. The algorithm assumes a
    simple parametric model (Gaussian) for the bias field and does not
    require tissue class segmentation. In addition, there are only a
    couple of parameters to tune with the default values performing quite
    well. N3 has been publicly available as a set of perl scripts (http://
    www.bic.mni.mcgill.ca/ServicesSoftwareAdvancedImageProcessingTo
    ols/HomePage)

    The N4 algorithm, encapsulated with this class, is a variation of the
    original N3 algorithm with the additional benefits of an improved
    B-spline fitting routine which allows for multiple resolutions to be
    used during the correction process. We also modify the iterative
    update component of algorithm such that the residual bias field is
    continually updated

    Notes for the user: Since much of the image manipulation is done in
    the log space of the intensities, input images with negative and small
    values (< 1) can produce poor results.

    The original authors recommend performing the bias field correction on
    a downsampled version of the original image.

    A binary mask or a weighted image can be supplied. If a binary mask is
    specified, those voxels in the input image which correspond to the
    voxels in the mask image are used to estimate the bias field. If a
    UseMaskLabel value is set to false (the default), all non-zero voxels
    in the MaskImage will be masked; otherwise only voxels in the
    MaskImage that match the MaskLabel will be used. If a confidence image
    is specified, the input voxels are weighted in the b-spline fitting
    routine according to the confidence voxel values.

    The filter returns the corrected image. If the bias field is wanted,
    one can reconstruct it using the class
    itkBSplineControlPointImageFilter.

    The 'Z' parameter in Sled's 1998 paper is the square root of the class
    variable 'm_WienerFilterNoise'.

    The basic algorithm iterates between sharpening the intensity
    histogram of the corrected input image and spatially smoothing those
    results with a B-spline scalar field estimate of the bias field.

    Nicholas J. Tustison  Contributed by Nicholas J. Tustison, James C.
    Gee in the Insight Journal paper:https://hdl.handle.net/10380/3053

    REFERENCE  J.G. Sled, A.P. Zijdenbos and A.C. Evans. "A Nonparametric
    Method for Automatic Correction of Intensity Nonuniformity in  Data"
    IEEE Transactions on Medical Imaging, Vol 17, No 1. Feb 1998.

    N.J. Tustison, B.B. Avants, P.A. Cook, Y. Zheng, A. Egan, P.A.
    Yushkevich, and J.C. Gee. "N4ITK:  Improved N3 Bias Correction" IEEE
    Transactions on Medical Imaging, 29(6):1310-1320, June 2010. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_Clone)
    SetInput1 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_GetMaskImage)
    SetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_SetMaskLabel)
    GetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_GetMaskLabel)
    SetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_SetUseMaskLabel)
    GetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_GetUseMaskLabel)
    UseMaskLabelOn = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_UseMaskLabelOn)
    UseMaskLabelOff = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_UseMaskLabelOff)
    SetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_SetConfidenceImage)
    SetInput3 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_SetInput3)
    GetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_GetConfidenceImage)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_GetNumberOfHistogramBins)
    SetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_SetWienerFilterNoise)
    GetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_GetWienerFilterNoise)
    SetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_SetBiasFieldFullWidthAtHalfMaximum)
    GetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_GetBiasFieldFullWidthAtHalfMaximum)
    SetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_GetSplineOrder)
    SetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_SetNumberOfControlPoints)
    GetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_GetNumberOfControlPoints)
    SetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_SetNumberOfFittingLevels)
    GetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_GetNumberOfFittingLevels)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_GetMaximumNumberOfIterations)
    SetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_GetConvergenceThreshold)
    GetLogBiasFieldControlPointLattice = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_GetLogBiasFieldControlPointLattice)
    GetElapsedIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_GetElapsedIterations)
    GetCurrentConvergenceMeasurement = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_GetCurrentConvergenceMeasurement)
    GetCurrentLevel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_GetCurrentLevel)
    ReconstructBiasField = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_ReconstructBiasField)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2

        Create a new object of the class itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2 in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_swigregister(itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2)
itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2___New_orig__ = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2___New_orig__
itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2ISS2_cast


def itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_New():
    return itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2.New()

class itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2(itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_Superclass):
    r"""


    Implementation of the N4 bias field correction algorithm.

    The nonparametric nonuniform intensity normalization (N3) algorithm,
    as introduced by Sled et al. in 1998 is a method for correcting
    nonuniformity associated with MR images. The algorithm assumes a
    simple parametric model (Gaussian) for the bias field and does not
    require tissue class segmentation. In addition, there are only a
    couple of parameters to tune with the default values performing quite
    well. N3 has been publicly available as a set of perl scripts (http://
    www.bic.mni.mcgill.ca/ServicesSoftwareAdvancedImageProcessingTo
    ols/HomePage)

    The N4 algorithm, encapsulated with this class, is a variation of the
    original N3 algorithm with the additional benefits of an improved
    B-spline fitting routine which allows for multiple resolutions to be
    used during the correction process. We also modify the iterative
    update component of algorithm such that the residual bias field is
    continually updated

    Notes for the user: Since much of the image manipulation is done in
    the log space of the intensities, input images with negative and small
    values (< 1) can produce poor results.

    The original authors recommend performing the bias field correction on
    a downsampled version of the original image.

    A binary mask or a weighted image can be supplied. If a binary mask is
    specified, those voxels in the input image which correspond to the
    voxels in the mask image are used to estimate the bias field. If a
    UseMaskLabel value is set to false (the default), all non-zero voxels
    in the MaskImage will be masked; otherwise only voxels in the
    MaskImage that match the MaskLabel will be used. If a confidence image
    is specified, the input voxels are weighted in the b-spline fitting
    routine according to the confidence voxel values.

    The filter returns the corrected image. If the bias field is wanted,
    one can reconstruct it using the class
    itkBSplineControlPointImageFilter.

    The 'Z' parameter in Sled's 1998 paper is the square root of the class
    variable 'm_WienerFilterNoise'.

    The basic algorithm iterates between sharpening the intensity
    histogram of the corrected input image and spatially smoothing those
    results with a B-spline scalar field estimate of the bias field.

    Nicholas J. Tustison  Contributed by Nicholas J. Tustison, James C.
    Gee in the Insight Journal paper:https://hdl.handle.net/10380/3053

    REFERENCE  J.G. Sled, A.P. Zijdenbos and A.C. Evans. "A Nonparametric
    Method for Automatic Correction of Intensity Nonuniformity in  Data"
    IEEE Transactions on Medical Imaging, Vol 17, No 1. Feb 1998.

    N.J. Tustison, B.B. Avants, P.A. Cook, Y. Zheng, A. Egan, P.A.
    Yushkevich, and J.C. Gee. "N4ITK:  Improved N3 Bias Correction" IEEE
    Transactions on Medical Imaging, 29(6):1310-1320, June 2010. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_Clone)
    SetInput1 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_GetMaskImage)
    SetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_SetMaskLabel)
    GetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_GetMaskLabel)
    SetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_SetUseMaskLabel)
    GetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_GetUseMaskLabel)
    UseMaskLabelOn = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_UseMaskLabelOn)
    UseMaskLabelOff = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_UseMaskLabelOff)
    SetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_SetConfidenceImage)
    SetInput3 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_SetInput3)
    GetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_GetConfidenceImage)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_GetNumberOfHistogramBins)
    SetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_SetWienerFilterNoise)
    GetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_GetWienerFilterNoise)
    SetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_SetBiasFieldFullWidthAtHalfMaximum)
    GetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_GetBiasFieldFullWidthAtHalfMaximum)
    SetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_GetSplineOrder)
    SetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_SetNumberOfControlPoints)
    GetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_GetNumberOfControlPoints)
    SetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_SetNumberOfFittingLevels)
    GetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_GetNumberOfFittingLevels)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_GetMaximumNumberOfIterations)
    SetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_GetConvergenceThreshold)
    GetLogBiasFieldControlPointLattice = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_GetLogBiasFieldControlPointLattice)
    GetElapsedIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_GetElapsedIterations)
    GetCurrentConvergenceMeasurement = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_GetCurrentConvergenceMeasurement)
    GetCurrentLevel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_GetCurrentLevel)
    ReconstructBiasField = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_ReconstructBiasField)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2

        Create a new object of the class itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2 in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_swigregister(itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2)
itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2___New_orig__ = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2___New_orig__
itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUC2_cast


def itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_New():
    return itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2.New()

class itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2(itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_Superclass):
    r"""


    Implementation of the N4 bias field correction algorithm.

    The nonparametric nonuniform intensity normalization (N3) algorithm,
    as introduced by Sled et al. in 1998 is a method for correcting
    nonuniformity associated with MR images. The algorithm assumes a
    simple parametric model (Gaussian) for the bias field and does not
    require tissue class segmentation. In addition, there are only a
    couple of parameters to tune with the default values performing quite
    well. N3 has been publicly available as a set of perl scripts (http://
    www.bic.mni.mcgill.ca/ServicesSoftwareAdvancedImageProcessingTo
    ols/HomePage)

    The N4 algorithm, encapsulated with this class, is a variation of the
    original N3 algorithm with the additional benefits of an improved
    B-spline fitting routine which allows for multiple resolutions to be
    used during the correction process. We also modify the iterative
    update component of algorithm such that the residual bias field is
    continually updated

    Notes for the user: Since much of the image manipulation is done in
    the log space of the intensities, input images with negative and small
    values (< 1) can produce poor results.

    The original authors recommend performing the bias field correction on
    a downsampled version of the original image.

    A binary mask or a weighted image can be supplied. If a binary mask is
    specified, those voxels in the input image which correspond to the
    voxels in the mask image are used to estimate the bias field. If a
    UseMaskLabel value is set to false (the default), all non-zero voxels
    in the MaskImage will be masked; otherwise only voxels in the
    MaskImage that match the MaskLabel will be used. If a confidence image
    is specified, the input voxels are weighted in the b-spline fitting
    routine according to the confidence voxel values.

    The filter returns the corrected image. If the bias field is wanted,
    one can reconstruct it using the class
    itkBSplineControlPointImageFilter.

    The 'Z' parameter in Sled's 1998 paper is the square root of the class
    variable 'm_WienerFilterNoise'.

    The basic algorithm iterates between sharpening the intensity
    histogram of the corrected input image and spatially smoothing those
    results with a B-spline scalar field estimate of the bias field.

    Nicholas J. Tustison  Contributed by Nicholas J. Tustison, James C.
    Gee in the Insight Journal paper:https://hdl.handle.net/10380/3053

    REFERENCE  J.G. Sled, A.P. Zijdenbos and A.C. Evans. "A Nonparametric
    Method for Automatic Correction of Intensity Nonuniformity in  Data"
    IEEE Transactions on Medical Imaging, Vol 17, No 1. Feb 1998.

    N.J. Tustison, B.B. Avants, P.A. Cook, Y. Zheng, A. Egan, P.A.
    Yushkevich, and J.C. Gee. "N4ITK:  Improved N3 Bias Correction" IEEE
    Transactions on Medical Imaging, 29(6):1310-1320, June 2010. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_Clone)
    SetInput1 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_GetMaskImage)
    SetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_SetMaskLabel)
    GetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_GetMaskLabel)
    SetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_SetUseMaskLabel)
    GetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_GetUseMaskLabel)
    UseMaskLabelOn = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_UseMaskLabelOn)
    UseMaskLabelOff = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_UseMaskLabelOff)
    SetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_SetConfidenceImage)
    SetInput3 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_SetInput3)
    GetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_GetConfidenceImage)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_GetNumberOfHistogramBins)
    SetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_SetWienerFilterNoise)
    GetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_GetWienerFilterNoise)
    SetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_SetBiasFieldFullWidthAtHalfMaximum)
    GetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_GetBiasFieldFullWidthAtHalfMaximum)
    SetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_GetSplineOrder)
    SetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_SetNumberOfControlPoints)
    GetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_GetNumberOfControlPoints)
    SetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_SetNumberOfFittingLevels)
    GetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_GetNumberOfFittingLevels)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_GetMaximumNumberOfIterations)
    SetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_GetConvergenceThreshold)
    GetLogBiasFieldControlPointLattice = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_GetLogBiasFieldControlPointLattice)
    GetElapsedIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_GetElapsedIterations)
    GetCurrentConvergenceMeasurement = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_GetCurrentConvergenceMeasurement)
    GetCurrentLevel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_GetCurrentLevel)
    ReconstructBiasField = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_ReconstructBiasField)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2

        Create a new object of the class itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2 in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_swigregister(itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2)
itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2___New_orig__ = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2___New_orig__
itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS2IUC2IUS2_cast


def itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_New():
    return itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3.New()

class itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3(itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_Superclass):
    r"""


    Implementation of the N4 bias field correction algorithm.

    The nonparametric nonuniform intensity normalization (N3) algorithm,
    as introduced by Sled et al. in 1998 is a method for correcting
    nonuniformity associated with MR images. The algorithm assumes a
    simple parametric model (Gaussian) for the bias field and does not
    require tissue class segmentation. In addition, there are only a
    couple of parameters to tune with the default values performing quite
    well. N3 has been publicly available as a set of perl scripts (http://
    www.bic.mni.mcgill.ca/ServicesSoftwareAdvancedImageProcessingTo
    ols/HomePage)

    The N4 algorithm, encapsulated with this class, is a variation of the
    original N3 algorithm with the additional benefits of an improved
    B-spline fitting routine which allows for multiple resolutions to be
    used during the correction process. We also modify the iterative
    update component of algorithm such that the residual bias field is
    continually updated

    Notes for the user: Since much of the image manipulation is done in
    the log space of the intensities, input images with negative and small
    values (< 1) can produce poor results.

    The original authors recommend performing the bias field correction on
    a downsampled version of the original image.

    A binary mask or a weighted image can be supplied. If a binary mask is
    specified, those voxels in the input image which correspond to the
    voxels in the mask image are used to estimate the bias field. If a
    UseMaskLabel value is set to false (the default), all non-zero voxels
    in the MaskImage will be masked; otherwise only voxels in the
    MaskImage that match the MaskLabel will be used. If a confidence image
    is specified, the input voxels are weighted in the b-spline fitting
    routine according to the confidence voxel values.

    The filter returns the corrected image. If the bias field is wanted,
    one can reconstruct it using the class
    itkBSplineControlPointImageFilter.

    The 'Z' parameter in Sled's 1998 paper is the square root of the class
    variable 'm_WienerFilterNoise'.

    The basic algorithm iterates between sharpening the intensity
    histogram of the corrected input image and spatially smoothing those
    results with a B-spline scalar field estimate of the bias field.

    Nicholas J. Tustison  Contributed by Nicholas J. Tustison, James C.
    Gee in the Insight Journal paper:https://hdl.handle.net/10380/3053

    REFERENCE  J.G. Sled, A.P. Zijdenbos and A.C. Evans. "A Nonparametric
    Method for Automatic Correction of Intensity Nonuniformity in  Data"
    IEEE Transactions on Medical Imaging, Vol 17, No 1. Feb 1998.

    N.J. Tustison, B.B. Avants, P.A. Cook, Y. Zheng, A. Egan, P.A.
    Yushkevich, and J.C. Gee. "N4ITK:  Improved N3 Bias Correction" IEEE
    Transactions on Medical Imaging, 29(6):1310-1320, June 2010. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_Clone)
    SetInput1 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_GetMaskImage)
    SetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_SetMaskLabel)
    GetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_GetMaskLabel)
    SetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_SetUseMaskLabel)
    GetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_GetUseMaskLabel)
    UseMaskLabelOn = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_UseMaskLabelOn)
    UseMaskLabelOff = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_UseMaskLabelOff)
    SetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_SetConfidenceImage)
    SetInput3 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_SetInput3)
    GetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_GetConfidenceImage)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_GetNumberOfHistogramBins)
    SetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_SetWienerFilterNoise)
    GetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_GetWienerFilterNoise)
    SetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_SetBiasFieldFullWidthAtHalfMaximum)
    GetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_GetBiasFieldFullWidthAtHalfMaximum)
    SetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_GetSplineOrder)
    SetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_SetNumberOfControlPoints)
    GetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_GetNumberOfControlPoints)
    SetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_SetNumberOfFittingLevels)
    GetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_GetNumberOfFittingLevels)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_GetMaximumNumberOfIterations)
    SetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_GetConvergenceThreshold)
    GetLogBiasFieldControlPointLattice = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_GetLogBiasFieldControlPointLattice)
    GetElapsedIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_GetElapsedIterations)
    GetCurrentConvergenceMeasurement = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_GetCurrentConvergenceMeasurement)
    GetCurrentLevel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_GetCurrentLevel)
    ReconstructBiasField = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_ReconstructBiasField)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3

        Create a new object of the class itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3 in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_swigregister(itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3)
itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3___New_orig__ = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3___New_orig__
itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ID3_cast


def itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_New():
    return itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3.New()

class itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3(itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_Superclass):
    r"""


    Implementation of the N4 bias field correction algorithm.

    The nonparametric nonuniform intensity normalization (N3) algorithm,
    as introduced by Sled et al. in 1998 is a method for correcting
    nonuniformity associated with MR images. The algorithm assumes a
    simple parametric model (Gaussian) for the bias field and does not
    require tissue class segmentation. In addition, there are only a
    couple of parameters to tune with the default values performing quite
    well. N3 has been publicly available as a set of perl scripts (http://
    www.bic.mni.mcgill.ca/ServicesSoftwareAdvancedImageProcessingTo
    ols/HomePage)

    The N4 algorithm, encapsulated with this class, is a variation of the
    original N3 algorithm with the additional benefits of an improved
    B-spline fitting routine which allows for multiple resolutions to be
    used during the correction process. We also modify the iterative
    update component of algorithm such that the residual bias field is
    continually updated

    Notes for the user: Since much of the image manipulation is done in
    the log space of the intensities, input images with negative and small
    values (< 1) can produce poor results.

    The original authors recommend performing the bias field correction on
    a downsampled version of the original image.

    A binary mask or a weighted image can be supplied. If a binary mask is
    specified, those voxels in the input image which correspond to the
    voxels in the mask image are used to estimate the bias field. If a
    UseMaskLabel value is set to false (the default), all non-zero voxels
    in the MaskImage will be masked; otherwise only voxels in the
    MaskImage that match the MaskLabel will be used. If a confidence image
    is specified, the input voxels are weighted in the b-spline fitting
    routine according to the confidence voxel values.

    The filter returns the corrected image. If the bias field is wanted,
    one can reconstruct it using the class
    itkBSplineControlPointImageFilter.

    The 'Z' parameter in Sled's 1998 paper is the square root of the class
    variable 'm_WienerFilterNoise'.

    The basic algorithm iterates between sharpening the intensity
    histogram of the corrected input image and spatially smoothing those
    results with a B-spline scalar field estimate of the bias field.

    Nicholas J. Tustison  Contributed by Nicholas J. Tustison, James C.
    Gee in the Insight Journal paper:https://hdl.handle.net/10380/3053

    REFERENCE  J.G. Sled, A.P. Zijdenbos and A.C. Evans. "A Nonparametric
    Method for Automatic Correction of Intensity Nonuniformity in  Data"
    IEEE Transactions on Medical Imaging, Vol 17, No 1. Feb 1998.

    N.J. Tustison, B.B. Avants, P.A. Cook, Y. Zheng, A. Egan, P.A.
    Yushkevich, and J.C. Gee. "N4ITK:  Improved N3 Bias Correction" IEEE
    Transactions on Medical Imaging, 29(6):1310-1320, June 2010. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_Clone)
    SetInput1 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_GetMaskImage)
    SetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_SetMaskLabel)
    GetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_GetMaskLabel)
    SetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_SetUseMaskLabel)
    GetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_GetUseMaskLabel)
    UseMaskLabelOn = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_UseMaskLabelOn)
    UseMaskLabelOff = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_UseMaskLabelOff)
    SetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_SetConfidenceImage)
    SetInput3 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_SetInput3)
    GetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_GetConfidenceImage)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_GetNumberOfHistogramBins)
    SetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_SetWienerFilterNoise)
    GetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_GetWienerFilterNoise)
    SetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_SetBiasFieldFullWidthAtHalfMaximum)
    GetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_GetBiasFieldFullWidthAtHalfMaximum)
    SetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_GetSplineOrder)
    SetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_SetNumberOfControlPoints)
    GetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_GetNumberOfControlPoints)
    SetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_SetNumberOfFittingLevels)
    GetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_GetNumberOfFittingLevels)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_GetMaximumNumberOfIterations)
    SetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_GetConvergenceThreshold)
    GetLogBiasFieldControlPointLattice = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_GetLogBiasFieldControlPointLattice)
    GetElapsedIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_GetElapsedIterations)
    GetCurrentConvergenceMeasurement = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_GetCurrentConvergenceMeasurement)
    GetCurrentLevel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_GetCurrentLevel)
    ReconstructBiasField = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_ReconstructBiasField)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3

        Create a new object of the class itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3 in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_swigregister(itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3)
itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3___New_orig__ = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3___New_orig__
itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IF3_cast


def itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_New():
    return itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3.New()

class itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3(itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_Superclass):
    r"""


    Implementation of the N4 bias field correction algorithm.

    The nonparametric nonuniform intensity normalization (N3) algorithm,
    as introduced by Sled et al. in 1998 is a method for correcting
    nonuniformity associated with MR images. The algorithm assumes a
    simple parametric model (Gaussian) for the bias field and does not
    require tissue class segmentation. In addition, there are only a
    couple of parameters to tune with the default values performing quite
    well. N3 has been publicly available as a set of perl scripts (http://
    www.bic.mni.mcgill.ca/ServicesSoftwareAdvancedImageProcessingTo
    ols/HomePage)

    The N4 algorithm, encapsulated with this class, is a variation of the
    original N3 algorithm with the additional benefits of an improved
    B-spline fitting routine which allows for multiple resolutions to be
    used during the correction process. We also modify the iterative
    update component of algorithm such that the residual bias field is
    continually updated

    Notes for the user: Since much of the image manipulation is done in
    the log space of the intensities, input images with negative and small
    values (< 1) can produce poor results.

    The original authors recommend performing the bias field correction on
    a downsampled version of the original image.

    A binary mask or a weighted image can be supplied. If a binary mask is
    specified, those voxels in the input image which correspond to the
    voxels in the mask image are used to estimate the bias field. If a
    UseMaskLabel value is set to false (the default), all non-zero voxels
    in the MaskImage will be masked; otherwise only voxels in the
    MaskImage that match the MaskLabel will be used. If a confidence image
    is specified, the input voxels are weighted in the b-spline fitting
    routine according to the confidence voxel values.

    The filter returns the corrected image. If the bias field is wanted,
    one can reconstruct it using the class
    itkBSplineControlPointImageFilter.

    The 'Z' parameter in Sled's 1998 paper is the square root of the class
    variable 'm_WienerFilterNoise'.

    The basic algorithm iterates between sharpening the intensity
    histogram of the corrected input image and spatially smoothing those
    results with a B-spline scalar field estimate of the bias field.

    Nicholas J. Tustison  Contributed by Nicholas J. Tustison, James C.
    Gee in the Insight Journal paper:https://hdl.handle.net/10380/3053

    REFERENCE  J.G. Sled, A.P. Zijdenbos and A.C. Evans. "A Nonparametric
    Method for Automatic Correction of Intensity Nonuniformity in  Data"
    IEEE Transactions on Medical Imaging, Vol 17, No 1. Feb 1998.

    N.J. Tustison, B.B. Avants, P.A. Cook, Y. Zheng, A. Egan, P.A.
    Yushkevich, and J.C. Gee. "N4ITK:  Improved N3 Bias Correction" IEEE
    Transactions on Medical Imaging, 29(6):1310-1320, June 2010. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_Clone)
    SetInput1 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_GetMaskImage)
    SetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_SetMaskLabel)
    GetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_GetMaskLabel)
    SetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_SetUseMaskLabel)
    GetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_GetUseMaskLabel)
    UseMaskLabelOn = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_UseMaskLabelOn)
    UseMaskLabelOff = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_UseMaskLabelOff)
    SetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_SetConfidenceImage)
    SetInput3 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_SetInput3)
    GetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_GetConfidenceImage)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_GetNumberOfHistogramBins)
    SetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_SetWienerFilterNoise)
    GetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_GetWienerFilterNoise)
    SetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_SetBiasFieldFullWidthAtHalfMaximum)
    GetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_GetBiasFieldFullWidthAtHalfMaximum)
    SetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_GetSplineOrder)
    SetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_SetNumberOfControlPoints)
    GetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_GetNumberOfControlPoints)
    SetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_SetNumberOfFittingLevels)
    GetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_GetNumberOfFittingLevels)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_GetMaximumNumberOfIterations)
    SetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_GetConvergenceThreshold)
    GetLogBiasFieldControlPointLattice = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_GetLogBiasFieldControlPointLattice)
    GetElapsedIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_GetElapsedIterations)
    GetCurrentConvergenceMeasurement = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_GetCurrentConvergenceMeasurement)
    GetCurrentLevel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_GetCurrentLevel)
    ReconstructBiasField = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_ReconstructBiasField)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3

        Create a new object of the class itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3 in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_swigregister(itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3)
itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3___New_orig__ = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3___New_orig__
itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3ISS3_cast


def itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_New():
    return itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3.New()

class itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3(itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_Superclass):
    r"""


    Implementation of the N4 bias field correction algorithm.

    The nonparametric nonuniform intensity normalization (N3) algorithm,
    as introduced by Sled et al. in 1998 is a method for correcting
    nonuniformity associated with MR images. The algorithm assumes a
    simple parametric model (Gaussian) for the bias field and does not
    require tissue class segmentation. In addition, there are only a
    couple of parameters to tune with the default values performing quite
    well. N3 has been publicly available as a set of perl scripts (http://
    www.bic.mni.mcgill.ca/ServicesSoftwareAdvancedImageProcessingTo
    ols/HomePage)

    The N4 algorithm, encapsulated with this class, is a variation of the
    original N3 algorithm with the additional benefits of an improved
    B-spline fitting routine which allows for multiple resolutions to be
    used during the correction process. We also modify the iterative
    update component of algorithm such that the residual bias field is
    continually updated

    Notes for the user: Since much of the image manipulation is done in
    the log space of the intensities, input images with negative and small
    values (< 1) can produce poor results.

    The original authors recommend performing the bias field correction on
    a downsampled version of the original image.

    A binary mask or a weighted image can be supplied. If a binary mask is
    specified, those voxels in the input image which correspond to the
    voxels in the mask image are used to estimate the bias field. If a
    UseMaskLabel value is set to false (the default), all non-zero voxels
    in the MaskImage will be masked; otherwise only voxels in the
    MaskImage that match the MaskLabel will be used. If a confidence image
    is specified, the input voxels are weighted in the b-spline fitting
    routine according to the confidence voxel values.

    The filter returns the corrected image. If the bias field is wanted,
    one can reconstruct it using the class
    itkBSplineControlPointImageFilter.

    The 'Z' parameter in Sled's 1998 paper is the square root of the class
    variable 'm_WienerFilterNoise'.

    The basic algorithm iterates between sharpening the intensity
    histogram of the corrected input image and spatially smoothing those
    results with a B-spline scalar field estimate of the bias field.

    Nicholas J. Tustison  Contributed by Nicholas J. Tustison, James C.
    Gee in the Insight Journal paper:https://hdl.handle.net/10380/3053

    REFERENCE  J.G. Sled, A.P. Zijdenbos and A.C. Evans. "A Nonparametric
    Method for Automatic Correction of Intensity Nonuniformity in  Data"
    IEEE Transactions on Medical Imaging, Vol 17, No 1. Feb 1998.

    N.J. Tustison, B.B. Avants, P.A. Cook, Y. Zheng, A. Egan, P.A.
    Yushkevich, and J.C. Gee. "N4ITK:  Improved N3 Bias Correction" IEEE
    Transactions on Medical Imaging, 29(6):1310-1320, June 2010. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_Clone)
    SetInput1 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_GetMaskImage)
    SetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_SetMaskLabel)
    GetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_GetMaskLabel)
    SetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_SetUseMaskLabel)
    GetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_GetUseMaskLabel)
    UseMaskLabelOn = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_UseMaskLabelOn)
    UseMaskLabelOff = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_UseMaskLabelOff)
    SetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_SetConfidenceImage)
    SetInput3 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_SetInput3)
    GetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_GetConfidenceImage)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_GetNumberOfHistogramBins)
    SetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_SetWienerFilterNoise)
    GetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_GetWienerFilterNoise)
    SetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_SetBiasFieldFullWidthAtHalfMaximum)
    GetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_GetBiasFieldFullWidthAtHalfMaximum)
    SetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_GetSplineOrder)
    SetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_SetNumberOfControlPoints)
    GetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_GetNumberOfControlPoints)
    SetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_SetNumberOfFittingLevels)
    GetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_GetNumberOfFittingLevels)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_GetMaximumNumberOfIterations)
    SetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_GetConvergenceThreshold)
    GetLogBiasFieldControlPointLattice = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_GetLogBiasFieldControlPointLattice)
    GetElapsedIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_GetElapsedIterations)
    GetCurrentConvergenceMeasurement = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_GetCurrentConvergenceMeasurement)
    GetCurrentLevel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_GetCurrentLevel)
    ReconstructBiasField = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_ReconstructBiasField)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3

        Create a new object of the class itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3 in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_swigregister(itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3)
itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3___New_orig__ = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3___New_orig__
itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUC3_cast


def itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_New():
    return itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3.New()

class itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3(itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_Superclass):
    r"""


    Implementation of the N4 bias field correction algorithm.

    The nonparametric nonuniform intensity normalization (N3) algorithm,
    as introduced by Sled et al. in 1998 is a method for correcting
    nonuniformity associated with MR images. The algorithm assumes a
    simple parametric model (Gaussian) for the bias field and does not
    require tissue class segmentation. In addition, there are only a
    couple of parameters to tune with the default values performing quite
    well. N3 has been publicly available as a set of perl scripts (http://
    www.bic.mni.mcgill.ca/ServicesSoftwareAdvancedImageProcessingTo
    ols/HomePage)

    The N4 algorithm, encapsulated with this class, is a variation of the
    original N3 algorithm with the additional benefits of an improved
    B-spline fitting routine which allows for multiple resolutions to be
    used during the correction process. We also modify the iterative
    update component of algorithm such that the residual bias field is
    continually updated

    Notes for the user: Since much of the image manipulation is done in
    the log space of the intensities, input images with negative and small
    values (< 1) can produce poor results.

    The original authors recommend performing the bias field correction on
    a downsampled version of the original image.

    A binary mask or a weighted image can be supplied. If a binary mask is
    specified, those voxels in the input image which correspond to the
    voxels in the mask image are used to estimate the bias field. If a
    UseMaskLabel value is set to false (the default), all non-zero voxels
    in the MaskImage will be masked; otherwise only voxels in the
    MaskImage that match the MaskLabel will be used. If a confidence image
    is specified, the input voxels are weighted in the b-spline fitting
    routine according to the confidence voxel values.

    The filter returns the corrected image. If the bias field is wanted,
    one can reconstruct it using the class
    itkBSplineControlPointImageFilter.

    The 'Z' parameter in Sled's 1998 paper is the square root of the class
    variable 'm_WienerFilterNoise'.

    The basic algorithm iterates between sharpening the intensity
    histogram of the corrected input image and spatially smoothing those
    results with a B-spline scalar field estimate of the bias field.

    Nicholas J. Tustison  Contributed by Nicholas J. Tustison, James C.
    Gee in the Insight Journal paper:https://hdl.handle.net/10380/3053

    REFERENCE  J.G. Sled, A.P. Zijdenbos and A.C. Evans. "A Nonparametric
    Method for Automatic Correction of Intensity Nonuniformity in  Data"
    IEEE Transactions on Medical Imaging, Vol 17, No 1. Feb 1998.

    N.J. Tustison, B.B. Avants, P.A. Cook, Y. Zheng, A. Egan, P.A.
    Yushkevich, and J.C. Gee. "N4ITK:  Improved N3 Bias Correction" IEEE
    Transactions on Medical Imaging, 29(6):1310-1320, June 2010. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_Clone)
    SetInput1 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_GetMaskImage)
    SetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_SetMaskLabel)
    GetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_GetMaskLabel)
    SetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_SetUseMaskLabel)
    GetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_GetUseMaskLabel)
    UseMaskLabelOn = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_UseMaskLabelOn)
    UseMaskLabelOff = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_UseMaskLabelOff)
    SetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_SetConfidenceImage)
    SetInput3 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_SetInput3)
    GetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_GetConfidenceImage)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_GetNumberOfHistogramBins)
    SetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_SetWienerFilterNoise)
    GetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_GetWienerFilterNoise)
    SetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_SetBiasFieldFullWidthAtHalfMaximum)
    GetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_GetBiasFieldFullWidthAtHalfMaximum)
    SetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_GetSplineOrder)
    SetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_SetNumberOfControlPoints)
    GetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_GetNumberOfControlPoints)
    SetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_SetNumberOfFittingLevels)
    GetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_GetNumberOfFittingLevels)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_GetMaximumNumberOfIterations)
    SetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_GetConvergenceThreshold)
    GetLogBiasFieldControlPointLattice = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_GetLogBiasFieldControlPointLattice)
    GetElapsedIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_GetElapsedIterations)
    GetCurrentConvergenceMeasurement = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_GetCurrentConvergenceMeasurement)
    GetCurrentLevel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_GetCurrentLevel)
    ReconstructBiasField = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_ReconstructBiasField)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3

        Create a new object of the class itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3 in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_swigregister(itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3)
itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3___New_orig__ = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3___New_orig__
itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterISS3IUC3IUS3_cast


def itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_New():
    return itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2.New()

class itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2(itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_Superclass):
    r"""


    Implementation of the N4 bias field correction algorithm.

    The nonparametric nonuniform intensity normalization (N3) algorithm,
    as introduced by Sled et al. in 1998 is a method for correcting
    nonuniformity associated with MR images. The algorithm assumes a
    simple parametric model (Gaussian) for the bias field and does not
    require tissue class segmentation. In addition, there are only a
    couple of parameters to tune with the default values performing quite
    well. N3 has been publicly available as a set of perl scripts (http://
    www.bic.mni.mcgill.ca/ServicesSoftwareAdvancedImageProcessingTo
    ols/HomePage)

    The N4 algorithm, encapsulated with this class, is a variation of the
    original N3 algorithm with the additional benefits of an improved
    B-spline fitting routine which allows for multiple resolutions to be
    used during the correction process. We also modify the iterative
    update component of algorithm such that the residual bias field is
    continually updated

    Notes for the user: Since much of the image manipulation is done in
    the log space of the intensities, input images with negative and small
    values (< 1) can produce poor results.

    The original authors recommend performing the bias field correction on
    a downsampled version of the original image.

    A binary mask or a weighted image can be supplied. If a binary mask is
    specified, those voxels in the input image which correspond to the
    voxels in the mask image are used to estimate the bias field. If a
    UseMaskLabel value is set to false (the default), all non-zero voxels
    in the MaskImage will be masked; otherwise only voxels in the
    MaskImage that match the MaskLabel will be used. If a confidence image
    is specified, the input voxels are weighted in the b-spline fitting
    routine according to the confidence voxel values.

    The filter returns the corrected image. If the bias field is wanted,
    one can reconstruct it using the class
    itkBSplineControlPointImageFilter.

    The 'Z' parameter in Sled's 1998 paper is the square root of the class
    variable 'm_WienerFilterNoise'.

    The basic algorithm iterates between sharpening the intensity
    histogram of the corrected input image and spatially smoothing those
    results with a B-spline scalar field estimate of the bias field.

    Nicholas J. Tustison  Contributed by Nicholas J. Tustison, James C.
    Gee in the Insight Journal paper:https://hdl.handle.net/10380/3053

    REFERENCE  J.G. Sled, A.P. Zijdenbos and A.C. Evans. "A Nonparametric
    Method for Automatic Correction of Intensity Nonuniformity in  Data"
    IEEE Transactions on Medical Imaging, Vol 17, No 1. Feb 1998.

    N.J. Tustison, B.B. Avants, P.A. Cook, Y. Zheng, A. Egan, P.A.
    Yushkevich, and J.C. Gee. "N4ITK:  Improved N3 Bias Correction" IEEE
    Transactions on Medical Imaging, 29(6):1310-1320, June 2010. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_Clone)
    SetInput1 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_GetMaskImage)
    SetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_SetMaskLabel)
    GetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_GetMaskLabel)
    SetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_SetUseMaskLabel)
    GetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_GetUseMaskLabel)
    UseMaskLabelOn = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_UseMaskLabelOn)
    UseMaskLabelOff = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_UseMaskLabelOff)
    SetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_SetConfidenceImage)
    SetInput3 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_SetInput3)
    GetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_GetConfidenceImage)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_GetNumberOfHistogramBins)
    SetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_SetWienerFilterNoise)
    GetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_GetWienerFilterNoise)
    SetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_SetBiasFieldFullWidthAtHalfMaximum)
    GetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_GetBiasFieldFullWidthAtHalfMaximum)
    SetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_GetSplineOrder)
    SetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_SetNumberOfControlPoints)
    GetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_GetNumberOfControlPoints)
    SetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_SetNumberOfFittingLevels)
    GetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_GetNumberOfFittingLevels)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_GetMaximumNumberOfIterations)
    SetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_GetConvergenceThreshold)
    GetLogBiasFieldControlPointLattice = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_GetLogBiasFieldControlPointLattice)
    GetElapsedIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_GetElapsedIterations)
    GetCurrentConvergenceMeasurement = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_GetCurrentConvergenceMeasurement)
    GetCurrentLevel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_GetCurrentLevel)
    ReconstructBiasField = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_ReconstructBiasField)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2

        Create a new object of the class itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2 in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_swigregister(itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2)
itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2___New_orig__ = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2___New_orig__
itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ID2_cast


def itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_New():
    return itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2.New()

class itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2(itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_Superclass):
    r"""


    Implementation of the N4 bias field correction algorithm.

    The nonparametric nonuniform intensity normalization (N3) algorithm,
    as introduced by Sled et al. in 1998 is a method for correcting
    nonuniformity associated with MR images. The algorithm assumes a
    simple parametric model (Gaussian) for the bias field and does not
    require tissue class segmentation. In addition, there are only a
    couple of parameters to tune with the default values performing quite
    well. N3 has been publicly available as a set of perl scripts (http://
    www.bic.mni.mcgill.ca/ServicesSoftwareAdvancedImageProcessingTo
    ols/HomePage)

    The N4 algorithm, encapsulated with this class, is a variation of the
    original N3 algorithm with the additional benefits of an improved
    B-spline fitting routine which allows for multiple resolutions to be
    used during the correction process. We also modify the iterative
    update component of algorithm such that the residual bias field is
    continually updated

    Notes for the user: Since much of the image manipulation is done in
    the log space of the intensities, input images with negative and small
    values (< 1) can produce poor results.

    The original authors recommend performing the bias field correction on
    a downsampled version of the original image.

    A binary mask or a weighted image can be supplied. If a binary mask is
    specified, those voxels in the input image which correspond to the
    voxels in the mask image are used to estimate the bias field. If a
    UseMaskLabel value is set to false (the default), all non-zero voxels
    in the MaskImage will be masked; otherwise only voxels in the
    MaskImage that match the MaskLabel will be used. If a confidence image
    is specified, the input voxels are weighted in the b-spline fitting
    routine according to the confidence voxel values.

    The filter returns the corrected image. If the bias field is wanted,
    one can reconstruct it using the class
    itkBSplineControlPointImageFilter.

    The 'Z' parameter in Sled's 1998 paper is the square root of the class
    variable 'm_WienerFilterNoise'.

    The basic algorithm iterates between sharpening the intensity
    histogram of the corrected input image and spatially smoothing those
    results with a B-spline scalar field estimate of the bias field.

    Nicholas J. Tustison  Contributed by Nicholas J. Tustison, James C.
    Gee in the Insight Journal paper:https://hdl.handle.net/10380/3053

    REFERENCE  J.G. Sled, A.P. Zijdenbos and A.C. Evans. "A Nonparametric
    Method for Automatic Correction of Intensity Nonuniformity in  Data"
    IEEE Transactions on Medical Imaging, Vol 17, No 1. Feb 1998.

    N.J. Tustison, B.B. Avants, P.A. Cook, Y. Zheng, A. Egan, P.A.
    Yushkevich, and J.C. Gee. "N4ITK:  Improved N3 Bias Correction" IEEE
    Transactions on Medical Imaging, 29(6):1310-1320, June 2010. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_Clone)
    SetInput1 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_GetMaskImage)
    SetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_SetMaskLabel)
    GetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_GetMaskLabel)
    SetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_SetUseMaskLabel)
    GetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_GetUseMaskLabel)
    UseMaskLabelOn = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_UseMaskLabelOn)
    UseMaskLabelOff = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_UseMaskLabelOff)
    SetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_SetConfidenceImage)
    SetInput3 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_SetInput3)
    GetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_GetConfidenceImage)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_GetNumberOfHistogramBins)
    SetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_SetWienerFilterNoise)
    GetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_GetWienerFilterNoise)
    SetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_SetBiasFieldFullWidthAtHalfMaximum)
    GetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_GetBiasFieldFullWidthAtHalfMaximum)
    SetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_GetSplineOrder)
    SetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_SetNumberOfControlPoints)
    GetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_GetNumberOfControlPoints)
    SetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_SetNumberOfFittingLevels)
    GetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_GetNumberOfFittingLevels)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_GetMaximumNumberOfIterations)
    SetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_GetConvergenceThreshold)
    GetLogBiasFieldControlPointLattice = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_GetLogBiasFieldControlPointLattice)
    GetElapsedIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_GetElapsedIterations)
    GetCurrentConvergenceMeasurement = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_GetCurrentConvergenceMeasurement)
    GetCurrentLevel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_GetCurrentLevel)
    ReconstructBiasField = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_ReconstructBiasField)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2

        Create a new object of the class itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2 in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_swigregister(itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2)
itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2___New_orig__ = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2___New_orig__
itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IF2_cast


def itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_New():
    return itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2.New()

class itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2(itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_Superclass):
    r"""


    Implementation of the N4 bias field correction algorithm.

    The nonparametric nonuniform intensity normalization (N3) algorithm,
    as introduced by Sled et al. in 1998 is a method for correcting
    nonuniformity associated with MR images. The algorithm assumes a
    simple parametric model (Gaussian) for the bias field and does not
    require tissue class segmentation. In addition, there are only a
    couple of parameters to tune with the default values performing quite
    well. N3 has been publicly available as a set of perl scripts (http://
    www.bic.mni.mcgill.ca/ServicesSoftwareAdvancedImageProcessingTo
    ols/HomePage)

    The N4 algorithm, encapsulated with this class, is a variation of the
    original N3 algorithm with the additional benefits of an improved
    B-spline fitting routine which allows for multiple resolutions to be
    used during the correction process. We also modify the iterative
    update component of algorithm such that the residual bias field is
    continually updated

    Notes for the user: Since much of the image manipulation is done in
    the log space of the intensities, input images with negative and small
    values (< 1) can produce poor results.

    The original authors recommend performing the bias field correction on
    a downsampled version of the original image.

    A binary mask or a weighted image can be supplied. If a binary mask is
    specified, those voxels in the input image which correspond to the
    voxels in the mask image are used to estimate the bias field. If a
    UseMaskLabel value is set to false (the default), all non-zero voxels
    in the MaskImage will be masked; otherwise only voxels in the
    MaskImage that match the MaskLabel will be used. If a confidence image
    is specified, the input voxels are weighted in the b-spline fitting
    routine according to the confidence voxel values.

    The filter returns the corrected image. If the bias field is wanted,
    one can reconstruct it using the class
    itkBSplineControlPointImageFilter.

    The 'Z' parameter in Sled's 1998 paper is the square root of the class
    variable 'm_WienerFilterNoise'.

    The basic algorithm iterates between sharpening the intensity
    histogram of the corrected input image and spatially smoothing those
    results with a B-spline scalar field estimate of the bias field.

    Nicholas J. Tustison  Contributed by Nicholas J. Tustison, James C.
    Gee in the Insight Journal paper:https://hdl.handle.net/10380/3053

    REFERENCE  J.G. Sled, A.P. Zijdenbos and A.C. Evans. "A Nonparametric
    Method for Automatic Correction of Intensity Nonuniformity in  Data"
    IEEE Transactions on Medical Imaging, Vol 17, No 1. Feb 1998.

    N.J. Tustison, B.B. Avants, P.A. Cook, Y. Zheng, A. Egan, P.A.
    Yushkevich, and J.C. Gee. "N4ITK:  Improved N3 Bias Correction" IEEE
    Transactions on Medical Imaging, 29(6):1310-1320, June 2010. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_Clone)
    SetInput1 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_GetMaskImage)
    SetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_SetMaskLabel)
    GetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_GetMaskLabel)
    SetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_SetUseMaskLabel)
    GetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_GetUseMaskLabel)
    UseMaskLabelOn = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_UseMaskLabelOn)
    UseMaskLabelOff = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_UseMaskLabelOff)
    SetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_SetConfidenceImage)
    SetInput3 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_SetInput3)
    GetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_GetConfidenceImage)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_GetNumberOfHistogramBins)
    SetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_SetWienerFilterNoise)
    GetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_GetWienerFilterNoise)
    SetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_SetBiasFieldFullWidthAtHalfMaximum)
    GetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_GetBiasFieldFullWidthAtHalfMaximum)
    SetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_GetSplineOrder)
    SetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_SetNumberOfControlPoints)
    GetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_GetNumberOfControlPoints)
    SetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_SetNumberOfFittingLevels)
    GetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_GetNumberOfFittingLevels)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_GetMaximumNumberOfIterations)
    SetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_GetConvergenceThreshold)
    GetLogBiasFieldControlPointLattice = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_GetLogBiasFieldControlPointLattice)
    GetElapsedIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_GetElapsedIterations)
    GetCurrentConvergenceMeasurement = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_GetCurrentConvergenceMeasurement)
    GetCurrentLevel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_GetCurrentLevel)
    ReconstructBiasField = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_ReconstructBiasField)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2

        Create a new object of the class itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2 in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_swigregister(itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2)
itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2___New_orig__ = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2___New_orig__
itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2ISS2_cast


def itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_New():
    return itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2.New()

class itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2(itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_Superclass):
    r"""


    Implementation of the N4 bias field correction algorithm.

    The nonparametric nonuniform intensity normalization (N3) algorithm,
    as introduced by Sled et al. in 1998 is a method for correcting
    nonuniformity associated with MR images. The algorithm assumes a
    simple parametric model (Gaussian) for the bias field and does not
    require tissue class segmentation. In addition, there are only a
    couple of parameters to tune with the default values performing quite
    well. N3 has been publicly available as a set of perl scripts (http://
    www.bic.mni.mcgill.ca/ServicesSoftwareAdvancedImageProcessingTo
    ols/HomePage)

    The N4 algorithm, encapsulated with this class, is a variation of the
    original N3 algorithm with the additional benefits of an improved
    B-spline fitting routine which allows for multiple resolutions to be
    used during the correction process. We also modify the iterative
    update component of algorithm such that the residual bias field is
    continually updated

    Notes for the user: Since much of the image manipulation is done in
    the log space of the intensities, input images with negative and small
    values (< 1) can produce poor results.

    The original authors recommend performing the bias field correction on
    a downsampled version of the original image.

    A binary mask or a weighted image can be supplied. If a binary mask is
    specified, those voxels in the input image which correspond to the
    voxels in the mask image are used to estimate the bias field. If a
    UseMaskLabel value is set to false (the default), all non-zero voxels
    in the MaskImage will be masked; otherwise only voxels in the
    MaskImage that match the MaskLabel will be used. If a confidence image
    is specified, the input voxels are weighted in the b-spline fitting
    routine according to the confidence voxel values.

    The filter returns the corrected image. If the bias field is wanted,
    one can reconstruct it using the class
    itkBSplineControlPointImageFilter.

    The 'Z' parameter in Sled's 1998 paper is the square root of the class
    variable 'm_WienerFilterNoise'.

    The basic algorithm iterates between sharpening the intensity
    histogram of the corrected input image and spatially smoothing those
    results with a B-spline scalar field estimate of the bias field.

    Nicholas J. Tustison  Contributed by Nicholas J. Tustison, James C.
    Gee in the Insight Journal paper:https://hdl.handle.net/10380/3053

    REFERENCE  J.G. Sled, A.P. Zijdenbos and A.C. Evans. "A Nonparametric
    Method for Automatic Correction of Intensity Nonuniformity in  Data"
    IEEE Transactions on Medical Imaging, Vol 17, No 1. Feb 1998.

    N.J. Tustison, B.B. Avants, P.A. Cook, Y. Zheng, A. Egan, P.A.
    Yushkevich, and J.C. Gee. "N4ITK:  Improved N3 Bias Correction" IEEE
    Transactions on Medical Imaging, 29(6):1310-1320, June 2010. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_Clone)
    SetInput1 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_GetMaskImage)
    SetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_SetMaskLabel)
    GetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_GetMaskLabel)
    SetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_SetUseMaskLabel)
    GetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_GetUseMaskLabel)
    UseMaskLabelOn = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_UseMaskLabelOn)
    UseMaskLabelOff = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_UseMaskLabelOff)
    SetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_SetConfidenceImage)
    SetInput3 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_SetInput3)
    GetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_GetConfidenceImage)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_GetNumberOfHistogramBins)
    SetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_SetWienerFilterNoise)
    GetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_GetWienerFilterNoise)
    SetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_SetBiasFieldFullWidthAtHalfMaximum)
    GetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_GetBiasFieldFullWidthAtHalfMaximum)
    SetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_GetSplineOrder)
    SetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_SetNumberOfControlPoints)
    GetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_GetNumberOfControlPoints)
    SetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_SetNumberOfFittingLevels)
    GetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_GetNumberOfFittingLevels)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_GetMaximumNumberOfIterations)
    SetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_GetConvergenceThreshold)
    GetLogBiasFieldControlPointLattice = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_GetLogBiasFieldControlPointLattice)
    GetElapsedIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_GetElapsedIterations)
    GetCurrentConvergenceMeasurement = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_GetCurrentConvergenceMeasurement)
    GetCurrentLevel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_GetCurrentLevel)
    ReconstructBiasField = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_ReconstructBiasField)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2

        Create a new object of the class itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2 in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_swigregister(itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2)
itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2___New_orig__ = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2___New_orig__
itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUC2_cast


def itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_New():
    return itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2.New()

class itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2(itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_Superclass):
    r"""


    Implementation of the N4 bias field correction algorithm.

    The nonparametric nonuniform intensity normalization (N3) algorithm,
    as introduced by Sled et al. in 1998 is a method for correcting
    nonuniformity associated with MR images. The algorithm assumes a
    simple parametric model (Gaussian) for the bias field and does not
    require tissue class segmentation. In addition, there are only a
    couple of parameters to tune with the default values performing quite
    well. N3 has been publicly available as a set of perl scripts (http://
    www.bic.mni.mcgill.ca/ServicesSoftwareAdvancedImageProcessingTo
    ols/HomePage)

    The N4 algorithm, encapsulated with this class, is a variation of the
    original N3 algorithm with the additional benefits of an improved
    B-spline fitting routine which allows for multiple resolutions to be
    used during the correction process. We also modify the iterative
    update component of algorithm such that the residual bias field is
    continually updated

    Notes for the user: Since much of the image manipulation is done in
    the log space of the intensities, input images with negative and small
    values (< 1) can produce poor results.

    The original authors recommend performing the bias field correction on
    a downsampled version of the original image.

    A binary mask or a weighted image can be supplied. If a binary mask is
    specified, those voxels in the input image which correspond to the
    voxels in the mask image are used to estimate the bias field. If a
    UseMaskLabel value is set to false (the default), all non-zero voxels
    in the MaskImage will be masked; otherwise only voxels in the
    MaskImage that match the MaskLabel will be used. If a confidence image
    is specified, the input voxels are weighted in the b-spline fitting
    routine according to the confidence voxel values.

    The filter returns the corrected image. If the bias field is wanted,
    one can reconstruct it using the class
    itkBSplineControlPointImageFilter.

    The 'Z' parameter in Sled's 1998 paper is the square root of the class
    variable 'm_WienerFilterNoise'.

    The basic algorithm iterates between sharpening the intensity
    histogram of the corrected input image and spatially smoothing those
    results with a B-spline scalar field estimate of the bias field.

    Nicholas J. Tustison  Contributed by Nicholas J. Tustison, James C.
    Gee in the Insight Journal paper:https://hdl.handle.net/10380/3053

    REFERENCE  J.G. Sled, A.P. Zijdenbos and A.C. Evans. "A Nonparametric
    Method for Automatic Correction of Intensity Nonuniformity in  Data"
    IEEE Transactions on Medical Imaging, Vol 17, No 1. Feb 1998.

    N.J. Tustison, B.B. Avants, P.A. Cook, Y. Zheng, A. Egan, P.A.
    Yushkevich, and J.C. Gee. "N4ITK:  Improved N3 Bias Correction" IEEE
    Transactions on Medical Imaging, 29(6):1310-1320, June 2010. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_Clone)
    SetInput1 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_GetMaskImage)
    SetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_SetMaskLabel)
    GetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_GetMaskLabel)
    SetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_SetUseMaskLabel)
    GetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_GetUseMaskLabel)
    UseMaskLabelOn = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_UseMaskLabelOn)
    UseMaskLabelOff = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_UseMaskLabelOff)
    SetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_SetConfidenceImage)
    SetInput3 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_SetInput3)
    GetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_GetConfidenceImage)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_GetNumberOfHistogramBins)
    SetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_SetWienerFilterNoise)
    GetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_GetWienerFilterNoise)
    SetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_SetBiasFieldFullWidthAtHalfMaximum)
    GetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_GetBiasFieldFullWidthAtHalfMaximum)
    SetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_GetSplineOrder)
    SetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_SetNumberOfControlPoints)
    GetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_GetNumberOfControlPoints)
    SetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_SetNumberOfFittingLevels)
    GetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_GetNumberOfFittingLevels)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_GetMaximumNumberOfIterations)
    SetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_GetConvergenceThreshold)
    GetLogBiasFieldControlPointLattice = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_GetLogBiasFieldControlPointLattice)
    GetElapsedIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_GetElapsedIterations)
    GetCurrentConvergenceMeasurement = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_GetCurrentConvergenceMeasurement)
    GetCurrentLevel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_GetCurrentLevel)
    ReconstructBiasField = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_ReconstructBiasField)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2

        Create a new object of the class itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2 in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_swigregister(itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2)
itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2___New_orig__ = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2___New_orig__
itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC2IUC2IUS2_cast


def itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_New():
    return itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3.New()

class itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3(itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_Superclass):
    r"""


    Implementation of the N4 bias field correction algorithm.

    The nonparametric nonuniform intensity normalization (N3) algorithm,
    as introduced by Sled et al. in 1998 is a method for correcting
    nonuniformity associated with MR images. The algorithm assumes a
    simple parametric model (Gaussian) for the bias field and does not
    require tissue class segmentation. In addition, there are only a
    couple of parameters to tune with the default values performing quite
    well. N3 has been publicly available as a set of perl scripts (http://
    www.bic.mni.mcgill.ca/ServicesSoftwareAdvancedImageProcessingTo
    ols/HomePage)

    The N4 algorithm, encapsulated with this class, is a variation of the
    original N3 algorithm with the additional benefits of an improved
    B-spline fitting routine which allows for multiple resolutions to be
    used during the correction process. We also modify the iterative
    update component of algorithm such that the residual bias field is
    continually updated

    Notes for the user: Since much of the image manipulation is done in
    the log space of the intensities, input images with negative and small
    values (< 1) can produce poor results.

    The original authors recommend performing the bias field correction on
    a downsampled version of the original image.

    A binary mask or a weighted image can be supplied. If a binary mask is
    specified, those voxels in the input image which correspond to the
    voxels in the mask image are used to estimate the bias field. If a
    UseMaskLabel value is set to false (the default), all non-zero voxels
    in the MaskImage will be masked; otherwise only voxels in the
    MaskImage that match the MaskLabel will be used. If a confidence image
    is specified, the input voxels are weighted in the b-spline fitting
    routine according to the confidence voxel values.

    The filter returns the corrected image. If the bias field is wanted,
    one can reconstruct it using the class
    itkBSplineControlPointImageFilter.

    The 'Z' parameter in Sled's 1998 paper is the square root of the class
    variable 'm_WienerFilterNoise'.

    The basic algorithm iterates between sharpening the intensity
    histogram of the corrected input image and spatially smoothing those
    results with a B-spline scalar field estimate of the bias field.

    Nicholas J. Tustison  Contributed by Nicholas J. Tustison, James C.
    Gee in the Insight Journal paper:https://hdl.handle.net/10380/3053

    REFERENCE  J.G. Sled, A.P. Zijdenbos and A.C. Evans. "A Nonparametric
    Method for Automatic Correction of Intensity Nonuniformity in  Data"
    IEEE Transactions on Medical Imaging, Vol 17, No 1. Feb 1998.

    N.J. Tustison, B.B. Avants, P.A. Cook, Y. Zheng, A. Egan, P.A.
    Yushkevich, and J.C. Gee. "N4ITK:  Improved N3 Bias Correction" IEEE
    Transactions on Medical Imaging, 29(6):1310-1320, June 2010. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_Clone)
    SetInput1 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_GetMaskImage)
    SetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_SetMaskLabel)
    GetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_GetMaskLabel)
    SetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_SetUseMaskLabel)
    GetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_GetUseMaskLabel)
    UseMaskLabelOn = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_UseMaskLabelOn)
    UseMaskLabelOff = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_UseMaskLabelOff)
    SetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_SetConfidenceImage)
    SetInput3 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_SetInput3)
    GetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_GetConfidenceImage)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_GetNumberOfHistogramBins)
    SetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_SetWienerFilterNoise)
    GetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_GetWienerFilterNoise)
    SetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_SetBiasFieldFullWidthAtHalfMaximum)
    GetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_GetBiasFieldFullWidthAtHalfMaximum)
    SetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_GetSplineOrder)
    SetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_SetNumberOfControlPoints)
    GetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_GetNumberOfControlPoints)
    SetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_SetNumberOfFittingLevels)
    GetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_GetNumberOfFittingLevels)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_GetMaximumNumberOfIterations)
    SetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_GetConvergenceThreshold)
    GetLogBiasFieldControlPointLattice = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_GetLogBiasFieldControlPointLattice)
    GetElapsedIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_GetElapsedIterations)
    GetCurrentConvergenceMeasurement = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_GetCurrentConvergenceMeasurement)
    GetCurrentLevel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_GetCurrentLevel)
    ReconstructBiasField = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_ReconstructBiasField)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3

        Create a new object of the class itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3 in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_swigregister(itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3)
itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3___New_orig__ = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3___New_orig__
itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ID3_cast


def itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_New():
    return itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3.New()

class itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3(itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_Superclass):
    r"""


    Implementation of the N4 bias field correction algorithm.

    The nonparametric nonuniform intensity normalization (N3) algorithm,
    as introduced by Sled et al. in 1998 is a method for correcting
    nonuniformity associated with MR images. The algorithm assumes a
    simple parametric model (Gaussian) for the bias field and does not
    require tissue class segmentation. In addition, there are only a
    couple of parameters to tune with the default values performing quite
    well. N3 has been publicly available as a set of perl scripts (http://
    www.bic.mni.mcgill.ca/ServicesSoftwareAdvancedImageProcessingTo
    ols/HomePage)

    The N4 algorithm, encapsulated with this class, is a variation of the
    original N3 algorithm with the additional benefits of an improved
    B-spline fitting routine which allows for multiple resolutions to be
    used during the correction process. We also modify the iterative
    update component of algorithm such that the residual bias field is
    continually updated

    Notes for the user: Since much of the image manipulation is done in
    the log space of the intensities, input images with negative and small
    values (< 1) can produce poor results.

    The original authors recommend performing the bias field correction on
    a downsampled version of the original image.

    A binary mask or a weighted image can be supplied. If a binary mask is
    specified, those voxels in the input image which correspond to the
    voxels in the mask image are used to estimate the bias field. If a
    UseMaskLabel value is set to false (the default), all non-zero voxels
    in the MaskImage will be masked; otherwise only voxels in the
    MaskImage that match the MaskLabel will be used. If a confidence image
    is specified, the input voxels are weighted in the b-spline fitting
    routine according to the confidence voxel values.

    The filter returns the corrected image. If the bias field is wanted,
    one can reconstruct it using the class
    itkBSplineControlPointImageFilter.

    The 'Z' parameter in Sled's 1998 paper is the square root of the class
    variable 'm_WienerFilterNoise'.

    The basic algorithm iterates between sharpening the intensity
    histogram of the corrected input image and spatially smoothing those
    results with a B-spline scalar field estimate of the bias field.

    Nicholas J. Tustison  Contributed by Nicholas J. Tustison, James C.
    Gee in the Insight Journal paper:https://hdl.handle.net/10380/3053

    REFERENCE  J.G. Sled, A.P. Zijdenbos and A.C. Evans. "A Nonparametric
    Method for Automatic Correction of Intensity Nonuniformity in  Data"
    IEEE Transactions on Medical Imaging, Vol 17, No 1. Feb 1998.

    N.J. Tustison, B.B. Avants, P.A. Cook, Y. Zheng, A. Egan, P.A.
    Yushkevich, and J.C. Gee. "N4ITK:  Improved N3 Bias Correction" IEEE
    Transactions on Medical Imaging, 29(6):1310-1320, June 2010. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_Clone)
    SetInput1 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_GetMaskImage)
    SetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_SetMaskLabel)
    GetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_GetMaskLabel)
    SetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_SetUseMaskLabel)
    GetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_GetUseMaskLabel)
    UseMaskLabelOn = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_UseMaskLabelOn)
    UseMaskLabelOff = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_UseMaskLabelOff)
    SetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_SetConfidenceImage)
    SetInput3 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_SetInput3)
    GetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_GetConfidenceImage)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_GetNumberOfHistogramBins)
    SetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_SetWienerFilterNoise)
    GetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_GetWienerFilterNoise)
    SetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_SetBiasFieldFullWidthAtHalfMaximum)
    GetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_GetBiasFieldFullWidthAtHalfMaximum)
    SetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_GetSplineOrder)
    SetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_SetNumberOfControlPoints)
    GetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_GetNumberOfControlPoints)
    SetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_SetNumberOfFittingLevels)
    GetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_GetNumberOfFittingLevels)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_GetMaximumNumberOfIterations)
    SetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_GetConvergenceThreshold)
    GetLogBiasFieldControlPointLattice = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_GetLogBiasFieldControlPointLattice)
    GetElapsedIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_GetElapsedIterations)
    GetCurrentConvergenceMeasurement = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_GetCurrentConvergenceMeasurement)
    GetCurrentLevel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_GetCurrentLevel)
    ReconstructBiasField = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_ReconstructBiasField)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3

        Create a new object of the class itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3 in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_swigregister(itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3)
itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3___New_orig__ = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3___New_orig__
itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IF3_cast


def itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_New():
    return itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3.New()

class itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3(itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_Superclass):
    r"""


    Implementation of the N4 bias field correction algorithm.

    The nonparametric nonuniform intensity normalization (N3) algorithm,
    as introduced by Sled et al. in 1998 is a method for correcting
    nonuniformity associated with MR images. The algorithm assumes a
    simple parametric model (Gaussian) for the bias field and does not
    require tissue class segmentation. In addition, there are only a
    couple of parameters to tune with the default values performing quite
    well. N3 has been publicly available as a set of perl scripts (http://
    www.bic.mni.mcgill.ca/ServicesSoftwareAdvancedImageProcessingTo
    ols/HomePage)

    The N4 algorithm, encapsulated with this class, is a variation of the
    original N3 algorithm with the additional benefits of an improved
    B-spline fitting routine which allows for multiple resolutions to be
    used during the correction process. We also modify the iterative
    update component of algorithm such that the residual bias field is
    continually updated

    Notes for the user: Since much of the image manipulation is done in
    the log space of the intensities, input images with negative and small
    values (< 1) can produce poor results.

    The original authors recommend performing the bias field correction on
    a downsampled version of the original image.

    A binary mask or a weighted image can be supplied. If a binary mask is
    specified, those voxels in the input image which correspond to the
    voxels in the mask image are used to estimate the bias field. If a
    UseMaskLabel value is set to false (the default), all non-zero voxels
    in the MaskImage will be masked; otherwise only voxels in the
    MaskImage that match the MaskLabel will be used. If a confidence image
    is specified, the input voxels are weighted in the b-spline fitting
    routine according to the confidence voxel values.

    The filter returns the corrected image. If the bias field is wanted,
    one can reconstruct it using the class
    itkBSplineControlPointImageFilter.

    The 'Z' parameter in Sled's 1998 paper is the square root of the class
    variable 'm_WienerFilterNoise'.

    The basic algorithm iterates between sharpening the intensity
    histogram of the corrected input image and spatially smoothing those
    results with a B-spline scalar field estimate of the bias field.

    Nicholas J. Tustison  Contributed by Nicholas J. Tustison, James C.
    Gee in the Insight Journal paper:https://hdl.handle.net/10380/3053

    REFERENCE  J.G. Sled, A.P. Zijdenbos and A.C. Evans. "A Nonparametric
    Method for Automatic Correction of Intensity Nonuniformity in  Data"
    IEEE Transactions on Medical Imaging, Vol 17, No 1. Feb 1998.

    N.J. Tustison, B.B. Avants, P.A. Cook, Y. Zheng, A. Egan, P.A.
    Yushkevich, and J.C. Gee. "N4ITK:  Improved N3 Bias Correction" IEEE
    Transactions on Medical Imaging, 29(6):1310-1320, June 2010. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_Clone)
    SetInput1 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_GetMaskImage)
    SetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_SetMaskLabel)
    GetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_GetMaskLabel)
    SetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_SetUseMaskLabel)
    GetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_GetUseMaskLabel)
    UseMaskLabelOn = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_UseMaskLabelOn)
    UseMaskLabelOff = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_UseMaskLabelOff)
    SetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_SetConfidenceImage)
    SetInput3 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_SetInput3)
    GetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_GetConfidenceImage)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_GetNumberOfHistogramBins)
    SetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_SetWienerFilterNoise)
    GetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_GetWienerFilterNoise)
    SetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_SetBiasFieldFullWidthAtHalfMaximum)
    GetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_GetBiasFieldFullWidthAtHalfMaximum)
    SetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_GetSplineOrder)
    SetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_SetNumberOfControlPoints)
    GetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_GetNumberOfControlPoints)
    SetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_SetNumberOfFittingLevels)
    GetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_GetNumberOfFittingLevels)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_GetMaximumNumberOfIterations)
    SetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_GetConvergenceThreshold)
    GetLogBiasFieldControlPointLattice = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_GetLogBiasFieldControlPointLattice)
    GetElapsedIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_GetElapsedIterations)
    GetCurrentConvergenceMeasurement = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_GetCurrentConvergenceMeasurement)
    GetCurrentLevel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_GetCurrentLevel)
    ReconstructBiasField = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_ReconstructBiasField)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3

        Create a new object of the class itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3 in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_swigregister(itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3)
itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3___New_orig__ = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3___New_orig__
itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3ISS3_cast


def itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_New():
    return itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3.New()

class itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3(itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_Superclass):
    r"""


    Implementation of the N4 bias field correction algorithm.

    The nonparametric nonuniform intensity normalization (N3) algorithm,
    as introduced by Sled et al. in 1998 is a method for correcting
    nonuniformity associated with MR images. The algorithm assumes a
    simple parametric model (Gaussian) for the bias field and does not
    require tissue class segmentation. In addition, there are only a
    couple of parameters to tune with the default values performing quite
    well. N3 has been publicly available as a set of perl scripts (http://
    www.bic.mni.mcgill.ca/ServicesSoftwareAdvancedImageProcessingTo
    ols/HomePage)

    The N4 algorithm, encapsulated with this class, is a variation of the
    original N3 algorithm with the additional benefits of an improved
    B-spline fitting routine which allows for multiple resolutions to be
    used during the correction process. We also modify the iterative
    update component of algorithm such that the residual bias field is
    continually updated

    Notes for the user: Since much of the image manipulation is done in
    the log space of the intensities, input images with negative and small
    values (< 1) can produce poor results.

    The original authors recommend performing the bias field correction on
    a downsampled version of the original image.

    A binary mask or a weighted image can be supplied. If a binary mask is
    specified, those voxels in the input image which correspond to the
    voxels in the mask image are used to estimate the bias field. If a
    UseMaskLabel value is set to false (the default), all non-zero voxels
    in the MaskImage will be masked; otherwise only voxels in the
    MaskImage that match the MaskLabel will be used. If a confidence image
    is specified, the input voxels are weighted in the b-spline fitting
    routine according to the confidence voxel values.

    The filter returns the corrected image. If the bias field is wanted,
    one can reconstruct it using the class
    itkBSplineControlPointImageFilter.

    The 'Z' parameter in Sled's 1998 paper is the square root of the class
    variable 'm_WienerFilterNoise'.

    The basic algorithm iterates between sharpening the intensity
    histogram of the corrected input image and spatially smoothing those
    results with a B-spline scalar field estimate of the bias field.

    Nicholas J. Tustison  Contributed by Nicholas J. Tustison, James C.
    Gee in the Insight Journal paper:https://hdl.handle.net/10380/3053

    REFERENCE  J.G. Sled, A.P. Zijdenbos and A.C. Evans. "A Nonparametric
    Method for Automatic Correction of Intensity Nonuniformity in  Data"
    IEEE Transactions on Medical Imaging, Vol 17, No 1. Feb 1998.

    N.J. Tustison, B.B. Avants, P.A. Cook, Y. Zheng, A. Egan, P.A.
    Yushkevich, and J.C. Gee. "N4ITK:  Improved N3 Bias Correction" IEEE
    Transactions on Medical Imaging, 29(6):1310-1320, June 2010. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_Clone)
    SetInput1 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_GetMaskImage)
    SetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_SetMaskLabel)
    GetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_GetMaskLabel)
    SetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_SetUseMaskLabel)
    GetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_GetUseMaskLabel)
    UseMaskLabelOn = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_UseMaskLabelOn)
    UseMaskLabelOff = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_UseMaskLabelOff)
    SetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_SetConfidenceImage)
    SetInput3 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_SetInput3)
    GetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_GetConfidenceImage)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_GetNumberOfHistogramBins)
    SetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_SetWienerFilterNoise)
    GetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_GetWienerFilterNoise)
    SetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_SetBiasFieldFullWidthAtHalfMaximum)
    GetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_GetBiasFieldFullWidthAtHalfMaximum)
    SetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_GetSplineOrder)
    SetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_SetNumberOfControlPoints)
    GetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_GetNumberOfControlPoints)
    SetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_SetNumberOfFittingLevels)
    GetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_GetNumberOfFittingLevels)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_GetMaximumNumberOfIterations)
    SetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_GetConvergenceThreshold)
    GetLogBiasFieldControlPointLattice = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_GetLogBiasFieldControlPointLattice)
    GetElapsedIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_GetElapsedIterations)
    GetCurrentConvergenceMeasurement = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_GetCurrentConvergenceMeasurement)
    GetCurrentLevel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_GetCurrentLevel)
    ReconstructBiasField = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_ReconstructBiasField)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3

        Create a new object of the class itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3 in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_swigregister(itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3)
itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3___New_orig__ = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3___New_orig__
itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUC3_cast


def itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_New():
    return itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3.New()

class itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3(itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_Superclass):
    r"""


    Implementation of the N4 bias field correction algorithm.

    The nonparametric nonuniform intensity normalization (N3) algorithm,
    as introduced by Sled et al. in 1998 is a method for correcting
    nonuniformity associated with MR images. The algorithm assumes a
    simple parametric model (Gaussian) for the bias field and does not
    require tissue class segmentation. In addition, there are only a
    couple of parameters to tune with the default values performing quite
    well. N3 has been publicly available as a set of perl scripts (http://
    www.bic.mni.mcgill.ca/ServicesSoftwareAdvancedImageProcessingTo
    ols/HomePage)

    The N4 algorithm, encapsulated with this class, is a variation of the
    original N3 algorithm with the additional benefits of an improved
    B-spline fitting routine which allows for multiple resolutions to be
    used during the correction process. We also modify the iterative
    update component of algorithm such that the residual bias field is
    continually updated

    Notes for the user: Since much of the image manipulation is done in
    the log space of the intensities, input images with negative and small
    values (< 1) can produce poor results.

    The original authors recommend performing the bias field correction on
    a downsampled version of the original image.

    A binary mask or a weighted image can be supplied. If a binary mask is
    specified, those voxels in the input image which correspond to the
    voxels in the mask image are used to estimate the bias field. If a
    UseMaskLabel value is set to false (the default), all non-zero voxels
    in the MaskImage will be masked; otherwise only voxels in the
    MaskImage that match the MaskLabel will be used. If a confidence image
    is specified, the input voxels are weighted in the b-spline fitting
    routine according to the confidence voxel values.

    The filter returns the corrected image. If the bias field is wanted,
    one can reconstruct it using the class
    itkBSplineControlPointImageFilter.

    The 'Z' parameter in Sled's 1998 paper is the square root of the class
    variable 'm_WienerFilterNoise'.

    The basic algorithm iterates between sharpening the intensity
    histogram of the corrected input image and spatially smoothing those
    results with a B-spline scalar field estimate of the bias field.

    Nicholas J. Tustison  Contributed by Nicholas J. Tustison, James C.
    Gee in the Insight Journal paper:https://hdl.handle.net/10380/3053

    REFERENCE  J.G. Sled, A.P. Zijdenbos and A.C. Evans. "A Nonparametric
    Method for Automatic Correction of Intensity Nonuniformity in  Data"
    IEEE Transactions on Medical Imaging, Vol 17, No 1. Feb 1998.

    N.J. Tustison, B.B. Avants, P.A. Cook, Y. Zheng, A. Egan, P.A.
    Yushkevich, and J.C. Gee. "N4ITK:  Improved N3 Bias Correction" IEEE
    Transactions on Medical Imaging, 29(6):1310-1320, June 2010. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_Clone)
    SetInput1 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_GetMaskImage)
    SetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_SetMaskLabel)
    GetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_GetMaskLabel)
    SetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_SetUseMaskLabel)
    GetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_GetUseMaskLabel)
    UseMaskLabelOn = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_UseMaskLabelOn)
    UseMaskLabelOff = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_UseMaskLabelOff)
    SetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_SetConfidenceImage)
    SetInput3 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_SetInput3)
    GetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_GetConfidenceImage)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_GetNumberOfHistogramBins)
    SetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_SetWienerFilterNoise)
    GetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_GetWienerFilterNoise)
    SetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_SetBiasFieldFullWidthAtHalfMaximum)
    GetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_GetBiasFieldFullWidthAtHalfMaximum)
    SetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_GetSplineOrder)
    SetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_SetNumberOfControlPoints)
    GetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_GetNumberOfControlPoints)
    SetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_SetNumberOfFittingLevels)
    GetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_GetNumberOfFittingLevels)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_GetMaximumNumberOfIterations)
    SetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_GetConvergenceThreshold)
    GetLogBiasFieldControlPointLattice = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_GetLogBiasFieldControlPointLattice)
    GetElapsedIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_GetElapsedIterations)
    GetCurrentConvergenceMeasurement = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_GetCurrentConvergenceMeasurement)
    GetCurrentLevel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_GetCurrentLevel)
    ReconstructBiasField = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_ReconstructBiasField)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3

        Create a new object of the class itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3 in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_swigregister(itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3)
itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3___New_orig__ = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3___New_orig__
itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUC3IUC3IUS3_cast


def itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_New():
    return itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2.New()

class itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2(itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_Superclass):
    r"""


    Implementation of the N4 bias field correction algorithm.

    The nonparametric nonuniform intensity normalization (N3) algorithm,
    as introduced by Sled et al. in 1998 is a method for correcting
    nonuniformity associated with MR images. The algorithm assumes a
    simple parametric model (Gaussian) for the bias field and does not
    require tissue class segmentation. In addition, there are only a
    couple of parameters to tune with the default values performing quite
    well. N3 has been publicly available as a set of perl scripts (http://
    www.bic.mni.mcgill.ca/ServicesSoftwareAdvancedImageProcessingTo
    ols/HomePage)

    The N4 algorithm, encapsulated with this class, is a variation of the
    original N3 algorithm with the additional benefits of an improved
    B-spline fitting routine which allows for multiple resolutions to be
    used during the correction process. We also modify the iterative
    update component of algorithm such that the residual bias field is
    continually updated

    Notes for the user: Since much of the image manipulation is done in
    the log space of the intensities, input images with negative and small
    values (< 1) can produce poor results.

    The original authors recommend performing the bias field correction on
    a downsampled version of the original image.

    A binary mask or a weighted image can be supplied. If a binary mask is
    specified, those voxels in the input image which correspond to the
    voxels in the mask image are used to estimate the bias field. If a
    UseMaskLabel value is set to false (the default), all non-zero voxels
    in the MaskImage will be masked; otherwise only voxels in the
    MaskImage that match the MaskLabel will be used. If a confidence image
    is specified, the input voxels are weighted in the b-spline fitting
    routine according to the confidence voxel values.

    The filter returns the corrected image. If the bias field is wanted,
    one can reconstruct it using the class
    itkBSplineControlPointImageFilter.

    The 'Z' parameter in Sled's 1998 paper is the square root of the class
    variable 'm_WienerFilterNoise'.

    The basic algorithm iterates between sharpening the intensity
    histogram of the corrected input image and spatially smoothing those
    results with a B-spline scalar field estimate of the bias field.

    Nicholas J. Tustison  Contributed by Nicholas J. Tustison, James C.
    Gee in the Insight Journal paper:https://hdl.handle.net/10380/3053

    REFERENCE  J.G. Sled, A.P. Zijdenbos and A.C. Evans. "A Nonparametric
    Method for Automatic Correction of Intensity Nonuniformity in  Data"
    IEEE Transactions on Medical Imaging, Vol 17, No 1. Feb 1998.

    N.J. Tustison, B.B. Avants, P.A. Cook, Y. Zheng, A. Egan, P.A.
    Yushkevich, and J.C. Gee. "N4ITK:  Improved N3 Bias Correction" IEEE
    Transactions on Medical Imaging, 29(6):1310-1320, June 2010. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_Clone)
    SetInput1 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_GetMaskImage)
    SetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_SetMaskLabel)
    GetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_GetMaskLabel)
    SetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_SetUseMaskLabel)
    GetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_GetUseMaskLabel)
    UseMaskLabelOn = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_UseMaskLabelOn)
    UseMaskLabelOff = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_UseMaskLabelOff)
    SetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_SetConfidenceImage)
    SetInput3 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_SetInput3)
    GetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_GetConfidenceImage)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_GetNumberOfHistogramBins)
    SetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_SetWienerFilterNoise)
    GetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_GetWienerFilterNoise)
    SetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_SetBiasFieldFullWidthAtHalfMaximum)
    GetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_GetBiasFieldFullWidthAtHalfMaximum)
    SetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_GetSplineOrder)
    SetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_SetNumberOfControlPoints)
    GetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_GetNumberOfControlPoints)
    SetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_SetNumberOfFittingLevels)
    GetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_GetNumberOfFittingLevels)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_GetMaximumNumberOfIterations)
    SetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_GetConvergenceThreshold)
    GetLogBiasFieldControlPointLattice = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_GetLogBiasFieldControlPointLattice)
    GetElapsedIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_GetElapsedIterations)
    GetCurrentConvergenceMeasurement = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_GetCurrentConvergenceMeasurement)
    GetCurrentLevel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_GetCurrentLevel)
    ReconstructBiasField = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_ReconstructBiasField)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2

        Create a new object of the class itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2 in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_swigregister(itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2)
itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2___New_orig__ = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2___New_orig__
itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ID2_cast


def itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_New():
    return itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2.New()

class itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2(itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_Superclass):
    r"""


    Implementation of the N4 bias field correction algorithm.

    The nonparametric nonuniform intensity normalization (N3) algorithm,
    as introduced by Sled et al. in 1998 is a method for correcting
    nonuniformity associated with MR images. The algorithm assumes a
    simple parametric model (Gaussian) for the bias field and does not
    require tissue class segmentation. In addition, there are only a
    couple of parameters to tune with the default values performing quite
    well. N3 has been publicly available as a set of perl scripts (http://
    www.bic.mni.mcgill.ca/ServicesSoftwareAdvancedImageProcessingTo
    ols/HomePage)

    The N4 algorithm, encapsulated with this class, is a variation of the
    original N3 algorithm with the additional benefits of an improved
    B-spline fitting routine which allows for multiple resolutions to be
    used during the correction process. We also modify the iterative
    update component of algorithm such that the residual bias field is
    continually updated

    Notes for the user: Since much of the image manipulation is done in
    the log space of the intensities, input images with negative and small
    values (< 1) can produce poor results.

    The original authors recommend performing the bias field correction on
    a downsampled version of the original image.

    A binary mask or a weighted image can be supplied. If a binary mask is
    specified, those voxels in the input image which correspond to the
    voxels in the mask image are used to estimate the bias field. If a
    UseMaskLabel value is set to false (the default), all non-zero voxels
    in the MaskImage will be masked; otherwise only voxels in the
    MaskImage that match the MaskLabel will be used. If a confidence image
    is specified, the input voxels are weighted in the b-spline fitting
    routine according to the confidence voxel values.

    The filter returns the corrected image. If the bias field is wanted,
    one can reconstruct it using the class
    itkBSplineControlPointImageFilter.

    The 'Z' parameter in Sled's 1998 paper is the square root of the class
    variable 'm_WienerFilterNoise'.

    The basic algorithm iterates between sharpening the intensity
    histogram of the corrected input image and spatially smoothing those
    results with a B-spline scalar field estimate of the bias field.

    Nicholas J. Tustison  Contributed by Nicholas J. Tustison, James C.
    Gee in the Insight Journal paper:https://hdl.handle.net/10380/3053

    REFERENCE  J.G. Sled, A.P. Zijdenbos and A.C. Evans. "A Nonparametric
    Method for Automatic Correction of Intensity Nonuniformity in  Data"
    IEEE Transactions on Medical Imaging, Vol 17, No 1. Feb 1998.

    N.J. Tustison, B.B. Avants, P.A. Cook, Y. Zheng, A. Egan, P.A.
    Yushkevich, and J.C. Gee. "N4ITK:  Improved N3 Bias Correction" IEEE
    Transactions on Medical Imaging, 29(6):1310-1320, June 2010. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_Clone)
    SetInput1 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_GetMaskImage)
    SetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_SetMaskLabel)
    GetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_GetMaskLabel)
    SetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_SetUseMaskLabel)
    GetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_GetUseMaskLabel)
    UseMaskLabelOn = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_UseMaskLabelOn)
    UseMaskLabelOff = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_UseMaskLabelOff)
    SetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_SetConfidenceImage)
    SetInput3 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_SetInput3)
    GetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_GetConfidenceImage)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_GetNumberOfHistogramBins)
    SetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_SetWienerFilterNoise)
    GetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_GetWienerFilterNoise)
    SetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_SetBiasFieldFullWidthAtHalfMaximum)
    GetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_GetBiasFieldFullWidthAtHalfMaximum)
    SetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_GetSplineOrder)
    SetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_SetNumberOfControlPoints)
    GetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_GetNumberOfControlPoints)
    SetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_SetNumberOfFittingLevels)
    GetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_GetNumberOfFittingLevels)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_GetMaximumNumberOfIterations)
    SetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_GetConvergenceThreshold)
    GetLogBiasFieldControlPointLattice = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_GetLogBiasFieldControlPointLattice)
    GetElapsedIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_GetElapsedIterations)
    GetCurrentConvergenceMeasurement = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_GetCurrentConvergenceMeasurement)
    GetCurrentLevel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_GetCurrentLevel)
    ReconstructBiasField = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_ReconstructBiasField)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2

        Create a new object of the class itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2 in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_swigregister(itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2)
itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2___New_orig__ = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2___New_orig__
itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IF2_cast


def itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_New():
    return itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2.New()

class itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2(itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_Superclass):
    r"""


    Implementation of the N4 bias field correction algorithm.

    The nonparametric nonuniform intensity normalization (N3) algorithm,
    as introduced by Sled et al. in 1998 is a method for correcting
    nonuniformity associated with MR images. The algorithm assumes a
    simple parametric model (Gaussian) for the bias field and does not
    require tissue class segmentation. In addition, there are only a
    couple of parameters to tune with the default values performing quite
    well. N3 has been publicly available as a set of perl scripts (http://
    www.bic.mni.mcgill.ca/ServicesSoftwareAdvancedImageProcessingTo
    ols/HomePage)

    The N4 algorithm, encapsulated with this class, is a variation of the
    original N3 algorithm with the additional benefits of an improved
    B-spline fitting routine which allows for multiple resolutions to be
    used during the correction process. We also modify the iterative
    update component of algorithm such that the residual bias field is
    continually updated

    Notes for the user: Since much of the image manipulation is done in
    the log space of the intensities, input images with negative and small
    values (< 1) can produce poor results.

    The original authors recommend performing the bias field correction on
    a downsampled version of the original image.

    A binary mask or a weighted image can be supplied. If a binary mask is
    specified, those voxels in the input image which correspond to the
    voxels in the mask image are used to estimate the bias field. If a
    UseMaskLabel value is set to false (the default), all non-zero voxels
    in the MaskImage will be masked; otherwise only voxels in the
    MaskImage that match the MaskLabel will be used. If a confidence image
    is specified, the input voxels are weighted in the b-spline fitting
    routine according to the confidence voxel values.

    The filter returns the corrected image. If the bias field is wanted,
    one can reconstruct it using the class
    itkBSplineControlPointImageFilter.

    The 'Z' parameter in Sled's 1998 paper is the square root of the class
    variable 'm_WienerFilterNoise'.

    The basic algorithm iterates between sharpening the intensity
    histogram of the corrected input image and spatially smoothing those
    results with a B-spline scalar field estimate of the bias field.

    Nicholas J. Tustison  Contributed by Nicholas J. Tustison, James C.
    Gee in the Insight Journal paper:https://hdl.handle.net/10380/3053

    REFERENCE  J.G. Sled, A.P. Zijdenbos and A.C. Evans. "A Nonparametric
    Method for Automatic Correction of Intensity Nonuniformity in  Data"
    IEEE Transactions on Medical Imaging, Vol 17, No 1. Feb 1998.

    N.J. Tustison, B.B. Avants, P.A. Cook, Y. Zheng, A. Egan, P.A.
    Yushkevich, and J.C. Gee. "N4ITK:  Improved N3 Bias Correction" IEEE
    Transactions on Medical Imaging, 29(6):1310-1320, June 2010. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_Clone)
    SetInput1 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_GetMaskImage)
    SetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_SetMaskLabel)
    GetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_GetMaskLabel)
    SetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_SetUseMaskLabel)
    GetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_GetUseMaskLabel)
    UseMaskLabelOn = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_UseMaskLabelOn)
    UseMaskLabelOff = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_UseMaskLabelOff)
    SetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_SetConfidenceImage)
    SetInput3 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_SetInput3)
    GetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_GetConfidenceImage)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_GetNumberOfHistogramBins)
    SetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_SetWienerFilterNoise)
    GetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_GetWienerFilterNoise)
    SetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_SetBiasFieldFullWidthAtHalfMaximum)
    GetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_GetBiasFieldFullWidthAtHalfMaximum)
    SetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_GetSplineOrder)
    SetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_SetNumberOfControlPoints)
    GetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_GetNumberOfControlPoints)
    SetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_SetNumberOfFittingLevels)
    GetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_GetNumberOfFittingLevels)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_GetMaximumNumberOfIterations)
    SetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_GetConvergenceThreshold)
    GetLogBiasFieldControlPointLattice = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_GetLogBiasFieldControlPointLattice)
    GetElapsedIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_GetElapsedIterations)
    GetCurrentConvergenceMeasurement = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_GetCurrentConvergenceMeasurement)
    GetCurrentLevel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_GetCurrentLevel)
    ReconstructBiasField = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_ReconstructBiasField)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2

        Create a new object of the class itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2 in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_swigregister(itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2)
itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2___New_orig__ = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2___New_orig__
itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2ISS2_cast


def itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_New():
    return itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2.New()

class itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2(itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_Superclass):
    r"""


    Implementation of the N4 bias field correction algorithm.

    The nonparametric nonuniform intensity normalization (N3) algorithm,
    as introduced by Sled et al. in 1998 is a method for correcting
    nonuniformity associated with MR images. The algorithm assumes a
    simple parametric model (Gaussian) for the bias field and does not
    require tissue class segmentation. In addition, there are only a
    couple of parameters to tune with the default values performing quite
    well. N3 has been publicly available as a set of perl scripts (http://
    www.bic.mni.mcgill.ca/ServicesSoftwareAdvancedImageProcessingTo
    ols/HomePage)

    The N4 algorithm, encapsulated with this class, is a variation of the
    original N3 algorithm with the additional benefits of an improved
    B-spline fitting routine which allows for multiple resolutions to be
    used during the correction process. We also modify the iterative
    update component of algorithm such that the residual bias field is
    continually updated

    Notes for the user: Since much of the image manipulation is done in
    the log space of the intensities, input images with negative and small
    values (< 1) can produce poor results.

    The original authors recommend performing the bias field correction on
    a downsampled version of the original image.

    A binary mask or a weighted image can be supplied. If a binary mask is
    specified, those voxels in the input image which correspond to the
    voxels in the mask image are used to estimate the bias field. If a
    UseMaskLabel value is set to false (the default), all non-zero voxels
    in the MaskImage will be masked; otherwise only voxels in the
    MaskImage that match the MaskLabel will be used. If a confidence image
    is specified, the input voxels are weighted in the b-spline fitting
    routine according to the confidence voxel values.

    The filter returns the corrected image. If the bias field is wanted,
    one can reconstruct it using the class
    itkBSplineControlPointImageFilter.

    The 'Z' parameter in Sled's 1998 paper is the square root of the class
    variable 'm_WienerFilterNoise'.

    The basic algorithm iterates between sharpening the intensity
    histogram of the corrected input image and spatially smoothing those
    results with a B-spline scalar field estimate of the bias field.

    Nicholas J. Tustison  Contributed by Nicholas J. Tustison, James C.
    Gee in the Insight Journal paper:https://hdl.handle.net/10380/3053

    REFERENCE  J.G. Sled, A.P. Zijdenbos and A.C. Evans. "A Nonparametric
    Method for Automatic Correction of Intensity Nonuniformity in  Data"
    IEEE Transactions on Medical Imaging, Vol 17, No 1. Feb 1998.

    N.J. Tustison, B.B. Avants, P.A. Cook, Y. Zheng, A. Egan, P.A.
    Yushkevich, and J.C. Gee. "N4ITK:  Improved N3 Bias Correction" IEEE
    Transactions on Medical Imaging, 29(6):1310-1320, June 2010. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_Clone)
    SetInput1 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_GetMaskImage)
    SetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_SetMaskLabel)
    GetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_GetMaskLabel)
    SetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_SetUseMaskLabel)
    GetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_GetUseMaskLabel)
    UseMaskLabelOn = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_UseMaskLabelOn)
    UseMaskLabelOff = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_UseMaskLabelOff)
    SetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_SetConfidenceImage)
    SetInput3 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_SetInput3)
    GetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_GetConfidenceImage)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_GetNumberOfHistogramBins)
    SetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_SetWienerFilterNoise)
    GetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_GetWienerFilterNoise)
    SetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_SetBiasFieldFullWidthAtHalfMaximum)
    GetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_GetBiasFieldFullWidthAtHalfMaximum)
    SetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_GetSplineOrder)
    SetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_SetNumberOfControlPoints)
    GetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_GetNumberOfControlPoints)
    SetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_SetNumberOfFittingLevels)
    GetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_GetNumberOfFittingLevels)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_GetMaximumNumberOfIterations)
    SetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_GetConvergenceThreshold)
    GetLogBiasFieldControlPointLattice = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_GetLogBiasFieldControlPointLattice)
    GetElapsedIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_GetElapsedIterations)
    GetCurrentConvergenceMeasurement = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_GetCurrentConvergenceMeasurement)
    GetCurrentLevel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_GetCurrentLevel)
    ReconstructBiasField = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_ReconstructBiasField)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2

        Create a new object of the class itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2 in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_swigregister(itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2)
itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2___New_orig__ = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2___New_orig__
itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUC2_cast


def itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_New():
    return itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2.New()

class itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2(itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_Superclass):
    r"""


    Implementation of the N4 bias field correction algorithm.

    The nonparametric nonuniform intensity normalization (N3) algorithm,
    as introduced by Sled et al. in 1998 is a method for correcting
    nonuniformity associated with MR images. The algorithm assumes a
    simple parametric model (Gaussian) for the bias field and does not
    require tissue class segmentation. In addition, there are only a
    couple of parameters to tune with the default values performing quite
    well. N3 has been publicly available as a set of perl scripts (http://
    www.bic.mni.mcgill.ca/ServicesSoftwareAdvancedImageProcessingTo
    ols/HomePage)

    The N4 algorithm, encapsulated with this class, is a variation of the
    original N3 algorithm with the additional benefits of an improved
    B-spline fitting routine which allows for multiple resolutions to be
    used during the correction process. We also modify the iterative
    update component of algorithm such that the residual bias field is
    continually updated

    Notes for the user: Since much of the image manipulation is done in
    the log space of the intensities, input images with negative and small
    values (< 1) can produce poor results.

    The original authors recommend performing the bias field correction on
    a downsampled version of the original image.

    A binary mask or a weighted image can be supplied. If a binary mask is
    specified, those voxels in the input image which correspond to the
    voxels in the mask image are used to estimate the bias field. If a
    UseMaskLabel value is set to false (the default), all non-zero voxels
    in the MaskImage will be masked; otherwise only voxels in the
    MaskImage that match the MaskLabel will be used. If a confidence image
    is specified, the input voxels are weighted in the b-spline fitting
    routine according to the confidence voxel values.

    The filter returns the corrected image. If the bias field is wanted,
    one can reconstruct it using the class
    itkBSplineControlPointImageFilter.

    The 'Z' parameter in Sled's 1998 paper is the square root of the class
    variable 'm_WienerFilterNoise'.

    The basic algorithm iterates between sharpening the intensity
    histogram of the corrected input image and spatially smoothing those
    results with a B-spline scalar field estimate of the bias field.

    Nicholas J. Tustison  Contributed by Nicholas J. Tustison, James C.
    Gee in the Insight Journal paper:https://hdl.handle.net/10380/3053

    REFERENCE  J.G. Sled, A.P. Zijdenbos and A.C. Evans. "A Nonparametric
    Method for Automatic Correction of Intensity Nonuniformity in  Data"
    IEEE Transactions on Medical Imaging, Vol 17, No 1. Feb 1998.

    N.J. Tustison, B.B. Avants, P.A. Cook, Y. Zheng, A. Egan, P.A.
    Yushkevich, and J.C. Gee. "N4ITK:  Improved N3 Bias Correction" IEEE
    Transactions on Medical Imaging, 29(6):1310-1320, June 2010. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_Clone)
    SetInput1 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_GetMaskImage)
    SetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_SetMaskLabel)
    GetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_GetMaskLabel)
    SetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_SetUseMaskLabel)
    GetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_GetUseMaskLabel)
    UseMaskLabelOn = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_UseMaskLabelOn)
    UseMaskLabelOff = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_UseMaskLabelOff)
    SetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_SetConfidenceImage)
    SetInput3 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_SetInput3)
    GetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_GetConfidenceImage)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_GetNumberOfHistogramBins)
    SetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_SetWienerFilterNoise)
    GetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_GetWienerFilterNoise)
    SetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_SetBiasFieldFullWidthAtHalfMaximum)
    GetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_GetBiasFieldFullWidthAtHalfMaximum)
    SetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_GetSplineOrder)
    SetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_SetNumberOfControlPoints)
    GetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_GetNumberOfControlPoints)
    SetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_SetNumberOfFittingLevels)
    GetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_GetNumberOfFittingLevels)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_GetMaximumNumberOfIterations)
    SetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_GetConvergenceThreshold)
    GetLogBiasFieldControlPointLattice = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_GetLogBiasFieldControlPointLattice)
    GetElapsedIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_GetElapsedIterations)
    GetCurrentConvergenceMeasurement = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_GetCurrentConvergenceMeasurement)
    GetCurrentLevel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_GetCurrentLevel)
    ReconstructBiasField = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_ReconstructBiasField)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2

        Create a new object of the class itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2 in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_swigregister(itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2)
itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2___New_orig__ = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2___New_orig__
itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS2IUC2IUS2_cast


def itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_New():
    return itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3.New()

class itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3(itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_Superclass):
    r"""


    Implementation of the N4 bias field correction algorithm.

    The nonparametric nonuniform intensity normalization (N3) algorithm,
    as introduced by Sled et al. in 1998 is a method for correcting
    nonuniformity associated with MR images. The algorithm assumes a
    simple parametric model (Gaussian) for the bias field and does not
    require tissue class segmentation. In addition, there are only a
    couple of parameters to tune with the default values performing quite
    well. N3 has been publicly available as a set of perl scripts (http://
    www.bic.mni.mcgill.ca/ServicesSoftwareAdvancedImageProcessingTo
    ols/HomePage)

    The N4 algorithm, encapsulated with this class, is a variation of the
    original N3 algorithm with the additional benefits of an improved
    B-spline fitting routine which allows for multiple resolutions to be
    used during the correction process. We also modify the iterative
    update component of algorithm such that the residual bias field is
    continually updated

    Notes for the user: Since much of the image manipulation is done in
    the log space of the intensities, input images with negative and small
    values (< 1) can produce poor results.

    The original authors recommend performing the bias field correction on
    a downsampled version of the original image.

    A binary mask or a weighted image can be supplied. If a binary mask is
    specified, those voxels in the input image which correspond to the
    voxels in the mask image are used to estimate the bias field. If a
    UseMaskLabel value is set to false (the default), all non-zero voxels
    in the MaskImage will be masked; otherwise only voxels in the
    MaskImage that match the MaskLabel will be used. If a confidence image
    is specified, the input voxels are weighted in the b-spline fitting
    routine according to the confidence voxel values.

    The filter returns the corrected image. If the bias field is wanted,
    one can reconstruct it using the class
    itkBSplineControlPointImageFilter.

    The 'Z' parameter in Sled's 1998 paper is the square root of the class
    variable 'm_WienerFilterNoise'.

    The basic algorithm iterates between sharpening the intensity
    histogram of the corrected input image and spatially smoothing those
    results with a B-spline scalar field estimate of the bias field.

    Nicholas J. Tustison  Contributed by Nicholas J. Tustison, James C.
    Gee in the Insight Journal paper:https://hdl.handle.net/10380/3053

    REFERENCE  J.G. Sled, A.P. Zijdenbos and A.C. Evans. "A Nonparametric
    Method for Automatic Correction of Intensity Nonuniformity in  Data"
    IEEE Transactions on Medical Imaging, Vol 17, No 1. Feb 1998.

    N.J. Tustison, B.B. Avants, P.A. Cook, Y. Zheng, A. Egan, P.A.
    Yushkevich, and J.C. Gee. "N4ITK:  Improved N3 Bias Correction" IEEE
    Transactions on Medical Imaging, 29(6):1310-1320, June 2010. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_Clone)
    SetInput1 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_GetMaskImage)
    SetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_SetMaskLabel)
    GetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_GetMaskLabel)
    SetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_SetUseMaskLabel)
    GetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_GetUseMaskLabel)
    UseMaskLabelOn = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_UseMaskLabelOn)
    UseMaskLabelOff = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_UseMaskLabelOff)
    SetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_SetConfidenceImage)
    SetInput3 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_SetInput3)
    GetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_GetConfidenceImage)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_GetNumberOfHistogramBins)
    SetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_SetWienerFilterNoise)
    GetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_GetWienerFilterNoise)
    SetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_SetBiasFieldFullWidthAtHalfMaximum)
    GetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_GetBiasFieldFullWidthAtHalfMaximum)
    SetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_GetSplineOrder)
    SetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_SetNumberOfControlPoints)
    GetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_GetNumberOfControlPoints)
    SetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_SetNumberOfFittingLevels)
    GetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_GetNumberOfFittingLevels)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_GetMaximumNumberOfIterations)
    SetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_GetConvergenceThreshold)
    GetLogBiasFieldControlPointLattice = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_GetLogBiasFieldControlPointLattice)
    GetElapsedIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_GetElapsedIterations)
    GetCurrentConvergenceMeasurement = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_GetCurrentConvergenceMeasurement)
    GetCurrentLevel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_GetCurrentLevel)
    ReconstructBiasField = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_ReconstructBiasField)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3

        Create a new object of the class itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3 in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_swigregister(itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3)
itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3___New_orig__ = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3___New_orig__
itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ID3_cast


def itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_New():
    return itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3.New()

class itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3(itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_Superclass):
    r"""


    Implementation of the N4 bias field correction algorithm.

    The nonparametric nonuniform intensity normalization (N3) algorithm,
    as introduced by Sled et al. in 1998 is a method for correcting
    nonuniformity associated with MR images. The algorithm assumes a
    simple parametric model (Gaussian) for the bias field and does not
    require tissue class segmentation. In addition, there are only a
    couple of parameters to tune with the default values performing quite
    well. N3 has been publicly available as a set of perl scripts (http://
    www.bic.mni.mcgill.ca/ServicesSoftwareAdvancedImageProcessingTo
    ols/HomePage)

    The N4 algorithm, encapsulated with this class, is a variation of the
    original N3 algorithm with the additional benefits of an improved
    B-spline fitting routine which allows for multiple resolutions to be
    used during the correction process. We also modify the iterative
    update component of algorithm such that the residual bias field is
    continually updated

    Notes for the user: Since much of the image manipulation is done in
    the log space of the intensities, input images with negative and small
    values (< 1) can produce poor results.

    The original authors recommend performing the bias field correction on
    a downsampled version of the original image.

    A binary mask or a weighted image can be supplied. If a binary mask is
    specified, those voxels in the input image which correspond to the
    voxels in the mask image are used to estimate the bias field. If a
    UseMaskLabel value is set to false (the default), all non-zero voxels
    in the MaskImage will be masked; otherwise only voxels in the
    MaskImage that match the MaskLabel will be used. If a confidence image
    is specified, the input voxels are weighted in the b-spline fitting
    routine according to the confidence voxel values.

    The filter returns the corrected image. If the bias field is wanted,
    one can reconstruct it using the class
    itkBSplineControlPointImageFilter.

    The 'Z' parameter in Sled's 1998 paper is the square root of the class
    variable 'm_WienerFilterNoise'.

    The basic algorithm iterates between sharpening the intensity
    histogram of the corrected input image and spatially smoothing those
    results with a B-spline scalar field estimate of the bias field.

    Nicholas J. Tustison  Contributed by Nicholas J. Tustison, James C.
    Gee in the Insight Journal paper:https://hdl.handle.net/10380/3053

    REFERENCE  J.G. Sled, A.P. Zijdenbos and A.C. Evans. "A Nonparametric
    Method for Automatic Correction of Intensity Nonuniformity in  Data"
    IEEE Transactions on Medical Imaging, Vol 17, No 1. Feb 1998.

    N.J. Tustison, B.B. Avants, P.A. Cook, Y. Zheng, A. Egan, P.A.
    Yushkevich, and J.C. Gee. "N4ITK:  Improved N3 Bias Correction" IEEE
    Transactions on Medical Imaging, 29(6):1310-1320, June 2010. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_Clone)
    SetInput1 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_GetMaskImage)
    SetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_SetMaskLabel)
    GetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_GetMaskLabel)
    SetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_SetUseMaskLabel)
    GetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_GetUseMaskLabel)
    UseMaskLabelOn = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_UseMaskLabelOn)
    UseMaskLabelOff = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_UseMaskLabelOff)
    SetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_SetConfidenceImage)
    SetInput3 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_SetInput3)
    GetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_GetConfidenceImage)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_GetNumberOfHistogramBins)
    SetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_SetWienerFilterNoise)
    GetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_GetWienerFilterNoise)
    SetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_SetBiasFieldFullWidthAtHalfMaximum)
    GetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_GetBiasFieldFullWidthAtHalfMaximum)
    SetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_GetSplineOrder)
    SetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_SetNumberOfControlPoints)
    GetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_GetNumberOfControlPoints)
    SetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_SetNumberOfFittingLevels)
    GetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_GetNumberOfFittingLevels)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_GetMaximumNumberOfIterations)
    SetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_GetConvergenceThreshold)
    GetLogBiasFieldControlPointLattice = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_GetLogBiasFieldControlPointLattice)
    GetElapsedIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_GetElapsedIterations)
    GetCurrentConvergenceMeasurement = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_GetCurrentConvergenceMeasurement)
    GetCurrentLevel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_GetCurrentLevel)
    ReconstructBiasField = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_ReconstructBiasField)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3

        Create a new object of the class itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3 in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_swigregister(itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3)
itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3___New_orig__ = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3___New_orig__
itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IF3_cast


def itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_New():
    return itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3.New()

class itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3(itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_Superclass):
    r"""


    Implementation of the N4 bias field correction algorithm.

    The nonparametric nonuniform intensity normalization (N3) algorithm,
    as introduced by Sled et al. in 1998 is a method for correcting
    nonuniformity associated with MR images. The algorithm assumes a
    simple parametric model (Gaussian) for the bias field and does not
    require tissue class segmentation. In addition, there are only a
    couple of parameters to tune with the default values performing quite
    well. N3 has been publicly available as a set of perl scripts (http://
    www.bic.mni.mcgill.ca/ServicesSoftwareAdvancedImageProcessingTo
    ols/HomePage)

    The N4 algorithm, encapsulated with this class, is a variation of the
    original N3 algorithm with the additional benefits of an improved
    B-spline fitting routine which allows for multiple resolutions to be
    used during the correction process. We also modify the iterative
    update component of algorithm such that the residual bias field is
    continually updated

    Notes for the user: Since much of the image manipulation is done in
    the log space of the intensities, input images with negative and small
    values (< 1) can produce poor results.

    The original authors recommend performing the bias field correction on
    a downsampled version of the original image.

    A binary mask or a weighted image can be supplied. If a binary mask is
    specified, those voxels in the input image which correspond to the
    voxels in the mask image are used to estimate the bias field. If a
    UseMaskLabel value is set to false (the default), all non-zero voxels
    in the MaskImage will be masked; otherwise only voxels in the
    MaskImage that match the MaskLabel will be used. If a confidence image
    is specified, the input voxels are weighted in the b-spline fitting
    routine according to the confidence voxel values.

    The filter returns the corrected image. If the bias field is wanted,
    one can reconstruct it using the class
    itkBSplineControlPointImageFilter.

    The 'Z' parameter in Sled's 1998 paper is the square root of the class
    variable 'm_WienerFilterNoise'.

    The basic algorithm iterates between sharpening the intensity
    histogram of the corrected input image and spatially smoothing those
    results with a B-spline scalar field estimate of the bias field.

    Nicholas J. Tustison  Contributed by Nicholas J. Tustison, James C.
    Gee in the Insight Journal paper:https://hdl.handle.net/10380/3053

    REFERENCE  J.G. Sled, A.P. Zijdenbos and A.C. Evans. "A Nonparametric
    Method for Automatic Correction of Intensity Nonuniformity in  Data"
    IEEE Transactions on Medical Imaging, Vol 17, No 1. Feb 1998.

    N.J. Tustison, B.B. Avants, P.A. Cook, Y. Zheng, A. Egan, P.A.
    Yushkevich, and J.C. Gee. "N4ITK:  Improved N3 Bias Correction" IEEE
    Transactions on Medical Imaging, 29(6):1310-1320, June 2010. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_Clone)
    SetInput1 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_GetMaskImage)
    SetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_SetMaskLabel)
    GetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_GetMaskLabel)
    SetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_SetUseMaskLabel)
    GetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_GetUseMaskLabel)
    UseMaskLabelOn = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_UseMaskLabelOn)
    UseMaskLabelOff = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_UseMaskLabelOff)
    SetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_SetConfidenceImage)
    SetInput3 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_SetInput3)
    GetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_GetConfidenceImage)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_GetNumberOfHistogramBins)
    SetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_SetWienerFilterNoise)
    GetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_GetWienerFilterNoise)
    SetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_SetBiasFieldFullWidthAtHalfMaximum)
    GetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_GetBiasFieldFullWidthAtHalfMaximum)
    SetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_GetSplineOrder)
    SetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_SetNumberOfControlPoints)
    GetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_GetNumberOfControlPoints)
    SetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_SetNumberOfFittingLevels)
    GetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_GetNumberOfFittingLevels)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_GetMaximumNumberOfIterations)
    SetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_GetConvergenceThreshold)
    GetLogBiasFieldControlPointLattice = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_GetLogBiasFieldControlPointLattice)
    GetElapsedIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_GetElapsedIterations)
    GetCurrentConvergenceMeasurement = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_GetCurrentConvergenceMeasurement)
    GetCurrentLevel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_GetCurrentLevel)
    ReconstructBiasField = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_ReconstructBiasField)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3

        Create a new object of the class itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3 in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_swigregister(itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3)
itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3___New_orig__ = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3___New_orig__
itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3ISS3_cast


def itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_New():
    return itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3.New()

class itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3(itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_Superclass):
    r"""


    Implementation of the N4 bias field correction algorithm.

    The nonparametric nonuniform intensity normalization (N3) algorithm,
    as introduced by Sled et al. in 1998 is a method for correcting
    nonuniformity associated with MR images. The algorithm assumes a
    simple parametric model (Gaussian) for the bias field and does not
    require tissue class segmentation. In addition, there are only a
    couple of parameters to tune with the default values performing quite
    well. N3 has been publicly available as a set of perl scripts (http://
    www.bic.mni.mcgill.ca/ServicesSoftwareAdvancedImageProcessingTo
    ols/HomePage)

    The N4 algorithm, encapsulated with this class, is a variation of the
    original N3 algorithm with the additional benefits of an improved
    B-spline fitting routine which allows for multiple resolutions to be
    used during the correction process. We also modify the iterative
    update component of algorithm such that the residual bias field is
    continually updated

    Notes for the user: Since much of the image manipulation is done in
    the log space of the intensities, input images with negative and small
    values (< 1) can produce poor results.

    The original authors recommend performing the bias field correction on
    a downsampled version of the original image.

    A binary mask or a weighted image can be supplied. If a binary mask is
    specified, those voxels in the input image which correspond to the
    voxels in the mask image are used to estimate the bias field. If a
    UseMaskLabel value is set to false (the default), all non-zero voxels
    in the MaskImage will be masked; otherwise only voxels in the
    MaskImage that match the MaskLabel will be used. If a confidence image
    is specified, the input voxels are weighted in the b-spline fitting
    routine according to the confidence voxel values.

    The filter returns the corrected image. If the bias field is wanted,
    one can reconstruct it using the class
    itkBSplineControlPointImageFilter.

    The 'Z' parameter in Sled's 1998 paper is the square root of the class
    variable 'm_WienerFilterNoise'.

    The basic algorithm iterates between sharpening the intensity
    histogram of the corrected input image and spatially smoothing those
    results with a B-spline scalar field estimate of the bias field.

    Nicholas J. Tustison  Contributed by Nicholas J. Tustison, James C.
    Gee in the Insight Journal paper:https://hdl.handle.net/10380/3053

    REFERENCE  J.G. Sled, A.P. Zijdenbos and A.C. Evans. "A Nonparametric
    Method for Automatic Correction of Intensity Nonuniformity in  Data"
    IEEE Transactions on Medical Imaging, Vol 17, No 1. Feb 1998.

    N.J. Tustison, B.B. Avants, P.A. Cook, Y. Zheng, A. Egan, P.A.
    Yushkevich, and J.C. Gee. "N4ITK:  Improved N3 Bias Correction" IEEE
    Transactions on Medical Imaging, 29(6):1310-1320, June 2010. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_Clone)
    SetInput1 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_GetMaskImage)
    SetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_SetMaskLabel)
    GetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_GetMaskLabel)
    SetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_SetUseMaskLabel)
    GetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_GetUseMaskLabel)
    UseMaskLabelOn = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_UseMaskLabelOn)
    UseMaskLabelOff = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_UseMaskLabelOff)
    SetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_SetConfidenceImage)
    SetInput3 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_SetInput3)
    GetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_GetConfidenceImage)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_GetNumberOfHistogramBins)
    SetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_SetWienerFilterNoise)
    GetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_GetWienerFilterNoise)
    SetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_SetBiasFieldFullWidthAtHalfMaximum)
    GetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_GetBiasFieldFullWidthAtHalfMaximum)
    SetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_GetSplineOrder)
    SetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_SetNumberOfControlPoints)
    GetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_GetNumberOfControlPoints)
    SetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_SetNumberOfFittingLevels)
    GetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_GetNumberOfFittingLevels)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_GetMaximumNumberOfIterations)
    SetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_GetConvergenceThreshold)
    GetLogBiasFieldControlPointLattice = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_GetLogBiasFieldControlPointLattice)
    GetElapsedIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_GetElapsedIterations)
    GetCurrentConvergenceMeasurement = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_GetCurrentConvergenceMeasurement)
    GetCurrentLevel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_GetCurrentLevel)
    ReconstructBiasField = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_ReconstructBiasField)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3

        Create a new object of the class itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3 in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_swigregister(itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3)
itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3___New_orig__ = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3___New_orig__
itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUC3_cast


def itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_New():
    return itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3.New()

class itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3(itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_Superclass):
    r"""


    Implementation of the N4 bias field correction algorithm.

    The nonparametric nonuniform intensity normalization (N3) algorithm,
    as introduced by Sled et al. in 1998 is a method for correcting
    nonuniformity associated with MR images. The algorithm assumes a
    simple parametric model (Gaussian) for the bias field and does not
    require tissue class segmentation. In addition, there are only a
    couple of parameters to tune with the default values performing quite
    well. N3 has been publicly available as a set of perl scripts (http://
    www.bic.mni.mcgill.ca/ServicesSoftwareAdvancedImageProcessingTo
    ols/HomePage)

    The N4 algorithm, encapsulated with this class, is a variation of the
    original N3 algorithm with the additional benefits of an improved
    B-spline fitting routine which allows for multiple resolutions to be
    used during the correction process. We also modify the iterative
    update component of algorithm such that the residual bias field is
    continually updated

    Notes for the user: Since much of the image manipulation is done in
    the log space of the intensities, input images with negative and small
    values (< 1) can produce poor results.

    The original authors recommend performing the bias field correction on
    a downsampled version of the original image.

    A binary mask or a weighted image can be supplied. If a binary mask is
    specified, those voxels in the input image which correspond to the
    voxels in the mask image are used to estimate the bias field. If a
    UseMaskLabel value is set to false (the default), all non-zero voxels
    in the MaskImage will be masked; otherwise only voxels in the
    MaskImage that match the MaskLabel will be used. If a confidence image
    is specified, the input voxels are weighted in the b-spline fitting
    routine according to the confidence voxel values.

    The filter returns the corrected image. If the bias field is wanted,
    one can reconstruct it using the class
    itkBSplineControlPointImageFilter.

    The 'Z' parameter in Sled's 1998 paper is the square root of the class
    variable 'm_WienerFilterNoise'.

    The basic algorithm iterates between sharpening the intensity
    histogram of the corrected input image and spatially smoothing those
    results with a B-spline scalar field estimate of the bias field.

    Nicholas J. Tustison  Contributed by Nicholas J. Tustison, James C.
    Gee in the Insight Journal paper:https://hdl.handle.net/10380/3053

    REFERENCE  J.G. Sled, A.P. Zijdenbos and A.C. Evans. "A Nonparametric
    Method for Automatic Correction of Intensity Nonuniformity in  Data"
    IEEE Transactions on Medical Imaging, Vol 17, No 1. Feb 1998.

    N.J. Tustison, B.B. Avants, P.A. Cook, Y. Zheng, A. Egan, P.A.
    Yushkevich, and J.C. Gee. "N4ITK:  Improved N3 Bias Correction" IEEE
    Transactions on Medical Imaging, 29(6):1310-1320, June 2010. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_Clone)
    SetInput1 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_SetInput1)
    SetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_SetMaskImage)
    SetInput2 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_SetInput2)
    GetMaskImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_GetMaskImage)
    SetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_SetMaskLabel)
    GetMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_GetMaskLabel)
    SetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_SetUseMaskLabel)
    GetUseMaskLabel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_GetUseMaskLabel)
    UseMaskLabelOn = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_UseMaskLabelOn)
    UseMaskLabelOff = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_UseMaskLabelOff)
    SetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_SetConfidenceImage)
    SetInput3 = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_SetInput3)
    GetConfidenceImage = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_GetConfidenceImage)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_GetNumberOfHistogramBins)
    SetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_SetWienerFilterNoise)
    GetWienerFilterNoise = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_GetWienerFilterNoise)
    SetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_SetBiasFieldFullWidthAtHalfMaximum)
    GetBiasFieldFullWidthAtHalfMaximum = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_GetBiasFieldFullWidthAtHalfMaximum)
    SetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_GetSplineOrder)
    SetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_SetNumberOfControlPoints)
    GetNumberOfControlPoints = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_GetNumberOfControlPoints)
    SetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_SetNumberOfFittingLevels)
    GetNumberOfFittingLevels = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_GetNumberOfFittingLevels)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_GetMaximumNumberOfIterations)
    SetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_GetConvergenceThreshold)
    GetLogBiasFieldControlPointLattice = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_GetLogBiasFieldControlPointLattice)
    GetElapsedIterations = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_GetElapsedIterations)
    GetCurrentConvergenceMeasurement = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_GetCurrentConvergenceMeasurement)
    GetCurrentLevel = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_GetCurrentLevel)
    ReconstructBiasField = _swig_new_instance_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_ReconstructBiasField)
    __swig_destroy__ = _itkN4BiasFieldCorrectionImageFilterPython.delete_itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3
    cast = _swig_new_static_method(_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3

        Create a new object of the class itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3 in _itkN4BiasFieldCorrectionImageFilterPython:
_itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_swigregister(itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3)
itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3___New_orig__ = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3___New_orig__
itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_cast = _itkN4BiasFieldCorrectionImageFilterPython.itkN4BiasFieldCorrectionImageFilterIUS3IUC3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def n4_bias_field_correction_image_filter(*args, **kwargs):
    """Procedural interface for N4BiasFieldCorrectionImageFilter"""
    import itk
    instance = itk.N4BiasFieldCorrectionImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def n4_bias_field_correction_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.N4BiasFieldCorrectionImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.N4BiasFieldCorrectionImageFilter.values()[0]
    else:
        filter_object = itk.N4BiasFieldCorrectionImageFilter

    n4_bias_field_correction_image_filter.__doc__ = filter_object.__doc__
    n4_bias_field_correction_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    n4_bias_field_correction_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.N4BiasFieldCorrectionImageFilter, itkTemplate.itkTemplate):
        n4_bias_field_correction_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        n4_bias_field_correction_image_filter.__doc__ += "\n"
        n4_bias_field_correction_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        n4_bias_field_correction_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])
import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def image_to_image_filter(*args, **kwargs):
    """Procedural interface for ImageToImageFilter"""
    import itk
    instance = itk.ImageToImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def image_to_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ImageToImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.ImageToImageFilter.values()[0]
    else:
        filter_object = itk.ImageToImageFilter

    image_to_image_filter.__doc__ = filter_object.__doc__
    image_to_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    image_to_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.ImageToImageFilter, itkTemplate.itkTemplate):
        image_to_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        image_to_image_filter.__doc__ += "\n"
        image_to_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        image_to_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



