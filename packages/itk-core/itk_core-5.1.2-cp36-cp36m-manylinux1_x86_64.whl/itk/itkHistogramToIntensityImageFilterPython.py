# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKStatisticsPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkHistogramToIntensityImageFilterPython
else:
    import _itkHistogramToIntensityImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkHistogramToIntensityImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkHistogramToIntensityImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkHistogramPython
import itk.itkArrayPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkSamplePython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.ITKCommonBasePython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImagePython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkImageSourceCommonPython

def itkHistogramToIntensityImageFilterHDID2_Superclass_New():
    return itkHistogramToIntensityImageFilterHDID2_Superclass.New()

class itkHistogramToIntensityImageFilterHDID2_Superclass(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkHistogramToIntensityImageFilterHDID2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID2_Superclass_Clone)
    SetInput = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID2_Superclass_GetInput)
    SetFunctor = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID2_Superclass_SetFunctor)
    GetFunctor = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID2_Superclass_GetFunctor)
    SetTotalFrequency = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID2_Superclass_SetTotalFrequency)
    __swig_destroy__ = _itkHistogramToIntensityImageFilterPython.delete_itkHistogramToIntensityImageFilterHDID2_Superclass
    cast = _swig_new_static_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToIntensityImageFilterHDID2_Superclass

        Create a new object of the class itkHistogramToIntensityImageFilterHDID2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToIntensityImageFilterHDID2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToIntensityImageFilterHDID2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToIntensityImageFilterHDID2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToIntensityImageFilterHDID2_Superclass in _itkHistogramToIntensityImageFilterPython:
_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID2_Superclass_swigregister(itkHistogramToIntensityImageFilterHDID2_Superclass)
itkHistogramToIntensityImageFilterHDID2_Superclass___New_orig__ = _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID2_Superclass___New_orig__
itkHistogramToIntensityImageFilterHDID2_Superclass_cast = _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID2_Superclass_cast


def itkHistogramToIntensityImageFilterHDID3_Superclass_New():
    return itkHistogramToIntensityImageFilterHDID3_Superclass.New()

class itkHistogramToIntensityImageFilterHDID3_Superclass(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkHistogramToIntensityImageFilterHDID3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID3_Superclass_Clone)
    SetInput = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID3_Superclass_GetInput)
    SetFunctor = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID3_Superclass_SetFunctor)
    GetFunctor = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID3_Superclass_GetFunctor)
    SetTotalFrequency = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID3_Superclass_SetTotalFrequency)
    __swig_destroy__ = _itkHistogramToIntensityImageFilterPython.delete_itkHistogramToIntensityImageFilterHDID3_Superclass
    cast = _swig_new_static_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToIntensityImageFilterHDID3_Superclass

        Create a new object of the class itkHistogramToIntensityImageFilterHDID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToIntensityImageFilterHDID3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToIntensityImageFilterHDID3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToIntensityImageFilterHDID3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToIntensityImageFilterHDID3_Superclass in _itkHistogramToIntensityImageFilterPython:
_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID3_Superclass_swigregister(itkHistogramToIntensityImageFilterHDID3_Superclass)
itkHistogramToIntensityImageFilterHDID3_Superclass___New_orig__ = _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID3_Superclass___New_orig__
itkHistogramToIntensityImageFilterHDID3_Superclass_cast = _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID3_Superclass_cast


def itkHistogramToIntensityImageFilterHDIF2_Superclass_New():
    return itkHistogramToIntensityImageFilterHDIF2_Superclass.New()

class itkHistogramToIntensityImageFilterHDIF2_Superclass(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkHistogramToIntensityImageFilterHDIF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2_Superclass_Clone)
    SetInput = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2_Superclass_GetInput)
    SetFunctor = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2_Superclass_SetFunctor)
    GetFunctor = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2_Superclass_GetFunctor)
    SetTotalFrequency = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2_Superclass_SetTotalFrequency)
    __swig_destroy__ = _itkHistogramToIntensityImageFilterPython.delete_itkHistogramToIntensityImageFilterHDIF2_Superclass
    cast = _swig_new_static_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToIntensityImageFilterHDIF2_Superclass

        Create a new object of the class itkHistogramToIntensityImageFilterHDIF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToIntensityImageFilterHDIF2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToIntensityImageFilterHDIF2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToIntensityImageFilterHDIF2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToIntensityImageFilterHDIF2_Superclass in _itkHistogramToIntensityImageFilterPython:
_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2_Superclass_swigregister(itkHistogramToIntensityImageFilterHDIF2_Superclass)
itkHistogramToIntensityImageFilterHDIF2_Superclass___New_orig__ = _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2_Superclass___New_orig__
itkHistogramToIntensityImageFilterHDIF2_Superclass_cast = _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2_Superclass_cast


def itkHistogramToIntensityImageFilterHDIF3_Superclass_New():
    return itkHistogramToIntensityImageFilterHDIF3_Superclass.New()

class itkHistogramToIntensityImageFilterHDIF3_Superclass(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkHistogramToIntensityImageFilterHDIF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3_Superclass_Clone)
    SetInput = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3_Superclass_GetInput)
    SetFunctor = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3_Superclass_SetFunctor)
    GetFunctor = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3_Superclass_GetFunctor)
    SetTotalFrequency = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3_Superclass_SetTotalFrequency)
    __swig_destroy__ = _itkHistogramToIntensityImageFilterPython.delete_itkHistogramToIntensityImageFilterHDIF3_Superclass
    cast = _swig_new_static_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToIntensityImageFilterHDIF3_Superclass

        Create a new object of the class itkHistogramToIntensityImageFilterHDIF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToIntensityImageFilterHDIF3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToIntensityImageFilterHDIF3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToIntensityImageFilterHDIF3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToIntensityImageFilterHDIF3_Superclass in _itkHistogramToIntensityImageFilterPython:
_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3_Superclass_swigregister(itkHistogramToIntensityImageFilterHDIF3_Superclass)
itkHistogramToIntensityImageFilterHDIF3_Superclass___New_orig__ = _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3_Superclass___New_orig__
itkHistogramToIntensityImageFilterHDIF3_Superclass_cast = _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3_Superclass_cast


def itkHistogramToIntensityImageFilterHFID2_Superclass_New():
    return itkHistogramToIntensityImageFilterHFID2_Superclass.New()

class itkHistogramToIntensityImageFilterHFID2_Superclass(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkHistogramToIntensityImageFilterHFID2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID2_Superclass_Clone)
    SetInput = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID2_Superclass_GetInput)
    SetFunctor = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID2_Superclass_SetFunctor)
    GetFunctor = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID2_Superclass_GetFunctor)
    SetTotalFrequency = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID2_Superclass_SetTotalFrequency)
    __swig_destroy__ = _itkHistogramToIntensityImageFilterPython.delete_itkHistogramToIntensityImageFilterHFID2_Superclass
    cast = _swig_new_static_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToIntensityImageFilterHFID2_Superclass

        Create a new object of the class itkHistogramToIntensityImageFilterHFID2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToIntensityImageFilterHFID2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToIntensityImageFilterHFID2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToIntensityImageFilterHFID2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToIntensityImageFilterHFID2_Superclass in _itkHistogramToIntensityImageFilterPython:
_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID2_Superclass_swigregister(itkHistogramToIntensityImageFilterHFID2_Superclass)
itkHistogramToIntensityImageFilterHFID2_Superclass___New_orig__ = _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID2_Superclass___New_orig__
itkHistogramToIntensityImageFilterHFID2_Superclass_cast = _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID2_Superclass_cast


def itkHistogramToIntensityImageFilterHFID3_Superclass_New():
    return itkHistogramToIntensityImageFilterHFID3_Superclass.New()

class itkHistogramToIntensityImageFilterHFID3_Superclass(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkHistogramToIntensityImageFilterHFID3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID3_Superclass_Clone)
    SetInput = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID3_Superclass_GetInput)
    SetFunctor = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID3_Superclass_SetFunctor)
    GetFunctor = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID3_Superclass_GetFunctor)
    SetTotalFrequency = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID3_Superclass_SetTotalFrequency)
    __swig_destroy__ = _itkHistogramToIntensityImageFilterPython.delete_itkHistogramToIntensityImageFilterHFID3_Superclass
    cast = _swig_new_static_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToIntensityImageFilterHFID3_Superclass

        Create a new object of the class itkHistogramToIntensityImageFilterHFID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToIntensityImageFilterHFID3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToIntensityImageFilterHFID3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToIntensityImageFilterHFID3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToIntensityImageFilterHFID3_Superclass in _itkHistogramToIntensityImageFilterPython:
_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID3_Superclass_swigregister(itkHistogramToIntensityImageFilterHFID3_Superclass)
itkHistogramToIntensityImageFilterHFID3_Superclass___New_orig__ = _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID3_Superclass___New_orig__
itkHistogramToIntensityImageFilterHFID3_Superclass_cast = _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID3_Superclass_cast


def itkHistogramToIntensityImageFilterHFIF2_Superclass_New():
    return itkHistogramToIntensityImageFilterHFIF2_Superclass.New()

class itkHistogramToIntensityImageFilterHFIF2_Superclass(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkHistogramToIntensityImageFilterHFIF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2_Superclass_Clone)
    SetInput = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2_Superclass_GetInput)
    SetFunctor = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2_Superclass_SetFunctor)
    GetFunctor = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2_Superclass_GetFunctor)
    SetTotalFrequency = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2_Superclass_SetTotalFrequency)
    __swig_destroy__ = _itkHistogramToIntensityImageFilterPython.delete_itkHistogramToIntensityImageFilterHFIF2_Superclass
    cast = _swig_new_static_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToIntensityImageFilterHFIF2_Superclass

        Create a new object of the class itkHistogramToIntensityImageFilterHFIF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToIntensityImageFilterHFIF2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToIntensityImageFilterHFIF2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToIntensityImageFilterHFIF2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToIntensityImageFilterHFIF2_Superclass in _itkHistogramToIntensityImageFilterPython:
_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2_Superclass_swigregister(itkHistogramToIntensityImageFilterHFIF2_Superclass)
itkHistogramToIntensityImageFilterHFIF2_Superclass___New_orig__ = _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2_Superclass___New_orig__
itkHistogramToIntensityImageFilterHFIF2_Superclass_cast = _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2_Superclass_cast


def itkHistogramToIntensityImageFilterHFIF3_Superclass_New():
    return itkHistogramToIntensityImageFilterHFIF3_Superclass.New()

class itkHistogramToIntensityImageFilterHFIF3_Superclass(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkHistogramToIntensityImageFilterHFIF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3_Superclass_Clone)
    SetInput = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3_Superclass_GetInput)
    SetFunctor = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3_Superclass_SetFunctor)
    GetFunctor = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3_Superclass_GetFunctor)
    SetTotalFrequency = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3_Superclass_SetTotalFrequency)
    __swig_destroy__ = _itkHistogramToIntensityImageFilterPython.delete_itkHistogramToIntensityImageFilterHFIF3_Superclass
    cast = _swig_new_static_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToIntensityImageFilterHFIF3_Superclass

        Create a new object of the class itkHistogramToIntensityImageFilterHFIF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToIntensityImageFilterHFIF3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToIntensityImageFilterHFIF3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToIntensityImageFilterHFIF3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToIntensityImageFilterHFIF3_Superclass in _itkHistogramToIntensityImageFilterPython:
_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3_Superclass_swigregister(itkHistogramToIntensityImageFilterHFIF3_Superclass)
itkHistogramToIntensityImageFilterHFIF3_Superclass___New_orig__ = _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3_Superclass___New_orig__
itkHistogramToIntensityImageFilterHFIF3_Superclass_cast = _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3_Superclass_cast


def itkHistogramToIntensityImageFilterHDID2_New():
    return itkHistogramToIntensityImageFilterHDID2.New()

class itkHistogramToIntensityImageFilterHDID2(itkHistogramToIntensityImageFilterHDID2_Superclass):
    r"""


    The class takes a histogram as an input and produces an image as the
    output. A pixel, at position I, in the output image is given by.

    \\[ f(I) = q_I \\] where $q_I$ is the frequency of measurement
    vector, I.

    See:   HistogramToProbabilityImageFilter,
    HistogramToLogProbabilityImageFilter, HistogramToImageFilter,
    HistogramToEntropyImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID2___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID2_Clone)
    __swig_destroy__ = _itkHistogramToIntensityImageFilterPython.delete_itkHistogramToIntensityImageFilterHDID2
    cast = _swig_new_static_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID2_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToIntensityImageFilterHDID2

        Create a new object of the class itkHistogramToIntensityImageFilterHDID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToIntensityImageFilterHDID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToIntensityImageFilterHDID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToIntensityImageFilterHDID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToIntensityImageFilterHDID2 in _itkHistogramToIntensityImageFilterPython:
_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID2_swigregister(itkHistogramToIntensityImageFilterHDID2)
itkHistogramToIntensityImageFilterHDID2___New_orig__ = _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID2___New_orig__
itkHistogramToIntensityImageFilterHDID2_cast = _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID2_cast


def itkHistogramToIntensityImageFilterHDID3_New():
    return itkHistogramToIntensityImageFilterHDID3.New()

class itkHistogramToIntensityImageFilterHDID3(itkHistogramToIntensityImageFilterHDID3_Superclass):
    r"""


    The class takes a histogram as an input and produces an image as the
    output. A pixel, at position I, in the output image is given by.

    \\[ f(I) = q_I \\] where $q_I$ is the frequency of measurement
    vector, I.

    See:   HistogramToProbabilityImageFilter,
    HistogramToLogProbabilityImageFilter, HistogramToImageFilter,
    HistogramToEntropyImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID3___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID3_Clone)
    __swig_destroy__ = _itkHistogramToIntensityImageFilterPython.delete_itkHistogramToIntensityImageFilterHDID3
    cast = _swig_new_static_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID3_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToIntensityImageFilterHDID3

        Create a new object of the class itkHistogramToIntensityImageFilterHDID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToIntensityImageFilterHDID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToIntensityImageFilterHDID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToIntensityImageFilterHDID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToIntensityImageFilterHDID3 in _itkHistogramToIntensityImageFilterPython:
_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID3_swigregister(itkHistogramToIntensityImageFilterHDID3)
itkHistogramToIntensityImageFilterHDID3___New_orig__ = _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID3___New_orig__
itkHistogramToIntensityImageFilterHDID3_cast = _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID3_cast


def itkHistogramToIntensityImageFilterHDIF2_New():
    return itkHistogramToIntensityImageFilterHDIF2.New()

class itkHistogramToIntensityImageFilterHDIF2(itkHistogramToIntensityImageFilterHDIF2_Superclass):
    r"""


    The class takes a histogram as an input and produces an image as the
    output. A pixel, at position I, in the output image is given by.

    \\[ f(I) = q_I \\] where $q_I$ is the frequency of measurement
    vector, I.

    See:   HistogramToProbabilityImageFilter,
    HistogramToLogProbabilityImageFilter, HistogramToImageFilter,
    HistogramToEntropyImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2_Clone)
    __swig_destroy__ = _itkHistogramToIntensityImageFilterPython.delete_itkHistogramToIntensityImageFilterHDIF2
    cast = _swig_new_static_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToIntensityImageFilterHDIF2

        Create a new object of the class itkHistogramToIntensityImageFilterHDIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToIntensityImageFilterHDIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToIntensityImageFilterHDIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToIntensityImageFilterHDIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToIntensityImageFilterHDIF2 in _itkHistogramToIntensityImageFilterPython:
_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2_swigregister(itkHistogramToIntensityImageFilterHDIF2)
itkHistogramToIntensityImageFilterHDIF2___New_orig__ = _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2___New_orig__
itkHistogramToIntensityImageFilterHDIF2_cast = _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2_cast


def itkHistogramToIntensityImageFilterHDIF3_New():
    return itkHistogramToIntensityImageFilterHDIF3.New()

class itkHistogramToIntensityImageFilterHDIF3(itkHistogramToIntensityImageFilterHDIF3_Superclass):
    r"""


    The class takes a histogram as an input and produces an image as the
    output. A pixel, at position I, in the output image is given by.

    \\[ f(I) = q_I \\] where $q_I$ is the frequency of measurement
    vector, I.

    See:   HistogramToProbabilityImageFilter,
    HistogramToLogProbabilityImageFilter, HistogramToImageFilter,
    HistogramToEntropyImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3_Clone)
    __swig_destroy__ = _itkHistogramToIntensityImageFilterPython.delete_itkHistogramToIntensityImageFilterHDIF3
    cast = _swig_new_static_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToIntensityImageFilterHDIF3

        Create a new object of the class itkHistogramToIntensityImageFilterHDIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToIntensityImageFilterHDIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToIntensityImageFilterHDIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToIntensityImageFilterHDIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToIntensityImageFilterHDIF3 in _itkHistogramToIntensityImageFilterPython:
_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3_swigregister(itkHistogramToIntensityImageFilterHDIF3)
itkHistogramToIntensityImageFilterHDIF3___New_orig__ = _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3___New_orig__
itkHistogramToIntensityImageFilterHDIF3_cast = _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3_cast


def itkHistogramToIntensityImageFilterHFID2_New():
    return itkHistogramToIntensityImageFilterHFID2.New()

class itkHistogramToIntensityImageFilterHFID2(itkHistogramToIntensityImageFilterHFID2_Superclass):
    r"""


    The class takes a histogram as an input and produces an image as the
    output. A pixel, at position I, in the output image is given by.

    \\[ f(I) = q_I \\] where $q_I$ is the frequency of measurement
    vector, I.

    See:   HistogramToProbabilityImageFilter,
    HistogramToLogProbabilityImageFilter, HistogramToImageFilter,
    HistogramToEntropyImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID2___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID2_Clone)
    __swig_destroy__ = _itkHistogramToIntensityImageFilterPython.delete_itkHistogramToIntensityImageFilterHFID2
    cast = _swig_new_static_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID2_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToIntensityImageFilterHFID2

        Create a new object of the class itkHistogramToIntensityImageFilterHFID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToIntensityImageFilterHFID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToIntensityImageFilterHFID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToIntensityImageFilterHFID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToIntensityImageFilterHFID2 in _itkHistogramToIntensityImageFilterPython:
_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID2_swigregister(itkHistogramToIntensityImageFilterHFID2)
itkHistogramToIntensityImageFilterHFID2___New_orig__ = _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID2___New_orig__
itkHistogramToIntensityImageFilterHFID2_cast = _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID2_cast


def itkHistogramToIntensityImageFilterHFID3_New():
    return itkHistogramToIntensityImageFilterHFID3.New()

class itkHistogramToIntensityImageFilterHFID3(itkHistogramToIntensityImageFilterHFID3_Superclass):
    r"""


    The class takes a histogram as an input and produces an image as the
    output. A pixel, at position I, in the output image is given by.

    \\[ f(I) = q_I \\] where $q_I$ is the frequency of measurement
    vector, I.

    See:   HistogramToProbabilityImageFilter,
    HistogramToLogProbabilityImageFilter, HistogramToImageFilter,
    HistogramToEntropyImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID3___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID3_Clone)
    __swig_destroy__ = _itkHistogramToIntensityImageFilterPython.delete_itkHistogramToIntensityImageFilterHFID3
    cast = _swig_new_static_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID3_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToIntensityImageFilterHFID3

        Create a new object of the class itkHistogramToIntensityImageFilterHFID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToIntensityImageFilterHFID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToIntensityImageFilterHFID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToIntensityImageFilterHFID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToIntensityImageFilterHFID3 in _itkHistogramToIntensityImageFilterPython:
_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID3_swigregister(itkHistogramToIntensityImageFilterHFID3)
itkHistogramToIntensityImageFilterHFID3___New_orig__ = _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID3___New_orig__
itkHistogramToIntensityImageFilterHFID3_cast = _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID3_cast


def itkHistogramToIntensityImageFilterHFIF2_New():
    return itkHistogramToIntensityImageFilterHFIF2.New()

class itkHistogramToIntensityImageFilterHFIF2(itkHistogramToIntensityImageFilterHFIF2_Superclass):
    r"""


    The class takes a histogram as an input and produces an image as the
    output. A pixel, at position I, in the output image is given by.

    \\[ f(I) = q_I \\] where $q_I$ is the frequency of measurement
    vector, I.

    See:   HistogramToProbabilityImageFilter,
    HistogramToLogProbabilityImageFilter, HistogramToImageFilter,
    HistogramToEntropyImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2_Clone)
    __swig_destroy__ = _itkHistogramToIntensityImageFilterPython.delete_itkHistogramToIntensityImageFilterHFIF2
    cast = _swig_new_static_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToIntensityImageFilterHFIF2

        Create a new object of the class itkHistogramToIntensityImageFilterHFIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToIntensityImageFilterHFIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToIntensityImageFilterHFIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToIntensityImageFilterHFIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToIntensityImageFilterHFIF2 in _itkHistogramToIntensityImageFilterPython:
_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2_swigregister(itkHistogramToIntensityImageFilterHFIF2)
itkHistogramToIntensityImageFilterHFIF2___New_orig__ = _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2___New_orig__
itkHistogramToIntensityImageFilterHFIF2_cast = _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2_cast


def itkHistogramToIntensityImageFilterHFIF3_New():
    return itkHistogramToIntensityImageFilterHFIF3.New()

class itkHistogramToIntensityImageFilterHFIF3(itkHistogramToIntensityImageFilterHFIF3_Superclass):
    r"""


    The class takes a histogram as an input and produces an image as the
    output. A pixel, at position I, in the output image is given by.

    \\[ f(I) = q_I \\] where $q_I$ is the frequency of measurement
    vector, I.

    See:   HistogramToProbabilityImageFilter,
    HistogramToLogProbabilityImageFilter, HistogramToImageFilter,
    HistogramToEntropyImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3_Clone)
    __swig_destroy__ = _itkHistogramToIntensityImageFilterPython.delete_itkHistogramToIntensityImageFilterHFIF3
    cast = _swig_new_static_method(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToIntensityImageFilterHFIF3

        Create a new object of the class itkHistogramToIntensityImageFilterHFIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToIntensityImageFilterHFIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToIntensityImageFilterHFIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToIntensityImageFilterHFIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToIntensityImageFilterHFIF3 in _itkHistogramToIntensityImageFilterPython:
_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3_swigregister(itkHistogramToIntensityImageFilterHFIF3)
itkHistogramToIntensityImageFilterHFIF3___New_orig__ = _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3___New_orig__
itkHistogramToIntensityImageFilterHFIF3_cast = _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def histogram_to_image_filter(*args, **kwargs):
    """Procedural interface for HistogramToImageFilter"""
    import itk
    instance = itk.HistogramToImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def histogram_to_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.HistogramToImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.HistogramToImageFilter.values()[0]
    else:
        filter_object = itk.HistogramToImageFilter

    histogram_to_image_filter.__doc__ = filter_object.__doc__
    histogram_to_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    histogram_to_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.HistogramToImageFilter, itkTemplate.itkTemplate):
        histogram_to_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        histogram_to_image_filter.__doc__ += "\n"
        histogram_to_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        histogram_to_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])
import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def histogram_to_intensity_image_filter(*args, **kwargs):
    """Procedural interface for HistogramToIntensityImageFilter"""
    import itk
    instance = itk.HistogramToIntensityImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def histogram_to_intensity_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.HistogramToIntensityImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.HistogramToIntensityImageFilter.values()[0]
    else:
        filter_object = itk.HistogramToIntensityImageFilter

    histogram_to_intensity_image_filter.__doc__ = filter_object.__doc__
    histogram_to_intensity_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    histogram_to_intensity_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.HistogramToIntensityImageFilter, itkTemplate.itkTemplate):
        histogram_to_intensity_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        histogram_to_intensity_image_filter.__doc__ += "\n"
        histogram_to_intensity_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        histogram_to_intensity_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



