# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKPDEDeformableRegistrationPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkDemonsRegistrationFilterPython
else:
    import _itkDemonsRegistrationFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkDemonsRegistrationFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkDemonsRegistrationFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkPDEDeformableRegistrationFilterPython
import itk.itkImagePython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkRGBPixelPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImageRegionPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkDenseFiniteDifferenceImageFilterPython
import itk.itkFiniteDifferenceImageFilterPython
import itk.itkFiniteDifferenceFunctionPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterAPython

def itkDemonsRegistrationFilterID2ID2IVF22_New():
    return itkDemonsRegistrationFilterID2ID2IVF22.New()

class itkDemonsRegistrationFilterID2ID2IVF22(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID2ID2IVF22):
    r"""


    Deformably register two images using the demons algorithm.

    DemonsRegistrationFilter implements the demons deformable algorithm
    that register two images by computing the displacement field which
    will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF22_Clone)
    GetMetric = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF22_GetMetric)
    SetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF22_SetUseMovingImageGradient)
    GetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF22_GetUseMovingImageGradient)
    UseMovingImageGradientOn = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF22_UseMovingImageGradientOn)
    UseMovingImageGradientOff = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF22_UseMovingImageGradientOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF22_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF22_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterID2ID2IVF22
    cast = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF22_cast)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterID2ID2IVF22

        Create a new object of the class itkDemonsRegistrationFilterID2ID2IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterID2ID2IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterID2ID2IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterID2ID2IVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterID2ID2IVF22 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF22_swigregister(itkDemonsRegistrationFilterID2ID2IVF22)
itkDemonsRegistrationFilterID2ID2IVF22___New_orig__ = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF22___New_orig__
itkDemonsRegistrationFilterID2ID2IVF22_cast = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF22_cast


def itkDemonsRegistrationFilterID2ID2IVF32_New():
    return itkDemonsRegistrationFilterID2ID2IVF32.New()

class itkDemonsRegistrationFilterID2ID2IVF32(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID2ID2IVF32):
    r"""


    Deformably register two images using the demons algorithm.

    DemonsRegistrationFilter implements the demons deformable algorithm
    that register two images by computing the displacement field which
    will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF32___New_orig__)
    Clone = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF32_Clone)
    GetMetric = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF32_GetMetric)
    SetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF32_SetUseMovingImageGradient)
    GetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF32_GetUseMovingImageGradient)
    UseMovingImageGradientOn = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF32_UseMovingImageGradientOn)
    UseMovingImageGradientOff = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF32_UseMovingImageGradientOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF32_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF32_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterID2ID2IVF32
    cast = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF32_cast)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterID2ID2IVF32

        Create a new object of the class itkDemonsRegistrationFilterID2ID2IVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterID2ID2IVF32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterID2ID2IVF32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterID2ID2IVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterID2ID2IVF32 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF32_swigregister(itkDemonsRegistrationFilterID2ID2IVF32)
itkDemonsRegistrationFilterID2ID2IVF32___New_orig__ = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF32___New_orig__
itkDemonsRegistrationFilterID2ID2IVF32_cast = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF32_cast


def itkDemonsRegistrationFilterID2ID2IVF42_New():
    return itkDemonsRegistrationFilterID2ID2IVF42.New()

class itkDemonsRegistrationFilterID2ID2IVF42(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID2ID2IVF42):
    r"""


    Deformably register two images using the demons algorithm.

    DemonsRegistrationFilter implements the demons deformable algorithm
    that register two images by computing the displacement field which
    will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF42___New_orig__)
    Clone = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF42_Clone)
    GetMetric = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF42_GetMetric)
    SetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF42_SetUseMovingImageGradient)
    GetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF42_GetUseMovingImageGradient)
    UseMovingImageGradientOn = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF42_UseMovingImageGradientOn)
    UseMovingImageGradientOff = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF42_UseMovingImageGradientOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF42_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF42_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterID2ID2IVF42
    cast = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF42_cast)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterID2ID2IVF42

        Create a new object of the class itkDemonsRegistrationFilterID2ID2IVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterID2ID2IVF42.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterID2ID2IVF42.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterID2ID2IVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterID2ID2IVF42 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF42_swigregister(itkDemonsRegistrationFilterID2ID2IVF42)
itkDemonsRegistrationFilterID2ID2IVF42___New_orig__ = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF42___New_orig__
itkDemonsRegistrationFilterID2ID2IVF42_cast = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF42_cast


def itkDemonsRegistrationFilterID3ID3IVF23_New():
    return itkDemonsRegistrationFilterID3ID3IVF23.New()

class itkDemonsRegistrationFilterID3ID3IVF23(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID3ID3IVF23):
    r"""


    Deformably register two images using the demons algorithm.

    DemonsRegistrationFilter implements the demons deformable algorithm
    that register two images by computing the displacement field which
    will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF23___New_orig__)
    Clone = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF23_Clone)
    GetMetric = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF23_GetMetric)
    SetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF23_SetUseMovingImageGradient)
    GetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF23_GetUseMovingImageGradient)
    UseMovingImageGradientOn = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF23_UseMovingImageGradientOn)
    UseMovingImageGradientOff = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF23_UseMovingImageGradientOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF23_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF23_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterID3ID3IVF23
    cast = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF23_cast)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterID3ID3IVF23

        Create a new object of the class itkDemonsRegistrationFilterID3ID3IVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterID3ID3IVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterID3ID3IVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterID3ID3IVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterID3ID3IVF23 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF23_swigregister(itkDemonsRegistrationFilterID3ID3IVF23)
itkDemonsRegistrationFilterID3ID3IVF23___New_orig__ = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF23___New_orig__
itkDemonsRegistrationFilterID3ID3IVF23_cast = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF23_cast


def itkDemonsRegistrationFilterID3ID3IVF33_New():
    return itkDemonsRegistrationFilterID3ID3IVF33.New()

class itkDemonsRegistrationFilterID3ID3IVF33(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID3ID3IVF33):
    r"""


    Deformably register two images using the demons algorithm.

    DemonsRegistrationFilter implements the demons deformable algorithm
    that register two images by computing the displacement field which
    will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF33_Clone)
    GetMetric = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF33_GetMetric)
    SetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF33_SetUseMovingImageGradient)
    GetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF33_GetUseMovingImageGradient)
    UseMovingImageGradientOn = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF33_UseMovingImageGradientOn)
    UseMovingImageGradientOff = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF33_UseMovingImageGradientOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF33_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF33_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterID3ID3IVF33
    cast = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF33_cast)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterID3ID3IVF33

        Create a new object of the class itkDemonsRegistrationFilterID3ID3IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterID3ID3IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterID3ID3IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterID3ID3IVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterID3ID3IVF33 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF33_swigregister(itkDemonsRegistrationFilterID3ID3IVF33)
itkDemonsRegistrationFilterID3ID3IVF33___New_orig__ = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF33___New_orig__
itkDemonsRegistrationFilterID3ID3IVF33_cast = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF33_cast


def itkDemonsRegistrationFilterID3ID3IVF43_New():
    return itkDemonsRegistrationFilterID3ID3IVF43.New()

class itkDemonsRegistrationFilterID3ID3IVF43(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID3ID3IVF43):
    r"""


    Deformably register two images using the demons algorithm.

    DemonsRegistrationFilter implements the demons deformable algorithm
    that register two images by computing the displacement field which
    will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF43___New_orig__)
    Clone = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF43_Clone)
    GetMetric = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF43_GetMetric)
    SetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF43_SetUseMovingImageGradient)
    GetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF43_GetUseMovingImageGradient)
    UseMovingImageGradientOn = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF43_UseMovingImageGradientOn)
    UseMovingImageGradientOff = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF43_UseMovingImageGradientOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF43_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF43_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterID3ID3IVF43
    cast = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF43_cast)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterID3ID3IVF43

        Create a new object of the class itkDemonsRegistrationFilterID3ID3IVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterID3ID3IVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterID3ID3IVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterID3ID3IVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterID3ID3IVF43 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF43_swigregister(itkDemonsRegistrationFilterID3ID3IVF43)
itkDemonsRegistrationFilterID3ID3IVF43___New_orig__ = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF43___New_orig__
itkDemonsRegistrationFilterID3ID3IVF43_cast = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF43_cast


def itkDemonsRegistrationFilterIF2IF2IVF22_New():
    return itkDemonsRegistrationFilterIF2IF2IVF22.New()

class itkDemonsRegistrationFilterIF2IF2IVF22(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF2IF2IVF22):
    r"""


    Deformably register two images using the demons algorithm.

    DemonsRegistrationFilter implements the demons deformable algorithm
    that register two images by computing the displacement field which
    will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF22_Clone)
    GetMetric = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF22_GetMetric)
    SetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF22_SetUseMovingImageGradient)
    GetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF22_GetUseMovingImageGradient)
    UseMovingImageGradientOn = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF22_UseMovingImageGradientOn)
    UseMovingImageGradientOff = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF22_UseMovingImageGradientOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF22_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF22_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterIF2IF2IVF22
    cast = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF22_cast)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterIF2IF2IVF22

        Create a new object of the class itkDemonsRegistrationFilterIF2IF2IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterIF2IF2IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterIF2IF2IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterIF2IF2IVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterIF2IF2IVF22 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF22_swigregister(itkDemonsRegistrationFilterIF2IF2IVF22)
itkDemonsRegistrationFilterIF2IF2IVF22___New_orig__ = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF22___New_orig__
itkDemonsRegistrationFilterIF2IF2IVF22_cast = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF22_cast


def itkDemonsRegistrationFilterIF2IF2IVF32_New():
    return itkDemonsRegistrationFilterIF2IF2IVF32.New()

class itkDemonsRegistrationFilterIF2IF2IVF32(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF2IF2IVF32):
    r"""


    Deformably register two images using the demons algorithm.

    DemonsRegistrationFilter implements the demons deformable algorithm
    that register two images by computing the displacement field which
    will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF32___New_orig__)
    Clone = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF32_Clone)
    GetMetric = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF32_GetMetric)
    SetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF32_SetUseMovingImageGradient)
    GetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF32_GetUseMovingImageGradient)
    UseMovingImageGradientOn = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF32_UseMovingImageGradientOn)
    UseMovingImageGradientOff = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF32_UseMovingImageGradientOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF32_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF32_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterIF2IF2IVF32
    cast = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF32_cast)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterIF2IF2IVF32

        Create a new object of the class itkDemonsRegistrationFilterIF2IF2IVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterIF2IF2IVF32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterIF2IF2IVF32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterIF2IF2IVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterIF2IF2IVF32 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF32_swigregister(itkDemonsRegistrationFilterIF2IF2IVF32)
itkDemonsRegistrationFilterIF2IF2IVF32___New_orig__ = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF32___New_orig__
itkDemonsRegistrationFilterIF2IF2IVF32_cast = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF32_cast


def itkDemonsRegistrationFilterIF2IF2IVF42_New():
    return itkDemonsRegistrationFilterIF2IF2IVF42.New()

class itkDemonsRegistrationFilterIF2IF2IVF42(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF2IF2IVF42):
    r"""


    Deformably register two images using the demons algorithm.

    DemonsRegistrationFilter implements the demons deformable algorithm
    that register two images by computing the displacement field which
    will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF42___New_orig__)
    Clone = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF42_Clone)
    GetMetric = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF42_GetMetric)
    SetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF42_SetUseMovingImageGradient)
    GetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF42_GetUseMovingImageGradient)
    UseMovingImageGradientOn = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF42_UseMovingImageGradientOn)
    UseMovingImageGradientOff = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF42_UseMovingImageGradientOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF42_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF42_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterIF2IF2IVF42
    cast = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF42_cast)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterIF2IF2IVF42

        Create a new object of the class itkDemonsRegistrationFilterIF2IF2IVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterIF2IF2IVF42.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterIF2IF2IVF42.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterIF2IF2IVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterIF2IF2IVF42 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF42_swigregister(itkDemonsRegistrationFilterIF2IF2IVF42)
itkDemonsRegistrationFilterIF2IF2IVF42___New_orig__ = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF42___New_orig__
itkDemonsRegistrationFilterIF2IF2IVF42_cast = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF42_cast


def itkDemonsRegistrationFilterIF3IF3IVF23_New():
    return itkDemonsRegistrationFilterIF3IF3IVF23.New()

class itkDemonsRegistrationFilterIF3IF3IVF23(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF3IF3IVF23):
    r"""


    Deformably register two images using the demons algorithm.

    DemonsRegistrationFilter implements the demons deformable algorithm
    that register two images by computing the displacement field which
    will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF23___New_orig__)
    Clone = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF23_Clone)
    GetMetric = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF23_GetMetric)
    SetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF23_SetUseMovingImageGradient)
    GetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF23_GetUseMovingImageGradient)
    UseMovingImageGradientOn = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF23_UseMovingImageGradientOn)
    UseMovingImageGradientOff = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF23_UseMovingImageGradientOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF23_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF23_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterIF3IF3IVF23
    cast = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF23_cast)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterIF3IF3IVF23

        Create a new object of the class itkDemonsRegistrationFilterIF3IF3IVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterIF3IF3IVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterIF3IF3IVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterIF3IF3IVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterIF3IF3IVF23 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF23_swigregister(itkDemonsRegistrationFilterIF3IF3IVF23)
itkDemonsRegistrationFilterIF3IF3IVF23___New_orig__ = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF23___New_orig__
itkDemonsRegistrationFilterIF3IF3IVF23_cast = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF23_cast


def itkDemonsRegistrationFilterIF3IF3IVF33_New():
    return itkDemonsRegistrationFilterIF3IF3IVF33.New()

class itkDemonsRegistrationFilterIF3IF3IVF33(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF3IF3IVF33):
    r"""


    Deformably register two images using the demons algorithm.

    DemonsRegistrationFilter implements the demons deformable algorithm
    that register two images by computing the displacement field which
    will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF33_Clone)
    GetMetric = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF33_GetMetric)
    SetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF33_SetUseMovingImageGradient)
    GetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF33_GetUseMovingImageGradient)
    UseMovingImageGradientOn = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF33_UseMovingImageGradientOn)
    UseMovingImageGradientOff = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF33_UseMovingImageGradientOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF33_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF33_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterIF3IF3IVF33
    cast = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF33_cast)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterIF3IF3IVF33

        Create a new object of the class itkDemonsRegistrationFilterIF3IF3IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterIF3IF3IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterIF3IF3IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterIF3IF3IVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterIF3IF3IVF33 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF33_swigregister(itkDemonsRegistrationFilterIF3IF3IVF33)
itkDemonsRegistrationFilterIF3IF3IVF33___New_orig__ = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF33___New_orig__
itkDemonsRegistrationFilterIF3IF3IVF33_cast = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF33_cast


def itkDemonsRegistrationFilterIF3IF3IVF43_New():
    return itkDemonsRegistrationFilterIF3IF3IVF43.New()

class itkDemonsRegistrationFilterIF3IF3IVF43(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF3IF3IVF43):
    r"""


    Deformably register two images using the demons algorithm.

    DemonsRegistrationFilter implements the demons deformable algorithm
    that register two images by computing the displacement field which
    will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF43___New_orig__)
    Clone = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF43_Clone)
    GetMetric = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF43_GetMetric)
    SetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF43_SetUseMovingImageGradient)
    GetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF43_GetUseMovingImageGradient)
    UseMovingImageGradientOn = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF43_UseMovingImageGradientOn)
    UseMovingImageGradientOff = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF43_UseMovingImageGradientOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF43_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF43_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterIF3IF3IVF43
    cast = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF43_cast)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterIF3IF3IVF43

        Create a new object of the class itkDemonsRegistrationFilterIF3IF3IVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterIF3IF3IVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterIF3IF3IVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterIF3IF3IVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterIF3IF3IVF43 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF43_swigregister(itkDemonsRegistrationFilterIF3IF3IVF43)
itkDemonsRegistrationFilterIF3IF3IVF43___New_orig__ = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF43___New_orig__
itkDemonsRegistrationFilterIF3IF3IVF43_cast = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF43_cast


def itkDemonsRegistrationFilterISS2ISS2IVF22_New():
    return itkDemonsRegistrationFilterISS2ISS2IVF22.New()

class itkDemonsRegistrationFilterISS2ISS2IVF22(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS2ISS2IVF22):
    r"""


    Deformably register two images using the demons algorithm.

    DemonsRegistrationFilter implements the demons deformable algorithm
    that register two images by computing the displacement field which
    will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF22_Clone)
    GetMetric = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF22_GetMetric)
    SetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF22_SetUseMovingImageGradient)
    GetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF22_GetUseMovingImageGradient)
    UseMovingImageGradientOn = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF22_UseMovingImageGradientOn)
    UseMovingImageGradientOff = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF22_UseMovingImageGradientOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF22_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF22_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterISS2ISS2IVF22
    cast = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF22_cast)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterISS2ISS2IVF22

        Create a new object of the class itkDemonsRegistrationFilterISS2ISS2IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterISS2ISS2IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterISS2ISS2IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterISS2ISS2IVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterISS2ISS2IVF22 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF22_swigregister(itkDemonsRegistrationFilterISS2ISS2IVF22)
itkDemonsRegistrationFilterISS2ISS2IVF22___New_orig__ = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF22___New_orig__
itkDemonsRegistrationFilterISS2ISS2IVF22_cast = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF22_cast


def itkDemonsRegistrationFilterISS2ISS2IVF32_New():
    return itkDemonsRegistrationFilterISS2ISS2IVF32.New()

class itkDemonsRegistrationFilterISS2ISS2IVF32(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS2ISS2IVF32):
    r"""


    Deformably register two images using the demons algorithm.

    DemonsRegistrationFilter implements the demons deformable algorithm
    that register two images by computing the displacement field which
    will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF32___New_orig__)
    Clone = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF32_Clone)
    GetMetric = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF32_GetMetric)
    SetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF32_SetUseMovingImageGradient)
    GetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF32_GetUseMovingImageGradient)
    UseMovingImageGradientOn = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF32_UseMovingImageGradientOn)
    UseMovingImageGradientOff = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF32_UseMovingImageGradientOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF32_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF32_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterISS2ISS2IVF32
    cast = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF32_cast)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterISS2ISS2IVF32

        Create a new object of the class itkDemonsRegistrationFilterISS2ISS2IVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterISS2ISS2IVF32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterISS2ISS2IVF32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterISS2ISS2IVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterISS2ISS2IVF32 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF32_swigregister(itkDemonsRegistrationFilterISS2ISS2IVF32)
itkDemonsRegistrationFilterISS2ISS2IVF32___New_orig__ = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF32___New_orig__
itkDemonsRegistrationFilterISS2ISS2IVF32_cast = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF32_cast


def itkDemonsRegistrationFilterISS2ISS2IVF42_New():
    return itkDemonsRegistrationFilterISS2ISS2IVF42.New()

class itkDemonsRegistrationFilterISS2ISS2IVF42(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS2ISS2IVF42):
    r"""


    Deformably register two images using the demons algorithm.

    DemonsRegistrationFilter implements the demons deformable algorithm
    that register two images by computing the displacement field which
    will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF42___New_orig__)
    Clone = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF42_Clone)
    GetMetric = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF42_GetMetric)
    SetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF42_SetUseMovingImageGradient)
    GetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF42_GetUseMovingImageGradient)
    UseMovingImageGradientOn = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF42_UseMovingImageGradientOn)
    UseMovingImageGradientOff = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF42_UseMovingImageGradientOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF42_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF42_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterISS2ISS2IVF42
    cast = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF42_cast)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterISS2ISS2IVF42

        Create a new object of the class itkDemonsRegistrationFilterISS2ISS2IVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterISS2ISS2IVF42.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterISS2ISS2IVF42.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterISS2ISS2IVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterISS2ISS2IVF42 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF42_swigregister(itkDemonsRegistrationFilterISS2ISS2IVF42)
itkDemonsRegistrationFilterISS2ISS2IVF42___New_orig__ = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF42___New_orig__
itkDemonsRegistrationFilterISS2ISS2IVF42_cast = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF42_cast


def itkDemonsRegistrationFilterISS3ISS3IVF23_New():
    return itkDemonsRegistrationFilterISS3ISS3IVF23.New()

class itkDemonsRegistrationFilterISS3ISS3IVF23(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS3ISS3IVF23):
    r"""


    Deformably register two images using the demons algorithm.

    DemonsRegistrationFilter implements the demons deformable algorithm
    that register two images by computing the displacement field which
    will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF23___New_orig__)
    Clone = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF23_Clone)
    GetMetric = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF23_GetMetric)
    SetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF23_SetUseMovingImageGradient)
    GetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF23_GetUseMovingImageGradient)
    UseMovingImageGradientOn = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF23_UseMovingImageGradientOn)
    UseMovingImageGradientOff = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF23_UseMovingImageGradientOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF23_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF23_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterISS3ISS3IVF23
    cast = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF23_cast)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterISS3ISS3IVF23

        Create a new object of the class itkDemonsRegistrationFilterISS3ISS3IVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterISS3ISS3IVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterISS3ISS3IVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterISS3ISS3IVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterISS3ISS3IVF23 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF23_swigregister(itkDemonsRegistrationFilterISS3ISS3IVF23)
itkDemonsRegistrationFilterISS3ISS3IVF23___New_orig__ = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF23___New_orig__
itkDemonsRegistrationFilterISS3ISS3IVF23_cast = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF23_cast


def itkDemonsRegistrationFilterISS3ISS3IVF33_New():
    return itkDemonsRegistrationFilterISS3ISS3IVF33.New()

class itkDemonsRegistrationFilterISS3ISS3IVF33(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS3ISS3IVF33):
    r"""


    Deformably register two images using the demons algorithm.

    DemonsRegistrationFilter implements the demons deformable algorithm
    that register two images by computing the displacement field which
    will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF33_Clone)
    GetMetric = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF33_GetMetric)
    SetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF33_SetUseMovingImageGradient)
    GetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF33_GetUseMovingImageGradient)
    UseMovingImageGradientOn = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF33_UseMovingImageGradientOn)
    UseMovingImageGradientOff = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF33_UseMovingImageGradientOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF33_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF33_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterISS3ISS3IVF33
    cast = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF33_cast)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterISS3ISS3IVF33

        Create a new object of the class itkDemonsRegistrationFilterISS3ISS3IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterISS3ISS3IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterISS3ISS3IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterISS3ISS3IVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterISS3ISS3IVF33 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF33_swigregister(itkDemonsRegistrationFilterISS3ISS3IVF33)
itkDemonsRegistrationFilterISS3ISS3IVF33___New_orig__ = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF33___New_orig__
itkDemonsRegistrationFilterISS3ISS3IVF33_cast = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF33_cast


def itkDemonsRegistrationFilterISS3ISS3IVF43_New():
    return itkDemonsRegistrationFilterISS3ISS3IVF43.New()

class itkDemonsRegistrationFilterISS3ISS3IVF43(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS3ISS3IVF43):
    r"""


    Deformably register two images using the demons algorithm.

    DemonsRegistrationFilter implements the demons deformable algorithm
    that register two images by computing the displacement field which
    will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF43___New_orig__)
    Clone = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF43_Clone)
    GetMetric = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF43_GetMetric)
    SetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF43_SetUseMovingImageGradient)
    GetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF43_GetUseMovingImageGradient)
    UseMovingImageGradientOn = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF43_UseMovingImageGradientOn)
    UseMovingImageGradientOff = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF43_UseMovingImageGradientOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF43_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF43_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterISS3ISS3IVF43
    cast = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF43_cast)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterISS3ISS3IVF43

        Create a new object of the class itkDemonsRegistrationFilterISS3ISS3IVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterISS3ISS3IVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterISS3ISS3IVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterISS3ISS3IVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterISS3ISS3IVF43 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF43_swigregister(itkDemonsRegistrationFilterISS3ISS3IVF43)
itkDemonsRegistrationFilterISS3ISS3IVF43___New_orig__ = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF43___New_orig__
itkDemonsRegistrationFilterISS3ISS3IVF43_cast = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF43_cast


def itkDemonsRegistrationFilterIUC2IUC2IVF22_New():
    return itkDemonsRegistrationFilterIUC2IUC2IVF22.New()

class itkDemonsRegistrationFilterIUC2IUC2IVF22(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC2IUC2IVF22):
    r"""


    Deformably register two images using the demons algorithm.

    DemonsRegistrationFilter implements the demons deformable algorithm
    that register two images by computing the displacement field which
    will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF22_Clone)
    GetMetric = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF22_GetMetric)
    SetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF22_SetUseMovingImageGradient)
    GetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF22_GetUseMovingImageGradient)
    UseMovingImageGradientOn = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF22_UseMovingImageGradientOn)
    UseMovingImageGradientOff = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF22_UseMovingImageGradientOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF22_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF22_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterIUC2IUC2IVF22
    cast = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF22_cast)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterIUC2IUC2IVF22

        Create a new object of the class itkDemonsRegistrationFilterIUC2IUC2IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterIUC2IUC2IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterIUC2IUC2IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterIUC2IUC2IVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterIUC2IUC2IVF22 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF22_swigregister(itkDemonsRegistrationFilterIUC2IUC2IVF22)
itkDemonsRegistrationFilterIUC2IUC2IVF22___New_orig__ = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF22___New_orig__
itkDemonsRegistrationFilterIUC2IUC2IVF22_cast = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF22_cast


def itkDemonsRegistrationFilterIUC2IUC2IVF32_New():
    return itkDemonsRegistrationFilterIUC2IUC2IVF32.New()

class itkDemonsRegistrationFilterIUC2IUC2IVF32(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC2IUC2IVF32):
    r"""


    Deformably register two images using the demons algorithm.

    DemonsRegistrationFilter implements the demons deformable algorithm
    that register two images by computing the displacement field which
    will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF32___New_orig__)
    Clone = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF32_Clone)
    GetMetric = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF32_GetMetric)
    SetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF32_SetUseMovingImageGradient)
    GetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF32_GetUseMovingImageGradient)
    UseMovingImageGradientOn = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF32_UseMovingImageGradientOn)
    UseMovingImageGradientOff = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF32_UseMovingImageGradientOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF32_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF32_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterIUC2IUC2IVF32
    cast = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF32_cast)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterIUC2IUC2IVF32

        Create a new object of the class itkDemonsRegistrationFilterIUC2IUC2IVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterIUC2IUC2IVF32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterIUC2IUC2IVF32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterIUC2IUC2IVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterIUC2IUC2IVF32 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF32_swigregister(itkDemonsRegistrationFilterIUC2IUC2IVF32)
itkDemonsRegistrationFilterIUC2IUC2IVF32___New_orig__ = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF32___New_orig__
itkDemonsRegistrationFilterIUC2IUC2IVF32_cast = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF32_cast


def itkDemonsRegistrationFilterIUC2IUC2IVF42_New():
    return itkDemonsRegistrationFilterIUC2IUC2IVF42.New()

class itkDemonsRegistrationFilterIUC2IUC2IVF42(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC2IUC2IVF42):
    r"""


    Deformably register two images using the demons algorithm.

    DemonsRegistrationFilter implements the demons deformable algorithm
    that register two images by computing the displacement field which
    will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF42___New_orig__)
    Clone = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF42_Clone)
    GetMetric = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF42_GetMetric)
    SetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF42_SetUseMovingImageGradient)
    GetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF42_GetUseMovingImageGradient)
    UseMovingImageGradientOn = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF42_UseMovingImageGradientOn)
    UseMovingImageGradientOff = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF42_UseMovingImageGradientOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF42_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF42_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterIUC2IUC2IVF42
    cast = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF42_cast)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterIUC2IUC2IVF42

        Create a new object of the class itkDemonsRegistrationFilterIUC2IUC2IVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterIUC2IUC2IVF42.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterIUC2IUC2IVF42.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterIUC2IUC2IVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterIUC2IUC2IVF42 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF42_swigregister(itkDemonsRegistrationFilterIUC2IUC2IVF42)
itkDemonsRegistrationFilterIUC2IUC2IVF42___New_orig__ = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF42___New_orig__
itkDemonsRegistrationFilterIUC2IUC2IVF42_cast = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF42_cast


def itkDemonsRegistrationFilterIUC3IUC3IVF23_New():
    return itkDemonsRegistrationFilterIUC3IUC3IVF23.New()

class itkDemonsRegistrationFilterIUC3IUC3IVF23(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC3IUC3IVF23):
    r"""


    Deformably register two images using the demons algorithm.

    DemonsRegistrationFilter implements the demons deformable algorithm
    that register two images by computing the displacement field which
    will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF23___New_orig__)
    Clone = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF23_Clone)
    GetMetric = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF23_GetMetric)
    SetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF23_SetUseMovingImageGradient)
    GetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF23_GetUseMovingImageGradient)
    UseMovingImageGradientOn = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF23_UseMovingImageGradientOn)
    UseMovingImageGradientOff = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF23_UseMovingImageGradientOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF23_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF23_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterIUC3IUC3IVF23
    cast = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF23_cast)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterIUC3IUC3IVF23

        Create a new object of the class itkDemonsRegistrationFilterIUC3IUC3IVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterIUC3IUC3IVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterIUC3IUC3IVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterIUC3IUC3IVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterIUC3IUC3IVF23 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF23_swigregister(itkDemonsRegistrationFilterIUC3IUC3IVF23)
itkDemonsRegistrationFilterIUC3IUC3IVF23___New_orig__ = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF23___New_orig__
itkDemonsRegistrationFilterIUC3IUC3IVF23_cast = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF23_cast


def itkDemonsRegistrationFilterIUC3IUC3IVF33_New():
    return itkDemonsRegistrationFilterIUC3IUC3IVF33.New()

class itkDemonsRegistrationFilterIUC3IUC3IVF33(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC3IUC3IVF33):
    r"""


    Deformably register two images using the demons algorithm.

    DemonsRegistrationFilter implements the demons deformable algorithm
    that register two images by computing the displacement field which
    will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF33_Clone)
    GetMetric = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF33_GetMetric)
    SetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF33_SetUseMovingImageGradient)
    GetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF33_GetUseMovingImageGradient)
    UseMovingImageGradientOn = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF33_UseMovingImageGradientOn)
    UseMovingImageGradientOff = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF33_UseMovingImageGradientOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF33_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF33_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterIUC3IUC3IVF33
    cast = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF33_cast)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterIUC3IUC3IVF33

        Create a new object of the class itkDemonsRegistrationFilterIUC3IUC3IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterIUC3IUC3IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterIUC3IUC3IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterIUC3IUC3IVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterIUC3IUC3IVF33 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF33_swigregister(itkDemonsRegistrationFilterIUC3IUC3IVF33)
itkDemonsRegistrationFilterIUC3IUC3IVF33___New_orig__ = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF33___New_orig__
itkDemonsRegistrationFilterIUC3IUC3IVF33_cast = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF33_cast


def itkDemonsRegistrationFilterIUC3IUC3IVF43_New():
    return itkDemonsRegistrationFilterIUC3IUC3IVF43.New()

class itkDemonsRegistrationFilterIUC3IUC3IVF43(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC3IUC3IVF43):
    r"""


    Deformably register two images using the demons algorithm.

    DemonsRegistrationFilter implements the demons deformable algorithm
    that register two images by computing the displacement field which
    will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF43___New_orig__)
    Clone = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF43_Clone)
    GetMetric = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF43_GetMetric)
    SetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF43_SetUseMovingImageGradient)
    GetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF43_GetUseMovingImageGradient)
    UseMovingImageGradientOn = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF43_UseMovingImageGradientOn)
    UseMovingImageGradientOff = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF43_UseMovingImageGradientOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF43_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF43_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterIUC3IUC3IVF43
    cast = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF43_cast)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterIUC3IUC3IVF43

        Create a new object of the class itkDemonsRegistrationFilterIUC3IUC3IVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterIUC3IUC3IVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterIUC3IUC3IVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterIUC3IUC3IVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterIUC3IUC3IVF43 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF43_swigregister(itkDemonsRegistrationFilterIUC3IUC3IVF43)
itkDemonsRegistrationFilterIUC3IUC3IVF43___New_orig__ = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF43___New_orig__
itkDemonsRegistrationFilterIUC3IUC3IVF43_cast = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF43_cast


def itkDemonsRegistrationFilterIUS2IUS2IVF22_New():
    return itkDemonsRegistrationFilterIUS2IUS2IVF22.New()

class itkDemonsRegistrationFilterIUS2IUS2IVF22(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS2IUS2IVF22):
    r"""


    Deformably register two images using the demons algorithm.

    DemonsRegistrationFilter implements the demons deformable algorithm
    that register two images by computing the displacement field which
    will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF22_Clone)
    GetMetric = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF22_GetMetric)
    SetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF22_SetUseMovingImageGradient)
    GetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF22_GetUseMovingImageGradient)
    UseMovingImageGradientOn = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF22_UseMovingImageGradientOn)
    UseMovingImageGradientOff = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF22_UseMovingImageGradientOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF22_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF22_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterIUS2IUS2IVF22
    cast = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF22_cast)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterIUS2IUS2IVF22

        Create a new object of the class itkDemonsRegistrationFilterIUS2IUS2IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterIUS2IUS2IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterIUS2IUS2IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterIUS2IUS2IVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterIUS2IUS2IVF22 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF22_swigregister(itkDemonsRegistrationFilterIUS2IUS2IVF22)
itkDemonsRegistrationFilterIUS2IUS2IVF22___New_orig__ = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF22___New_orig__
itkDemonsRegistrationFilterIUS2IUS2IVF22_cast = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF22_cast


def itkDemonsRegistrationFilterIUS2IUS2IVF32_New():
    return itkDemonsRegistrationFilterIUS2IUS2IVF32.New()

class itkDemonsRegistrationFilterIUS2IUS2IVF32(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS2IUS2IVF32):
    r"""


    Deformably register two images using the demons algorithm.

    DemonsRegistrationFilter implements the demons deformable algorithm
    that register two images by computing the displacement field which
    will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF32___New_orig__)
    Clone = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF32_Clone)
    GetMetric = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF32_GetMetric)
    SetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF32_SetUseMovingImageGradient)
    GetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF32_GetUseMovingImageGradient)
    UseMovingImageGradientOn = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF32_UseMovingImageGradientOn)
    UseMovingImageGradientOff = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF32_UseMovingImageGradientOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF32_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF32_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterIUS2IUS2IVF32
    cast = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF32_cast)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterIUS2IUS2IVF32

        Create a new object of the class itkDemonsRegistrationFilterIUS2IUS2IVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterIUS2IUS2IVF32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterIUS2IUS2IVF32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterIUS2IUS2IVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterIUS2IUS2IVF32 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF32_swigregister(itkDemonsRegistrationFilterIUS2IUS2IVF32)
itkDemonsRegistrationFilterIUS2IUS2IVF32___New_orig__ = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF32___New_orig__
itkDemonsRegistrationFilterIUS2IUS2IVF32_cast = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF32_cast


def itkDemonsRegistrationFilterIUS2IUS2IVF42_New():
    return itkDemonsRegistrationFilterIUS2IUS2IVF42.New()

class itkDemonsRegistrationFilterIUS2IUS2IVF42(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS2IUS2IVF42):
    r"""


    Deformably register two images using the demons algorithm.

    DemonsRegistrationFilter implements the demons deformable algorithm
    that register two images by computing the displacement field which
    will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF42___New_orig__)
    Clone = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF42_Clone)
    GetMetric = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF42_GetMetric)
    SetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF42_SetUseMovingImageGradient)
    GetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF42_GetUseMovingImageGradient)
    UseMovingImageGradientOn = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF42_UseMovingImageGradientOn)
    UseMovingImageGradientOff = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF42_UseMovingImageGradientOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF42_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF42_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterIUS2IUS2IVF42
    cast = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF42_cast)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterIUS2IUS2IVF42

        Create a new object of the class itkDemonsRegistrationFilterIUS2IUS2IVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterIUS2IUS2IVF42.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterIUS2IUS2IVF42.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterIUS2IUS2IVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterIUS2IUS2IVF42 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF42_swigregister(itkDemonsRegistrationFilterIUS2IUS2IVF42)
itkDemonsRegistrationFilterIUS2IUS2IVF42___New_orig__ = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF42___New_orig__
itkDemonsRegistrationFilterIUS2IUS2IVF42_cast = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF42_cast


def itkDemonsRegistrationFilterIUS3IUS3IVF23_New():
    return itkDemonsRegistrationFilterIUS3IUS3IVF23.New()

class itkDemonsRegistrationFilterIUS3IUS3IVF23(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS3IUS3IVF23):
    r"""


    Deformably register two images using the demons algorithm.

    DemonsRegistrationFilter implements the demons deformable algorithm
    that register two images by computing the displacement field which
    will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF23___New_orig__)
    Clone = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF23_Clone)
    GetMetric = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF23_GetMetric)
    SetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF23_SetUseMovingImageGradient)
    GetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF23_GetUseMovingImageGradient)
    UseMovingImageGradientOn = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF23_UseMovingImageGradientOn)
    UseMovingImageGradientOff = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF23_UseMovingImageGradientOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF23_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF23_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterIUS3IUS3IVF23
    cast = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF23_cast)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterIUS3IUS3IVF23

        Create a new object of the class itkDemonsRegistrationFilterIUS3IUS3IVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterIUS3IUS3IVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterIUS3IUS3IVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterIUS3IUS3IVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterIUS3IUS3IVF23 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF23_swigregister(itkDemonsRegistrationFilterIUS3IUS3IVF23)
itkDemonsRegistrationFilterIUS3IUS3IVF23___New_orig__ = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF23___New_orig__
itkDemonsRegistrationFilterIUS3IUS3IVF23_cast = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF23_cast


def itkDemonsRegistrationFilterIUS3IUS3IVF33_New():
    return itkDemonsRegistrationFilterIUS3IUS3IVF33.New()

class itkDemonsRegistrationFilterIUS3IUS3IVF33(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS3IUS3IVF33):
    r"""


    Deformably register two images using the demons algorithm.

    DemonsRegistrationFilter implements the demons deformable algorithm
    that register two images by computing the displacement field which
    will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF33_Clone)
    GetMetric = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF33_GetMetric)
    SetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF33_SetUseMovingImageGradient)
    GetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF33_GetUseMovingImageGradient)
    UseMovingImageGradientOn = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF33_UseMovingImageGradientOn)
    UseMovingImageGradientOff = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF33_UseMovingImageGradientOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF33_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF33_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterIUS3IUS3IVF33
    cast = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF33_cast)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterIUS3IUS3IVF33

        Create a new object of the class itkDemonsRegistrationFilterIUS3IUS3IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterIUS3IUS3IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterIUS3IUS3IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterIUS3IUS3IVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterIUS3IUS3IVF33 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF33_swigregister(itkDemonsRegistrationFilterIUS3IUS3IVF33)
itkDemonsRegistrationFilterIUS3IUS3IVF33___New_orig__ = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF33___New_orig__
itkDemonsRegistrationFilterIUS3IUS3IVF33_cast = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF33_cast


def itkDemonsRegistrationFilterIUS3IUS3IVF43_New():
    return itkDemonsRegistrationFilterIUS3IUS3IVF43.New()

class itkDemonsRegistrationFilterIUS3IUS3IVF43(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS3IUS3IVF43):
    r"""


    Deformably register two images using the demons algorithm.

    DemonsRegistrationFilter implements the demons deformable algorithm
    that register two images by computing the displacement field which
    will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF43___New_orig__)
    Clone = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF43_Clone)
    GetMetric = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF43_GetMetric)
    SetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF43_SetUseMovingImageGradient)
    GetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF43_GetUseMovingImageGradient)
    UseMovingImageGradientOn = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF43_UseMovingImageGradientOn)
    UseMovingImageGradientOff = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF43_UseMovingImageGradientOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF43_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF43_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterIUS3IUS3IVF43
    cast = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF43_cast)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterIUS3IUS3IVF43

        Create a new object of the class itkDemonsRegistrationFilterIUS3IUS3IVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterIUS3IUS3IVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterIUS3IUS3IVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterIUS3IUS3IVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterIUS3IUS3IVF43 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF43_swigregister(itkDemonsRegistrationFilterIUS3IUS3IVF43)
itkDemonsRegistrationFilterIUS3IUS3IVF43___New_orig__ = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF43___New_orig__
itkDemonsRegistrationFilterIUS3IUS3IVF43_cast = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF43_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def demons_registration_filter(*args, **kwargs):
    """Procedural interface for DemonsRegistrationFilter"""
    import itk
    instance = itk.DemonsRegistrationFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def demons_registration_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.DemonsRegistrationFilter, itkTemplate.itkTemplate):
        filter_object = itk.DemonsRegistrationFilter.values()[0]
    else:
        filter_object = itk.DemonsRegistrationFilter

    demons_registration_filter.__doc__ = filter_object.__doc__
    demons_registration_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    demons_registration_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.DemonsRegistrationFilter, itkTemplate.itkTemplate):
        demons_registration_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        demons_registration_filter.__doc__ += "\n"
        demons_registration_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        demons_registration_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



