# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKStatisticsPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkScalarImageToRunLengthFeaturesFilterPython
else:
    import _itkScalarImageToRunLengthFeaturesFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkScalarImageToRunLengthFeaturesFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkScalarImageToRunLengthFeaturesFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImagePython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.pyBasePython
import itk.stdcomplexPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.vnl_vectorPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkPointPython
import itk.itkRGBPixelPython
import itk.itkIndexPython
import itk.ITKCommonBasePython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkVectorContainerPython
import itk.itkContinuousIndexPython

def itkScalarImageToRunLengthFeaturesFilterID2_New():
    return itkScalarImageToRunLengthFeaturesFilterID2.New()

class itkScalarImageToRunLengthFeaturesFilterID2(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    This class computes run length descriptions from an image.

    By default, run length features are computed for each spatial
    direction and then averaged afterward, so it is possible to access the
    standard deviations of the texture features. These values give a clue
    as to texture anisotropy. However, doing this is much more work,
    because it involved computing one for each offset given. To compute a
    single matrix using the first offset, call FastCalculationsOn(). If
    this is called, then the texture standard deviations will not be
    computed (and will be set to zero), but texture computation will be
    much faster.

    This class is templated over the input image type.

    Template Parameters: The image type, and the type of histogram
    frequency container. If you are using a large number of bins per axis,
    a sparse frequency container may be advisable. The default is to use a
    dense frequency container.

    Inputs and parameters: An image

    A mask defining the region over which texture features will be
    calculated. (Optional)

    The pixel value that defines the "inside" of the mask. (Optional,
    defaults to 1 if a mask is set.)

    The set of features to be calculated. These features are defined in
    the HistogramToRunLengthFeaturesFilter class.

    The number of intensity bins. (Optional, defaults to 256.)

    The set of directions (offsets) to average across. (Optional, defaults
    to {(-1, 0), (-1, -1), (0, -1), (1, -1)} for 2D images and scales
    analogously for ND images.)

    The pixel intensity range over which the features will be calculated.
    (Optional, defaults to the full dynamic range of the pixel type.)

    The distance range over which the features will be calculated.
    (Optional, defaults to the full dynamic range of double type.)

    In general, the default parameter values should be sufficient.

    Outputs: (1) The average value of each feature. (2) The standard
    deviation in the values of each feature.

    Print references: M. M. Galloway. Texture analysis using gray level
    run lengths. Computer Graphics and Image Processing, 4:172-179, 1975.

    A. Chu, C. M. Sehgal, and J. F. Greenleaf. Use of gray value
    distribution of run lengths for texture analysis. Pattern Recognition
    Letters, 11:415-420, 1990.

    B. R. Dasarathy and E. B. Holder. Image characterizations based on
    joint gray-level run-length distributions. Pattern Recognition
    Letters, 12:490-502, 1991.

    IJ article:https://hdl.handle.net/1926/1374

    See:   ScalarImageToRunLengthFeaturesFilter

    See:   ScalarImageToRunLengthMatrixFilter

    See:   HistogramToRunLengthFeaturesFilter

    : Nick Tustison 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterID2___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterID2_Clone)
    GetFeatureMeansOutput = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterID2_GetFeatureMeansOutput)
    GetFeatureStandardDeviationsOutput = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterID2_GetFeatureStandardDeviationsOutput)
    SetInput = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterID2_SetInput)
    GetInput = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterID2_GetInput)
    GetFeatureMeans = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterID2_GetFeatureMeans)
    GetFeatureStandardDeviations = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterID2_GetFeatureStandardDeviations)
    SetRequestedFeatures = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterID2_SetRequestedFeatures)
    GetRequestedFeatures = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterID2_GetRequestedFeatures)
    SetOffsets = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterID2_SetOffsets)
    GetOffsets = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterID2_GetOffsets)
    SetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterID2_SetNumberOfBinsPerAxis)
    SetPixelValueMinMax = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterID2_SetPixelValueMinMax)
    SetDistanceValueMinMax = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterID2_SetDistanceValueMinMax)
    SetMaskImage = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterID2_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterID2_GetMaskImage)
    SetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterID2_SetInsidePixelValue)
    GetFastCalculations = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterID2_GetFastCalculations)
    SetFastCalculations = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterID2_SetFastCalculations)
    FastCalculationsOn = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterID2_FastCalculationsOn)
    FastCalculationsOff = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterID2_FastCalculationsOff)
    __swig_destroy__ = _itkScalarImageToRunLengthFeaturesFilterPython.delete_itkScalarImageToRunLengthFeaturesFilterID2
    cast = _swig_new_static_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterID2_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToRunLengthFeaturesFilterID2

        Create a new object of the class itkScalarImageToRunLengthFeaturesFilterID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToRunLengthFeaturesFilterID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToRunLengthFeaturesFilterID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToRunLengthFeaturesFilterID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToRunLengthFeaturesFilterID2 in _itkScalarImageToRunLengthFeaturesFilterPython:
_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterID2_swigregister(itkScalarImageToRunLengthFeaturesFilterID2)
itkScalarImageToRunLengthFeaturesFilterID2___New_orig__ = _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterID2___New_orig__
itkScalarImageToRunLengthFeaturesFilterID2_cast = _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterID2_cast


def itkScalarImageToRunLengthFeaturesFilterID3_New():
    return itkScalarImageToRunLengthFeaturesFilterID3.New()

class itkScalarImageToRunLengthFeaturesFilterID3(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    This class computes run length descriptions from an image.

    By default, run length features are computed for each spatial
    direction and then averaged afterward, so it is possible to access the
    standard deviations of the texture features. These values give a clue
    as to texture anisotropy. However, doing this is much more work,
    because it involved computing one for each offset given. To compute a
    single matrix using the first offset, call FastCalculationsOn(). If
    this is called, then the texture standard deviations will not be
    computed (and will be set to zero), but texture computation will be
    much faster.

    This class is templated over the input image type.

    Template Parameters: The image type, and the type of histogram
    frequency container. If you are using a large number of bins per axis,
    a sparse frequency container may be advisable. The default is to use a
    dense frequency container.

    Inputs and parameters: An image

    A mask defining the region over which texture features will be
    calculated. (Optional)

    The pixel value that defines the "inside" of the mask. (Optional,
    defaults to 1 if a mask is set.)

    The set of features to be calculated. These features are defined in
    the HistogramToRunLengthFeaturesFilter class.

    The number of intensity bins. (Optional, defaults to 256.)

    The set of directions (offsets) to average across. (Optional, defaults
    to {(-1, 0), (-1, -1), (0, -1), (1, -1)} for 2D images and scales
    analogously for ND images.)

    The pixel intensity range over which the features will be calculated.
    (Optional, defaults to the full dynamic range of the pixel type.)

    The distance range over which the features will be calculated.
    (Optional, defaults to the full dynamic range of double type.)

    In general, the default parameter values should be sufficient.

    Outputs: (1) The average value of each feature. (2) The standard
    deviation in the values of each feature.

    Print references: M. M. Galloway. Texture analysis using gray level
    run lengths. Computer Graphics and Image Processing, 4:172-179, 1975.

    A. Chu, C. M. Sehgal, and J. F. Greenleaf. Use of gray value
    distribution of run lengths for texture analysis. Pattern Recognition
    Letters, 11:415-420, 1990.

    B. R. Dasarathy and E. B. Holder. Image characterizations based on
    joint gray-level run-length distributions. Pattern Recognition
    Letters, 12:490-502, 1991.

    IJ article:https://hdl.handle.net/1926/1374

    See:   ScalarImageToRunLengthFeaturesFilter

    See:   ScalarImageToRunLengthMatrixFilter

    See:   HistogramToRunLengthFeaturesFilter

    : Nick Tustison 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterID3___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterID3_Clone)
    GetFeatureMeansOutput = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterID3_GetFeatureMeansOutput)
    GetFeatureStandardDeviationsOutput = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterID3_GetFeatureStandardDeviationsOutput)
    SetInput = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterID3_SetInput)
    GetInput = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterID3_GetInput)
    GetFeatureMeans = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterID3_GetFeatureMeans)
    GetFeatureStandardDeviations = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterID3_GetFeatureStandardDeviations)
    SetRequestedFeatures = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterID3_SetRequestedFeatures)
    GetRequestedFeatures = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterID3_GetRequestedFeatures)
    SetOffsets = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterID3_SetOffsets)
    GetOffsets = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterID3_GetOffsets)
    SetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterID3_SetNumberOfBinsPerAxis)
    SetPixelValueMinMax = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterID3_SetPixelValueMinMax)
    SetDistanceValueMinMax = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterID3_SetDistanceValueMinMax)
    SetMaskImage = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterID3_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterID3_GetMaskImage)
    SetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterID3_SetInsidePixelValue)
    GetFastCalculations = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterID3_GetFastCalculations)
    SetFastCalculations = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterID3_SetFastCalculations)
    FastCalculationsOn = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterID3_FastCalculationsOn)
    FastCalculationsOff = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterID3_FastCalculationsOff)
    __swig_destroy__ = _itkScalarImageToRunLengthFeaturesFilterPython.delete_itkScalarImageToRunLengthFeaturesFilterID3
    cast = _swig_new_static_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterID3_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToRunLengthFeaturesFilterID3

        Create a new object of the class itkScalarImageToRunLengthFeaturesFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToRunLengthFeaturesFilterID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToRunLengthFeaturesFilterID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToRunLengthFeaturesFilterID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToRunLengthFeaturesFilterID3 in _itkScalarImageToRunLengthFeaturesFilterPython:
_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterID3_swigregister(itkScalarImageToRunLengthFeaturesFilterID3)
itkScalarImageToRunLengthFeaturesFilterID3___New_orig__ = _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterID3___New_orig__
itkScalarImageToRunLengthFeaturesFilterID3_cast = _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterID3_cast


def itkScalarImageToRunLengthFeaturesFilterIF2_New():
    return itkScalarImageToRunLengthFeaturesFilterIF2.New()

class itkScalarImageToRunLengthFeaturesFilterIF2(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    This class computes run length descriptions from an image.

    By default, run length features are computed for each spatial
    direction and then averaged afterward, so it is possible to access the
    standard deviations of the texture features. These values give a clue
    as to texture anisotropy. However, doing this is much more work,
    because it involved computing one for each offset given. To compute a
    single matrix using the first offset, call FastCalculationsOn(). If
    this is called, then the texture standard deviations will not be
    computed (and will be set to zero), but texture computation will be
    much faster.

    This class is templated over the input image type.

    Template Parameters: The image type, and the type of histogram
    frequency container. If you are using a large number of bins per axis,
    a sparse frequency container may be advisable. The default is to use a
    dense frequency container.

    Inputs and parameters: An image

    A mask defining the region over which texture features will be
    calculated. (Optional)

    The pixel value that defines the "inside" of the mask. (Optional,
    defaults to 1 if a mask is set.)

    The set of features to be calculated. These features are defined in
    the HistogramToRunLengthFeaturesFilter class.

    The number of intensity bins. (Optional, defaults to 256.)

    The set of directions (offsets) to average across. (Optional, defaults
    to {(-1, 0), (-1, -1), (0, -1), (1, -1)} for 2D images and scales
    analogously for ND images.)

    The pixel intensity range over which the features will be calculated.
    (Optional, defaults to the full dynamic range of the pixel type.)

    The distance range over which the features will be calculated.
    (Optional, defaults to the full dynamic range of double type.)

    In general, the default parameter values should be sufficient.

    Outputs: (1) The average value of each feature. (2) The standard
    deviation in the values of each feature.

    Print references: M. M. Galloway. Texture analysis using gray level
    run lengths. Computer Graphics and Image Processing, 4:172-179, 1975.

    A. Chu, C. M. Sehgal, and J. F. Greenleaf. Use of gray value
    distribution of run lengths for texture analysis. Pattern Recognition
    Letters, 11:415-420, 1990.

    B. R. Dasarathy and E. B. Holder. Image characterizations based on
    joint gray-level run-length distributions. Pattern Recognition
    Letters, 12:490-502, 1991.

    IJ article:https://hdl.handle.net/1926/1374

    See:   ScalarImageToRunLengthFeaturesFilter

    See:   ScalarImageToRunLengthMatrixFilter

    See:   HistogramToRunLengthFeaturesFilter

    : Nick Tustison 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_Clone)
    GetFeatureMeansOutput = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_GetFeatureMeansOutput)
    GetFeatureStandardDeviationsOutput = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_GetFeatureStandardDeviationsOutput)
    SetInput = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_SetInput)
    GetInput = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_GetInput)
    GetFeatureMeans = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_GetFeatureMeans)
    GetFeatureStandardDeviations = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_GetFeatureStandardDeviations)
    SetRequestedFeatures = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_SetRequestedFeatures)
    GetRequestedFeatures = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_GetRequestedFeatures)
    SetOffsets = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_SetOffsets)
    GetOffsets = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_GetOffsets)
    SetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_SetNumberOfBinsPerAxis)
    SetPixelValueMinMax = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_SetPixelValueMinMax)
    SetDistanceValueMinMax = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_SetDistanceValueMinMax)
    SetMaskImage = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_GetMaskImage)
    SetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_SetInsidePixelValue)
    GetFastCalculations = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_GetFastCalculations)
    SetFastCalculations = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_SetFastCalculations)
    FastCalculationsOn = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_FastCalculationsOn)
    FastCalculationsOff = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_FastCalculationsOff)
    __swig_destroy__ = _itkScalarImageToRunLengthFeaturesFilterPython.delete_itkScalarImageToRunLengthFeaturesFilterIF2
    cast = _swig_new_static_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToRunLengthFeaturesFilterIF2

        Create a new object of the class itkScalarImageToRunLengthFeaturesFilterIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToRunLengthFeaturesFilterIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToRunLengthFeaturesFilterIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToRunLengthFeaturesFilterIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToRunLengthFeaturesFilterIF2 in _itkScalarImageToRunLengthFeaturesFilterPython:
_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_swigregister(itkScalarImageToRunLengthFeaturesFilterIF2)
itkScalarImageToRunLengthFeaturesFilterIF2___New_orig__ = _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2___New_orig__
itkScalarImageToRunLengthFeaturesFilterIF2_cast = _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_cast


def itkScalarImageToRunLengthFeaturesFilterIF3_New():
    return itkScalarImageToRunLengthFeaturesFilterIF3.New()

class itkScalarImageToRunLengthFeaturesFilterIF3(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    This class computes run length descriptions from an image.

    By default, run length features are computed for each spatial
    direction and then averaged afterward, so it is possible to access the
    standard deviations of the texture features. These values give a clue
    as to texture anisotropy. However, doing this is much more work,
    because it involved computing one for each offset given. To compute a
    single matrix using the first offset, call FastCalculationsOn(). If
    this is called, then the texture standard deviations will not be
    computed (and will be set to zero), but texture computation will be
    much faster.

    This class is templated over the input image type.

    Template Parameters: The image type, and the type of histogram
    frequency container. If you are using a large number of bins per axis,
    a sparse frequency container may be advisable. The default is to use a
    dense frequency container.

    Inputs and parameters: An image

    A mask defining the region over which texture features will be
    calculated. (Optional)

    The pixel value that defines the "inside" of the mask. (Optional,
    defaults to 1 if a mask is set.)

    The set of features to be calculated. These features are defined in
    the HistogramToRunLengthFeaturesFilter class.

    The number of intensity bins. (Optional, defaults to 256.)

    The set of directions (offsets) to average across. (Optional, defaults
    to {(-1, 0), (-1, -1), (0, -1), (1, -1)} for 2D images and scales
    analogously for ND images.)

    The pixel intensity range over which the features will be calculated.
    (Optional, defaults to the full dynamic range of the pixel type.)

    The distance range over which the features will be calculated.
    (Optional, defaults to the full dynamic range of double type.)

    In general, the default parameter values should be sufficient.

    Outputs: (1) The average value of each feature. (2) The standard
    deviation in the values of each feature.

    Print references: M. M. Galloway. Texture analysis using gray level
    run lengths. Computer Graphics and Image Processing, 4:172-179, 1975.

    A. Chu, C. M. Sehgal, and J. F. Greenleaf. Use of gray value
    distribution of run lengths for texture analysis. Pattern Recognition
    Letters, 11:415-420, 1990.

    B. R. Dasarathy and E. B. Holder. Image characterizations based on
    joint gray-level run-length distributions. Pattern Recognition
    Letters, 12:490-502, 1991.

    IJ article:https://hdl.handle.net/1926/1374

    See:   ScalarImageToRunLengthFeaturesFilter

    See:   ScalarImageToRunLengthMatrixFilter

    See:   HistogramToRunLengthFeaturesFilter

    : Nick Tustison 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_Clone)
    GetFeatureMeansOutput = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_GetFeatureMeansOutput)
    GetFeatureStandardDeviationsOutput = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_GetFeatureStandardDeviationsOutput)
    SetInput = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_SetInput)
    GetInput = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_GetInput)
    GetFeatureMeans = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_GetFeatureMeans)
    GetFeatureStandardDeviations = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_GetFeatureStandardDeviations)
    SetRequestedFeatures = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_SetRequestedFeatures)
    GetRequestedFeatures = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_GetRequestedFeatures)
    SetOffsets = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_SetOffsets)
    GetOffsets = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_GetOffsets)
    SetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_SetNumberOfBinsPerAxis)
    SetPixelValueMinMax = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_SetPixelValueMinMax)
    SetDistanceValueMinMax = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_SetDistanceValueMinMax)
    SetMaskImage = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_GetMaskImage)
    SetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_SetInsidePixelValue)
    GetFastCalculations = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_GetFastCalculations)
    SetFastCalculations = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_SetFastCalculations)
    FastCalculationsOn = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_FastCalculationsOn)
    FastCalculationsOff = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_FastCalculationsOff)
    __swig_destroy__ = _itkScalarImageToRunLengthFeaturesFilterPython.delete_itkScalarImageToRunLengthFeaturesFilterIF3
    cast = _swig_new_static_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToRunLengthFeaturesFilterIF3

        Create a new object of the class itkScalarImageToRunLengthFeaturesFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToRunLengthFeaturesFilterIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToRunLengthFeaturesFilterIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToRunLengthFeaturesFilterIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToRunLengthFeaturesFilterIF3 in _itkScalarImageToRunLengthFeaturesFilterPython:
_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_swigregister(itkScalarImageToRunLengthFeaturesFilterIF3)
itkScalarImageToRunLengthFeaturesFilterIF3___New_orig__ = _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3___New_orig__
itkScalarImageToRunLengthFeaturesFilterIF3_cast = _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_cast


def itkScalarImageToRunLengthFeaturesFilterISS2_New():
    return itkScalarImageToRunLengthFeaturesFilterISS2.New()

class itkScalarImageToRunLengthFeaturesFilterISS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    This class computes run length descriptions from an image.

    By default, run length features are computed for each spatial
    direction and then averaged afterward, so it is possible to access the
    standard deviations of the texture features. These values give a clue
    as to texture anisotropy. However, doing this is much more work,
    because it involved computing one for each offset given. To compute a
    single matrix using the first offset, call FastCalculationsOn(). If
    this is called, then the texture standard deviations will not be
    computed (and will be set to zero), but texture computation will be
    much faster.

    This class is templated over the input image type.

    Template Parameters: The image type, and the type of histogram
    frequency container. If you are using a large number of bins per axis,
    a sparse frequency container may be advisable. The default is to use a
    dense frequency container.

    Inputs and parameters: An image

    A mask defining the region over which texture features will be
    calculated. (Optional)

    The pixel value that defines the "inside" of the mask. (Optional,
    defaults to 1 if a mask is set.)

    The set of features to be calculated. These features are defined in
    the HistogramToRunLengthFeaturesFilter class.

    The number of intensity bins. (Optional, defaults to 256.)

    The set of directions (offsets) to average across. (Optional, defaults
    to {(-1, 0), (-1, -1), (0, -1), (1, -1)} for 2D images and scales
    analogously for ND images.)

    The pixel intensity range over which the features will be calculated.
    (Optional, defaults to the full dynamic range of the pixel type.)

    The distance range over which the features will be calculated.
    (Optional, defaults to the full dynamic range of double type.)

    In general, the default parameter values should be sufficient.

    Outputs: (1) The average value of each feature. (2) The standard
    deviation in the values of each feature.

    Print references: M. M. Galloway. Texture analysis using gray level
    run lengths. Computer Graphics and Image Processing, 4:172-179, 1975.

    A. Chu, C. M. Sehgal, and J. F. Greenleaf. Use of gray value
    distribution of run lengths for texture analysis. Pattern Recognition
    Letters, 11:415-420, 1990.

    B. R. Dasarathy and E. B. Holder. Image characterizations based on
    joint gray-level run-length distributions. Pattern Recognition
    Letters, 12:490-502, 1991.

    IJ article:https://hdl.handle.net/1926/1374

    See:   ScalarImageToRunLengthFeaturesFilter

    See:   ScalarImageToRunLengthMatrixFilter

    See:   HistogramToRunLengthFeaturesFilter

    : Nick Tustison 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_Clone)
    GetFeatureMeansOutput = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_GetFeatureMeansOutput)
    GetFeatureStandardDeviationsOutput = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_GetFeatureStandardDeviationsOutput)
    SetInput = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_SetInput)
    GetInput = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_GetInput)
    GetFeatureMeans = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_GetFeatureMeans)
    GetFeatureStandardDeviations = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_GetFeatureStandardDeviations)
    SetRequestedFeatures = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_SetRequestedFeatures)
    GetRequestedFeatures = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_GetRequestedFeatures)
    SetOffsets = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_SetOffsets)
    GetOffsets = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_GetOffsets)
    SetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_SetNumberOfBinsPerAxis)
    SetPixelValueMinMax = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_SetPixelValueMinMax)
    SetDistanceValueMinMax = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_SetDistanceValueMinMax)
    SetMaskImage = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_GetMaskImage)
    SetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_SetInsidePixelValue)
    GetFastCalculations = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_GetFastCalculations)
    SetFastCalculations = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_SetFastCalculations)
    FastCalculationsOn = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_FastCalculationsOn)
    FastCalculationsOff = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_FastCalculationsOff)
    __swig_destroy__ = _itkScalarImageToRunLengthFeaturesFilterPython.delete_itkScalarImageToRunLengthFeaturesFilterISS2
    cast = _swig_new_static_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToRunLengthFeaturesFilterISS2

        Create a new object of the class itkScalarImageToRunLengthFeaturesFilterISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToRunLengthFeaturesFilterISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToRunLengthFeaturesFilterISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToRunLengthFeaturesFilterISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToRunLengthFeaturesFilterISS2 in _itkScalarImageToRunLengthFeaturesFilterPython:
_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_swigregister(itkScalarImageToRunLengthFeaturesFilterISS2)
itkScalarImageToRunLengthFeaturesFilterISS2___New_orig__ = _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2___New_orig__
itkScalarImageToRunLengthFeaturesFilterISS2_cast = _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_cast


def itkScalarImageToRunLengthFeaturesFilterISS3_New():
    return itkScalarImageToRunLengthFeaturesFilterISS3.New()

class itkScalarImageToRunLengthFeaturesFilterISS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    This class computes run length descriptions from an image.

    By default, run length features are computed for each spatial
    direction and then averaged afterward, so it is possible to access the
    standard deviations of the texture features. These values give a clue
    as to texture anisotropy. However, doing this is much more work,
    because it involved computing one for each offset given. To compute a
    single matrix using the first offset, call FastCalculationsOn(). If
    this is called, then the texture standard deviations will not be
    computed (and will be set to zero), but texture computation will be
    much faster.

    This class is templated over the input image type.

    Template Parameters: The image type, and the type of histogram
    frequency container. If you are using a large number of bins per axis,
    a sparse frequency container may be advisable. The default is to use a
    dense frequency container.

    Inputs and parameters: An image

    A mask defining the region over which texture features will be
    calculated. (Optional)

    The pixel value that defines the "inside" of the mask. (Optional,
    defaults to 1 if a mask is set.)

    The set of features to be calculated. These features are defined in
    the HistogramToRunLengthFeaturesFilter class.

    The number of intensity bins. (Optional, defaults to 256.)

    The set of directions (offsets) to average across. (Optional, defaults
    to {(-1, 0), (-1, -1), (0, -1), (1, -1)} for 2D images and scales
    analogously for ND images.)

    The pixel intensity range over which the features will be calculated.
    (Optional, defaults to the full dynamic range of the pixel type.)

    The distance range over which the features will be calculated.
    (Optional, defaults to the full dynamic range of double type.)

    In general, the default parameter values should be sufficient.

    Outputs: (1) The average value of each feature. (2) The standard
    deviation in the values of each feature.

    Print references: M. M. Galloway. Texture analysis using gray level
    run lengths. Computer Graphics and Image Processing, 4:172-179, 1975.

    A. Chu, C. M. Sehgal, and J. F. Greenleaf. Use of gray value
    distribution of run lengths for texture analysis. Pattern Recognition
    Letters, 11:415-420, 1990.

    B. R. Dasarathy and E. B. Holder. Image characterizations based on
    joint gray-level run-length distributions. Pattern Recognition
    Letters, 12:490-502, 1991.

    IJ article:https://hdl.handle.net/1926/1374

    See:   ScalarImageToRunLengthFeaturesFilter

    See:   ScalarImageToRunLengthMatrixFilter

    See:   HistogramToRunLengthFeaturesFilter

    : Nick Tustison 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_Clone)
    GetFeatureMeansOutput = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_GetFeatureMeansOutput)
    GetFeatureStandardDeviationsOutput = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_GetFeatureStandardDeviationsOutput)
    SetInput = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_SetInput)
    GetInput = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_GetInput)
    GetFeatureMeans = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_GetFeatureMeans)
    GetFeatureStandardDeviations = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_GetFeatureStandardDeviations)
    SetRequestedFeatures = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_SetRequestedFeatures)
    GetRequestedFeatures = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_GetRequestedFeatures)
    SetOffsets = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_SetOffsets)
    GetOffsets = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_GetOffsets)
    SetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_SetNumberOfBinsPerAxis)
    SetPixelValueMinMax = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_SetPixelValueMinMax)
    SetDistanceValueMinMax = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_SetDistanceValueMinMax)
    SetMaskImage = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_GetMaskImage)
    SetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_SetInsidePixelValue)
    GetFastCalculations = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_GetFastCalculations)
    SetFastCalculations = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_SetFastCalculations)
    FastCalculationsOn = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_FastCalculationsOn)
    FastCalculationsOff = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_FastCalculationsOff)
    __swig_destroy__ = _itkScalarImageToRunLengthFeaturesFilterPython.delete_itkScalarImageToRunLengthFeaturesFilterISS3
    cast = _swig_new_static_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToRunLengthFeaturesFilterISS3

        Create a new object of the class itkScalarImageToRunLengthFeaturesFilterISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToRunLengthFeaturesFilterISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToRunLengthFeaturesFilterISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToRunLengthFeaturesFilterISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToRunLengthFeaturesFilterISS3 in _itkScalarImageToRunLengthFeaturesFilterPython:
_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_swigregister(itkScalarImageToRunLengthFeaturesFilterISS3)
itkScalarImageToRunLengthFeaturesFilterISS3___New_orig__ = _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3___New_orig__
itkScalarImageToRunLengthFeaturesFilterISS3_cast = _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_cast


def itkScalarImageToRunLengthFeaturesFilterIUC2_New():
    return itkScalarImageToRunLengthFeaturesFilterIUC2.New()

class itkScalarImageToRunLengthFeaturesFilterIUC2(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    This class computes run length descriptions from an image.

    By default, run length features are computed for each spatial
    direction and then averaged afterward, so it is possible to access the
    standard deviations of the texture features. These values give a clue
    as to texture anisotropy. However, doing this is much more work,
    because it involved computing one for each offset given. To compute a
    single matrix using the first offset, call FastCalculationsOn(). If
    this is called, then the texture standard deviations will not be
    computed (and will be set to zero), but texture computation will be
    much faster.

    This class is templated over the input image type.

    Template Parameters: The image type, and the type of histogram
    frequency container. If you are using a large number of bins per axis,
    a sparse frequency container may be advisable. The default is to use a
    dense frequency container.

    Inputs and parameters: An image

    A mask defining the region over which texture features will be
    calculated. (Optional)

    The pixel value that defines the "inside" of the mask. (Optional,
    defaults to 1 if a mask is set.)

    The set of features to be calculated. These features are defined in
    the HistogramToRunLengthFeaturesFilter class.

    The number of intensity bins. (Optional, defaults to 256.)

    The set of directions (offsets) to average across. (Optional, defaults
    to {(-1, 0), (-1, -1), (0, -1), (1, -1)} for 2D images and scales
    analogously for ND images.)

    The pixel intensity range over which the features will be calculated.
    (Optional, defaults to the full dynamic range of the pixel type.)

    The distance range over which the features will be calculated.
    (Optional, defaults to the full dynamic range of double type.)

    In general, the default parameter values should be sufficient.

    Outputs: (1) The average value of each feature. (2) The standard
    deviation in the values of each feature.

    Print references: M. M. Galloway. Texture analysis using gray level
    run lengths. Computer Graphics and Image Processing, 4:172-179, 1975.

    A. Chu, C. M. Sehgal, and J. F. Greenleaf. Use of gray value
    distribution of run lengths for texture analysis. Pattern Recognition
    Letters, 11:415-420, 1990.

    B. R. Dasarathy and E. B. Holder. Image characterizations based on
    joint gray-level run-length distributions. Pattern Recognition
    Letters, 12:490-502, 1991.

    IJ article:https://hdl.handle.net/1926/1374

    See:   ScalarImageToRunLengthFeaturesFilter

    See:   ScalarImageToRunLengthMatrixFilter

    See:   HistogramToRunLengthFeaturesFilter

    : Nick Tustison 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_Clone)
    GetFeatureMeansOutput = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_GetFeatureMeansOutput)
    GetFeatureStandardDeviationsOutput = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_GetFeatureStandardDeviationsOutput)
    SetInput = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_SetInput)
    GetInput = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_GetInput)
    GetFeatureMeans = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_GetFeatureMeans)
    GetFeatureStandardDeviations = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_GetFeatureStandardDeviations)
    SetRequestedFeatures = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_SetRequestedFeatures)
    GetRequestedFeatures = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_GetRequestedFeatures)
    SetOffsets = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_SetOffsets)
    GetOffsets = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_GetOffsets)
    SetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_SetNumberOfBinsPerAxis)
    SetPixelValueMinMax = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_SetPixelValueMinMax)
    SetDistanceValueMinMax = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_SetDistanceValueMinMax)
    SetMaskImage = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_GetMaskImage)
    SetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_SetInsidePixelValue)
    GetFastCalculations = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_GetFastCalculations)
    SetFastCalculations = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_SetFastCalculations)
    FastCalculationsOn = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_FastCalculationsOn)
    FastCalculationsOff = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_FastCalculationsOff)
    __swig_destroy__ = _itkScalarImageToRunLengthFeaturesFilterPython.delete_itkScalarImageToRunLengthFeaturesFilterIUC2
    cast = _swig_new_static_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToRunLengthFeaturesFilterIUC2

        Create a new object of the class itkScalarImageToRunLengthFeaturesFilterIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToRunLengthFeaturesFilterIUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToRunLengthFeaturesFilterIUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToRunLengthFeaturesFilterIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToRunLengthFeaturesFilterIUC2 in _itkScalarImageToRunLengthFeaturesFilterPython:
_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_swigregister(itkScalarImageToRunLengthFeaturesFilterIUC2)
itkScalarImageToRunLengthFeaturesFilterIUC2___New_orig__ = _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2___New_orig__
itkScalarImageToRunLengthFeaturesFilterIUC2_cast = _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_cast


def itkScalarImageToRunLengthFeaturesFilterIUC3_New():
    return itkScalarImageToRunLengthFeaturesFilterIUC3.New()

class itkScalarImageToRunLengthFeaturesFilterIUC3(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    This class computes run length descriptions from an image.

    By default, run length features are computed for each spatial
    direction and then averaged afterward, so it is possible to access the
    standard deviations of the texture features. These values give a clue
    as to texture anisotropy. However, doing this is much more work,
    because it involved computing one for each offset given. To compute a
    single matrix using the first offset, call FastCalculationsOn(). If
    this is called, then the texture standard deviations will not be
    computed (and will be set to zero), but texture computation will be
    much faster.

    This class is templated over the input image type.

    Template Parameters: The image type, and the type of histogram
    frequency container. If you are using a large number of bins per axis,
    a sparse frequency container may be advisable. The default is to use a
    dense frequency container.

    Inputs and parameters: An image

    A mask defining the region over which texture features will be
    calculated. (Optional)

    The pixel value that defines the "inside" of the mask. (Optional,
    defaults to 1 if a mask is set.)

    The set of features to be calculated. These features are defined in
    the HistogramToRunLengthFeaturesFilter class.

    The number of intensity bins. (Optional, defaults to 256.)

    The set of directions (offsets) to average across. (Optional, defaults
    to {(-1, 0), (-1, -1), (0, -1), (1, -1)} for 2D images and scales
    analogously for ND images.)

    The pixel intensity range over which the features will be calculated.
    (Optional, defaults to the full dynamic range of the pixel type.)

    The distance range over which the features will be calculated.
    (Optional, defaults to the full dynamic range of double type.)

    In general, the default parameter values should be sufficient.

    Outputs: (1) The average value of each feature. (2) The standard
    deviation in the values of each feature.

    Print references: M. M. Galloway. Texture analysis using gray level
    run lengths. Computer Graphics and Image Processing, 4:172-179, 1975.

    A. Chu, C. M. Sehgal, and J. F. Greenleaf. Use of gray value
    distribution of run lengths for texture analysis. Pattern Recognition
    Letters, 11:415-420, 1990.

    B. R. Dasarathy and E. B. Holder. Image characterizations based on
    joint gray-level run-length distributions. Pattern Recognition
    Letters, 12:490-502, 1991.

    IJ article:https://hdl.handle.net/1926/1374

    See:   ScalarImageToRunLengthFeaturesFilter

    See:   ScalarImageToRunLengthMatrixFilter

    See:   HistogramToRunLengthFeaturesFilter

    : Nick Tustison 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_Clone)
    GetFeatureMeansOutput = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_GetFeatureMeansOutput)
    GetFeatureStandardDeviationsOutput = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_GetFeatureStandardDeviationsOutput)
    SetInput = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_SetInput)
    GetInput = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_GetInput)
    GetFeatureMeans = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_GetFeatureMeans)
    GetFeatureStandardDeviations = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_GetFeatureStandardDeviations)
    SetRequestedFeatures = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_SetRequestedFeatures)
    GetRequestedFeatures = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_GetRequestedFeatures)
    SetOffsets = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_SetOffsets)
    GetOffsets = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_GetOffsets)
    SetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_SetNumberOfBinsPerAxis)
    SetPixelValueMinMax = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_SetPixelValueMinMax)
    SetDistanceValueMinMax = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_SetDistanceValueMinMax)
    SetMaskImage = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_GetMaskImage)
    SetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_SetInsidePixelValue)
    GetFastCalculations = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_GetFastCalculations)
    SetFastCalculations = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_SetFastCalculations)
    FastCalculationsOn = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_FastCalculationsOn)
    FastCalculationsOff = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_FastCalculationsOff)
    __swig_destroy__ = _itkScalarImageToRunLengthFeaturesFilterPython.delete_itkScalarImageToRunLengthFeaturesFilterIUC3
    cast = _swig_new_static_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToRunLengthFeaturesFilterIUC3

        Create a new object of the class itkScalarImageToRunLengthFeaturesFilterIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToRunLengthFeaturesFilterIUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToRunLengthFeaturesFilterIUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToRunLengthFeaturesFilterIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToRunLengthFeaturesFilterIUC3 in _itkScalarImageToRunLengthFeaturesFilterPython:
_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_swigregister(itkScalarImageToRunLengthFeaturesFilterIUC3)
itkScalarImageToRunLengthFeaturesFilterIUC3___New_orig__ = _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3___New_orig__
itkScalarImageToRunLengthFeaturesFilterIUC3_cast = _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_cast


def itkScalarImageToRunLengthFeaturesFilterIUS2_New():
    return itkScalarImageToRunLengthFeaturesFilterIUS2.New()

class itkScalarImageToRunLengthFeaturesFilterIUS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    This class computes run length descriptions from an image.

    By default, run length features are computed for each spatial
    direction and then averaged afterward, so it is possible to access the
    standard deviations of the texture features. These values give a clue
    as to texture anisotropy. However, doing this is much more work,
    because it involved computing one for each offset given. To compute a
    single matrix using the first offset, call FastCalculationsOn(). If
    this is called, then the texture standard deviations will not be
    computed (and will be set to zero), but texture computation will be
    much faster.

    This class is templated over the input image type.

    Template Parameters: The image type, and the type of histogram
    frequency container. If you are using a large number of bins per axis,
    a sparse frequency container may be advisable. The default is to use a
    dense frequency container.

    Inputs and parameters: An image

    A mask defining the region over which texture features will be
    calculated. (Optional)

    The pixel value that defines the "inside" of the mask. (Optional,
    defaults to 1 if a mask is set.)

    The set of features to be calculated. These features are defined in
    the HistogramToRunLengthFeaturesFilter class.

    The number of intensity bins. (Optional, defaults to 256.)

    The set of directions (offsets) to average across. (Optional, defaults
    to {(-1, 0), (-1, -1), (0, -1), (1, -1)} for 2D images and scales
    analogously for ND images.)

    The pixel intensity range over which the features will be calculated.
    (Optional, defaults to the full dynamic range of the pixel type.)

    The distance range over which the features will be calculated.
    (Optional, defaults to the full dynamic range of double type.)

    In general, the default parameter values should be sufficient.

    Outputs: (1) The average value of each feature. (2) The standard
    deviation in the values of each feature.

    Print references: M. M. Galloway. Texture analysis using gray level
    run lengths. Computer Graphics and Image Processing, 4:172-179, 1975.

    A. Chu, C. M. Sehgal, and J. F. Greenleaf. Use of gray value
    distribution of run lengths for texture analysis. Pattern Recognition
    Letters, 11:415-420, 1990.

    B. R. Dasarathy and E. B. Holder. Image characterizations based on
    joint gray-level run-length distributions. Pattern Recognition
    Letters, 12:490-502, 1991.

    IJ article:https://hdl.handle.net/1926/1374

    See:   ScalarImageToRunLengthFeaturesFilter

    See:   ScalarImageToRunLengthMatrixFilter

    See:   HistogramToRunLengthFeaturesFilter

    : Nick Tustison 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUS2_Clone)
    GetFeatureMeansOutput = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUS2_GetFeatureMeansOutput)
    GetFeatureStandardDeviationsOutput = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUS2_GetFeatureStandardDeviationsOutput)
    SetInput = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUS2_SetInput)
    GetInput = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUS2_GetInput)
    GetFeatureMeans = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUS2_GetFeatureMeans)
    GetFeatureStandardDeviations = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUS2_GetFeatureStandardDeviations)
    SetRequestedFeatures = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUS2_SetRequestedFeatures)
    GetRequestedFeatures = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUS2_GetRequestedFeatures)
    SetOffsets = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUS2_SetOffsets)
    GetOffsets = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUS2_GetOffsets)
    SetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUS2_SetNumberOfBinsPerAxis)
    SetPixelValueMinMax = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUS2_SetPixelValueMinMax)
    SetDistanceValueMinMax = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUS2_SetDistanceValueMinMax)
    SetMaskImage = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUS2_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUS2_GetMaskImage)
    SetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUS2_SetInsidePixelValue)
    GetFastCalculations = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUS2_GetFastCalculations)
    SetFastCalculations = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUS2_SetFastCalculations)
    FastCalculationsOn = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUS2_FastCalculationsOn)
    FastCalculationsOff = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUS2_FastCalculationsOff)
    __swig_destroy__ = _itkScalarImageToRunLengthFeaturesFilterPython.delete_itkScalarImageToRunLengthFeaturesFilterIUS2
    cast = _swig_new_static_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUS2_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToRunLengthFeaturesFilterIUS2

        Create a new object of the class itkScalarImageToRunLengthFeaturesFilterIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToRunLengthFeaturesFilterIUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToRunLengthFeaturesFilterIUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToRunLengthFeaturesFilterIUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToRunLengthFeaturesFilterIUS2 in _itkScalarImageToRunLengthFeaturesFilterPython:
_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUS2_swigregister(itkScalarImageToRunLengthFeaturesFilterIUS2)
itkScalarImageToRunLengthFeaturesFilterIUS2___New_orig__ = _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUS2___New_orig__
itkScalarImageToRunLengthFeaturesFilterIUS2_cast = _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUS2_cast


def itkScalarImageToRunLengthFeaturesFilterIUS3_New():
    return itkScalarImageToRunLengthFeaturesFilterIUS3.New()

class itkScalarImageToRunLengthFeaturesFilterIUS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    This class computes run length descriptions from an image.

    By default, run length features are computed for each spatial
    direction and then averaged afterward, so it is possible to access the
    standard deviations of the texture features. These values give a clue
    as to texture anisotropy. However, doing this is much more work,
    because it involved computing one for each offset given. To compute a
    single matrix using the first offset, call FastCalculationsOn(). If
    this is called, then the texture standard deviations will not be
    computed (and will be set to zero), but texture computation will be
    much faster.

    This class is templated over the input image type.

    Template Parameters: The image type, and the type of histogram
    frequency container. If you are using a large number of bins per axis,
    a sparse frequency container may be advisable. The default is to use a
    dense frequency container.

    Inputs and parameters: An image

    A mask defining the region over which texture features will be
    calculated. (Optional)

    The pixel value that defines the "inside" of the mask. (Optional,
    defaults to 1 if a mask is set.)

    The set of features to be calculated. These features are defined in
    the HistogramToRunLengthFeaturesFilter class.

    The number of intensity bins. (Optional, defaults to 256.)

    The set of directions (offsets) to average across. (Optional, defaults
    to {(-1, 0), (-1, -1), (0, -1), (1, -1)} for 2D images and scales
    analogously for ND images.)

    The pixel intensity range over which the features will be calculated.
    (Optional, defaults to the full dynamic range of the pixel type.)

    The distance range over which the features will be calculated.
    (Optional, defaults to the full dynamic range of double type.)

    In general, the default parameter values should be sufficient.

    Outputs: (1) The average value of each feature. (2) The standard
    deviation in the values of each feature.

    Print references: M. M. Galloway. Texture analysis using gray level
    run lengths. Computer Graphics and Image Processing, 4:172-179, 1975.

    A. Chu, C. M. Sehgal, and J. F. Greenleaf. Use of gray value
    distribution of run lengths for texture analysis. Pattern Recognition
    Letters, 11:415-420, 1990.

    B. R. Dasarathy and E. B. Holder. Image characterizations based on
    joint gray-level run-length distributions. Pattern Recognition
    Letters, 12:490-502, 1991.

    IJ article:https://hdl.handle.net/1926/1374

    See:   ScalarImageToRunLengthFeaturesFilter

    See:   ScalarImageToRunLengthMatrixFilter

    See:   HistogramToRunLengthFeaturesFilter

    : Nick Tustison 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUS3_Clone)
    GetFeatureMeansOutput = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUS3_GetFeatureMeansOutput)
    GetFeatureStandardDeviationsOutput = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUS3_GetFeatureStandardDeviationsOutput)
    SetInput = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUS3_SetInput)
    GetInput = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUS3_GetInput)
    GetFeatureMeans = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUS3_GetFeatureMeans)
    GetFeatureStandardDeviations = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUS3_GetFeatureStandardDeviations)
    SetRequestedFeatures = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUS3_SetRequestedFeatures)
    GetRequestedFeatures = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUS3_GetRequestedFeatures)
    SetOffsets = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUS3_SetOffsets)
    GetOffsets = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUS3_GetOffsets)
    SetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUS3_SetNumberOfBinsPerAxis)
    SetPixelValueMinMax = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUS3_SetPixelValueMinMax)
    SetDistanceValueMinMax = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUS3_SetDistanceValueMinMax)
    SetMaskImage = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUS3_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUS3_GetMaskImage)
    SetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUS3_SetInsidePixelValue)
    GetFastCalculations = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUS3_GetFastCalculations)
    SetFastCalculations = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUS3_SetFastCalculations)
    FastCalculationsOn = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUS3_FastCalculationsOn)
    FastCalculationsOff = _swig_new_instance_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUS3_FastCalculationsOff)
    __swig_destroy__ = _itkScalarImageToRunLengthFeaturesFilterPython.delete_itkScalarImageToRunLengthFeaturesFilterIUS3
    cast = _swig_new_static_method(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUS3_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToRunLengthFeaturesFilterIUS3

        Create a new object of the class itkScalarImageToRunLengthFeaturesFilterIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToRunLengthFeaturesFilterIUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToRunLengthFeaturesFilterIUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToRunLengthFeaturesFilterIUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToRunLengthFeaturesFilterIUS3 in _itkScalarImageToRunLengthFeaturesFilterPython:
_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUS3_swigregister(itkScalarImageToRunLengthFeaturesFilterIUS3)
itkScalarImageToRunLengthFeaturesFilterIUS3___New_orig__ = _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUS3___New_orig__
itkScalarImageToRunLengthFeaturesFilterIUS3_cast = _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def scalar_image_to_run_length_features_filter(*args, **kwargs):
    """Procedural interface for ScalarImageToRunLengthFeaturesFilter"""
    import itk
    instance = itk.ScalarImageToRunLengthFeaturesFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def scalar_image_to_run_length_features_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ScalarImageToRunLengthFeaturesFilter, itkTemplate.itkTemplate):
        filter_object = itk.ScalarImageToRunLengthFeaturesFilter.values()[0]
    else:
        filter_object = itk.ScalarImageToRunLengthFeaturesFilter

    scalar_image_to_run_length_features_filter.__doc__ = filter_object.__doc__
    scalar_image_to_run_length_features_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    scalar_image_to_run_length_features_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.ScalarImageToRunLengthFeaturesFilter, itkTemplate.itkTemplate):
        scalar_image_to_run_length_features_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        scalar_image_to_run_length_features_filter.__doc__ += "\n"
        scalar_image_to_run_length_features_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        scalar_image_to_run_length_features_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



