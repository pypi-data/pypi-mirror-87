# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKFFTPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkHalfToFullHermitianImageFilterPython
else:
    import _itkHalfToFullHermitianImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkHalfToFullHermitianImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkHalfToFullHermitianImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImageToImageFilterBPython
import itk.itkImagePython
import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkFixedArrayPython
import itk.itkSizePython
import itk.itkCovariantVectorPython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkRGBPixelPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
import itk.itkSimpleDataObjectDecoratorPython
import itk.itkArrayPython

def itkHalfToFullHermitianImageFilterICF2_New():
    return itkHalfToFullHermitianImageFilterICF2.New()

class itkHalfToFullHermitianImageFilterICF2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF2):
    r"""


    Expands a half image produced from a real-to-complex discrete Fourier
    transform (DFT) to the full complex image.

    The subclasses of RealToHalfHermitianForwardFFTImageFilter produce
    only the non-redundant half of the image resulting from a real-to-
    complex DFT. This filter takes the non-redundant half image and
    generates the full complex image that includes the redundant half. It
    requires additional information about the output image size, namely,
    whether the size in the first dimension of the output image is odd.

    See:   RealToHalfHermitianForwardFFTImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHalfToFullHermitianImageFilterPython.itkHalfToFullHermitianImageFilterICF2___New_orig__)
    Clone = _swig_new_instance_method(_itkHalfToFullHermitianImageFilterPython.itkHalfToFullHermitianImageFilterICF2_Clone)
    SetActualXDimensionIsOddInput = _swig_new_instance_method(_itkHalfToFullHermitianImageFilterPython.itkHalfToFullHermitianImageFilterICF2_SetActualXDimensionIsOddInput)
    SetActualXDimensionIsOdd = _swig_new_instance_method(_itkHalfToFullHermitianImageFilterPython.itkHalfToFullHermitianImageFilterICF2_SetActualXDimensionIsOdd)
    GetActualXDimensionIsOddInput = _swig_new_instance_method(_itkHalfToFullHermitianImageFilterPython.itkHalfToFullHermitianImageFilterICF2_GetActualXDimensionIsOddInput)
    GetActualXDimensionIsOdd = _swig_new_instance_method(_itkHalfToFullHermitianImageFilterPython.itkHalfToFullHermitianImageFilterICF2_GetActualXDimensionIsOdd)
    ActualXDimensionIsOddOn = _swig_new_instance_method(_itkHalfToFullHermitianImageFilterPython.itkHalfToFullHermitianImageFilterICF2_ActualXDimensionIsOddOn)
    ActualXDimensionIsOddOff = _swig_new_instance_method(_itkHalfToFullHermitianImageFilterPython.itkHalfToFullHermitianImageFilterICF2_ActualXDimensionIsOddOff)
    __swig_destroy__ = _itkHalfToFullHermitianImageFilterPython.delete_itkHalfToFullHermitianImageFilterICF2
    cast = _swig_new_static_method(_itkHalfToFullHermitianImageFilterPython.itkHalfToFullHermitianImageFilterICF2_cast)

    def New(*args, **kargs):
        """New() -> itkHalfToFullHermitianImageFilterICF2

        Create a new object of the class itkHalfToFullHermitianImageFilterICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHalfToFullHermitianImageFilterICF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHalfToFullHermitianImageFilterICF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHalfToFullHermitianImageFilterICF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHalfToFullHermitianImageFilterICF2 in _itkHalfToFullHermitianImageFilterPython:
_itkHalfToFullHermitianImageFilterPython.itkHalfToFullHermitianImageFilterICF2_swigregister(itkHalfToFullHermitianImageFilterICF2)
itkHalfToFullHermitianImageFilterICF2___New_orig__ = _itkHalfToFullHermitianImageFilterPython.itkHalfToFullHermitianImageFilterICF2___New_orig__
itkHalfToFullHermitianImageFilterICF2_cast = _itkHalfToFullHermitianImageFilterPython.itkHalfToFullHermitianImageFilterICF2_cast


def itkHalfToFullHermitianImageFilterICF3_New():
    return itkHalfToFullHermitianImageFilterICF3.New()

class itkHalfToFullHermitianImageFilterICF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF3):
    r"""


    Expands a half image produced from a real-to-complex discrete Fourier
    transform (DFT) to the full complex image.

    The subclasses of RealToHalfHermitianForwardFFTImageFilter produce
    only the non-redundant half of the image resulting from a real-to-
    complex DFT. This filter takes the non-redundant half image and
    generates the full complex image that includes the redundant half. It
    requires additional information about the output image size, namely,
    whether the size in the first dimension of the output image is odd.

    See:   RealToHalfHermitianForwardFFTImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHalfToFullHermitianImageFilterPython.itkHalfToFullHermitianImageFilterICF3___New_orig__)
    Clone = _swig_new_instance_method(_itkHalfToFullHermitianImageFilterPython.itkHalfToFullHermitianImageFilterICF3_Clone)
    SetActualXDimensionIsOddInput = _swig_new_instance_method(_itkHalfToFullHermitianImageFilterPython.itkHalfToFullHermitianImageFilterICF3_SetActualXDimensionIsOddInput)
    SetActualXDimensionIsOdd = _swig_new_instance_method(_itkHalfToFullHermitianImageFilterPython.itkHalfToFullHermitianImageFilterICF3_SetActualXDimensionIsOdd)
    GetActualXDimensionIsOddInput = _swig_new_instance_method(_itkHalfToFullHermitianImageFilterPython.itkHalfToFullHermitianImageFilterICF3_GetActualXDimensionIsOddInput)
    GetActualXDimensionIsOdd = _swig_new_instance_method(_itkHalfToFullHermitianImageFilterPython.itkHalfToFullHermitianImageFilterICF3_GetActualXDimensionIsOdd)
    ActualXDimensionIsOddOn = _swig_new_instance_method(_itkHalfToFullHermitianImageFilterPython.itkHalfToFullHermitianImageFilterICF3_ActualXDimensionIsOddOn)
    ActualXDimensionIsOddOff = _swig_new_instance_method(_itkHalfToFullHermitianImageFilterPython.itkHalfToFullHermitianImageFilterICF3_ActualXDimensionIsOddOff)
    __swig_destroy__ = _itkHalfToFullHermitianImageFilterPython.delete_itkHalfToFullHermitianImageFilterICF3
    cast = _swig_new_static_method(_itkHalfToFullHermitianImageFilterPython.itkHalfToFullHermitianImageFilterICF3_cast)

    def New(*args, **kargs):
        """New() -> itkHalfToFullHermitianImageFilterICF3

        Create a new object of the class itkHalfToFullHermitianImageFilterICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHalfToFullHermitianImageFilterICF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHalfToFullHermitianImageFilterICF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHalfToFullHermitianImageFilterICF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHalfToFullHermitianImageFilterICF3 in _itkHalfToFullHermitianImageFilterPython:
_itkHalfToFullHermitianImageFilterPython.itkHalfToFullHermitianImageFilterICF3_swigregister(itkHalfToFullHermitianImageFilterICF3)
itkHalfToFullHermitianImageFilterICF3___New_orig__ = _itkHalfToFullHermitianImageFilterPython.itkHalfToFullHermitianImageFilterICF3___New_orig__
itkHalfToFullHermitianImageFilterICF3_cast = _itkHalfToFullHermitianImageFilterPython.itkHalfToFullHermitianImageFilterICF3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def half_to_full_hermitian_image_filter(*args, **kwargs):
    """Procedural interface for HalfToFullHermitianImageFilter"""
    import itk
    instance = itk.HalfToFullHermitianImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def half_to_full_hermitian_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.HalfToFullHermitianImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.HalfToFullHermitianImageFilter.values()[0]
    else:
        filter_object = itk.HalfToFullHermitianImageFilter

    half_to_full_hermitian_image_filter.__doc__ = filter_object.__doc__
    half_to_full_hermitian_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    half_to_full_hermitian_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.HalfToFullHermitianImageFilter, itkTemplate.itkTemplate):
        half_to_full_hermitian_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        half_to_full_hermitian_image_filter.__doc__ += "\n"
        half_to_full_hermitian_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        half_to_full_hermitian_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



