{"version":3,"sources":["store/actions.ts","utils/requests.ts","components/DataNodeActions.tsx","components/DataSourceViewer.tsx","components/PythonEditor.tsx","components/SourceConfigEditor.tsx","store/reducers.ts","store/state.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["addSources","sources","type","setSelectedSource","source","updateSource","updateNode","node","httpRequest","a","method","url","body","params","resolve","reject","onStart","onFinish","URLSearchParams","toString","fetch","headers","JSON","stringify","response","ok","json","data","Error","statusText","detail","message","ViewButton","dispatch","page","useState","loading","setLoading","onClick","window","open","error","openNewTab","dtaleChartsUrl","dtaleUrl","icon","LineChartOutlined","TableOutlined","ViewTableButton","ViewChartsButton","ShutdownButton","title","then","catch","newNode","disabled","PoweroffOutlined","NodeDescription","closable","href","target","rel","DataSourceViewer","size","bordered","dataSource","Object","values","nodes","renderItem","Item","actions","Meta","path","description","PythonEditor","name","value","onChange","width","theme","maxLines","minLines","editorProps","$blockScrolling","wrapEnabled","additionalProps","mode","Label","text","style","marginTop","marginBottom","Editor","setError","clone","checkRequired","requiredFields","missing","filter","f","length","join","every","submitCreate","updatedSource","submitUpdate","onClose","visible","editable","defaultValue","e","readOnly","listPaths","v","getData","block","reducer","state","action","selectedSource","map","s","id","sourceId","updatedNode","fromEntries","entries","k","dataId","initialState","undefined","Content","Layout","App","useReducer","useEffect","loadSourceNodes","nodesFullyLoaded","keys","forEach","className","subTitle","extra","key","packageName","defaultActiveKey","Panel","header","some","color","event","stopPropagation","SettingOutlined","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.f3c5961e.chunk.js","sourcesContent":["import { DataNode, DataSource } from \"./state\";\n\nexport const ACTION_TYPES = [\n  \"ADD_SOURCES\",\n  \"SET_SELECTED_SOURCE\",\n  \"UPDATE_SOURCE\",\n  \"UPDATE_NODE\",\n] as const;\n\nexport const addSources = (sources: DataSource[]) => ({\n  type: \"ADD_SOURCES\" as \"ADD_SOURCES\",\n  sources: sources,\n});\n\nexport const setSelectedSource = (source: DataSource | null) => ({\n  type: \"SET_SELECTED_SOURCE\" as \"SET_SELECTED_SOURCE\",\n  source: source,\n});\n\nexport const updateSource = (source: DataSource) => ({\n  type: \"UPDATE_SOURCE\" as \"UPDATE_SOURCE\",\n  source: source,\n});\n\nexport const updateNode = (node: DataNode) => ({\n  type: \"UPDATE_NODE\" as \"UPDATE_NODE\",\n  node: node,\n});\n\nexport type Action = ReturnType<\n  | typeof addSources\n  | typeof setSelectedSource\n  | typeof updateSource\n  | typeof updateNode\n>;\n","interface SharedParams {\n  url: string;\n  resolve: (data: any) => any;\n  reject: (error: string) => any;\n  params?: { [k: string]: string };\n  onStart?: () => any;\n  onFinish?: () => any;\n}\n\ninterface ReadParams extends SharedParams {\n  method: \"GET\";\n  body?: undefined;\n}\n\ninterface WriteParams extends SharedParams {\n  method: \"POST\";\n  body: Object;\n}\n\nexport type RequestParams = ReadParams | WriteParams;\n\nexport const httpRequest = async ({\n  method,\n  url,\n  body,\n  params,\n  resolve,\n  reject,\n  onStart,\n  onFinish,\n}: RequestParams) => {\n  if (onStart) {\n    onStart();\n  }\n  if (params) {\n    url = `${url}?${new URLSearchParams(params).toString()}`;\n  }\n  try {\n    const response = await fetch(url, {\n      method: method,\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(body),\n    });\n    if (!response.ok) {\n      const data = await response.json();\n      throw new Error(`${response.statusText}: ${data.detail}`);\n    }\n    const data = await response.json();\n    resolve(data);\n  } catch (error) {\n    reject(error.message);\n  }\n  if (onFinish) {\n    onFinish();\n  }\n};\n\nexport const openNewTab = (url: string) => {\n  try {\n    window.open(url);\n  } catch (error) {\n    // do nothing\n  }\n};\n","import React, { Dispatch, useState } from \"react\";\nimport { DataNode } from \"../store/state\";\nimport { updateNode } from \"../store/actions\";\nimport { Button } from \"antd\";\nimport { httpRequest, openNewTab } from \"../utils/requests\";\nimport {\n  LineChartOutlined,\n  TableOutlined,\n  PoweroffOutlined,\n} from \"@ant-design/icons\";\n\nconst ViewButton: React.FC<{\n  dispatch: Dispatch<any>;\n  node: DataNode;\n  page: \"table\" | \"charts\";\n}> = ({ dispatch, node, page = \"table\" }) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  return (\n    <Button\n      onClick={() => {\n        httpRequest({\n          method: \"POST\",\n          url: \"/node/view/\",\n          body: node,\n          resolve: (data: DataNode) => {\n            openNewTab(\n              page === \"charts\" ? data.dtaleChartsUrl! : data.dtaleUrl!\n            );\n            dispatch(updateNode(data));\n          },\n          reject: (error: string) =>\n            dispatch(updateNode({ ...node, error: error })),\n          onStart: () => setLoading(true),\n          onFinish: () => setLoading(false),\n        });\n      }}\n      loading={loading}\n      icon={page === \"charts\" ? <LineChartOutlined /> : <TableOutlined />}\n    >\n      {`${page === \"charts\" ? \"Charts\" : \"Table\"}`}\n    </Button>\n  );\n};\n\nexport const ViewTableButton: React.FC<{\n  dispatch: Dispatch<any>;\n  node: DataNode;\n}> = ({ dispatch, node }) => (\n  <ViewButton dispatch={dispatch} node={node} page=\"table\" />\n);\n\nexport const ViewChartsButton: React.FC<{\n  dispatch: Dispatch<any>;\n  node: DataNode;\n}> = ({ dispatch, node }) => (\n  <ViewButton dispatch={dispatch} node={node} page=\"charts\" />\n);\n\nexport const ShutdownButton: React.FC<{\n  dispatch: Dispatch<any>;\n  node: DataNode;\n}> = ({ dispatch, node }) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  return (\n    <Button\n      title=\"shut down\"\n      onClick={() => {\n        setLoading(true);\n        fetch(\"node/kill/\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify(node),\n        })\n          .then((response) => response.json())\n          .then((node: DataNode) => {\n            dispatch(updateNode(node));\n            setLoading(false);\n          })\n          .catch((error) => {\n            const newNode = { ...node, error: error };\n            dispatch(updateNode(newNode));\n            setLoading(true);\n          });\n      }}\n      disabled={!node.dtaleUrl}\n      loading={loading}\n      icon={<PoweroffOutlined />}\n    ></Button>\n  );\n};\n","import React, { Dispatch } from \"react\";\nimport { DataSource, DataNode } from \"../store/state\";\nimport { Action } from \"../store/actions\";\nimport { List, Alert } from \"antd\";\nimport {\n  ViewTableButton,\n  ViewChartsButton,\n  ShutdownButton,\n} from \"./DataNodeActions\";\n\ntype Props = {\n  dispatch: Dispatch<Action>;\n  source: DataSource;\n};\n\nconst NodeDescription: React.FC<DataNode> = ({ error, dtaleUrl }) => {\n  if (error) {\n    return <Alert type=\"error\" message={error} closable />;\n  } else if (dtaleUrl) {\n    return <a href={dtaleUrl} target=\"_blank\" rel=\"noopener noreferrer\">{dtaleUrl}</a>;\n  } else {\n    return null;\n  }\n};\n\nconst DataSourceViewer: React.FC<Props> = ({ dispatch, source }) => (\n  <List\n    size=\"small\"\n    bordered\n    dataSource={Object.values(source.nodes)}\n    renderItem={(node) => (\n      <List.Item\n        actions={[\n          <ViewTableButton dispatch={dispatch} node={node} />,\n          <ViewChartsButton dispatch={dispatch} node={node} />,\n          <ShutdownButton dispatch={dispatch} node={node} />,\n        ]}\n      >\n        <List.Item.Meta\n          title={node.path}\n          description={<NodeDescription {...node} />}\n        />\n      </List.Item>\n    )}\n  />\n);\n\nexport default DataSourceViewer;\n","import React from \"react\";\nimport AceEditor, { IAceEditorProps } from \"react-ace\";\n\nimport \"ace-builds/src-noconflict/mode-python\";\nimport \"ace-builds/src-noconflict/theme-monokai\";\n\ntype RequiredProps = \"name\" | \"value\" | \"onChange\" | \"width\";\n\ntype Props = Required<Pick<IAceEditorProps, RequiredProps>> &\n  Omit<IAceEditorProps, RequiredProps>;\n\nconst PythonEditor: React.FC<Props> = ({\n  name,\n  value,\n  onChange,\n  width,\n  theme = \"monokai\",\n  maxLines = 20,\n  minLines = 4,\n  editorProps = { $blockScrolling: true },\n  wrapEnabled = true,\n  ...additionalProps\n}) => (\n  <AceEditor\n    mode=\"python\"\n    name={name}\n    value={value}\n    onChange={onChange}\n    width={width}\n    theme={theme}\n    maxLines={maxLines}\n    minLines={minLines}\n    editorProps={editorProps}\n    wrapEnabled={wrapEnabled}\n    {...additionalProps}\n  />\n);\n\nexport { PythonEditor };\n","import React, { useState, Dispatch } from \"react\";\nimport { Drawer, Button, Input, Alert } from \"antd\";\nimport { httpRequest } from \"../utils/requests\";\nimport { addSources, updateSource, setSelectedSource } from \"../store/actions\";\nimport { DataSource } from \"../store/state\";\nimport { PythonEditor } from \"./PythonEditor\";\n\ntype Props = {\n  source: DataSource;\n  dispatch: Dispatch<any>;\n};\n\nconst Label: React.FC<{ text: string }> = ({ text }) => (\n  <div style={{ marginTop: 5, marginBottom: 5 }}>{text}</div>\n);\n\nconst Editor: React.FC<Props> = ({ source, dispatch }) => {\n  const [error, setError] = useState<string | null>(null);\n\n  // Determine if new source or existing\n  const mode: \"edit\" | \"new\" = source.name !== \"\" ? \"edit\" : \"new\";\n\n  // Make a copy of the source object and edit that.\n  const clone: DataSource = { ...source };\n\n  const checkRequired = (): boolean => {\n    const requiredFields = [\"name\", \"listPaths\", \"getData\"] as const;\n    const missing = requiredFields.filter((f) => !clone[f]);\n    if (missing.length > 0) {\n      setError(`Fill out the required fields: ${missing.join(\", \")}`);\n      return false;\n    } else if (\n      mode === \"edit\" &&\n      requiredFields.every((f) => clone[f] === source[f])\n    ) {\n      setError(\"No changes were made\");\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  const submitCreate = async () => {\n    if (checkRequired()) {\n      const { nodes, ...updatedSource } = clone;\n      httpRequest({\n        method: \"POST\",\n        url: \"/source/create/\",\n        body: updatedSource,\n        resolve: (data: DataSource) => {\n          dispatch(addSources([data]));\n          dispatch(setSelectedSource(null));\n        },\n        reject: (error) => setError(error),\n      });\n    }\n  };\n\n  const submitUpdate = async () => {\n    if (checkRequired()) {\n      const { nodes, ...updatedSource } = clone;\n      httpRequest({\n        method: \"POST\",\n        url: \"/source/update/\",\n        body: updatedSource,\n        resolve: (data: DataSource) => {\n          dispatch(updateSource(data));\n          dispatch(setSelectedSource(null));\n        },\n        reject: (error) => setError(error),\n      });\n    }\n  };\n\n  return (\n    <Drawer\n      title={mode === \"new\" ? \"Add Data Source\" : \"Edit Data Source\"}\n      width={720}\n      onClose={() => dispatch(setSelectedSource(null))}\n      visible={true}\n    >\n      {error ? (\n        <Alert\n          type=\"error\"\n          message={error}\n          closable\n          onClose={() => setError(null)}\n        />\n      ) : null}\n      <Label text=\"Name\" />\n      <Input\n        disabled={!source.editable}\n        defaultValue={clone.name}\n        onChange={(e) => {\n          clone.name = e.target.value;\n        }}\n        size=\"small\"\n      />\n      <Label text=\"list_paths.py\" />\n      <PythonEditor\n        readOnly={!source.editable}\n        name=\"list_paths_code\"\n        value={clone.listPaths}\n        onChange={(v) => {\n          clone.listPaths = v;\n        }}\n        width=\"600\"\n        maxLines={16}\n        minLines={16}\n      />\n      <Label text=\"get_data.py\" />\n      <PythonEditor\n        readOnly={!source.editable}\n        name=\"get_data_code\"\n        value={clone.getData}\n        onChange={(v) => {\n          clone.getData = v;\n        }}\n        width=\"600\"\n        maxLines={16}\n        minLines={16}\n      />\n      {source.editable ? (\n        <Button\n          type=\"primary\"\n          block\n          style={{ marginTop: 10 }}\n          onClick={() => {\n            if (mode === \"new\") {\n              submitCreate();\n            } else {\n              submitUpdate();\n            }\n          }}\n        >\n          Submit\n        </Button>\n      ) : null}\n    </Drawer>\n  );\n};\n\nexport default Editor;\n","import { DataNode, DataSource, RootState } from \"./state\";\nimport { Action } from \"./actions\";\n\nconst updateSourceNode = (\n  source: DataSource,\n  updatedNode: DataNode\n): DataSource => {\n  return {\n    ...source,\n    nodes: Object.fromEntries(\n      Object.entries(source.nodes).map(([k, node]) =>\n        node.dataId === updatedNode.dataId ? [k, updatedNode] : [k, node]\n      )\n    ),\n  };\n};\n\nexport function reducer(state: RootState, action: Action): RootState {\n  switch (action.type) {\n    case \"ADD_SOURCES\":\n      return {\n        ...state,\n        sources: [...action.sources, ...(state.sources || [])],\n      };\n    case \"SET_SELECTED_SOURCE\":\n      return {\n        ...state,\n        selectedSource: action.source,\n      };\n    case \"UPDATE_SOURCE\":\n      return {\n        ...state,\n        sources: state.sources!.map((s) =>\n          s.id === action.source.id ? action.source : s\n        ),\n      };\n    case \"UPDATE_NODE\":\n      return {\n        ...state,\n        sources: state.sources!.map((s) =>\n          s.id === action.node.sourceId ? updateSourceNode(s, action.node) : s\n        ),\n      };\n    default:\n      return { ...state, sources: state.sources || [] };\n  }\n}\n","export type DataNode = {\n  sourceId: string;\n  path: string;\n  dataId: string;\n  dtaleUrl: null | string;\n  dtaleChartsUrl: null | string;\n  error?: string;\n};\n\nexport type DataSource = {\n  id: string;\n  name: string;\n  packageName: string;\n  nodes: { [k: string]: DataNode };\n  nodesFullyLoaded: boolean;\n  visible: boolean;\n  editable: boolean;\n  listPaths: string;\n  getData: string;\n  loading?: boolean;\n};\n\nexport type RootState = {\n  sources?: DataSource[];\n  selectedSource: DataSource | null;\n};\n\nexport const initialState: RootState = {\n  sources: undefined,\n  selectedSource: null,\n};\n","import React, { useEffect, useReducer } from \"react\";\nimport {\n  Layout,\n  Button,\n  PageHeader,\n  Spin,\n  Collapse,\n  Tag,\n  Space,\n} from \"antd\";\nimport { SettingOutlined } from \"@ant-design/icons\";\nimport \"antd/dist/antd.css\";\nimport \"./App.css\";\nimport DataSourceViewer from \"./components/DataSourceViewer\";\nimport ConfigEditor from \"./components/SourceConfigEditor\";\nimport { addSources, setSelectedSource, updateSource } from \"./store/actions\";\nimport { reducer } from \"./store/reducers\";\nimport { initialState, DataSource } from \"./store/state\";\nimport { httpRequest } from \"./utils/requests\";\n\nconst { Content } = Layout;\n\nconst listPathsTemplate: string = `from typing import Iterable\n\n\ndef main() -> Iterable[str]:\n    \"\"\"\n    Return an iterable of paths identifying where data is located, such as file paths or URLs.\n    These paths will be passed to your function in get_data.py.\n    \"\"\"\n    raise NotImplementedError()\n`;\n\nconst getDataTemplate: string = `import pandas as pd\n\n\ndef main(path: str) -> pd.DataFrame:\n    \"\"\"\n    Given a path, retrieve that data and return it as a pandas dataframe\n    \"\"\"\n    raise NotImplementedError()\n`;\n\nconst templateDataSource = (): DataSource => ({\n  id: \"\",\n  name: \"\",\n  packageName: \"\",\n  nodes: {},\n  nodesFullyLoaded: false,\n  visible: true,\n  editable: true,\n  listPaths: listPathsTemplate,\n  getData: getDataTemplate,\n});\n\nconst App = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  useEffect(() => {\n    httpRequest({\n      method: \"GET\",\n      url: \"/source/list/\",\n      resolve: (sources) => dispatch(addSources(sources)),\n      reject: (error) => null,\n    });\n  }, []);\n\n  const loadSourceNodes = (source: DataSource) => {\n    dispatch(updateSource({ ...source, loading: true }));\n    httpRequest({\n      method: \"POST\",\n      url: \"/source/nodes/list/\",\n      body: source,\n      resolve: (data) => dispatch(updateSource({ ...data, loading: false })),\n      reject: (error) => dispatch(updateSource({ ...source, loading: false })),\n    });\n  };\n\n  useEffect(() => {\n    if (state.sources !== undefined) {\n      state.sources\n        .filter(\n          (source) =>\n            !source.nodesFullyLoaded &&\n            !source.loading &&\n            Object.keys(source.nodes || {}).length === 0\n        )\n        .forEach((source) => {\n          loadSourceNodes(source);\n        });\n    }\n  }, [state.sources]);\n\n  return (\n    <Layout className=\"layout\">\n      <Content style={{ width: \"100vw\" }}>\n        <PageHeader\n          title=\"D-Tale Desktop\"\n          className=\"site-page-header\"\n          subTitle=\"\"\n          extra={[\n            <Button\n              key=\"newDataSource\"\n              type=\"primary\"\n              onClick={() => {\n                dispatch(setSelectedSource(templateDataSource()));\n              }}\n            >\n              Add Data Source\n            </Button>,\n          ]}\n        />\n        <div style={{ width: \"100%\" }}>\n          {state.sources === undefined ? (\n            <Spin />\n          ) : (\n            <Collapse defaultActiveKey={[]}>\n              {state.sources.map((source) => (\n                <Collapse.Panel\n                  key={source.id}\n                  disabled={source.loading}\n                  header={\n                    <Space>\n                      <span>{source.name}</span>\n                      <Tag>\n                        {source.loading ? (\n                          <Spin size=\"small\" />\n                        ) : (\n                          `${Object.keys(source.nodes).length} results`\n                        )}\n                      </Tag>\n                      {!Object.values(source.nodes || {}).some(\n                        (node) => node.dtaleUrl\n                      ) ? null : (\n                        <Tag color=\"green\">\n                          {`${\n                            Object.values(source.nodes).filter(\n                              (node) => node.dtaleUrl\n                            ).length\n                          } active`}\n                        </Tag>\n                      )}\n                      {source.nodesFullyLoaded ? null : (\n                        <Button\n                          key={`${source.id}loadmore`}\n                          size=\"small\"\n                          onClick={(event) => {\n                            event.stopPropagation();\n                            loadSourceNodes(source);\n                          }}\n                        >\n                          Load more\n                        </Button>\n                      )}\n                    </Space>\n                  }\n                  extra={\n                    <Button\n                      icon={<SettingOutlined />}\n                      onClick={(event) => {\n                        event.stopPropagation();\n                        dispatch(setSelectedSource(source));\n                      }}\n                    >\n                      Settings\n                    </Button>\n                  }\n                >\n                  <DataSourceViewer dispatch={dispatch} source={source} />\n                </Collapse.Panel>\n              ))}\n            </Collapse>\n          )}\n        </div>\n        {state.selectedSource ? (\n          <ConfigEditor source={state.selectedSource} dispatch={dispatch} />\n        ) : null}\n      </Content>\n    </Layout>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}