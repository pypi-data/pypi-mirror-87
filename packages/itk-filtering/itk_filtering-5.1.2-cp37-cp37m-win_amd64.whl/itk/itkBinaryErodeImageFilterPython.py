# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKBinaryMathematicalMorphologyPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkBinaryErodeImageFilterPython
else:
    import _itkBinaryErodeImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkBinaryErodeImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkBinaryErodeImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkBinaryDilateImageFilterPython
import itk.itkFlatStructuringElementPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkBoxImageFilterPython
import itk.itkImageToImageFilterAPython
import itk.itkImagePython
import itk.ITKCommonBasePython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkRGBPixelPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
import itk.itkNeighborhoodPython

def itkBinaryErodeImageFilterID2ID2SE2_New():
    return itkBinaryErodeImageFilterID2ID2SE2.New()

class itkBinaryErodeImageFilterID2ID2SE2(itk.itkBinaryDilateImageFilterPython.itkBinaryDilateImageFilterID2ID2SE2_Superclass):
    r"""


    Fast binary erosion of a single intensity value in the image.

    BinaryErodeImageFilter is a binary erosion morphologic operation on
    the foreground of an image. Only the value designated by the intensity
    value "SetForegroundValue()" (alias as SetErodeValue()) is
    considered as foreground, and other intensity values are considered
    background.

    Gray scale images can be processed as binary images by selecting a
    "ForegroundValue" (alias "ErodeValue"). Pixel values matching the
    erode value are considered the "foreground" and all other pixels are
    "background". This is useful in processing segmented images where
    all pixels in segment #1 have value 1 and pixels in segment #2 have
    value 2, etc. A particular "segment number" can be processed.
    ForegroundValue defaults to the maximum possible value of the
    PixelType. The eroded pixels will receive the BackgroundValue
    (defaults to NumericTraits::NonpositiveMin() ).

    The structuring element is assumed to be composed of binary values
    (zero or one). Only elements of the structuring element having values
    > 0 are candidates for affecting the center pixel. A reasonable choice
    of structuring element is itk::BinaryBallStructuringElement.

    This implementation is based on the papers:

    L.Vincent "Morphological transformations of binary images with
    arbitrary structuring elements", and

    N.Nikopoulos et al. "An efficient algorithm for 3d binary
    morphological transformations with 3d structuring elements for
    arbitrary size and shape". IEEE Transactions on Image Processing.
    Vol. 9. No. 3. 2000. pp. 283-286.

    See:  ImageToImageFilter BinaryDilateImageFilter
    BinaryMorphologyImageFilter
    {Filtering/BinaryMathematicalMorphology/ErodeABinaryImage,Erode A
    Binary Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterID2ID2SE2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterID2ID2SE2_Clone)
    SetErodeValue = _swig_new_instance_method(_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterID2ID2SE2_SetErodeValue)
    GetErodeValue = _swig_new_instance_method(_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterID2ID2SE2_GetErodeValue)
    __swig_destroy__ = _itkBinaryErodeImageFilterPython.delete_itkBinaryErodeImageFilterID2ID2SE2
    cast = _swig_new_static_method(_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterID2ID2SE2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryErodeImageFilterID2ID2SE2

        Create a new object of the class itkBinaryErodeImageFilterID2ID2SE2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryErodeImageFilterID2ID2SE2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryErodeImageFilterID2ID2SE2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryErodeImageFilterID2ID2SE2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryErodeImageFilterID2ID2SE2 in _itkBinaryErodeImageFilterPython:
_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterID2ID2SE2_swigregister(itkBinaryErodeImageFilterID2ID2SE2)
itkBinaryErodeImageFilterID2ID2SE2___New_orig__ = _itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterID2ID2SE2___New_orig__
itkBinaryErodeImageFilterID2ID2SE2_cast = _itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterID2ID2SE2_cast


def itkBinaryErodeImageFilterID3ID3SE3_New():
    return itkBinaryErodeImageFilterID3ID3SE3.New()

class itkBinaryErodeImageFilterID3ID3SE3(itk.itkBinaryDilateImageFilterPython.itkBinaryDilateImageFilterID3ID3SE3_Superclass):
    r"""


    Fast binary erosion of a single intensity value in the image.

    BinaryErodeImageFilter is a binary erosion morphologic operation on
    the foreground of an image. Only the value designated by the intensity
    value "SetForegroundValue()" (alias as SetErodeValue()) is
    considered as foreground, and other intensity values are considered
    background.

    Gray scale images can be processed as binary images by selecting a
    "ForegroundValue" (alias "ErodeValue"). Pixel values matching the
    erode value are considered the "foreground" and all other pixels are
    "background". This is useful in processing segmented images where
    all pixels in segment #1 have value 1 and pixels in segment #2 have
    value 2, etc. A particular "segment number" can be processed.
    ForegroundValue defaults to the maximum possible value of the
    PixelType. The eroded pixels will receive the BackgroundValue
    (defaults to NumericTraits::NonpositiveMin() ).

    The structuring element is assumed to be composed of binary values
    (zero or one). Only elements of the structuring element having values
    > 0 are candidates for affecting the center pixel. A reasonable choice
    of structuring element is itk::BinaryBallStructuringElement.

    This implementation is based on the papers:

    L.Vincent "Morphological transformations of binary images with
    arbitrary structuring elements", and

    N.Nikopoulos et al. "An efficient algorithm for 3d binary
    morphological transformations with 3d structuring elements for
    arbitrary size and shape". IEEE Transactions on Image Processing.
    Vol. 9. No. 3. 2000. pp. 283-286.

    See:  ImageToImageFilter BinaryDilateImageFilter
    BinaryMorphologyImageFilter
    {Filtering/BinaryMathematicalMorphology/ErodeABinaryImage,Erode A
    Binary Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterID3ID3SE3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterID3ID3SE3_Clone)
    SetErodeValue = _swig_new_instance_method(_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterID3ID3SE3_SetErodeValue)
    GetErodeValue = _swig_new_instance_method(_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterID3ID3SE3_GetErodeValue)
    __swig_destroy__ = _itkBinaryErodeImageFilterPython.delete_itkBinaryErodeImageFilterID3ID3SE3
    cast = _swig_new_static_method(_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterID3ID3SE3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryErodeImageFilterID3ID3SE3

        Create a new object of the class itkBinaryErodeImageFilterID3ID3SE3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryErodeImageFilterID3ID3SE3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryErodeImageFilterID3ID3SE3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryErodeImageFilterID3ID3SE3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryErodeImageFilterID3ID3SE3 in _itkBinaryErodeImageFilterPython:
_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterID3ID3SE3_swigregister(itkBinaryErodeImageFilterID3ID3SE3)
itkBinaryErodeImageFilterID3ID3SE3___New_orig__ = _itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterID3ID3SE3___New_orig__
itkBinaryErodeImageFilterID3ID3SE3_cast = _itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterID3ID3SE3_cast


def itkBinaryErodeImageFilterIF2IF2SE2_New():
    return itkBinaryErodeImageFilterIF2IF2SE2.New()

class itkBinaryErodeImageFilterIF2IF2SE2(itk.itkBinaryDilateImageFilterPython.itkBinaryDilateImageFilterIF2IF2SE2_Superclass):
    r"""


    Fast binary erosion of a single intensity value in the image.

    BinaryErodeImageFilter is a binary erosion morphologic operation on
    the foreground of an image. Only the value designated by the intensity
    value "SetForegroundValue()" (alias as SetErodeValue()) is
    considered as foreground, and other intensity values are considered
    background.

    Gray scale images can be processed as binary images by selecting a
    "ForegroundValue" (alias "ErodeValue"). Pixel values matching the
    erode value are considered the "foreground" and all other pixels are
    "background". This is useful in processing segmented images where
    all pixels in segment #1 have value 1 and pixels in segment #2 have
    value 2, etc. A particular "segment number" can be processed.
    ForegroundValue defaults to the maximum possible value of the
    PixelType. The eroded pixels will receive the BackgroundValue
    (defaults to NumericTraits::NonpositiveMin() ).

    The structuring element is assumed to be composed of binary values
    (zero or one). Only elements of the structuring element having values
    > 0 are candidates for affecting the center pixel. A reasonable choice
    of structuring element is itk::BinaryBallStructuringElement.

    This implementation is based on the papers:

    L.Vincent "Morphological transformations of binary images with
    arbitrary structuring elements", and

    N.Nikopoulos et al. "An efficient algorithm for 3d binary
    morphological transformations with 3d structuring elements for
    arbitrary size and shape". IEEE Transactions on Image Processing.
    Vol. 9. No. 3. 2000. pp. 283-286.

    See:  ImageToImageFilter BinaryDilateImageFilter
    BinaryMorphologyImageFilter
    {Filtering/BinaryMathematicalMorphology/ErodeABinaryImage,Erode A
    Binary Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterIF2IF2SE2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterIF2IF2SE2_Clone)
    SetErodeValue = _swig_new_instance_method(_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterIF2IF2SE2_SetErodeValue)
    GetErodeValue = _swig_new_instance_method(_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterIF2IF2SE2_GetErodeValue)
    __swig_destroy__ = _itkBinaryErodeImageFilterPython.delete_itkBinaryErodeImageFilterIF2IF2SE2
    cast = _swig_new_static_method(_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterIF2IF2SE2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryErodeImageFilterIF2IF2SE2

        Create a new object of the class itkBinaryErodeImageFilterIF2IF2SE2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryErodeImageFilterIF2IF2SE2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryErodeImageFilterIF2IF2SE2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryErodeImageFilterIF2IF2SE2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryErodeImageFilterIF2IF2SE2 in _itkBinaryErodeImageFilterPython:
_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterIF2IF2SE2_swigregister(itkBinaryErodeImageFilterIF2IF2SE2)
itkBinaryErodeImageFilterIF2IF2SE2___New_orig__ = _itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterIF2IF2SE2___New_orig__
itkBinaryErodeImageFilterIF2IF2SE2_cast = _itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterIF2IF2SE2_cast


def itkBinaryErodeImageFilterIF3IF3SE3_New():
    return itkBinaryErodeImageFilterIF3IF3SE3.New()

class itkBinaryErodeImageFilterIF3IF3SE3(itk.itkBinaryDilateImageFilterPython.itkBinaryDilateImageFilterIF3IF3SE3_Superclass):
    r"""


    Fast binary erosion of a single intensity value in the image.

    BinaryErodeImageFilter is a binary erosion morphologic operation on
    the foreground of an image. Only the value designated by the intensity
    value "SetForegroundValue()" (alias as SetErodeValue()) is
    considered as foreground, and other intensity values are considered
    background.

    Gray scale images can be processed as binary images by selecting a
    "ForegroundValue" (alias "ErodeValue"). Pixel values matching the
    erode value are considered the "foreground" and all other pixels are
    "background". This is useful in processing segmented images where
    all pixels in segment #1 have value 1 and pixels in segment #2 have
    value 2, etc. A particular "segment number" can be processed.
    ForegroundValue defaults to the maximum possible value of the
    PixelType. The eroded pixels will receive the BackgroundValue
    (defaults to NumericTraits::NonpositiveMin() ).

    The structuring element is assumed to be composed of binary values
    (zero or one). Only elements of the structuring element having values
    > 0 are candidates for affecting the center pixel. A reasonable choice
    of structuring element is itk::BinaryBallStructuringElement.

    This implementation is based on the papers:

    L.Vincent "Morphological transformations of binary images with
    arbitrary structuring elements", and

    N.Nikopoulos et al. "An efficient algorithm for 3d binary
    morphological transformations with 3d structuring elements for
    arbitrary size and shape". IEEE Transactions on Image Processing.
    Vol. 9. No. 3. 2000. pp. 283-286.

    See:  ImageToImageFilter BinaryDilateImageFilter
    BinaryMorphologyImageFilter
    {Filtering/BinaryMathematicalMorphology/ErodeABinaryImage,Erode A
    Binary Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterIF3IF3SE3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterIF3IF3SE3_Clone)
    SetErodeValue = _swig_new_instance_method(_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterIF3IF3SE3_SetErodeValue)
    GetErodeValue = _swig_new_instance_method(_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterIF3IF3SE3_GetErodeValue)
    __swig_destroy__ = _itkBinaryErodeImageFilterPython.delete_itkBinaryErodeImageFilterIF3IF3SE3
    cast = _swig_new_static_method(_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterIF3IF3SE3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryErodeImageFilterIF3IF3SE3

        Create a new object of the class itkBinaryErodeImageFilterIF3IF3SE3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryErodeImageFilterIF3IF3SE3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryErodeImageFilterIF3IF3SE3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryErodeImageFilterIF3IF3SE3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryErodeImageFilterIF3IF3SE3 in _itkBinaryErodeImageFilterPython:
_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterIF3IF3SE3_swigregister(itkBinaryErodeImageFilterIF3IF3SE3)
itkBinaryErodeImageFilterIF3IF3SE3___New_orig__ = _itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterIF3IF3SE3___New_orig__
itkBinaryErodeImageFilterIF3IF3SE3_cast = _itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterIF3IF3SE3_cast


def itkBinaryErodeImageFilterISS2ISS2SE2_New():
    return itkBinaryErodeImageFilterISS2ISS2SE2.New()

class itkBinaryErodeImageFilterISS2ISS2SE2(itk.itkBinaryDilateImageFilterPython.itkBinaryDilateImageFilterISS2ISS2SE2_Superclass):
    r"""


    Fast binary erosion of a single intensity value in the image.

    BinaryErodeImageFilter is a binary erosion morphologic operation on
    the foreground of an image. Only the value designated by the intensity
    value "SetForegroundValue()" (alias as SetErodeValue()) is
    considered as foreground, and other intensity values are considered
    background.

    Gray scale images can be processed as binary images by selecting a
    "ForegroundValue" (alias "ErodeValue"). Pixel values matching the
    erode value are considered the "foreground" and all other pixels are
    "background". This is useful in processing segmented images where
    all pixels in segment #1 have value 1 and pixels in segment #2 have
    value 2, etc. A particular "segment number" can be processed.
    ForegroundValue defaults to the maximum possible value of the
    PixelType. The eroded pixels will receive the BackgroundValue
    (defaults to NumericTraits::NonpositiveMin() ).

    The structuring element is assumed to be composed of binary values
    (zero or one). Only elements of the structuring element having values
    > 0 are candidates for affecting the center pixel. A reasonable choice
    of structuring element is itk::BinaryBallStructuringElement.

    This implementation is based on the papers:

    L.Vincent "Morphological transformations of binary images with
    arbitrary structuring elements", and

    N.Nikopoulos et al. "An efficient algorithm for 3d binary
    morphological transformations with 3d structuring elements for
    arbitrary size and shape". IEEE Transactions on Image Processing.
    Vol. 9. No. 3. 2000. pp. 283-286.

    See:  ImageToImageFilter BinaryDilateImageFilter
    BinaryMorphologyImageFilter
    {Filtering/BinaryMathematicalMorphology/ErodeABinaryImage,Erode A
    Binary Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterISS2ISS2SE2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterISS2ISS2SE2_Clone)
    SetErodeValue = _swig_new_instance_method(_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterISS2ISS2SE2_SetErodeValue)
    GetErodeValue = _swig_new_instance_method(_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterISS2ISS2SE2_GetErodeValue)
    __swig_destroy__ = _itkBinaryErodeImageFilterPython.delete_itkBinaryErodeImageFilterISS2ISS2SE2
    cast = _swig_new_static_method(_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterISS2ISS2SE2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryErodeImageFilterISS2ISS2SE2

        Create a new object of the class itkBinaryErodeImageFilterISS2ISS2SE2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryErodeImageFilterISS2ISS2SE2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryErodeImageFilterISS2ISS2SE2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryErodeImageFilterISS2ISS2SE2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryErodeImageFilterISS2ISS2SE2 in _itkBinaryErodeImageFilterPython:
_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterISS2ISS2SE2_swigregister(itkBinaryErodeImageFilterISS2ISS2SE2)
itkBinaryErodeImageFilterISS2ISS2SE2___New_orig__ = _itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterISS2ISS2SE2___New_orig__
itkBinaryErodeImageFilterISS2ISS2SE2_cast = _itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterISS2ISS2SE2_cast


def itkBinaryErodeImageFilterISS3ISS3SE3_New():
    return itkBinaryErodeImageFilterISS3ISS3SE3.New()

class itkBinaryErodeImageFilterISS3ISS3SE3(itk.itkBinaryDilateImageFilterPython.itkBinaryDilateImageFilterISS3ISS3SE3_Superclass):
    r"""


    Fast binary erosion of a single intensity value in the image.

    BinaryErodeImageFilter is a binary erosion morphologic operation on
    the foreground of an image. Only the value designated by the intensity
    value "SetForegroundValue()" (alias as SetErodeValue()) is
    considered as foreground, and other intensity values are considered
    background.

    Gray scale images can be processed as binary images by selecting a
    "ForegroundValue" (alias "ErodeValue"). Pixel values matching the
    erode value are considered the "foreground" and all other pixels are
    "background". This is useful in processing segmented images where
    all pixels in segment #1 have value 1 and pixels in segment #2 have
    value 2, etc. A particular "segment number" can be processed.
    ForegroundValue defaults to the maximum possible value of the
    PixelType. The eroded pixels will receive the BackgroundValue
    (defaults to NumericTraits::NonpositiveMin() ).

    The structuring element is assumed to be composed of binary values
    (zero or one). Only elements of the structuring element having values
    > 0 are candidates for affecting the center pixel. A reasonable choice
    of structuring element is itk::BinaryBallStructuringElement.

    This implementation is based on the papers:

    L.Vincent "Morphological transformations of binary images with
    arbitrary structuring elements", and

    N.Nikopoulos et al. "An efficient algorithm for 3d binary
    morphological transformations with 3d structuring elements for
    arbitrary size and shape". IEEE Transactions on Image Processing.
    Vol. 9. No. 3. 2000. pp. 283-286.

    See:  ImageToImageFilter BinaryDilateImageFilter
    BinaryMorphologyImageFilter
    {Filtering/BinaryMathematicalMorphology/ErodeABinaryImage,Erode A
    Binary Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterISS3ISS3SE3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterISS3ISS3SE3_Clone)
    SetErodeValue = _swig_new_instance_method(_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterISS3ISS3SE3_SetErodeValue)
    GetErodeValue = _swig_new_instance_method(_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterISS3ISS3SE3_GetErodeValue)
    __swig_destroy__ = _itkBinaryErodeImageFilterPython.delete_itkBinaryErodeImageFilterISS3ISS3SE3
    cast = _swig_new_static_method(_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterISS3ISS3SE3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryErodeImageFilterISS3ISS3SE3

        Create a new object of the class itkBinaryErodeImageFilterISS3ISS3SE3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryErodeImageFilterISS3ISS3SE3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryErodeImageFilterISS3ISS3SE3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryErodeImageFilterISS3ISS3SE3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryErodeImageFilterISS3ISS3SE3 in _itkBinaryErodeImageFilterPython:
_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterISS3ISS3SE3_swigregister(itkBinaryErodeImageFilterISS3ISS3SE3)
itkBinaryErodeImageFilterISS3ISS3SE3___New_orig__ = _itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterISS3ISS3SE3___New_orig__
itkBinaryErodeImageFilterISS3ISS3SE3_cast = _itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterISS3ISS3SE3_cast


def itkBinaryErodeImageFilterIUC2IUC2SE2_New():
    return itkBinaryErodeImageFilterIUC2IUC2SE2.New()

class itkBinaryErodeImageFilterIUC2IUC2SE2(itk.itkBinaryDilateImageFilterPython.itkBinaryDilateImageFilterIUC2IUC2SE2_Superclass):
    r"""


    Fast binary erosion of a single intensity value in the image.

    BinaryErodeImageFilter is a binary erosion morphologic operation on
    the foreground of an image. Only the value designated by the intensity
    value "SetForegroundValue()" (alias as SetErodeValue()) is
    considered as foreground, and other intensity values are considered
    background.

    Gray scale images can be processed as binary images by selecting a
    "ForegroundValue" (alias "ErodeValue"). Pixel values matching the
    erode value are considered the "foreground" and all other pixels are
    "background". This is useful in processing segmented images where
    all pixels in segment #1 have value 1 and pixels in segment #2 have
    value 2, etc. A particular "segment number" can be processed.
    ForegroundValue defaults to the maximum possible value of the
    PixelType. The eroded pixels will receive the BackgroundValue
    (defaults to NumericTraits::NonpositiveMin() ).

    The structuring element is assumed to be composed of binary values
    (zero or one). Only elements of the structuring element having values
    > 0 are candidates for affecting the center pixel. A reasonable choice
    of structuring element is itk::BinaryBallStructuringElement.

    This implementation is based on the papers:

    L.Vincent "Morphological transformations of binary images with
    arbitrary structuring elements", and

    N.Nikopoulos et al. "An efficient algorithm for 3d binary
    morphological transformations with 3d structuring elements for
    arbitrary size and shape". IEEE Transactions on Image Processing.
    Vol. 9. No. 3. 2000. pp. 283-286.

    See:  ImageToImageFilter BinaryDilateImageFilter
    BinaryMorphologyImageFilter
    {Filtering/BinaryMathematicalMorphology/ErodeABinaryImage,Erode A
    Binary Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterIUC2IUC2SE2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterIUC2IUC2SE2_Clone)
    SetErodeValue = _swig_new_instance_method(_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterIUC2IUC2SE2_SetErodeValue)
    GetErodeValue = _swig_new_instance_method(_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterIUC2IUC2SE2_GetErodeValue)
    __swig_destroy__ = _itkBinaryErodeImageFilterPython.delete_itkBinaryErodeImageFilterIUC2IUC2SE2
    cast = _swig_new_static_method(_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterIUC2IUC2SE2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryErodeImageFilterIUC2IUC2SE2

        Create a new object of the class itkBinaryErodeImageFilterIUC2IUC2SE2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryErodeImageFilterIUC2IUC2SE2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryErodeImageFilterIUC2IUC2SE2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryErodeImageFilterIUC2IUC2SE2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryErodeImageFilterIUC2IUC2SE2 in _itkBinaryErodeImageFilterPython:
_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterIUC2IUC2SE2_swigregister(itkBinaryErodeImageFilterIUC2IUC2SE2)
itkBinaryErodeImageFilterIUC2IUC2SE2___New_orig__ = _itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterIUC2IUC2SE2___New_orig__
itkBinaryErodeImageFilterIUC2IUC2SE2_cast = _itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterIUC2IUC2SE2_cast


def itkBinaryErodeImageFilterIUC3IUC3SE3_New():
    return itkBinaryErodeImageFilterIUC3IUC3SE3.New()

class itkBinaryErodeImageFilterIUC3IUC3SE3(itk.itkBinaryDilateImageFilterPython.itkBinaryDilateImageFilterIUC3IUC3SE3_Superclass):
    r"""


    Fast binary erosion of a single intensity value in the image.

    BinaryErodeImageFilter is a binary erosion morphologic operation on
    the foreground of an image. Only the value designated by the intensity
    value "SetForegroundValue()" (alias as SetErodeValue()) is
    considered as foreground, and other intensity values are considered
    background.

    Gray scale images can be processed as binary images by selecting a
    "ForegroundValue" (alias "ErodeValue"). Pixel values matching the
    erode value are considered the "foreground" and all other pixels are
    "background". This is useful in processing segmented images where
    all pixels in segment #1 have value 1 and pixels in segment #2 have
    value 2, etc. A particular "segment number" can be processed.
    ForegroundValue defaults to the maximum possible value of the
    PixelType. The eroded pixels will receive the BackgroundValue
    (defaults to NumericTraits::NonpositiveMin() ).

    The structuring element is assumed to be composed of binary values
    (zero or one). Only elements of the structuring element having values
    > 0 are candidates for affecting the center pixel. A reasonable choice
    of structuring element is itk::BinaryBallStructuringElement.

    This implementation is based on the papers:

    L.Vincent "Morphological transformations of binary images with
    arbitrary structuring elements", and

    N.Nikopoulos et al. "An efficient algorithm for 3d binary
    morphological transformations with 3d structuring elements for
    arbitrary size and shape". IEEE Transactions on Image Processing.
    Vol. 9. No. 3. 2000. pp. 283-286.

    See:  ImageToImageFilter BinaryDilateImageFilter
    BinaryMorphologyImageFilter
    {Filtering/BinaryMathematicalMorphology/ErodeABinaryImage,Erode A
    Binary Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterIUC3IUC3SE3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterIUC3IUC3SE3_Clone)
    SetErodeValue = _swig_new_instance_method(_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterIUC3IUC3SE3_SetErodeValue)
    GetErodeValue = _swig_new_instance_method(_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterIUC3IUC3SE3_GetErodeValue)
    __swig_destroy__ = _itkBinaryErodeImageFilterPython.delete_itkBinaryErodeImageFilterIUC3IUC3SE3
    cast = _swig_new_static_method(_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterIUC3IUC3SE3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryErodeImageFilterIUC3IUC3SE3

        Create a new object of the class itkBinaryErodeImageFilterIUC3IUC3SE3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryErodeImageFilterIUC3IUC3SE3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryErodeImageFilterIUC3IUC3SE3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryErodeImageFilterIUC3IUC3SE3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryErodeImageFilterIUC3IUC3SE3 in _itkBinaryErodeImageFilterPython:
_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterIUC3IUC3SE3_swigregister(itkBinaryErodeImageFilterIUC3IUC3SE3)
itkBinaryErodeImageFilterIUC3IUC3SE3___New_orig__ = _itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterIUC3IUC3SE3___New_orig__
itkBinaryErodeImageFilterIUC3IUC3SE3_cast = _itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterIUC3IUC3SE3_cast


def itkBinaryErodeImageFilterIUS2IUS2SE2_New():
    return itkBinaryErodeImageFilterIUS2IUS2SE2.New()

class itkBinaryErodeImageFilterIUS2IUS2SE2(itk.itkBinaryDilateImageFilterPython.itkBinaryDilateImageFilterIUS2IUS2SE2_Superclass):
    r"""


    Fast binary erosion of a single intensity value in the image.

    BinaryErodeImageFilter is a binary erosion morphologic operation on
    the foreground of an image. Only the value designated by the intensity
    value "SetForegroundValue()" (alias as SetErodeValue()) is
    considered as foreground, and other intensity values are considered
    background.

    Gray scale images can be processed as binary images by selecting a
    "ForegroundValue" (alias "ErodeValue"). Pixel values matching the
    erode value are considered the "foreground" and all other pixels are
    "background". This is useful in processing segmented images where
    all pixels in segment #1 have value 1 and pixels in segment #2 have
    value 2, etc. A particular "segment number" can be processed.
    ForegroundValue defaults to the maximum possible value of the
    PixelType. The eroded pixels will receive the BackgroundValue
    (defaults to NumericTraits::NonpositiveMin() ).

    The structuring element is assumed to be composed of binary values
    (zero or one). Only elements of the structuring element having values
    > 0 are candidates for affecting the center pixel. A reasonable choice
    of structuring element is itk::BinaryBallStructuringElement.

    This implementation is based on the papers:

    L.Vincent "Morphological transformations of binary images with
    arbitrary structuring elements", and

    N.Nikopoulos et al. "An efficient algorithm for 3d binary
    morphological transformations with 3d structuring elements for
    arbitrary size and shape". IEEE Transactions on Image Processing.
    Vol. 9. No. 3. 2000. pp. 283-286.

    See:  ImageToImageFilter BinaryDilateImageFilter
    BinaryMorphologyImageFilter
    {Filtering/BinaryMathematicalMorphology/ErodeABinaryImage,Erode A
    Binary Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterIUS2IUS2SE2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterIUS2IUS2SE2_Clone)
    SetErodeValue = _swig_new_instance_method(_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterIUS2IUS2SE2_SetErodeValue)
    GetErodeValue = _swig_new_instance_method(_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterIUS2IUS2SE2_GetErodeValue)
    __swig_destroy__ = _itkBinaryErodeImageFilterPython.delete_itkBinaryErodeImageFilterIUS2IUS2SE2
    cast = _swig_new_static_method(_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterIUS2IUS2SE2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryErodeImageFilterIUS2IUS2SE2

        Create a new object of the class itkBinaryErodeImageFilterIUS2IUS2SE2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryErodeImageFilterIUS2IUS2SE2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryErodeImageFilterIUS2IUS2SE2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryErodeImageFilterIUS2IUS2SE2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryErodeImageFilterIUS2IUS2SE2 in _itkBinaryErodeImageFilterPython:
_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterIUS2IUS2SE2_swigregister(itkBinaryErodeImageFilterIUS2IUS2SE2)
itkBinaryErodeImageFilterIUS2IUS2SE2___New_orig__ = _itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterIUS2IUS2SE2___New_orig__
itkBinaryErodeImageFilterIUS2IUS2SE2_cast = _itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterIUS2IUS2SE2_cast


def itkBinaryErodeImageFilterIUS3IUS3SE3_New():
    return itkBinaryErodeImageFilterIUS3IUS3SE3.New()

class itkBinaryErodeImageFilterIUS3IUS3SE3(itk.itkBinaryDilateImageFilterPython.itkBinaryDilateImageFilterIUS3IUS3SE3_Superclass):
    r"""


    Fast binary erosion of a single intensity value in the image.

    BinaryErodeImageFilter is a binary erosion morphologic operation on
    the foreground of an image. Only the value designated by the intensity
    value "SetForegroundValue()" (alias as SetErodeValue()) is
    considered as foreground, and other intensity values are considered
    background.

    Gray scale images can be processed as binary images by selecting a
    "ForegroundValue" (alias "ErodeValue"). Pixel values matching the
    erode value are considered the "foreground" and all other pixels are
    "background". This is useful in processing segmented images where
    all pixels in segment #1 have value 1 and pixels in segment #2 have
    value 2, etc. A particular "segment number" can be processed.
    ForegroundValue defaults to the maximum possible value of the
    PixelType. The eroded pixels will receive the BackgroundValue
    (defaults to NumericTraits::NonpositiveMin() ).

    The structuring element is assumed to be composed of binary values
    (zero or one). Only elements of the structuring element having values
    > 0 are candidates for affecting the center pixel. A reasonable choice
    of structuring element is itk::BinaryBallStructuringElement.

    This implementation is based on the papers:

    L.Vincent "Morphological transformations of binary images with
    arbitrary structuring elements", and

    N.Nikopoulos et al. "An efficient algorithm for 3d binary
    morphological transformations with 3d structuring elements for
    arbitrary size and shape". IEEE Transactions on Image Processing.
    Vol. 9. No. 3. 2000. pp. 283-286.

    See:  ImageToImageFilter BinaryDilateImageFilter
    BinaryMorphologyImageFilter
    {Filtering/BinaryMathematicalMorphology/ErodeABinaryImage,Erode A
    Binary Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterIUS3IUS3SE3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterIUS3IUS3SE3_Clone)
    SetErodeValue = _swig_new_instance_method(_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterIUS3IUS3SE3_SetErodeValue)
    GetErodeValue = _swig_new_instance_method(_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterIUS3IUS3SE3_GetErodeValue)
    __swig_destroy__ = _itkBinaryErodeImageFilterPython.delete_itkBinaryErodeImageFilterIUS3IUS3SE3
    cast = _swig_new_static_method(_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterIUS3IUS3SE3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryErodeImageFilterIUS3IUS3SE3

        Create a new object of the class itkBinaryErodeImageFilterIUS3IUS3SE3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryErodeImageFilterIUS3IUS3SE3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryErodeImageFilterIUS3IUS3SE3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryErodeImageFilterIUS3IUS3SE3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryErodeImageFilterIUS3IUS3SE3 in _itkBinaryErodeImageFilterPython:
_itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterIUS3IUS3SE3_swigregister(itkBinaryErodeImageFilterIUS3IUS3SE3)
itkBinaryErodeImageFilterIUS3IUS3SE3___New_orig__ = _itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterIUS3IUS3SE3___New_orig__
itkBinaryErodeImageFilterIUS3IUS3SE3_cast = _itkBinaryErodeImageFilterPython.itkBinaryErodeImageFilterIUS3IUS3SE3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def binary_erode_image_filter(*args, **kwargs):
    """Procedural interface for BinaryErodeImageFilter"""
    import itk
    instance = itk.BinaryErodeImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def binary_erode_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.BinaryErodeImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.BinaryErodeImageFilter.values()[0]
    else:
        filter_object = itk.BinaryErodeImageFilter

    binary_erode_image_filter.__doc__ = filter_object.__doc__
    binary_erode_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    binary_erode_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.BinaryErodeImageFilter, itkTemplate.itkTemplate):
        binary_erode_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        binary_erode_image_filter.__doc__ += "\n"
        binary_erode_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        binary_erode_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



