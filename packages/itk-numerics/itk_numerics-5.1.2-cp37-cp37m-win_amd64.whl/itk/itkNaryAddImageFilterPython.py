# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageIntensityPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkNaryAddImageFilterPython
else:
    import _itkNaryAddImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkNaryAddImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkNaryAddImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
import itk.itkImagePython
import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkFixedArrayPython
import itk.itkSizePython
import itk.itkCovariantVectorPython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkRGBPixelPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterBPython

def itkNaryAddImageFilterID2ID2_Superclass_New():
    return itkNaryAddImageFilterID2ID2_Superclass.New()

class itkNaryAddImageFilterID2ID2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2ID2):
    r"""Proxy of C++ itkNaryAddImageFilterID2ID2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterID2ID2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterID2ID2_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterID2ID2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterID2ID2_Superclass_SetFunctor)
    SameDimensionCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterID2ID2_Superclass_SameDimensionCheck
    
    OutputHasZeroCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterID2ID2_Superclass_OutputHasZeroCheck
    
    __swig_destroy__ = _itkNaryAddImageFilterPython.delete_itkNaryAddImageFilterID2ID2_Superclass
    cast = _swig_new_static_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterID2ID2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkNaryAddImageFilterID2ID2_Superclass

        Create a new object of the class itkNaryAddImageFilterID2ID2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNaryAddImageFilterID2ID2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNaryAddImageFilterID2ID2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNaryAddImageFilterID2ID2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNaryAddImageFilterID2ID2_Superclass in _itkNaryAddImageFilterPython:
_itkNaryAddImageFilterPython.itkNaryAddImageFilterID2ID2_Superclass_swigregister(itkNaryAddImageFilterID2ID2_Superclass)
itkNaryAddImageFilterID2ID2_Superclass___New_orig__ = _itkNaryAddImageFilterPython.itkNaryAddImageFilterID2ID2_Superclass___New_orig__
itkNaryAddImageFilterID2ID2_Superclass_cast = _itkNaryAddImageFilterPython.itkNaryAddImageFilterID2ID2_Superclass_cast


def itkNaryAddImageFilterID3ID3_Superclass_New():
    return itkNaryAddImageFilterID3ID3_Superclass.New()

class itkNaryAddImageFilterID3ID3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3):
    r"""Proxy of C++ itkNaryAddImageFilterID3ID3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterID3ID3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterID3ID3_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterID3ID3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterID3ID3_Superclass_SetFunctor)
    SameDimensionCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterID3ID3_Superclass_SameDimensionCheck
    
    OutputHasZeroCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterID3ID3_Superclass_OutputHasZeroCheck
    
    __swig_destroy__ = _itkNaryAddImageFilterPython.delete_itkNaryAddImageFilterID3ID3_Superclass
    cast = _swig_new_static_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterID3ID3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkNaryAddImageFilterID3ID3_Superclass

        Create a new object of the class itkNaryAddImageFilterID3ID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNaryAddImageFilterID3ID3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNaryAddImageFilterID3ID3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNaryAddImageFilterID3ID3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNaryAddImageFilterID3ID3_Superclass in _itkNaryAddImageFilterPython:
_itkNaryAddImageFilterPython.itkNaryAddImageFilterID3ID3_Superclass_swigregister(itkNaryAddImageFilterID3ID3_Superclass)
itkNaryAddImageFilterID3ID3_Superclass___New_orig__ = _itkNaryAddImageFilterPython.itkNaryAddImageFilterID3ID3_Superclass___New_orig__
itkNaryAddImageFilterID3ID3_Superclass_cast = _itkNaryAddImageFilterPython.itkNaryAddImageFilterID3ID3_Superclass_cast


def itkNaryAddImageFilterIF2IF2_Superclass_New():
    return itkNaryAddImageFilterIF2IF2_Superclass.New()

class itkNaryAddImageFilterIF2IF2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IF2):
    r"""Proxy of C++ itkNaryAddImageFilterIF2IF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterIF2IF2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterIF2IF2_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterIF2IF2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterIF2IF2_Superclass_SetFunctor)
    SameDimensionCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIF2IF2_Superclass_SameDimensionCheck
    
    OutputHasZeroCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIF2IF2_Superclass_OutputHasZeroCheck
    
    __swig_destroy__ = _itkNaryAddImageFilterPython.delete_itkNaryAddImageFilterIF2IF2_Superclass
    cast = _swig_new_static_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterIF2IF2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkNaryAddImageFilterIF2IF2_Superclass

        Create a new object of the class itkNaryAddImageFilterIF2IF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNaryAddImageFilterIF2IF2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNaryAddImageFilterIF2IF2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNaryAddImageFilterIF2IF2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNaryAddImageFilterIF2IF2_Superclass in _itkNaryAddImageFilterPython:
_itkNaryAddImageFilterPython.itkNaryAddImageFilterIF2IF2_Superclass_swigregister(itkNaryAddImageFilterIF2IF2_Superclass)
itkNaryAddImageFilterIF2IF2_Superclass___New_orig__ = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIF2IF2_Superclass___New_orig__
itkNaryAddImageFilterIF2IF2_Superclass_cast = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIF2IF2_Superclass_cast


def itkNaryAddImageFilterIF3IF3_Superclass_New():
    return itkNaryAddImageFilterIF3IF3_Superclass.New()

class itkNaryAddImageFilterIF3IF3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    r"""Proxy of C++ itkNaryAddImageFilterIF3IF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterIF3IF3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterIF3IF3_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterIF3IF3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterIF3IF3_Superclass_SetFunctor)
    SameDimensionCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIF3IF3_Superclass_SameDimensionCheck
    
    OutputHasZeroCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIF3IF3_Superclass_OutputHasZeroCheck
    
    __swig_destroy__ = _itkNaryAddImageFilterPython.delete_itkNaryAddImageFilterIF3IF3_Superclass
    cast = _swig_new_static_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterIF3IF3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkNaryAddImageFilterIF3IF3_Superclass

        Create a new object of the class itkNaryAddImageFilterIF3IF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNaryAddImageFilterIF3IF3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNaryAddImageFilterIF3IF3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNaryAddImageFilterIF3IF3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNaryAddImageFilterIF3IF3_Superclass in _itkNaryAddImageFilterPython:
_itkNaryAddImageFilterPython.itkNaryAddImageFilterIF3IF3_Superclass_swigregister(itkNaryAddImageFilterIF3IF3_Superclass)
itkNaryAddImageFilterIF3IF3_Superclass___New_orig__ = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIF3IF3_Superclass___New_orig__
itkNaryAddImageFilterIF3IF3_Superclass_cast = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIF3IF3_Superclass_cast


def itkNaryAddImageFilterISS2ISS2_Superclass_New():
    return itkNaryAddImageFilterISS2ISS2_Superclass.New()

class itkNaryAddImageFilterISS2ISS2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2ISS2):
    r"""Proxy of C++ itkNaryAddImageFilterISS2ISS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterISS2ISS2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterISS2ISS2_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterISS2ISS2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterISS2ISS2_Superclass_SetFunctor)
    SameDimensionCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterISS2ISS2_Superclass_SameDimensionCheck
    
    OutputHasZeroCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterISS2ISS2_Superclass_OutputHasZeroCheck
    
    __swig_destroy__ = _itkNaryAddImageFilterPython.delete_itkNaryAddImageFilterISS2ISS2_Superclass
    cast = _swig_new_static_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterISS2ISS2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkNaryAddImageFilterISS2ISS2_Superclass

        Create a new object of the class itkNaryAddImageFilterISS2ISS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNaryAddImageFilterISS2ISS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNaryAddImageFilterISS2ISS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNaryAddImageFilterISS2ISS2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNaryAddImageFilterISS2ISS2_Superclass in _itkNaryAddImageFilterPython:
_itkNaryAddImageFilterPython.itkNaryAddImageFilterISS2ISS2_Superclass_swigregister(itkNaryAddImageFilterISS2ISS2_Superclass)
itkNaryAddImageFilterISS2ISS2_Superclass___New_orig__ = _itkNaryAddImageFilterPython.itkNaryAddImageFilterISS2ISS2_Superclass___New_orig__
itkNaryAddImageFilterISS2ISS2_Superclass_cast = _itkNaryAddImageFilterPython.itkNaryAddImageFilterISS2ISS2_Superclass_cast


def itkNaryAddImageFilterISS3ISS3_Superclass_New():
    return itkNaryAddImageFilterISS3ISS3_Superclass.New()

class itkNaryAddImageFilterISS3ISS3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3ISS3):
    r"""Proxy of C++ itkNaryAddImageFilterISS3ISS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterISS3ISS3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterISS3ISS3_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterISS3ISS3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterISS3ISS3_Superclass_SetFunctor)
    SameDimensionCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterISS3ISS3_Superclass_SameDimensionCheck
    
    OutputHasZeroCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterISS3ISS3_Superclass_OutputHasZeroCheck
    
    __swig_destroy__ = _itkNaryAddImageFilterPython.delete_itkNaryAddImageFilterISS3ISS3_Superclass
    cast = _swig_new_static_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterISS3ISS3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkNaryAddImageFilterISS3ISS3_Superclass

        Create a new object of the class itkNaryAddImageFilterISS3ISS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNaryAddImageFilterISS3ISS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNaryAddImageFilterISS3ISS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNaryAddImageFilterISS3ISS3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNaryAddImageFilterISS3ISS3_Superclass in _itkNaryAddImageFilterPython:
_itkNaryAddImageFilterPython.itkNaryAddImageFilterISS3ISS3_Superclass_swigregister(itkNaryAddImageFilterISS3ISS3_Superclass)
itkNaryAddImageFilterISS3ISS3_Superclass___New_orig__ = _itkNaryAddImageFilterPython.itkNaryAddImageFilterISS3ISS3_Superclass___New_orig__
itkNaryAddImageFilterISS3ISS3_Superclass_cast = _itkNaryAddImageFilterPython.itkNaryAddImageFilterISS3ISS3_Superclass_cast


def itkNaryAddImageFilterIUC2IUC2_Superclass_New():
    return itkNaryAddImageFilterIUC2IUC2_Superclass.New()

class itkNaryAddImageFilterIUC2IUC2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUC2):
    r"""Proxy of C++ itkNaryAddImageFilterIUC2IUC2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC2IUC2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC2IUC2_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC2IUC2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC2IUC2_Superclass_SetFunctor)
    SameDimensionCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC2IUC2_Superclass_SameDimensionCheck
    
    OutputHasZeroCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC2IUC2_Superclass_OutputHasZeroCheck
    
    __swig_destroy__ = _itkNaryAddImageFilterPython.delete_itkNaryAddImageFilterIUC2IUC2_Superclass
    cast = _swig_new_static_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC2IUC2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkNaryAddImageFilterIUC2IUC2_Superclass

        Create a new object of the class itkNaryAddImageFilterIUC2IUC2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNaryAddImageFilterIUC2IUC2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNaryAddImageFilterIUC2IUC2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNaryAddImageFilterIUC2IUC2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNaryAddImageFilterIUC2IUC2_Superclass in _itkNaryAddImageFilterPython:
_itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC2IUC2_Superclass_swigregister(itkNaryAddImageFilterIUC2IUC2_Superclass)
itkNaryAddImageFilterIUC2IUC2_Superclass___New_orig__ = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC2IUC2_Superclass___New_orig__
itkNaryAddImageFilterIUC2IUC2_Superclass_cast = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC2IUC2_Superclass_cast


def itkNaryAddImageFilterIUC3IUC3_Superclass_New():
    return itkNaryAddImageFilterIUC3IUC3_Superclass.New()

class itkNaryAddImageFilterIUC3IUC3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUC3):
    r"""Proxy of C++ itkNaryAddImageFilterIUC3IUC3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC3IUC3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC3IUC3_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC3IUC3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC3IUC3_Superclass_SetFunctor)
    SameDimensionCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC3IUC3_Superclass_SameDimensionCheck
    
    OutputHasZeroCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC3IUC3_Superclass_OutputHasZeroCheck
    
    __swig_destroy__ = _itkNaryAddImageFilterPython.delete_itkNaryAddImageFilterIUC3IUC3_Superclass
    cast = _swig_new_static_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC3IUC3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkNaryAddImageFilterIUC3IUC3_Superclass

        Create a new object of the class itkNaryAddImageFilterIUC3IUC3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNaryAddImageFilterIUC3IUC3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNaryAddImageFilterIUC3IUC3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNaryAddImageFilterIUC3IUC3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNaryAddImageFilterIUC3IUC3_Superclass in _itkNaryAddImageFilterPython:
_itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC3IUC3_Superclass_swigregister(itkNaryAddImageFilterIUC3IUC3_Superclass)
itkNaryAddImageFilterIUC3IUC3_Superclass___New_orig__ = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC3IUC3_Superclass___New_orig__
itkNaryAddImageFilterIUC3IUC3_Superclass_cast = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC3IUC3_Superclass_cast


def itkNaryAddImageFilterIUS2IUS2_Superclass_New():
    return itkNaryAddImageFilterIUS2IUS2_Superclass.New()

class itkNaryAddImageFilterIUS2IUS2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUS2):
    r"""Proxy of C++ itkNaryAddImageFilterIUS2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS2IUS2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS2IUS2_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS2IUS2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS2IUS2_Superclass_SetFunctor)
    SameDimensionCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS2IUS2_Superclass_SameDimensionCheck
    
    OutputHasZeroCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS2IUS2_Superclass_OutputHasZeroCheck
    
    __swig_destroy__ = _itkNaryAddImageFilterPython.delete_itkNaryAddImageFilterIUS2IUS2_Superclass
    cast = _swig_new_static_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS2IUS2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkNaryAddImageFilterIUS2IUS2_Superclass

        Create a new object of the class itkNaryAddImageFilterIUS2IUS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNaryAddImageFilterIUS2IUS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNaryAddImageFilterIUS2IUS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNaryAddImageFilterIUS2IUS2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNaryAddImageFilterIUS2IUS2_Superclass in _itkNaryAddImageFilterPython:
_itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS2IUS2_Superclass_swigregister(itkNaryAddImageFilterIUS2IUS2_Superclass)
itkNaryAddImageFilterIUS2IUS2_Superclass___New_orig__ = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS2IUS2_Superclass___New_orig__
itkNaryAddImageFilterIUS2IUS2_Superclass_cast = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS2IUS2_Superclass_cast


def itkNaryAddImageFilterIUS3IUS3_Superclass_New():
    return itkNaryAddImageFilterIUS3IUS3_Superclass.New()

class itkNaryAddImageFilterIUS3IUS3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUS3):
    r"""Proxy of C++ itkNaryAddImageFilterIUS3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS3IUS3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS3IUS3_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS3IUS3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS3IUS3_Superclass_SetFunctor)
    SameDimensionCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS3IUS3_Superclass_SameDimensionCheck
    
    OutputHasZeroCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS3IUS3_Superclass_OutputHasZeroCheck
    
    __swig_destroy__ = _itkNaryAddImageFilterPython.delete_itkNaryAddImageFilterIUS3IUS3_Superclass
    cast = _swig_new_static_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS3IUS3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkNaryAddImageFilterIUS3IUS3_Superclass

        Create a new object of the class itkNaryAddImageFilterIUS3IUS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNaryAddImageFilterIUS3IUS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNaryAddImageFilterIUS3IUS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNaryAddImageFilterIUS3IUS3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNaryAddImageFilterIUS3IUS3_Superclass in _itkNaryAddImageFilterPython:
_itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS3IUS3_Superclass_swigregister(itkNaryAddImageFilterIUS3IUS3_Superclass)
itkNaryAddImageFilterIUS3IUS3_Superclass___New_orig__ = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS3IUS3_Superclass___New_orig__
itkNaryAddImageFilterIUS3IUS3_Superclass_cast = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS3IUS3_Superclass_cast


def itkNaryAddImageFilterID2ID2_New():
    return itkNaryAddImageFilterID2ID2.New()

class itkNaryAddImageFilterID2ID2(itkNaryAddImageFilterID2ID2_Superclass):
    r"""


    Pixel-wise addition of N images.

    This class is templated over the types of the input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    The pixel type of the input images must have a valid definition of the
    operator+ with each other. This condition is required because
    internally this filter will perform the operation

    Additionally the type resulting from the sum, will be cast to the
    pixel type of the output image.

    The total operation over one pixel will be

    For example, this filter could be used directly for adding images
    whose pixels are vectors of the same dimension, and to store the
    resulting vector in an output image of vector pixels.

    WARNING:  No numeric overflow checking is performed in this filter. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterID2ID2_Clone)
    InputConvertibleToOutputCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterID2ID2_InputConvertibleToOutputCheck
    
    InputHasZeroCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterID2ID2_InputHasZeroCheck
    
    __swig_destroy__ = _itkNaryAddImageFilterPython.delete_itkNaryAddImageFilterID2ID2
    cast = _swig_new_static_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkNaryAddImageFilterID2ID2

        Create a new object of the class itkNaryAddImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNaryAddImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNaryAddImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNaryAddImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNaryAddImageFilterID2ID2 in _itkNaryAddImageFilterPython:
_itkNaryAddImageFilterPython.itkNaryAddImageFilterID2ID2_swigregister(itkNaryAddImageFilterID2ID2)
itkNaryAddImageFilterID2ID2___New_orig__ = _itkNaryAddImageFilterPython.itkNaryAddImageFilterID2ID2___New_orig__
itkNaryAddImageFilterID2ID2_cast = _itkNaryAddImageFilterPython.itkNaryAddImageFilterID2ID2_cast


def itkNaryAddImageFilterID3ID3_New():
    return itkNaryAddImageFilterID3ID3.New()

class itkNaryAddImageFilterID3ID3(itkNaryAddImageFilterID3ID3_Superclass):
    r"""


    Pixel-wise addition of N images.

    This class is templated over the types of the input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    The pixel type of the input images must have a valid definition of the
    operator+ with each other. This condition is required because
    internally this filter will perform the operation

    Additionally the type resulting from the sum, will be cast to the
    pixel type of the output image.

    The total operation over one pixel will be

    For example, this filter could be used directly for adding images
    whose pixels are vectors of the same dimension, and to store the
    resulting vector in an output image of vector pixels.

    WARNING:  No numeric overflow checking is performed in this filter. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterID3ID3_Clone)
    InputConvertibleToOutputCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterID3ID3_InputConvertibleToOutputCheck
    
    InputHasZeroCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterID3ID3_InputHasZeroCheck
    
    __swig_destroy__ = _itkNaryAddImageFilterPython.delete_itkNaryAddImageFilterID3ID3
    cast = _swig_new_static_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkNaryAddImageFilterID3ID3

        Create a new object of the class itkNaryAddImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNaryAddImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNaryAddImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNaryAddImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNaryAddImageFilterID3ID3 in _itkNaryAddImageFilterPython:
_itkNaryAddImageFilterPython.itkNaryAddImageFilterID3ID3_swigregister(itkNaryAddImageFilterID3ID3)
itkNaryAddImageFilterID3ID3___New_orig__ = _itkNaryAddImageFilterPython.itkNaryAddImageFilterID3ID3___New_orig__
itkNaryAddImageFilterID3ID3_cast = _itkNaryAddImageFilterPython.itkNaryAddImageFilterID3ID3_cast


def itkNaryAddImageFilterIF2IF2_New():
    return itkNaryAddImageFilterIF2IF2.New()

class itkNaryAddImageFilterIF2IF2(itkNaryAddImageFilterIF2IF2_Superclass):
    r"""


    Pixel-wise addition of N images.

    This class is templated over the types of the input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    The pixel type of the input images must have a valid definition of the
    operator+ with each other. This condition is required because
    internally this filter will perform the operation

    Additionally the type resulting from the sum, will be cast to the
    pixel type of the output image.

    The total operation over one pixel will be

    For example, this filter could be used directly for adding images
    whose pixels are vectors of the same dimension, and to store the
    resulting vector in an output image of vector pixels.

    WARNING:  No numeric overflow checking is performed in this filter. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterIF2IF2_Clone)
    InputConvertibleToOutputCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIF2IF2_InputConvertibleToOutputCheck
    
    InputHasZeroCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIF2IF2_InputHasZeroCheck
    
    __swig_destroy__ = _itkNaryAddImageFilterPython.delete_itkNaryAddImageFilterIF2IF2
    cast = _swig_new_static_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkNaryAddImageFilterIF2IF2

        Create a new object of the class itkNaryAddImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNaryAddImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNaryAddImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNaryAddImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNaryAddImageFilterIF2IF2 in _itkNaryAddImageFilterPython:
_itkNaryAddImageFilterPython.itkNaryAddImageFilterIF2IF2_swigregister(itkNaryAddImageFilterIF2IF2)
itkNaryAddImageFilterIF2IF2___New_orig__ = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIF2IF2___New_orig__
itkNaryAddImageFilterIF2IF2_cast = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIF2IF2_cast


def itkNaryAddImageFilterIF3IF3_New():
    return itkNaryAddImageFilterIF3IF3.New()

class itkNaryAddImageFilterIF3IF3(itkNaryAddImageFilterIF3IF3_Superclass):
    r"""


    Pixel-wise addition of N images.

    This class is templated over the types of the input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    The pixel type of the input images must have a valid definition of the
    operator+ with each other. This condition is required because
    internally this filter will perform the operation

    Additionally the type resulting from the sum, will be cast to the
    pixel type of the output image.

    The total operation over one pixel will be

    For example, this filter could be used directly for adding images
    whose pixels are vectors of the same dimension, and to store the
    resulting vector in an output image of vector pixels.

    WARNING:  No numeric overflow checking is performed in this filter. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterIF3IF3_Clone)
    InputConvertibleToOutputCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIF3IF3_InputConvertibleToOutputCheck
    
    InputHasZeroCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIF3IF3_InputHasZeroCheck
    
    __swig_destroy__ = _itkNaryAddImageFilterPython.delete_itkNaryAddImageFilterIF3IF3
    cast = _swig_new_static_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkNaryAddImageFilterIF3IF3

        Create a new object of the class itkNaryAddImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNaryAddImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNaryAddImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNaryAddImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNaryAddImageFilterIF3IF3 in _itkNaryAddImageFilterPython:
_itkNaryAddImageFilterPython.itkNaryAddImageFilterIF3IF3_swigregister(itkNaryAddImageFilterIF3IF3)
itkNaryAddImageFilterIF3IF3___New_orig__ = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIF3IF3___New_orig__
itkNaryAddImageFilterIF3IF3_cast = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIF3IF3_cast


def itkNaryAddImageFilterISS2ISS2_New():
    return itkNaryAddImageFilterISS2ISS2.New()

class itkNaryAddImageFilterISS2ISS2(itkNaryAddImageFilterISS2ISS2_Superclass):
    r"""


    Pixel-wise addition of N images.

    This class is templated over the types of the input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    The pixel type of the input images must have a valid definition of the
    operator+ with each other. This condition is required because
    internally this filter will perform the operation

    Additionally the type resulting from the sum, will be cast to the
    pixel type of the output image.

    The total operation over one pixel will be

    For example, this filter could be used directly for adding images
    whose pixels are vectors of the same dimension, and to store the
    resulting vector in an output image of vector pixels.

    WARNING:  No numeric overflow checking is performed in this filter. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterISS2ISS2_Clone)
    InputConvertibleToOutputCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterISS2ISS2_InputConvertibleToOutputCheck
    
    InputHasZeroCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterISS2ISS2_InputHasZeroCheck
    
    __swig_destroy__ = _itkNaryAddImageFilterPython.delete_itkNaryAddImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkNaryAddImageFilterISS2ISS2

        Create a new object of the class itkNaryAddImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNaryAddImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNaryAddImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNaryAddImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNaryAddImageFilterISS2ISS2 in _itkNaryAddImageFilterPython:
_itkNaryAddImageFilterPython.itkNaryAddImageFilterISS2ISS2_swigregister(itkNaryAddImageFilterISS2ISS2)
itkNaryAddImageFilterISS2ISS2___New_orig__ = _itkNaryAddImageFilterPython.itkNaryAddImageFilterISS2ISS2___New_orig__
itkNaryAddImageFilterISS2ISS2_cast = _itkNaryAddImageFilterPython.itkNaryAddImageFilterISS2ISS2_cast


def itkNaryAddImageFilterISS3ISS3_New():
    return itkNaryAddImageFilterISS3ISS3.New()

class itkNaryAddImageFilterISS3ISS3(itkNaryAddImageFilterISS3ISS3_Superclass):
    r"""


    Pixel-wise addition of N images.

    This class is templated over the types of the input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    The pixel type of the input images must have a valid definition of the
    operator+ with each other. This condition is required because
    internally this filter will perform the operation

    Additionally the type resulting from the sum, will be cast to the
    pixel type of the output image.

    The total operation over one pixel will be

    For example, this filter could be used directly for adding images
    whose pixels are vectors of the same dimension, and to store the
    resulting vector in an output image of vector pixels.

    WARNING:  No numeric overflow checking is performed in this filter. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterISS3ISS3_Clone)
    InputConvertibleToOutputCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterISS3ISS3_InputConvertibleToOutputCheck
    
    InputHasZeroCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterISS3ISS3_InputHasZeroCheck
    
    __swig_destroy__ = _itkNaryAddImageFilterPython.delete_itkNaryAddImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkNaryAddImageFilterISS3ISS3

        Create a new object of the class itkNaryAddImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNaryAddImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNaryAddImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNaryAddImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNaryAddImageFilterISS3ISS3 in _itkNaryAddImageFilterPython:
_itkNaryAddImageFilterPython.itkNaryAddImageFilterISS3ISS3_swigregister(itkNaryAddImageFilterISS3ISS3)
itkNaryAddImageFilterISS3ISS3___New_orig__ = _itkNaryAddImageFilterPython.itkNaryAddImageFilterISS3ISS3___New_orig__
itkNaryAddImageFilterISS3ISS3_cast = _itkNaryAddImageFilterPython.itkNaryAddImageFilterISS3ISS3_cast


def itkNaryAddImageFilterIUC2IUC2_New():
    return itkNaryAddImageFilterIUC2IUC2.New()

class itkNaryAddImageFilterIUC2IUC2(itkNaryAddImageFilterIUC2IUC2_Superclass):
    r"""


    Pixel-wise addition of N images.

    This class is templated over the types of the input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    The pixel type of the input images must have a valid definition of the
    operator+ with each other. This condition is required because
    internally this filter will perform the operation

    Additionally the type resulting from the sum, will be cast to the
    pixel type of the output image.

    The total operation over one pixel will be

    For example, this filter could be used directly for adding images
    whose pixels are vectors of the same dimension, and to store the
    resulting vector in an output image of vector pixels.

    WARNING:  No numeric overflow checking is performed in this filter. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC2IUC2_Clone)
    InputConvertibleToOutputCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC2IUC2_InputConvertibleToOutputCheck
    
    InputHasZeroCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC2IUC2_InputHasZeroCheck
    
    __swig_destroy__ = _itkNaryAddImageFilterPython.delete_itkNaryAddImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkNaryAddImageFilterIUC2IUC2

        Create a new object of the class itkNaryAddImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNaryAddImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNaryAddImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNaryAddImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNaryAddImageFilterIUC2IUC2 in _itkNaryAddImageFilterPython:
_itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC2IUC2_swigregister(itkNaryAddImageFilterIUC2IUC2)
itkNaryAddImageFilterIUC2IUC2___New_orig__ = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC2IUC2___New_orig__
itkNaryAddImageFilterIUC2IUC2_cast = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC2IUC2_cast


def itkNaryAddImageFilterIUC3IUC3_New():
    return itkNaryAddImageFilterIUC3IUC3.New()

class itkNaryAddImageFilterIUC3IUC3(itkNaryAddImageFilterIUC3IUC3_Superclass):
    r"""


    Pixel-wise addition of N images.

    This class is templated over the types of the input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    The pixel type of the input images must have a valid definition of the
    operator+ with each other. This condition is required because
    internally this filter will perform the operation

    Additionally the type resulting from the sum, will be cast to the
    pixel type of the output image.

    The total operation over one pixel will be

    For example, this filter could be used directly for adding images
    whose pixels are vectors of the same dimension, and to store the
    resulting vector in an output image of vector pixels.

    WARNING:  No numeric overflow checking is performed in this filter. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC3IUC3_Clone)
    InputConvertibleToOutputCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC3IUC3_InputConvertibleToOutputCheck
    
    InputHasZeroCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC3IUC3_InputHasZeroCheck
    
    __swig_destroy__ = _itkNaryAddImageFilterPython.delete_itkNaryAddImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkNaryAddImageFilterIUC3IUC3

        Create a new object of the class itkNaryAddImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNaryAddImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNaryAddImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNaryAddImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNaryAddImageFilterIUC3IUC3 in _itkNaryAddImageFilterPython:
_itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC3IUC3_swigregister(itkNaryAddImageFilterIUC3IUC3)
itkNaryAddImageFilterIUC3IUC3___New_orig__ = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC3IUC3___New_orig__
itkNaryAddImageFilterIUC3IUC3_cast = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC3IUC3_cast


def itkNaryAddImageFilterIUS2IUS2_New():
    return itkNaryAddImageFilterIUS2IUS2.New()

class itkNaryAddImageFilterIUS2IUS2(itkNaryAddImageFilterIUS2IUS2_Superclass):
    r"""


    Pixel-wise addition of N images.

    This class is templated over the types of the input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    The pixel type of the input images must have a valid definition of the
    operator+ with each other. This condition is required because
    internally this filter will perform the operation

    Additionally the type resulting from the sum, will be cast to the
    pixel type of the output image.

    The total operation over one pixel will be

    For example, this filter could be used directly for adding images
    whose pixels are vectors of the same dimension, and to store the
    resulting vector in an output image of vector pixels.

    WARNING:  No numeric overflow checking is performed in this filter. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS2IUS2_Clone)
    InputConvertibleToOutputCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS2IUS2_InputConvertibleToOutputCheck
    
    InputHasZeroCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS2IUS2_InputHasZeroCheck
    
    __swig_destroy__ = _itkNaryAddImageFilterPython.delete_itkNaryAddImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkNaryAddImageFilterIUS2IUS2

        Create a new object of the class itkNaryAddImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNaryAddImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNaryAddImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNaryAddImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNaryAddImageFilterIUS2IUS2 in _itkNaryAddImageFilterPython:
_itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS2IUS2_swigregister(itkNaryAddImageFilterIUS2IUS2)
itkNaryAddImageFilterIUS2IUS2___New_orig__ = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS2IUS2___New_orig__
itkNaryAddImageFilterIUS2IUS2_cast = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS2IUS2_cast


def itkNaryAddImageFilterIUS3IUS3_New():
    return itkNaryAddImageFilterIUS3IUS3.New()

class itkNaryAddImageFilterIUS3IUS3(itkNaryAddImageFilterIUS3IUS3_Superclass):
    r"""


    Pixel-wise addition of N images.

    This class is templated over the types of the input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    The pixel type of the input images must have a valid definition of the
    operator+ with each other. This condition is required because
    internally this filter will perform the operation

    Additionally the type resulting from the sum, will be cast to the
    pixel type of the output image.

    The total operation over one pixel will be

    For example, this filter could be used directly for adding images
    whose pixels are vectors of the same dimension, and to store the
    resulting vector in an output image of vector pixels.

    WARNING:  No numeric overflow checking is performed in this filter. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS3IUS3_Clone)
    InputConvertibleToOutputCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS3IUS3_InputConvertibleToOutputCheck
    
    InputHasZeroCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS3IUS3_InputHasZeroCheck
    
    __swig_destroy__ = _itkNaryAddImageFilterPython.delete_itkNaryAddImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkNaryAddImageFilterIUS3IUS3

        Create a new object of the class itkNaryAddImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNaryAddImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNaryAddImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNaryAddImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNaryAddImageFilterIUS3IUS3 in _itkNaryAddImageFilterPython:
_itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS3IUS3_swigregister(itkNaryAddImageFilterIUS3IUS3)
itkNaryAddImageFilterIUS3IUS3___New_orig__ = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS3IUS3___New_orig__
itkNaryAddImageFilterIUS3IUS3_cast = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def nary_functor_image_filter(*args, **kwargs):
    """Procedural interface for NaryFunctorImageFilter"""
    import itk
    instance = itk.NaryFunctorImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def nary_functor_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.NaryFunctorImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.NaryFunctorImageFilter.values()[0]
    else:
        filter_object = itk.NaryFunctorImageFilter

    nary_functor_image_filter.__doc__ = filter_object.__doc__
    nary_functor_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    nary_functor_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.NaryFunctorImageFilter, itkTemplate.itkTemplate):
        nary_functor_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        nary_functor_image_filter.__doc__ += "\n"
        nary_functor_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        nary_functor_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])
import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def nary_add_image_filter(*args, **kwargs):
    """Procedural interface for NaryAddImageFilter"""
    import itk
    instance = itk.NaryAddImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def nary_add_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.NaryAddImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.NaryAddImageFilter.values()[0]
    else:
        filter_object = itk.NaryAddImageFilter

    nary_add_image_filter.__doc__ = filter_object.__doc__
    nary_add_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    nary_add_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.NaryAddImageFilter, itkTemplate.itkTemplate):
        nary_add_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        nary_add_image_filter.__doc__ += "\n"
        nary_add_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        nary_add_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



