# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageFeaturePython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkSobelEdgeDetectionImageFilterPython
else:
    import _itkSobelEdgeDetectionImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkSobelEdgeDetectionImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkSobelEdgeDetectionImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkImageToImageFilterAPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkFixedArrayPython
import itk.itkPointPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkRGBPixelPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython

def itkSobelEdgeDetectionImageFilterID2ID2_New():
    return itkSobelEdgeDetectionImageFilterID2ID2.New()

class itkSobelEdgeDetectionImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""


    A 2D or 3D edge detection using the Sobel operator.

    This filter uses the Sobel operator to calculate the image gradient
    and then finds the magnitude of this gradient vector. The Sobel
    gradient magnitude (square-root sum of squares) is an indication of
    edge strength.

    See:  ImageToImageFilter

    See:  SobelOperator

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    {Filtering/ImageFeature/SobelEdgeDetectionImageFilter,Sobel Edge
    Detection Image Filter} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterID2ID2_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterID2ID2_GenerateInputRequestedRegion)
    SameDimensionCheck = _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterID2ID2_SameDimensionCheck
    
    OutputHasNumericTraitsCheck = _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterID2ID2_OutputHasNumericTraitsCheck
    
    OutputPixelIsFloatingPointCheck = _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterID2ID2_OutputPixelIsFloatingPointCheck
    
    __swig_destroy__ = _itkSobelEdgeDetectionImageFilterPython.delete_itkSobelEdgeDetectionImageFilterID2ID2
    cast = _swig_new_static_method(_itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkSobelEdgeDetectionImageFilterID2ID2

        Create a new object of the class itkSobelEdgeDetectionImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSobelEdgeDetectionImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSobelEdgeDetectionImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSobelEdgeDetectionImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSobelEdgeDetectionImageFilterID2ID2 in _itkSobelEdgeDetectionImageFilterPython:
_itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterID2ID2_swigregister(itkSobelEdgeDetectionImageFilterID2ID2)
itkSobelEdgeDetectionImageFilterID2ID2___New_orig__ = _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterID2ID2___New_orig__
itkSobelEdgeDetectionImageFilterID2ID2_cast = _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterID2ID2_cast


def itkSobelEdgeDetectionImageFilterID3ID3_New():
    return itkSobelEdgeDetectionImageFilterID3ID3.New()

class itkSobelEdgeDetectionImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""


    A 2D or 3D edge detection using the Sobel operator.

    This filter uses the Sobel operator to calculate the image gradient
    and then finds the magnitude of this gradient vector. The Sobel
    gradient magnitude (square-root sum of squares) is an indication of
    edge strength.

    See:  ImageToImageFilter

    See:  SobelOperator

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    {Filtering/ImageFeature/SobelEdgeDetectionImageFilter,Sobel Edge
    Detection Image Filter} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterID3ID3_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterID3ID3_GenerateInputRequestedRegion)
    SameDimensionCheck = _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterID3ID3_SameDimensionCheck
    
    OutputHasNumericTraitsCheck = _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterID3ID3_OutputHasNumericTraitsCheck
    
    OutputPixelIsFloatingPointCheck = _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterID3ID3_OutputPixelIsFloatingPointCheck
    
    __swig_destroy__ = _itkSobelEdgeDetectionImageFilterPython.delete_itkSobelEdgeDetectionImageFilterID3ID3
    cast = _swig_new_static_method(_itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkSobelEdgeDetectionImageFilterID3ID3

        Create a new object of the class itkSobelEdgeDetectionImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSobelEdgeDetectionImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSobelEdgeDetectionImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSobelEdgeDetectionImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSobelEdgeDetectionImageFilterID3ID3 in _itkSobelEdgeDetectionImageFilterPython:
_itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterID3ID3_swigregister(itkSobelEdgeDetectionImageFilterID3ID3)
itkSobelEdgeDetectionImageFilterID3ID3___New_orig__ = _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterID3ID3___New_orig__
itkSobelEdgeDetectionImageFilterID3ID3_cast = _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterID3ID3_cast


def itkSobelEdgeDetectionImageFilterIF2IF2_New():
    return itkSobelEdgeDetectionImageFilterIF2IF2.New()

class itkSobelEdgeDetectionImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""


    A 2D or 3D edge detection using the Sobel operator.

    This filter uses the Sobel operator to calculate the image gradient
    and then finds the magnitude of this gradient vector. The Sobel
    gradient magnitude (square-root sum of squares) is an indication of
    edge strength.

    See:  ImageToImageFilter

    See:  SobelOperator

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    {Filtering/ImageFeature/SobelEdgeDetectionImageFilter,Sobel Edge
    Detection Image Filter} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterIF2IF2_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterIF2IF2_GenerateInputRequestedRegion)
    SameDimensionCheck = _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterIF2IF2_SameDimensionCheck
    
    OutputHasNumericTraitsCheck = _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterIF2IF2_OutputHasNumericTraitsCheck
    
    OutputPixelIsFloatingPointCheck = _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterIF2IF2_OutputPixelIsFloatingPointCheck
    
    __swig_destroy__ = _itkSobelEdgeDetectionImageFilterPython.delete_itkSobelEdgeDetectionImageFilterIF2IF2
    cast = _swig_new_static_method(_itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkSobelEdgeDetectionImageFilterIF2IF2

        Create a new object of the class itkSobelEdgeDetectionImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSobelEdgeDetectionImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSobelEdgeDetectionImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSobelEdgeDetectionImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSobelEdgeDetectionImageFilterIF2IF2 in _itkSobelEdgeDetectionImageFilterPython:
_itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterIF2IF2_swigregister(itkSobelEdgeDetectionImageFilterIF2IF2)
itkSobelEdgeDetectionImageFilterIF2IF2___New_orig__ = _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterIF2IF2___New_orig__
itkSobelEdgeDetectionImageFilterIF2IF2_cast = _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterIF2IF2_cast


def itkSobelEdgeDetectionImageFilterIF3IF3_New():
    return itkSobelEdgeDetectionImageFilterIF3IF3.New()

class itkSobelEdgeDetectionImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""


    A 2D or 3D edge detection using the Sobel operator.

    This filter uses the Sobel operator to calculate the image gradient
    and then finds the magnitude of this gradient vector. The Sobel
    gradient magnitude (square-root sum of squares) is an indication of
    edge strength.

    See:  ImageToImageFilter

    See:  SobelOperator

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    {Filtering/ImageFeature/SobelEdgeDetectionImageFilter,Sobel Edge
    Detection Image Filter} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterIF3IF3_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterIF3IF3_GenerateInputRequestedRegion)
    SameDimensionCheck = _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterIF3IF3_SameDimensionCheck
    
    OutputHasNumericTraitsCheck = _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterIF3IF3_OutputHasNumericTraitsCheck
    
    OutputPixelIsFloatingPointCheck = _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterIF3IF3_OutputPixelIsFloatingPointCheck
    
    __swig_destroy__ = _itkSobelEdgeDetectionImageFilterPython.delete_itkSobelEdgeDetectionImageFilterIF3IF3
    cast = _swig_new_static_method(_itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkSobelEdgeDetectionImageFilterIF3IF3

        Create a new object of the class itkSobelEdgeDetectionImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSobelEdgeDetectionImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSobelEdgeDetectionImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSobelEdgeDetectionImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSobelEdgeDetectionImageFilterIF3IF3 in _itkSobelEdgeDetectionImageFilterPython:
_itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterIF3IF3_swigregister(itkSobelEdgeDetectionImageFilterIF3IF3)
itkSobelEdgeDetectionImageFilterIF3IF3___New_orig__ = _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterIF3IF3___New_orig__
itkSobelEdgeDetectionImageFilterIF3IF3_cast = _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterIF3IF3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def sobel_edge_detection_image_filter(*args, **kwargs):
    """Procedural interface for SobelEdgeDetectionImageFilter"""
    import itk
    instance = itk.SobelEdgeDetectionImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def sobel_edge_detection_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.SobelEdgeDetectionImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.SobelEdgeDetectionImageFilter.values()[0]
    else:
        filter_object = itk.SobelEdgeDetectionImageFilter

    sobel_edge_detection_image_filter.__doc__ = filter_object.__doc__
    sobel_edge_detection_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    sobel_edge_detection_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.SobelEdgeDetectionImageFilter, itkTemplate.itkTemplate):
        sobel_edge_detection_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        sobel_edge_detection_image_filter.__doc__ += "\n"
        sobel_edge_detection_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        sobel_edge_detection_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



