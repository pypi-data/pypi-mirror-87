# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageGridPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkPermuteAxesImageFilterPython
else:
    import _itkPermuteAxesImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkPermuteAxesImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkPermuteAxesImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.ITKCommonBasePython
import itk.itkImageToImageFilterAPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.stdcomplexPython
import itk.itkVariableLengthVectorPython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython

def itkPermuteAxesImageFilterID2_New():
    return itkPermuteAxesImageFilterID2.New()

class itkPermuteAxesImageFilterID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""


    Permutes the image axes according to a user specified order.

    PermuateAxesImageFilter permutes the image axes according to a user
    specified order. The permutation order is set via method SetOrder(
    order ) where the input is an array of ImageDimension number of
    unsigned int. The elements of the array must be a rearrangment of the
    numbers from 0 to ImageDimension - 1.

    The i-th axis of the output image corresponds with the order[i]-th
    axis of the input image.

    The output meta image information (LargestPossibleRegion, spacing,
    origin) is computed by permuting the corresponding input meta
    information. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID2___New_orig__)
    Clone = _swig_new_instance_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID2_Clone)
    SetOrder = _swig_new_instance_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID2_SetOrder)
    GetOrder = _swig_new_instance_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID2_GetOrder)
    GetInverseOrder = _swig_new_instance_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID2_GetInverseOrder)
    __swig_destroy__ = _itkPermuteAxesImageFilterPython.delete_itkPermuteAxesImageFilterID2
    cast = _swig_new_static_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID2_cast)

    def New(*args, **kargs):
        """New() -> itkPermuteAxesImageFilterID2

        Create a new object of the class itkPermuteAxesImageFilterID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPermuteAxesImageFilterID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPermuteAxesImageFilterID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPermuteAxesImageFilterID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPermuteAxesImageFilterID2 in _itkPermuteAxesImageFilterPython:
_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID2_swigregister(itkPermuteAxesImageFilterID2)
itkPermuteAxesImageFilterID2___New_orig__ = _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID2___New_orig__
itkPermuteAxesImageFilterID2_cast = _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID2_cast


def itkPermuteAxesImageFilterID3_New():
    return itkPermuteAxesImageFilterID3.New()

class itkPermuteAxesImageFilterID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""


    Permutes the image axes according to a user specified order.

    PermuateAxesImageFilter permutes the image axes according to a user
    specified order. The permutation order is set via method SetOrder(
    order ) where the input is an array of ImageDimension number of
    unsigned int. The elements of the array must be a rearrangment of the
    numbers from 0 to ImageDimension - 1.

    The i-th axis of the output image corresponds with the order[i]-th
    axis of the input image.

    The output meta image information (LargestPossibleRegion, spacing,
    origin) is computed by permuting the corresponding input meta
    information. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID3___New_orig__)
    Clone = _swig_new_instance_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID3_Clone)
    SetOrder = _swig_new_instance_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID3_SetOrder)
    GetOrder = _swig_new_instance_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID3_GetOrder)
    GetInverseOrder = _swig_new_instance_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID3_GetInverseOrder)
    __swig_destroy__ = _itkPermuteAxesImageFilterPython.delete_itkPermuteAxesImageFilterID3
    cast = _swig_new_static_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID3_cast)

    def New(*args, **kargs):
        """New() -> itkPermuteAxesImageFilterID3

        Create a new object of the class itkPermuteAxesImageFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPermuteAxesImageFilterID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPermuteAxesImageFilterID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPermuteAxesImageFilterID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPermuteAxesImageFilterID3 in _itkPermuteAxesImageFilterPython:
_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID3_swigregister(itkPermuteAxesImageFilterID3)
itkPermuteAxesImageFilterID3___New_orig__ = _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID3___New_orig__
itkPermuteAxesImageFilterID3_cast = _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID3_cast


def itkPermuteAxesImageFilterIF2_New():
    return itkPermuteAxesImageFilterIF2.New()

class itkPermuteAxesImageFilterIF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""


    Permutes the image axes according to a user specified order.

    PermuateAxesImageFilter permutes the image axes according to a user
    specified order. The permutation order is set via method SetOrder(
    order ) where the input is an array of ImageDimension number of
    unsigned int. The elements of the array must be a rearrangment of the
    numbers from 0 to ImageDimension - 1.

    The i-th axis of the output image corresponds with the order[i]-th
    axis of the input image.

    The output meta image information (LargestPossibleRegion, spacing,
    origin) is computed by permuting the corresponding input meta
    information. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF2___New_orig__)
    Clone = _swig_new_instance_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF2_Clone)
    SetOrder = _swig_new_instance_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF2_SetOrder)
    GetOrder = _swig_new_instance_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF2_GetOrder)
    GetInverseOrder = _swig_new_instance_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF2_GetInverseOrder)
    __swig_destroy__ = _itkPermuteAxesImageFilterPython.delete_itkPermuteAxesImageFilterIF2
    cast = _swig_new_static_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF2_cast)

    def New(*args, **kargs):
        """New() -> itkPermuteAxesImageFilterIF2

        Create a new object of the class itkPermuteAxesImageFilterIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPermuteAxesImageFilterIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPermuteAxesImageFilterIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPermuteAxesImageFilterIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPermuteAxesImageFilterIF2 in _itkPermuteAxesImageFilterPython:
_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF2_swigregister(itkPermuteAxesImageFilterIF2)
itkPermuteAxesImageFilterIF2___New_orig__ = _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF2___New_orig__
itkPermuteAxesImageFilterIF2_cast = _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF2_cast


def itkPermuteAxesImageFilterIF3_New():
    return itkPermuteAxesImageFilterIF3.New()

class itkPermuteAxesImageFilterIF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""


    Permutes the image axes according to a user specified order.

    PermuateAxesImageFilter permutes the image axes according to a user
    specified order. The permutation order is set via method SetOrder(
    order ) where the input is an array of ImageDimension number of
    unsigned int. The elements of the array must be a rearrangment of the
    numbers from 0 to ImageDimension - 1.

    The i-th axis of the output image corresponds with the order[i]-th
    axis of the input image.

    The output meta image information (LargestPossibleRegion, spacing,
    origin) is computed by permuting the corresponding input meta
    information. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF3___New_orig__)
    Clone = _swig_new_instance_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF3_Clone)
    SetOrder = _swig_new_instance_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF3_SetOrder)
    GetOrder = _swig_new_instance_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF3_GetOrder)
    GetInverseOrder = _swig_new_instance_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF3_GetInverseOrder)
    __swig_destroy__ = _itkPermuteAxesImageFilterPython.delete_itkPermuteAxesImageFilterIF3
    cast = _swig_new_static_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF3_cast)

    def New(*args, **kargs):
        """New() -> itkPermuteAxesImageFilterIF3

        Create a new object of the class itkPermuteAxesImageFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPermuteAxesImageFilterIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPermuteAxesImageFilterIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPermuteAxesImageFilterIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPermuteAxesImageFilterIF3 in _itkPermuteAxesImageFilterPython:
_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF3_swigregister(itkPermuteAxesImageFilterIF3)
itkPermuteAxesImageFilterIF3___New_orig__ = _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF3___New_orig__
itkPermuteAxesImageFilterIF3_cast = _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF3_cast


def itkPermuteAxesImageFilterISS2_New():
    return itkPermuteAxesImageFilterISS2.New()

class itkPermuteAxesImageFilterISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""


    Permutes the image axes according to a user specified order.

    PermuateAxesImageFilter permutes the image axes according to a user
    specified order. The permutation order is set via method SetOrder(
    order ) where the input is an array of ImageDimension number of
    unsigned int. The elements of the array must be a rearrangment of the
    numbers from 0 to ImageDimension - 1.

    The i-th axis of the output image corresponds with the order[i]-th
    axis of the input image.

    The output meta image information (LargestPossibleRegion, spacing,
    origin) is computed by permuting the corresponding input meta
    information. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterISS2_Clone)
    SetOrder = _swig_new_instance_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterISS2_SetOrder)
    GetOrder = _swig_new_instance_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterISS2_GetOrder)
    GetInverseOrder = _swig_new_instance_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterISS2_GetInverseOrder)
    __swig_destroy__ = _itkPermuteAxesImageFilterPython.delete_itkPermuteAxesImageFilterISS2
    cast = _swig_new_static_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterISS2_cast)

    def New(*args, **kargs):
        """New() -> itkPermuteAxesImageFilterISS2

        Create a new object of the class itkPermuteAxesImageFilterISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPermuteAxesImageFilterISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPermuteAxesImageFilterISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPermuteAxesImageFilterISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPermuteAxesImageFilterISS2 in _itkPermuteAxesImageFilterPython:
_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterISS2_swigregister(itkPermuteAxesImageFilterISS2)
itkPermuteAxesImageFilterISS2___New_orig__ = _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterISS2___New_orig__
itkPermuteAxesImageFilterISS2_cast = _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterISS2_cast


def itkPermuteAxesImageFilterISS3_New():
    return itkPermuteAxesImageFilterISS3.New()

class itkPermuteAxesImageFilterISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""


    Permutes the image axes according to a user specified order.

    PermuateAxesImageFilter permutes the image axes according to a user
    specified order. The permutation order is set via method SetOrder(
    order ) where the input is an array of ImageDimension number of
    unsigned int. The elements of the array must be a rearrangment of the
    numbers from 0 to ImageDimension - 1.

    The i-th axis of the output image corresponds with the order[i]-th
    axis of the input image.

    The output meta image information (LargestPossibleRegion, spacing,
    origin) is computed by permuting the corresponding input meta
    information. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterISS3_Clone)
    SetOrder = _swig_new_instance_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterISS3_SetOrder)
    GetOrder = _swig_new_instance_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterISS3_GetOrder)
    GetInverseOrder = _swig_new_instance_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterISS3_GetInverseOrder)
    __swig_destroy__ = _itkPermuteAxesImageFilterPython.delete_itkPermuteAxesImageFilterISS3
    cast = _swig_new_static_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterISS3_cast)

    def New(*args, **kargs):
        """New() -> itkPermuteAxesImageFilterISS3

        Create a new object of the class itkPermuteAxesImageFilterISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPermuteAxesImageFilterISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPermuteAxesImageFilterISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPermuteAxesImageFilterISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPermuteAxesImageFilterISS3 in _itkPermuteAxesImageFilterPython:
_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterISS3_swigregister(itkPermuteAxesImageFilterISS3)
itkPermuteAxesImageFilterISS3___New_orig__ = _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterISS3___New_orig__
itkPermuteAxesImageFilterISS3_cast = _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterISS3_cast


def itkPermuteAxesImageFilterIUC2_New():
    return itkPermuteAxesImageFilterIUC2.New()

class itkPermuteAxesImageFilterIUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""


    Permutes the image axes according to a user specified order.

    PermuateAxesImageFilter permutes the image axes according to a user
    specified order. The permutation order is set via method SetOrder(
    order ) where the input is an array of ImageDimension number of
    unsigned int. The elements of the array must be a rearrangment of the
    numbers from 0 to ImageDimension - 1.

    The i-th axis of the output image corresponds with the order[i]-th
    axis of the input image.

    The output meta image information (LargestPossibleRegion, spacing,
    origin) is computed by permuting the corresponding input meta
    information. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC2_Clone)
    SetOrder = _swig_new_instance_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC2_SetOrder)
    GetOrder = _swig_new_instance_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC2_GetOrder)
    GetInverseOrder = _swig_new_instance_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC2_GetInverseOrder)
    __swig_destroy__ = _itkPermuteAxesImageFilterPython.delete_itkPermuteAxesImageFilterIUC2
    cast = _swig_new_static_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC2_cast)

    def New(*args, **kargs):
        """New() -> itkPermuteAxesImageFilterIUC2

        Create a new object of the class itkPermuteAxesImageFilterIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPermuteAxesImageFilterIUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPermuteAxesImageFilterIUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPermuteAxesImageFilterIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPermuteAxesImageFilterIUC2 in _itkPermuteAxesImageFilterPython:
_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC2_swigregister(itkPermuteAxesImageFilterIUC2)
itkPermuteAxesImageFilterIUC2___New_orig__ = _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC2___New_orig__
itkPermuteAxesImageFilterIUC2_cast = _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC2_cast


def itkPermuteAxesImageFilterIUC3_New():
    return itkPermuteAxesImageFilterIUC3.New()

class itkPermuteAxesImageFilterIUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""


    Permutes the image axes according to a user specified order.

    PermuateAxesImageFilter permutes the image axes according to a user
    specified order. The permutation order is set via method SetOrder(
    order ) where the input is an array of ImageDimension number of
    unsigned int. The elements of the array must be a rearrangment of the
    numbers from 0 to ImageDimension - 1.

    The i-th axis of the output image corresponds with the order[i]-th
    axis of the input image.

    The output meta image information (LargestPossibleRegion, spacing,
    origin) is computed by permuting the corresponding input meta
    information. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC3_Clone)
    SetOrder = _swig_new_instance_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC3_SetOrder)
    GetOrder = _swig_new_instance_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC3_GetOrder)
    GetInverseOrder = _swig_new_instance_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC3_GetInverseOrder)
    __swig_destroy__ = _itkPermuteAxesImageFilterPython.delete_itkPermuteAxesImageFilterIUC3
    cast = _swig_new_static_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC3_cast)

    def New(*args, **kargs):
        """New() -> itkPermuteAxesImageFilterIUC3

        Create a new object of the class itkPermuteAxesImageFilterIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPermuteAxesImageFilterIUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPermuteAxesImageFilterIUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPermuteAxesImageFilterIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPermuteAxesImageFilterIUC3 in _itkPermuteAxesImageFilterPython:
_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC3_swigregister(itkPermuteAxesImageFilterIUC3)
itkPermuteAxesImageFilterIUC3___New_orig__ = _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC3___New_orig__
itkPermuteAxesImageFilterIUC3_cast = _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC3_cast


def itkPermuteAxesImageFilterIUS2_New():
    return itkPermuteAxesImageFilterIUS2.New()

class itkPermuteAxesImageFilterIUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""


    Permutes the image axes according to a user specified order.

    PermuateAxesImageFilter permutes the image axes according to a user
    specified order. The permutation order is set via method SetOrder(
    order ) where the input is an array of ImageDimension number of
    unsigned int. The elements of the array must be a rearrangment of the
    numbers from 0 to ImageDimension - 1.

    The i-th axis of the output image corresponds with the order[i]-th
    axis of the input image.

    The output meta image information (LargestPossibleRegion, spacing,
    origin) is computed by permuting the corresponding input meta
    information. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS2_Clone)
    SetOrder = _swig_new_instance_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS2_SetOrder)
    GetOrder = _swig_new_instance_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS2_GetOrder)
    GetInverseOrder = _swig_new_instance_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS2_GetInverseOrder)
    __swig_destroy__ = _itkPermuteAxesImageFilterPython.delete_itkPermuteAxesImageFilterIUS2
    cast = _swig_new_static_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS2_cast)

    def New(*args, **kargs):
        """New() -> itkPermuteAxesImageFilterIUS2

        Create a new object of the class itkPermuteAxesImageFilterIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPermuteAxesImageFilterIUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPermuteAxesImageFilterIUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPermuteAxesImageFilterIUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPermuteAxesImageFilterIUS2 in _itkPermuteAxesImageFilterPython:
_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS2_swigregister(itkPermuteAxesImageFilterIUS2)
itkPermuteAxesImageFilterIUS2___New_orig__ = _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS2___New_orig__
itkPermuteAxesImageFilterIUS2_cast = _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS2_cast


def itkPermuteAxesImageFilterIUS3_New():
    return itkPermuteAxesImageFilterIUS3.New()

class itkPermuteAxesImageFilterIUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""


    Permutes the image axes according to a user specified order.

    PermuateAxesImageFilter permutes the image axes according to a user
    specified order. The permutation order is set via method SetOrder(
    order ) where the input is an array of ImageDimension number of
    unsigned int. The elements of the array must be a rearrangment of the
    numbers from 0 to ImageDimension - 1.

    The i-th axis of the output image corresponds with the order[i]-th
    axis of the input image.

    The output meta image information (LargestPossibleRegion, spacing,
    origin) is computed by permuting the corresponding input meta
    information. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS3_Clone)
    SetOrder = _swig_new_instance_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS3_SetOrder)
    GetOrder = _swig_new_instance_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS3_GetOrder)
    GetInverseOrder = _swig_new_instance_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS3_GetInverseOrder)
    __swig_destroy__ = _itkPermuteAxesImageFilterPython.delete_itkPermuteAxesImageFilterIUS3
    cast = _swig_new_static_method(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS3_cast)

    def New(*args, **kargs):
        """New() -> itkPermuteAxesImageFilterIUS3

        Create a new object of the class itkPermuteAxesImageFilterIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPermuteAxesImageFilterIUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPermuteAxesImageFilterIUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPermuteAxesImageFilterIUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPermuteAxesImageFilterIUS3 in _itkPermuteAxesImageFilterPython:
_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS3_swigregister(itkPermuteAxesImageFilterIUS3)
itkPermuteAxesImageFilterIUS3___New_orig__ = _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS3___New_orig__
itkPermuteAxesImageFilterIUS3_cast = _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def permute_axes_image_filter(*args, **kwargs):
    """Procedural interface for PermuteAxesImageFilter"""
    import itk
    instance = itk.PermuteAxesImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def permute_axes_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.PermuteAxesImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.PermuteAxesImageFilter.values()[0]
    else:
        filter_object = itk.PermuteAxesImageFilter

    permute_axes_image_filter.__doc__ = filter_object.__doc__
    permute_axes_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    permute_axes_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.PermuteAxesImageFilter, itkTemplate.itkTemplate):
        permute_axes_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        permute_axes_image_filter.__doc__ += "\n"
        permute_axes_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        permute_axes_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



