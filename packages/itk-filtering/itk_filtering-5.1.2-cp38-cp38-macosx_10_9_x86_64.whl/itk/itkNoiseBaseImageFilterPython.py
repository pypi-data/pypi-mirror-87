# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageNoisePython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkNoiseBaseImageFilterPython
else:
    import _itkNoiseBaseImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkNoiseBaseImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkNoiseBaseImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkImagePython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkPointPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.ITKCommonBasePython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkImageRegionPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterAPython
class itkNoiseBaseImageFilterID2ID2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2ID2):
    r"""


    An Abstract Base class for Noise image filters.

    This class add common methods for setting a seed for the random
    generators used to generate the noise.

    See:  InPlaceImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    GetSeed = _swig_new_instance_method(_itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterID2ID2_GetSeed)
    SetSeed = _swig_new_instance_method(_itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterID2ID2_SetSeed)
    __swig_destroy__ = _itkNoiseBaseImageFilterPython.delete_itkNoiseBaseImageFilterID2ID2
    cast = _swig_new_static_method(_itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterID2ID2_cast)

# Register itkNoiseBaseImageFilterID2ID2 in _itkNoiseBaseImageFilterPython:
_itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterID2ID2_swigregister(itkNoiseBaseImageFilterID2ID2)
itkNoiseBaseImageFilterID2ID2_cast = _itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterID2ID2_cast

class itkNoiseBaseImageFilterID3ID3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3):
    r"""


    An Abstract Base class for Noise image filters.

    This class add common methods for setting a seed for the random
    generators used to generate the noise.

    See:  InPlaceImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    GetSeed = _swig_new_instance_method(_itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterID3ID3_GetSeed)
    SetSeed = _swig_new_instance_method(_itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterID3ID3_SetSeed)
    __swig_destroy__ = _itkNoiseBaseImageFilterPython.delete_itkNoiseBaseImageFilterID3ID3
    cast = _swig_new_static_method(_itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterID3ID3_cast)

# Register itkNoiseBaseImageFilterID3ID3 in _itkNoiseBaseImageFilterPython:
_itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterID3ID3_swigregister(itkNoiseBaseImageFilterID3ID3)
itkNoiseBaseImageFilterID3ID3_cast = _itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterID3ID3_cast

class itkNoiseBaseImageFilterIF2IF2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IF2):
    r"""


    An Abstract Base class for Noise image filters.

    This class add common methods for setting a seed for the random
    generators used to generate the noise.

    See:  InPlaceImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    GetSeed = _swig_new_instance_method(_itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIF2IF2_GetSeed)
    SetSeed = _swig_new_instance_method(_itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIF2IF2_SetSeed)
    __swig_destroy__ = _itkNoiseBaseImageFilterPython.delete_itkNoiseBaseImageFilterIF2IF2
    cast = _swig_new_static_method(_itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIF2IF2_cast)

# Register itkNoiseBaseImageFilterIF2IF2 in _itkNoiseBaseImageFilterPython:
_itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIF2IF2_swigregister(itkNoiseBaseImageFilterIF2IF2)
itkNoiseBaseImageFilterIF2IF2_cast = _itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIF2IF2_cast

class itkNoiseBaseImageFilterIF3IF3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    r"""


    An Abstract Base class for Noise image filters.

    This class add common methods for setting a seed for the random
    generators used to generate the noise.

    See:  InPlaceImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    GetSeed = _swig_new_instance_method(_itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIF3IF3_GetSeed)
    SetSeed = _swig_new_instance_method(_itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIF3IF3_SetSeed)
    __swig_destroy__ = _itkNoiseBaseImageFilterPython.delete_itkNoiseBaseImageFilterIF3IF3
    cast = _swig_new_static_method(_itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIF3IF3_cast)

# Register itkNoiseBaseImageFilterIF3IF3 in _itkNoiseBaseImageFilterPython:
_itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIF3IF3_swigregister(itkNoiseBaseImageFilterIF3IF3)
itkNoiseBaseImageFilterIF3IF3_cast = _itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIF3IF3_cast

class itkNoiseBaseImageFilterISS2ISS2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2ISS2):
    r"""


    An Abstract Base class for Noise image filters.

    This class add common methods for setting a seed for the random
    generators used to generate the noise.

    See:  InPlaceImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    GetSeed = _swig_new_instance_method(_itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterISS2ISS2_GetSeed)
    SetSeed = _swig_new_instance_method(_itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterISS2ISS2_SetSeed)
    __swig_destroy__ = _itkNoiseBaseImageFilterPython.delete_itkNoiseBaseImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterISS2ISS2_cast)

# Register itkNoiseBaseImageFilterISS2ISS2 in _itkNoiseBaseImageFilterPython:
_itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterISS2ISS2_swigregister(itkNoiseBaseImageFilterISS2ISS2)
itkNoiseBaseImageFilterISS2ISS2_cast = _itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterISS2ISS2_cast

class itkNoiseBaseImageFilterISS3ISS3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3ISS3):
    r"""


    An Abstract Base class for Noise image filters.

    This class add common methods for setting a seed for the random
    generators used to generate the noise.

    See:  InPlaceImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    GetSeed = _swig_new_instance_method(_itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterISS3ISS3_GetSeed)
    SetSeed = _swig_new_instance_method(_itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterISS3ISS3_SetSeed)
    __swig_destroy__ = _itkNoiseBaseImageFilterPython.delete_itkNoiseBaseImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterISS3ISS3_cast)

# Register itkNoiseBaseImageFilterISS3ISS3 in _itkNoiseBaseImageFilterPython:
_itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterISS3ISS3_swigregister(itkNoiseBaseImageFilterISS3ISS3)
itkNoiseBaseImageFilterISS3ISS3_cast = _itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterISS3ISS3_cast

class itkNoiseBaseImageFilterIUC2IUC2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUC2):
    r"""


    An Abstract Base class for Noise image filters.

    This class add common methods for setting a seed for the random
    generators used to generate the noise.

    See:  InPlaceImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    GetSeed = _swig_new_instance_method(_itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIUC2IUC2_GetSeed)
    SetSeed = _swig_new_instance_method(_itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIUC2IUC2_SetSeed)
    __swig_destroy__ = _itkNoiseBaseImageFilterPython.delete_itkNoiseBaseImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIUC2IUC2_cast)

# Register itkNoiseBaseImageFilterIUC2IUC2 in _itkNoiseBaseImageFilterPython:
_itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIUC2IUC2_swigregister(itkNoiseBaseImageFilterIUC2IUC2)
itkNoiseBaseImageFilterIUC2IUC2_cast = _itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIUC2IUC2_cast

class itkNoiseBaseImageFilterIUC3IUC3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUC3):
    r"""


    An Abstract Base class for Noise image filters.

    This class add common methods for setting a seed for the random
    generators used to generate the noise.

    See:  InPlaceImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    GetSeed = _swig_new_instance_method(_itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIUC3IUC3_GetSeed)
    SetSeed = _swig_new_instance_method(_itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIUC3IUC3_SetSeed)
    __swig_destroy__ = _itkNoiseBaseImageFilterPython.delete_itkNoiseBaseImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIUC3IUC3_cast)

# Register itkNoiseBaseImageFilterIUC3IUC3 in _itkNoiseBaseImageFilterPython:
_itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIUC3IUC3_swigregister(itkNoiseBaseImageFilterIUC3IUC3)
itkNoiseBaseImageFilterIUC3IUC3_cast = _itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIUC3IUC3_cast

class itkNoiseBaseImageFilterIUS2IUS2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUS2):
    r"""


    An Abstract Base class for Noise image filters.

    This class add common methods for setting a seed for the random
    generators used to generate the noise.

    See:  InPlaceImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    GetSeed = _swig_new_instance_method(_itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIUS2IUS2_GetSeed)
    SetSeed = _swig_new_instance_method(_itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIUS2IUS2_SetSeed)
    __swig_destroy__ = _itkNoiseBaseImageFilterPython.delete_itkNoiseBaseImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIUS2IUS2_cast)

# Register itkNoiseBaseImageFilterIUS2IUS2 in _itkNoiseBaseImageFilterPython:
_itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIUS2IUS2_swigregister(itkNoiseBaseImageFilterIUS2IUS2)
itkNoiseBaseImageFilterIUS2IUS2_cast = _itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIUS2IUS2_cast

class itkNoiseBaseImageFilterIUS3IUS3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUS3):
    r"""


    An Abstract Base class for Noise image filters.

    This class add common methods for setting a seed for the random
    generators used to generate the noise.

    See:  InPlaceImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    GetSeed = _swig_new_instance_method(_itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIUS3IUS3_GetSeed)
    SetSeed = _swig_new_instance_method(_itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIUS3IUS3_SetSeed)
    __swig_destroy__ = _itkNoiseBaseImageFilterPython.delete_itkNoiseBaseImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIUS3IUS3_cast)

# Register itkNoiseBaseImageFilterIUS3IUS3 in _itkNoiseBaseImageFilterPython:
_itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIUS3IUS3_swigregister(itkNoiseBaseImageFilterIUS3IUS3)
itkNoiseBaseImageFilterIUS3IUS3_cast = _itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def noise_base_image_filter(*args, **kwargs):
    """Procedural interface for NoiseBaseImageFilter"""
    import itk
    instance = itk.NoiseBaseImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def noise_base_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.NoiseBaseImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.NoiseBaseImageFilter.values()[0]
    else:
        filter_object = itk.NoiseBaseImageFilter

    noise_base_image_filter.__doc__ = filter_object.__doc__
    noise_base_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    noise_base_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.NoiseBaseImageFilter, itkTemplate.itkTemplate):
        noise_base_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        noise_base_image_filter.__doc__ += "\n"
        noise_base_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        noise_base_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



