# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKMathematicalMorphologyPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkGrayscaleGeodesicErodeImageFilterPython
else:
    import _itkGrayscaleGeodesicErodeImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkGrayscaleGeodesicErodeImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkGrayscaleGeodesicErodeImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImagePython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.ITKCommonBasePython
import itk.itkPointPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkRGBAPixelPython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython

def itkGrayscaleGeodesicErodeImageFilterID2ID2_New():
    return itkGrayscaleGeodesicErodeImageFilterID2ID2.New()

class itkGrayscaleGeodesicErodeImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""


    geodesic gray scale erosion of an image

    Geodesic erosion operates on a "marker" image and a "mask" image.
    The marker image is eroded using an elementary structuring element
    (neighborhood of radius one using only the face connected neighbors).
    The resulting image is then compared with the mask image. The output
    image is the pixelwise maximum of the eroded marker image and the mask
    image.

    Geodesic erosion is run either one iteration or until convergence. In
    the convergence case, the filter is equivalent to "reconstruction by
    erosion". This filter is implemented to handle both scenarios. The
    one iteration case is multi-threaded. The convergence case is
    delegated to another instance of the same filter (but configured to
    run a single iteration).

    The marker image must be greater than or equal to the mask image (on a
    pixel by pixel basis).

    Geodesic morphology is described in Chapter 6 of Pierre Soille's book
    "Morphological Image Analysis: Principles and Applications", Second
    Edition, Springer, 2003.

    A noniterative version of this algorithm can be found in the
    ReconstructionByErosionImageFilter. This noniterative solution is much
    faster than the implementation provided here. All ITK filters that
    previously used GrayscaleGeodesicErodeImageFilter as part of their
    implementation have been converted to use the
    ReconstructionByErosionImageFilter. The
    GrayscaleGeodesicErodeImageFilter is maintained for backward
    compatibility.

    See:  MorphologyImageFilter, GrayscaleErodeImageFilter,
    GrayscaleFunctionErodeImageFilter, BinaryErodeImageFilter,
    ReconstructionByErosionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterID2ID2_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterID2ID2_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterID2ID2_GetMarkerImage)
    SetMaskImage = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterID2ID2_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterID2ID2_GetMaskImage)
    SetRunOneIteration = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterID2ID2_SetRunOneIteration)
    GetRunOneIteration = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterID2ID2_GetRunOneIteration)
    RunOneIterationOn = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterID2ID2_RunOneIterationOn)
    RunOneIterationOff = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterID2ID2_RunOneIterationOff)
    GetNumberOfIterationsUsed = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterID2ID2_GetNumberOfIterationsUsed)
    SetFullyConnected = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterID2ID2_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterID2ID2_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterID2ID2_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterID2ID2_FullyConnectedOff)
    SameDimensionCheck = _itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterID2ID2_SameDimensionCheck
    
    InputComparableCheck = _itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterID2ID2_InputComparableCheck
    
    InputConvertibleToOutputCheck = _itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterID2ID2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkGrayscaleGeodesicErodeImageFilterPython.delete_itkGrayscaleGeodesicErodeImageFilterID2ID2
    cast = _swig_new_static_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkGrayscaleGeodesicErodeImageFilterID2ID2

        Create a new object of the class itkGrayscaleGeodesicErodeImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGrayscaleGeodesicErodeImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGrayscaleGeodesicErodeImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGrayscaleGeodesicErodeImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGrayscaleGeodesicErodeImageFilterID2ID2 in _itkGrayscaleGeodesicErodeImageFilterPython:
_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterID2ID2_swigregister(itkGrayscaleGeodesicErodeImageFilterID2ID2)
itkGrayscaleGeodesicErodeImageFilterID2ID2___New_orig__ = _itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterID2ID2___New_orig__
itkGrayscaleGeodesicErodeImageFilterID2ID2_cast = _itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterID2ID2_cast


def itkGrayscaleGeodesicErodeImageFilterID3ID3_New():
    return itkGrayscaleGeodesicErodeImageFilterID3ID3.New()

class itkGrayscaleGeodesicErodeImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""


    geodesic gray scale erosion of an image

    Geodesic erosion operates on a "marker" image and a "mask" image.
    The marker image is eroded using an elementary structuring element
    (neighborhood of radius one using only the face connected neighbors).
    The resulting image is then compared with the mask image. The output
    image is the pixelwise maximum of the eroded marker image and the mask
    image.

    Geodesic erosion is run either one iteration or until convergence. In
    the convergence case, the filter is equivalent to "reconstruction by
    erosion". This filter is implemented to handle both scenarios. The
    one iteration case is multi-threaded. The convergence case is
    delegated to another instance of the same filter (but configured to
    run a single iteration).

    The marker image must be greater than or equal to the mask image (on a
    pixel by pixel basis).

    Geodesic morphology is described in Chapter 6 of Pierre Soille's book
    "Morphological Image Analysis: Principles and Applications", Second
    Edition, Springer, 2003.

    A noniterative version of this algorithm can be found in the
    ReconstructionByErosionImageFilter. This noniterative solution is much
    faster than the implementation provided here. All ITK filters that
    previously used GrayscaleGeodesicErodeImageFilter as part of their
    implementation have been converted to use the
    ReconstructionByErosionImageFilter. The
    GrayscaleGeodesicErodeImageFilter is maintained for backward
    compatibility.

    See:  MorphologyImageFilter, GrayscaleErodeImageFilter,
    GrayscaleFunctionErodeImageFilter, BinaryErodeImageFilter,
    ReconstructionByErosionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterID3ID3_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterID3ID3_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterID3ID3_GetMarkerImage)
    SetMaskImage = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterID3ID3_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterID3ID3_GetMaskImage)
    SetRunOneIteration = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterID3ID3_SetRunOneIteration)
    GetRunOneIteration = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterID3ID3_GetRunOneIteration)
    RunOneIterationOn = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterID3ID3_RunOneIterationOn)
    RunOneIterationOff = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterID3ID3_RunOneIterationOff)
    GetNumberOfIterationsUsed = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterID3ID3_GetNumberOfIterationsUsed)
    SetFullyConnected = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterID3ID3_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterID3ID3_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterID3ID3_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterID3ID3_FullyConnectedOff)
    SameDimensionCheck = _itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterID3ID3_SameDimensionCheck
    
    InputComparableCheck = _itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterID3ID3_InputComparableCheck
    
    InputConvertibleToOutputCheck = _itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterID3ID3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkGrayscaleGeodesicErodeImageFilterPython.delete_itkGrayscaleGeodesicErodeImageFilterID3ID3
    cast = _swig_new_static_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkGrayscaleGeodesicErodeImageFilterID3ID3

        Create a new object of the class itkGrayscaleGeodesicErodeImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGrayscaleGeodesicErodeImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGrayscaleGeodesicErodeImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGrayscaleGeodesicErodeImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGrayscaleGeodesicErodeImageFilterID3ID3 in _itkGrayscaleGeodesicErodeImageFilterPython:
_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterID3ID3_swigregister(itkGrayscaleGeodesicErodeImageFilterID3ID3)
itkGrayscaleGeodesicErodeImageFilterID3ID3___New_orig__ = _itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterID3ID3___New_orig__
itkGrayscaleGeodesicErodeImageFilterID3ID3_cast = _itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterID3ID3_cast


def itkGrayscaleGeodesicErodeImageFilterIF2IF2_New():
    return itkGrayscaleGeodesicErodeImageFilterIF2IF2.New()

class itkGrayscaleGeodesicErodeImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""


    geodesic gray scale erosion of an image

    Geodesic erosion operates on a "marker" image and a "mask" image.
    The marker image is eroded using an elementary structuring element
    (neighborhood of radius one using only the face connected neighbors).
    The resulting image is then compared with the mask image. The output
    image is the pixelwise maximum of the eroded marker image and the mask
    image.

    Geodesic erosion is run either one iteration or until convergence. In
    the convergence case, the filter is equivalent to "reconstruction by
    erosion". This filter is implemented to handle both scenarios. The
    one iteration case is multi-threaded. The convergence case is
    delegated to another instance of the same filter (but configured to
    run a single iteration).

    The marker image must be greater than or equal to the mask image (on a
    pixel by pixel basis).

    Geodesic morphology is described in Chapter 6 of Pierre Soille's book
    "Morphological Image Analysis: Principles and Applications", Second
    Edition, Springer, 2003.

    A noniterative version of this algorithm can be found in the
    ReconstructionByErosionImageFilter. This noniterative solution is much
    faster than the implementation provided here. All ITK filters that
    previously used GrayscaleGeodesicErodeImageFilter as part of their
    implementation have been converted to use the
    ReconstructionByErosionImageFilter. The
    GrayscaleGeodesicErodeImageFilter is maintained for backward
    compatibility.

    See:  MorphologyImageFilter, GrayscaleErodeImageFilter,
    GrayscaleFunctionErodeImageFilter, BinaryErodeImageFilter,
    ReconstructionByErosionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIF2IF2_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIF2IF2_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIF2IF2_GetMarkerImage)
    SetMaskImage = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIF2IF2_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIF2IF2_GetMaskImage)
    SetRunOneIteration = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIF2IF2_SetRunOneIteration)
    GetRunOneIteration = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIF2IF2_GetRunOneIteration)
    RunOneIterationOn = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIF2IF2_RunOneIterationOn)
    RunOneIterationOff = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIF2IF2_RunOneIterationOff)
    GetNumberOfIterationsUsed = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIF2IF2_GetNumberOfIterationsUsed)
    SetFullyConnected = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIF2IF2_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIF2IF2_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIF2IF2_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIF2IF2_FullyConnectedOff)
    SameDimensionCheck = _itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIF2IF2_SameDimensionCheck
    
    InputComparableCheck = _itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIF2IF2_InputComparableCheck
    
    InputConvertibleToOutputCheck = _itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIF2IF2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkGrayscaleGeodesicErodeImageFilterPython.delete_itkGrayscaleGeodesicErodeImageFilterIF2IF2
    cast = _swig_new_static_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkGrayscaleGeodesicErodeImageFilterIF2IF2

        Create a new object of the class itkGrayscaleGeodesicErodeImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGrayscaleGeodesicErodeImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGrayscaleGeodesicErodeImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGrayscaleGeodesicErodeImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGrayscaleGeodesicErodeImageFilterIF2IF2 in _itkGrayscaleGeodesicErodeImageFilterPython:
_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIF2IF2_swigregister(itkGrayscaleGeodesicErodeImageFilterIF2IF2)
itkGrayscaleGeodesicErodeImageFilterIF2IF2___New_orig__ = _itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIF2IF2___New_orig__
itkGrayscaleGeodesicErodeImageFilterIF2IF2_cast = _itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIF2IF2_cast


def itkGrayscaleGeodesicErodeImageFilterIF3IF3_New():
    return itkGrayscaleGeodesicErodeImageFilterIF3IF3.New()

class itkGrayscaleGeodesicErodeImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""


    geodesic gray scale erosion of an image

    Geodesic erosion operates on a "marker" image and a "mask" image.
    The marker image is eroded using an elementary structuring element
    (neighborhood of radius one using only the face connected neighbors).
    The resulting image is then compared with the mask image. The output
    image is the pixelwise maximum of the eroded marker image and the mask
    image.

    Geodesic erosion is run either one iteration or until convergence. In
    the convergence case, the filter is equivalent to "reconstruction by
    erosion". This filter is implemented to handle both scenarios. The
    one iteration case is multi-threaded. The convergence case is
    delegated to another instance of the same filter (but configured to
    run a single iteration).

    The marker image must be greater than or equal to the mask image (on a
    pixel by pixel basis).

    Geodesic morphology is described in Chapter 6 of Pierre Soille's book
    "Morphological Image Analysis: Principles and Applications", Second
    Edition, Springer, 2003.

    A noniterative version of this algorithm can be found in the
    ReconstructionByErosionImageFilter. This noniterative solution is much
    faster than the implementation provided here. All ITK filters that
    previously used GrayscaleGeodesicErodeImageFilter as part of their
    implementation have been converted to use the
    ReconstructionByErosionImageFilter. The
    GrayscaleGeodesicErodeImageFilter is maintained for backward
    compatibility.

    See:  MorphologyImageFilter, GrayscaleErodeImageFilter,
    GrayscaleFunctionErodeImageFilter, BinaryErodeImageFilter,
    ReconstructionByErosionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIF3IF3_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIF3IF3_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIF3IF3_GetMarkerImage)
    SetMaskImage = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIF3IF3_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIF3IF3_GetMaskImage)
    SetRunOneIteration = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIF3IF3_SetRunOneIteration)
    GetRunOneIteration = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIF3IF3_GetRunOneIteration)
    RunOneIterationOn = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIF3IF3_RunOneIterationOn)
    RunOneIterationOff = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIF3IF3_RunOneIterationOff)
    GetNumberOfIterationsUsed = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIF3IF3_GetNumberOfIterationsUsed)
    SetFullyConnected = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIF3IF3_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIF3IF3_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIF3IF3_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIF3IF3_FullyConnectedOff)
    SameDimensionCheck = _itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIF3IF3_SameDimensionCheck
    
    InputComparableCheck = _itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIF3IF3_InputComparableCheck
    
    InputConvertibleToOutputCheck = _itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIF3IF3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkGrayscaleGeodesicErodeImageFilterPython.delete_itkGrayscaleGeodesicErodeImageFilterIF3IF3
    cast = _swig_new_static_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkGrayscaleGeodesicErodeImageFilterIF3IF3

        Create a new object of the class itkGrayscaleGeodesicErodeImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGrayscaleGeodesicErodeImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGrayscaleGeodesicErodeImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGrayscaleGeodesicErodeImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGrayscaleGeodesicErodeImageFilterIF3IF3 in _itkGrayscaleGeodesicErodeImageFilterPython:
_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIF3IF3_swigregister(itkGrayscaleGeodesicErodeImageFilterIF3IF3)
itkGrayscaleGeodesicErodeImageFilterIF3IF3___New_orig__ = _itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIF3IF3___New_orig__
itkGrayscaleGeodesicErodeImageFilterIF3IF3_cast = _itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIF3IF3_cast


def itkGrayscaleGeodesicErodeImageFilterISS2ISS2_New():
    return itkGrayscaleGeodesicErodeImageFilterISS2ISS2.New()

class itkGrayscaleGeodesicErodeImageFilterISS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""


    geodesic gray scale erosion of an image

    Geodesic erosion operates on a "marker" image and a "mask" image.
    The marker image is eroded using an elementary structuring element
    (neighborhood of radius one using only the face connected neighbors).
    The resulting image is then compared with the mask image. The output
    image is the pixelwise maximum of the eroded marker image and the mask
    image.

    Geodesic erosion is run either one iteration or until convergence. In
    the convergence case, the filter is equivalent to "reconstruction by
    erosion". This filter is implemented to handle both scenarios. The
    one iteration case is multi-threaded. The convergence case is
    delegated to another instance of the same filter (but configured to
    run a single iteration).

    The marker image must be greater than or equal to the mask image (on a
    pixel by pixel basis).

    Geodesic morphology is described in Chapter 6 of Pierre Soille's book
    "Morphological Image Analysis: Principles and Applications", Second
    Edition, Springer, 2003.

    A noniterative version of this algorithm can be found in the
    ReconstructionByErosionImageFilter. This noniterative solution is much
    faster than the implementation provided here. All ITK filters that
    previously used GrayscaleGeodesicErodeImageFilter as part of their
    implementation have been converted to use the
    ReconstructionByErosionImageFilter. The
    GrayscaleGeodesicErodeImageFilter is maintained for backward
    compatibility.

    See:  MorphologyImageFilter, GrayscaleErodeImageFilter,
    GrayscaleFunctionErodeImageFilter, BinaryErodeImageFilter,
    ReconstructionByErosionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterISS2ISS2_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterISS2ISS2_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterISS2ISS2_GetMarkerImage)
    SetMaskImage = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterISS2ISS2_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterISS2ISS2_GetMaskImage)
    SetRunOneIteration = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterISS2ISS2_SetRunOneIteration)
    GetRunOneIteration = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterISS2ISS2_GetRunOneIteration)
    RunOneIterationOn = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterISS2ISS2_RunOneIterationOn)
    RunOneIterationOff = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterISS2ISS2_RunOneIterationOff)
    GetNumberOfIterationsUsed = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterISS2ISS2_GetNumberOfIterationsUsed)
    SetFullyConnected = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterISS2ISS2_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterISS2ISS2_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterISS2ISS2_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterISS2ISS2_FullyConnectedOff)
    SameDimensionCheck = _itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterISS2ISS2_SameDimensionCheck
    
    InputComparableCheck = _itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterISS2ISS2_InputComparableCheck
    
    InputConvertibleToOutputCheck = _itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterISS2ISS2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkGrayscaleGeodesicErodeImageFilterPython.delete_itkGrayscaleGeodesicErodeImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkGrayscaleGeodesicErodeImageFilterISS2ISS2

        Create a new object of the class itkGrayscaleGeodesicErodeImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGrayscaleGeodesicErodeImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGrayscaleGeodesicErodeImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGrayscaleGeodesicErodeImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGrayscaleGeodesicErodeImageFilterISS2ISS2 in _itkGrayscaleGeodesicErodeImageFilterPython:
_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterISS2ISS2_swigregister(itkGrayscaleGeodesicErodeImageFilterISS2ISS2)
itkGrayscaleGeodesicErodeImageFilterISS2ISS2___New_orig__ = _itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterISS2ISS2___New_orig__
itkGrayscaleGeodesicErodeImageFilterISS2ISS2_cast = _itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterISS2ISS2_cast


def itkGrayscaleGeodesicErodeImageFilterISS3ISS3_New():
    return itkGrayscaleGeodesicErodeImageFilterISS3ISS3.New()

class itkGrayscaleGeodesicErodeImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""


    geodesic gray scale erosion of an image

    Geodesic erosion operates on a "marker" image and a "mask" image.
    The marker image is eroded using an elementary structuring element
    (neighborhood of radius one using only the face connected neighbors).
    The resulting image is then compared with the mask image. The output
    image is the pixelwise maximum of the eroded marker image and the mask
    image.

    Geodesic erosion is run either one iteration or until convergence. In
    the convergence case, the filter is equivalent to "reconstruction by
    erosion". This filter is implemented to handle both scenarios. The
    one iteration case is multi-threaded. The convergence case is
    delegated to another instance of the same filter (but configured to
    run a single iteration).

    The marker image must be greater than or equal to the mask image (on a
    pixel by pixel basis).

    Geodesic morphology is described in Chapter 6 of Pierre Soille's book
    "Morphological Image Analysis: Principles and Applications", Second
    Edition, Springer, 2003.

    A noniterative version of this algorithm can be found in the
    ReconstructionByErosionImageFilter. This noniterative solution is much
    faster than the implementation provided here. All ITK filters that
    previously used GrayscaleGeodesicErodeImageFilter as part of their
    implementation have been converted to use the
    ReconstructionByErosionImageFilter. The
    GrayscaleGeodesicErodeImageFilter is maintained for backward
    compatibility.

    See:  MorphologyImageFilter, GrayscaleErodeImageFilter,
    GrayscaleFunctionErodeImageFilter, BinaryErodeImageFilter,
    ReconstructionByErosionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterISS3ISS3_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterISS3ISS3_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterISS3ISS3_GetMarkerImage)
    SetMaskImage = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterISS3ISS3_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterISS3ISS3_GetMaskImage)
    SetRunOneIteration = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterISS3ISS3_SetRunOneIteration)
    GetRunOneIteration = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterISS3ISS3_GetRunOneIteration)
    RunOneIterationOn = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterISS3ISS3_RunOneIterationOn)
    RunOneIterationOff = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterISS3ISS3_RunOneIterationOff)
    GetNumberOfIterationsUsed = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterISS3ISS3_GetNumberOfIterationsUsed)
    SetFullyConnected = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterISS3ISS3_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterISS3ISS3_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterISS3ISS3_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterISS3ISS3_FullyConnectedOff)
    SameDimensionCheck = _itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterISS3ISS3_SameDimensionCheck
    
    InputComparableCheck = _itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterISS3ISS3_InputComparableCheck
    
    InputConvertibleToOutputCheck = _itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterISS3ISS3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkGrayscaleGeodesicErodeImageFilterPython.delete_itkGrayscaleGeodesicErodeImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkGrayscaleGeodesicErodeImageFilterISS3ISS3

        Create a new object of the class itkGrayscaleGeodesicErodeImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGrayscaleGeodesicErodeImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGrayscaleGeodesicErodeImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGrayscaleGeodesicErodeImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGrayscaleGeodesicErodeImageFilterISS3ISS3 in _itkGrayscaleGeodesicErodeImageFilterPython:
_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterISS3ISS3_swigregister(itkGrayscaleGeodesicErodeImageFilterISS3ISS3)
itkGrayscaleGeodesicErodeImageFilterISS3ISS3___New_orig__ = _itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterISS3ISS3___New_orig__
itkGrayscaleGeodesicErodeImageFilterISS3ISS3_cast = _itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterISS3ISS3_cast


def itkGrayscaleGeodesicErodeImageFilterIUC2IUC2_New():
    return itkGrayscaleGeodesicErodeImageFilterIUC2IUC2.New()

class itkGrayscaleGeodesicErodeImageFilterIUC2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""


    geodesic gray scale erosion of an image

    Geodesic erosion operates on a "marker" image and a "mask" image.
    The marker image is eroded using an elementary structuring element
    (neighborhood of radius one using only the face connected neighbors).
    The resulting image is then compared with the mask image. The output
    image is the pixelwise maximum of the eroded marker image and the mask
    image.

    Geodesic erosion is run either one iteration or until convergence. In
    the convergence case, the filter is equivalent to "reconstruction by
    erosion". This filter is implemented to handle both scenarios. The
    one iteration case is multi-threaded. The convergence case is
    delegated to another instance of the same filter (but configured to
    run a single iteration).

    The marker image must be greater than or equal to the mask image (on a
    pixel by pixel basis).

    Geodesic morphology is described in Chapter 6 of Pierre Soille's book
    "Morphological Image Analysis: Principles and Applications", Second
    Edition, Springer, 2003.

    A noniterative version of this algorithm can be found in the
    ReconstructionByErosionImageFilter. This noniterative solution is much
    faster than the implementation provided here. All ITK filters that
    previously used GrayscaleGeodesicErodeImageFilter as part of their
    implementation have been converted to use the
    ReconstructionByErosionImageFilter. The
    GrayscaleGeodesicErodeImageFilter is maintained for backward
    compatibility.

    See:  MorphologyImageFilter, GrayscaleErodeImageFilter,
    GrayscaleFunctionErodeImageFilter, BinaryErodeImageFilter,
    ReconstructionByErosionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUC2IUC2_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUC2IUC2_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUC2IUC2_GetMarkerImage)
    SetMaskImage = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUC2IUC2_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUC2IUC2_GetMaskImage)
    SetRunOneIteration = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUC2IUC2_SetRunOneIteration)
    GetRunOneIteration = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUC2IUC2_GetRunOneIteration)
    RunOneIterationOn = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUC2IUC2_RunOneIterationOn)
    RunOneIterationOff = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUC2IUC2_RunOneIterationOff)
    GetNumberOfIterationsUsed = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUC2IUC2_GetNumberOfIterationsUsed)
    SetFullyConnected = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUC2IUC2_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUC2IUC2_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUC2IUC2_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUC2IUC2_FullyConnectedOff)
    SameDimensionCheck = _itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUC2IUC2_SameDimensionCheck
    
    InputComparableCheck = _itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUC2IUC2_InputComparableCheck
    
    InputConvertibleToOutputCheck = _itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUC2IUC2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkGrayscaleGeodesicErodeImageFilterPython.delete_itkGrayscaleGeodesicErodeImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkGrayscaleGeodesicErodeImageFilterIUC2IUC2

        Create a new object of the class itkGrayscaleGeodesicErodeImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGrayscaleGeodesicErodeImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGrayscaleGeodesicErodeImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGrayscaleGeodesicErodeImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGrayscaleGeodesicErodeImageFilterIUC2IUC2 in _itkGrayscaleGeodesicErodeImageFilterPython:
_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUC2IUC2_swigregister(itkGrayscaleGeodesicErodeImageFilterIUC2IUC2)
itkGrayscaleGeodesicErodeImageFilterIUC2IUC2___New_orig__ = _itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUC2IUC2___New_orig__
itkGrayscaleGeodesicErodeImageFilterIUC2IUC2_cast = _itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUC2IUC2_cast


def itkGrayscaleGeodesicErodeImageFilterIUC3IUC3_New():
    return itkGrayscaleGeodesicErodeImageFilterIUC3IUC3.New()

class itkGrayscaleGeodesicErodeImageFilterIUC3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""


    geodesic gray scale erosion of an image

    Geodesic erosion operates on a "marker" image and a "mask" image.
    The marker image is eroded using an elementary structuring element
    (neighborhood of radius one using only the face connected neighbors).
    The resulting image is then compared with the mask image. The output
    image is the pixelwise maximum of the eroded marker image and the mask
    image.

    Geodesic erosion is run either one iteration or until convergence. In
    the convergence case, the filter is equivalent to "reconstruction by
    erosion". This filter is implemented to handle both scenarios. The
    one iteration case is multi-threaded. The convergence case is
    delegated to another instance of the same filter (but configured to
    run a single iteration).

    The marker image must be greater than or equal to the mask image (on a
    pixel by pixel basis).

    Geodesic morphology is described in Chapter 6 of Pierre Soille's book
    "Morphological Image Analysis: Principles and Applications", Second
    Edition, Springer, 2003.

    A noniterative version of this algorithm can be found in the
    ReconstructionByErosionImageFilter. This noniterative solution is much
    faster than the implementation provided here. All ITK filters that
    previously used GrayscaleGeodesicErodeImageFilter as part of their
    implementation have been converted to use the
    ReconstructionByErosionImageFilter. The
    GrayscaleGeodesicErodeImageFilter is maintained for backward
    compatibility.

    See:  MorphologyImageFilter, GrayscaleErodeImageFilter,
    GrayscaleFunctionErodeImageFilter, BinaryErodeImageFilter,
    ReconstructionByErosionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUC3IUC3_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUC3IUC3_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUC3IUC3_GetMarkerImage)
    SetMaskImage = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUC3IUC3_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUC3IUC3_GetMaskImage)
    SetRunOneIteration = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUC3IUC3_SetRunOneIteration)
    GetRunOneIteration = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUC3IUC3_GetRunOneIteration)
    RunOneIterationOn = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUC3IUC3_RunOneIterationOn)
    RunOneIterationOff = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUC3IUC3_RunOneIterationOff)
    GetNumberOfIterationsUsed = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUC3IUC3_GetNumberOfIterationsUsed)
    SetFullyConnected = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUC3IUC3_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUC3IUC3_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUC3IUC3_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUC3IUC3_FullyConnectedOff)
    SameDimensionCheck = _itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUC3IUC3_SameDimensionCheck
    
    InputComparableCheck = _itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUC3IUC3_InputComparableCheck
    
    InputConvertibleToOutputCheck = _itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUC3IUC3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkGrayscaleGeodesicErodeImageFilterPython.delete_itkGrayscaleGeodesicErodeImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkGrayscaleGeodesicErodeImageFilterIUC3IUC3

        Create a new object of the class itkGrayscaleGeodesicErodeImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGrayscaleGeodesicErodeImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGrayscaleGeodesicErodeImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGrayscaleGeodesicErodeImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGrayscaleGeodesicErodeImageFilterIUC3IUC3 in _itkGrayscaleGeodesicErodeImageFilterPython:
_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUC3IUC3_swigregister(itkGrayscaleGeodesicErodeImageFilterIUC3IUC3)
itkGrayscaleGeodesicErodeImageFilterIUC3IUC3___New_orig__ = _itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUC3IUC3___New_orig__
itkGrayscaleGeodesicErodeImageFilterIUC3IUC3_cast = _itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUC3IUC3_cast


def itkGrayscaleGeodesicErodeImageFilterIUS2IUS2_New():
    return itkGrayscaleGeodesicErodeImageFilterIUS2IUS2.New()

class itkGrayscaleGeodesicErodeImageFilterIUS2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""


    geodesic gray scale erosion of an image

    Geodesic erosion operates on a "marker" image and a "mask" image.
    The marker image is eroded using an elementary structuring element
    (neighborhood of radius one using only the face connected neighbors).
    The resulting image is then compared with the mask image. The output
    image is the pixelwise maximum of the eroded marker image and the mask
    image.

    Geodesic erosion is run either one iteration or until convergence. In
    the convergence case, the filter is equivalent to "reconstruction by
    erosion". This filter is implemented to handle both scenarios. The
    one iteration case is multi-threaded. The convergence case is
    delegated to another instance of the same filter (but configured to
    run a single iteration).

    The marker image must be greater than or equal to the mask image (on a
    pixel by pixel basis).

    Geodesic morphology is described in Chapter 6 of Pierre Soille's book
    "Morphological Image Analysis: Principles and Applications", Second
    Edition, Springer, 2003.

    A noniterative version of this algorithm can be found in the
    ReconstructionByErosionImageFilter. This noniterative solution is much
    faster than the implementation provided here. All ITK filters that
    previously used GrayscaleGeodesicErodeImageFilter as part of their
    implementation have been converted to use the
    ReconstructionByErosionImageFilter. The
    GrayscaleGeodesicErodeImageFilter is maintained for backward
    compatibility.

    See:  MorphologyImageFilter, GrayscaleErodeImageFilter,
    GrayscaleFunctionErodeImageFilter, BinaryErodeImageFilter,
    ReconstructionByErosionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUS2IUS2_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUS2IUS2_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUS2IUS2_GetMarkerImage)
    SetMaskImage = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUS2IUS2_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUS2IUS2_GetMaskImage)
    SetRunOneIteration = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUS2IUS2_SetRunOneIteration)
    GetRunOneIteration = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUS2IUS2_GetRunOneIteration)
    RunOneIterationOn = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUS2IUS2_RunOneIterationOn)
    RunOneIterationOff = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUS2IUS2_RunOneIterationOff)
    GetNumberOfIterationsUsed = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUS2IUS2_GetNumberOfIterationsUsed)
    SetFullyConnected = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUS2IUS2_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUS2IUS2_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUS2IUS2_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUS2IUS2_FullyConnectedOff)
    SameDimensionCheck = _itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUS2IUS2_SameDimensionCheck
    
    InputComparableCheck = _itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUS2IUS2_InputComparableCheck
    
    InputConvertibleToOutputCheck = _itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUS2IUS2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkGrayscaleGeodesicErodeImageFilterPython.delete_itkGrayscaleGeodesicErodeImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkGrayscaleGeodesicErodeImageFilterIUS2IUS2

        Create a new object of the class itkGrayscaleGeodesicErodeImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGrayscaleGeodesicErodeImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGrayscaleGeodesicErodeImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGrayscaleGeodesicErodeImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGrayscaleGeodesicErodeImageFilterIUS2IUS2 in _itkGrayscaleGeodesicErodeImageFilterPython:
_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUS2IUS2_swigregister(itkGrayscaleGeodesicErodeImageFilterIUS2IUS2)
itkGrayscaleGeodesicErodeImageFilterIUS2IUS2___New_orig__ = _itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUS2IUS2___New_orig__
itkGrayscaleGeodesicErodeImageFilterIUS2IUS2_cast = _itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUS2IUS2_cast


def itkGrayscaleGeodesicErodeImageFilterIUS3IUS3_New():
    return itkGrayscaleGeodesicErodeImageFilterIUS3IUS3.New()

class itkGrayscaleGeodesicErodeImageFilterIUS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""


    geodesic gray scale erosion of an image

    Geodesic erosion operates on a "marker" image and a "mask" image.
    The marker image is eroded using an elementary structuring element
    (neighborhood of radius one using only the face connected neighbors).
    The resulting image is then compared with the mask image. The output
    image is the pixelwise maximum of the eroded marker image and the mask
    image.

    Geodesic erosion is run either one iteration or until convergence. In
    the convergence case, the filter is equivalent to "reconstruction by
    erosion". This filter is implemented to handle both scenarios. The
    one iteration case is multi-threaded. The convergence case is
    delegated to another instance of the same filter (but configured to
    run a single iteration).

    The marker image must be greater than or equal to the mask image (on a
    pixel by pixel basis).

    Geodesic morphology is described in Chapter 6 of Pierre Soille's book
    "Morphological Image Analysis: Principles and Applications", Second
    Edition, Springer, 2003.

    A noniterative version of this algorithm can be found in the
    ReconstructionByErosionImageFilter. This noniterative solution is much
    faster than the implementation provided here. All ITK filters that
    previously used GrayscaleGeodesicErodeImageFilter as part of their
    implementation have been converted to use the
    ReconstructionByErosionImageFilter. The
    GrayscaleGeodesicErodeImageFilter is maintained for backward
    compatibility.

    See:  MorphologyImageFilter, GrayscaleErodeImageFilter,
    GrayscaleFunctionErodeImageFilter, BinaryErodeImageFilter,
    ReconstructionByErosionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUS3IUS3_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUS3IUS3_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUS3IUS3_GetMarkerImage)
    SetMaskImage = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUS3IUS3_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUS3IUS3_GetMaskImage)
    SetRunOneIteration = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUS3IUS3_SetRunOneIteration)
    GetRunOneIteration = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUS3IUS3_GetRunOneIteration)
    RunOneIterationOn = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUS3IUS3_RunOneIterationOn)
    RunOneIterationOff = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUS3IUS3_RunOneIterationOff)
    GetNumberOfIterationsUsed = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUS3IUS3_GetNumberOfIterationsUsed)
    SetFullyConnected = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUS3IUS3_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUS3IUS3_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUS3IUS3_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUS3IUS3_FullyConnectedOff)
    SameDimensionCheck = _itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUS3IUS3_SameDimensionCheck
    
    InputComparableCheck = _itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUS3IUS3_InputComparableCheck
    
    InputConvertibleToOutputCheck = _itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUS3IUS3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkGrayscaleGeodesicErodeImageFilterPython.delete_itkGrayscaleGeodesicErodeImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkGrayscaleGeodesicErodeImageFilterIUS3IUS3

        Create a new object of the class itkGrayscaleGeodesicErodeImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGrayscaleGeodesicErodeImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGrayscaleGeodesicErodeImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGrayscaleGeodesicErodeImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGrayscaleGeodesicErodeImageFilterIUS3IUS3 in _itkGrayscaleGeodesicErodeImageFilterPython:
_itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUS3IUS3_swigregister(itkGrayscaleGeodesicErodeImageFilterIUS3IUS3)
itkGrayscaleGeodesicErodeImageFilterIUS3IUS3___New_orig__ = _itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUS3IUS3___New_orig__
itkGrayscaleGeodesicErodeImageFilterIUS3IUS3_cast = _itkGrayscaleGeodesicErodeImageFilterPython.itkGrayscaleGeodesicErodeImageFilterIUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def grayscale_geodesic_erode_image_filter(*args, **kwargs):
    """Procedural interface for GrayscaleGeodesicErodeImageFilter"""
    import itk
    instance = itk.GrayscaleGeodesicErodeImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def grayscale_geodesic_erode_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.GrayscaleGeodesicErodeImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.GrayscaleGeodesicErodeImageFilter.values()[0]
    else:
        filter_object = itk.GrayscaleGeodesicErodeImageFilter

    grayscale_geodesic_erode_image_filter.__doc__ = filter_object.__doc__
    grayscale_geodesic_erode_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    grayscale_geodesic_erode_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.GrayscaleGeodesicErodeImageFilter, itkTemplate.itkTemplate):
        grayscale_geodesic_erode_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        grayscale_geodesic_erode_image_filter.__doc__ += "\n"
        grayscale_geodesic_erode_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        grayscale_geodesic_erode_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



