# coding: utf-8

"""
    Argo Events

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from argo.events.client.configuration import Configuration


class V1alpha1EventSourceSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'amqp': 'dict(str, V1alpha1AMQPEventSource)',
        'azure_events_hub': 'dict(str, V1alpha1AzureEventsHubEventSource)',
        'calendar': 'dict(str, V1alpha1CalendarEventSource)',
        'emitter': 'dict(str, V1alpha1EmitterEventSource)',
        'event_bus_name': 'str',
        'file': 'dict(str, V1alpha1FileEventSource)',
        'generic': 'dict(str, V1alpha1GenericEventSource)',
        'github': 'dict(str, V1alpha1GithubEventSource)',
        'gitlab': 'dict(str, V1alpha1GitlabEventSource)',
        'hdfs': 'dict(str, V1alpha1HDFSEventSource)',
        'kafka': 'dict(str, V1alpha1KafkaEventSource)',
        'minio': 'dict(str, CommonS3Artifact)',
        'mqtt': 'dict(str, V1alpha1MQTTEventSource)',
        'nats': 'dict(str, V1alpha1NATSEventsSource)',
        'nsq': 'dict(str, V1alpha1NSQEventSource)',
        'pub_sub': 'dict(str, V1alpha1PubSubEventSource)',
        'pulsar': 'dict(str, V1alpha1PulsarEventSource)',
        'redis': 'dict(str, V1alpha1RedisEventSource)',
        'replica': 'int',
        'resource': 'dict(str, V1alpha1ResourceEventSource)',
        'service': 'V1alpha1Service',
        'slack': 'dict(str, V1alpha1SlackEventSource)',
        'sns': 'dict(str, V1alpha1SNSEventSource)',
        'sqs': 'dict(str, V1alpha1SQSEventSource)',
        'storage_grid': 'dict(str, V1alpha1StorageGridEventSource)',
        'stripe': 'dict(str, V1alpha1StripeEventSource)',
        'template': 'EventsourceV1alpha1Template',
        'webhook': 'dict(str, V1alpha1WebhookContext)'
    }

    attribute_map = {
        'amqp': 'amqp',
        'azure_events_hub': 'azureEventsHub',
        'calendar': 'calendar',
        'emitter': 'emitter',
        'event_bus_name': 'eventBusName',
        'file': 'file',
        'generic': 'generic',
        'github': 'github',
        'gitlab': 'gitlab',
        'hdfs': 'hdfs',
        'kafka': 'kafka',
        'minio': 'minio',
        'mqtt': 'mqtt',
        'nats': 'nats',
        'nsq': 'nsq',
        'pub_sub': 'pubSub',
        'pulsar': 'pulsar',
        'redis': 'redis',
        'replica': 'replica',
        'resource': 'resource',
        'service': 'service',
        'slack': 'slack',
        'sns': 'sns',
        'sqs': 'sqs',
        'storage_grid': 'storageGrid',
        'stripe': 'stripe',
        'template': 'template',
        'webhook': 'webhook'
    }

    def __init__(self, amqp=None, azure_events_hub=None, calendar=None, emitter=None, event_bus_name=None, file=None, generic=None, github=None, gitlab=None, hdfs=None, kafka=None, minio=None, mqtt=None, nats=None, nsq=None, pub_sub=None, pulsar=None, redis=None, replica=None, resource=None, service=None, slack=None, sns=None, sqs=None, storage_grid=None, stripe=None, template=None, webhook=None, local_vars_configuration=None):  # noqa: E501
        """V1alpha1EventSourceSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._amqp = None
        self._azure_events_hub = None
        self._calendar = None
        self._emitter = None
        self._event_bus_name = None
        self._file = None
        self._generic = None
        self._github = None
        self._gitlab = None
        self._hdfs = None
        self._kafka = None
        self._minio = None
        self._mqtt = None
        self._nats = None
        self._nsq = None
        self._pub_sub = None
        self._pulsar = None
        self._redis = None
        self._replica = None
        self._resource = None
        self._service = None
        self._slack = None
        self._sns = None
        self._sqs = None
        self._storage_grid = None
        self._stripe = None
        self._template = None
        self._webhook = None
        self.discriminator = None

        if amqp is not None:
            self.amqp = amqp
        if azure_events_hub is not None:
            self.azure_events_hub = azure_events_hub
        if calendar is not None:
            self.calendar = calendar
        if emitter is not None:
            self.emitter = emitter
        if event_bus_name is not None:
            self.event_bus_name = event_bus_name
        if file is not None:
            self.file = file
        if generic is not None:
            self.generic = generic
        if github is not None:
            self.github = github
        if gitlab is not None:
            self.gitlab = gitlab
        if hdfs is not None:
            self.hdfs = hdfs
        if kafka is not None:
            self.kafka = kafka
        if minio is not None:
            self.minio = minio
        if mqtt is not None:
            self.mqtt = mqtt
        if nats is not None:
            self.nats = nats
        if nsq is not None:
            self.nsq = nsq
        if pub_sub is not None:
            self.pub_sub = pub_sub
        if pulsar is not None:
            self.pulsar = pulsar
        if redis is not None:
            self.redis = redis
        if replica is not None:
            self.replica = replica
        if resource is not None:
            self.resource = resource
        if service is not None:
            self.service = service
        if slack is not None:
            self.slack = slack
        if sns is not None:
            self.sns = sns
        if sqs is not None:
            self.sqs = sqs
        if storage_grid is not None:
            self.storage_grid = storage_grid
        if stripe is not None:
            self.stripe = stripe
        if template is not None:
            self.template = template
        if webhook is not None:
            self.webhook = webhook

    @property
    def amqp(self):
        """Gets the amqp of this V1alpha1EventSourceSpec.  # noqa: E501

        AMQP event sources  # noqa: E501

        :return: The amqp of this V1alpha1EventSourceSpec.  # noqa: E501
        :rtype: dict(str, V1alpha1AMQPEventSource)
        """
        return self._amqp

    @amqp.setter
    def amqp(self, amqp):
        """Sets the amqp of this V1alpha1EventSourceSpec.

        AMQP event sources  # noqa: E501

        :param amqp: The amqp of this V1alpha1EventSourceSpec.  # noqa: E501
        :type: dict(str, V1alpha1AMQPEventSource)
        """

        self._amqp = amqp

    @property
    def azure_events_hub(self):
        """Gets the azure_events_hub of this V1alpha1EventSourceSpec.  # noqa: E501

        AzureEventsHub event sources  # noqa: E501

        :return: The azure_events_hub of this V1alpha1EventSourceSpec.  # noqa: E501
        :rtype: dict(str, V1alpha1AzureEventsHubEventSource)
        """
        return self._azure_events_hub

    @azure_events_hub.setter
    def azure_events_hub(self, azure_events_hub):
        """Sets the azure_events_hub of this V1alpha1EventSourceSpec.

        AzureEventsHub event sources  # noqa: E501

        :param azure_events_hub: The azure_events_hub of this V1alpha1EventSourceSpec.  # noqa: E501
        :type: dict(str, V1alpha1AzureEventsHubEventSource)
        """

        self._azure_events_hub = azure_events_hub

    @property
    def calendar(self):
        """Gets the calendar of this V1alpha1EventSourceSpec.  # noqa: E501

        Calendar event sources  # noqa: E501

        :return: The calendar of this V1alpha1EventSourceSpec.  # noqa: E501
        :rtype: dict(str, V1alpha1CalendarEventSource)
        """
        return self._calendar

    @calendar.setter
    def calendar(self, calendar):
        """Sets the calendar of this V1alpha1EventSourceSpec.

        Calendar event sources  # noqa: E501

        :param calendar: The calendar of this V1alpha1EventSourceSpec.  # noqa: E501
        :type: dict(str, V1alpha1CalendarEventSource)
        """

        self._calendar = calendar

    @property
    def emitter(self):
        """Gets the emitter of this V1alpha1EventSourceSpec.  # noqa: E501

        Emitter event source  # noqa: E501

        :return: The emitter of this V1alpha1EventSourceSpec.  # noqa: E501
        :rtype: dict(str, V1alpha1EmitterEventSource)
        """
        return self._emitter

    @emitter.setter
    def emitter(self, emitter):
        """Sets the emitter of this V1alpha1EventSourceSpec.

        Emitter event source  # noqa: E501

        :param emitter: The emitter of this V1alpha1EventSourceSpec.  # noqa: E501
        :type: dict(str, V1alpha1EmitterEventSource)
        """

        self._emitter = emitter

    @property
    def event_bus_name(self):
        """Gets the event_bus_name of this V1alpha1EventSourceSpec.  # noqa: E501

        EventBusName references to a EventBus name. By default the value is \"default\"  # noqa: E501

        :return: The event_bus_name of this V1alpha1EventSourceSpec.  # noqa: E501
        :rtype: str
        """
        return self._event_bus_name

    @event_bus_name.setter
    def event_bus_name(self, event_bus_name):
        """Sets the event_bus_name of this V1alpha1EventSourceSpec.

        EventBusName references to a EventBus name. By default the value is \"default\"  # noqa: E501

        :param event_bus_name: The event_bus_name of this V1alpha1EventSourceSpec.  # noqa: E501
        :type: str
        """

        self._event_bus_name = event_bus_name

    @property
    def file(self):
        """Gets the file of this V1alpha1EventSourceSpec.  # noqa: E501

        File event sources  # noqa: E501

        :return: The file of this V1alpha1EventSourceSpec.  # noqa: E501
        :rtype: dict(str, V1alpha1FileEventSource)
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this V1alpha1EventSourceSpec.

        File event sources  # noqa: E501

        :param file: The file of this V1alpha1EventSourceSpec.  # noqa: E501
        :type: dict(str, V1alpha1FileEventSource)
        """

        self._file = file

    @property
    def generic(self):
        """Gets the generic of this V1alpha1EventSourceSpec.  # noqa: E501

        Generic event source  # noqa: E501

        :return: The generic of this V1alpha1EventSourceSpec.  # noqa: E501
        :rtype: dict(str, V1alpha1GenericEventSource)
        """
        return self._generic

    @generic.setter
    def generic(self, generic):
        """Sets the generic of this V1alpha1EventSourceSpec.

        Generic event source  # noqa: E501

        :param generic: The generic of this V1alpha1EventSourceSpec.  # noqa: E501
        :type: dict(str, V1alpha1GenericEventSource)
        """

        self._generic = generic

    @property
    def github(self):
        """Gets the github of this V1alpha1EventSourceSpec.  # noqa: E501

        Github event sources  # noqa: E501

        :return: The github of this V1alpha1EventSourceSpec.  # noqa: E501
        :rtype: dict(str, V1alpha1GithubEventSource)
        """
        return self._github

    @github.setter
    def github(self, github):
        """Sets the github of this V1alpha1EventSourceSpec.

        Github event sources  # noqa: E501

        :param github: The github of this V1alpha1EventSourceSpec.  # noqa: E501
        :type: dict(str, V1alpha1GithubEventSource)
        """

        self._github = github

    @property
    def gitlab(self):
        """Gets the gitlab of this V1alpha1EventSourceSpec.  # noqa: E501

        Gitlab event sources  # noqa: E501

        :return: The gitlab of this V1alpha1EventSourceSpec.  # noqa: E501
        :rtype: dict(str, V1alpha1GitlabEventSource)
        """
        return self._gitlab

    @gitlab.setter
    def gitlab(self, gitlab):
        """Sets the gitlab of this V1alpha1EventSourceSpec.

        Gitlab event sources  # noqa: E501

        :param gitlab: The gitlab of this V1alpha1EventSourceSpec.  # noqa: E501
        :type: dict(str, V1alpha1GitlabEventSource)
        """

        self._gitlab = gitlab

    @property
    def hdfs(self):
        """Gets the hdfs of this V1alpha1EventSourceSpec.  # noqa: E501

        HDFS event sources  # noqa: E501

        :return: The hdfs of this V1alpha1EventSourceSpec.  # noqa: E501
        :rtype: dict(str, V1alpha1HDFSEventSource)
        """
        return self._hdfs

    @hdfs.setter
    def hdfs(self, hdfs):
        """Sets the hdfs of this V1alpha1EventSourceSpec.

        HDFS event sources  # noqa: E501

        :param hdfs: The hdfs of this V1alpha1EventSourceSpec.  # noqa: E501
        :type: dict(str, V1alpha1HDFSEventSource)
        """

        self._hdfs = hdfs

    @property
    def kafka(self):
        """Gets the kafka of this V1alpha1EventSourceSpec.  # noqa: E501

        Kafka event sources  # noqa: E501

        :return: The kafka of this V1alpha1EventSourceSpec.  # noqa: E501
        :rtype: dict(str, V1alpha1KafkaEventSource)
        """
        return self._kafka

    @kafka.setter
    def kafka(self, kafka):
        """Sets the kafka of this V1alpha1EventSourceSpec.

        Kafka event sources  # noqa: E501

        :param kafka: The kafka of this V1alpha1EventSourceSpec.  # noqa: E501
        :type: dict(str, V1alpha1KafkaEventSource)
        """

        self._kafka = kafka

    @property
    def minio(self):
        """Gets the minio of this V1alpha1EventSourceSpec.  # noqa: E501

        Minio event sources  # noqa: E501

        :return: The minio of this V1alpha1EventSourceSpec.  # noqa: E501
        :rtype: dict(str, CommonS3Artifact)
        """
        return self._minio

    @minio.setter
    def minio(self, minio):
        """Sets the minio of this V1alpha1EventSourceSpec.

        Minio event sources  # noqa: E501

        :param minio: The minio of this V1alpha1EventSourceSpec.  # noqa: E501
        :type: dict(str, CommonS3Artifact)
        """

        self._minio = minio

    @property
    def mqtt(self):
        """Gets the mqtt of this V1alpha1EventSourceSpec.  # noqa: E501

        MQTT event sources  # noqa: E501

        :return: The mqtt of this V1alpha1EventSourceSpec.  # noqa: E501
        :rtype: dict(str, V1alpha1MQTTEventSource)
        """
        return self._mqtt

    @mqtt.setter
    def mqtt(self, mqtt):
        """Sets the mqtt of this V1alpha1EventSourceSpec.

        MQTT event sources  # noqa: E501

        :param mqtt: The mqtt of this V1alpha1EventSourceSpec.  # noqa: E501
        :type: dict(str, V1alpha1MQTTEventSource)
        """

        self._mqtt = mqtt

    @property
    def nats(self):
        """Gets the nats of this V1alpha1EventSourceSpec.  # noqa: E501

        NATS event sources  # noqa: E501

        :return: The nats of this V1alpha1EventSourceSpec.  # noqa: E501
        :rtype: dict(str, V1alpha1NATSEventsSource)
        """
        return self._nats

    @nats.setter
    def nats(self, nats):
        """Sets the nats of this V1alpha1EventSourceSpec.

        NATS event sources  # noqa: E501

        :param nats: The nats of this V1alpha1EventSourceSpec.  # noqa: E501
        :type: dict(str, V1alpha1NATSEventsSource)
        """

        self._nats = nats

    @property
    def nsq(self):
        """Gets the nsq of this V1alpha1EventSourceSpec.  # noqa: E501

        NSQ event source  # noqa: E501

        :return: The nsq of this V1alpha1EventSourceSpec.  # noqa: E501
        :rtype: dict(str, V1alpha1NSQEventSource)
        """
        return self._nsq

    @nsq.setter
    def nsq(self, nsq):
        """Sets the nsq of this V1alpha1EventSourceSpec.

        NSQ event source  # noqa: E501

        :param nsq: The nsq of this V1alpha1EventSourceSpec.  # noqa: E501
        :type: dict(str, V1alpha1NSQEventSource)
        """

        self._nsq = nsq

    @property
    def pub_sub(self):
        """Gets the pub_sub of this V1alpha1EventSourceSpec.  # noqa: E501

        PubSub event sources  # noqa: E501

        :return: The pub_sub of this V1alpha1EventSourceSpec.  # noqa: E501
        :rtype: dict(str, V1alpha1PubSubEventSource)
        """
        return self._pub_sub

    @pub_sub.setter
    def pub_sub(self, pub_sub):
        """Sets the pub_sub of this V1alpha1EventSourceSpec.

        PubSub event sources  # noqa: E501

        :param pub_sub: The pub_sub of this V1alpha1EventSourceSpec.  # noqa: E501
        :type: dict(str, V1alpha1PubSubEventSource)
        """

        self._pub_sub = pub_sub

    @property
    def pulsar(self):
        """Gets the pulsar of this V1alpha1EventSourceSpec.  # noqa: E501

        Pulsar event source  # noqa: E501

        :return: The pulsar of this V1alpha1EventSourceSpec.  # noqa: E501
        :rtype: dict(str, V1alpha1PulsarEventSource)
        """
        return self._pulsar

    @pulsar.setter
    def pulsar(self, pulsar):
        """Sets the pulsar of this V1alpha1EventSourceSpec.

        Pulsar event source  # noqa: E501

        :param pulsar: The pulsar of this V1alpha1EventSourceSpec.  # noqa: E501
        :type: dict(str, V1alpha1PulsarEventSource)
        """

        self._pulsar = pulsar

    @property
    def redis(self):
        """Gets the redis of this V1alpha1EventSourceSpec.  # noqa: E501

        Redis event source  # noqa: E501

        :return: The redis of this V1alpha1EventSourceSpec.  # noqa: E501
        :rtype: dict(str, V1alpha1RedisEventSource)
        """
        return self._redis

    @redis.setter
    def redis(self, redis):
        """Sets the redis of this V1alpha1EventSourceSpec.

        Redis event source  # noqa: E501

        :param redis: The redis of this V1alpha1EventSourceSpec.  # noqa: E501
        :type: dict(str, V1alpha1RedisEventSource)
        """

        self._redis = redis

    @property
    def replica(self):
        """Gets the replica of this V1alpha1EventSourceSpec.  # noqa: E501

        Replica is the event source deployment replicas  # noqa: E501

        :return: The replica of this V1alpha1EventSourceSpec.  # noqa: E501
        :rtype: int
        """
        return self._replica

    @replica.setter
    def replica(self, replica):
        """Sets the replica of this V1alpha1EventSourceSpec.

        Replica is the event source deployment replicas  # noqa: E501

        :param replica: The replica of this V1alpha1EventSourceSpec.  # noqa: E501
        :type: int
        """

        self._replica = replica

    @property
    def resource(self):
        """Gets the resource of this V1alpha1EventSourceSpec.  # noqa: E501

        Resource event sources  # noqa: E501

        :return: The resource of this V1alpha1EventSourceSpec.  # noqa: E501
        :rtype: dict(str, V1alpha1ResourceEventSource)
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this V1alpha1EventSourceSpec.

        Resource event sources  # noqa: E501

        :param resource: The resource of this V1alpha1EventSourceSpec.  # noqa: E501
        :type: dict(str, V1alpha1ResourceEventSource)
        """

        self._resource = resource

    @property
    def service(self):
        """Gets the service of this V1alpha1EventSourceSpec.  # noqa: E501


        :return: The service of this V1alpha1EventSourceSpec.  # noqa: E501
        :rtype: V1alpha1Service
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this V1alpha1EventSourceSpec.


        :param service: The service of this V1alpha1EventSourceSpec.  # noqa: E501
        :type: V1alpha1Service
        """

        self._service = service

    @property
    def slack(self):
        """Gets the slack of this V1alpha1EventSourceSpec.  # noqa: E501

        Slack event sources  # noqa: E501

        :return: The slack of this V1alpha1EventSourceSpec.  # noqa: E501
        :rtype: dict(str, V1alpha1SlackEventSource)
        """
        return self._slack

    @slack.setter
    def slack(self, slack):
        """Sets the slack of this V1alpha1EventSourceSpec.

        Slack event sources  # noqa: E501

        :param slack: The slack of this V1alpha1EventSourceSpec.  # noqa: E501
        :type: dict(str, V1alpha1SlackEventSource)
        """

        self._slack = slack

    @property
    def sns(self):
        """Gets the sns of this V1alpha1EventSourceSpec.  # noqa: E501

        SNS event sources  # noqa: E501

        :return: The sns of this V1alpha1EventSourceSpec.  # noqa: E501
        :rtype: dict(str, V1alpha1SNSEventSource)
        """
        return self._sns

    @sns.setter
    def sns(self, sns):
        """Sets the sns of this V1alpha1EventSourceSpec.

        SNS event sources  # noqa: E501

        :param sns: The sns of this V1alpha1EventSourceSpec.  # noqa: E501
        :type: dict(str, V1alpha1SNSEventSource)
        """

        self._sns = sns

    @property
    def sqs(self):
        """Gets the sqs of this V1alpha1EventSourceSpec.  # noqa: E501

        SQS event sources  # noqa: E501

        :return: The sqs of this V1alpha1EventSourceSpec.  # noqa: E501
        :rtype: dict(str, V1alpha1SQSEventSource)
        """
        return self._sqs

    @sqs.setter
    def sqs(self, sqs):
        """Sets the sqs of this V1alpha1EventSourceSpec.

        SQS event sources  # noqa: E501

        :param sqs: The sqs of this V1alpha1EventSourceSpec.  # noqa: E501
        :type: dict(str, V1alpha1SQSEventSource)
        """

        self._sqs = sqs

    @property
    def storage_grid(self):
        """Gets the storage_grid of this V1alpha1EventSourceSpec.  # noqa: E501

        StorageGrid event sources  # noqa: E501

        :return: The storage_grid of this V1alpha1EventSourceSpec.  # noqa: E501
        :rtype: dict(str, V1alpha1StorageGridEventSource)
        """
        return self._storage_grid

    @storage_grid.setter
    def storage_grid(self, storage_grid):
        """Sets the storage_grid of this V1alpha1EventSourceSpec.

        StorageGrid event sources  # noqa: E501

        :param storage_grid: The storage_grid of this V1alpha1EventSourceSpec.  # noqa: E501
        :type: dict(str, V1alpha1StorageGridEventSource)
        """

        self._storage_grid = storage_grid

    @property
    def stripe(self):
        """Gets the stripe of this V1alpha1EventSourceSpec.  # noqa: E501

        Stripe event sources  # noqa: E501

        :return: The stripe of this V1alpha1EventSourceSpec.  # noqa: E501
        :rtype: dict(str, V1alpha1StripeEventSource)
        """
        return self._stripe

    @stripe.setter
    def stripe(self, stripe):
        """Sets the stripe of this V1alpha1EventSourceSpec.

        Stripe event sources  # noqa: E501

        :param stripe: The stripe of this V1alpha1EventSourceSpec.  # noqa: E501
        :type: dict(str, V1alpha1StripeEventSource)
        """

        self._stripe = stripe

    @property
    def template(self):
        """Gets the template of this V1alpha1EventSourceSpec.  # noqa: E501


        :return: The template of this V1alpha1EventSourceSpec.  # noqa: E501
        :rtype: EventsourceV1alpha1Template
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this V1alpha1EventSourceSpec.


        :param template: The template of this V1alpha1EventSourceSpec.  # noqa: E501
        :type: EventsourceV1alpha1Template
        """

        self._template = template

    @property
    def webhook(self):
        """Gets the webhook of this V1alpha1EventSourceSpec.  # noqa: E501

        Webhook event sources  # noqa: E501

        :return: The webhook of this V1alpha1EventSourceSpec.  # noqa: E501
        :rtype: dict(str, V1alpha1WebhookContext)
        """
        return self._webhook

    @webhook.setter
    def webhook(self, webhook):
        """Sets the webhook of this V1alpha1EventSourceSpec.

        Webhook event sources  # noqa: E501

        :param webhook: The webhook of this V1alpha1EventSourceSpec.  # noqa: E501
        :type: dict(str, V1alpha1WebhookContext)
        """

        self._webhook = webhook

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1EventSourceSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alpha1EventSourceSpec):
            return True

        return self.to_dict() != other.to_dict()
