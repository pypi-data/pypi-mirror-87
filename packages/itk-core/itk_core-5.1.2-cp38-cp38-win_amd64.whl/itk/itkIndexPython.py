# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkIndexPython
else:
    import _itkIndexPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkIndexPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkIndexPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkSizePython
import itk.pyBasePython
import itk.itkOffsetPython
class itkIndex1(object):
    r"""Proxy of C++ itkIndex1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    GetIndexDimension = _swig_new_static_method(_itkIndexPython.itkIndex1_GetIndexDimension)
    __add__ = _swig_new_instance_method(_itkIndexPython.itkIndex1___add__)
    __iadd__ = _swig_new_instance_method(_itkIndexPython.itkIndex1___iadd__)
    __isub__ = _swig_new_instance_method(_itkIndexPython.itkIndex1___isub__)
    __sub__ = _swig_new_instance_method(_itkIndexPython.itkIndex1___sub__)
    __mul__ = _swig_new_instance_method(_itkIndexPython.itkIndex1___mul__)
    GetIndex = _swig_new_instance_method(_itkIndexPython.itkIndex1_GetIndex)
    SetIndex = _swig_new_instance_method(_itkIndexPython.itkIndex1_SetIndex)
    SetElement = _swig_new_instance_method(_itkIndexPython.itkIndex1_SetElement)
    GetElement = _swig_new_instance_method(_itkIndexPython.itkIndex1_GetElement)
    Fill = _swig_new_instance_method(_itkIndexPython.itkIndex1_Fill)
    GetBasisIndex = _swig_new_static_method(_itkIndexPython.itkIndex1_GetBasisIndex)
    assign = _swig_new_instance_method(_itkIndexPython.itkIndex1_assign)
    swap = _swig_new_instance_method(_itkIndexPython.itkIndex1_swap)
    begin = _swig_new_instance_method(_itkIndexPython.itkIndex1_begin)
    end = _swig_new_instance_method(_itkIndexPython.itkIndex1_end)
    rbegin = _swig_new_instance_method(_itkIndexPython.itkIndex1_rbegin)
    rend = _swig_new_instance_method(_itkIndexPython.itkIndex1_rend)
    size = _swig_new_instance_method(_itkIndexPython.itkIndex1_size)
    max_size = _swig_new_instance_method(_itkIndexPython.itkIndex1_max_size)
    empty = _swig_new_instance_method(_itkIndexPython.itkIndex1_empty)
    at = _swig_new_instance_method(_itkIndexPython.itkIndex1_at)
    front = _swig_new_instance_method(_itkIndexPython.itkIndex1_front)
    back = _swig_new_instance_method(_itkIndexPython.itkIndex1_back)
    data = _swig_new_instance_method(_itkIndexPython.itkIndex1_data)
    Filled = _swig_new_static_method(_itkIndexPython.itkIndex1_Filled)

    def __init__(self, *args):
        r"""
        __init__(itkIndex1 self) -> itkIndex1
        __init__(itkIndex1 self, itkIndex1 arg0) -> itkIndex1
        """
        _itkIndexPython.itkIndex1_swiginit(self, _itkIndexPython.new_itkIndex1(*args))
    __swig_destroy__ = _itkIndexPython.delete_itkIndex1
    __getitem__ = _swig_new_instance_method(_itkIndexPython.itkIndex1___getitem__)
    __setitem__ = _swig_new_instance_method(_itkIndexPython.itkIndex1___setitem__)
    __len__ = _swig_new_static_method(_itkIndexPython.itkIndex1___len__)
    __repr__ = _swig_new_instance_method(_itkIndexPython.itkIndex1___repr__)

    def __eq__(self, other):
        return tuple(self) == tuple(other)


# Register itkIndex1 in _itkIndexPython:
_itkIndexPython.itkIndex1_swigregister(itkIndex1)
itkIndex1_GetIndexDimension = _itkIndexPython.itkIndex1_GetIndexDimension
itkIndex1_GetBasisIndex = _itkIndexPython.itkIndex1_GetBasisIndex
itkIndex1_Filled = _itkIndexPython.itkIndex1_Filled
itkIndex1___len__ = _itkIndexPython.itkIndex1___len__

class itkIndex2(object):
    r"""Proxy of C++ itkIndex2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    GetIndexDimension = _swig_new_static_method(_itkIndexPython.itkIndex2_GetIndexDimension)
    __add__ = _swig_new_instance_method(_itkIndexPython.itkIndex2___add__)
    __iadd__ = _swig_new_instance_method(_itkIndexPython.itkIndex2___iadd__)
    __isub__ = _swig_new_instance_method(_itkIndexPython.itkIndex2___isub__)
    __sub__ = _swig_new_instance_method(_itkIndexPython.itkIndex2___sub__)
    __mul__ = _swig_new_instance_method(_itkIndexPython.itkIndex2___mul__)
    GetIndex = _swig_new_instance_method(_itkIndexPython.itkIndex2_GetIndex)
    SetIndex = _swig_new_instance_method(_itkIndexPython.itkIndex2_SetIndex)
    SetElement = _swig_new_instance_method(_itkIndexPython.itkIndex2_SetElement)
    GetElement = _swig_new_instance_method(_itkIndexPython.itkIndex2_GetElement)
    Fill = _swig_new_instance_method(_itkIndexPython.itkIndex2_Fill)
    GetBasisIndex = _swig_new_static_method(_itkIndexPython.itkIndex2_GetBasisIndex)
    assign = _swig_new_instance_method(_itkIndexPython.itkIndex2_assign)
    swap = _swig_new_instance_method(_itkIndexPython.itkIndex2_swap)
    begin = _swig_new_instance_method(_itkIndexPython.itkIndex2_begin)
    end = _swig_new_instance_method(_itkIndexPython.itkIndex2_end)
    rbegin = _swig_new_instance_method(_itkIndexPython.itkIndex2_rbegin)
    rend = _swig_new_instance_method(_itkIndexPython.itkIndex2_rend)
    size = _swig_new_instance_method(_itkIndexPython.itkIndex2_size)
    max_size = _swig_new_instance_method(_itkIndexPython.itkIndex2_max_size)
    empty = _swig_new_instance_method(_itkIndexPython.itkIndex2_empty)
    at = _swig_new_instance_method(_itkIndexPython.itkIndex2_at)
    front = _swig_new_instance_method(_itkIndexPython.itkIndex2_front)
    back = _swig_new_instance_method(_itkIndexPython.itkIndex2_back)
    data = _swig_new_instance_method(_itkIndexPython.itkIndex2_data)
    Filled = _swig_new_static_method(_itkIndexPython.itkIndex2_Filled)

    def __init__(self, *args):
        r"""
        __init__(itkIndex2 self) -> itkIndex2
        __init__(itkIndex2 self, itkIndex2 arg0) -> itkIndex2
        """
        _itkIndexPython.itkIndex2_swiginit(self, _itkIndexPython.new_itkIndex2(*args))
    __swig_destroy__ = _itkIndexPython.delete_itkIndex2
    __getitem__ = _swig_new_instance_method(_itkIndexPython.itkIndex2___getitem__)
    __setitem__ = _swig_new_instance_method(_itkIndexPython.itkIndex2___setitem__)
    __len__ = _swig_new_static_method(_itkIndexPython.itkIndex2___len__)
    __repr__ = _swig_new_instance_method(_itkIndexPython.itkIndex2___repr__)

    def __eq__(self, other):
        return tuple(self) == tuple(other)


# Register itkIndex2 in _itkIndexPython:
_itkIndexPython.itkIndex2_swigregister(itkIndex2)
itkIndex2_GetIndexDimension = _itkIndexPython.itkIndex2_GetIndexDimension
itkIndex2_GetBasisIndex = _itkIndexPython.itkIndex2_GetBasisIndex
itkIndex2_Filled = _itkIndexPython.itkIndex2_Filled
itkIndex2___len__ = _itkIndexPython.itkIndex2___len__

class itkIndex3(object):
    r"""Proxy of C++ itkIndex3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    GetIndexDimension = _swig_new_static_method(_itkIndexPython.itkIndex3_GetIndexDimension)
    __add__ = _swig_new_instance_method(_itkIndexPython.itkIndex3___add__)
    __iadd__ = _swig_new_instance_method(_itkIndexPython.itkIndex3___iadd__)
    __isub__ = _swig_new_instance_method(_itkIndexPython.itkIndex3___isub__)
    __sub__ = _swig_new_instance_method(_itkIndexPython.itkIndex3___sub__)
    __mul__ = _swig_new_instance_method(_itkIndexPython.itkIndex3___mul__)
    GetIndex = _swig_new_instance_method(_itkIndexPython.itkIndex3_GetIndex)
    SetIndex = _swig_new_instance_method(_itkIndexPython.itkIndex3_SetIndex)
    SetElement = _swig_new_instance_method(_itkIndexPython.itkIndex3_SetElement)
    GetElement = _swig_new_instance_method(_itkIndexPython.itkIndex3_GetElement)
    Fill = _swig_new_instance_method(_itkIndexPython.itkIndex3_Fill)
    GetBasisIndex = _swig_new_static_method(_itkIndexPython.itkIndex3_GetBasisIndex)
    assign = _swig_new_instance_method(_itkIndexPython.itkIndex3_assign)
    swap = _swig_new_instance_method(_itkIndexPython.itkIndex3_swap)
    begin = _swig_new_instance_method(_itkIndexPython.itkIndex3_begin)
    end = _swig_new_instance_method(_itkIndexPython.itkIndex3_end)
    rbegin = _swig_new_instance_method(_itkIndexPython.itkIndex3_rbegin)
    rend = _swig_new_instance_method(_itkIndexPython.itkIndex3_rend)
    size = _swig_new_instance_method(_itkIndexPython.itkIndex3_size)
    max_size = _swig_new_instance_method(_itkIndexPython.itkIndex3_max_size)
    empty = _swig_new_instance_method(_itkIndexPython.itkIndex3_empty)
    at = _swig_new_instance_method(_itkIndexPython.itkIndex3_at)
    front = _swig_new_instance_method(_itkIndexPython.itkIndex3_front)
    back = _swig_new_instance_method(_itkIndexPython.itkIndex3_back)
    data = _swig_new_instance_method(_itkIndexPython.itkIndex3_data)
    Filled = _swig_new_static_method(_itkIndexPython.itkIndex3_Filled)

    def __init__(self, *args):
        r"""
        __init__(itkIndex3 self) -> itkIndex3
        __init__(itkIndex3 self, itkIndex3 arg0) -> itkIndex3
        """
        _itkIndexPython.itkIndex3_swiginit(self, _itkIndexPython.new_itkIndex3(*args))
    __swig_destroy__ = _itkIndexPython.delete_itkIndex3
    __getitem__ = _swig_new_instance_method(_itkIndexPython.itkIndex3___getitem__)
    __setitem__ = _swig_new_instance_method(_itkIndexPython.itkIndex3___setitem__)
    __len__ = _swig_new_static_method(_itkIndexPython.itkIndex3___len__)
    __repr__ = _swig_new_instance_method(_itkIndexPython.itkIndex3___repr__)

    def __eq__(self, other):
        return tuple(self) == tuple(other)


# Register itkIndex3 in _itkIndexPython:
_itkIndexPython.itkIndex3_swigregister(itkIndex3)
itkIndex3_GetIndexDimension = _itkIndexPython.itkIndex3_GetIndexDimension
itkIndex3_GetBasisIndex = _itkIndexPython.itkIndex3_GetBasisIndex
itkIndex3_Filled = _itkIndexPython.itkIndex3_Filled
itkIndex3___len__ = _itkIndexPython.itkIndex3___len__

class itkIndex4(object):
    r"""Proxy of C++ itkIndex4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    GetIndexDimension = _swig_new_static_method(_itkIndexPython.itkIndex4_GetIndexDimension)
    __add__ = _swig_new_instance_method(_itkIndexPython.itkIndex4___add__)
    __iadd__ = _swig_new_instance_method(_itkIndexPython.itkIndex4___iadd__)
    __isub__ = _swig_new_instance_method(_itkIndexPython.itkIndex4___isub__)
    __sub__ = _swig_new_instance_method(_itkIndexPython.itkIndex4___sub__)
    __mul__ = _swig_new_instance_method(_itkIndexPython.itkIndex4___mul__)
    GetIndex = _swig_new_instance_method(_itkIndexPython.itkIndex4_GetIndex)
    SetIndex = _swig_new_instance_method(_itkIndexPython.itkIndex4_SetIndex)
    SetElement = _swig_new_instance_method(_itkIndexPython.itkIndex4_SetElement)
    GetElement = _swig_new_instance_method(_itkIndexPython.itkIndex4_GetElement)
    Fill = _swig_new_instance_method(_itkIndexPython.itkIndex4_Fill)
    GetBasisIndex = _swig_new_static_method(_itkIndexPython.itkIndex4_GetBasisIndex)
    assign = _swig_new_instance_method(_itkIndexPython.itkIndex4_assign)
    swap = _swig_new_instance_method(_itkIndexPython.itkIndex4_swap)
    begin = _swig_new_instance_method(_itkIndexPython.itkIndex4_begin)
    end = _swig_new_instance_method(_itkIndexPython.itkIndex4_end)
    rbegin = _swig_new_instance_method(_itkIndexPython.itkIndex4_rbegin)
    rend = _swig_new_instance_method(_itkIndexPython.itkIndex4_rend)
    size = _swig_new_instance_method(_itkIndexPython.itkIndex4_size)
    max_size = _swig_new_instance_method(_itkIndexPython.itkIndex4_max_size)
    empty = _swig_new_instance_method(_itkIndexPython.itkIndex4_empty)
    at = _swig_new_instance_method(_itkIndexPython.itkIndex4_at)
    front = _swig_new_instance_method(_itkIndexPython.itkIndex4_front)
    back = _swig_new_instance_method(_itkIndexPython.itkIndex4_back)
    data = _swig_new_instance_method(_itkIndexPython.itkIndex4_data)
    Filled = _swig_new_static_method(_itkIndexPython.itkIndex4_Filled)

    def __init__(self, *args):
        r"""
        __init__(itkIndex4 self) -> itkIndex4
        __init__(itkIndex4 self, itkIndex4 arg0) -> itkIndex4
        """
        _itkIndexPython.itkIndex4_swiginit(self, _itkIndexPython.new_itkIndex4(*args))
    __swig_destroy__ = _itkIndexPython.delete_itkIndex4
    __getitem__ = _swig_new_instance_method(_itkIndexPython.itkIndex4___getitem__)
    __setitem__ = _swig_new_instance_method(_itkIndexPython.itkIndex4___setitem__)
    __len__ = _swig_new_static_method(_itkIndexPython.itkIndex4___len__)
    __repr__ = _swig_new_instance_method(_itkIndexPython.itkIndex4___repr__)

    def __eq__(self, other):
        return tuple(self) == tuple(other)


# Register itkIndex4 in _itkIndexPython:
_itkIndexPython.itkIndex4_swigregister(itkIndex4)
itkIndex4_GetIndexDimension = _itkIndexPython.itkIndex4_GetIndexDimension
itkIndex4_GetBasisIndex = _itkIndexPython.itkIndex4_GetBasisIndex
itkIndex4_Filled = _itkIndexPython.itkIndex4_Filled
itkIndex4___len__ = _itkIndexPython.itkIndex4___len__



