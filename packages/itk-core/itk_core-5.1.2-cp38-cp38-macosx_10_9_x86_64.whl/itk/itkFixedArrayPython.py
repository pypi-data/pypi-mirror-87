# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkFixedArrayPython
else:
    import _itkFixedArrayPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkFixedArrayPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkFixedArrayPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.pyBasePython
class itkFixedArrayB1(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayB1

    def __init__(self, *args):
        r"""
        __init__(itkFixedArrayB1 self) -> itkFixedArrayB1
        __init__(itkFixedArrayB1 self, itkFixedArrayB1 arg0) -> itkFixedArrayB1
        __init__(itkFixedArrayB1 self, bool const * r) -> itkFixedArrayB1
        __init__(itkFixedArrayB1 self, bool const & arg0) -> itkFixedArrayB1
        __init__(itkFixedArrayB1 self, std::array< bool,1 > const & stdArray) -> itkFixedArrayB1


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArrayB1_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayB1(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB1___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB1___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB1_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB1_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB1_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB1_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB1_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB1_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB1_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB1_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB1_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB1_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB1_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB1_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB1_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB1_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayB1_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB1___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB1___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayB1___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB1___repr__)

# Register itkFixedArrayB1 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArrayB1_swigregister(itkFixedArrayB1)
itkFixedArrayB1_Filled = _itkFixedArrayPython.itkFixedArrayB1_Filled
itkFixedArrayB1___len__ = _itkFixedArrayPython.itkFixedArrayB1___len__

class itkFixedArrayB2(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayB2

    def __init__(self, *args):
        r"""
        __init__(itkFixedArrayB2 self) -> itkFixedArrayB2
        __init__(itkFixedArrayB2 self, itkFixedArrayB2 arg0) -> itkFixedArrayB2
        __init__(itkFixedArrayB2 self, bool const * r) -> itkFixedArrayB2
        __init__(itkFixedArrayB2 self, bool const & arg0) -> itkFixedArrayB2
        __init__(itkFixedArrayB2 self, std::array< bool,2 > const & stdArray) -> itkFixedArrayB2


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArrayB2_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayB2(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB2___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB2___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB2_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB2_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB2_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB2_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB2_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB2_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB2_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB2_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB2_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB2_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB2_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB2_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB2_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB2_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayB2_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB2___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB2___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayB2___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB2___repr__)

# Register itkFixedArrayB2 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArrayB2_swigregister(itkFixedArrayB2)
itkFixedArrayB2_Filled = _itkFixedArrayPython.itkFixedArrayB2_Filled
itkFixedArrayB2___len__ = _itkFixedArrayPython.itkFixedArrayB2___len__

class itkFixedArrayB3(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayB3

    def __init__(self, *args):
        r"""
        __init__(itkFixedArrayB3 self) -> itkFixedArrayB3
        __init__(itkFixedArrayB3 self, itkFixedArrayB3 arg0) -> itkFixedArrayB3
        __init__(itkFixedArrayB3 self, bool const * r) -> itkFixedArrayB3
        __init__(itkFixedArrayB3 self, bool const & arg0) -> itkFixedArrayB3
        __init__(itkFixedArrayB3 self, std::array< bool,3 > const & stdArray) -> itkFixedArrayB3


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArrayB3_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayB3(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB3___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB3___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB3_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB3_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB3_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB3_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB3_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB3_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB3_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB3_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB3_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB3_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB3_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB3_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB3_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB3_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayB3_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB3___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB3___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayB3___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB3___repr__)

# Register itkFixedArrayB3 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArrayB3_swigregister(itkFixedArrayB3)
itkFixedArrayB3_Filled = _itkFixedArrayPython.itkFixedArrayB3_Filled
itkFixedArrayB3___len__ = _itkFixedArrayPython.itkFixedArrayB3___len__

class itkFixedArrayB4(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayB4

    def __init__(self, *args):
        r"""
        __init__(itkFixedArrayB4 self) -> itkFixedArrayB4
        __init__(itkFixedArrayB4 self, itkFixedArrayB4 arg0) -> itkFixedArrayB4
        __init__(itkFixedArrayB4 self, bool const * r) -> itkFixedArrayB4
        __init__(itkFixedArrayB4 self, bool const & arg0) -> itkFixedArrayB4
        __init__(itkFixedArrayB4 self, std::array< bool,4 > const & stdArray) -> itkFixedArrayB4


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArrayB4_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayB4(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB4___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB4___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB4_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB4_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB4_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB4_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB4_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB4_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB4_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB4_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB4_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB4_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB4_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB4_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB4_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB4_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayB4_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB4___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB4___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayB4___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB4___repr__)

# Register itkFixedArrayB4 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArrayB4_swigregister(itkFixedArrayB4)
itkFixedArrayB4_Filled = _itkFixedArrayPython.itkFixedArrayB4_Filled
itkFixedArrayB4___len__ = _itkFixedArrayPython.itkFixedArrayB4___len__

class itkFixedArrayB5(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayB5

    def __init__(self, *args):
        r"""
        __init__(itkFixedArrayB5 self) -> itkFixedArrayB5
        __init__(itkFixedArrayB5 self, itkFixedArrayB5 arg0) -> itkFixedArrayB5
        __init__(itkFixedArrayB5 self, bool const * r) -> itkFixedArrayB5
        __init__(itkFixedArrayB5 self, bool const & arg0) -> itkFixedArrayB5
        __init__(itkFixedArrayB5 self, std::array< bool,5 > const & stdArray) -> itkFixedArrayB5


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArrayB5_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayB5(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB5___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB5___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB5_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB5_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB5_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB5_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB5_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB5_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB5_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB5_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB5_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB5_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB5_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB5_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB5_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB5_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayB5_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB5___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB5___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayB5___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB5___repr__)

# Register itkFixedArrayB5 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArrayB5_swigregister(itkFixedArrayB5)
itkFixedArrayB5_Filled = _itkFixedArrayPython.itkFixedArrayB5_Filled
itkFixedArrayB5___len__ = _itkFixedArrayPython.itkFixedArrayB5___len__

class itkFixedArrayB6(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayB6

    def __init__(self, *args):
        r"""
        __init__(itkFixedArrayB6 self) -> itkFixedArrayB6
        __init__(itkFixedArrayB6 self, itkFixedArrayB6 arg0) -> itkFixedArrayB6
        __init__(itkFixedArrayB6 self, bool const * r) -> itkFixedArrayB6
        __init__(itkFixedArrayB6 self, bool const & arg0) -> itkFixedArrayB6
        __init__(itkFixedArrayB6 self, std::array< bool,6 > const & stdArray) -> itkFixedArrayB6


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArrayB6_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayB6(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB6___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB6___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB6_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB6_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB6_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB6_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB6_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB6_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB6_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB6_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB6_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB6_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB6_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB6_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB6_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB6_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayB6_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB6___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB6___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayB6___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayB6___repr__)

# Register itkFixedArrayB6 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArrayB6_swigregister(itkFixedArrayB6)
itkFixedArrayB6_Filled = _itkFixedArrayPython.itkFixedArrayB6_Filled
itkFixedArrayB6___len__ = _itkFixedArrayPython.itkFixedArrayB6___len__

class itkFixedArrayD1(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayD1

    def __init__(self, *args):
        r"""
        __init__(itkFixedArrayD1 self) -> itkFixedArrayD1
        __init__(itkFixedArrayD1 self, itkFixedArrayD1 arg0) -> itkFixedArrayD1
        __init__(itkFixedArrayD1 self, double const * r) -> itkFixedArrayD1
        __init__(itkFixedArrayD1 self, double const & arg0) -> itkFixedArrayD1
        __init__(itkFixedArrayD1 self, std::array< double,1 > const & stdArray) -> itkFixedArrayD1


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArrayD1_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayD1(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD1___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD1___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD1_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD1_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD1_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD1_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD1_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD1_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD1_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD1_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD1_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD1_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD1_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD1_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD1_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD1_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayD1_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD1___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD1___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayD1___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD1___repr__)

# Register itkFixedArrayD1 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArrayD1_swigregister(itkFixedArrayD1)
itkFixedArrayD1_Filled = _itkFixedArrayPython.itkFixedArrayD1_Filled
itkFixedArrayD1___len__ = _itkFixedArrayPython.itkFixedArrayD1___len__

class itkFixedArrayD2(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayD2

    def __init__(self, *args):
        r"""
        __init__(itkFixedArrayD2 self) -> itkFixedArrayD2
        __init__(itkFixedArrayD2 self, itkFixedArrayD2 arg0) -> itkFixedArrayD2
        __init__(itkFixedArrayD2 self, double const * r) -> itkFixedArrayD2
        __init__(itkFixedArrayD2 self, double const & arg0) -> itkFixedArrayD2
        __init__(itkFixedArrayD2 self, std::array< double,2 > const & stdArray) -> itkFixedArrayD2


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArrayD2_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayD2(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD2___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD2___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD2_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD2_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD2_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD2_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD2_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD2_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD2_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD2_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD2_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD2_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD2_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD2_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD2_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD2_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayD2_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD2___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD2___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayD2___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD2___repr__)

# Register itkFixedArrayD2 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArrayD2_swigregister(itkFixedArrayD2)
itkFixedArrayD2_Filled = _itkFixedArrayPython.itkFixedArrayD2_Filled
itkFixedArrayD2___len__ = _itkFixedArrayPython.itkFixedArrayD2___len__

class itkFixedArrayD3(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayD3

    def __init__(self, *args):
        r"""
        __init__(itkFixedArrayD3 self) -> itkFixedArrayD3
        __init__(itkFixedArrayD3 self, itkFixedArrayD3 arg0) -> itkFixedArrayD3
        __init__(itkFixedArrayD3 self, double const * r) -> itkFixedArrayD3
        __init__(itkFixedArrayD3 self, double const & arg0) -> itkFixedArrayD3
        __init__(itkFixedArrayD3 self, std::array< double,3 > const & stdArray) -> itkFixedArrayD3


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArrayD3_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayD3(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD3___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD3___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD3_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD3_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD3_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD3_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD3_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD3_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD3_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD3_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD3_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD3_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD3_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD3_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD3_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD3_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayD3_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD3___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD3___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayD3___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD3___repr__)

# Register itkFixedArrayD3 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArrayD3_swigregister(itkFixedArrayD3)
itkFixedArrayD3_Filled = _itkFixedArrayPython.itkFixedArrayD3_Filled
itkFixedArrayD3___len__ = _itkFixedArrayPython.itkFixedArrayD3___len__

class itkFixedArrayD4(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayD4

    def __init__(self, *args):
        r"""
        __init__(itkFixedArrayD4 self) -> itkFixedArrayD4
        __init__(itkFixedArrayD4 self, itkFixedArrayD4 arg0) -> itkFixedArrayD4
        __init__(itkFixedArrayD4 self, double const * r) -> itkFixedArrayD4
        __init__(itkFixedArrayD4 self, double const & arg0) -> itkFixedArrayD4
        __init__(itkFixedArrayD4 self, std::array< double,4 > const & stdArray) -> itkFixedArrayD4


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArrayD4_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayD4(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD4___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD4___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD4_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD4_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD4_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD4_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD4_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD4_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD4_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD4_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD4_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD4_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD4_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD4_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD4_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD4_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayD4_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD4___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD4___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayD4___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD4___repr__)

# Register itkFixedArrayD4 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArrayD4_swigregister(itkFixedArrayD4)
itkFixedArrayD4_Filled = _itkFixedArrayPython.itkFixedArrayD4_Filled
itkFixedArrayD4___len__ = _itkFixedArrayPython.itkFixedArrayD4___len__

class itkFixedArrayD5(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayD5

    def __init__(self, *args):
        r"""
        __init__(itkFixedArrayD5 self) -> itkFixedArrayD5
        __init__(itkFixedArrayD5 self, itkFixedArrayD5 arg0) -> itkFixedArrayD5
        __init__(itkFixedArrayD5 self, double const * r) -> itkFixedArrayD5
        __init__(itkFixedArrayD5 self, double const & arg0) -> itkFixedArrayD5
        __init__(itkFixedArrayD5 self, std::array< double,5 > const & stdArray) -> itkFixedArrayD5


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArrayD5_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayD5(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD5___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD5___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD5_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD5_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD5_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD5_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD5_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD5_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD5_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD5_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD5_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD5_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD5_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD5_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD5_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD5_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayD5_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD5___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD5___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayD5___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD5___repr__)

# Register itkFixedArrayD5 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArrayD5_swigregister(itkFixedArrayD5)
itkFixedArrayD5_Filled = _itkFixedArrayPython.itkFixedArrayD5_Filled
itkFixedArrayD5___len__ = _itkFixedArrayPython.itkFixedArrayD5___len__

class itkFixedArrayD6(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayD6

    def __init__(self, *args):
        r"""
        __init__(itkFixedArrayD6 self) -> itkFixedArrayD6
        __init__(itkFixedArrayD6 self, itkFixedArrayD6 arg0) -> itkFixedArrayD6
        __init__(itkFixedArrayD6 self, double const * r) -> itkFixedArrayD6
        __init__(itkFixedArrayD6 self, double const & arg0) -> itkFixedArrayD6
        __init__(itkFixedArrayD6 self, std::array< double,6 > const & stdArray) -> itkFixedArrayD6


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArrayD6_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayD6(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD6___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD6___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD6_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD6_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD6_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD6_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD6_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD6_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD6_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD6_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD6_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD6_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD6_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD6_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD6_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD6_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayD6_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD6___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD6___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayD6___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayD6___repr__)

# Register itkFixedArrayD6 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArrayD6_swigregister(itkFixedArrayD6)
itkFixedArrayD6_Filled = _itkFixedArrayPython.itkFixedArrayD6_Filled
itkFixedArrayD6___len__ = _itkFixedArrayPython.itkFixedArrayD6___len__

class itkFixedArrayF1(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayF1

    def __init__(self, *args):
        r"""
        __init__(itkFixedArrayF1 self) -> itkFixedArrayF1
        __init__(itkFixedArrayF1 self, itkFixedArrayF1 arg0) -> itkFixedArrayF1
        __init__(itkFixedArrayF1 self, float const * r) -> itkFixedArrayF1
        __init__(itkFixedArrayF1 self, float const & arg0) -> itkFixedArrayF1
        __init__(itkFixedArrayF1 self, std::array< float,1 > const & stdArray) -> itkFixedArrayF1


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArrayF1_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayF1(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF1___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF1___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF1_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF1_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF1_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF1_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF1_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF1_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF1_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF1_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF1_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF1_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF1_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF1_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF1_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF1_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayF1_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF1___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF1___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayF1___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF1___repr__)

# Register itkFixedArrayF1 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArrayF1_swigregister(itkFixedArrayF1)
itkFixedArrayF1_Filled = _itkFixedArrayPython.itkFixedArrayF1_Filled
itkFixedArrayF1___len__ = _itkFixedArrayPython.itkFixedArrayF1___len__

class itkFixedArrayF2(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayF2

    def __init__(self, *args):
        r"""
        __init__(itkFixedArrayF2 self) -> itkFixedArrayF2
        __init__(itkFixedArrayF2 self, itkFixedArrayF2 arg0) -> itkFixedArrayF2
        __init__(itkFixedArrayF2 self, float const * r) -> itkFixedArrayF2
        __init__(itkFixedArrayF2 self, float const & arg0) -> itkFixedArrayF2
        __init__(itkFixedArrayF2 self, std::array< float,2 > const & stdArray) -> itkFixedArrayF2


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArrayF2_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayF2(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF2___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF2___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF2_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF2_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF2_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF2_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF2_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF2_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF2_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF2_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF2_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF2_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF2_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF2_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF2_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF2_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayF2_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF2___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF2___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayF2___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF2___repr__)

# Register itkFixedArrayF2 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArrayF2_swigregister(itkFixedArrayF2)
itkFixedArrayF2_Filled = _itkFixedArrayPython.itkFixedArrayF2_Filled
itkFixedArrayF2___len__ = _itkFixedArrayPython.itkFixedArrayF2___len__

class itkFixedArrayF3(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayF3

    def __init__(self, *args):
        r"""
        __init__(itkFixedArrayF3 self) -> itkFixedArrayF3
        __init__(itkFixedArrayF3 self, itkFixedArrayF3 arg0) -> itkFixedArrayF3
        __init__(itkFixedArrayF3 self, float const * r) -> itkFixedArrayF3
        __init__(itkFixedArrayF3 self, float const & arg0) -> itkFixedArrayF3
        __init__(itkFixedArrayF3 self, std::array< float,3 > const & stdArray) -> itkFixedArrayF3


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArrayF3_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayF3(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF3___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF3___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF3_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF3_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF3_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF3_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF3_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF3_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF3_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF3_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF3_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF3_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF3_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF3_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF3_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF3_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayF3_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF3___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF3___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayF3___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF3___repr__)

# Register itkFixedArrayF3 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArrayF3_swigregister(itkFixedArrayF3)
itkFixedArrayF3_Filled = _itkFixedArrayPython.itkFixedArrayF3_Filled
itkFixedArrayF3___len__ = _itkFixedArrayPython.itkFixedArrayF3___len__

class itkFixedArrayF4(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayF4

    def __init__(self, *args):
        r"""
        __init__(itkFixedArrayF4 self) -> itkFixedArrayF4
        __init__(itkFixedArrayF4 self, itkFixedArrayF4 arg0) -> itkFixedArrayF4
        __init__(itkFixedArrayF4 self, float const * r) -> itkFixedArrayF4
        __init__(itkFixedArrayF4 self, float const & arg0) -> itkFixedArrayF4
        __init__(itkFixedArrayF4 self, std::array< float,4 > const & stdArray) -> itkFixedArrayF4


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArrayF4_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayF4(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF4___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF4___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF4_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF4_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF4_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF4_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF4_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF4_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF4_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF4_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF4_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF4_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF4_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF4_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF4_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF4_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayF4_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF4___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF4___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayF4___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF4___repr__)

# Register itkFixedArrayF4 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArrayF4_swigregister(itkFixedArrayF4)
itkFixedArrayF4_Filled = _itkFixedArrayPython.itkFixedArrayF4_Filled
itkFixedArrayF4___len__ = _itkFixedArrayPython.itkFixedArrayF4___len__

class itkFixedArrayF5(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayF5

    def __init__(self, *args):
        r"""
        __init__(itkFixedArrayF5 self) -> itkFixedArrayF5
        __init__(itkFixedArrayF5 self, itkFixedArrayF5 arg0) -> itkFixedArrayF5
        __init__(itkFixedArrayF5 self, float const * r) -> itkFixedArrayF5
        __init__(itkFixedArrayF5 self, float const & arg0) -> itkFixedArrayF5
        __init__(itkFixedArrayF5 self, std::array< float,5 > const & stdArray) -> itkFixedArrayF5


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArrayF5_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayF5(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF5___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF5___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF5_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF5_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF5_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF5_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF5_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF5_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF5_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF5_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF5_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF5_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF5_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF5_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF5_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF5_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayF5_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF5___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF5___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayF5___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF5___repr__)

# Register itkFixedArrayF5 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArrayF5_swigregister(itkFixedArrayF5)
itkFixedArrayF5_Filled = _itkFixedArrayPython.itkFixedArrayF5_Filled
itkFixedArrayF5___len__ = _itkFixedArrayPython.itkFixedArrayF5___len__

class itkFixedArrayF6(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayF6

    def __init__(self, *args):
        r"""
        __init__(itkFixedArrayF6 self) -> itkFixedArrayF6
        __init__(itkFixedArrayF6 self, itkFixedArrayF6 arg0) -> itkFixedArrayF6
        __init__(itkFixedArrayF6 self, float const * r) -> itkFixedArrayF6
        __init__(itkFixedArrayF6 self, float const & arg0) -> itkFixedArrayF6
        __init__(itkFixedArrayF6 self, std::array< float,6 > const & stdArray) -> itkFixedArrayF6


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArrayF6_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayF6(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF6___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF6___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF6_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF6_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF6_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF6_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF6_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF6_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF6_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF6_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF6_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF6_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF6_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF6_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF6_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF6_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayF6_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF6___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF6___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayF6___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayF6___repr__)

# Register itkFixedArrayF6 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArrayF6_swigregister(itkFixedArrayF6)
itkFixedArrayF6_Filled = _itkFixedArrayPython.itkFixedArrayF6_Filled
itkFixedArrayF6___len__ = _itkFixedArrayPython.itkFixedArrayF6___len__

class itkFixedArraySC1(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArraySC1

    def __init__(self, *args):
        r"""
        __init__(itkFixedArraySC1 self) -> itkFixedArraySC1
        __init__(itkFixedArraySC1 self, itkFixedArraySC1 arg0) -> itkFixedArraySC1
        __init__(itkFixedArraySC1 self, signed char const * r) -> itkFixedArraySC1
        __init__(itkFixedArraySC1 self, signed char const & arg0) -> itkFixedArraySC1
        __init__(itkFixedArraySC1 self, std::array< signed char,1 > const & stdArray) -> itkFixedArraySC1


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArraySC1_swiginit(self, _itkFixedArrayPython.new_itkFixedArraySC1(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC1___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC1___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC1_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC1_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC1_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC1_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC1_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC1_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC1_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC1_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC1_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC1_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC1_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC1_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC1_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC1_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArraySC1_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC1___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC1___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArraySC1___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC1___repr__)

# Register itkFixedArraySC1 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArraySC1_swigregister(itkFixedArraySC1)
itkFixedArraySC1_Filled = _itkFixedArrayPython.itkFixedArraySC1_Filled
itkFixedArraySC1___len__ = _itkFixedArrayPython.itkFixedArraySC1___len__

class itkFixedArraySC2(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArraySC2

    def __init__(self, *args):
        r"""
        __init__(itkFixedArraySC2 self) -> itkFixedArraySC2
        __init__(itkFixedArraySC2 self, itkFixedArraySC2 arg0) -> itkFixedArraySC2
        __init__(itkFixedArraySC2 self, signed char const * r) -> itkFixedArraySC2
        __init__(itkFixedArraySC2 self, signed char const & arg0) -> itkFixedArraySC2
        __init__(itkFixedArraySC2 self, std::array< signed char,2 > const & stdArray) -> itkFixedArraySC2


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArraySC2_swiginit(self, _itkFixedArrayPython.new_itkFixedArraySC2(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC2___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC2___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC2_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC2_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC2_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC2_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC2_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC2_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC2_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC2_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC2_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC2_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC2_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC2_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC2_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC2_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArraySC2_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC2___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC2___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArraySC2___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC2___repr__)

# Register itkFixedArraySC2 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArraySC2_swigregister(itkFixedArraySC2)
itkFixedArraySC2_Filled = _itkFixedArrayPython.itkFixedArraySC2_Filled
itkFixedArraySC2___len__ = _itkFixedArrayPython.itkFixedArraySC2___len__

class itkFixedArraySC3(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArraySC3

    def __init__(self, *args):
        r"""
        __init__(itkFixedArraySC3 self) -> itkFixedArraySC3
        __init__(itkFixedArraySC3 self, itkFixedArraySC3 arg0) -> itkFixedArraySC3
        __init__(itkFixedArraySC3 self, signed char const * r) -> itkFixedArraySC3
        __init__(itkFixedArraySC3 self, signed char const & arg0) -> itkFixedArraySC3
        __init__(itkFixedArraySC3 self, std::array< signed char,3 > const & stdArray) -> itkFixedArraySC3


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArraySC3_swiginit(self, _itkFixedArrayPython.new_itkFixedArraySC3(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC3___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC3___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC3_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC3_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC3_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC3_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC3_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC3_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC3_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC3_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC3_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC3_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC3_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC3_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC3_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC3_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArraySC3_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC3___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC3___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArraySC3___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC3___repr__)

# Register itkFixedArraySC3 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArraySC3_swigregister(itkFixedArraySC3)
itkFixedArraySC3_Filled = _itkFixedArrayPython.itkFixedArraySC3_Filled
itkFixedArraySC3___len__ = _itkFixedArrayPython.itkFixedArraySC3___len__

class itkFixedArraySC4(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArraySC4

    def __init__(self, *args):
        r"""
        __init__(itkFixedArraySC4 self) -> itkFixedArraySC4
        __init__(itkFixedArraySC4 self, itkFixedArraySC4 arg0) -> itkFixedArraySC4
        __init__(itkFixedArraySC4 self, signed char const * r) -> itkFixedArraySC4
        __init__(itkFixedArraySC4 self, signed char const & arg0) -> itkFixedArraySC4
        __init__(itkFixedArraySC4 self, std::array< signed char,4 > const & stdArray) -> itkFixedArraySC4


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArraySC4_swiginit(self, _itkFixedArrayPython.new_itkFixedArraySC4(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC4___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC4___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC4_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC4_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC4_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC4_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC4_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC4_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC4_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC4_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC4_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC4_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC4_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC4_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC4_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC4_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArraySC4_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC4___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC4___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArraySC4___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC4___repr__)

# Register itkFixedArraySC4 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArraySC4_swigregister(itkFixedArraySC4)
itkFixedArraySC4_Filled = _itkFixedArrayPython.itkFixedArraySC4_Filled
itkFixedArraySC4___len__ = _itkFixedArrayPython.itkFixedArraySC4___len__

class itkFixedArraySC5(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArraySC5

    def __init__(self, *args):
        r"""
        __init__(itkFixedArraySC5 self) -> itkFixedArraySC5
        __init__(itkFixedArraySC5 self, itkFixedArraySC5 arg0) -> itkFixedArraySC5
        __init__(itkFixedArraySC5 self, signed char const * r) -> itkFixedArraySC5
        __init__(itkFixedArraySC5 self, signed char const & arg0) -> itkFixedArraySC5
        __init__(itkFixedArraySC5 self, std::array< signed char,5 > const & stdArray) -> itkFixedArraySC5


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArraySC5_swiginit(self, _itkFixedArrayPython.new_itkFixedArraySC5(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC5___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC5___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC5_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC5_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC5_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC5_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC5_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC5_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC5_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC5_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC5_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC5_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC5_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC5_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC5_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC5_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArraySC5_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC5___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC5___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArraySC5___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC5___repr__)

# Register itkFixedArraySC5 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArraySC5_swigregister(itkFixedArraySC5)
itkFixedArraySC5_Filled = _itkFixedArrayPython.itkFixedArraySC5_Filled
itkFixedArraySC5___len__ = _itkFixedArrayPython.itkFixedArraySC5___len__

class itkFixedArraySC6(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArraySC6

    def __init__(self, *args):
        r"""
        __init__(itkFixedArraySC6 self) -> itkFixedArraySC6
        __init__(itkFixedArraySC6 self, itkFixedArraySC6 arg0) -> itkFixedArraySC6
        __init__(itkFixedArraySC6 self, signed char const * r) -> itkFixedArraySC6
        __init__(itkFixedArraySC6 self, signed char const & arg0) -> itkFixedArraySC6
        __init__(itkFixedArraySC6 self, std::array< signed char,6 > const & stdArray) -> itkFixedArraySC6


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArraySC6_swiginit(self, _itkFixedArrayPython.new_itkFixedArraySC6(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC6___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC6___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC6_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC6_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC6_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC6_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC6_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC6_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC6_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC6_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC6_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC6_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC6_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC6_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC6_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC6_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArraySC6_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC6___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC6___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArraySC6___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySC6___repr__)

# Register itkFixedArraySC6 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArraySC6_swigregister(itkFixedArraySC6)
itkFixedArraySC6_Filled = _itkFixedArrayPython.itkFixedArraySC6_Filled
itkFixedArraySC6___len__ = _itkFixedArrayPython.itkFixedArraySC6___len__

class itkFixedArraySL1(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArraySL1

    def __init__(self, *args):
        r"""
        __init__(itkFixedArraySL1 self) -> itkFixedArraySL1
        __init__(itkFixedArraySL1 self, itkFixedArraySL1 arg0) -> itkFixedArraySL1
        __init__(itkFixedArraySL1 self, long const * r) -> itkFixedArraySL1
        __init__(itkFixedArraySL1 self, long const & arg0) -> itkFixedArraySL1
        __init__(itkFixedArraySL1 self, std::array< long,1 > const & stdArray) -> itkFixedArraySL1


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArraySL1_swiginit(self, _itkFixedArrayPython.new_itkFixedArraySL1(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL1___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL1___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL1_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL1_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL1_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL1_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL1_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL1_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL1_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL1_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL1_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL1_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL1_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL1_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL1_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL1_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArraySL1_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL1___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL1___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArraySL1___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL1___repr__)

# Register itkFixedArraySL1 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArraySL1_swigregister(itkFixedArraySL1)
itkFixedArraySL1_Filled = _itkFixedArrayPython.itkFixedArraySL1_Filled
itkFixedArraySL1___len__ = _itkFixedArrayPython.itkFixedArraySL1___len__

class itkFixedArraySL2(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArraySL2

    def __init__(self, *args):
        r"""
        __init__(itkFixedArraySL2 self) -> itkFixedArraySL2
        __init__(itkFixedArraySL2 self, itkFixedArraySL2 arg0) -> itkFixedArraySL2
        __init__(itkFixedArraySL2 self, long const * r) -> itkFixedArraySL2
        __init__(itkFixedArraySL2 self, long const & arg0) -> itkFixedArraySL2
        __init__(itkFixedArraySL2 self, std::array< long,2 > const & stdArray) -> itkFixedArraySL2


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArraySL2_swiginit(self, _itkFixedArrayPython.new_itkFixedArraySL2(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL2___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL2___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL2_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL2_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL2_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL2_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL2_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL2_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL2_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL2_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL2_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL2_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL2_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL2_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL2_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL2_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArraySL2_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL2___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL2___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArraySL2___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL2___repr__)

# Register itkFixedArraySL2 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArraySL2_swigregister(itkFixedArraySL2)
itkFixedArraySL2_Filled = _itkFixedArrayPython.itkFixedArraySL2_Filled
itkFixedArraySL2___len__ = _itkFixedArrayPython.itkFixedArraySL2___len__

class itkFixedArraySL3(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArraySL3

    def __init__(self, *args):
        r"""
        __init__(itkFixedArraySL3 self) -> itkFixedArraySL3
        __init__(itkFixedArraySL3 self, itkFixedArraySL3 arg0) -> itkFixedArraySL3
        __init__(itkFixedArraySL3 self, long const * r) -> itkFixedArraySL3
        __init__(itkFixedArraySL3 self, long const & arg0) -> itkFixedArraySL3
        __init__(itkFixedArraySL3 self, std::array< long,3 > const & stdArray) -> itkFixedArraySL3


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArraySL3_swiginit(self, _itkFixedArrayPython.new_itkFixedArraySL3(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL3___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL3___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL3_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL3_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL3_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL3_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL3_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL3_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL3_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL3_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL3_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL3_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL3_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL3_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL3_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL3_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArraySL3_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL3___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL3___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArraySL3___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL3___repr__)

# Register itkFixedArraySL3 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArraySL3_swigregister(itkFixedArraySL3)
itkFixedArraySL3_Filled = _itkFixedArrayPython.itkFixedArraySL3_Filled
itkFixedArraySL3___len__ = _itkFixedArrayPython.itkFixedArraySL3___len__

class itkFixedArraySL4(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArraySL4

    def __init__(self, *args):
        r"""
        __init__(itkFixedArraySL4 self) -> itkFixedArraySL4
        __init__(itkFixedArraySL4 self, itkFixedArraySL4 arg0) -> itkFixedArraySL4
        __init__(itkFixedArraySL4 self, long const * r) -> itkFixedArraySL4
        __init__(itkFixedArraySL4 self, long const & arg0) -> itkFixedArraySL4
        __init__(itkFixedArraySL4 self, std::array< long,4 > const & stdArray) -> itkFixedArraySL4


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArraySL4_swiginit(self, _itkFixedArrayPython.new_itkFixedArraySL4(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL4___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL4___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL4_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL4_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL4_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL4_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL4_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL4_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL4_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL4_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL4_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL4_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL4_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL4_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL4_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL4_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArraySL4_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL4___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL4___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArraySL4___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL4___repr__)

# Register itkFixedArraySL4 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArraySL4_swigregister(itkFixedArraySL4)
itkFixedArraySL4_Filled = _itkFixedArrayPython.itkFixedArraySL4_Filled
itkFixedArraySL4___len__ = _itkFixedArrayPython.itkFixedArraySL4___len__

class itkFixedArraySL5(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArraySL5

    def __init__(self, *args):
        r"""
        __init__(itkFixedArraySL5 self) -> itkFixedArraySL5
        __init__(itkFixedArraySL5 self, itkFixedArraySL5 arg0) -> itkFixedArraySL5
        __init__(itkFixedArraySL5 self, long const * r) -> itkFixedArraySL5
        __init__(itkFixedArraySL5 self, long const & arg0) -> itkFixedArraySL5
        __init__(itkFixedArraySL5 self, std::array< long,5 > const & stdArray) -> itkFixedArraySL5


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArraySL5_swiginit(self, _itkFixedArrayPython.new_itkFixedArraySL5(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL5___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL5___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL5_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL5_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL5_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL5_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL5_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL5_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL5_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL5_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL5_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL5_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL5_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL5_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL5_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL5_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArraySL5_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL5___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL5___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArraySL5___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL5___repr__)

# Register itkFixedArraySL5 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArraySL5_swigregister(itkFixedArraySL5)
itkFixedArraySL5_Filled = _itkFixedArrayPython.itkFixedArraySL5_Filled
itkFixedArraySL5___len__ = _itkFixedArrayPython.itkFixedArraySL5___len__

class itkFixedArraySL6(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArraySL6

    def __init__(self, *args):
        r"""
        __init__(itkFixedArraySL6 self) -> itkFixedArraySL6
        __init__(itkFixedArraySL6 self, itkFixedArraySL6 arg0) -> itkFixedArraySL6
        __init__(itkFixedArraySL6 self, long const * r) -> itkFixedArraySL6
        __init__(itkFixedArraySL6 self, long const & arg0) -> itkFixedArraySL6
        __init__(itkFixedArraySL6 self, std::array< long,6 > const & stdArray) -> itkFixedArraySL6


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArraySL6_swiginit(self, _itkFixedArrayPython.new_itkFixedArraySL6(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL6___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL6___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL6_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL6_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL6_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL6_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL6_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL6_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL6_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL6_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL6_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL6_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL6_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL6_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL6_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL6_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArraySL6_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL6___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL6___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArraySL6___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySL6___repr__)

# Register itkFixedArraySL6 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArraySL6_swigregister(itkFixedArraySL6)
itkFixedArraySL6_Filled = _itkFixedArrayPython.itkFixedArraySL6_Filled
itkFixedArraySL6___len__ = _itkFixedArrayPython.itkFixedArraySL6___len__

class itkFixedArraySLL1(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArraySLL1

    def __init__(self, *args):
        r"""
        __init__(itkFixedArraySLL1 self) -> itkFixedArraySLL1
        __init__(itkFixedArraySLL1 self, itkFixedArraySLL1 arg0) -> itkFixedArraySLL1
        __init__(itkFixedArraySLL1 self, long long const * r) -> itkFixedArraySLL1
        __init__(itkFixedArraySLL1 self, long long const & arg0) -> itkFixedArraySLL1
        __init__(itkFixedArraySLL1 self, std::array< long long,1 > const & stdArray) -> itkFixedArraySLL1


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArraySLL1_swiginit(self, _itkFixedArrayPython.new_itkFixedArraySLL1(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL1___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL1___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL1_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL1_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL1_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL1_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL1_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL1_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL1_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL1_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL1_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL1_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL1_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL1_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL1_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL1_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArraySLL1_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL1___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL1___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArraySLL1___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL1___repr__)

# Register itkFixedArraySLL1 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArraySLL1_swigregister(itkFixedArraySLL1)
itkFixedArraySLL1_Filled = _itkFixedArrayPython.itkFixedArraySLL1_Filled
itkFixedArraySLL1___len__ = _itkFixedArrayPython.itkFixedArraySLL1___len__

class itkFixedArraySLL2(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArraySLL2

    def __init__(self, *args):
        r"""
        __init__(itkFixedArraySLL2 self) -> itkFixedArraySLL2
        __init__(itkFixedArraySLL2 self, itkFixedArraySLL2 arg0) -> itkFixedArraySLL2
        __init__(itkFixedArraySLL2 self, long long const * r) -> itkFixedArraySLL2
        __init__(itkFixedArraySLL2 self, long long const & arg0) -> itkFixedArraySLL2
        __init__(itkFixedArraySLL2 self, std::array< long long,2 > const & stdArray) -> itkFixedArraySLL2


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArraySLL2_swiginit(self, _itkFixedArrayPython.new_itkFixedArraySLL2(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL2___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL2___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL2_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL2_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL2_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL2_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL2_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL2_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL2_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL2_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL2_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL2_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL2_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL2_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL2_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL2_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArraySLL2_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL2___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL2___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArraySLL2___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL2___repr__)

# Register itkFixedArraySLL2 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArraySLL2_swigregister(itkFixedArraySLL2)
itkFixedArraySLL2_Filled = _itkFixedArrayPython.itkFixedArraySLL2_Filled
itkFixedArraySLL2___len__ = _itkFixedArrayPython.itkFixedArraySLL2___len__

class itkFixedArraySLL3(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArraySLL3

    def __init__(self, *args):
        r"""
        __init__(itkFixedArraySLL3 self) -> itkFixedArraySLL3
        __init__(itkFixedArraySLL3 self, itkFixedArraySLL3 arg0) -> itkFixedArraySLL3
        __init__(itkFixedArraySLL3 self, long long const * r) -> itkFixedArraySLL3
        __init__(itkFixedArraySLL3 self, long long const & arg0) -> itkFixedArraySLL3
        __init__(itkFixedArraySLL3 self, std::array< long long,3 > const & stdArray) -> itkFixedArraySLL3


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArraySLL3_swiginit(self, _itkFixedArrayPython.new_itkFixedArraySLL3(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL3___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL3___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL3_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL3_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL3_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL3_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL3_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL3_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL3_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL3_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL3_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL3_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL3_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL3_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL3_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL3_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArraySLL3_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL3___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL3___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArraySLL3___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL3___repr__)

# Register itkFixedArraySLL3 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArraySLL3_swigregister(itkFixedArraySLL3)
itkFixedArraySLL3_Filled = _itkFixedArrayPython.itkFixedArraySLL3_Filled
itkFixedArraySLL3___len__ = _itkFixedArrayPython.itkFixedArraySLL3___len__

class itkFixedArraySLL4(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArraySLL4

    def __init__(self, *args):
        r"""
        __init__(itkFixedArraySLL4 self) -> itkFixedArraySLL4
        __init__(itkFixedArraySLL4 self, itkFixedArraySLL4 arg0) -> itkFixedArraySLL4
        __init__(itkFixedArraySLL4 self, long long const * r) -> itkFixedArraySLL4
        __init__(itkFixedArraySLL4 self, long long const & arg0) -> itkFixedArraySLL4
        __init__(itkFixedArraySLL4 self, std::array< long long,4 > const & stdArray) -> itkFixedArraySLL4


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArraySLL4_swiginit(self, _itkFixedArrayPython.new_itkFixedArraySLL4(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL4___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL4___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL4_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL4_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL4_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL4_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL4_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL4_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL4_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL4_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL4_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL4_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL4_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL4_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL4_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL4_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArraySLL4_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL4___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL4___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArraySLL4___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL4___repr__)

# Register itkFixedArraySLL4 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArraySLL4_swigregister(itkFixedArraySLL4)
itkFixedArraySLL4_Filled = _itkFixedArrayPython.itkFixedArraySLL4_Filled
itkFixedArraySLL4___len__ = _itkFixedArrayPython.itkFixedArraySLL4___len__

class itkFixedArraySLL5(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArraySLL5

    def __init__(self, *args):
        r"""
        __init__(itkFixedArraySLL5 self) -> itkFixedArraySLL5
        __init__(itkFixedArraySLL5 self, itkFixedArraySLL5 arg0) -> itkFixedArraySLL5
        __init__(itkFixedArraySLL5 self, long long const * r) -> itkFixedArraySLL5
        __init__(itkFixedArraySLL5 self, long long const & arg0) -> itkFixedArraySLL5
        __init__(itkFixedArraySLL5 self, std::array< long long,5 > const & stdArray) -> itkFixedArraySLL5


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArraySLL5_swiginit(self, _itkFixedArrayPython.new_itkFixedArraySLL5(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL5___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL5___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL5_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL5_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL5_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL5_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL5_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL5_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL5_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL5_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL5_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL5_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL5_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL5_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL5_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL5_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArraySLL5_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL5___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL5___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArraySLL5___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL5___repr__)

# Register itkFixedArraySLL5 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArraySLL5_swigregister(itkFixedArraySLL5)
itkFixedArraySLL5_Filled = _itkFixedArrayPython.itkFixedArraySLL5_Filled
itkFixedArraySLL5___len__ = _itkFixedArrayPython.itkFixedArraySLL5___len__

class itkFixedArraySLL6(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArraySLL6

    def __init__(self, *args):
        r"""
        __init__(itkFixedArraySLL6 self) -> itkFixedArraySLL6
        __init__(itkFixedArraySLL6 self, itkFixedArraySLL6 arg0) -> itkFixedArraySLL6
        __init__(itkFixedArraySLL6 self, long long const * r) -> itkFixedArraySLL6
        __init__(itkFixedArraySLL6 self, long long const & arg0) -> itkFixedArraySLL6
        __init__(itkFixedArraySLL6 self, std::array< long long,6 > const & stdArray) -> itkFixedArraySLL6


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArraySLL6_swiginit(self, _itkFixedArrayPython.new_itkFixedArraySLL6(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL6___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL6___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL6_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL6_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL6_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL6_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL6_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL6_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL6_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL6_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL6_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL6_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL6_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL6_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL6_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL6_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArraySLL6_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL6___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL6___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArraySLL6___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySLL6___repr__)

# Register itkFixedArraySLL6 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArraySLL6_swigregister(itkFixedArraySLL6)
itkFixedArraySLL6_Filled = _itkFixedArrayPython.itkFixedArraySLL6_Filled
itkFixedArraySLL6___len__ = _itkFixedArrayPython.itkFixedArraySLL6___len__

class itkFixedArraySS1(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArraySS1

    def __init__(self, *args):
        r"""
        __init__(itkFixedArraySS1 self) -> itkFixedArraySS1
        __init__(itkFixedArraySS1 self, itkFixedArraySS1 arg0) -> itkFixedArraySS1
        __init__(itkFixedArraySS1 self, short const * r) -> itkFixedArraySS1
        __init__(itkFixedArraySS1 self, short const & arg0) -> itkFixedArraySS1
        __init__(itkFixedArraySS1 self, std::array< short,1 > const & stdArray) -> itkFixedArraySS1


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArraySS1_swiginit(self, _itkFixedArrayPython.new_itkFixedArraySS1(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS1___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS1___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS1_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS1_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS1_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS1_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS1_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS1_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS1_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS1_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS1_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS1_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS1_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS1_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS1_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS1_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArraySS1_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS1___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS1___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArraySS1___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS1___repr__)

# Register itkFixedArraySS1 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArraySS1_swigregister(itkFixedArraySS1)
itkFixedArraySS1_Filled = _itkFixedArrayPython.itkFixedArraySS1_Filled
itkFixedArraySS1___len__ = _itkFixedArrayPython.itkFixedArraySS1___len__

class itkFixedArraySS2(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArraySS2

    def __init__(self, *args):
        r"""
        __init__(itkFixedArraySS2 self) -> itkFixedArraySS2
        __init__(itkFixedArraySS2 self, itkFixedArraySS2 arg0) -> itkFixedArraySS2
        __init__(itkFixedArraySS2 self, short const * r) -> itkFixedArraySS2
        __init__(itkFixedArraySS2 self, short const & arg0) -> itkFixedArraySS2
        __init__(itkFixedArraySS2 self, std::array< short,2 > const & stdArray) -> itkFixedArraySS2


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArraySS2_swiginit(self, _itkFixedArrayPython.new_itkFixedArraySS2(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS2___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS2___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS2_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS2_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS2_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS2_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS2_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS2_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS2_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS2_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS2_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS2_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS2_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS2_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS2_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS2_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArraySS2_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS2___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS2___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArraySS2___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS2___repr__)

# Register itkFixedArraySS2 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArraySS2_swigregister(itkFixedArraySS2)
itkFixedArraySS2_Filled = _itkFixedArrayPython.itkFixedArraySS2_Filled
itkFixedArraySS2___len__ = _itkFixedArrayPython.itkFixedArraySS2___len__

class itkFixedArraySS3(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArraySS3

    def __init__(self, *args):
        r"""
        __init__(itkFixedArraySS3 self) -> itkFixedArraySS3
        __init__(itkFixedArraySS3 self, itkFixedArraySS3 arg0) -> itkFixedArraySS3
        __init__(itkFixedArraySS3 self, short const * r) -> itkFixedArraySS3
        __init__(itkFixedArraySS3 self, short const & arg0) -> itkFixedArraySS3
        __init__(itkFixedArraySS3 self, std::array< short,3 > const & stdArray) -> itkFixedArraySS3


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArraySS3_swiginit(self, _itkFixedArrayPython.new_itkFixedArraySS3(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS3___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS3___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS3_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS3_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS3_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS3_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS3_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS3_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS3_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS3_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS3_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS3_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS3_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS3_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS3_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS3_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArraySS3_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS3___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS3___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArraySS3___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS3___repr__)

# Register itkFixedArraySS3 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArraySS3_swigregister(itkFixedArraySS3)
itkFixedArraySS3_Filled = _itkFixedArrayPython.itkFixedArraySS3_Filled
itkFixedArraySS3___len__ = _itkFixedArrayPython.itkFixedArraySS3___len__

class itkFixedArraySS4(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArraySS4

    def __init__(self, *args):
        r"""
        __init__(itkFixedArraySS4 self) -> itkFixedArraySS4
        __init__(itkFixedArraySS4 self, itkFixedArraySS4 arg0) -> itkFixedArraySS4
        __init__(itkFixedArraySS4 self, short const * r) -> itkFixedArraySS4
        __init__(itkFixedArraySS4 self, short const & arg0) -> itkFixedArraySS4
        __init__(itkFixedArraySS4 self, std::array< short,4 > const & stdArray) -> itkFixedArraySS4


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArraySS4_swiginit(self, _itkFixedArrayPython.new_itkFixedArraySS4(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS4___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS4___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS4_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS4_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS4_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS4_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS4_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS4_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS4_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS4_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS4_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS4_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS4_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS4_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS4_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS4_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArraySS4_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS4___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS4___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArraySS4___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS4___repr__)

# Register itkFixedArraySS4 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArraySS4_swigregister(itkFixedArraySS4)
itkFixedArraySS4_Filled = _itkFixedArrayPython.itkFixedArraySS4_Filled
itkFixedArraySS4___len__ = _itkFixedArrayPython.itkFixedArraySS4___len__

class itkFixedArraySS5(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArraySS5

    def __init__(self, *args):
        r"""
        __init__(itkFixedArraySS5 self) -> itkFixedArraySS5
        __init__(itkFixedArraySS5 self, itkFixedArraySS5 arg0) -> itkFixedArraySS5
        __init__(itkFixedArraySS5 self, short const * r) -> itkFixedArraySS5
        __init__(itkFixedArraySS5 self, short const & arg0) -> itkFixedArraySS5
        __init__(itkFixedArraySS5 self, std::array< short,5 > const & stdArray) -> itkFixedArraySS5


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArraySS5_swiginit(self, _itkFixedArrayPython.new_itkFixedArraySS5(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS5___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS5___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS5_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS5_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS5_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS5_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS5_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS5_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS5_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS5_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS5_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS5_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS5_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS5_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS5_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS5_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArraySS5_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS5___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS5___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArraySS5___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS5___repr__)

# Register itkFixedArraySS5 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArraySS5_swigregister(itkFixedArraySS5)
itkFixedArraySS5_Filled = _itkFixedArrayPython.itkFixedArraySS5_Filled
itkFixedArraySS5___len__ = _itkFixedArrayPython.itkFixedArraySS5___len__

class itkFixedArraySS6(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArraySS6

    def __init__(self, *args):
        r"""
        __init__(itkFixedArraySS6 self) -> itkFixedArraySS6
        __init__(itkFixedArraySS6 self, itkFixedArraySS6 arg0) -> itkFixedArraySS6
        __init__(itkFixedArraySS6 self, short const * r) -> itkFixedArraySS6
        __init__(itkFixedArraySS6 self, short const & arg0) -> itkFixedArraySS6
        __init__(itkFixedArraySS6 self, std::array< short,6 > const & stdArray) -> itkFixedArraySS6


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArraySS6_swiginit(self, _itkFixedArrayPython.new_itkFixedArraySS6(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS6___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS6___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS6_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS6_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS6_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS6_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS6_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS6_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS6_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS6_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS6_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS6_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS6_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS6_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS6_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS6_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArraySS6_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS6___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS6___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArraySS6___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArraySS6___repr__)

# Register itkFixedArraySS6 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArraySS6_swigregister(itkFixedArraySS6)
itkFixedArraySS6_Filled = _itkFixedArrayPython.itkFixedArraySS6_Filled
itkFixedArraySS6___len__ = _itkFixedArrayPython.itkFixedArraySS6___len__

class itkFixedArrayUC1(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayUC1

    def __init__(self, *args):
        r"""
        __init__(itkFixedArrayUC1 self) -> itkFixedArrayUC1
        __init__(itkFixedArrayUC1 self, itkFixedArrayUC1 arg0) -> itkFixedArrayUC1
        __init__(itkFixedArrayUC1 self, unsigned char const * r) -> itkFixedArrayUC1
        __init__(itkFixedArrayUC1 self, unsigned char const & arg0) -> itkFixedArrayUC1
        __init__(itkFixedArrayUC1 self, std::array< unsigned char,1 > const & stdArray) -> itkFixedArrayUC1


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArrayUC1_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayUC1(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC1___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC1___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC1_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC1_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC1_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC1_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC1_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC1_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC1_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC1_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC1_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC1_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC1_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC1_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC1_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC1_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayUC1_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC1___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC1___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayUC1___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC1___repr__)

# Register itkFixedArrayUC1 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArrayUC1_swigregister(itkFixedArrayUC1)
itkFixedArrayUC1_Filled = _itkFixedArrayPython.itkFixedArrayUC1_Filled
itkFixedArrayUC1___len__ = _itkFixedArrayPython.itkFixedArrayUC1___len__

class itkFixedArrayUC2(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayUC2

    def __init__(self, *args):
        r"""
        __init__(itkFixedArrayUC2 self) -> itkFixedArrayUC2
        __init__(itkFixedArrayUC2 self, itkFixedArrayUC2 arg0) -> itkFixedArrayUC2
        __init__(itkFixedArrayUC2 self, unsigned char const * r) -> itkFixedArrayUC2
        __init__(itkFixedArrayUC2 self, unsigned char const & arg0) -> itkFixedArrayUC2
        __init__(itkFixedArrayUC2 self, std::array< unsigned char,2 > const & stdArray) -> itkFixedArrayUC2


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArrayUC2_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayUC2(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC2___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC2___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC2_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC2_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC2_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC2_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC2_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC2_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC2_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC2_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC2_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC2_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC2_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC2_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC2_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC2_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayUC2_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC2___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC2___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayUC2___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC2___repr__)

# Register itkFixedArrayUC2 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArrayUC2_swigregister(itkFixedArrayUC2)
itkFixedArrayUC2_Filled = _itkFixedArrayPython.itkFixedArrayUC2_Filled
itkFixedArrayUC2___len__ = _itkFixedArrayPython.itkFixedArrayUC2___len__

class itkFixedArrayUC3(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayUC3

    def __init__(self, *args):
        r"""
        __init__(itkFixedArrayUC3 self) -> itkFixedArrayUC3
        __init__(itkFixedArrayUC3 self, itkFixedArrayUC3 arg0) -> itkFixedArrayUC3
        __init__(itkFixedArrayUC3 self, unsigned char const * r) -> itkFixedArrayUC3
        __init__(itkFixedArrayUC3 self, unsigned char const & arg0) -> itkFixedArrayUC3
        __init__(itkFixedArrayUC3 self, std::array< unsigned char,3 > const & stdArray) -> itkFixedArrayUC3


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArrayUC3_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayUC3(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC3___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC3___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC3_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC3_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC3_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC3_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC3_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC3_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC3_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC3_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC3_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC3_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC3_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC3_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC3_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC3_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayUC3_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC3___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC3___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayUC3___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC3___repr__)

# Register itkFixedArrayUC3 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArrayUC3_swigregister(itkFixedArrayUC3)
itkFixedArrayUC3_Filled = _itkFixedArrayPython.itkFixedArrayUC3_Filled
itkFixedArrayUC3___len__ = _itkFixedArrayPython.itkFixedArrayUC3___len__

class itkFixedArrayUC4(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayUC4

    def __init__(self, *args):
        r"""
        __init__(itkFixedArrayUC4 self) -> itkFixedArrayUC4
        __init__(itkFixedArrayUC4 self, itkFixedArrayUC4 arg0) -> itkFixedArrayUC4
        __init__(itkFixedArrayUC4 self, unsigned char const * r) -> itkFixedArrayUC4
        __init__(itkFixedArrayUC4 self, unsigned char const & arg0) -> itkFixedArrayUC4
        __init__(itkFixedArrayUC4 self, std::array< unsigned char,4 > const & stdArray) -> itkFixedArrayUC4


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArrayUC4_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayUC4(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC4___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC4___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC4_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC4_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC4_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC4_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC4_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC4_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC4_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC4_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC4_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC4_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC4_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC4_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC4_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC4_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayUC4_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC4___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC4___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayUC4___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC4___repr__)

# Register itkFixedArrayUC4 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArrayUC4_swigregister(itkFixedArrayUC4)
itkFixedArrayUC4_Filled = _itkFixedArrayPython.itkFixedArrayUC4_Filled
itkFixedArrayUC4___len__ = _itkFixedArrayPython.itkFixedArrayUC4___len__

class itkFixedArrayUC5(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayUC5

    def __init__(self, *args):
        r"""
        __init__(itkFixedArrayUC5 self) -> itkFixedArrayUC5
        __init__(itkFixedArrayUC5 self, itkFixedArrayUC5 arg0) -> itkFixedArrayUC5
        __init__(itkFixedArrayUC5 self, unsigned char const * r) -> itkFixedArrayUC5
        __init__(itkFixedArrayUC5 self, unsigned char const & arg0) -> itkFixedArrayUC5
        __init__(itkFixedArrayUC5 self, std::array< unsigned char,5 > const & stdArray) -> itkFixedArrayUC5


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArrayUC5_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayUC5(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC5___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC5___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC5_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC5_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC5_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC5_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC5_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC5_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC5_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC5_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC5_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC5_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC5_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC5_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC5_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC5_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayUC5_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC5___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC5___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayUC5___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC5___repr__)

# Register itkFixedArrayUC5 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArrayUC5_swigregister(itkFixedArrayUC5)
itkFixedArrayUC5_Filled = _itkFixedArrayPython.itkFixedArrayUC5_Filled
itkFixedArrayUC5___len__ = _itkFixedArrayPython.itkFixedArrayUC5___len__

class itkFixedArrayUC6(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayUC6

    def __init__(self, *args):
        r"""
        __init__(itkFixedArrayUC6 self) -> itkFixedArrayUC6
        __init__(itkFixedArrayUC6 self, itkFixedArrayUC6 arg0) -> itkFixedArrayUC6
        __init__(itkFixedArrayUC6 self, unsigned char const * r) -> itkFixedArrayUC6
        __init__(itkFixedArrayUC6 self, unsigned char const & arg0) -> itkFixedArrayUC6
        __init__(itkFixedArrayUC6 self, std::array< unsigned char,6 > const & stdArray) -> itkFixedArrayUC6


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArrayUC6_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayUC6(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC6___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC6___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC6_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC6_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC6_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC6_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC6_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC6_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC6_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC6_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC6_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC6_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC6_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC6_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC6_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC6_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayUC6_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC6___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC6___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayUC6___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUC6___repr__)

# Register itkFixedArrayUC6 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArrayUC6_swigregister(itkFixedArrayUC6)
itkFixedArrayUC6_Filled = _itkFixedArrayPython.itkFixedArrayUC6_Filled
itkFixedArrayUC6___len__ = _itkFixedArrayPython.itkFixedArrayUC6___len__

class itkFixedArrayUI1(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayUI1

    def __init__(self, *args):
        r"""
        __init__(itkFixedArrayUI1 self) -> itkFixedArrayUI1
        __init__(itkFixedArrayUI1 self, itkFixedArrayUI1 arg0) -> itkFixedArrayUI1
        __init__(itkFixedArrayUI1 self, unsigned int const * r) -> itkFixedArrayUI1
        __init__(itkFixedArrayUI1 self, unsigned int const & arg0) -> itkFixedArrayUI1
        __init__(itkFixedArrayUI1 self, std::array< unsigned int,1 > const & stdArray) -> itkFixedArrayUI1


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArrayUI1_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayUI1(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI1___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI1___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI1_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI1_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI1_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI1_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI1_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI1_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI1_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI1_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI1_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI1_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI1_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI1_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI1_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI1_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayUI1_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI1___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI1___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayUI1___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI1___repr__)

# Register itkFixedArrayUI1 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArrayUI1_swigregister(itkFixedArrayUI1)
itkFixedArrayUI1_Filled = _itkFixedArrayPython.itkFixedArrayUI1_Filled
itkFixedArrayUI1___len__ = _itkFixedArrayPython.itkFixedArrayUI1___len__

class itkFixedArrayUI2(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayUI2

    def __init__(self, *args):
        r"""
        __init__(itkFixedArrayUI2 self) -> itkFixedArrayUI2
        __init__(itkFixedArrayUI2 self, itkFixedArrayUI2 arg0) -> itkFixedArrayUI2
        __init__(itkFixedArrayUI2 self, unsigned int const * r) -> itkFixedArrayUI2
        __init__(itkFixedArrayUI2 self, unsigned int const & arg0) -> itkFixedArrayUI2
        __init__(itkFixedArrayUI2 self, std::array< unsigned int,2 > const & stdArray) -> itkFixedArrayUI2


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArrayUI2_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayUI2(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI2___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI2___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI2_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI2_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI2_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI2_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI2_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI2_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI2_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI2_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI2_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI2_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI2_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI2_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI2_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI2_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayUI2_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI2___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI2___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayUI2___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI2___repr__)

# Register itkFixedArrayUI2 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArrayUI2_swigregister(itkFixedArrayUI2)
itkFixedArrayUI2_Filled = _itkFixedArrayPython.itkFixedArrayUI2_Filled
itkFixedArrayUI2___len__ = _itkFixedArrayPython.itkFixedArrayUI2___len__

class itkFixedArrayUI3(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayUI3

    def __init__(self, *args):
        r"""
        __init__(itkFixedArrayUI3 self) -> itkFixedArrayUI3
        __init__(itkFixedArrayUI3 self, itkFixedArrayUI3 arg0) -> itkFixedArrayUI3
        __init__(itkFixedArrayUI3 self, unsigned int const * r) -> itkFixedArrayUI3
        __init__(itkFixedArrayUI3 self, unsigned int const & arg0) -> itkFixedArrayUI3
        __init__(itkFixedArrayUI3 self, std::array< unsigned int,3 > const & stdArray) -> itkFixedArrayUI3


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArrayUI3_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayUI3(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI3___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI3___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI3_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI3_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI3_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI3_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI3_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI3_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI3_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI3_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI3_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI3_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI3_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI3_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI3_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI3_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayUI3_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI3___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI3___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayUI3___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI3___repr__)

# Register itkFixedArrayUI3 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArrayUI3_swigregister(itkFixedArrayUI3)
itkFixedArrayUI3_Filled = _itkFixedArrayPython.itkFixedArrayUI3_Filled
itkFixedArrayUI3___len__ = _itkFixedArrayPython.itkFixedArrayUI3___len__

class itkFixedArrayUI4(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayUI4

    def __init__(self, *args):
        r"""
        __init__(itkFixedArrayUI4 self) -> itkFixedArrayUI4
        __init__(itkFixedArrayUI4 self, itkFixedArrayUI4 arg0) -> itkFixedArrayUI4
        __init__(itkFixedArrayUI4 self, unsigned int const * r) -> itkFixedArrayUI4
        __init__(itkFixedArrayUI4 self, unsigned int const & arg0) -> itkFixedArrayUI4
        __init__(itkFixedArrayUI4 self, std::array< unsigned int,4 > const & stdArray) -> itkFixedArrayUI4


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArrayUI4_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayUI4(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI4___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI4___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI4_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI4_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI4_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI4_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI4_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI4_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI4_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI4_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI4_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI4_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI4_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI4_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI4_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI4_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayUI4_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI4___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI4___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayUI4___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI4___repr__)

# Register itkFixedArrayUI4 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArrayUI4_swigregister(itkFixedArrayUI4)
itkFixedArrayUI4_Filled = _itkFixedArrayPython.itkFixedArrayUI4_Filled
itkFixedArrayUI4___len__ = _itkFixedArrayPython.itkFixedArrayUI4___len__

class itkFixedArrayUI5(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayUI5

    def __init__(self, *args):
        r"""
        __init__(itkFixedArrayUI5 self) -> itkFixedArrayUI5
        __init__(itkFixedArrayUI5 self, itkFixedArrayUI5 arg0) -> itkFixedArrayUI5
        __init__(itkFixedArrayUI5 self, unsigned int const * r) -> itkFixedArrayUI5
        __init__(itkFixedArrayUI5 self, unsigned int const & arg0) -> itkFixedArrayUI5
        __init__(itkFixedArrayUI5 self, std::array< unsigned int,5 > const & stdArray) -> itkFixedArrayUI5


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArrayUI5_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayUI5(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI5___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI5___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI5_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI5_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI5_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI5_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI5_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI5_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI5_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI5_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI5_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI5_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI5_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI5_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI5_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI5_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayUI5_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI5___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI5___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayUI5___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI5___repr__)

# Register itkFixedArrayUI5 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArrayUI5_swigregister(itkFixedArrayUI5)
itkFixedArrayUI5_Filled = _itkFixedArrayPython.itkFixedArrayUI5_Filled
itkFixedArrayUI5___len__ = _itkFixedArrayPython.itkFixedArrayUI5___len__

class itkFixedArrayUI6(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayUI6

    def __init__(self, *args):
        r"""
        __init__(itkFixedArrayUI6 self) -> itkFixedArrayUI6
        __init__(itkFixedArrayUI6 self, itkFixedArrayUI6 arg0) -> itkFixedArrayUI6
        __init__(itkFixedArrayUI6 self, unsigned int const * r) -> itkFixedArrayUI6
        __init__(itkFixedArrayUI6 self, unsigned int const & arg0) -> itkFixedArrayUI6
        __init__(itkFixedArrayUI6 self, std::array< unsigned int,6 > const & stdArray) -> itkFixedArrayUI6


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArrayUI6_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayUI6(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI6___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI6___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI6_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI6_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI6_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI6_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI6_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI6_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI6_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI6_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI6_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI6_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI6_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI6_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI6_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI6_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayUI6_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI6___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI6___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayUI6___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUI6___repr__)

# Register itkFixedArrayUI6 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArrayUI6_swigregister(itkFixedArrayUI6)
itkFixedArrayUI6_Filled = _itkFixedArrayPython.itkFixedArrayUI6_Filled
itkFixedArrayUI6___len__ = _itkFixedArrayPython.itkFixedArrayUI6___len__

class itkFixedArrayUL1(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayUL1

    def __init__(self, *args):
        r"""
        __init__(itkFixedArrayUL1 self) -> itkFixedArrayUL1
        __init__(itkFixedArrayUL1 self, itkFixedArrayUL1 arg0) -> itkFixedArrayUL1
        __init__(itkFixedArrayUL1 self, unsigned long const * r) -> itkFixedArrayUL1
        __init__(itkFixedArrayUL1 self, unsigned long const & arg0) -> itkFixedArrayUL1
        __init__(itkFixedArrayUL1 self, std::array< unsigned long,1 > const & stdArray) -> itkFixedArrayUL1


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArrayUL1_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayUL1(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL1___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL1___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL1_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL1_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL1_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL1_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL1_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL1_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL1_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL1_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL1_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL1_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL1_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL1_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL1_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL1_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayUL1_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL1___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL1___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayUL1___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL1___repr__)

# Register itkFixedArrayUL1 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArrayUL1_swigregister(itkFixedArrayUL1)
itkFixedArrayUL1_Filled = _itkFixedArrayPython.itkFixedArrayUL1_Filled
itkFixedArrayUL1___len__ = _itkFixedArrayPython.itkFixedArrayUL1___len__

class itkFixedArrayUL2(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayUL2

    def __init__(self, *args):
        r"""
        __init__(itkFixedArrayUL2 self) -> itkFixedArrayUL2
        __init__(itkFixedArrayUL2 self, itkFixedArrayUL2 arg0) -> itkFixedArrayUL2
        __init__(itkFixedArrayUL2 self, unsigned long const * r) -> itkFixedArrayUL2
        __init__(itkFixedArrayUL2 self, unsigned long const & arg0) -> itkFixedArrayUL2
        __init__(itkFixedArrayUL2 self, std::array< unsigned long,2 > const & stdArray) -> itkFixedArrayUL2


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArrayUL2_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayUL2(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL2___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL2___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL2_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL2_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL2_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL2_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL2_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL2_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL2_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL2_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL2_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL2_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL2_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL2_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL2_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL2_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayUL2_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL2___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL2___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayUL2___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL2___repr__)

# Register itkFixedArrayUL2 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArrayUL2_swigregister(itkFixedArrayUL2)
itkFixedArrayUL2_Filled = _itkFixedArrayPython.itkFixedArrayUL2_Filled
itkFixedArrayUL2___len__ = _itkFixedArrayPython.itkFixedArrayUL2___len__

class itkFixedArrayUL3(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayUL3

    def __init__(self, *args):
        r"""
        __init__(itkFixedArrayUL3 self) -> itkFixedArrayUL3
        __init__(itkFixedArrayUL3 self, itkFixedArrayUL3 arg0) -> itkFixedArrayUL3
        __init__(itkFixedArrayUL3 self, unsigned long const * r) -> itkFixedArrayUL3
        __init__(itkFixedArrayUL3 self, unsigned long const & arg0) -> itkFixedArrayUL3
        __init__(itkFixedArrayUL3 self, std::array< unsigned long,3 > const & stdArray) -> itkFixedArrayUL3


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArrayUL3_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayUL3(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL3___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL3___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL3_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL3_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL3_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL3_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL3_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL3_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL3_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL3_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL3_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL3_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL3_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL3_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL3_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL3_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayUL3_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL3___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL3___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayUL3___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL3___repr__)

# Register itkFixedArrayUL3 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArrayUL3_swigregister(itkFixedArrayUL3)
itkFixedArrayUL3_Filled = _itkFixedArrayPython.itkFixedArrayUL3_Filled
itkFixedArrayUL3___len__ = _itkFixedArrayPython.itkFixedArrayUL3___len__

class itkFixedArrayUL4(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayUL4

    def __init__(self, *args):
        r"""
        __init__(itkFixedArrayUL4 self) -> itkFixedArrayUL4
        __init__(itkFixedArrayUL4 self, itkFixedArrayUL4 arg0) -> itkFixedArrayUL4
        __init__(itkFixedArrayUL4 self, unsigned long const * r) -> itkFixedArrayUL4
        __init__(itkFixedArrayUL4 self, unsigned long const & arg0) -> itkFixedArrayUL4
        __init__(itkFixedArrayUL4 self, std::array< unsigned long,4 > const & stdArray) -> itkFixedArrayUL4


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArrayUL4_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayUL4(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL4___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL4___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL4_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL4_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL4_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL4_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL4_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL4_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL4_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL4_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL4_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL4_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL4_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL4_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL4_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL4_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayUL4_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL4___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL4___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayUL4___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL4___repr__)

# Register itkFixedArrayUL4 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArrayUL4_swigregister(itkFixedArrayUL4)
itkFixedArrayUL4_Filled = _itkFixedArrayPython.itkFixedArrayUL4_Filled
itkFixedArrayUL4___len__ = _itkFixedArrayPython.itkFixedArrayUL4___len__

class itkFixedArrayUL5(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayUL5

    def __init__(self, *args):
        r"""
        __init__(itkFixedArrayUL5 self) -> itkFixedArrayUL5
        __init__(itkFixedArrayUL5 self, itkFixedArrayUL5 arg0) -> itkFixedArrayUL5
        __init__(itkFixedArrayUL5 self, unsigned long const * r) -> itkFixedArrayUL5
        __init__(itkFixedArrayUL5 self, unsigned long const & arg0) -> itkFixedArrayUL5
        __init__(itkFixedArrayUL5 self, std::array< unsigned long,5 > const & stdArray) -> itkFixedArrayUL5


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArrayUL5_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayUL5(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL5___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL5___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL5_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL5_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL5_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL5_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL5_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL5_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL5_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL5_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL5_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL5_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL5_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL5_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL5_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL5_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayUL5_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL5___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL5___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayUL5___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL5___repr__)

# Register itkFixedArrayUL5 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArrayUL5_swigregister(itkFixedArrayUL5)
itkFixedArrayUL5_Filled = _itkFixedArrayPython.itkFixedArrayUL5_Filled
itkFixedArrayUL5___len__ = _itkFixedArrayPython.itkFixedArrayUL5___len__

class itkFixedArrayUL6(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayUL6

    def __init__(self, *args):
        r"""
        __init__(itkFixedArrayUL6 self) -> itkFixedArrayUL6
        __init__(itkFixedArrayUL6 self, itkFixedArrayUL6 arg0) -> itkFixedArrayUL6
        __init__(itkFixedArrayUL6 self, unsigned long const * r) -> itkFixedArrayUL6
        __init__(itkFixedArrayUL6 self, unsigned long const & arg0) -> itkFixedArrayUL6
        __init__(itkFixedArrayUL6 self, std::array< unsigned long,6 > const & stdArray) -> itkFixedArrayUL6


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArrayUL6_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayUL6(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL6___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL6___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL6_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL6_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL6_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL6_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL6_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL6_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL6_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL6_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL6_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL6_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL6_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL6_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL6_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL6_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayUL6_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL6___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL6___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayUL6___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUL6___repr__)

# Register itkFixedArrayUL6 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArrayUL6_swigregister(itkFixedArrayUL6)
itkFixedArrayUL6_Filled = _itkFixedArrayPython.itkFixedArrayUL6_Filled
itkFixedArrayUL6___len__ = _itkFixedArrayPython.itkFixedArrayUL6___len__

class itkFixedArrayULL1(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayULL1

    def __init__(self, *args):
        r"""
        __init__(itkFixedArrayULL1 self) -> itkFixedArrayULL1
        __init__(itkFixedArrayULL1 self, itkFixedArrayULL1 arg0) -> itkFixedArrayULL1
        __init__(itkFixedArrayULL1 self, unsigned long long const * r) -> itkFixedArrayULL1
        __init__(itkFixedArrayULL1 self, unsigned long long const & arg0) -> itkFixedArrayULL1
        __init__(itkFixedArrayULL1 self, std::array< unsigned long long,1 > const & stdArray) -> itkFixedArrayULL1


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArrayULL1_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayULL1(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL1___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL1___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL1_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL1_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL1_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL1_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL1_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL1_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL1_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL1_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL1_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL1_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL1_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL1_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL1_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL1_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayULL1_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL1___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL1___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayULL1___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL1___repr__)

# Register itkFixedArrayULL1 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArrayULL1_swigregister(itkFixedArrayULL1)
itkFixedArrayULL1_Filled = _itkFixedArrayPython.itkFixedArrayULL1_Filled
itkFixedArrayULL1___len__ = _itkFixedArrayPython.itkFixedArrayULL1___len__

class itkFixedArrayULL2(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayULL2

    def __init__(self, *args):
        r"""
        __init__(itkFixedArrayULL2 self) -> itkFixedArrayULL2
        __init__(itkFixedArrayULL2 self, itkFixedArrayULL2 arg0) -> itkFixedArrayULL2
        __init__(itkFixedArrayULL2 self, unsigned long long const * r) -> itkFixedArrayULL2
        __init__(itkFixedArrayULL2 self, unsigned long long const & arg0) -> itkFixedArrayULL2
        __init__(itkFixedArrayULL2 self, std::array< unsigned long long,2 > const & stdArray) -> itkFixedArrayULL2


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArrayULL2_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayULL2(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL2___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL2___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL2_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL2_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL2_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL2_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL2_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL2_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL2_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL2_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL2_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL2_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL2_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL2_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL2_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL2_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayULL2_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL2___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL2___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayULL2___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL2___repr__)

# Register itkFixedArrayULL2 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArrayULL2_swigregister(itkFixedArrayULL2)
itkFixedArrayULL2_Filled = _itkFixedArrayPython.itkFixedArrayULL2_Filled
itkFixedArrayULL2___len__ = _itkFixedArrayPython.itkFixedArrayULL2___len__

class itkFixedArrayULL3(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayULL3

    def __init__(self, *args):
        r"""
        __init__(itkFixedArrayULL3 self) -> itkFixedArrayULL3
        __init__(itkFixedArrayULL3 self, itkFixedArrayULL3 arg0) -> itkFixedArrayULL3
        __init__(itkFixedArrayULL3 self, unsigned long long const * r) -> itkFixedArrayULL3
        __init__(itkFixedArrayULL3 self, unsigned long long const & arg0) -> itkFixedArrayULL3
        __init__(itkFixedArrayULL3 self, std::array< unsigned long long,3 > const & stdArray) -> itkFixedArrayULL3


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArrayULL3_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayULL3(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL3___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL3___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL3_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL3_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL3_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL3_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL3_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL3_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL3_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL3_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL3_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL3_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL3_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL3_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL3_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL3_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayULL3_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL3___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL3___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayULL3___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL3___repr__)

# Register itkFixedArrayULL3 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArrayULL3_swigregister(itkFixedArrayULL3)
itkFixedArrayULL3_Filled = _itkFixedArrayPython.itkFixedArrayULL3_Filled
itkFixedArrayULL3___len__ = _itkFixedArrayPython.itkFixedArrayULL3___len__

class itkFixedArrayULL4(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayULL4

    def __init__(self, *args):
        r"""
        __init__(itkFixedArrayULL4 self) -> itkFixedArrayULL4
        __init__(itkFixedArrayULL4 self, itkFixedArrayULL4 arg0) -> itkFixedArrayULL4
        __init__(itkFixedArrayULL4 self, unsigned long long const * r) -> itkFixedArrayULL4
        __init__(itkFixedArrayULL4 self, unsigned long long const & arg0) -> itkFixedArrayULL4
        __init__(itkFixedArrayULL4 self, std::array< unsigned long long,4 > const & stdArray) -> itkFixedArrayULL4


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArrayULL4_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayULL4(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL4___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL4___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL4_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL4_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL4_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL4_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL4_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL4_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL4_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL4_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL4_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL4_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL4_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL4_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL4_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL4_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayULL4_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL4___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL4___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayULL4___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL4___repr__)

# Register itkFixedArrayULL4 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArrayULL4_swigregister(itkFixedArrayULL4)
itkFixedArrayULL4_Filled = _itkFixedArrayPython.itkFixedArrayULL4_Filled
itkFixedArrayULL4___len__ = _itkFixedArrayPython.itkFixedArrayULL4___len__

class itkFixedArrayULL5(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayULL5

    def __init__(self, *args):
        r"""
        __init__(itkFixedArrayULL5 self) -> itkFixedArrayULL5
        __init__(itkFixedArrayULL5 self, itkFixedArrayULL5 arg0) -> itkFixedArrayULL5
        __init__(itkFixedArrayULL5 self, unsigned long long const * r) -> itkFixedArrayULL5
        __init__(itkFixedArrayULL5 self, unsigned long long const & arg0) -> itkFixedArrayULL5
        __init__(itkFixedArrayULL5 self, std::array< unsigned long long,5 > const & stdArray) -> itkFixedArrayULL5


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArrayULL5_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayULL5(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL5___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL5___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL5_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL5_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL5_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL5_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL5_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL5_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL5_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL5_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL5_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL5_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL5_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL5_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL5_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL5_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayULL5_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL5___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL5___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayULL5___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL5___repr__)

# Register itkFixedArrayULL5 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArrayULL5_swigregister(itkFixedArrayULL5)
itkFixedArrayULL5_Filled = _itkFixedArrayPython.itkFixedArrayULL5_Filled
itkFixedArrayULL5___len__ = _itkFixedArrayPython.itkFixedArrayULL5___len__

class itkFixedArrayULL6(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayULL6

    def __init__(self, *args):
        r"""
        __init__(itkFixedArrayULL6 self) -> itkFixedArrayULL6
        __init__(itkFixedArrayULL6 self, itkFixedArrayULL6 arg0) -> itkFixedArrayULL6
        __init__(itkFixedArrayULL6 self, unsigned long long const * r) -> itkFixedArrayULL6
        __init__(itkFixedArrayULL6 self, unsigned long long const & arg0) -> itkFixedArrayULL6
        __init__(itkFixedArrayULL6 self, std::array< unsigned long long,6 > const & stdArray) -> itkFixedArrayULL6


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArrayULL6_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayULL6(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL6___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL6___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL6_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL6_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL6_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL6_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL6_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL6_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL6_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL6_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL6_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL6_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL6_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL6_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL6_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL6_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayULL6_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL6___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL6___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayULL6___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayULL6___repr__)

# Register itkFixedArrayULL6 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArrayULL6_swigregister(itkFixedArrayULL6)
itkFixedArrayULL6_Filled = _itkFixedArrayPython.itkFixedArrayULL6_Filled
itkFixedArrayULL6___len__ = _itkFixedArrayPython.itkFixedArrayULL6___len__

class itkFixedArrayUS1(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayUS1

    def __init__(self, *args):
        r"""
        __init__(itkFixedArrayUS1 self) -> itkFixedArrayUS1
        __init__(itkFixedArrayUS1 self, itkFixedArrayUS1 arg0) -> itkFixedArrayUS1
        __init__(itkFixedArrayUS1 self, unsigned short const * r) -> itkFixedArrayUS1
        __init__(itkFixedArrayUS1 self, unsigned short const & arg0) -> itkFixedArrayUS1
        __init__(itkFixedArrayUS1 self, std::array< unsigned short,1 > const & stdArray) -> itkFixedArrayUS1


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArrayUS1_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayUS1(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS1___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS1___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS1_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS1_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS1_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS1_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS1_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS1_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS1_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS1_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS1_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS1_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS1_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS1_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS1_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS1_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayUS1_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS1___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS1___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayUS1___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS1___repr__)

# Register itkFixedArrayUS1 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArrayUS1_swigregister(itkFixedArrayUS1)
itkFixedArrayUS1_Filled = _itkFixedArrayPython.itkFixedArrayUS1_Filled
itkFixedArrayUS1___len__ = _itkFixedArrayPython.itkFixedArrayUS1___len__

class itkFixedArrayUS2(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayUS2

    def __init__(self, *args):
        r"""
        __init__(itkFixedArrayUS2 self) -> itkFixedArrayUS2
        __init__(itkFixedArrayUS2 self, itkFixedArrayUS2 arg0) -> itkFixedArrayUS2
        __init__(itkFixedArrayUS2 self, unsigned short const * r) -> itkFixedArrayUS2
        __init__(itkFixedArrayUS2 self, unsigned short const & arg0) -> itkFixedArrayUS2
        __init__(itkFixedArrayUS2 self, std::array< unsigned short,2 > const & stdArray) -> itkFixedArrayUS2


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArrayUS2_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayUS2(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS2___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS2___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS2_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS2_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS2_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS2_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS2_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS2_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS2_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS2_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS2_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS2_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS2_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS2_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS2_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS2_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayUS2_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS2___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS2___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayUS2___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS2___repr__)

# Register itkFixedArrayUS2 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArrayUS2_swigregister(itkFixedArrayUS2)
itkFixedArrayUS2_Filled = _itkFixedArrayPython.itkFixedArrayUS2_Filled
itkFixedArrayUS2___len__ = _itkFixedArrayPython.itkFixedArrayUS2___len__

class itkFixedArrayUS3(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayUS3

    def __init__(self, *args):
        r"""
        __init__(itkFixedArrayUS3 self) -> itkFixedArrayUS3
        __init__(itkFixedArrayUS3 self, itkFixedArrayUS3 arg0) -> itkFixedArrayUS3
        __init__(itkFixedArrayUS3 self, unsigned short const * r) -> itkFixedArrayUS3
        __init__(itkFixedArrayUS3 self, unsigned short const & arg0) -> itkFixedArrayUS3
        __init__(itkFixedArrayUS3 self, std::array< unsigned short,3 > const & stdArray) -> itkFixedArrayUS3


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArrayUS3_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayUS3(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS3___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS3___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS3_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS3_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS3_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS3_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS3_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS3_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS3_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS3_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS3_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS3_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS3_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS3_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS3_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS3_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayUS3_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS3___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS3___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayUS3___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS3___repr__)

# Register itkFixedArrayUS3 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArrayUS3_swigregister(itkFixedArrayUS3)
itkFixedArrayUS3_Filled = _itkFixedArrayPython.itkFixedArrayUS3_Filled
itkFixedArrayUS3___len__ = _itkFixedArrayPython.itkFixedArrayUS3___len__

class itkFixedArrayUS4(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayUS4

    def __init__(self, *args):
        r"""
        __init__(itkFixedArrayUS4 self) -> itkFixedArrayUS4
        __init__(itkFixedArrayUS4 self, itkFixedArrayUS4 arg0) -> itkFixedArrayUS4
        __init__(itkFixedArrayUS4 self, unsigned short const * r) -> itkFixedArrayUS4
        __init__(itkFixedArrayUS4 self, unsigned short const & arg0) -> itkFixedArrayUS4
        __init__(itkFixedArrayUS4 self, std::array< unsigned short,4 > const & stdArray) -> itkFixedArrayUS4


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArrayUS4_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayUS4(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS4___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS4___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS4_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS4_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS4_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS4_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS4_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS4_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS4_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS4_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS4_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS4_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS4_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS4_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS4_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS4_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayUS4_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS4___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS4___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayUS4___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS4___repr__)

# Register itkFixedArrayUS4 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArrayUS4_swigregister(itkFixedArrayUS4)
itkFixedArrayUS4_Filled = _itkFixedArrayPython.itkFixedArrayUS4_Filled
itkFixedArrayUS4___len__ = _itkFixedArrayPython.itkFixedArrayUS4___len__

class itkFixedArrayUS5(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayUS5

    def __init__(self, *args):
        r"""
        __init__(itkFixedArrayUS5 self) -> itkFixedArrayUS5
        __init__(itkFixedArrayUS5 self, itkFixedArrayUS5 arg0) -> itkFixedArrayUS5
        __init__(itkFixedArrayUS5 self, unsigned short const * r) -> itkFixedArrayUS5
        __init__(itkFixedArrayUS5 self, unsigned short const & arg0) -> itkFixedArrayUS5
        __init__(itkFixedArrayUS5 self, std::array< unsigned short,5 > const & stdArray) -> itkFixedArrayUS5


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArrayUS5_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayUS5(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS5___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS5___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS5_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS5_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS5_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS5_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS5_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS5_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS5_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS5_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS5_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS5_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS5_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS5_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS5_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS5_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayUS5_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS5___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS5___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayUS5___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS5___repr__)

# Register itkFixedArrayUS5 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArrayUS5_swigregister(itkFixedArrayUS5)
itkFixedArrayUS5_Filled = _itkFixedArrayPython.itkFixedArrayUS5_Filled
itkFixedArrayUS5___len__ = _itkFixedArrayPython.itkFixedArrayUS5___len__

class itkFixedArrayUS6(object):
    r"""


    Simulate a standard C array with copy semantics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayUS6

    def __init__(self, *args):
        r"""
        __init__(itkFixedArrayUS6 self) -> itkFixedArrayUS6
        __init__(itkFixedArrayUS6 self, itkFixedArrayUS6 arg0) -> itkFixedArrayUS6
        __init__(itkFixedArrayUS6 self, unsigned short const * r) -> itkFixedArrayUS6
        __init__(itkFixedArrayUS6 self, unsigned short const & arg0) -> itkFixedArrayUS6
        __init__(itkFixedArrayUS6 self, std::array< unsigned short,6 > const & stdArray) -> itkFixedArrayUS6


        Simulate a standard C array with copy semantics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        example{Core/Common/CreateAFixedArray,Create A Fixed Array} 
        """
        _itkFixedArrayPython.itkFixedArrayUS6_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayUS6(*args))
    __eq__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS6___eq__)
    __ne__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS6___ne__)
    SetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS6_SetElement)
    GetElement = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS6_GetElement)
    GetDataPointer = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS6_GetDataPointer)
    cbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS6_cbegin)
    begin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS6_begin)
    cend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS6_cend)
    end = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS6_end)
    crbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS6_crbegin)
    rbegin = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS6_rbegin)
    crend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS6_crend)
    rend = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS6_rend)
    Size = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS6_Size)
    Fill = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS6_Fill)
    swap = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS6_swap)
    Filled = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayUS6_Filled)
    __getitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS6___getitem__)
    __setitem__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS6___setitem__)
    __len__ = _swig_new_static_method(_itkFixedArrayPython.itkFixedArrayUS6___len__)
    __repr__ = _swig_new_instance_method(_itkFixedArrayPython.itkFixedArrayUS6___repr__)

# Register itkFixedArrayUS6 in _itkFixedArrayPython:
_itkFixedArrayPython.itkFixedArrayUS6_swigregister(itkFixedArrayUS6)
itkFixedArrayUS6_Filled = _itkFixedArrayPython.itkFixedArrayUS6_Filled
itkFixedArrayUS6___len__ = _itkFixedArrayPython.itkFixedArrayUS6___len__



