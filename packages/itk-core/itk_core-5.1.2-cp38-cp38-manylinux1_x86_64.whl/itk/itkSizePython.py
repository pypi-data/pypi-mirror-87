# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkSizePython
else:
    import _itkSizePython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkSizePython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkSizePython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.pyBasePython
class itkSize1(object):
    r"""Proxy of C++ itkSize1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    GetSizeDimension = _swig_new_static_method(_itkSizePython.itkSize1_GetSizeDimension)
    __add__ = _swig_new_instance_method(_itkSizePython.itkSize1___add__)
    __iadd__ = _swig_new_instance_method(_itkSizePython.itkSize1___iadd__)
    __sub__ = _swig_new_instance_method(_itkSizePython.itkSize1___sub__)
    __isub__ = _swig_new_instance_method(_itkSizePython.itkSize1___isub__)
    __mul__ = _swig_new_instance_method(_itkSizePython.itkSize1___mul__)
    __imul__ = _swig_new_instance_method(_itkSizePython.itkSize1___imul__)
    GetSize = _swig_new_instance_method(_itkSizePython.itkSize1_GetSize)
    SetSize = _swig_new_instance_method(_itkSizePython.itkSize1_SetSize)
    SetElement = _swig_new_instance_method(_itkSizePython.itkSize1_SetElement)
    GetElement = _swig_new_instance_method(_itkSizePython.itkSize1_GetElement)
    Fill = _swig_new_instance_method(_itkSizePython.itkSize1_Fill)
    assign = _swig_new_instance_method(_itkSizePython.itkSize1_assign)
    swap = _swig_new_instance_method(_itkSizePython.itkSize1_swap)
    begin = _swig_new_instance_method(_itkSizePython.itkSize1_begin)
    end = _swig_new_instance_method(_itkSizePython.itkSize1_end)
    rbegin = _swig_new_instance_method(_itkSizePython.itkSize1_rbegin)
    rend = _swig_new_instance_method(_itkSizePython.itkSize1_rend)
    size = _swig_new_instance_method(_itkSizePython.itkSize1_size)
    max_size = _swig_new_instance_method(_itkSizePython.itkSize1_max_size)
    empty = _swig_new_instance_method(_itkSizePython.itkSize1_empty)
    at = _swig_new_instance_method(_itkSizePython.itkSize1_at)
    front = _swig_new_instance_method(_itkSizePython.itkSize1_front)
    back = _swig_new_instance_method(_itkSizePython.itkSize1_back)
    data = _swig_new_instance_method(_itkSizePython.itkSize1_data)
    Filled = _swig_new_static_method(_itkSizePython.itkSize1_Filled)

    def __init__(self, *args):
        r"""
        __init__(itkSize1 self) -> itkSize1
        __init__(itkSize1 self, itkSize1 arg0) -> itkSize1
        """
        _itkSizePython.itkSize1_swiginit(self, _itkSizePython.new_itkSize1(*args))
    __swig_destroy__ = _itkSizePython.delete_itkSize1
    __getitem__ = _swig_new_instance_method(_itkSizePython.itkSize1___getitem__)
    __setitem__ = _swig_new_instance_method(_itkSizePython.itkSize1___setitem__)
    __len__ = _swig_new_static_method(_itkSizePython.itkSize1___len__)
    __repr__ = _swig_new_instance_method(_itkSizePython.itkSize1___repr__)

    def __eq__(self, other):
        return tuple(self) == tuple(other)


# Register itkSize1 in _itkSizePython:
_itkSizePython.itkSize1_swigregister(itkSize1)
itkSize1_GetSizeDimension = _itkSizePython.itkSize1_GetSizeDimension
itkSize1_Filled = _itkSizePython.itkSize1_Filled
itkSize1___len__ = _itkSizePython.itkSize1___len__

class itkSize2(object):
    r"""Proxy of C++ itkSize2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    GetSizeDimension = _swig_new_static_method(_itkSizePython.itkSize2_GetSizeDimension)
    __add__ = _swig_new_instance_method(_itkSizePython.itkSize2___add__)
    __iadd__ = _swig_new_instance_method(_itkSizePython.itkSize2___iadd__)
    __sub__ = _swig_new_instance_method(_itkSizePython.itkSize2___sub__)
    __isub__ = _swig_new_instance_method(_itkSizePython.itkSize2___isub__)
    __mul__ = _swig_new_instance_method(_itkSizePython.itkSize2___mul__)
    __imul__ = _swig_new_instance_method(_itkSizePython.itkSize2___imul__)
    GetSize = _swig_new_instance_method(_itkSizePython.itkSize2_GetSize)
    SetSize = _swig_new_instance_method(_itkSizePython.itkSize2_SetSize)
    SetElement = _swig_new_instance_method(_itkSizePython.itkSize2_SetElement)
    GetElement = _swig_new_instance_method(_itkSizePython.itkSize2_GetElement)
    Fill = _swig_new_instance_method(_itkSizePython.itkSize2_Fill)
    assign = _swig_new_instance_method(_itkSizePython.itkSize2_assign)
    swap = _swig_new_instance_method(_itkSizePython.itkSize2_swap)
    begin = _swig_new_instance_method(_itkSizePython.itkSize2_begin)
    end = _swig_new_instance_method(_itkSizePython.itkSize2_end)
    rbegin = _swig_new_instance_method(_itkSizePython.itkSize2_rbegin)
    rend = _swig_new_instance_method(_itkSizePython.itkSize2_rend)
    size = _swig_new_instance_method(_itkSizePython.itkSize2_size)
    max_size = _swig_new_instance_method(_itkSizePython.itkSize2_max_size)
    empty = _swig_new_instance_method(_itkSizePython.itkSize2_empty)
    at = _swig_new_instance_method(_itkSizePython.itkSize2_at)
    front = _swig_new_instance_method(_itkSizePython.itkSize2_front)
    back = _swig_new_instance_method(_itkSizePython.itkSize2_back)
    data = _swig_new_instance_method(_itkSizePython.itkSize2_data)
    Filled = _swig_new_static_method(_itkSizePython.itkSize2_Filled)

    def __init__(self, *args):
        r"""
        __init__(itkSize2 self) -> itkSize2
        __init__(itkSize2 self, itkSize2 arg0) -> itkSize2
        """
        _itkSizePython.itkSize2_swiginit(self, _itkSizePython.new_itkSize2(*args))
    __swig_destroy__ = _itkSizePython.delete_itkSize2
    __getitem__ = _swig_new_instance_method(_itkSizePython.itkSize2___getitem__)
    __setitem__ = _swig_new_instance_method(_itkSizePython.itkSize2___setitem__)
    __len__ = _swig_new_static_method(_itkSizePython.itkSize2___len__)
    __repr__ = _swig_new_instance_method(_itkSizePython.itkSize2___repr__)

    def __eq__(self, other):
        return tuple(self) == tuple(other)


# Register itkSize2 in _itkSizePython:
_itkSizePython.itkSize2_swigregister(itkSize2)
itkSize2_GetSizeDimension = _itkSizePython.itkSize2_GetSizeDimension
itkSize2_Filled = _itkSizePython.itkSize2_Filled
itkSize2___len__ = _itkSizePython.itkSize2___len__

class itkSize3(object):
    r"""Proxy of C++ itkSize3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    GetSizeDimension = _swig_new_static_method(_itkSizePython.itkSize3_GetSizeDimension)
    __add__ = _swig_new_instance_method(_itkSizePython.itkSize3___add__)
    __iadd__ = _swig_new_instance_method(_itkSizePython.itkSize3___iadd__)
    __sub__ = _swig_new_instance_method(_itkSizePython.itkSize3___sub__)
    __isub__ = _swig_new_instance_method(_itkSizePython.itkSize3___isub__)
    __mul__ = _swig_new_instance_method(_itkSizePython.itkSize3___mul__)
    __imul__ = _swig_new_instance_method(_itkSizePython.itkSize3___imul__)
    GetSize = _swig_new_instance_method(_itkSizePython.itkSize3_GetSize)
    SetSize = _swig_new_instance_method(_itkSizePython.itkSize3_SetSize)
    SetElement = _swig_new_instance_method(_itkSizePython.itkSize3_SetElement)
    GetElement = _swig_new_instance_method(_itkSizePython.itkSize3_GetElement)
    Fill = _swig_new_instance_method(_itkSizePython.itkSize3_Fill)
    assign = _swig_new_instance_method(_itkSizePython.itkSize3_assign)
    swap = _swig_new_instance_method(_itkSizePython.itkSize3_swap)
    begin = _swig_new_instance_method(_itkSizePython.itkSize3_begin)
    end = _swig_new_instance_method(_itkSizePython.itkSize3_end)
    rbegin = _swig_new_instance_method(_itkSizePython.itkSize3_rbegin)
    rend = _swig_new_instance_method(_itkSizePython.itkSize3_rend)
    size = _swig_new_instance_method(_itkSizePython.itkSize3_size)
    max_size = _swig_new_instance_method(_itkSizePython.itkSize3_max_size)
    empty = _swig_new_instance_method(_itkSizePython.itkSize3_empty)
    at = _swig_new_instance_method(_itkSizePython.itkSize3_at)
    front = _swig_new_instance_method(_itkSizePython.itkSize3_front)
    back = _swig_new_instance_method(_itkSizePython.itkSize3_back)
    data = _swig_new_instance_method(_itkSizePython.itkSize3_data)
    Filled = _swig_new_static_method(_itkSizePython.itkSize3_Filled)

    def __init__(self, *args):
        r"""
        __init__(itkSize3 self) -> itkSize3
        __init__(itkSize3 self, itkSize3 arg0) -> itkSize3
        """
        _itkSizePython.itkSize3_swiginit(self, _itkSizePython.new_itkSize3(*args))
    __swig_destroy__ = _itkSizePython.delete_itkSize3
    __getitem__ = _swig_new_instance_method(_itkSizePython.itkSize3___getitem__)
    __setitem__ = _swig_new_instance_method(_itkSizePython.itkSize3___setitem__)
    __len__ = _swig_new_static_method(_itkSizePython.itkSize3___len__)
    __repr__ = _swig_new_instance_method(_itkSizePython.itkSize3___repr__)

    def __eq__(self, other):
        return tuple(self) == tuple(other)


# Register itkSize3 in _itkSizePython:
_itkSizePython.itkSize3_swigregister(itkSize3)
itkSize3_GetSizeDimension = _itkSizePython.itkSize3_GetSizeDimension
itkSize3_Filled = _itkSizePython.itkSize3_Filled
itkSize3___len__ = _itkSizePython.itkSize3___len__

class itkSize4(object):
    r"""Proxy of C++ itkSize4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    GetSizeDimension = _swig_new_static_method(_itkSizePython.itkSize4_GetSizeDimension)
    __add__ = _swig_new_instance_method(_itkSizePython.itkSize4___add__)
    __iadd__ = _swig_new_instance_method(_itkSizePython.itkSize4___iadd__)
    __sub__ = _swig_new_instance_method(_itkSizePython.itkSize4___sub__)
    __isub__ = _swig_new_instance_method(_itkSizePython.itkSize4___isub__)
    __mul__ = _swig_new_instance_method(_itkSizePython.itkSize4___mul__)
    __imul__ = _swig_new_instance_method(_itkSizePython.itkSize4___imul__)
    GetSize = _swig_new_instance_method(_itkSizePython.itkSize4_GetSize)
    SetSize = _swig_new_instance_method(_itkSizePython.itkSize4_SetSize)
    SetElement = _swig_new_instance_method(_itkSizePython.itkSize4_SetElement)
    GetElement = _swig_new_instance_method(_itkSizePython.itkSize4_GetElement)
    Fill = _swig_new_instance_method(_itkSizePython.itkSize4_Fill)
    assign = _swig_new_instance_method(_itkSizePython.itkSize4_assign)
    swap = _swig_new_instance_method(_itkSizePython.itkSize4_swap)
    begin = _swig_new_instance_method(_itkSizePython.itkSize4_begin)
    end = _swig_new_instance_method(_itkSizePython.itkSize4_end)
    rbegin = _swig_new_instance_method(_itkSizePython.itkSize4_rbegin)
    rend = _swig_new_instance_method(_itkSizePython.itkSize4_rend)
    size = _swig_new_instance_method(_itkSizePython.itkSize4_size)
    max_size = _swig_new_instance_method(_itkSizePython.itkSize4_max_size)
    empty = _swig_new_instance_method(_itkSizePython.itkSize4_empty)
    at = _swig_new_instance_method(_itkSizePython.itkSize4_at)
    front = _swig_new_instance_method(_itkSizePython.itkSize4_front)
    back = _swig_new_instance_method(_itkSizePython.itkSize4_back)
    data = _swig_new_instance_method(_itkSizePython.itkSize4_data)
    Filled = _swig_new_static_method(_itkSizePython.itkSize4_Filled)

    def __init__(self, *args):
        r"""
        __init__(itkSize4 self) -> itkSize4
        __init__(itkSize4 self, itkSize4 arg0) -> itkSize4
        """
        _itkSizePython.itkSize4_swiginit(self, _itkSizePython.new_itkSize4(*args))
    __swig_destroy__ = _itkSizePython.delete_itkSize4
    __getitem__ = _swig_new_instance_method(_itkSizePython.itkSize4___getitem__)
    __setitem__ = _swig_new_instance_method(_itkSizePython.itkSize4___setitem__)
    __len__ = _swig_new_static_method(_itkSizePython.itkSize4___len__)
    __repr__ = _swig_new_instance_method(_itkSizePython.itkSize4___repr__)

    def __eq__(self, other):
        return tuple(self) == tuple(other)


# Register itkSize4 in _itkSizePython:
_itkSizePython.itkSize4_swigregister(itkSize4)
itkSize4_GetSizeDimension = _itkSizePython.itkSize4_GetSizeDimension
itkSize4_Filled = _itkSizePython.itkSize4_Filled
itkSize4___len__ = _itkSizePython.itkSize4___len__



