# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageFilterBasePython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkNoiseImageFilterPython
else:
    import _itkNoiseImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkNoiseImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkNoiseImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImageRegionPython
import itk.itkSizePython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkBoxImageFilterPython
import itk.itkImageToImageFilterAPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkFixedArrayPython
import itk.itkPointPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython

def itkNoiseImageFilterID2ID2_New():
    return itkNoiseImageFilterID2ID2.New()

class itkNoiseImageFilterID2ID2(itk.itkBoxImageFilterPython.itkBoxImageFilterID2ID2):
    r"""


    Calculate the local noise in an image.

    Computes an image where a given pixel is the standard deviation of the
    pixels in a neighborhood about the corresponding input pixel. This
    serves as an estimate of the local noise (or texture) in an image.
    Currently, this noise estimate assume a piecewise constant image. This
    filter should be extended to fitting a (hyper) plane to the
    neighborhood and calculating the standard deviation of the residuals
    to this (hyper) plane.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    {Filtering/ImageFilterBase/ComputerLocalNoise,Compute Local Noise In
    Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNoiseImageFilterPython.itkNoiseImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkNoiseImageFilterPython.itkNoiseImageFilterID2ID2_Clone)
    InputHasNumericTraitsCheck = _itkNoiseImageFilterPython.itkNoiseImageFilterID2ID2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkNoiseImageFilterPython.delete_itkNoiseImageFilterID2ID2
    cast = _swig_new_static_method(_itkNoiseImageFilterPython.itkNoiseImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkNoiseImageFilterID2ID2

        Create a new object of the class itkNoiseImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNoiseImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNoiseImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNoiseImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNoiseImageFilterID2ID2 in _itkNoiseImageFilterPython:
_itkNoiseImageFilterPython.itkNoiseImageFilterID2ID2_swigregister(itkNoiseImageFilterID2ID2)
itkNoiseImageFilterID2ID2___New_orig__ = _itkNoiseImageFilterPython.itkNoiseImageFilterID2ID2___New_orig__
itkNoiseImageFilterID2ID2_cast = _itkNoiseImageFilterPython.itkNoiseImageFilterID2ID2_cast


def itkNoiseImageFilterID3ID3_New():
    return itkNoiseImageFilterID3ID3.New()

class itkNoiseImageFilterID3ID3(itk.itkBoxImageFilterPython.itkBoxImageFilterID3ID3):
    r"""


    Calculate the local noise in an image.

    Computes an image where a given pixel is the standard deviation of the
    pixels in a neighborhood about the corresponding input pixel. This
    serves as an estimate of the local noise (or texture) in an image.
    Currently, this noise estimate assume a piecewise constant image. This
    filter should be extended to fitting a (hyper) plane to the
    neighborhood and calculating the standard deviation of the residuals
    to this (hyper) plane.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    {Filtering/ImageFilterBase/ComputerLocalNoise,Compute Local Noise In
    Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNoiseImageFilterPython.itkNoiseImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkNoiseImageFilterPython.itkNoiseImageFilterID3ID3_Clone)
    InputHasNumericTraitsCheck = _itkNoiseImageFilterPython.itkNoiseImageFilterID3ID3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkNoiseImageFilterPython.delete_itkNoiseImageFilterID3ID3
    cast = _swig_new_static_method(_itkNoiseImageFilterPython.itkNoiseImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkNoiseImageFilterID3ID3

        Create a new object of the class itkNoiseImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNoiseImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNoiseImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNoiseImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNoiseImageFilterID3ID3 in _itkNoiseImageFilterPython:
_itkNoiseImageFilterPython.itkNoiseImageFilterID3ID3_swigregister(itkNoiseImageFilterID3ID3)
itkNoiseImageFilterID3ID3___New_orig__ = _itkNoiseImageFilterPython.itkNoiseImageFilterID3ID3___New_orig__
itkNoiseImageFilterID3ID3_cast = _itkNoiseImageFilterPython.itkNoiseImageFilterID3ID3_cast


def itkNoiseImageFilterIF2IF2_New():
    return itkNoiseImageFilterIF2IF2.New()

class itkNoiseImageFilterIF2IF2(itk.itkBoxImageFilterPython.itkBoxImageFilterIF2IF2):
    r"""


    Calculate the local noise in an image.

    Computes an image where a given pixel is the standard deviation of the
    pixels in a neighborhood about the corresponding input pixel. This
    serves as an estimate of the local noise (or texture) in an image.
    Currently, this noise estimate assume a piecewise constant image. This
    filter should be extended to fitting a (hyper) plane to the
    neighborhood and calculating the standard deviation of the residuals
    to this (hyper) plane.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    {Filtering/ImageFilterBase/ComputerLocalNoise,Compute Local Noise In
    Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNoiseImageFilterPython.itkNoiseImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkNoiseImageFilterPython.itkNoiseImageFilterIF2IF2_Clone)
    InputHasNumericTraitsCheck = _itkNoiseImageFilterPython.itkNoiseImageFilterIF2IF2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkNoiseImageFilterPython.delete_itkNoiseImageFilterIF2IF2
    cast = _swig_new_static_method(_itkNoiseImageFilterPython.itkNoiseImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkNoiseImageFilterIF2IF2

        Create a new object of the class itkNoiseImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNoiseImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNoiseImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNoiseImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNoiseImageFilterIF2IF2 in _itkNoiseImageFilterPython:
_itkNoiseImageFilterPython.itkNoiseImageFilterIF2IF2_swigregister(itkNoiseImageFilterIF2IF2)
itkNoiseImageFilterIF2IF2___New_orig__ = _itkNoiseImageFilterPython.itkNoiseImageFilterIF2IF2___New_orig__
itkNoiseImageFilterIF2IF2_cast = _itkNoiseImageFilterPython.itkNoiseImageFilterIF2IF2_cast


def itkNoiseImageFilterIF3IF3_New():
    return itkNoiseImageFilterIF3IF3.New()

class itkNoiseImageFilterIF3IF3(itk.itkBoxImageFilterPython.itkBoxImageFilterIF3IF3):
    r"""


    Calculate the local noise in an image.

    Computes an image where a given pixel is the standard deviation of the
    pixels in a neighborhood about the corresponding input pixel. This
    serves as an estimate of the local noise (or texture) in an image.
    Currently, this noise estimate assume a piecewise constant image. This
    filter should be extended to fitting a (hyper) plane to the
    neighborhood and calculating the standard deviation of the residuals
    to this (hyper) plane.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    {Filtering/ImageFilterBase/ComputerLocalNoise,Compute Local Noise In
    Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNoiseImageFilterPython.itkNoiseImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkNoiseImageFilterPython.itkNoiseImageFilterIF3IF3_Clone)
    InputHasNumericTraitsCheck = _itkNoiseImageFilterPython.itkNoiseImageFilterIF3IF3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkNoiseImageFilterPython.delete_itkNoiseImageFilterIF3IF3
    cast = _swig_new_static_method(_itkNoiseImageFilterPython.itkNoiseImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkNoiseImageFilterIF3IF3

        Create a new object of the class itkNoiseImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNoiseImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNoiseImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNoiseImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNoiseImageFilterIF3IF3 in _itkNoiseImageFilterPython:
_itkNoiseImageFilterPython.itkNoiseImageFilterIF3IF3_swigregister(itkNoiseImageFilterIF3IF3)
itkNoiseImageFilterIF3IF3___New_orig__ = _itkNoiseImageFilterPython.itkNoiseImageFilterIF3IF3___New_orig__
itkNoiseImageFilterIF3IF3_cast = _itkNoiseImageFilterPython.itkNoiseImageFilterIF3IF3_cast


def itkNoiseImageFilterISS2ISS2_New():
    return itkNoiseImageFilterISS2ISS2.New()

class itkNoiseImageFilterISS2ISS2(itk.itkBoxImageFilterPython.itkBoxImageFilterISS2ISS2):
    r"""


    Calculate the local noise in an image.

    Computes an image where a given pixel is the standard deviation of the
    pixels in a neighborhood about the corresponding input pixel. This
    serves as an estimate of the local noise (or texture) in an image.
    Currently, this noise estimate assume a piecewise constant image. This
    filter should be extended to fitting a (hyper) plane to the
    neighborhood and calculating the standard deviation of the residuals
    to this (hyper) plane.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    {Filtering/ImageFilterBase/ComputerLocalNoise,Compute Local Noise In
    Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNoiseImageFilterPython.itkNoiseImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkNoiseImageFilterPython.itkNoiseImageFilterISS2ISS2_Clone)
    InputHasNumericTraitsCheck = _itkNoiseImageFilterPython.itkNoiseImageFilterISS2ISS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkNoiseImageFilterPython.delete_itkNoiseImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkNoiseImageFilterPython.itkNoiseImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkNoiseImageFilterISS2ISS2

        Create a new object of the class itkNoiseImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNoiseImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNoiseImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNoiseImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNoiseImageFilterISS2ISS2 in _itkNoiseImageFilterPython:
_itkNoiseImageFilterPython.itkNoiseImageFilterISS2ISS2_swigregister(itkNoiseImageFilterISS2ISS2)
itkNoiseImageFilterISS2ISS2___New_orig__ = _itkNoiseImageFilterPython.itkNoiseImageFilterISS2ISS2___New_orig__
itkNoiseImageFilterISS2ISS2_cast = _itkNoiseImageFilterPython.itkNoiseImageFilterISS2ISS2_cast


def itkNoiseImageFilterISS3ISS3_New():
    return itkNoiseImageFilterISS3ISS3.New()

class itkNoiseImageFilterISS3ISS3(itk.itkBoxImageFilterPython.itkBoxImageFilterISS3ISS3):
    r"""


    Calculate the local noise in an image.

    Computes an image where a given pixel is the standard deviation of the
    pixels in a neighborhood about the corresponding input pixel. This
    serves as an estimate of the local noise (or texture) in an image.
    Currently, this noise estimate assume a piecewise constant image. This
    filter should be extended to fitting a (hyper) plane to the
    neighborhood and calculating the standard deviation of the residuals
    to this (hyper) plane.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    {Filtering/ImageFilterBase/ComputerLocalNoise,Compute Local Noise In
    Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNoiseImageFilterPython.itkNoiseImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkNoiseImageFilterPython.itkNoiseImageFilterISS3ISS3_Clone)
    InputHasNumericTraitsCheck = _itkNoiseImageFilterPython.itkNoiseImageFilterISS3ISS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkNoiseImageFilterPython.delete_itkNoiseImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkNoiseImageFilterPython.itkNoiseImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkNoiseImageFilterISS3ISS3

        Create a new object of the class itkNoiseImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNoiseImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNoiseImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNoiseImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNoiseImageFilterISS3ISS3 in _itkNoiseImageFilterPython:
_itkNoiseImageFilterPython.itkNoiseImageFilterISS3ISS3_swigregister(itkNoiseImageFilterISS3ISS3)
itkNoiseImageFilterISS3ISS3___New_orig__ = _itkNoiseImageFilterPython.itkNoiseImageFilterISS3ISS3___New_orig__
itkNoiseImageFilterISS3ISS3_cast = _itkNoiseImageFilterPython.itkNoiseImageFilterISS3ISS3_cast


def itkNoiseImageFilterIUC2IUC2_New():
    return itkNoiseImageFilterIUC2IUC2.New()

class itkNoiseImageFilterIUC2IUC2(itk.itkBoxImageFilterPython.itkBoxImageFilterIUC2IUC2):
    r"""


    Calculate the local noise in an image.

    Computes an image where a given pixel is the standard deviation of the
    pixels in a neighborhood about the corresponding input pixel. This
    serves as an estimate of the local noise (or texture) in an image.
    Currently, this noise estimate assume a piecewise constant image. This
    filter should be extended to fitting a (hyper) plane to the
    neighborhood and calculating the standard deviation of the residuals
    to this (hyper) plane.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    {Filtering/ImageFilterBase/ComputerLocalNoise,Compute Local Noise In
    Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNoiseImageFilterPython.itkNoiseImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkNoiseImageFilterPython.itkNoiseImageFilterIUC2IUC2_Clone)
    InputHasNumericTraitsCheck = _itkNoiseImageFilterPython.itkNoiseImageFilterIUC2IUC2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkNoiseImageFilterPython.delete_itkNoiseImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkNoiseImageFilterPython.itkNoiseImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkNoiseImageFilterIUC2IUC2

        Create a new object of the class itkNoiseImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNoiseImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNoiseImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNoiseImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNoiseImageFilterIUC2IUC2 in _itkNoiseImageFilterPython:
_itkNoiseImageFilterPython.itkNoiseImageFilterIUC2IUC2_swigregister(itkNoiseImageFilterIUC2IUC2)
itkNoiseImageFilterIUC2IUC2___New_orig__ = _itkNoiseImageFilterPython.itkNoiseImageFilterIUC2IUC2___New_orig__
itkNoiseImageFilterIUC2IUC2_cast = _itkNoiseImageFilterPython.itkNoiseImageFilterIUC2IUC2_cast


def itkNoiseImageFilterIUC3IUC3_New():
    return itkNoiseImageFilterIUC3IUC3.New()

class itkNoiseImageFilterIUC3IUC3(itk.itkBoxImageFilterPython.itkBoxImageFilterIUC3IUC3):
    r"""


    Calculate the local noise in an image.

    Computes an image where a given pixel is the standard deviation of the
    pixels in a neighborhood about the corresponding input pixel. This
    serves as an estimate of the local noise (or texture) in an image.
    Currently, this noise estimate assume a piecewise constant image. This
    filter should be extended to fitting a (hyper) plane to the
    neighborhood and calculating the standard deviation of the residuals
    to this (hyper) plane.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    {Filtering/ImageFilterBase/ComputerLocalNoise,Compute Local Noise In
    Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNoiseImageFilterPython.itkNoiseImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkNoiseImageFilterPython.itkNoiseImageFilterIUC3IUC3_Clone)
    InputHasNumericTraitsCheck = _itkNoiseImageFilterPython.itkNoiseImageFilterIUC3IUC3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkNoiseImageFilterPython.delete_itkNoiseImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkNoiseImageFilterPython.itkNoiseImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkNoiseImageFilterIUC3IUC3

        Create a new object of the class itkNoiseImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNoiseImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNoiseImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNoiseImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNoiseImageFilterIUC3IUC3 in _itkNoiseImageFilterPython:
_itkNoiseImageFilterPython.itkNoiseImageFilterIUC3IUC3_swigregister(itkNoiseImageFilterIUC3IUC3)
itkNoiseImageFilterIUC3IUC3___New_orig__ = _itkNoiseImageFilterPython.itkNoiseImageFilterIUC3IUC3___New_orig__
itkNoiseImageFilterIUC3IUC3_cast = _itkNoiseImageFilterPython.itkNoiseImageFilterIUC3IUC3_cast


def itkNoiseImageFilterIUS2IUS2_New():
    return itkNoiseImageFilterIUS2IUS2.New()

class itkNoiseImageFilterIUS2IUS2(itk.itkBoxImageFilterPython.itkBoxImageFilterIUS2IUS2):
    r"""


    Calculate the local noise in an image.

    Computes an image where a given pixel is the standard deviation of the
    pixels in a neighborhood about the corresponding input pixel. This
    serves as an estimate of the local noise (or texture) in an image.
    Currently, this noise estimate assume a piecewise constant image. This
    filter should be extended to fitting a (hyper) plane to the
    neighborhood and calculating the standard deviation of the residuals
    to this (hyper) plane.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    {Filtering/ImageFilterBase/ComputerLocalNoise,Compute Local Noise In
    Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNoiseImageFilterPython.itkNoiseImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkNoiseImageFilterPython.itkNoiseImageFilterIUS2IUS2_Clone)
    InputHasNumericTraitsCheck = _itkNoiseImageFilterPython.itkNoiseImageFilterIUS2IUS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkNoiseImageFilterPython.delete_itkNoiseImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkNoiseImageFilterPython.itkNoiseImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkNoiseImageFilterIUS2IUS2

        Create a new object of the class itkNoiseImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNoiseImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNoiseImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNoiseImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNoiseImageFilterIUS2IUS2 in _itkNoiseImageFilterPython:
_itkNoiseImageFilterPython.itkNoiseImageFilterIUS2IUS2_swigregister(itkNoiseImageFilterIUS2IUS2)
itkNoiseImageFilterIUS2IUS2___New_orig__ = _itkNoiseImageFilterPython.itkNoiseImageFilterIUS2IUS2___New_orig__
itkNoiseImageFilterIUS2IUS2_cast = _itkNoiseImageFilterPython.itkNoiseImageFilterIUS2IUS2_cast


def itkNoiseImageFilterIUS3IUS3_New():
    return itkNoiseImageFilterIUS3IUS3.New()

class itkNoiseImageFilterIUS3IUS3(itk.itkBoxImageFilterPython.itkBoxImageFilterIUS3IUS3):
    r"""


    Calculate the local noise in an image.

    Computes an image where a given pixel is the standard deviation of the
    pixels in a neighborhood about the corresponding input pixel. This
    serves as an estimate of the local noise (or texture) in an image.
    Currently, this noise estimate assume a piecewise constant image. This
    filter should be extended to fitting a (hyper) plane to the
    neighborhood and calculating the standard deviation of the residuals
    to this (hyper) plane.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    {Filtering/ImageFilterBase/ComputerLocalNoise,Compute Local Noise In
    Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNoiseImageFilterPython.itkNoiseImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkNoiseImageFilterPython.itkNoiseImageFilterIUS3IUS3_Clone)
    InputHasNumericTraitsCheck = _itkNoiseImageFilterPython.itkNoiseImageFilterIUS3IUS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkNoiseImageFilterPython.delete_itkNoiseImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkNoiseImageFilterPython.itkNoiseImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkNoiseImageFilterIUS3IUS3

        Create a new object of the class itkNoiseImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNoiseImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNoiseImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNoiseImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNoiseImageFilterIUS3IUS3 in _itkNoiseImageFilterPython:
_itkNoiseImageFilterPython.itkNoiseImageFilterIUS3IUS3_swigregister(itkNoiseImageFilterIUS3IUS3)
itkNoiseImageFilterIUS3IUS3___New_orig__ = _itkNoiseImageFilterPython.itkNoiseImageFilterIUS3IUS3___New_orig__
itkNoiseImageFilterIUS3IUS3_cast = _itkNoiseImageFilterPython.itkNoiseImageFilterIUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def noise_image_filter(*args, **kwargs):
    """Procedural interface for NoiseImageFilter"""
    import itk
    instance = itk.NoiseImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def noise_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.NoiseImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.NoiseImageFilter.values()[0]
    else:
        filter_object = itk.NoiseImageFilter

    noise_image_filter.__doc__ = filter_object.__doc__
    noise_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    noise_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.NoiseImageFilter, itkTemplate.itkTemplate):
        noise_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        noise_image_filter.__doc__ += "\n"
        noise_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        noise_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



