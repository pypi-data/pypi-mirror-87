# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkInPlaceImageFilterAPython
else:
    import _itkInPlaceImageFilterAPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkInPlaceImageFilterAPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkInPlaceImageFilterAPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkImageToImageFilterAPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkVectorImagePython
import itk.stdcomplexPython
import itk.itkVariableLengthVectorPython
import itk.itkImagePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterBPython
class itkInPlaceImageFilterICVF22ICVF22(itk.itkImageToImageFilterAPython.itkImageToImageFilterICVF22ICVF22):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF22ICVF22_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF22ICVF22_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF22ICVF22_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF22ICVF22_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF22ICVF22_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterICVF22ICVF22
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF22ICVF22_cast)

# Register itkInPlaceImageFilterICVF22ICVF22 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF22ICVF22_swigregister(itkInPlaceImageFilterICVF22ICVF22)
itkInPlaceImageFilterICVF22ICVF22_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF22ICVF22_cast

class itkInPlaceImageFilterICVF22IVF22(itk.itkImageToImageFilterAPython.itkImageToImageFilterICVF22IVF22):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF22IVF22_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF22IVF22_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF22IVF22_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF22IVF22_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF22IVF22_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterICVF22IVF22
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF22IVF22_cast)

# Register itkInPlaceImageFilterICVF22IVF22 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF22IVF22_swigregister(itkInPlaceImageFilterICVF22IVF22)
itkInPlaceImageFilterICVF22IVF22_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF22IVF22_cast

class itkInPlaceImageFilterICVF23ICVF23(itk.itkImageToImageFilterAPython.itkImageToImageFilterICVF23ICVF23):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF23ICVF23_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF23ICVF23_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF23ICVF23_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF23ICVF23_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF23ICVF23_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterICVF23ICVF23
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF23ICVF23_cast)

# Register itkInPlaceImageFilterICVF23ICVF23 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF23ICVF23_swigregister(itkInPlaceImageFilterICVF23ICVF23)
itkInPlaceImageFilterICVF23ICVF23_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF23ICVF23_cast

class itkInPlaceImageFilterICVF23IVF23(itk.itkImageToImageFilterAPython.itkImageToImageFilterICVF23IVF23):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF23IVF23_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF23IVF23_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF23IVF23_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF23IVF23_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF23IVF23_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterICVF23IVF23
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF23IVF23_cast)

# Register itkInPlaceImageFilterICVF23IVF23 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF23IVF23_swigregister(itkInPlaceImageFilterICVF23IVF23)
itkInPlaceImageFilterICVF23IVF23_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF23IVF23_cast

class itkInPlaceImageFilterICVF32ICVF32(itk.itkImageToImageFilterAPython.itkImageToImageFilterICVF32ICVF32):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF32ICVF32_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF32ICVF32_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF32ICVF32_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF32ICVF32_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF32ICVF32_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterICVF32ICVF32
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF32ICVF32_cast)

# Register itkInPlaceImageFilterICVF32ICVF32 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF32ICVF32_swigregister(itkInPlaceImageFilterICVF32ICVF32)
itkInPlaceImageFilterICVF32ICVF32_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF32ICVF32_cast

class itkInPlaceImageFilterICVF32IVF32(itk.itkImageToImageFilterAPython.itkImageToImageFilterICVF32IVF32):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF32IVF32_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF32IVF32_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF32IVF32_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF32IVF32_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF32IVF32_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterICVF32IVF32
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF32IVF32_cast)

# Register itkInPlaceImageFilterICVF32IVF32 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF32IVF32_swigregister(itkInPlaceImageFilterICVF32IVF32)
itkInPlaceImageFilterICVF32IVF32_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF32IVF32_cast

class itkInPlaceImageFilterICVF33ICVF33(itk.itkImageToImageFilterAPython.itkImageToImageFilterICVF33ICVF33):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF33ICVF33_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF33ICVF33_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF33ICVF33_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF33ICVF33_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF33ICVF33_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterICVF33ICVF33
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF33ICVF33_cast)

# Register itkInPlaceImageFilterICVF33ICVF33 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF33ICVF33_swigregister(itkInPlaceImageFilterICVF33ICVF33)
itkInPlaceImageFilterICVF33ICVF33_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF33ICVF33_cast

class itkInPlaceImageFilterICVF33IVF33(itk.itkImageToImageFilterAPython.itkImageToImageFilterICVF33IVF33):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF33IVF33_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF33IVF33_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF33IVF33_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF33IVF33_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF33IVF33_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterICVF33IVF33
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF33IVF33_cast)

# Register itkInPlaceImageFilterICVF33IVF33 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF33IVF33_swigregister(itkInPlaceImageFilterICVF33IVF33)
itkInPlaceImageFilterICVF33IVF33_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF33IVF33_cast

class itkInPlaceImageFilterICVF42ICVF42(itk.itkImageToImageFilterAPython.itkImageToImageFilterICVF42ICVF42):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF42ICVF42_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF42ICVF42_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF42ICVF42_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF42ICVF42_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF42ICVF42_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterICVF42ICVF42
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF42ICVF42_cast)

# Register itkInPlaceImageFilterICVF42ICVF42 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF42ICVF42_swigregister(itkInPlaceImageFilterICVF42ICVF42)
itkInPlaceImageFilterICVF42ICVF42_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF42ICVF42_cast

class itkInPlaceImageFilterICVF42IVF42(itk.itkImageToImageFilterAPython.itkImageToImageFilterICVF42IVF42):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF42IVF42_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF42IVF42_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF42IVF42_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF42IVF42_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF42IVF42_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterICVF42IVF42
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF42IVF42_cast)

# Register itkInPlaceImageFilterICVF42IVF42 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF42IVF42_swigregister(itkInPlaceImageFilterICVF42IVF42)
itkInPlaceImageFilterICVF42IVF42_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF42IVF42_cast

class itkInPlaceImageFilterICVF43ICVF43(itk.itkImageToImageFilterAPython.itkImageToImageFilterICVF43ICVF43):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF43ICVF43_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF43ICVF43_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF43ICVF43_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF43ICVF43_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF43ICVF43_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterICVF43ICVF43
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF43ICVF43_cast)

# Register itkInPlaceImageFilterICVF43ICVF43 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF43ICVF43_swigregister(itkInPlaceImageFilterICVF43ICVF43)
itkInPlaceImageFilterICVF43ICVF43_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF43ICVF43_cast

class itkInPlaceImageFilterICVF43IVF43(itk.itkImageToImageFilterAPython.itkImageToImageFilterICVF43IVF43):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF43IVF43_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF43IVF43_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF43IVF43_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF43IVF43_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF43IVF43_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterICVF43IVF43
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF43IVF43_cast)

# Register itkInPlaceImageFilterICVF43IVF43 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF43IVF43_swigregister(itkInPlaceImageFilterICVF43IVF43)
itkInPlaceImageFilterICVF43IVF43_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterICVF43IVF43_cast

class itkInPlaceImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2ID2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2ID2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2ID2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2ID2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2ID2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterID2ID2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2ID2_cast)

# Register itkInPlaceImageFilterID2ID2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2ID2_swigregister(itkInPlaceImageFilterID2ID2)
itkInPlaceImageFilterID2ID2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2ID2_cast

class itkInPlaceImageFilterID2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2IF2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IF2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IF2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IF2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IF2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IF2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterID2IF2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IF2_cast)

# Register itkInPlaceImageFilterID2IF2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IF2_swigregister(itkInPlaceImageFilterID2IF2)
itkInPlaceImageFilterID2IF2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IF2_cast

class itkInPlaceImageFilterID2IRGBAUC2(itk.itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBAUC2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IRGBAUC2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IRGBAUC2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IRGBAUC2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IRGBAUC2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IRGBAUC2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterID2IRGBAUC2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IRGBAUC2_cast)

# Register itkInPlaceImageFilterID2IRGBAUC2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IRGBAUC2_swigregister(itkInPlaceImageFilterID2IRGBAUC2)
itkInPlaceImageFilterID2IRGBAUC2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IRGBAUC2_cast

class itkInPlaceImageFilterID2IRGBUC2(itk.itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBUC2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IRGBUC2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IRGBUC2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IRGBUC2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IRGBUC2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IRGBUC2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterID2IRGBUC2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IRGBUC2_cast)

# Register itkInPlaceImageFilterID2IRGBUC2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IRGBUC2_swigregister(itkInPlaceImageFilterID2IRGBUC2)
itkInPlaceImageFilterID2IRGBUC2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IRGBUC2_cast

class itkInPlaceImageFilterID2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ISS2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2ISS2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2ISS2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2ISS2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2ISS2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2ISS2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterID2ISS2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2ISS2_cast)

# Register itkInPlaceImageFilterID2ISS2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2ISS2_swigregister(itkInPlaceImageFilterID2ISS2)
itkInPlaceImageFilterID2ISS2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2ISS2_cast

class itkInPlaceImageFilterID2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2IUC2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IUC2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IUC2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IUC2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IUC2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IUC2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterID2IUC2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IUC2_cast)

# Register itkInPlaceImageFilterID2IUC2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IUC2_swigregister(itkInPlaceImageFilterID2IUC2)
itkInPlaceImageFilterID2IUC2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IUC2_cast

class itkInPlaceImageFilterID2IUL2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2IUL2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IUL2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IUL2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IUL2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IUL2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IUL2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterID2IUL2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IUL2_cast)

# Register itkInPlaceImageFilterID2IUL2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IUL2_swigregister(itkInPlaceImageFilterID2IUL2)
itkInPlaceImageFilterID2IUL2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IUL2_cast

class itkInPlaceImageFilterID2IULL2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2IULL2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IULL2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IULL2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IULL2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IULL2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IULL2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterID2IULL2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IULL2_cast)

# Register itkInPlaceImageFilterID2IULL2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IULL2_swigregister(itkInPlaceImageFilterID2IULL2)
itkInPlaceImageFilterID2IULL2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IULL2_cast

class itkInPlaceImageFilterID2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2IUS2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IUS2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IUS2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IUS2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IUS2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IUS2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterID2IUS2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IUS2_cast)

# Register itkInPlaceImageFilterID2IUS2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IUS2_swigregister(itkInPlaceImageFilterID2IUS2)
itkInPlaceImageFilterID2IUS2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IUS2_cast

class itkInPlaceImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterID3ID3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3_cast)

# Register itkInPlaceImageFilterID3ID3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3_swigregister(itkInPlaceImageFilterID3ID3)
itkInPlaceImageFilterID3ID3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3_cast

class itkInPlaceImageFilterID3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3IF3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IF3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IF3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IF3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IF3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IF3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterID3IF3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IF3_cast)

# Register itkInPlaceImageFilterID3IF3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IF3_swigregister(itkInPlaceImageFilterID3IF3)
itkInPlaceImageFilterID3IF3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IF3_cast

class itkInPlaceImageFilterID3IRGBAUC3(itk.itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBAUC3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IRGBAUC3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IRGBAUC3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IRGBAUC3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IRGBAUC3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IRGBAUC3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterID3IRGBAUC3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IRGBAUC3_cast)

# Register itkInPlaceImageFilterID3IRGBAUC3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IRGBAUC3_swigregister(itkInPlaceImageFilterID3IRGBAUC3)
itkInPlaceImageFilterID3IRGBAUC3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IRGBAUC3_cast

class itkInPlaceImageFilterID3IRGBUC3(itk.itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBUC3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IRGBUC3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IRGBUC3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IRGBUC3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IRGBUC3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IRGBUC3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterID3IRGBUC3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IRGBUC3_cast)

# Register itkInPlaceImageFilterID3IRGBUC3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IRGBUC3_swigregister(itkInPlaceImageFilterID3IRGBUC3)
itkInPlaceImageFilterID3IRGBUC3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IRGBUC3_cast

class itkInPlaceImageFilterID3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ISS3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ISS3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ISS3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ISS3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ISS3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ISS3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterID3ISS3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ISS3_cast)

# Register itkInPlaceImageFilterID3ISS3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ISS3_swigregister(itkInPlaceImageFilterID3ISS3)
itkInPlaceImageFilterID3ISS3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ISS3_cast

class itkInPlaceImageFilterID3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3IUC3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IUC3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IUC3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IUC3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IUC3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IUC3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterID3IUC3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IUC3_cast)

# Register itkInPlaceImageFilterID3IUC3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IUC3_swigregister(itkInPlaceImageFilterID3IUC3)
itkInPlaceImageFilterID3IUC3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IUC3_cast

class itkInPlaceImageFilterID3IUL3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3IUL3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IUL3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IUL3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IUL3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IUL3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IUL3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterID3IUL3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IUL3_cast)

# Register itkInPlaceImageFilterID3IUL3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IUL3_swigregister(itkInPlaceImageFilterID3IUL3)
itkInPlaceImageFilterID3IUL3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IUL3_cast

class itkInPlaceImageFilterID3IULL3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3IULL3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IULL3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IULL3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IULL3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IULL3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IULL3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterID3IULL3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IULL3_cast)

# Register itkInPlaceImageFilterID3IULL3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IULL3_swigregister(itkInPlaceImageFilterID3IULL3)
itkInPlaceImageFilterID3IULL3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IULL3_cast

class itkInPlaceImageFilterID3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3IUS3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IUS3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IUS3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IUS3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IUS3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IUS3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterID3IUS3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IUS3_cast)

# Register itkInPlaceImageFilterID3IUS3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IUS3_swigregister(itkInPlaceImageFilterID3IUS3)
itkInPlaceImageFilterID3IUS3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IUS3_cast

class itkInPlaceImageFilterIF2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2ID2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2ID2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2ID2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2ID2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2ID2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2ID2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIF2ID2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2ID2_cast)

# Register itkInPlaceImageFilterIF2ID2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2ID2_swigregister(itkInPlaceImageFilterIF2ID2)
itkInPlaceImageFilterIF2ID2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2ID2_cast

class itkInPlaceImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IF2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IF2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IF2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IF2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IF2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIF2IF2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IF2_cast)

# Register itkInPlaceImageFilterIF2IF2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IF2_swigregister(itkInPlaceImageFilterIF2IF2)
itkInPlaceImageFilterIF2IF2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IF2_cast

class itkInPlaceImageFilterIF2IRGBAUC2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBAUC2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IRGBAUC2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IRGBAUC2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IRGBAUC2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IRGBAUC2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IRGBAUC2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIF2IRGBAUC2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IRGBAUC2_cast)

# Register itkInPlaceImageFilterIF2IRGBAUC2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IRGBAUC2_swigregister(itkInPlaceImageFilterIF2IRGBAUC2)
itkInPlaceImageFilterIF2IRGBAUC2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IRGBAUC2_cast

class itkInPlaceImageFilterIF2IRGBUC2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBUC2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IRGBUC2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IRGBUC2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IRGBUC2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IRGBUC2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IRGBUC2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIF2IRGBUC2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IRGBUC2_cast)

# Register itkInPlaceImageFilterIF2IRGBUC2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IRGBUC2_swigregister(itkInPlaceImageFilterIF2IRGBUC2)
itkInPlaceImageFilterIF2IRGBUC2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IRGBUC2_cast

class itkInPlaceImageFilterIF2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2ISS2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2ISS2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2ISS2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2ISS2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2ISS2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2ISS2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIF2ISS2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2ISS2_cast)

# Register itkInPlaceImageFilterIF2ISS2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2ISS2_swigregister(itkInPlaceImageFilterIF2ISS2)
itkInPlaceImageFilterIF2ISS2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2ISS2_cast

class itkInPlaceImageFilterIF2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IUC2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IUC2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IUC2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IUC2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IUC2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IUC2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIF2IUC2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IUC2_cast)

# Register itkInPlaceImageFilterIF2IUC2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IUC2_swigregister(itkInPlaceImageFilterIF2IUC2)
itkInPlaceImageFilterIF2IUC2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IUC2_cast

class itkInPlaceImageFilterIF2IUL2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IUL2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IUL2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IUL2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IUL2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IUL2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IUL2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIF2IUL2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IUL2_cast)

# Register itkInPlaceImageFilterIF2IUL2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IUL2_swigregister(itkInPlaceImageFilterIF2IUL2)
itkInPlaceImageFilterIF2IUL2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IUL2_cast

class itkInPlaceImageFilterIF2IULL2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IULL2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IULL2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IULL2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IULL2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IULL2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IULL2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIF2IULL2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IULL2_cast)

# Register itkInPlaceImageFilterIF2IULL2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IULL2_swigregister(itkInPlaceImageFilterIF2IULL2)
itkInPlaceImageFilterIF2IULL2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IULL2_cast

class itkInPlaceImageFilterIF2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IUS2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IUS2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IUS2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IUS2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IUS2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IUS2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIF2IUS2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IUS2_cast)

# Register itkInPlaceImageFilterIF2IUS2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IUS2_swigregister(itkInPlaceImageFilterIF2IUS2)
itkInPlaceImageFilterIF2IUS2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IUS2_cast

class itkInPlaceImageFilterIF3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3ID3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3ID3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3ID3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3ID3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3ID3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3ID3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIF3ID3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3ID3_cast)

# Register itkInPlaceImageFilterIF3ID3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3ID3_swigregister(itkInPlaceImageFilterIF3ID3)
itkInPlaceImageFilterIF3ID3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3ID3_cast

class itkInPlaceImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIF3IF3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3_cast)

# Register itkInPlaceImageFilterIF3IF3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3_swigregister(itkInPlaceImageFilterIF3IF3)
itkInPlaceImageFilterIF3IF3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3_cast

class itkInPlaceImageFilterIF3IRGBAUC3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBAUC3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IRGBAUC3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IRGBAUC3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IRGBAUC3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IRGBAUC3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IRGBAUC3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIF3IRGBAUC3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IRGBAUC3_cast)

# Register itkInPlaceImageFilterIF3IRGBAUC3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IRGBAUC3_swigregister(itkInPlaceImageFilterIF3IRGBAUC3)
itkInPlaceImageFilterIF3IRGBAUC3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IRGBAUC3_cast

class itkInPlaceImageFilterIF3IRGBUC3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBUC3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IRGBUC3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IRGBUC3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IRGBUC3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IRGBUC3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IRGBUC3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIF3IRGBUC3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IRGBUC3_cast)

# Register itkInPlaceImageFilterIF3IRGBUC3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IRGBUC3_swigregister(itkInPlaceImageFilterIF3IRGBUC3)
itkInPlaceImageFilterIF3IRGBUC3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IRGBUC3_cast

class itkInPlaceImageFilterIF3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3ISS3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3ISS3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3ISS3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3ISS3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3ISS3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3ISS3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIF3ISS3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3ISS3_cast)

# Register itkInPlaceImageFilterIF3ISS3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3ISS3_swigregister(itkInPlaceImageFilterIF3ISS3)
itkInPlaceImageFilterIF3ISS3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3ISS3_cast

class itkInPlaceImageFilterIF3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IUC3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IUC3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IUC3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IUC3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IUC3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IUC3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIF3IUC3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IUC3_cast)

# Register itkInPlaceImageFilterIF3IUC3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IUC3_swigregister(itkInPlaceImageFilterIF3IUC3)
itkInPlaceImageFilterIF3IUC3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IUC3_cast

class itkInPlaceImageFilterIF3IUL3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IUL3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IUL3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IUL3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IUL3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IUL3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IUL3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIF3IUL3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IUL3_cast)

# Register itkInPlaceImageFilterIF3IUL3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IUL3_swigregister(itkInPlaceImageFilterIF3IUL3)
itkInPlaceImageFilterIF3IUL3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IUL3_cast

class itkInPlaceImageFilterIF3IULL3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IULL3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IULL3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IULL3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IULL3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IULL3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IULL3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIF3IULL3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IULL3_cast)

# Register itkInPlaceImageFilterIF3IULL3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IULL3_swigregister(itkInPlaceImageFilterIF3IULL3)
itkInPlaceImageFilterIF3IULL3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IULL3_cast

class itkInPlaceImageFilterIF3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IUS3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IUS3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IUS3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IUS3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IUS3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IUS3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIF3IUS3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IUS3_cast)

# Register itkInPlaceImageFilterIF3IUS3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IUS3_swigregister(itkInPlaceImageFilterIF3IUS3)
itkInPlaceImageFilterIF3IUS3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IUS3_cast

class itkInPlaceImageFilterIRGBAUC2IRGBAUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIRGBAUC2IRGBAUC2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBAUC2IRGBAUC2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBAUC2IRGBAUC2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBAUC2IRGBAUC2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBAUC2IRGBAUC2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBAUC2IRGBAUC2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIRGBAUC2IRGBAUC2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBAUC2IRGBAUC2_cast)

# Register itkInPlaceImageFilterIRGBAUC2IRGBAUC2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBAUC2IRGBAUC2_swigregister(itkInPlaceImageFilterIRGBAUC2IRGBAUC2)
itkInPlaceImageFilterIRGBAUC2IRGBAUC2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBAUC2IRGBAUC2_cast

class itkInPlaceImageFilterIRGBAUC2IUC2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUC2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBAUC2IUC2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBAUC2IUC2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBAUC2IUC2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBAUC2IUC2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBAUC2IUC2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIRGBAUC2IUC2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBAUC2IUC2_cast)

# Register itkInPlaceImageFilterIRGBAUC2IUC2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBAUC2IUC2_swigregister(itkInPlaceImageFilterIRGBAUC2IUC2)
itkInPlaceImageFilterIRGBAUC2IUC2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBAUC2IUC2_cast

class itkInPlaceImageFilterIRGBAUC3IRGBAUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIRGBAUC3IRGBAUC3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBAUC3IRGBAUC3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBAUC3IRGBAUC3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBAUC3IRGBAUC3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBAUC3IRGBAUC3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBAUC3IRGBAUC3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIRGBAUC3IRGBAUC3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBAUC3IRGBAUC3_cast)

# Register itkInPlaceImageFilterIRGBAUC3IRGBAUC3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBAUC3IRGBAUC3_swigregister(itkInPlaceImageFilterIRGBAUC3IRGBAUC3)
itkInPlaceImageFilterIRGBAUC3IRGBAUC3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBAUC3IRGBAUC3_cast

class itkInPlaceImageFilterIRGBAUC3IUC3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUC3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBAUC3IUC3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBAUC3IUC3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBAUC3IUC3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBAUC3IUC3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBAUC3IUC3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIRGBAUC3IUC3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBAUC3IUC3_cast)

# Register itkInPlaceImageFilterIRGBAUC3IUC3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBAUC3IUC3_swigregister(itkInPlaceImageFilterIRGBAUC3IUC3)
itkInPlaceImageFilterIRGBAUC3IUC3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBAUC3IUC3_cast

class itkInPlaceImageFilterIRGBUC2IRGBUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIRGBUC2IRGBUC2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBUC2IRGBUC2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBUC2IRGBUC2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBUC2IRGBUC2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBUC2IRGBUC2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBUC2IRGBUC2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIRGBUC2IRGBUC2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBUC2IRGBUC2_cast)

# Register itkInPlaceImageFilterIRGBUC2IRGBUC2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBUC2IRGBUC2_swigregister(itkInPlaceImageFilterIRGBUC2IRGBUC2)
itkInPlaceImageFilterIRGBUC2IRGBUC2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBUC2IRGBUC2_cast

class itkInPlaceImageFilterIRGBUC3IRGBUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIRGBUC3IRGBUC3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBUC3IRGBUC3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBUC3IRGBUC3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBUC3IRGBUC3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBUC3IRGBUC3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBUC3IRGBUC3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIRGBUC3IRGBUC3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBUC3IRGBUC3_cast)

# Register itkInPlaceImageFilterIRGBUC3IRGBUC3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBUC3IRGBUC3_swigregister(itkInPlaceImageFilterIRGBUC3IRGBUC3)
itkInPlaceImageFilterIRGBUC3IRGBUC3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBUC3IRGBUC3_cast

class itkInPlaceImageFilterISS2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ID2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2ID2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2ID2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2ID2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2ID2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2ID2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterISS2ID2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2ID2_cast)

# Register itkInPlaceImageFilterISS2ID2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2ID2_swigregister(itkInPlaceImageFilterISS2ID2)
itkInPlaceImageFilterISS2ID2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2ID2_cast

class itkInPlaceImageFilterISS2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2IF2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IF2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IF2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IF2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IF2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IF2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterISS2IF2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IF2_cast)

# Register itkInPlaceImageFilterISS2IF2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IF2_swigregister(itkInPlaceImageFilterISS2IF2)
itkInPlaceImageFilterISS2IF2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IF2_cast

class itkInPlaceImageFilterISS2IRGBAUC2(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBAUC2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IRGBAUC2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IRGBAUC2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IRGBAUC2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IRGBAUC2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IRGBAUC2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterISS2IRGBAUC2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IRGBAUC2_cast)

# Register itkInPlaceImageFilterISS2IRGBAUC2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IRGBAUC2_swigregister(itkInPlaceImageFilterISS2IRGBAUC2)
itkInPlaceImageFilterISS2IRGBAUC2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IRGBAUC2_cast

class itkInPlaceImageFilterISS2IRGBUC2(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBUC2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IRGBUC2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IRGBUC2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IRGBUC2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IRGBUC2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IRGBUC2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterISS2IRGBUC2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IRGBUC2_cast)

# Register itkInPlaceImageFilterISS2IRGBUC2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IRGBUC2_swigregister(itkInPlaceImageFilterISS2IRGBUC2)
itkInPlaceImageFilterISS2IRGBUC2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IRGBUC2_cast

class itkInPlaceImageFilterISS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2ISS2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2ISS2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2ISS2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2ISS2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2ISS2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2ISS2_cast)

# Register itkInPlaceImageFilterISS2ISS2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2ISS2_swigregister(itkInPlaceImageFilterISS2ISS2)
itkInPlaceImageFilterISS2ISS2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2ISS2_cast

class itkInPlaceImageFilterISS2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2IUC2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IUC2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IUC2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IUC2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IUC2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IUC2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterISS2IUC2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IUC2_cast)

# Register itkInPlaceImageFilterISS2IUC2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IUC2_swigregister(itkInPlaceImageFilterISS2IUC2)
itkInPlaceImageFilterISS2IUC2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IUC2_cast

class itkInPlaceImageFilterISS2IUL2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2IUL2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IUL2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IUL2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IUL2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IUL2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IUL2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterISS2IUL2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IUL2_cast)

# Register itkInPlaceImageFilterISS2IUL2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IUL2_swigregister(itkInPlaceImageFilterISS2IUL2)
itkInPlaceImageFilterISS2IUL2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IUL2_cast

class itkInPlaceImageFilterISS2IULL2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2IULL2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IULL2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IULL2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IULL2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IULL2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IULL2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterISS2IULL2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IULL2_cast)

# Register itkInPlaceImageFilterISS2IULL2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IULL2_swigregister(itkInPlaceImageFilterISS2IULL2)
itkInPlaceImageFilterISS2IULL2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IULL2_cast

class itkInPlaceImageFilterISS2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2IUS2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IUS2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IUS2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IUS2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IUS2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IUS2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterISS2IUS2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IUS2_cast)

# Register itkInPlaceImageFilterISS2IUS2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IUS2_swigregister(itkInPlaceImageFilterISS2IUS2)
itkInPlaceImageFilterISS2IUS2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IUS2_cast

class itkInPlaceImageFilterISS3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ID3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3ID3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3ID3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3ID3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3ID3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3ID3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterISS3ID3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3ID3_cast)

# Register itkInPlaceImageFilterISS3ID3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3ID3_swigregister(itkInPlaceImageFilterISS3ID3)
itkInPlaceImageFilterISS3ID3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3ID3_cast

class itkInPlaceImageFilterISS3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3IF3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IF3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IF3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IF3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IF3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IF3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterISS3IF3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IF3_cast)

# Register itkInPlaceImageFilterISS3IF3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IF3_swigregister(itkInPlaceImageFilterISS3IF3)
itkInPlaceImageFilterISS3IF3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IF3_cast

class itkInPlaceImageFilterISS3IRGBAUC3(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBAUC3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IRGBAUC3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IRGBAUC3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IRGBAUC3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IRGBAUC3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IRGBAUC3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterISS3IRGBAUC3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IRGBAUC3_cast)

# Register itkInPlaceImageFilterISS3IRGBAUC3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IRGBAUC3_swigregister(itkInPlaceImageFilterISS3IRGBAUC3)
itkInPlaceImageFilterISS3IRGBAUC3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IRGBAUC3_cast

class itkInPlaceImageFilterISS3IRGBUC3(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBUC3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IRGBUC3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IRGBUC3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IRGBUC3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IRGBUC3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IRGBUC3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterISS3IRGBUC3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IRGBUC3_cast)

# Register itkInPlaceImageFilterISS3IRGBUC3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IRGBUC3_swigregister(itkInPlaceImageFilterISS3IRGBUC3)
itkInPlaceImageFilterISS3IRGBUC3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IRGBUC3_cast

class itkInPlaceImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3ISS3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3ISS3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3ISS3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3ISS3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3ISS3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3ISS3_cast)

# Register itkInPlaceImageFilterISS3ISS3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3ISS3_swigregister(itkInPlaceImageFilterISS3ISS3)
itkInPlaceImageFilterISS3ISS3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3ISS3_cast

class itkInPlaceImageFilterISS3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3IUC3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IUC3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IUC3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IUC3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IUC3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IUC3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterISS3IUC3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IUC3_cast)

# Register itkInPlaceImageFilterISS3IUC3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IUC3_swigregister(itkInPlaceImageFilterISS3IUC3)
itkInPlaceImageFilterISS3IUC3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IUC3_cast

class itkInPlaceImageFilterISS3IUL3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3IUL3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IUL3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IUL3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IUL3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IUL3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IUL3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterISS3IUL3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IUL3_cast)

# Register itkInPlaceImageFilterISS3IUL3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IUL3_swigregister(itkInPlaceImageFilterISS3IUL3)
itkInPlaceImageFilterISS3IUL3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IUL3_cast

class itkInPlaceImageFilterISS3IULL3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3IULL3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IULL3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IULL3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IULL3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IULL3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IULL3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterISS3IULL3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IULL3_cast)

# Register itkInPlaceImageFilterISS3IULL3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IULL3_swigregister(itkInPlaceImageFilterISS3IULL3)
itkInPlaceImageFilterISS3IULL3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IULL3_cast

class itkInPlaceImageFilterISS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3IUS3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IUS3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IUS3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IUS3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IUS3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IUS3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterISS3IUS3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IUS3_cast)

# Register itkInPlaceImageFilterISS3IUS3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IUS3_swigregister(itkInPlaceImageFilterISS3IUS3)
itkInPlaceImageFilterISS3IUS3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IUS3_cast

class itkInPlaceImageFilterIUC2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2ID2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2ID2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2ID2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2ID2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2ID2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2ID2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUC2ID2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2ID2_cast)

# Register itkInPlaceImageFilterIUC2ID2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2ID2_swigregister(itkInPlaceImageFilterIUC2ID2)
itkInPlaceImageFilterIUC2ID2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2ID2_cast

class itkInPlaceImageFilterIUC2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IF2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IF2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IF2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IF2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IF2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IF2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUC2IF2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IF2_cast)

# Register itkInPlaceImageFilterIUC2IF2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IF2_swigregister(itkInPlaceImageFilterIUC2IF2)
itkInPlaceImageFilterIUC2IF2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IF2_cast

class itkInPlaceImageFilterIUC2IRGBAUC2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBAUC2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IRGBAUC2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IRGBAUC2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IRGBAUC2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IRGBAUC2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IRGBAUC2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUC2IRGBAUC2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IRGBAUC2_cast)

# Register itkInPlaceImageFilterIUC2IRGBAUC2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IRGBAUC2_swigregister(itkInPlaceImageFilterIUC2IRGBAUC2)
itkInPlaceImageFilterIUC2IRGBAUC2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IRGBAUC2_cast

class itkInPlaceImageFilterIUC2IRGBUC2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBUC2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IRGBUC2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IRGBUC2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IRGBUC2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IRGBUC2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IRGBUC2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUC2IRGBUC2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IRGBUC2_cast)

# Register itkInPlaceImageFilterIUC2IRGBUC2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IRGBUC2_swigregister(itkInPlaceImageFilterIUC2IRGBUC2)
itkInPlaceImageFilterIUC2IRGBUC2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IRGBUC2_cast

class itkInPlaceImageFilterIUC2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2ISS2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2ISS2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2ISS2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2ISS2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2ISS2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2ISS2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUC2ISS2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2ISS2_cast)

# Register itkInPlaceImageFilterIUC2ISS2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2ISS2_swigregister(itkInPlaceImageFilterIUC2ISS2)
itkInPlaceImageFilterIUC2ISS2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2ISS2_cast

class itkInPlaceImageFilterIUC2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUC2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUC2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUC2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUC2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUC2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUC2_cast)

# Register itkInPlaceImageFilterIUC2IUC2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUC2_swigregister(itkInPlaceImageFilterIUC2IUC2)
itkInPlaceImageFilterIUC2IUC2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUC2_cast

class itkInPlaceImageFilterIUC2IUL2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUL2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUL2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUL2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUL2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUL2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUL2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUC2IUL2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUL2_cast)

# Register itkInPlaceImageFilterIUC2IUL2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUL2_swigregister(itkInPlaceImageFilterIUC2IUL2)
itkInPlaceImageFilterIUC2IUL2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUL2_cast

class itkInPlaceImageFilterIUC2IULL2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IULL2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IULL2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IULL2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IULL2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IULL2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IULL2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUC2IULL2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IULL2_cast)

# Register itkInPlaceImageFilterIUC2IULL2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IULL2_swigregister(itkInPlaceImageFilterIUC2IULL2)
itkInPlaceImageFilterIUC2IULL2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IULL2_cast

class itkInPlaceImageFilterIUC2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUS2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUS2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUS2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUS2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUS2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUS2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUC2IUS2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUS2_cast)

# Register itkInPlaceImageFilterIUC2IUS2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUS2_swigregister(itkInPlaceImageFilterIUC2IUS2)
itkInPlaceImageFilterIUC2IUS2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUS2_cast

class itkInPlaceImageFilterIUC3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3ID3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3ID3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3ID3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3ID3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3ID3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3ID3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUC3ID3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3ID3_cast)

# Register itkInPlaceImageFilterIUC3ID3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3ID3_swigregister(itkInPlaceImageFilterIUC3ID3)
itkInPlaceImageFilterIUC3ID3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3ID3_cast

class itkInPlaceImageFilterIUC3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IF3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IF3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IF3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IF3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IF3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IF3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUC3IF3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IF3_cast)

# Register itkInPlaceImageFilterIUC3IF3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IF3_swigregister(itkInPlaceImageFilterIUC3IF3)
itkInPlaceImageFilterIUC3IF3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IF3_cast

class itkInPlaceImageFilterIUC3IRGBAUC3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBAUC3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IRGBAUC3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IRGBAUC3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IRGBAUC3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IRGBAUC3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IRGBAUC3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUC3IRGBAUC3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IRGBAUC3_cast)

# Register itkInPlaceImageFilterIUC3IRGBAUC3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IRGBAUC3_swigregister(itkInPlaceImageFilterIUC3IRGBAUC3)
itkInPlaceImageFilterIUC3IRGBAUC3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IRGBAUC3_cast

class itkInPlaceImageFilterIUC3IRGBUC3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBUC3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IRGBUC3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IRGBUC3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IRGBUC3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IRGBUC3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IRGBUC3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUC3IRGBUC3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IRGBUC3_cast)

# Register itkInPlaceImageFilterIUC3IRGBUC3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IRGBUC3_swigregister(itkInPlaceImageFilterIUC3IRGBUC3)
itkInPlaceImageFilterIUC3IRGBUC3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IRGBUC3_cast

class itkInPlaceImageFilterIUC3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3ISS3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3ISS3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3ISS3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3ISS3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3ISS3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3ISS3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUC3ISS3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3ISS3_cast)

# Register itkInPlaceImageFilterIUC3ISS3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3ISS3_swigregister(itkInPlaceImageFilterIUC3ISS3)
itkInPlaceImageFilterIUC3ISS3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3ISS3_cast

class itkInPlaceImageFilterIUC3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUC3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUC3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUC3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUC3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUC3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUC3_cast)

# Register itkInPlaceImageFilterIUC3IUC3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUC3_swigregister(itkInPlaceImageFilterIUC3IUC3)
itkInPlaceImageFilterIUC3IUC3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUC3_cast

class itkInPlaceImageFilterIUC3IUL3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUL3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUL3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUL3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUL3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUL3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUL3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUC3IUL3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUL3_cast)

# Register itkInPlaceImageFilterIUC3IUL3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUL3_swigregister(itkInPlaceImageFilterIUC3IUL3)
itkInPlaceImageFilterIUC3IUL3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUL3_cast

class itkInPlaceImageFilterIUC3IULL3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IULL3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IULL3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IULL3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IULL3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IULL3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IULL3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUC3IULL3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IULL3_cast)

# Register itkInPlaceImageFilterIUC3IULL3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IULL3_swigregister(itkInPlaceImageFilterIUC3IULL3)
itkInPlaceImageFilterIUC3IULL3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IULL3_cast

class itkInPlaceImageFilterIUC3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUS3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUS3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUS3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUS3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUS3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUS3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUC3IUS3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUS3_cast)

# Register itkInPlaceImageFilterIUC3IUS3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUS3_swigregister(itkInPlaceImageFilterIUC3IUS3)
itkInPlaceImageFilterIUC3IUS3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUS3_cast

class itkInPlaceImageFilterIUL2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUL2ID2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2ID2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2ID2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2ID2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2ID2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2ID2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUL2ID2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2ID2_cast)

# Register itkInPlaceImageFilterIUL2ID2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2ID2_swigregister(itkInPlaceImageFilterIUL2ID2)
itkInPlaceImageFilterIUL2ID2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2ID2_cast

class itkInPlaceImageFilterIUL2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUL2IF2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IF2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IF2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IF2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IF2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IF2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUL2IF2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IF2_cast)

# Register itkInPlaceImageFilterIUL2IF2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IF2_swigregister(itkInPlaceImageFilterIUL2IF2)
itkInPlaceImageFilterIUL2IF2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IF2_cast

class itkInPlaceImageFilterIUL2IRGBAUC2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBAUC2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IRGBAUC2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IRGBAUC2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IRGBAUC2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IRGBAUC2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IRGBAUC2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUL2IRGBAUC2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IRGBAUC2_cast)

# Register itkInPlaceImageFilterIUL2IRGBAUC2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IRGBAUC2_swigregister(itkInPlaceImageFilterIUL2IRGBAUC2)
itkInPlaceImageFilterIUL2IRGBAUC2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IRGBAUC2_cast

class itkInPlaceImageFilterIUL2IRGBUC2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBUC2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IRGBUC2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IRGBUC2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IRGBUC2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IRGBUC2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IRGBUC2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUL2IRGBUC2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IRGBUC2_cast)

# Register itkInPlaceImageFilterIUL2IRGBUC2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IRGBUC2_swigregister(itkInPlaceImageFilterIUL2IRGBUC2)
itkInPlaceImageFilterIUL2IRGBUC2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IRGBUC2_cast

class itkInPlaceImageFilterIUL2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUL2ISS2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2ISS2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2ISS2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2ISS2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2ISS2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2ISS2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUL2ISS2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2ISS2_cast)

# Register itkInPlaceImageFilterIUL2ISS2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2ISS2_swigregister(itkInPlaceImageFilterIUL2ISS2)
itkInPlaceImageFilterIUL2ISS2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2ISS2_cast

class itkInPlaceImageFilterIUL2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUC2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IUC2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IUC2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IUC2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IUC2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IUC2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUL2IUC2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IUC2_cast)

# Register itkInPlaceImageFilterIUL2IUC2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IUC2_swigregister(itkInPlaceImageFilterIUL2IUC2)
itkInPlaceImageFilterIUL2IUC2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IUC2_cast

class itkInPlaceImageFilterIUL2IUL2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUL2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IUL2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IUL2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IUL2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IUL2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IUL2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUL2IUL2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IUL2_cast)

# Register itkInPlaceImageFilterIUL2IUL2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IUL2_swigregister(itkInPlaceImageFilterIUL2IUL2)
itkInPlaceImageFilterIUL2IUL2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IUL2_cast

class itkInPlaceImageFilterIUL2IULL2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUL2IULL2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IULL2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IULL2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IULL2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IULL2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IULL2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUL2IULL2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IULL2_cast)

# Register itkInPlaceImageFilterIUL2IULL2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IULL2_swigregister(itkInPlaceImageFilterIUL2IULL2)
itkInPlaceImageFilterIUL2IULL2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IULL2_cast

class itkInPlaceImageFilterIUL2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUS2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IUS2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IUS2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IUS2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IUS2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IUS2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUL2IUS2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IUS2_cast)

# Register itkInPlaceImageFilterIUL2IUS2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IUS2_swigregister(itkInPlaceImageFilterIUL2IUS2)
itkInPlaceImageFilterIUL2IUS2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IUS2_cast

class itkInPlaceImageFilterIUL3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUL3ID3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3ID3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3ID3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3ID3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3ID3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3ID3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUL3ID3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3ID3_cast)

# Register itkInPlaceImageFilterIUL3ID3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3ID3_swigregister(itkInPlaceImageFilterIUL3ID3)
itkInPlaceImageFilterIUL3ID3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3ID3_cast

class itkInPlaceImageFilterIUL3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUL3IF3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IF3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IF3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IF3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IF3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IF3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUL3IF3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IF3_cast)

# Register itkInPlaceImageFilterIUL3IF3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IF3_swigregister(itkInPlaceImageFilterIUL3IF3)
itkInPlaceImageFilterIUL3IF3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IF3_cast

class itkInPlaceImageFilterIUL3IRGBAUC3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBAUC3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IRGBAUC3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IRGBAUC3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IRGBAUC3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IRGBAUC3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IRGBAUC3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUL3IRGBAUC3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IRGBAUC3_cast)

# Register itkInPlaceImageFilterIUL3IRGBAUC3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IRGBAUC3_swigregister(itkInPlaceImageFilterIUL3IRGBAUC3)
itkInPlaceImageFilterIUL3IRGBAUC3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IRGBAUC3_cast

class itkInPlaceImageFilterIUL3IRGBUC3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBUC3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IRGBUC3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IRGBUC3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IRGBUC3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IRGBUC3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IRGBUC3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUL3IRGBUC3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IRGBUC3_cast)

# Register itkInPlaceImageFilterIUL3IRGBUC3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IRGBUC3_swigregister(itkInPlaceImageFilterIUL3IRGBUC3)
itkInPlaceImageFilterIUL3IRGBUC3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IRGBUC3_cast

class itkInPlaceImageFilterIUL3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUL3ISS3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3ISS3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3ISS3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3ISS3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3ISS3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3ISS3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUL3ISS3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3ISS3_cast)

# Register itkInPlaceImageFilterIUL3ISS3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3ISS3_swigregister(itkInPlaceImageFilterIUL3ISS3)
itkInPlaceImageFilterIUL3ISS3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3ISS3_cast

class itkInPlaceImageFilterIUL3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUC3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IUC3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IUC3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IUC3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IUC3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IUC3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUL3IUC3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IUC3_cast)

# Register itkInPlaceImageFilterIUL3IUC3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IUC3_swigregister(itkInPlaceImageFilterIUL3IUC3)
itkInPlaceImageFilterIUL3IUC3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IUC3_cast

class itkInPlaceImageFilterIUL3IUL3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUL3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IUL3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IUL3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IUL3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IUL3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IUL3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUL3IUL3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IUL3_cast)

# Register itkInPlaceImageFilterIUL3IUL3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IUL3_swigregister(itkInPlaceImageFilterIUL3IUL3)
itkInPlaceImageFilterIUL3IUL3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IUL3_cast

class itkInPlaceImageFilterIUL3IULL3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUL3IULL3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IULL3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IULL3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IULL3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IULL3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IULL3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUL3IULL3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IULL3_cast)

# Register itkInPlaceImageFilterIUL3IULL3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IULL3_swigregister(itkInPlaceImageFilterIUL3IULL3)
itkInPlaceImageFilterIUL3IULL3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IULL3_cast

class itkInPlaceImageFilterIUL3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUS3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IUS3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IUS3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IUS3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IUS3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IUS3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUL3IUS3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IUS3_cast)

# Register itkInPlaceImageFilterIUL3IUS3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IUS3_swigregister(itkInPlaceImageFilterIUL3IUS3)
itkInPlaceImageFilterIUL3IUS3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IUS3_cast

class itkInPlaceImageFilterIULL2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIULL2ID2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2ID2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2ID2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2ID2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2ID2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2ID2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIULL2ID2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2ID2_cast)

# Register itkInPlaceImageFilterIULL2ID2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2ID2_swigregister(itkInPlaceImageFilterIULL2ID2)
itkInPlaceImageFilterIULL2ID2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2ID2_cast

class itkInPlaceImageFilterIULL2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIULL2IF2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2IF2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2IF2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2IF2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2IF2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2IF2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIULL2IF2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2IF2_cast)

# Register itkInPlaceImageFilterIULL2IF2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2IF2_swigregister(itkInPlaceImageFilterIULL2IF2)
itkInPlaceImageFilterIULL2IF2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2IF2_cast

class itkInPlaceImageFilterIULL2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIULL2ISS2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2ISS2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2ISS2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2ISS2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2ISS2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2ISS2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIULL2ISS2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2ISS2_cast)

# Register itkInPlaceImageFilterIULL2ISS2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2ISS2_swigregister(itkInPlaceImageFilterIULL2ISS2)
itkInPlaceImageFilterIULL2ISS2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2ISS2_cast

class itkInPlaceImageFilterIULL2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIULL2IUC2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2IUC2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2IUC2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2IUC2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2IUC2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2IUC2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIULL2IUC2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2IUC2_cast)

# Register itkInPlaceImageFilterIULL2IUC2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2IUC2_swigregister(itkInPlaceImageFilterIULL2IUC2)
itkInPlaceImageFilterIULL2IUC2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2IUC2_cast

class itkInPlaceImageFilterIULL2IUL2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIULL2IUL2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2IUL2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2IUL2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2IUL2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2IUL2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2IUL2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIULL2IUL2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2IUL2_cast)

# Register itkInPlaceImageFilterIULL2IUL2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2IUL2_swigregister(itkInPlaceImageFilterIULL2IUL2)
itkInPlaceImageFilterIULL2IUL2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2IUL2_cast

class itkInPlaceImageFilterIULL2IULL2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIULL2IULL2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2IULL2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2IULL2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2IULL2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2IULL2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2IULL2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIULL2IULL2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2IULL2_cast)

# Register itkInPlaceImageFilterIULL2IULL2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2IULL2_swigregister(itkInPlaceImageFilterIULL2IULL2)
itkInPlaceImageFilterIULL2IULL2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2IULL2_cast

class itkInPlaceImageFilterIULL2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIULL2IUS2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2IUS2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2IUS2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2IUS2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2IUS2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2IUS2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIULL2IUS2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2IUS2_cast)

# Register itkInPlaceImageFilterIULL2IUS2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2IUS2_swigregister(itkInPlaceImageFilterIULL2IUS2)
itkInPlaceImageFilterIULL2IUS2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL2IUS2_cast

class itkInPlaceImageFilterIULL3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIULL3ID3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3ID3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3ID3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3ID3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3ID3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3ID3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIULL3ID3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3ID3_cast)

# Register itkInPlaceImageFilterIULL3ID3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3ID3_swigregister(itkInPlaceImageFilterIULL3ID3)
itkInPlaceImageFilterIULL3ID3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3ID3_cast

class itkInPlaceImageFilterIULL3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIULL3IF3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3IF3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3IF3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3IF3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3IF3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3IF3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIULL3IF3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3IF3_cast)

# Register itkInPlaceImageFilterIULL3IF3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3IF3_swigregister(itkInPlaceImageFilterIULL3IF3)
itkInPlaceImageFilterIULL3IF3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3IF3_cast

class itkInPlaceImageFilterIULL3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIULL3ISS3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3ISS3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3ISS3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3ISS3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3ISS3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3ISS3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIULL3ISS3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3ISS3_cast)

# Register itkInPlaceImageFilterIULL3ISS3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3ISS3_swigregister(itkInPlaceImageFilterIULL3ISS3)
itkInPlaceImageFilterIULL3ISS3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3ISS3_cast

class itkInPlaceImageFilterIULL3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIULL3IUC3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3IUC3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3IUC3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3IUC3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3IUC3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3IUC3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIULL3IUC3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3IUC3_cast)

# Register itkInPlaceImageFilterIULL3IUC3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3IUC3_swigregister(itkInPlaceImageFilterIULL3IUC3)
itkInPlaceImageFilterIULL3IUC3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3IUC3_cast

class itkInPlaceImageFilterIULL3IUL3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIULL3IUL3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3IUL3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3IUL3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3IUL3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3IUL3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3IUL3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIULL3IUL3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3IUL3_cast)

# Register itkInPlaceImageFilterIULL3IUL3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3IUL3_swigregister(itkInPlaceImageFilterIULL3IUL3)
itkInPlaceImageFilterIULL3IUL3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3IUL3_cast

class itkInPlaceImageFilterIULL3IULL3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIULL3IULL3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3IULL3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3IULL3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3IULL3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3IULL3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3IULL3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIULL3IULL3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3IULL3_cast)

# Register itkInPlaceImageFilterIULL3IULL3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3IULL3_swigregister(itkInPlaceImageFilterIULL3IULL3)
itkInPlaceImageFilterIULL3IULL3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3IULL3_cast

class itkInPlaceImageFilterIULL3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIULL3IUS3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3IUS3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3IUS3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3IUS3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3IUS3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3IUS3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIULL3IUS3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3IUS3_cast)

# Register itkInPlaceImageFilterIULL3IUS3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3IUS3_swigregister(itkInPlaceImageFilterIULL3IUS3)
itkInPlaceImageFilterIULL3IUS3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIULL3IUS3_cast

class itkInPlaceImageFilterIUS2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2ID2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2ID2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2ID2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2ID2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2ID2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2ID2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUS2ID2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2ID2_cast)

# Register itkInPlaceImageFilterIUS2ID2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2ID2_swigregister(itkInPlaceImageFilterIUS2ID2)
itkInPlaceImageFilterIUS2ID2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2ID2_cast

class itkInPlaceImageFilterIUS2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IF2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IF2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IF2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IF2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IF2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IF2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUS2IF2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IF2_cast)

# Register itkInPlaceImageFilterIUS2IF2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IF2_swigregister(itkInPlaceImageFilterIUS2IF2)
itkInPlaceImageFilterIUS2IF2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IF2_cast

class itkInPlaceImageFilterIUS2IRGBAUC2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBAUC2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IRGBAUC2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IRGBAUC2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IRGBAUC2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IRGBAUC2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IRGBAUC2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUS2IRGBAUC2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IRGBAUC2_cast)

# Register itkInPlaceImageFilterIUS2IRGBAUC2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IRGBAUC2_swigregister(itkInPlaceImageFilterIUS2IRGBAUC2)
itkInPlaceImageFilterIUS2IRGBAUC2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IRGBAUC2_cast

class itkInPlaceImageFilterIUS2IRGBUC2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBUC2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IRGBUC2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IRGBUC2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IRGBUC2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IRGBUC2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IRGBUC2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUS2IRGBUC2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IRGBUC2_cast)

# Register itkInPlaceImageFilterIUS2IRGBUC2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IRGBUC2_swigregister(itkInPlaceImageFilterIUS2IRGBUC2)
itkInPlaceImageFilterIUS2IRGBUC2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IRGBUC2_cast

class itkInPlaceImageFilterIUS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2ISS2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2ISS2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2ISS2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2ISS2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2ISS2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2ISS2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUS2ISS2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2ISS2_cast)

# Register itkInPlaceImageFilterIUS2ISS2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2ISS2_swigregister(itkInPlaceImageFilterIUS2ISS2)
itkInPlaceImageFilterIUS2ISS2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2ISS2_cast

class itkInPlaceImageFilterIUS2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUC2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUC2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUC2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUC2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUC2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUC2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUS2IUC2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUC2_cast)

# Register itkInPlaceImageFilterIUS2IUC2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUC2_swigregister(itkInPlaceImageFilterIUS2IUC2)
itkInPlaceImageFilterIUS2IUC2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUC2_cast

class itkInPlaceImageFilterIUS2IUL2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUL2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUL2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUL2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUL2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUL2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUL2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUS2IUL2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUL2_cast)

# Register itkInPlaceImageFilterIUS2IUL2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUL2_swigregister(itkInPlaceImageFilterIUS2IUL2)
itkInPlaceImageFilterIUS2IUL2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUL2_cast

class itkInPlaceImageFilterIUS2IULL2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IULL2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IULL2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IULL2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IULL2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IULL2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IULL2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUS2IULL2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IULL2_cast)

# Register itkInPlaceImageFilterIUS2IULL2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IULL2_swigregister(itkInPlaceImageFilterIUS2IULL2)
itkInPlaceImageFilterIUS2IULL2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IULL2_cast

class itkInPlaceImageFilterIUS2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUS2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUS2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUS2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUS2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUS2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUS2_cast)

# Register itkInPlaceImageFilterIUS2IUS2 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUS2_swigregister(itkInPlaceImageFilterIUS2IUS2)
itkInPlaceImageFilterIUS2IUS2_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUS2_cast

class itkInPlaceImageFilterIUS3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3ID3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3ID3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3ID3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3ID3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3ID3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3ID3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUS3ID3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3ID3_cast)

# Register itkInPlaceImageFilterIUS3ID3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3ID3_swigregister(itkInPlaceImageFilterIUS3ID3)
itkInPlaceImageFilterIUS3ID3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3ID3_cast

class itkInPlaceImageFilterIUS3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IF3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IF3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IF3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IF3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IF3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IF3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUS3IF3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IF3_cast)

# Register itkInPlaceImageFilterIUS3IF3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IF3_swigregister(itkInPlaceImageFilterIUS3IF3)
itkInPlaceImageFilterIUS3IF3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IF3_cast

class itkInPlaceImageFilterIUS3IRGBAUC3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBAUC3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IRGBAUC3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IRGBAUC3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IRGBAUC3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IRGBAUC3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IRGBAUC3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUS3IRGBAUC3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IRGBAUC3_cast)

# Register itkInPlaceImageFilterIUS3IRGBAUC3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IRGBAUC3_swigregister(itkInPlaceImageFilterIUS3IRGBAUC3)
itkInPlaceImageFilterIUS3IRGBAUC3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IRGBAUC3_cast

class itkInPlaceImageFilterIUS3IRGBUC3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBUC3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IRGBUC3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IRGBUC3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IRGBUC3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IRGBUC3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IRGBUC3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUS3IRGBUC3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IRGBUC3_cast)

# Register itkInPlaceImageFilterIUS3IRGBUC3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IRGBUC3_swigregister(itkInPlaceImageFilterIUS3IRGBUC3)
itkInPlaceImageFilterIUS3IRGBUC3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IRGBUC3_cast

class itkInPlaceImageFilterIUS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3ISS3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3ISS3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3ISS3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3ISS3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3ISS3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3ISS3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUS3ISS3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3ISS3_cast)

# Register itkInPlaceImageFilterIUS3ISS3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3ISS3_swigregister(itkInPlaceImageFilterIUS3ISS3)
itkInPlaceImageFilterIUS3ISS3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3ISS3_cast

class itkInPlaceImageFilterIUS3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUC3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUC3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUC3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUC3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUC3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUC3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUS3IUC3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUC3_cast)

# Register itkInPlaceImageFilterIUS3IUC3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUC3_swigregister(itkInPlaceImageFilterIUS3IUC3)
itkInPlaceImageFilterIUS3IUC3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUC3_cast

class itkInPlaceImageFilterIUS3IUL3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUL3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUL3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUL3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUL3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUL3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUL3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUS3IUL3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUL3_cast)

# Register itkInPlaceImageFilterIUS3IUL3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUL3_swigregister(itkInPlaceImageFilterIUS3IUL3)
itkInPlaceImageFilterIUS3IUL3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUL3_cast

class itkInPlaceImageFilterIUS3IULL3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IULL3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IULL3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IULL3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IULL3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IULL3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IULL3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUS3IULL3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IULL3_cast)

# Register itkInPlaceImageFilterIUS3IULL3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IULL3_swigregister(itkInPlaceImageFilterIUS3IULL3)
itkInPlaceImageFilterIUS3IULL3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IULL3_cast

class itkInPlaceImageFilterIUS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUS3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUS3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUS3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUS3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUS3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUS3_cast)

# Register itkInPlaceImageFilterIUS3IUS3 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUS3_swigregister(itkInPlaceImageFilterIUS3IUS3)
itkInPlaceImageFilterIUS3IUS3_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUS3_cast

class itkInPlaceImageFilterIVF22ICVF22(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF22ICVF22):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF22ICVF22_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF22ICVF22_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF22ICVF22_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF22ICVF22_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF22ICVF22_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIVF22ICVF22
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF22ICVF22_cast)

# Register itkInPlaceImageFilterIVF22ICVF22 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF22ICVF22_swigregister(itkInPlaceImageFilterIVF22ICVF22)
itkInPlaceImageFilterIVF22ICVF22_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF22ICVF22_cast

class itkInPlaceImageFilterIVF22IVF22(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF22IVF22):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF22IVF22_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF22IVF22_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF22IVF22_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF22IVF22_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF22IVF22_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIVF22IVF22
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF22IVF22_cast)

# Register itkInPlaceImageFilterIVF22IVF22 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF22IVF22_swigregister(itkInPlaceImageFilterIVF22IVF22)
itkInPlaceImageFilterIVF22IVF22_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF22IVF22_cast

class itkInPlaceImageFilterIVF23ICVF23(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF23ICVF23):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF23ICVF23_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF23ICVF23_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF23ICVF23_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF23ICVF23_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF23ICVF23_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIVF23ICVF23
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF23ICVF23_cast)

# Register itkInPlaceImageFilterIVF23ICVF23 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF23ICVF23_swigregister(itkInPlaceImageFilterIVF23ICVF23)
itkInPlaceImageFilterIVF23ICVF23_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF23ICVF23_cast

class itkInPlaceImageFilterIVF23IVF23(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF23IVF23):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF23IVF23_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF23IVF23_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF23IVF23_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF23IVF23_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF23IVF23_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIVF23IVF23
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF23IVF23_cast)

# Register itkInPlaceImageFilterIVF23IVF23 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF23IVF23_swigregister(itkInPlaceImageFilterIVF23IVF23)
itkInPlaceImageFilterIVF23IVF23_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF23IVF23_cast

class itkInPlaceImageFilterIVF32ICVF32(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF32ICVF32):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF32ICVF32_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF32ICVF32_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF32ICVF32_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF32ICVF32_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF32ICVF32_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIVF32ICVF32
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF32ICVF32_cast)

# Register itkInPlaceImageFilterIVF32ICVF32 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF32ICVF32_swigregister(itkInPlaceImageFilterIVF32ICVF32)
itkInPlaceImageFilterIVF32ICVF32_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF32ICVF32_cast

class itkInPlaceImageFilterIVF32IVF32(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF32IVF32):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF32IVF32_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF32IVF32_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF32IVF32_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF32IVF32_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF32IVF32_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIVF32IVF32
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF32IVF32_cast)

# Register itkInPlaceImageFilterIVF32IVF32 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF32IVF32_swigregister(itkInPlaceImageFilterIVF32IVF32)
itkInPlaceImageFilterIVF32IVF32_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF32IVF32_cast

class itkInPlaceImageFilterIVF33ICVF33(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF33ICVF33):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF33ICVF33_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF33ICVF33_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF33ICVF33_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF33ICVF33_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF33ICVF33_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIVF33ICVF33
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF33ICVF33_cast)

# Register itkInPlaceImageFilterIVF33ICVF33 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF33ICVF33_swigregister(itkInPlaceImageFilterIVF33ICVF33)
itkInPlaceImageFilterIVF33ICVF33_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF33ICVF33_cast

class itkInPlaceImageFilterIVF33IVF33(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF33IVF33):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF33IVF33_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF33IVF33_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF33IVF33_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF33IVF33_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF33IVF33_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIVF33IVF33
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF33IVF33_cast)

# Register itkInPlaceImageFilterIVF33IVF33 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF33IVF33_swigregister(itkInPlaceImageFilterIVF33IVF33)
itkInPlaceImageFilterIVF33IVF33_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF33IVF33_cast

class itkInPlaceImageFilterIVF42ICVF42(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF42ICVF42):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF42ICVF42_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF42ICVF42_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF42ICVF42_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF42ICVF42_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF42ICVF42_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIVF42ICVF42
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF42ICVF42_cast)

# Register itkInPlaceImageFilterIVF42ICVF42 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF42ICVF42_swigregister(itkInPlaceImageFilterIVF42ICVF42)
itkInPlaceImageFilterIVF42ICVF42_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF42ICVF42_cast

class itkInPlaceImageFilterIVF42IVF42(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF42IVF42):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF42IVF42_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF42IVF42_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF42IVF42_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF42IVF42_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF42IVF42_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIVF42IVF42
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF42IVF42_cast)

# Register itkInPlaceImageFilterIVF42IVF42 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF42IVF42_swigregister(itkInPlaceImageFilterIVF42IVF42)
itkInPlaceImageFilterIVF42IVF42_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF42IVF42_cast

class itkInPlaceImageFilterIVF43ICVF43(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF43ICVF43):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF43ICVF43_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF43ICVF43_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF43ICVF43_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF43ICVF43_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF43ICVF43_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIVF43ICVF43
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF43ICVF43_cast)

# Register itkInPlaceImageFilterIVF43ICVF43 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF43ICVF43_swigregister(itkInPlaceImageFilterIVF43ICVF43)
itkInPlaceImageFilterIVF43ICVF43_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF43ICVF43_cast

class itkInPlaceImageFilterIVF43IVF43(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF43IVF43):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    {Core/Common/FilterImageWithoutCopying,Filter Image Without Copying
    Its Data} {Core/Common/InPlaceFilterOfImage,In Place Filter Of Image}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF43IVF43_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF43IVF43_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF43IVF43_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF43IVF43_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF43IVF43_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterAPython.delete_itkInPlaceImageFilterIVF43IVF43
    cast = _swig_new_static_method(_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF43IVF43_cast)

# Register itkInPlaceImageFilterIVF43IVF43 in _itkInPlaceImageFilterAPython:
_itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF43IVF43_swigregister(itkInPlaceImageFilterIVF43IVF43)
itkInPlaceImageFilterIVF43IVF43_cast = _itkInPlaceImageFilterAPython.itkInPlaceImageFilterIVF43IVF43_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def in_place_image_filter(*args, **kwargs):
    """Procedural interface for InPlaceImageFilter"""
    import itk
    instance = itk.InPlaceImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def in_place_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.InPlaceImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.InPlaceImageFilter.values()[0]
    else:
        filter_object = itk.InPlaceImageFilter

    in_place_image_filter.__doc__ = filter_object.__doc__
    in_place_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    in_place_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.InPlaceImageFilter, itkTemplate.itkTemplate):
        in_place_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        in_place_image_filter.__doc__ += "\n"
        in_place_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        in_place_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



