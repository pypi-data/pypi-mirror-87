# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKOptimizersPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ITKCostFunctionsPython
else:
    import _ITKCostFunctionsPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _ITKCostFunctionsPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _ITKCostFunctionsPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.vnl_matrixPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_cost_functionPython
import itk.vnl_unary_functionPython
import itk.itkArrayPython
import itk.itkCostFunctionPython
import itk.ITKCommonBasePython
import itk.vnl_least_squares_functionPython
import itk.itkArray2DPython
import itk.itkOptimizerParametersPython
class itkMultipleValuedCostFunction(itk.itkCostFunctionPython.itkCostFunctionTemplateD):
    r"""


    This class is a base for the CostFunctions returning a multiple
    values. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetValue = _swig_new_instance_method(_ITKCostFunctionsPython.itkMultipleValuedCostFunction_GetValue)
    GetNumberOfValues = _swig_new_instance_method(_ITKCostFunctionsPython.itkMultipleValuedCostFunction_GetNumberOfValues)
    GetDerivative = _swig_new_instance_method(_ITKCostFunctionsPython.itkMultipleValuedCostFunction_GetDerivative)
    __swig_destroy__ = _ITKCostFunctionsPython.delete_itkMultipleValuedCostFunction
    cast = _swig_new_static_method(_ITKCostFunctionsPython.itkMultipleValuedCostFunction_cast)

# Register itkMultipleValuedCostFunction in _ITKCostFunctionsPython:
_ITKCostFunctionsPython.itkMultipleValuedCostFunction_swigregister(itkMultipleValuedCostFunction)
itkMultipleValuedCostFunction_cast = _ITKCostFunctionsPython.itkMultipleValuedCostFunction_cast

class itkMultipleValuedVnlCostFunctionAdaptor(itk.vnl_least_squares_functionPython.vnl_least_squares_function):
    r"""


    This class is an Adaptor that allows to pass
    itk::MultipleValuedCostFunctions to vnl_optimizers expecting a
    vnl_cost_function.

    This class returns a single valued. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SetCostFunction = _swig_new_instance_method(_ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_SetCostFunction)
    GetCostFunction = _swig_new_instance_method(_ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_GetCostFunction)
    compute = _swig_new_instance_method(_ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_compute)
    ConvertExternalToInternalGradient = _swig_new_instance_method(_ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_ConvertExternalToInternalGradient)
    ConvertExternalToInternalMeasures = _swig_new_instance_method(_ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_ConvertExternalToInternalMeasures)
    SetUseGradient = _swig_new_instance_method(_ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_SetUseGradient)
    UseGradientOn = _swig_new_instance_method(_ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_UseGradientOn)
    UseGradientOff = _swig_new_instance_method(_ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_UseGradientOff)
    GetUseGradient = _swig_new_instance_method(_ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_GetUseGradient)
    SetScales = _swig_new_instance_method(_ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_SetScales)
    AddObserver = _swig_new_instance_method(_ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_AddObserver)
    GetCachedValue = _swig_new_instance_method(_ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_GetCachedValue)
    GetCachedDerivative = _swig_new_instance_method(_ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_GetCachedDerivative)
    GetCachedCurrentParameters = _swig_new_instance_method(_ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_GetCachedCurrentParameters)

    def __init__(self, *args):
        r"""
        __init__(itkMultipleValuedVnlCostFunctionAdaptor self, unsigned int spaceDimension, unsigned int numberOfValues) -> itkMultipleValuedVnlCostFunctionAdaptor
        __init__(itkMultipleValuedVnlCostFunctionAdaptor self, itkMultipleValuedVnlCostFunctionAdaptor arg0) -> itkMultipleValuedVnlCostFunctionAdaptor


        This class is an Adaptor that allows to pass
        itk::MultipleValuedCostFunctions to vnl_optimizers expecting a
        vnl_cost_function.

        This class returns a single valued. 
        """
        _ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_swiginit(self, _ITKCostFunctionsPython.new_itkMultipleValuedVnlCostFunctionAdaptor(*args))
    __swig_destroy__ = _ITKCostFunctionsPython.delete_itkMultipleValuedVnlCostFunctionAdaptor

# Register itkMultipleValuedVnlCostFunctionAdaptor in _ITKCostFunctionsPython:
_ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_swigregister(itkMultipleValuedVnlCostFunctionAdaptor)

class itkSingleValuedCostFunction(itk.itkCostFunctionPython.itkCostFunctionTemplateD):
    r"""


    This class is a base for the CostFunctions returning a single value.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetValue = _swig_new_instance_method(_ITKCostFunctionsPython.itkSingleValuedCostFunction_GetValue)
    GetDerivative = _swig_new_instance_method(_ITKCostFunctionsPython.itkSingleValuedCostFunction_GetDerivative)
    GetValueAndDerivative = _swig_new_instance_method(_ITKCostFunctionsPython.itkSingleValuedCostFunction_GetValueAndDerivative)
    __swig_destroy__ = _ITKCostFunctionsPython.delete_itkSingleValuedCostFunction
    cast = _swig_new_static_method(_ITKCostFunctionsPython.itkSingleValuedCostFunction_cast)

# Register itkSingleValuedCostFunction in _ITKCostFunctionsPython:
_ITKCostFunctionsPython.itkSingleValuedCostFunction_swigregister(itkSingleValuedCostFunction)
itkSingleValuedCostFunction_cast = _ITKCostFunctionsPython.itkSingleValuedCostFunction_cast

class itkSingleValuedVnlCostFunctionAdaptor(itk.vnl_cost_functionPython.vnl_cost_function):
    r"""


    This class is an Adaptor that allows to pass
    itk::SingleValuedCostFunctions to vnl_optimizers expecting a
    vnl_cost_function.

    This class returns a single valued. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SetCostFunction = _swig_new_instance_method(_ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_SetCostFunction)
    GetCostFunction = _swig_new_instance_method(_ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_GetCostFunction)
    ConvertExternalToInternalGradient = _swig_new_instance_method(_ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_ConvertExternalToInternalGradient)
    SetScales = _swig_new_instance_method(_ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_SetScales)
    SetNegateCostFunction = _swig_new_instance_method(_ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_SetNegateCostFunction)
    GetNegateCostFunction = _swig_new_instance_method(_ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_GetNegateCostFunction)
    NegateCostFunctionOn = _swig_new_instance_method(_ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_NegateCostFunctionOn)
    NegateCostFunctionOff = _swig_new_instance_method(_ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_NegateCostFunctionOff)
    AddObserver = _swig_new_instance_method(_ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_AddObserver)
    GetCachedValue = _swig_new_instance_method(_ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_GetCachedValue)
    GetCachedDerivative = _swig_new_instance_method(_ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_GetCachedDerivative)
    GetCachedCurrentParameters = _swig_new_instance_method(_ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_GetCachedCurrentParameters)

    def __init__(self, *args):
        r"""
        __init__(itkSingleValuedVnlCostFunctionAdaptor self, unsigned int spaceDimension) -> itkSingleValuedVnlCostFunctionAdaptor
        __init__(itkSingleValuedVnlCostFunctionAdaptor self, itkSingleValuedVnlCostFunctionAdaptor arg0) -> itkSingleValuedVnlCostFunctionAdaptor


        This class is an Adaptor that allows to pass
        itk::SingleValuedCostFunctions to vnl_optimizers expecting a
        vnl_cost_function.

        This class returns a single valued. 
        """
        _ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_swiginit(self, _ITKCostFunctionsPython.new_itkSingleValuedVnlCostFunctionAdaptor(*args))
    __swig_destroy__ = _ITKCostFunctionsPython.delete_itkSingleValuedVnlCostFunctionAdaptor

# Register itkSingleValuedVnlCostFunctionAdaptor in _ITKCostFunctionsPython:
_ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_swigregister(itkSingleValuedVnlCostFunctionAdaptor)


def itkCumulativeGaussianCostFunction_New():
    return itkCumulativeGaussianCostFunction.New()

class itkCumulativeGaussianCostFunction(itkMultipleValuedCostFunction):
    r"""


    Cost function for the Cumulative Gaussian Optimizer.

    The Cumulative Gaussian is defined as the integral of a normalized
    Gaussian over the domain $ [-\\infty, \\infty] $.

    Let G(x) be the normalized Gaussian defined as  $ G(x) =
    \\frac{1}{{\\sigma \\sqrt {2\\pi } }}e^{ - \\frac{{\\left(
    {x - \\mu } \\right)^2 }}{{2\\sigma ^2 }}} $. The Cumulative
    Gaussian, is acquired by integrating G(x) then scaling and offseting
    it by the lower asymptotes $ I_1 $ and upper $ I_2 $: $ C\\left( x
    \\right) = I_1 + \\frac{{I_2 - I_1 }}{2}\\left( {1 +
    erf\\left( {\\frac{{x - \\mu }}{{\\sigma \\sqrt 2 }}}
    \\right)} \\right) $, where $ C\\left( { - \\infty }
    \\right) = I_1 $ and $ C\\left( \\infty \\right) = I_2 $. C(x)
    can only be tabulated since it's a variation of the error function. It
    is included in this class as the function EvaluateCumulativeGaussian,
    where the argument of the function is $ {\\frac{{x - \\mu
    }}{{\\sigma \\sqrt 2 }}} $. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_ITKCostFunctionsPython.itkCumulativeGaussianCostFunction___New_orig__)
    Clone = _swig_new_instance_method(_ITKCostFunctionsPython.itkCumulativeGaussianCostFunction_Clone)
    SpaceDimension = _ITKCostFunctionsPython.itkCumulativeGaussianCostFunction_SpaceDimension
    
    GetValuePointer = _swig_new_instance_method(_ITKCostFunctionsPython.itkCumulativeGaussianCostFunction_GetValuePointer)
    CalculateFitError = _swig_new_instance_method(_ITKCostFunctionsPython.itkCumulativeGaussianCostFunction_CalculateFitError)
    EvaluateCumulativeGaussian = _swig_new_instance_method(_ITKCostFunctionsPython.itkCumulativeGaussianCostFunction_EvaluateCumulativeGaussian)
    Initialize = _swig_new_instance_method(_ITKCostFunctionsPython.itkCumulativeGaussianCostFunction_Initialize)
    SetOriginalDataArray = _swig_new_instance_method(_ITKCostFunctionsPython.itkCumulativeGaussianCostFunction_SetOriginalDataArray)
    __swig_destroy__ = _ITKCostFunctionsPython.delete_itkCumulativeGaussianCostFunction
    cast = _swig_new_static_method(_ITKCostFunctionsPython.itkCumulativeGaussianCostFunction_cast)

    def New(*args, **kargs):
        """New() -> itkCumulativeGaussianCostFunction

        Create a new object of the class itkCumulativeGaussianCostFunction and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCumulativeGaussianCostFunction.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCumulativeGaussianCostFunction.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCumulativeGaussianCostFunction.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCumulativeGaussianCostFunction in _ITKCostFunctionsPython:
_ITKCostFunctionsPython.itkCumulativeGaussianCostFunction_swigregister(itkCumulativeGaussianCostFunction)
itkCumulativeGaussianCostFunction___New_orig__ = _ITKCostFunctionsPython.itkCumulativeGaussianCostFunction___New_orig__
itkCumulativeGaussianCostFunction_cast = _ITKCostFunctionsPython.itkCumulativeGaussianCostFunction_cast



