# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKAntiAliasPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkAntiAliasBinaryImageFilterPython
else:
    import _itkAntiAliasBinaryImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkAntiAliasBinaryImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkAntiAliasBinaryImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkSparseFieldLevelSetImageFilterPython
import itk.itkFiniteDifferenceImageFilterPython
import itk.itkFiniteDifferenceFunctionPython
import itk.itkCovariantVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkPointPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterAPython

def itkAntiAliasBinaryImageFilterID2ID2_New():
    return itkAntiAliasBinaryImageFilterID2ID2.New()

class itkAntiAliasBinaryImageFilterID2ID2(itk.itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID2ID2):
    r"""


    A method for estimation of a surface from a binary volume.

    This filter implements a surface-fitting method for estimation of a
    surface from a binary volume. This process can be used to reduce
    aliasing artifacts which result in visualization of binary partitioned
    surfaces.

    The binary volume (filter input) is used as a set of constraints in an
    iterative relaxation process of an estimated ND surface. The surface
    is described implicitly as the zero level set of a volume $ \\phi $
    and allowed to deform under curvature flow. A set of constraints is
    imposed on this movement as follows:

    \\[ u_{i,j,k}^{n+1} = \\left\\{ \\begin{array}{ll}
    \\mbox{max} (u_{i,j,k}^{n} + \\Delta t H_{i,j,k}^{n}, 0) &
    \\mbox{$B_{i,j,k} = 1$} \\\\ \\mbox{min} (u_{i,j,k}^{n} +
    \\Delta t H_{i,j,k}^{n}, 0) & \\mbox{$B_{i,j,k} = -1$}
    \\end{array}\\right. \\]

    where $ u_{i,j,k}^{n} $ is the value of $ \\phi $ at discrete index
    $ (i,j,k) $ and iteration $ n $, $ H $ is the gradient magnitude times
    mean curvature of $ \\phi $, and $ B $ is the binary input volume,
    with 1 denoting an inside pixel and -1 denoting an outside pixel.
    NOTES This implementation uses a sparse field level set solver instead
    of the narrow band implementation described in the reference below,
    which may introduce some differences in how fast and how accurately
    (in terms of RMS error) the solution converges. REFERENCES Whitaker,
    Ross. "Reducing Aliasing Artifacts In Iso-Surfaces of Binary
    Volumes" IEEE Volume Visualization and Graphics Symposium, October
    2000, pp.23-32. PARAMETERS The MaximumRMSChange parameter is used to
    determine when the solution has converged. A lower value will result
    in a tighter-fitting solution, but will require more computations. Too
    low a value could put the solver into an infinite loop. Values should
    always be less than 1.0. A value of 0.07 is a good starting estimate.

    The MaximumIterations parameter can be used to halt the solution after
    a specified number of iterations. INPUT The input is an N-dimensional
    image of any type. It is assumed to be a binary image. The filter will
    use an isosurface value that is halfway between the min and max values
    in the image. A signed data type is not necessary for the input.
    OUTPUT The filter will output a level set image of real, signed
    values. The zero crossings of this (N-dimensional) image represent the
    position of the isosurface value of interest. Values outside the zero
    level set are negative and values inside the zero level set are
    positive values. IMPORTANT! The output image type you use to
    instantiate this filter should be a real valued scalar type. In other
    words: doubles or floats. USING THIS FILTER to illustrate. The
    important thing is to understand the input and output types so you can
    properly interpret your results.

    In the common case, the only parameter that will need to be set is the
    MaximumRMSChange parameter, which determines when the solver halts.
    Extraction} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID2ID2_Clone)
    GetUpperBinaryValue = _swig_new_instance_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID2ID2_GetUpperBinaryValue)
    GetLowerBinaryValue = _swig_new_instance_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID2ID2_GetLowerBinaryValue)
    SetMaximumIterations = _swig_new_instance_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID2ID2_SetMaximumIterations)
    GetMaximumIterations = _swig_new_instance_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID2ID2_GetMaximumIterations)
    DoubleConvertibleToOutputCheck = _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID2ID2_DoubleConvertibleToOutputCheck
    
    InputOStreamWritableCheck = _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID2ID2_InputOStreamWritableCheck
    
    __swig_destroy__ = _itkAntiAliasBinaryImageFilterPython.delete_itkAntiAliasBinaryImageFilterID2ID2
    cast = _swig_new_static_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkAntiAliasBinaryImageFilterID2ID2

        Create a new object of the class itkAntiAliasBinaryImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAntiAliasBinaryImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAntiAliasBinaryImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAntiAliasBinaryImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAntiAliasBinaryImageFilterID2ID2 in _itkAntiAliasBinaryImageFilterPython:
_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID2ID2_swigregister(itkAntiAliasBinaryImageFilterID2ID2)
itkAntiAliasBinaryImageFilterID2ID2___New_orig__ = _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID2ID2___New_orig__
itkAntiAliasBinaryImageFilterID2ID2_cast = _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID2ID2_cast


def itkAntiAliasBinaryImageFilterID3ID3_New():
    return itkAntiAliasBinaryImageFilterID3ID3.New()

class itkAntiAliasBinaryImageFilterID3ID3(itk.itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID3ID3):
    r"""


    A method for estimation of a surface from a binary volume.

    This filter implements a surface-fitting method for estimation of a
    surface from a binary volume. This process can be used to reduce
    aliasing artifacts which result in visualization of binary partitioned
    surfaces.

    The binary volume (filter input) is used as a set of constraints in an
    iterative relaxation process of an estimated ND surface. The surface
    is described implicitly as the zero level set of a volume $ \\phi $
    and allowed to deform under curvature flow. A set of constraints is
    imposed on this movement as follows:

    \\[ u_{i,j,k}^{n+1} = \\left\\{ \\begin{array}{ll}
    \\mbox{max} (u_{i,j,k}^{n} + \\Delta t H_{i,j,k}^{n}, 0) &
    \\mbox{$B_{i,j,k} = 1$} \\\\ \\mbox{min} (u_{i,j,k}^{n} +
    \\Delta t H_{i,j,k}^{n}, 0) & \\mbox{$B_{i,j,k} = -1$}
    \\end{array}\\right. \\]

    where $ u_{i,j,k}^{n} $ is the value of $ \\phi $ at discrete index
    $ (i,j,k) $ and iteration $ n $, $ H $ is the gradient magnitude times
    mean curvature of $ \\phi $, and $ B $ is the binary input volume,
    with 1 denoting an inside pixel and -1 denoting an outside pixel.
    NOTES This implementation uses a sparse field level set solver instead
    of the narrow band implementation described in the reference below,
    which may introduce some differences in how fast and how accurately
    (in terms of RMS error) the solution converges. REFERENCES Whitaker,
    Ross. "Reducing Aliasing Artifacts In Iso-Surfaces of Binary
    Volumes" IEEE Volume Visualization and Graphics Symposium, October
    2000, pp.23-32. PARAMETERS The MaximumRMSChange parameter is used to
    determine when the solution has converged. A lower value will result
    in a tighter-fitting solution, but will require more computations. Too
    low a value could put the solver into an infinite loop. Values should
    always be less than 1.0. A value of 0.07 is a good starting estimate.

    The MaximumIterations parameter can be used to halt the solution after
    a specified number of iterations. INPUT The input is an N-dimensional
    image of any type. It is assumed to be a binary image. The filter will
    use an isosurface value that is halfway between the min and max values
    in the image. A signed data type is not necessary for the input.
    OUTPUT The filter will output a level set image of real, signed
    values. The zero crossings of this (N-dimensional) image represent the
    position of the isosurface value of interest. Values outside the zero
    level set are negative and values inside the zero level set are
    positive values. IMPORTANT! The output image type you use to
    instantiate this filter should be a real valued scalar type. In other
    words: doubles or floats. USING THIS FILTER to illustrate. The
    important thing is to understand the input and output types so you can
    properly interpret your results.

    In the common case, the only parameter that will need to be set is the
    MaximumRMSChange parameter, which determines when the solver halts.
    Extraction} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID3ID3_Clone)
    GetUpperBinaryValue = _swig_new_instance_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID3ID3_GetUpperBinaryValue)
    GetLowerBinaryValue = _swig_new_instance_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID3ID3_GetLowerBinaryValue)
    SetMaximumIterations = _swig_new_instance_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID3ID3_SetMaximumIterations)
    GetMaximumIterations = _swig_new_instance_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID3ID3_GetMaximumIterations)
    DoubleConvertibleToOutputCheck = _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID3ID3_DoubleConvertibleToOutputCheck
    
    InputOStreamWritableCheck = _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID3ID3_InputOStreamWritableCheck
    
    __swig_destroy__ = _itkAntiAliasBinaryImageFilterPython.delete_itkAntiAliasBinaryImageFilterID3ID3
    cast = _swig_new_static_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkAntiAliasBinaryImageFilterID3ID3

        Create a new object of the class itkAntiAliasBinaryImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAntiAliasBinaryImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAntiAliasBinaryImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAntiAliasBinaryImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAntiAliasBinaryImageFilterID3ID3 in _itkAntiAliasBinaryImageFilterPython:
_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID3ID3_swigregister(itkAntiAliasBinaryImageFilterID3ID3)
itkAntiAliasBinaryImageFilterID3ID3___New_orig__ = _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID3ID3___New_orig__
itkAntiAliasBinaryImageFilterID3ID3_cast = _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID3ID3_cast


def itkAntiAliasBinaryImageFilterIF2IF2_New():
    return itkAntiAliasBinaryImageFilterIF2IF2.New()

class itkAntiAliasBinaryImageFilterIF2IF2(itk.itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF2IF2):
    r"""


    A method for estimation of a surface from a binary volume.

    This filter implements a surface-fitting method for estimation of a
    surface from a binary volume. This process can be used to reduce
    aliasing artifacts which result in visualization of binary partitioned
    surfaces.

    The binary volume (filter input) is used as a set of constraints in an
    iterative relaxation process of an estimated ND surface. The surface
    is described implicitly as the zero level set of a volume $ \\phi $
    and allowed to deform under curvature flow. A set of constraints is
    imposed on this movement as follows:

    \\[ u_{i,j,k}^{n+1} = \\left\\{ \\begin{array}{ll}
    \\mbox{max} (u_{i,j,k}^{n} + \\Delta t H_{i,j,k}^{n}, 0) &
    \\mbox{$B_{i,j,k} = 1$} \\\\ \\mbox{min} (u_{i,j,k}^{n} +
    \\Delta t H_{i,j,k}^{n}, 0) & \\mbox{$B_{i,j,k} = -1$}
    \\end{array}\\right. \\]

    where $ u_{i,j,k}^{n} $ is the value of $ \\phi $ at discrete index
    $ (i,j,k) $ and iteration $ n $, $ H $ is the gradient magnitude times
    mean curvature of $ \\phi $, and $ B $ is the binary input volume,
    with 1 denoting an inside pixel and -1 denoting an outside pixel.
    NOTES This implementation uses a sparse field level set solver instead
    of the narrow band implementation described in the reference below,
    which may introduce some differences in how fast and how accurately
    (in terms of RMS error) the solution converges. REFERENCES Whitaker,
    Ross. "Reducing Aliasing Artifacts In Iso-Surfaces of Binary
    Volumes" IEEE Volume Visualization and Graphics Symposium, October
    2000, pp.23-32. PARAMETERS The MaximumRMSChange parameter is used to
    determine when the solution has converged. A lower value will result
    in a tighter-fitting solution, but will require more computations. Too
    low a value could put the solver into an infinite loop. Values should
    always be less than 1.0. A value of 0.07 is a good starting estimate.

    The MaximumIterations parameter can be used to halt the solution after
    a specified number of iterations. INPUT The input is an N-dimensional
    image of any type. It is assumed to be a binary image. The filter will
    use an isosurface value that is halfway between the min and max values
    in the image. A signed data type is not necessary for the input.
    OUTPUT The filter will output a level set image of real, signed
    values. The zero crossings of this (N-dimensional) image represent the
    position of the isosurface value of interest. Values outside the zero
    level set are negative and values inside the zero level set are
    positive values. IMPORTANT! The output image type you use to
    instantiate this filter should be a real valued scalar type. In other
    words: doubles or floats. USING THIS FILTER to illustrate. The
    important thing is to understand the input and output types so you can
    properly interpret your results.

    In the common case, the only parameter that will need to be set is the
    MaximumRMSChange parameter, which determines when the solver halts.
    Extraction} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF2IF2_Clone)
    GetUpperBinaryValue = _swig_new_instance_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF2IF2_GetUpperBinaryValue)
    GetLowerBinaryValue = _swig_new_instance_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF2IF2_GetLowerBinaryValue)
    SetMaximumIterations = _swig_new_instance_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF2IF2_SetMaximumIterations)
    GetMaximumIterations = _swig_new_instance_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF2IF2_GetMaximumIterations)
    DoubleConvertibleToOutputCheck = _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF2IF2_DoubleConvertibleToOutputCheck
    
    InputOStreamWritableCheck = _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF2IF2_InputOStreamWritableCheck
    
    __swig_destroy__ = _itkAntiAliasBinaryImageFilterPython.delete_itkAntiAliasBinaryImageFilterIF2IF2
    cast = _swig_new_static_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkAntiAliasBinaryImageFilterIF2IF2

        Create a new object of the class itkAntiAliasBinaryImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAntiAliasBinaryImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAntiAliasBinaryImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAntiAliasBinaryImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAntiAliasBinaryImageFilterIF2IF2 in _itkAntiAliasBinaryImageFilterPython:
_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF2IF2_swigregister(itkAntiAliasBinaryImageFilterIF2IF2)
itkAntiAliasBinaryImageFilterIF2IF2___New_orig__ = _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF2IF2___New_orig__
itkAntiAliasBinaryImageFilterIF2IF2_cast = _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF2IF2_cast


def itkAntiAliasBinaryImageFilterIF3IF3_New():
    return itkAntiAliasBinaryImageFilterIF3IF3.New()

class itkAntiAliasBinaryImageFilterIF3IF3(itk.itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF3IF3):
    r"""


    A method for estimation of a surface from a binary volume.

    This filter implements a surface-fitting method for estimation of a
    surface from a binary volume. This process can be used to reduce
    aliasing artifacts which result in visualization of binary partitioned
    surfaces.

    The binary volume (filter input) is used as a set of constraints in an
    iterative relaxation process of an estimated ND surface. The surface
    is described implicitly as the zero level set of a volume $ \\phi $
    and allowed to deform under curvature flow. A set of constraints is
    imposed on this movement as follows:

    \\[ u_{i,j,k}^{n+1} = \\left\\{ \\begin{array}{ll}
    \\mbox{max} (u_{i,j,k}^{n} + \\Delta t H_{i,j,k}^{n}, 0) &
    \\mbox{$B_{i,j,k} = 1$} \\\\ \\mbox{min} (u_{i,j,k}^{n} +
    \\Delta t H_{i,j,k}^{n}, 0) & \\mbox{$B_{i,j,k} = -1$}
    \\end{array}\\right. \\]

    where $ u_{i,j,k}^{n} $ is the value of $ \\phi $ at discrete index
    $ (i,j,k) $ and iteration $ n $, $ H $ is the gradient magnitude times
    mean curvature of $ \\phi $, and $ B $ is the binary input volume,
    with 1 denoting an inside pixel and -1 denoting an outside pixel.
    NOTES This implementation uses a sparse field level set solver instead
    of the narrow band implementation described in the reference below,
    which may introduce some differences in how fast and how accurately
    (in terms of RMS error) the solution converges. REFERENCES Whitaker,
    Ross. "Reducing Aliasing Artifacts In Iso-Surfaces of Binary
    Volumes" IEEE Volume Visualization and Graphics Symposium, October
    2000, pp.23-32. PARAMETERS The MaximumRMSChange parameter is used to
    determine when the solution has converged. A lower value will result
    in a tighter-fitting solution, but will require more computations. Too
    low a value could put the solver into an infinite loop. Values should
    always be less than 1.0. A value of 0.07 is a good starting estimate.

    The MaximumIterations parameter can be used to halt the solution after
    a specified number of iterations. INPUT The input is an N-dimensional
    image of any type. It is assumed to be a binary image. The filter will
    use an isosurface value that is halfway between the min and max values
    in the image. A signed data type is not necessary for the input.
    OUTPUT The filter will output a level set image of real, signed
    values. The zero crossings of this (N-dimensional) image represent the
    position of the isosurface value of interest. Values outside the zero
    level set are negative and values inside the zero level set are
    positive values. IMPORTANT! The output image type you use to
    instantiate this filter should be a real valued scalar type. In other
    words: doubles or floats. USING THIS FILTER to illustrate. The
    important thing is to understand the input and output types so you can
    properly interpret your results.

    In the common case, the only parameter that will need to be set is the
    MaximumRMSChange parameter, which determines when the solver halts.
    Extraction} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF3IF3_Clone)
    GetUpperBinaryValue = _swig_new_instance_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF3IF3_GetUpperBinaryValue)
    GetLowerBinaryValue = _swig_new_instance_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF3IF3_GetLowerBinaryValue)
    SetMaximumIterations = _swig_new_instance_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF3IF3_SetMaximumIterations)
    GetMaximumIterations = _swig_new_instance_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF3IF3_GetMaximumIterations)
    DoubleConvertibleToOutputCheck = _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF3IF3_DoubleConvertibleToOutputCheck
    
    InputOStreamWritableCheck = _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF3IF3_InputOStreamWritableCheck
    
    __swig_destroy__ = _itkAntiAliasBinaryImageFilterPython.delete_itkAntiAliasBinaryImageFilterIF3IF3
    cast = _swig_new_static_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkAntiAliasBinaryImageFilterIF3IF3

        Create a new object of the class itkAntiAliasBinaryImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAntiAliasBinaryImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAntiAliasBinaryImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAntiAliasBinaryImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAntiAliasBinaryImageFilterIF3IF3 in _itkAntiAliasBinaryImageFilterPython:
_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF3IF3_swigregister(itkAntiAliasBinaryImageFilterIF3IF3)
itkAntiAliasBinaryImageFilterIF3IF3___New_orig__ = _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF3IF3___New_orig__
itkAntiAliasBinaryImageFilterIF3IF3_cast = _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF3IF3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def anti_alias_binary_image_filter(*args, **kwargs):
    """Procedural interface for AntiAliasBinaryImageFilter"""
    import itk
    instance = itk.AntiAliasBinaryImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def anti_alias_binary_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.AntiAliasBinaryImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.AntiAliasBinaryImageFilter.values()[0]
    else:
        filter_object = itk.AntiAliasBinaryImageFilter

    anti_alias_binary_image_filter.__doc__ = filter_object.__doc__
    anti_alias_binary_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    anti_alias_binary_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.AntiAliasBinaryImageFilter, itkTemplate.itkTemplate):
        anti_alias_binary_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        anti_alias_binary_image_filter.__doc__ += "\n"
        anti_alias_binary_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        anti_alias_binary_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



