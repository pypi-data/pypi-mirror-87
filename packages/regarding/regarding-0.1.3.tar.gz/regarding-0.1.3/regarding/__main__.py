import sys
import argparse
import toml
from textwrap import dedent
from pathlib import Path
from collections import namedtuple


class ProjectToml:
    def __init__(self):
        project_toml = toml.loads(Path("pyproject.toml").read_text())
        self._poetry = project_toml["tool"]["poetry"]
        self._version, self._version_info = self.parseVersion(self._poetry["version"])
        self._regarding = project_toml["tool"].get("regarding", {})

    @property
    def name(self):
        return self._poetry["name"]

    @property
    def description(self):
        return self._poetry["description"]

    @property
    def author(self):
        author = self._poetry["authors"][0]
        return author[:author.find("<")].strip()

    @property
    def author_email(self):
        author = self._poetry["authors"][0]
        return author[author.find("<") + 1:author.find(">")].strip()

    @property
    def authors(self):
        return self._poetry["authors"]

    @property
    def version(self):
        return self._version

    @property
    def version_info(self):
        return self._version_info

    @property
    def release_name(self):
        return self._regarding.get("release_name", "")

    @property
    def years(self):
        return self._regarding.get("years", "")

    @property
    def homepage(self):
        return self._poetry.get("homepage", "")

    @staticmethod
    def parseVersion(v):
        from pkg_resources import parse_version
        from pkg_resources.extern.packaging.version import Version

        # Some validation and normalization (e.g. 1.0-a1 -> 1.0a1)
        V = parse_version(v)
        if not isinstance(V, Version):
            raise ValueError(f"Invalid version: {v}")

        ver = str(V)
        if V._version.pre:
            rel = "".join([str(v) for v in V._version.pre])
        else:
            rel = "final"

        # Although parsed the following components are not captured: post, dev, local, epoch
        Version = namedtuple("Version", "major, minor, maint, release")
        ver_info = Version(V._version.release[0],
                           V._version.release[1] if len(V._version.release) > 1 else 0,
                           V._version.release[2] if len(V._version.release) > 2 else 0,
                           rel)
        return ver, ver_info


def _main(args):
    regarding_name, regarding_homepage = None, None
    try:
        from . import __about__ as about_regarding
        try:
            regarding_name = about_regarding.project_name.lower()
            regarding_homepage = about_regarding.homepage
        except AttributeError:
            # During bootstrap
            pass

    except ImportError:
        about_regarding = argparse.Namespace()
        about_regarding.project_name = "TDB"
        about_regarding.homepage = "TDB"

    project = args.project_toml

    '''
    # -*- coding: utf-8 -*-

# DO NOT EDIT THIS FILE!
# This file has been autogenerated by dephell <3
# https://github.com/dephell/dephell
    '''
    about_py = dedent(f"""
    # -*- coding: utf-8 -*-
    \"\"\"
    ~~~~~~~~~~ DO NOT EDIT THIS FILE! Autogenerated by `{regarding_name}` ~~~~~~~~~~
    {regarding_homepage}
    \"\"\"
    import dataclasses\n\n
    @dataclasses.dataclass
    class Version:
        major: int
        minor: int
        maint: int
        release: str
        release_name: str\n\n
    project_name = "{project.name}"
    version = "{project.version}"
    release_name = "{project.release_name}"
    author = "{project.author}"
    author_email = "{project.author_email}"
    years = "{project.years}"
    version_info = Version(
        {project.version_info.major}, {project.version_info.minor}, {project.version_info.maint},
        "{project.version_info.release}", "{project.release_name}"
    )
    description = "{project.description}"
    homepage = "{project.homepage}"
    """).strip()

    args.out_file.write(f"{about_py}\n")
    args.out_file.close()


def main():
    project_toml = ProjectToml()

    cli = argparse.ArgumentParser(description=project_toml.description)
    cli.add_argument("--version", action="version", version=f"%(prog)s {project_toml.version}")
    cli.add_argument("-o", "--out-file", type=argparse.FileType("w", encoding='UTF-8'), default="-",
                     help="The output file, by default is file is printed to standard out.")

    args = cli.parse_args()
    args.project_toml = project_toml

    sys.exit(_main(args) or 0)


if __name__ == "__main__":
    main()
