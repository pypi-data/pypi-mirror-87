# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKQuadEdgeMeshFilteringPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkDiscreteMeanCurvatureQuadEdgeMeshFilterPython
else:
    import _itkDiscreteMeanCurvatureQuadEdgeMeshFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkDiscreteMeanCurvatureQuadEdgeMeshFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkDiscreteMeanCurvatureQuadEdgeMeshFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkDiscreteCurvatureQuadEdgeMeshFilterPython
import itk.itkQuadEdgeMeshPointPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkGeometricalQuadEdgePython
import itk.itkQuadEdgePython
import itk.itkQuadEdgeMeshToQuadEdgeMeshFilterPython
import itk.itkQuadEdgeMeshBasePython
import itk.ITKCommonBasePython
import itk.itkQuadEdgeMeshLineCellPython
import itk.itkArrayPython
import itk.itkQuadEdgeCellTraitsInfoPython
import itk.itkMapContainerPython
import itk.itkImagePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImageRegionPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkCovariantVectorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkSymmetricSecondRankTensorPython

def itkDiscreteMeanCurvatureQuadEdgeMeshFilterQEMD2_New():
    return itkDiscreteMeanCurvatureQuadEdgeMeshFilterQEMD2.New()

class itkDiscreteMeanCurvatureQuadEdgeMeshFilterQEMD2(itk.itkDiscreteCurvatureQuadEdgeMeshFilterPython.itkDiscreteCurvatureQuadEdgeMeshFilterQEMD2):
    r"""


    see the following paper title: Discrete Differential-Geometry
    Operators for Triangulated 2-Manifolds authors: Mark Meyer, Mathieu
    Desbrun, Peter Schroder, Alan H. Barr conference: VisMath '02
    location: Berlin (Germany) 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDiscreteMeanCurvatureQuadEdgeMeshFilterPython.itkDiscreteMeanCurvatureQuadEdgeMeshFilterQEMD2___New_orig__)
    Clone = _swig_new_instance_method(_itkDiscreteMeanCurvatureQuadEdgeMeshFilterPython.itkDiscreteMeanCurvatureQuadEdgeMeshFilterQEMD2_Clone)
    OutputIsFloatingPointCheck = _itkDiscreteMeanCurvatureQuadEdgeMeshFilterPython.itkDiscreteMeanCurvatureQuadEdgeMeshFilterQEMD2_OutputIsFloatingPointCheck
    
    __swig_destroy__ = _itkDiscreteMeanCurvatureQuadEdgeMeshFilterPython.delete_itkDiscreteMeanCurvatureQuadEdgeMeshFilterQEMD2
    cast = _swig_new_static_method(_itkDiscreteMeanCurvatureQuadEdgeMeshFilterPython.itkDiscreteMeanCurvatureQuadEdgeMeshFilterQEMD2_cast)

    def New(*args, **kargs):
        """New() -> itkDiscreteMeanCurvatureQuadEdgeMeshFilterQEMD2

        Create a new object of the class itkDiscreteMeanCurvatureQuadEdgeMeshFilterQEMD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDiscreteMeanCurvatureQuadEdgeMeshFilterQEMD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDiscreteMeanCurvatureQuadEdgeMeshFilterQEMD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDiscreteMeanCurvatureQuadEdgeMeshFilterQEMD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDiscreteMeanCurvatureQuadEdgeMeshFilterQEMD2 in _itkDiscreteMeanCurvatureQuadEdgeMeshFilterPython:
_itkDiscreteMeanCurvatureQuadEdgeMeshFilterPython.itkDiscreteMeanCurvatureQuadEdgeMeshFilterQEMD2_swigregister(itkDiscreteMeanCurvatureQuadEdgeMeshFilterQEMD2)
itkDiscreteMeanCurvatureQuadEdgeMeshFilterQEMD2___New_orig__ = _itkDiscreteMeanCurvatureQuadEdgeMeshFilterPython.itkDiscreteMeanCurvatureQuadEdgeMeshFilterQEMD2___New_orig__
itkDiscreteMeanCurvatureQuadEdgeMeshFilterQEMD2_cast = _itkDiscreteMeanCurvatureQuadEdgeMeshFilterPython.itkDiscreteMeanCurvatureQuadEdgeMeshFilterQEMD2_cast


def itkDiscreteMeanCurvatureQuadEdgeMeshFilterQEMD3_New():
    return itkDiscreteMeanCurvatureQuadEdgeMeshFilterQEMD3.New()

class itkDiscreteMeanCurvatureQuadEdgeMeshFilterQEMD3(itk.itkDiscreteCurvatureQuadEdgeMeshFilterPython.itkDiscreteCurvatureQuadEdgeMeshFilterQEMD3):
    r"""


    see the following paper title: Discrete Differential-Geometry
    Operators for Triangulated 2-Manifolds authors: Mark Meyer, Mathieu
    Desbrun, Peter Schroder, Alan H. Barr conference: VisMath '02
    location: Berlin (Germany) 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDiscreteMeanCurvatureQuadEdgeMeshFilterPython.itkDiscreteMeanCurvatureQuadEdgeMeshFilterQEMD3___New_orig__)
    Clone = _swig_new_instance_method(_itkDiscreteMeanCurvatureQuadEdgeMeshFilterPython.itkDiscreteMeanCurvatureQuadEdgeMeshFilterQEMD3_Clone)
    OutputIsFloatingPointCheck = _itkDiscreteMeanCurvatureQuadEdgeMeshFilterPython.itkDiscreteMeanCurvatureQuadEdgeMeshFilterQEMD3_OutputIsFloatingPointCheck
    
    __swig_destroy__ = _itkDiscreteMeanCurvatureQuadEdgeMeshFilterPython.delete_itkDiscreteMeanCurvatureQuadEdgeMeshFilterQEMD3
    cast = _swig_new_static_method(_itkDiscreteMeanCurvatureQuadEdgeMeshFilterPython.itkDiscreteMeanCurvatureQuadEdgeMeshFilterQEMD3_cast)

    def New(*args, **kargs):
        """New() -> itkDiscreteMeanCurvatureQuadEdgeMeshFilterQEMD3

        Create a new object of the class itkDiscreteMeanCurvatureQuadEdgeMeshFilterQEMD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDiscreteMeanCurvatureQuadEdgeMeshFilterQEMD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDiscreteMeanCurvatureQuadEdgeMeshFilterQEMD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDiscreteMeanCurvatureQuadEdgeMeshFilterQEMD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDiscreteMeanCurvatureQuadEdgeMeshFilterQEMD3 in _itkDiscreteMeanCurvatureQuadEdgeMeshFilterPython:
_itkDiscreteMeanCurvatureQuadEdgeMeshFilterPython.itkDiscreteMeanCurvatureQuadEdgeMeshFilterQEMD3_swigregister(itkDiscreteMeanCurvatureQuadEdgeMeshFilterQEMD3)
itkDiscreteMeanCurvatureQuadEdgeMeshFilterQEMD3___New_orig__ = _itkDiscreteMeanCurvatureQuadEdgeMeshFilterPython.itkDiscreteMeanCurvatureQuadEdgeMeshFilterQEMD3___New_orig__
itkDiscreteMeanCurvatureQuadEdgeMeshFilterQEMD3_cast = _itkDiscreteMeanCurvatureQuadEdgeMeshFilterPython.itkDiscreteMeanCurvatureQuadEdgeMeshFilterQEMD3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def discrete_mean_curvature_quad_edge_mesh_filter(*args, **kwargs):
    """Procedural interface for DiscreteMeanCurvatureQuadEdgeMeshFilter"""
    import itk
    instance = itk.DiscreteMeanCurvatureQuadEdgeMeshFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def discrete_mean_curvature_quad_edge_mesh_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.DiscreteMeanCurvatureQuadEdgeMeshFilter, itkTemplate.itkTemplate):
        filter_object = itk.DiscreteMeanCurvatureQuadEdgeMeshFilter.values()[0]
    else:
        filter_object = itk.DiscreteMeanCurvatureQuadEdgeMeshFilter

    discrete_mean_curvature_quad_edge_mesh_filter.__doc__ = filter_object.__doc__
    discrete_mean_curvature_quad_edge_mesh_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    discrete_mean_curvature_quad_edge_mesh_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.DiscreteMeanCurvatureQuadEdgeMeshFilter, itkTemplate.itkTemplate):
        discrete_mean_curvature_quad_edge_mesh_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        discrete_mean_curvature_quad_edge_mesh_filter.__doc__ += "\n"
        discrete_mean_curvature_quad_edge_mesh_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        discrete_mean_curvature_quad_edge_mesh_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



