# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageGridPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkBinShrinkImageFilterPython
else:
    import _itkBinShrinkImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkBinShrinkImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkBinShrinkImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkImagePython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterBPython

def itkBinShrinkImageFilterICF2ICF2_New():
    return itkBinShrinkImageFilterICF2ICF2.New()

class itkBinShrinkImageFilterICF2ICF2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF2):
    r"""


    Reduce the size of an image by an integer factor in each dimension
    while performing averaging of an input neighborhood.

    The output image size in each dimension is given by:

    outputSize[j] = max( std::floor(inputSize[j]/shrinkFactor[j]), 1 );

    The algorithm implemented can be describe with the following equation
    for 2D: \\[ \\mathsf{I}_{out}(x_o,x_1) =
    \\frac{\\sum_{i=0}^{f_0}\\sum_{j=0}^{f_1}\\mathsf{I}_{in}(f_0
    x_o+i,f_1 x_1+j)}{f_0 f_1} \\]

    This filter is implemented so that the starting extent of the first
    pixel of the output matches that of the input.

    The change in image geometry from a 5x5 image binned by a factor of
    2x2.

    This code was contributed in the Insight Journal paper: "BinShrink: A
    multi-resolution filter with cache efficient averaging" by Lowekamp
    B., Chen D.https://hdl.handle.net/10380/3450 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterICF2ICF2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterICF2ICF2_Clone)
    SetShrinkFactors = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterICF2ICF2_SetShrinkFactors)
    SetShrinkFactor = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterICF2ICF2_SetShrinkFactor)
    GetShrinkFactors = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterICF2ICF2_GetShrinkFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterICF2ICF2_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterICF2ICF2_GenerateInputRequestedRegion)
    InputConvertibleToOutputCheck = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterICF2ICF2_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterICF2ICF2_SameDimensionCheck
    
    __swig_destroy__ = _itkBinShrinkImageFilterPython.delete_itkBinShrinkImageFilterICF2ICF2
    cast = _swig_new_static_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterICF2ICF2_cast)

    def New(*args, **kargs):
        """New() -> itkBinShrinkImageFilterICF2ICF2

        Create a new object of the class itkBinShrinkImageFilterICF2ICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinShrinkImageFilterICF2ICF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinShrinkImageFilterICF2ICF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinShrinkImageFilterICF2ICF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinShrinkImageFilterICF2ICF2 in _itkBinShrinkImageFilterPython:
_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterICF2ICF2_swigregister(itkBinShrinkImageFilterICF2ICF2)
itkBinShrinkImageFilterICF2ICF2___New_orig__ = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterICF2ICF2___New_orig__
itkBinShrinkImageFilterICF2ICF2_cast = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterICF2ICF2_cast


def itkBinShrinkImageFilterICF3ICF3_New():
    return itkBinShrinkImageFilterICF3ICF3.New()

class itkBinShrinkImageFilterICF3ICF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF3):
    r"""


    Reduce the size of an image by an integer factor in each dimension
    while performing averaging of an input neighborhood.

    The output image size in each dimension is given by:

    outputSize[j] = max( std::floor(inputSize[j]/shrinkFactor[j]), 1 );

    The algorithm implemented can be describe with the following equation
    for 2D: \\[ \\mathsf{I}_{out}(x_o,x_1) =
    \\frac{\\sum_{i=0}^{f_0}\\sum_{j=0}^{f_1}\\mathsf{I}_{in}(f_0
    x_o+i,f_1 x_1+j)}{f_0 f_1} \\]

    This filter is implemented so that the starting extent of the first
    pixel of the output matches that of the input.

    The change in image geometry from a 5x5 image binned by a factor of
    2x2.

    This code was contributed in the Insight Journal paper: "BinShrink: A
    multi-resolution filter with cache efficient averaging" by Lowekamp
    B., Chen D.https://hdl.handle.net/10380/3450 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterICF3ICF3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterICF3ICF3_Clone)
    SetShrinkFactors = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterICF3ICF3_SetShrinkFactors)
    SetShrinkFactor = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterICF3ICF3_SetShrinkFactor)
    GetShrinkFactors = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterICF3ICF3_GetShrinkFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterICF3ICF3_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterICF3ICF3_GenerateInputRequestedRegion)
    InputConvertibleToOutputCheck = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterICF3ICF3_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterICF3ICF3_SameDimensionCheck
    
    __swig_destroy__ = _itkBinShrinkImageFilterPython.delete_itkBinShrinkImageFilterICF3ICF3
    cast = _swig_new_static_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterICF3ICF3_cast)

    def New(*args, **kargs):
        """New() -> itkBinShrinkImageFilterICF3ICF3

        Create a new object of the class itkBinShrinkImageFilterICF3ICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinShrinkImageFilterICF3ICF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinShrinkImageFilterICF3ICF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinShrinkImageFilterICF3ICF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinShrinkImageFilterICF3ICF3 in _itkBinShrinkImageFilterPython:
_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterICF3ICF3_swigregister(itkBinShrinkImageFilterICF3ICF3)
itkBinShrinkImageFilterICF3ICF3___New_orig__ = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterICF3ICF3___New_orig__
itkBinShrinkImageFilterICF3ICF3_cast = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterICF3ICF3_cast


def itkBinShrinkImageFilterID2ID2_New():
    return itkBinShrinkImageFilterID2ID2.New()

class itkBinShrinkImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""


    Reduce the size of an image by an integer factor in each dimension
    while performing averaging of an input neighborhood.

    The output image size in each dimension is given by:

    outputSize[j] = max( std::floor(inputSize[j]/shrinkFactor[j]), 1 );

    The algorithm implemented can be describe with the following equation
    for 2D: \\[ \\mathsf{I}_{out}(x_o,x_1) =
    \\frac{\\sum_{i=0}^{f_0}\\sum_{j=0}^{f_1}\\mathsf{I}_{in}(f_0
    x_o+i,f_1 x_1+j)}{f_0 f_1} \\]

    This filter is implemented so that the starting extent of the first
    pixel of the output matches that of the input.

    The change in image geometry from a 5x5 image binned by a factor of
    2x2.

    This code was contributed in the Insight Journal paper: "BinShrink: A
    multi-resolution filter with cache efficient averaging" by Lowekamp
    B., Chen D.https://hdl.handle.net/10380/3450 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterID2ID2_Clone)
    SetShrinkFactors = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterID2ID2_SetShrinkFactors)
    SetShrinkFactor = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterID2ID2_SetShrinkFactor)
    GetShrinkFactors = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterID2ID2_GetShrinkFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterID2ID2_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterID2ID2_GenerateInputRequestedRegion)
    InputConvertibleToOutputCheck = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterID2ID2_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterID2ID2_SameDimensionCheck
    
    __swig_destroy__ = _itkBinShrinkImageFilterPython.delete_itkBinShrinkImageFilterID2ID2
    cast = _swig_new_static_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkBinShrinkImageFilterID2ID2

        Create a new object of the class itkBinShrinkImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinShrinkImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinShrinkImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinShrinkImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinShrinkImageFilterID2ID2 in _itkBinShrinkImageFilterPython:
_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterID2ID2_swigregister(itkBinShrinkImageFilterID2ID2)
itkBinShrinkImageFilterID2ID2___New_orig__ = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterID2ID2___New_orig__
itkBinShrinkImageFilterID2ID2_cast = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterID2ID2_cast


def itkBinShrinkImageFilterID3ID3_New():
    return itkBinShrinkImageFilterID3ID3.New()

class itkBinShrinkImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""


    Reduce the size of an image by an integer factor in each dimension
    while performing averaging of an input neighborhood.

    The output image size in each dimension is given by:

    outputSize[j] = max( std::floor(inputSize[j]/shrinkFactor[j]), 1 );

    The algorithm implemented can be describe with the following equation
    for 2D: \\[ \\mathsf{I}_{out}(x_o,x_1) =
    \\frac{\\sum_{i=0}^{f_0}\\sum_{j=0}^{f_1}\\mathsf{I}_{in}(f_0
    x_o+i,f_1 x_1+j)}{f_0 f_1} \\]

    This filter is implemented so that the starting extent of the first
    pixel of the output matches that of the input.

    The change in image geometry from a 5x5 image binned by a factor of
    2x2.

    This code was contributed in the Insight Journal paper: "BinShrink: A
    multi-resolution filter with cache efficient averaging" by Lowekamp
    B., Chen D.https://hdl.handle.net/10380/3450 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterID3ID3_Clone)
    SetShrinkFactors = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterID3ID3_SetShrinkFactors)
    SetShrinkFactor = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterID3ID3_SetShrinkFactor)
    GetShrinkFactors = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterID3ID3_GetShrinkFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterID3ID3_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterID3ID3_GenerateInputRequestedRegion)
    InputConvertibleToOutputCheck = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterID3ID3_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterID3ID3_SameDimensionCheck
    
    __swig_destroy__ = _itkBinShrinkImageFilterPython.delete_itkBinShrinkImageFilterID3ID3
    cast = _swig_new_static_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkBinShrinkImageFilterID3ID3

        Create a new object of the class itkBinShrinkImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinShrinkImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinShrinkImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinShrinkImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinShrinkImageFilterID3ID3 in _itkBinShrinkImageFilterPython:
_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterID3ID3_swigregister(itkBinShrinkImageFilterID3ID3)
itkBinShrinkImageFilterID3ID3___New_orig__ = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterID3ID3___New_orig__
itkBinShrinkImageFilterID3ID3_cast = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterID3ID3_cast


def itkBinShrinkImageFilterIF2IF2_New():
    return itkBinShrinkImageFilterIF2IF2.New()

class itkBinShrinkImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""


    Reduce the size of an image by an integer factor in each dimension
    while performing averaging of an input neighborhood.

    The output image size in each dimension is given by:

    outputSize[j] = max( std::floor(inputSize[j]/shrinkFactor[j]), 1 );

    The algorithm implemented can be describe with the following equation
    for 2D: \\[ \\mathsf{I}_{out}(x_o,x_1) =
    \\frac{\\sum_{i=0}^{f_0}\\sum_{j=0}^{f_1}\\mathsf{I}_{in}(f_0
    x_o+i,f_1 x_1+j)}{f_0 f_1} \\]

    This filter is implemented so that the starting extent of the first
    pixel of the output matches that of the input.

    The change in image geometry from a 5x5 image binned by a factor of
    2x2.

    This code was contributed in the Insight Journal paper: "BinShrink: A
    multi-resolution filter with cache efficient averaging" by Lowekamp
    B., Chen D.https://hdl.handle.net/10380/3450 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIF2IF2_Clone)
    SetShrinkFactors = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIF2IF2_SetShrinkFactors)
    SetShrinkFactor = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIF2IF2_SetShrinkFactor)
    GetShrinkFactors = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIF2IF2_GetShrinkFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIF2IF2_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIF2IF2_GenerateInputRequestedRegion)
    InputConvertibleToOutputCheck = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIF2IF2_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIF2IF2_SameDimensionCheck
    
    __swig_destroy__ = _itkBinShrinkImageFilterPython.delete_itkBinShrinkImageFilterIF2IF2
    cast = _swig_new_static_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkBinShrinkImageFilterIF2IF2

        Create a new object of the class itkBinShrinkImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinShrinkImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinShrinkImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinShrinkImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinShrinkImageFilterIF2IF2 in _itkBinShrinkImageFilterPython:
_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIF2IF2_swigregister(itkBinShrinkImageFilterIF2IF2)
itkBinShrinkImageFilterIF2IF2___New_orig__ = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIF2IF2___New_orig__
itkBinShrinkImageFilterIF2IF2_cast = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIF2IF2_cast


def itkBinShrinkImageFilterIF3IF3_New():
    return itkBinShrinkImageFilterIF3IF3.New()

class itkBinShrinkImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""


    Reduce the size of an image by an integer factor in each dimension
    while performing averaging of an input neighborhood.

    The output image size in each dimension is given by:

    outputSize[j] = max( std::floor(inputSize[j]/shrinkFactor[j]), 1 );

    The algorithm implemented can be describe with the following equation
    for 2D: \\[ \\mathsf{I}_{out}(x_o,x_1) =
    \\frac{\\sum_{i=0}^{f_0}\\sum_{j=0}^{f_1}\\mathsf{I}_{in}(f_0
    x_o+i,f_1 x_1+j)}{f_0 f_1} \\]

    This filter is implemented so that the starting extent of the first
    pixel of the output matches that of the input.

    The change in image geometry from a 5x5 image binned by a factor of
    2x2.

    This code was contributed in the Insight Journal paper: "BinShrink: A
    multi-resolution filter with cache efficient averaging" by Lowekamp
    B., Chen D.https://hdl.handle.net/10380/3450 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIF3IF3_Clone)
    SetShrinkFactors = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIF3IF3_SetShrinkFactors)
    SetShrinkFactor = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIF3IF3_SetShrinkFactor)
    GetShrinkFactors = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIF3IF3_GetShrinkFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIF3IF3_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIF3IF3_GenerateInputRequestedRegion)
    InputConvertibleToOutputCheck = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIF3IF3_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIF3IF3_SameDimensionCheck
    
    __swig_destroy__ = _itkBinShrinkImageFilterPython.delete_itkBinShrinkImageFilterIF3IF3
    cast = _swig_new_static_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkBinShrinkImageFilterIF3IF3

        Create a new object of the class itkBinShrinkImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinShrinkImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinShrinkImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinShrinkImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinShrinkImageFilterIF3IF3 in _itkBinShrinkImageFilterPython:
_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIF3IF3_swigregister(itkBinShrinkImageFilterIF3IF3)
itkBinShrinkImageFilterIF3IF3___New_orig__ = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIF3IF3___New_orig__
itkBinShrinkImageFilterIF3IF3_cast = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIF3IF3_cast


def itkBinShrinkImageFilterIRGBAUC2IRGBAUC2_New():
    return itkBinShrinkImageFilterIRGBAUC2IRGBAUC2.New()

class itkBinShrinkImageFilterIRGBAUC2IRGBAUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIRGBAUC2IRGBAUC2):
    r"""


    Reduce the size of an image by an integer factor in each dimension
    while performing averaging of an input neighborhood.

    The output image size in each dimension is given by:

    outputSize[j] = max( std::floor(inputSize[j]/shrinkFactor[j]), 1 );

    The algorithm implemented can be describe with the following equation
    for 2D: \\[ \\mathsf{I}_{out}(x_o,x_1) =
    \\frac{\\sum_{i=0}^{f_0}\\sum_{j=0}^{f_1}\\mathsf{I}_{in}(f_0
    x_o+i,f_1 x_1+j)}{f_0 f_1} \\]

    This filter is implemented so that the starting extent of the first
    pixel of the output matches that of the input.

    The change in image geometry from a 5x5 image binned by a factor of
    2x2.

    This code was contributed in the Insight Journal paper: "BinShrink: A
    multi-resolution filter with cache efficient averaging" by Lowekamp
    B., Chen D.https://hdl.handle.net/10380/3450 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIRGBAUC2IRGBAUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIRGBAUC2IRGBAUC2_Clone)
    SetShrinkFactors = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIRGBAUC2IRGBAUC2_SetShrinkFactors)
    SetShrinkFactor = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIRGBAUC2IRGBAUC2_SetShrinkFactor)
    GetShrinkFactors = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIRGBAUC2IRGBAUC2_GetShrinkFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIRGBAUC2IRGBAUC2_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIRGBAUC2IRGBAUC2_GenerateInputRequestedRegion)
    InputConvertibleToOutputCheck = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIRGBAUC2IRGBAUC2_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIRGBAUC2IRGBAUC2_SameDimensionCheck
    
    __swig_destroy__ = _itkBinShrinkImageFilterPython.delete_itkBinShrinkImageFilterIRGBAUC2IRGBAUC2
    cast = _swig_new_static_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIRGBAUC2IRGBAUC2_cast)

    def New(*args, **kargs):
        """New() -> itkBinShrinkImageFilterIRGBAUC2IRGBAUC2

        Create a new object of the class itkBinShrinkImageFilterIRGBAUC2IRGBAUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinShrinkImageFilterIRGBAUC2IRGBAUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinShrinkImageFilterIRGBAUC2IRGBAUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinShrinkImageFilterIRGBAUC2IRGBAUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinShrinkImageFilterIRGBAUC2IRGBAUC2 in _itkBinShrinkImageFilterPython:
_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIRGBAUC2IRGBAUC2_swigregister(itkBinShrinkImageFilterIRGBAUC2IRGBAUC2)
itkBinShrinkImageFilterIRGBAUC2IRGBAUC2___New_orig__ = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIRGBAUC2IRGBAUC2___New_orig__
itkBinShrinkImageFilterIRGBAUC2IRGBAUC2_cast = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIRGBAUC2IRGBAUC2_cast


def itkBinShrinkImageFilterIRGBAUC3IRGBAUC3_New():
    return itkBinShrinkImageFilterIRGBAUC3IRGBAUC3.New()

class itkBinShrinkImageFilterIRGBAUC3IRGBAUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIRGBAUC3IRGBAUC3):
    r"""


    Reduce the size of an image by an integer factor in each dimension
    while performing averaging of an input neighborhood.

    The output image size in each dimension is given by:

    outputSize[j] = max( std::floor(inputSize[j]/shrinkFactor[j]), 1 );

    The algorithm implemented can be describe with the following equation
    for 2D: \\[ \\mathsf{I}_{out}(x_o,x_1) =
    \\frac{\\sum_{i=0}^{f_0}\\sum_{j=0}^{f_1}\\mathsf{I}_{in}(f_0
    x_o+i,f_1 x_1+j)}{f_0 f_1} \\]

    This filter is implemented so that the starting extent of the first
    pixel of the output matches that of the input.

    The change in image geometry from a 5x5 image binned by a factor of
    2x2.

    This code was contributed in the Insight Journal paper: "BinShrink: A
    multi-resolution filter with cache efficient averaging" by Lowekamp
    B., Chen D.https://hdl.handle.net/10380/3450 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIRGBAUC3IRGBAUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIRGBAUC3IRGBAUC3_Clone)
    SetShrinkFactors = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIRGBAUC3IRGBAUC3_SetShrinkFactors)
    SetShrinkFactor = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIRGBAUC3IRGBAUC3_SetShrinkFactor)
    GetShrinkFactors = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIRGBAUC3IRGBAUC3_GetShrinkFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIRGBAUC3IRGBAUC3_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIRGBAUC3IRGBAUC3_GenerateInputRequestedRegion)
    InputConvertibleToOutputCheck = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIRGBAUC3IRGBAUC3_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIRGBAUC3IRGBAUC3_SameDimensionCheck
    
    __swig_destroy__ = _itkBinShrinkImageFilterPython.delete_itkBinShrinkImageFilterIRGBAUC3IRGBAUC3
    cast = _swig_new_static_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIRGBAUC3IRGBAUC3_cast)

    def New(*args, **kargs):
        """New() -> itkBinShrinkImageFilterIRGBAUC3IRGBAUC3

        Create a new object of the class itkBinShrinkImageFilterIRGBAUC3IRGBAUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinShrinkImageFilterIRGBAUC3IRGBAUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinShrinkImageFilterIRGBAUC3IRGBAUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinShrinkImageFilterIRGBAUC3IRGBAUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinShrinkImageFilterIRGBAUC3IRGBAUC3 in _itkBinShrinkImageFilterPython:
_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIRGBAUC3IRGBAUC3_swigregister(itkBinShrinkImageFilterIRGBAUC3IRGBAUC3)
itkBinShrinkImageFilterIRGBAUC3IRGBAUC3___New_orig__ = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIRGBAUC3IRGBAUC3___New_orig__
itkBinShrinkImageFilterIRGBAUC3IRGBAUC3_cast = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIRGBAUC3IRGBAUC3_cast


def itkBinShrinkImageFilterIRGBUC2IRGBUC2_New():
    return itkBinShrinkImageFilterIRGBUC2IRGBUC2.New()

class itkBinShrinkImageFilterIRGBUC2IRGBUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIRGBUC2IRGBUC2):
    r"""


    Reduce the size of an image by an integer factor in each dimension
    while performing averaging of an input neighborhood.

    The output image size in each dimension is given by:

    outputSize[j] = max( std::floor(inputSize[j]/shrinkFactor[j]), 1 );

    The algorithm implemented can be describe with the following equation
    for 2D: \\[ \\mathsf{I}_{out}(x_o,x_1) =
    \\frac{\\sum_{i=0}^{f_0}\\sum_{j=0}^{f_1}\\mathsf{I}_{in}(f_0
    x_o+i,f_1 x_1+j)}{f_0 f_1} \\]

    This filter is implemented so that the starting extent of the first
    pixel of the output matches that of the input.

    The change in image geometry from a 5x5 image binned by a factor of
    2x2.

    This code was contributed in the Insight Journal paper: "BinShrink: A
    multi-resolution filter with cache efficient averaging" by Lowekamp
    B., Chen D.https://hdl.handle.net/10380/3450 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIRGBUC2IRGBUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIRGBUC2IRGBUC2_Clone)
    SetShrinkFactors = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIRGBUC2IRGBUC2_SetShrinkFactors)
    SetShrinkFactor = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIRGBUC2IRGBUC2_SetShrinkFactor)
    GetShrinkFactors = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIRGBUC2IRGBUC2_GetShrinkFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIRGBUC2IRGBUC2_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIRGBUC2IRGBUC2_GenerateInputRequestedRegion)
    InputConvertibleToOutputCheck = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIRGBUC2IRGBUC2_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIRGBUC2IRGBUC2_SameDimensionCheck
    
    __swig_destroy__ = _itkBinShrinkImageFilterPython.delete_itkBinShrinkImageFilterIRGBUC2IRGBUC2
    cast = _swig_new_static_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIRGBUC2IRGBUC2_cast)

    def New(*args, **kargs):
        """New() -> itkBinShrinkImageFilterIRGBUC2IRGBUC2

        Create a new object of the class itkBinShrinkImageFilterIRGBUC2IRGBUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinShrinkImageFilterIRGBUC2IRGBUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinShrinkImageFilterIRGBUC2IRGBUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinShrinkImageFilterIRGBUC2IRGBUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinShrinkImageFilterIRGBUC2IRGBUC2 in _itkBinShrinkImageFilterPython:
_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIRGBUC2IRGBUC2_swigregister(itkBinShrinkImageFilterIRGBUC2IRGBUC2)
itkBinShrinkImageFilterIRGBUC2IRGBUC2___New_orig__ = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIRGBUC2IRGBUC2___New_orig__
itkBinShrinkImageFilterIRGBUC2IRGBUC2_cast = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIRGBUC2IRGBUC2_cast


def itkBinShrinkImageFilterIRGBUC3IRGBUC3_New():
    return itkBinShrinkImageFilterIRGBUC3IRGBUC3.New()

class itkBinShrinkImageFilterIRGBUC3IRGBUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIRGBUC3IRGBUC3):
    r"""


    Reduce the size of an image by an integer factor in each dimension
    while performing averaging of an input neighborhood.

    The output image size in each dimension is given by:

    outputSize[j] = max( std::floor(inputSize[j]/shrinkFactor[j]), 1 );

    The algorithm implemented can be describe with the following equation
    for 2D: \\[ \\mathsf{I}_{out}(x_o,x_1) =
    \\frac{\\sum_{i=0}^{f_0}\\sum_{j=0}^{f_1}\\mathsf{I}_{in}(f_0
    x_o+i,f_1 x_1+j)}{f_0 f_1} \\]

    This filter is implemented so that the starting extent of the first
    pixel of the output matches that of the input.

    The change in image geometry from a 5x5 image binned by a factor of
    2x2.

    This code was contributed in the Insight Journal paper: "BinShrink: A
    multi-resolution filter with cache efficient averaging" by Lowekamp
    B., Chen D.https://hdl.handle.net/10380/3450 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIRGBUC3IRGBUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIRGBUC3IRGBUC3_Clone)
    SetShrinkFactors = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIRGBUC3IRGBUC3_SetShrinkFactors)
    SetShrinkFactor = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIRGBUC3IRGBUC3_SetShrinkFactor)
    GetShrinkFactors = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIRGBUC3IRGBUC3_GetShrinkFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIRGBUC3IRGBUC3_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIRGBUC3IRGBUC3_GenerateInputRequestedRegion)
    InputConvertibleToOutputCheck = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIRGBUC3IRGBUC3_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIRGBUC3IRGBUC3_SameDimensionCheck
    
    __swig_destroy__ = _itkBinShrinkImageFilterPython.delete_itkBinShrinkImageFilterIRGBUC3IRGBUC3
    cast = _swig_new_static_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIRGBUC3IRGBUC3_cast)

    def New(*args, **kargs):
        """New() -> itkBinShrinkImageFilterIRGBUC3IRGBUC3

        Create a new object of the class itkBinShrinkImageFilterIRGBUC3IRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinShrinkImageFilterIRGBUC3IRGBUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinShrinkImageFilterIRGBUC3IRGBUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinShrinkImageFilterIRGBUC3IRGBUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinShrinkImageFilterIRGBUC3IRGBUC3 in _itkBinShrinkImageFilterPython:
_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIRGBUC3IRGBUC3_swigregister(itkBinShrinkImageFilterIRGBUC3IRGBUC3)
itkBinShrinkImageFilterIRGBUC3IRGBUC3___New_orig__ = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIRGBUC3IRGBUC3___New_orig__
itkBinShrinkImageFilterIRGBUC3IRGBUC3_cast = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIRGBUC3IRGBUC3_cast


def itkBinShrinkImageFilterISS2ISS2_New():
    return itkBinShrinkImageFilterISS2ISS2.New()

class itkBinShrinkImageFilterISS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""


    Reduce the size of an image by an integer factor in each dimension
    while performing averaging of an input neighborhood.

    The output image size in each dimension is given by:

    outputSize[j] = max( std::floor(inputSize[j]/shrinkFactor[j]), 1 );

    The algorithm implemented can be describe with the following equation
    for 2D: \\[ \\mathsf{I}_{out}(x_o,x_1) =
    \\frac{\\sum_{i=0}^{f_0}\\sum_{j=0}^{f_1}\\mathsf{I}_{in}(f_0
    x_o+i,f_1 x_1+j)}{f_0 f_1} \\]

    This filter is implemented so that the starting extent of the first
    pixel of the output matches that of the input.

    The change in image geometry from a 5x5 image binned by a factor of
    2x2.

    This code was contributed in the Insight Journal paper: "BinShrink: A
    multi-resolution filter with cache efficient averaging" by Lowekamp
    B., Chen D.https://hdl.handle.net/10380/3450 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterISS2ISS2_Clone)
    SetShrinkFactors = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterISS2ISS2_SetShrinkFactors)
    SetShrinkFactor = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterISS2ISS2_SetShrinkFactor)
    GetShrinkFactors = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterISS2ISS2_GetShrinkFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterISS2ISS2_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterISS2ISS2_GenerateInputRequestedRegion)
    InputConvertibleToOutputCheck = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterISS2ISS2_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterISS2ISS2_SameDimensionCheck
    
    __swig_destroy__ = _itkBinShrinkImageFilterPython.delete_itkBinShrinkImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkBinShrinkImageFilterISS2ISS2

        Create a new object of the class itkBinShrinkImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinShrinkImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinShrinkImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinShrinkImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinShrinkImageFilterISS2ISS2 in _itkBinShrinkImageFilterPython:
_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterISS2ISS2_swigregister(itkBinShrinkImageFilterISS2ISS2)
itkBinShrinkImageFilterISS2ISS2___New_orig__ = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterISS2ISS2___New_orig__
itkBinShrinkImageFilterISS2ISS2_cast = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterISS2ISS2_cast


def itkBinShrinkImageFilterISS3ISS3_New():
    return itkBinShrinkImageFilterISS3ISS3.New()

class itkBinShrinkImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""


    Reduce the size of an image by an integer factor in each dimension
    while performing averaging of an input neighborhood.

    The output image size in each dimension is given by:

    outputSize[j] = max( std::floor(inputSize[j]/shrinkFactor[j]), 1 );

    The algorithm implemented can be describe with the following equation
    for 2D: \\[ \\mathsf{I}_{out}(x_o,x_1) =
    \\frac{\\sum_{i=0}^{f_0}\\sum_{j=0}^{f_1}\\mathsf{I}_{in}(f_0
    x_o+i,f_1 x_1+j)}{f_0 f_1} \\]

    This filter is implemented so that the starting extent of the first
    pixel of the output matches that of the input.

    The change in image geometry from a 5x5 image binned by a factor of
    2x2.

    This code was contributed in the Insight Journal paper: "BinShrink: A
    multi-resolution filter with cache efficient averaging" by Lowekamp
    B., Chen D.https://hdl.handle.net/10380/3450 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterISS3ISS3_Clone)
    SetShrinkFactors = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterISS3ISS3_SetShrinkFactors)
    SetShrinkFactor = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterISS3ISS3_SetShrinkFactor)
    GetShrinkFactors = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterISS3ISS3_GetShrinkFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterISS3ISS3_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterISS3ISS3_GenerateInputRequestedRegion)
    InputConvertibleToOutputCheck = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterISS3ISS3_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterISS3ISS3_SameDimensionCheck
    
    __swig_destroy__ = _itkBinShrinkImageFilterPython.delete_itkBinShrinkImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkBinShrinkImageFilterISS3ISS3

        Create a new object of the class itkBinShrinkImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinShrinkImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinShrinkImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinShrinkImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinShrinkImageFilterISS3ISS3 in _itkBinShrinkImageFilterPython:
_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterISS3ISS3_swigregister(itkBinShrinkImageFilterISS3ISS3)
itkBinShrinkImageFilterISS3ISS3___New_orig__ = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterISS3ISS3___New_orig__
itkBinShrinkImageFilterISS3ISS3_cast = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterISS3ISS3_cast


def itkBinShrinkImageFilterIUC2IUC2_New():
    return itkBinShrinkImageFilterIUC2IUC2.New()

class itkBinShrinkImageFilterIUC2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""


    Reduce the size of an image by an integer factor in each dimension
    while performing averaging of an input neighborhood.

    The output image size in each dimension is given by:

    outputSize[j] = max( std::floor(inputSize[j]/shrinkFactor[j]), 1 );

    The algorithm implemented can be describe with the following equation
    for 2D: \\[ \\mathsf{I}_{out}(x_o,x_1) =
    \\frac{\\sum_{i=0}^{f_0}\\sum_{j=0}^{f_1}\\mathsf{I}_{in}(f_0
    x_o+i,f_1 x_1+j)}{f_0 f_1} \\]

    This filter is implemented so that the starting extent of the first
    pixel of the output matches that of the input.

    The change in image geometry from a 5x5 image binned by a factor of
    2x2.

    This code was contributed in the Insight Journal paper: "BinShrink: A
    multi-resolution filter with cache efficient averaging" by Lowekamp
    B., Chen D.https://hdl.handle.net/10380/3450 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIUC2IUC2_Clone)
    SetShrinkFactors = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIUC2IUC2_SetShrinkFactors)
    SetShrinkFactor = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIUC2IUC2_SetShrinkFactor)
    GetShrinkFactors = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIUC2IUC2_GetShrinkFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIUC2IUC2_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIUC2IUC2_GenerateInputRequestedRegion)
    InputConvertibleToOutputCheck = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIUC2IUC2_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIUC2IUC2_SameDimensionCheck
    
    __swig_destroy__ = _itkBinShrinkImageFilterPython.delete_itkBinShrinkImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkBinShrinkImageFilterIUC2IUC2

        Create a new object of the class itkBinShrinkImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinShrinkImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinShrinkImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinShrinkImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinShrinkImageFilterIUC2IUC2 in _itkBinShrinkImageFilterPython:
_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIUC2IUC2_swigregister(itkBinShrinkImageFilterIUC2IUC2)
itkBinShrinkImageFilterIUC2IUC2___New_orig__ = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIUC2IUC2___New_orig__
itkBinShrinkImageFilterIUC2IUC2_cast = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIUC2IUC2_cast


def itkBinShrinkImageFilterIUC3IUC3_New():
    return itkBinShrinkImageFilterIUC3IUC3.New()

class itkBinShrinkImageFilterIUC3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""


    Reduce the size of an image by an integer factor in each dimension
    while performing averaging of an input neighborhood.

    The output image size in each dimension is given by:

    outputSize[j] = max( std::floor(inputSize[j]/shrinkFactor[j]), 1 );

    The algorithm implemented can be describe with the following equation
    for 2D: \\[ \\mathsf{I}_{out}(x_o,x_1) =
    \\frac{\\sum_{i=0}^{f_0}\\sum_{j=0}^{f_1}\\mathsf{I}_{in}(f_0
    x_o+i,f_1 x_1+j)}{f_0 f_1} \\]

    This filter is implemented so that the starting extent of the first
    pixel of the output matches that of the input.

    The change in image geometry from a 5x5 image binned by a factor of
    2x2.

    This code was contributed in the Insight Journal paper: "BinShrink: A
    multi-resolution filter with cache efficient averaging" by Lowekamp
    B., Chen D.https://hdl.handle.net/10380/3450 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIUC3IUC3_Clone)
    SetShrinkFactors = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIUC3IUC3_SetShrinkFactors)
    SetShrinkFactor = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIUC3IUC3_SetShrinkFactor)
    GetShrinkFactors = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIUC3IUC3_GetShrinkFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIUC3IUC3_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIUC3IUC3_GenerateInputRequestedRegion)
    InputConvertibleToOutputCheck = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIUC3IUC3_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIUC3IUC3_SameDimensionCheck
    
    __swig_destroy__ = _itkBinShrinkImageFilterPython.delete_itkBinShrinkImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkBinShrinkImageFilterIUC3IUC3

        Create a new object of the class itkBinShrinkImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinShrinkImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinShrinkImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinShrinkImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinShrinkImageFilterIUC3IUC3 in _itkBinShrinkImageFilterPython:
_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIUC3IUC3_swigregister(itkBinShrinkImageFilterIUC3IUC3)
itkBinShrinkImageFilterIUC3IUC3___New_orig__ = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIUC3IUC3___New_orig__
itkBinShrinkImageFilterIUC3IUC3_cast = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIUC3IUC3_cast


def itkBinShrinkImageFilterIUS2IUS2_New():
    return itkBinShrinkImageFilterIUS2IUS2.New()

class itkBinShrinkImageFilterIUS2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""


    Reduce the size of an image by an integer factor in each dimension
    while performing averaging of an input neighborhood.

    The output image size in each dimension is given by:

    outputSize[j] = max( std::floor(inputSize[j]/shrinkFactor[j]), 1 );

    The algorithm implemented can be describe with the following equation
    for 2D: \\[ \\mathsf{I}_{out}(x_o,x_1) =
    \\frac{\\sum_{i=0}^{f_0}\\sum_{j=0}^{f_1}\\mathsf{I}_{in}(f_0
    x_o+i,f_1 x_1+j)}{f_0 f_1} \\]

    This filter is implemented so that the starting extent of the first
    pixel of the output matches that of the input.

    The change in image geometry from a 5x5 image binned by a factor of
    2x2.

    This code was contributed in the Insight Journal paper: "BinShrink: A
    multi-resolution filter with cache efficient averaging" by Lowekamp
    B., Chen D.https://hdl.handle.net/10380/3450 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIUS2IUS2_Clone)
    SetShrinkFactors = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIUS2IUS2_SetShrinkFactors)
    SetShrinkFactor = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIUS2IUS2_SetShrinkFactor)
    GetShrinkFactors = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIUS2IUS2_GetShrinkFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIUS2IUS2_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIUS2IUS2_GenerateInputRequestedRegion)
    InputConvertibleToOutputCheck = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIUS2IUS2_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIUS2IUS2_SameDimensionCheck
    
    __swig_destroy__ = _itkBinShrinkImageFilterPython.delete_itkBinShrinkImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkBinShrinkImageFilterIUS2IUS2

        Create a new object of the class itkBinShrinkImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinShrinkImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinShrinkImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinShrinkImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinShrinkImageFilterIUS2IUS2 in _itkBinShrinkImageFilterPython:
_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIUS2IUS2_swigregister(itkBinShrinkImageFilterIUS2IUS2)
itkBinShrinkImageFilterIUS2IUS2___New_orig__ = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIUS2IUS2___New_orig__
itkBinShrinkImageFilterIUS2IUS2_cast = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIUS2IUS2_cast


def itkBinShrinkImageFilterIUS3IUS3_New():
    return itkBinShrinkImageFilterIUS3IUS3.New()

class itkBinShrinkImageFilterIUS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""


    Reduce the size of an image by an integer factor in each dimension
    while performing averaging of an input neighborhood.

    The output image size in each dimension is given by:

    outputSize[j] = max( std::floor(inputSize[j]/shrinkFactor[j]), 1 );

    The algorithm implemented can be describe with the following equation
    for 2D: \\[ \\mathsf{I}_{out}(x_o,x_1) =
    \\frac{\\sum_{i=0}^{f_0}\\sum_{j=0}^{f_1}\\mathsf{I}_{in}(f_0
    x_o+i,f_1 x_1+j)}{f_0 f_1} \\]

    This filter is implemented so that the starting extent of the first
    pixel of the output matches that of the input.

    The change in image geometry from a 5x5 image binned by a factor of
    2x2.

    This code was contributed in the Insight Journal paper: "BinShrink: A
    multi-resolution filter with cache efficient averaging" by Lowekamp
    B., Chen D.https://hdl.handle.net/10380/3450 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIUS3IUS3_Clone)
    SetShrinkFactors = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIUS3IUS3_SetShrinkFactors)
    SetShrinkFactor = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIUS3IUS3_SetShrinkFactor)
    GetShrinkFactors = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIUS3IUS3_GetShrinkFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIUS3IUS3_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIUS3IUS3_GenerateInputRequestedRegion)
    InputConvertibleToOutputCheck = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIUS3IUS3_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIUS3IUS3_SameDimensionCheck
    
    __swig_destroy__ = _itkBinShrinkImageFilterPython.delete_itkBinShrinkImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkBinShrinkImageFilterIUS3IUS3

        Create a new object of the class itkBinShrinkImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinShrinkImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinShrinkImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinShrinkImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinShrinkImageFilterIUS3IUS3 in _itkBinShrinkImageFilterPython:
_itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIUS3IUS3_swigregister(itkBinShrinkImageFilterIUS3IUS3)
itkBinShrinkImageFilterIUS3IUS3___New_orig__ = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIUS3IUS3___New_orig__
itkBinShrinkImageFilterIUS3IUS3_cast = _itkBinShrinkImageFilterPython.itkBinShrinkImageFilterIUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def bin_shrink_image_filter(*args, **kwargs):
    """Procedural interface for BinShrinkImageFilter"""
    import itk
    instance = itk.BinShrinkImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def bin_shrink_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.BinShrinkImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.BinShrinkImageFilter.values()[0]
    else:
        filter_object = itk.BinShrinkImageFilter

    bin_shrink_image_filter.__doc__ = filter_object.__doc__
    bin_shrink_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    bin_shrink_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.BinShrinkImageFilter, itkTemplate.itkTemplate):
        bin_shrink_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        bin_shrink_image_filter.__doc__ += "\n"
        bin_shrink_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        bin_shrink_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



