# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKDistanceMapPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkSignedDanielssonDistanceMapImageFilterPython
else:
    import _itkSignedDanielssonDistanceMapImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkSignedDanielssonDistanceMapImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkSignedDanielssonDistanceMapImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImagePython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.ITKCommonBasePython
import itk.itkPointPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkRGBAPixelPython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython

def itkSignedDanielssonDistanceMapImageFilterID2ID2_New():
    return itkSignedDanielssonDistanceMapImageFilterID2ID2.New()

class itkSignedDanielssonDistanceMapImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""


    This filter computes the signed distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    This class is parameterized over the type of the input image and the
    type of the output image.

    For purposes of evaluating the signed distance map, the input is
    assumed to be binary composed of pixels with value 0 and non-zero.

    The inside is considered as having negative distances. Outside is
    treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    As a convention, the distance is evaluated from the boundary of the ON
    pixels.

    The filter returns A signed distance map with the approximation to the
    euclidean distance.

    A voronoi partition. (See itkDanielssonDistanceMapImageFilter)

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used. (See
    itkDanielssonDistanceMapImageFilter)

    This filter internally uses the DanielssonDistanceMap filter. This
    filter is N-dimensional.

    See:  itkDanielssonDistanceMapImageFilter
    {Filtering/DistanceMap/SignedDistanceMapOfBinary,Signed Distance Map
    Of Binary Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_Clone)
    SetSquaredDistance = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_SetSquaredDistance)
    GetSquaredDistance = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_GetSquaredDistance)
    SquaredDistanceOn = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_SquaredDistanceOn)
    SquaredDistanceOff = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_SquaredDistanceOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_UseImageSpacingOff)
    SetInsideIsPositive = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_SetInsideIsPositive)
    GetInsideIsPositive = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_GetInsideIsPositive)
    InsideIsPositiveOn = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_InsideIsPositiveOn)
    InsideIsPositiveOff = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_InsideIsPositiveOff)
    GetVoronoiMap = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_GetVoronoiMap)
    GetDistanceMap = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_GetDistanceMap)
    GetVectorDistanceMap = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_GetVectorDistanceMap)
    IntConvertibleToInputCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_IntConvertibleToInputCheck
    
    InputHasNumericTraitsCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSignedDanielssonDistanceMapImageFilterPython.delete_itkSignedDanielssonDistanceMapImageFilterID2ID2
    cast = _swig_new_static_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkSignedDanielssonDistanceMapImageFilterID2ID2

        Create a new object of the class itkSignedDanielssonDistanceMapImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedDanielssonDistanceMapImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSignedDanielssonDistanceMapImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSignedDanielssonDistanceMapImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSignedDanielssonDistanceMapImageFilterID2ID2 in _itkSignedDanielssonDistanceMapImageFilterPython:
_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_swigregister(itkSignedDanielssonDistanceMapImageFilterID2ID2)
itkSignedDanielssonDistanceMapImageFilterID2ID2___New_orig__ = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2___New_orig__
itkSignedDanielssonDistanceMapImageFilterID2ID2_cast = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_cast


def itkSignedDanielssonDistanceMapImageFilterID3ID3_New():
    return itkSignedDanielssonDistanceMapImageFilterID3ID3.New()

class itkSignedDanielssonDistanceMapImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""


    This filter computes the signed distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    This class is parameterized over the type of the input image and the
    type of the output image.

    For purposes of evaluating the signed distance map, the input is
    assumed to be binary composed of pixels with value 0 and non-zero.

    The inside is considered as having negative distances. Outside is
    treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    As a convention, the distance is evaluated from the boundary of the ON
    pixels.

    The filter returns A signed distance map with the approximation to the
    euclidean distance.

    A voronoi partition. (See itkDanielssonDistanceMapImageFilter)

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used. (See
    itkDanielssonDistanceMapImageFilter)

    This filter internally uses the DanielssonDistanceMap filter. This
    filter is N-dimensional.

    See:  itkDanielssonDistanceMapImageFilter
    {Filtering/DistanceMap/SignedDistanceMapOfBinary,Signed Distance Map
    Of Binary Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_Clone)
    SetSquaredDistance = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_SetSquaredDistance)
    GetSquaredDistance = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_GetSquaredDistance)
    SquaredDistanceOn = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_SquaredDistanceOn)
    SquaredDistanceOff = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_SquaredDistanceOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_UseImageSpacingOff)
    SetInsideIsPositive = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_SetInsideIsPositive)
    GetInsideIsPositive = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_GetInsideIsPositive)
    InsideIsPositiveOn = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_InsideIsPositiveOn)
    InsideIsPositiveOff = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_InsideIsPositiveOff)
    GetVoronoiMap = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_GetVoronoiMap)
    GetDistanceMap = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_GetDistanceMap)
    GetVectorDistanceMap = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_GetVectorDistanceMap)
    IntConvertibleToInputCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_IntConvertibleToInputCheck
    
    InputHasNumericTraitsCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSignedDanielssonDistanceMapImageFilterPython.delete_itkSignedDanielssonDistanceMapImageFilterID3ID3
    cast = _swig_new_static_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkSignedDanielssonDistanceMapImageFilterID3ID3

        Create a new object of the class itkSignedDanielssonDistanceMapImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedDanielssonDistanceMapImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSignedDanielssonDistanceMapImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSignedDanielssonDistanceMapImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSignedDanielssonDistanceMapImageFilterID3ID3 in _itkSignedDanielssonDistanceMapImageFilterPython:
_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_swigregister(itkSignedDanielssonDistanceMapImageFilterID3ID3)
itkSignedDanielssonDistanceMapImageFilterID3ID3___New_orig__ = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3___New_orig__
itkSignedDanielssonDistanceMapImageFilterID3ID3_cast = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_cast


def itkSignedDanielssonDistanceMapImageFilterIF2IF2_New():
    return itkSignedDanielssonDistanceMapImageFilterIF2IF2.New()

class itkSignedDanielssonDistanceMapImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""


    This filter computes the signed distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    This class is parameterized over the type of the input image and the
    type of the output image.

    For purposes of evaluating the signed distance map, the input is
    assumed to be binary composed of pixels with value 0 and non-zero.

    The inside is considered as having negative distances. Outside is
    treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    As a convention, the distance is evaluated from the boundary of the ON
    pixels.

    The filter returns A signed distance map with the approximation to the
    euclidean distance.

    A voronoi partition. (See itkDanielssonDistanceMapImageFilter)

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used. (See
    itkDanielssonDistanceMapImageFilter)

    This filter internally uses the DanielssonDistanceMap filter. This
    filter is N-dimensional.

    See:  itkDanielssonDistanceMapImageFilter
    {Filtering/DistanceMap/SignedDistanceMapOfBinary,Signed Distance Map
    Of Binary Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_Clone)
    SetSquaredDistance = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_SetSquaredDistance)
    GetSquaredDistance = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_GetSquaredDistance)
    SquaredDistanceOn = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_SquaredDistanceOn)
    SquaredDistanceOff = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_SquaredDistanceOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_UseImageSpacingOff)
    SetInsideIsPositive = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_SetInsideIsPositive)
    GetInsideIsPositive = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_GetInsideIsPositive)
    InsideIsPositiveOn = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_InsideIsPositiveOn)
    InsideIsPositiveOff = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_InsideIsPositiveOff)
    GetVoronoiMap = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_GetVoronoiMap)
    GetDistanceMap = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_GetDistanceMap)
    GetVectorDistanceMap = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_GetVectorDistanceMap)
    IntConvertibleToInputCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_IntConvertibleToInputCheck
    
    InputHasNumericTraitsCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSignedDanielssonDistanceMapImageFilterPython.delete_itkSignedDanielssonDistanceMapImageFilterIF2IF2
    cast = _swig_new_static_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkSignedDanielssonDistanceMapImageFilterIF2IF2

        Create a new object of the class itkSignedDanielssonDistanceMapImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedDanielssonDistanceMapImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSignedDanielssonDistanceMapImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSignedDanielssonDistanceMapImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSignedDanielssonDistanceMapImageFilterIF2IF2 in _itkSignedDanielssonDistanceMapImageFilterPython:
_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_swigregister(itkSignedDanielssonDistanceMapImageFilterIF2IF2)
itkSignedDanielssonDistanceMapImageFilterIF2IF2___New_orig__ = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2___New_orig__
itkSignedDanielssonDistanceMapImageFilterIF2IF2_cast = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_cast


def itkSignedDanielssonDistanceMapImageFilterIF3IF3_New():
    return itkSignedDanielssonDistanceMapImageFilterIF3IF3.New()

class itkSignedDanielssonDistanceMapImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""


    This filter computes the signed distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    This class is parameterized over the type of the input image and the
    type of the output image.

    For purposes of evaluating the signed distance map, the input is
    assumed to be binary composed of pixels with value 0 and non-zero.

    The inside is considered as having negative distances. Outside is
    treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    As a convention, the distance is evaluated from the boundary of the ON
    pixels.

    The filter returns A signed distance map with the approximation to the
    euclidean distance.

    A voronoi partition. (See itkDanielssonDistanceMapImageFilter)

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used. (See
    itkDanielssonDistanceMapImageFilter)

    This filter internally uses the DanielssonDistanceMap filter. This
    filter is N-dimensional.

    See:  itkDanielssonDistanceMapImageFilter
    {Filtering/DistanceMap/SignedDistanceMapOfBinary,Signed Distance Map
    Of Binary Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_Clone)
    SetSquaredDistance = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_SetSquaredDistance)
    GetSquaredDistance = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_GetSquaredDistance)
    SquaredDistanceOn = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_SquaredDistanceOn)
    SquaredDistanceOff = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_SquaredDistanceOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_UseImageSpacingOff)
    SetInsideIsPositive = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_SetInsideIsPositive)
    GetInsideIsPositive = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_GetInsideIsPositive)
    InsideIsPositiveOn = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_InsideIsPositiveOn)
    InsideIsPositiveOff = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_InsideIsPositiveOff)
    GetVoronoiMap = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_GetVoronoiMap)
    GetDistanceMap = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_GetDistanceMap)
    GetVectorDistanceMap = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_GetVectorDistanceMap)
    IntConvertibleToInputCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_IntConvertibleToInputCheck
    
    InputHasNumericTraitsCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSignedDanielssonDistanceMapImageFilterPython.delete_itkSignedDanielssonDistanceMapImageFilterIF3IF3
    cast = _swig_new_static_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkSignedDanielssonDistanceMapImageFilterIF3IF3

        Create a new object of the class itkSignedDanielssonDistanceMapImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedDanielssonDistanceMapImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSignedDanielssonDistanceMapImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSignedDanielssonDistanceMapImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSignedDanielssonDistanceMapImageFilterIF3IF3 in _itkSignedDanielssonDistanceMapImageFilterPython:
_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_swigregister(itkSignedDanielssonDistanceMapImageFilterIF3IF3)
itkSignedDanielssonDistanceMapImageFilterIF3IF3___New_orig__ = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3___New_orig__
itkSignedDanielssonDistanceMapImageFilterIF3IF3_cast = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_cast


def itkSignedDanielssonDistanceMapImageFilterISS2ISS2_New():
    return itkSignedDanielssonDistanceMapImageFilterISS2ISS2.New()

class itkSignedDanielssonDistanceMapImageFilterISS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""


    This filter computes the signed distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    This class is parameterized over the type of the input image and the
    type of the output image.

    For purposes of evaluating the signed distance map, the input is
    assumed to be binary composed of pixels with value 0 and non-zero.

    The inside is considered as having negative distances. Outside is
    treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    As a convention, the distance is evaluated from the boundary of the ON
    pixels.

    The filter returns A signed distance map with the approximation to the
    euclidean distance.

    A voronoi partition. (See itkDanielssonDistanceMapImageFilter)

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used. (See
    itkDanielssonDistanceMapImageFilter)

    This filter internally uses the DanielssonDistanceMap filter. This
    filter is N-dimensional.

    See:  itkDanielssonDistanceMapImageFilter
    {Filtering/DistanceMap/SignedDistanceMapOfBinary,Signed Distance Map
    Of Binary Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_Clone)
    SetSquaredDistance = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_SetSquaredDistance)
    GetSquaredDistance = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_GetSquaredDistance)
    SquaredDistanceOn = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_SquaredDistanceOn)
    SquaredDistanceOff = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_SquaredDistanceOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_UseImageSpacingOff)
    SetInsideIsPositive = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_SetInsideIsPositive)
    GetInsideIsPositive = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_GetInsideIsPositive)
    InsideIsPositiveOn = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_InsideIsPositiveOn)
    InsideIsPositiveOff = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_InsideIsPositiveOff)
    GetVoronoiMap = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_GetVoronoiMap)
    GetDistanceMap = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_GetDistanceMap)
    GetVectorDistanceMap = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_GetVectorDistanceMap)
    IntConvertibleToInputCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_IntConvertibleToInputCheck
    
    InputHasNumericTraitsCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSignedDanielssonDistanceMapImageFilterPython.delete_itkSignedDanielssonDistanceMapImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkSignedDanielssonDistanceMapImageFilterISS2ISS2

        Create a new object of the class itkSignedDanielssonDistanceMapImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedDanielssonDistanceMapImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSignedDanielssonDistanceMapImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSignedDanielssonDistanceMapImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSignedDanielssonDistanceMapImageFilterISS2ISS2 in _itkSignedDanielssonDistanceMapImageFilterPython:
_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_swigregister(itkSignedDanielssonDistanceMapImageFilterISS2ISS2)
itkSignedDanielssonDistanceMapImageFilterISS2ISS2___New_orig__ = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2___New_orig__
itkSignedDanielssonDistanceMapImageFilterISS2ISS2_cast = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_cast


def itkSignedDanielssonDistanceMapImageFilterISS3ISS3_New():
    return itkSignedDanielssonDistanceMapImageFilterISS3ISS3.New()

class itkSignedDanielssonDistanceMapImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""


    This filter computes the signed distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    This class is parameterized over the type of the input image and the
    type of the output image.

    For purposes of evaluating the signed distance map, the input is
    assumed to be binary composed of pixels with value 0 and non-zero.

    The inside is considered as having negative distances. Outside is
    treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    As a convention, the distance is evaluated from the boundary of the ON
    pixels.

    The filter returns A signed distance map with the approximation to the
    euclidean distance.

    A voronoi partition. (See itkDanielssonDistanceMapImageFilter)

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used. (See
    itkDanielssonDistanceMapImageFilter)

    This filter internally uses the DanielssonDistanceMap filter. This
    filter is N-dimensional.

    See:  itkDanielssonDistanceMapImageFilter
    {Filtering/DistanceMap/SignedDistanceMapOfBinary,Signed Distance Map
    Of Binary Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_Clone)
    SetSquaredDistance = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_SetSquaredDistance)
    GetSquaredDistance = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_GetSquaredDistance)
    SquaredDistanceOn = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_SquaredDistanceOn)
    SquaredDistanceOff = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_SquaredDistanceOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_UseImageSpacingOff)
    SetInsideIsPositive = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_SetInsideIsPositive)
    GetInsideIsPositive = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_GetInsideIsPositive)
    InsideIsPositiveOn = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_InsideIsPositiveOn)
    InsideIsPositiveOff = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_InsideIsPositiveOff)
    GetVoronoiMap = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_GetVoronoiMap)
    GetDistanceMap = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_GetDistanceMap)
    GetVectorDistanceMap = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_GetVectorDistanceMap)
    IntConvertibleToInputCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_IntConvertibleToInputCheck
    
    InputHasNumericTraitsCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSignedDanielssonDistanceMapImageFilterPython.delete_itkSignedDanielssonDistanceMapImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkSignedDanielssonDistanceMapImageFilterISS3ISS3

        Create a new object of the class itkSignedDanielssonDistanceMapImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedDanielssonDistanceMapImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSignedDanielssonDistanceMapImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSignedDanielssonDistanceMapImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSignedDanielssonDistanceMapImageFilterISS3ISS3 in _itkSignedDanielssonDistanceMapImageFilterPython:
_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_swigregister(itkSignedDanielssonDistanceMapImageFilterISS3ISS3)
itkSignedDanielssonDistanceMapImageFilterISS3ISS3___New_orig__ = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3___New_orig__
itkSignedDanielssonDistanceMapImageFilterISS3ISS3_cast = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_cast


def itkSignedDanielssonDistanceMapImageFilterIUC2ID2_New():
    return itkSignedDanielssonDistanceMapImageFilterIUC2ID2.New()

class itkSignedDanielssonDistanceMapImageFilterIUC2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2ID2):
    r"""


    This filter computes the signed distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    This class is parameterized over the type of the input image and the
    type of the output image.

    For purposes of evaluating the signed distance map, the input is
    assumed to be binary composed of pixels with value 0 and non-zero.

    The inside is considered as having negative distances. Outside is
    treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    As a convention, the distance is evaluated from the boundary of the ON
    pixels.

    The filter returns A signed distance map with the approximation to the
    euclidean distance.

    A voronoi partition. (See itkDanielssonDistanceMapImageFilter)

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used. (See
    itkDanielssonDistanceMapImageFilter)

    This filter internally uses the DanielssonDistanceMap filter. This
    filter is N-dimensional.

    See:  itkDanielssonDistanceMapImageFilter
    {Filtering/DistanceMap/SignedDistanceMapOfBinary,Signed Distance Map
    Of Binary Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_Clone)
    SetSquaredDistance = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_SetSquaredDistance)
    GetSquaredDistance = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_GetSquaredDistance)
    SquaredDistanceOn = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_SquaredDistanceOn)
    SquaredDistanceOff = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_SquaredDistanceOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_UseImageSpacingOff)
    SetInsideIsPositive = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_SetInsideIsPositive)
    GetInsideIsPositive = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_GetInsideIsPositive)
    InsideIsPositiveOn = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_InsideIsPositiveOn)
    InsideIsPositiveOff = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_InsideIsPositiveOff)
    GetVoronoiMap = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_GetVoronoiMap)
    GetDistanceMap = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_GetDistanceMap)
    GetVectorDistanceMap = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_GetVectorDistanceMap)
    IntConvertibleToInputCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_IntConvertibleToInputCheck
    
    InputHasNumericTraitsCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSignedDanielssonDistanceMapImageFilterPython.delete_itkSignedDanielssonDistanceMapImageFilterIUC2ID2
    cast = _swig_new_static_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkSignedDanielssonDistanceMapImageFilterIUC2ID2

        Create a new object of the class itkSignedDanielssonDistanceMapImageFilterIUC2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedDanielssonDistanceMapImageFilterIUC2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSignedDanielssonDistanceMapImageFilterIUC2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSignedDanielssonDistanceMapImageFilterIUC2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSignedDanielssonDistanceMapImageFilterIUC2ID2 in _itkSignedDanielssonDistanceMapImageFilterPython:
_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_swigregister(itkSignedDanielssonDistanceMapImageFilterIUC2ID2)
itkSignedDanielssonDistanceMapImageFilterIUC2ID2___New_orig__ = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2___New_orig__
itkSignedDanielssonDistanceMapImageFilterIUC2ID2_cast = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_cast


def itkSignedDanielssonDistanceMapImageFilterIUC2IF2_New():
    return itkSignedDanielssonDistanceMapImageFilterIUC2IF2.New()

class itkSignedDanielssonDistanceMapImageFilterIUC2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IF2):
    r"""


    This filter computes the signed distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    This class is parameterized over the type of the input image and the
    type of the output image.

    For purposes of evaluating the signed distance map, the input is
    assumed to be binary composed of pixels with value 0 and non-zero.

    The inside is considered as having negative distances. Outside is
    treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    As a convention, the distance is evaluated from the boundary of the ON
    pixels.

    The filter returns A signed distance map with the approximation to the
    euclidean distance.

    A voronoi partition. (See itkDanielssonDistanceMapImageFilter)

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used. (See
    itkDanielssonDistanceMapImageFilter)

    This filter internally uses the DanielssonDistanceMap filter. This
    filter is N-dimensional.

    See:  itkDanielssonDistanceMapImageFilter
    {Filtering/DistanceMap/SignedDistanceMapOfBinary,Signed Distance Map
    Of Binary Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_Clone)
    SetSquaredDistance = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_SetSquaredDistance)
    GetSquaredDistance = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_GetSquaredDistance)
    SquaredDistanceOn = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_SquaredDistanceOn)
    SquaredDistanceOff = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_SquaredDistanceOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_UseImageSpacingOff)
    SetInsideIsPositive = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_SetInsideIsPositive)
    GetInsideIsPositive = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_GetInsideIsPositive)
    InsideIsPositiveOn = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_InsideIsPositiveOn)
    InsideIsPositiveOff = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_InsideIsPositiveOff)
    GetVoronoiMap = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_GetVoronoiMap)
    GetDistanceMap = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_GetDistanceMap)
    GetVectorDistanceMap = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_GetVectorDistanceMap)
    IntConvertibleToInputCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_IntConvertibleToInputCheck
    
    InputHasNumericTraitsCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSignedDanielssonDistanceMapImageFilterPython.delete_itkSignedDanielssonDistanceMapImageFilterIUC2IF2
    cast = _swig_new_static_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkSignedDanielssonDistanceMapImageFilterIUC2IF2

        Create a new object of the class itkSignedDanielssonDistanceMapImageFilterIUC2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedDanielssonDistanceMapImageFilterIUC2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSignedDanielssonDistanceMapImageFilterIUC2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSignedDanielssonDistanceMapImageFilterIUC2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSignedDanielssonDistanceMapImageFilterIUC2IF2 in _itkSignedDanielssonDistanceMapImageFilterPython:
_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_swigregister(itkSignedDanielssonDistanceMapImageFilterIUC2IF2)
itkSignedDanielssonDistanceMapImageFilterIUC2IF2___New_orig__ = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2___New_orig__
itkSignedDanielssonDistanceMapImageFilterIUC2IF2_cast = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_cast


def itkSignedDanielssonDistanceMapImageFilterIUC3ID3_New():
    return itkSignedDanielssonDistanceMapImageFilterIUC3ID3.New()

class itkSignedDanielssonDistanceMapImageFilterIUC3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3ID3):
    r"""


    This filter computes the signed distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    This class is parameterized over the type of the input image and the
    type of the output image.

    For purposes of evaluating the signed distance map, the input is
    assumed to be binary composed of pixels with value 0 and non-zero.

    The inside is considered as having negative distances. Outside is
    treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    As a convention, the distance is evaluated from the boundary of the ON
    pixels.

    The filter returns A signed distance map with the approximation to the
    euclidean distance.

    A voronoi partition. (See itkDanielssonDistanceMapImageFilter)

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used. (See
    itkDanielssonDistanceMapImageFilter)

    This filter internally uses the DanielssonDistanceMap filter. This
    filter is N-dimensional.

    See:  itkDanielssonDistanceMapImageFilter
    {Filtering/DistanceMap/SignedDistanceMapOfBinary,Signed Distance Map
    Of Binary Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_Clone)
    SetSquaredDistance = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_SetSquaredDistance)
    GetSquaredDistance = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_GetSquaredDistance)
    SquaredDistanceOn = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_SquaredDistanceOn)
    SquaredDistanceOff = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_SquaredDistanceOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_UseImageSpacingOff)
    SetInsideIsPositive = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_SetInsideIsPositive)
    GetInsideIsPositive = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_GetInsideIsPositive)
    InsideIsPositiveOn = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_InsideIsPositiveOn)
    InsideIsPositiveOff = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_InsideIsPositiveOff)
    GetVoronoiMap = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_GetVoronoiMap)
    GetDistanceMap = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_GetDistanceMap)
    GetVectorDistanceMap = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_GetVectorDistanceMap)
    IntConvertibleToInputCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_IntConvertibleToInputCheck
    
    InputHasNumericTraitsCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSignedDanielssonDistanceMapImageFilterPython.delete_itkSignedDanielssonDistanceMapImageFilterIUC3ID3
    cast = _swig_new_static_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkSignedDanielssonDistanceMapImageFilterIUC3ID3

        Create a new object of the class itkSignedDanielssonDistanceMapImageFilterIUC3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedDanielssonDistanceMapImageFilterIUC3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSignedDanielssonDistanceMapImageFilterIUC3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSignedDanielssonDistanceMapImageFilterIUC3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSignedDanielssonDistanceMapImageFilterIUC3ID3 in _itkSignedDanielssonDistanceMapImageFilterPython:
_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_swigregister(itkSignedDanielssonDistanceMapImageFilterIUC3ID3)
itkSignedDanielssonDistanceMapImageFilterIUC3ID3___New_orig__ = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3___New_orig__
itkSignedDanielssonDistanceMapImageFilterIUC3ID3_cast = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_cast


def itkSignedDanielssonDistanceMapImageFilterIUC3IF3_New():
    return itkSignedDanielssonDistanceMapImageFilterIUC3IF3.New()

class itkSignedDanielssonDistanceMapImageFilterIUC3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IF3):
    r"""


    This filter computes the signed distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    This class is parameterized over the type of the input image and the
    type of the output image.

    For purposes of evaluating the signed distance map, the input is
    assumed to be binary composed of pixels with value 0 and non-zero.

    The inside is considered as having negative distances. Outside is
    treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    As a convention, the distance is evaluated from the boundary of the ON
    pixels.

    The filter returns A signed distance map with the approximation to the
    euclidean distance.

    A voronoi partition. (See itkDanielssonDistanceMapImageFilter)

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used. (See
    itkDanielssonDistanceMapImageFilter)

    This filter internally uses the DanielssonDistanceMap filter. This
    filter is N-dimensional.

    See:  itkDanielssonDistanceMapImageFilter
    {Filtering/DistanceMap/SignedDistanceMapOfBinary,Signed Distance Map
    Of Binary Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_Clone)
    SetSquaredDistance = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_SetSquaredDistance)
    GetSquaredDistance = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_GetSquaredDistance)
    SquaredDistanceOn = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_SquaredDistanceOn)
    SquaredDistanceOff = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_SquaredDistanceOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_UseImageSpacingOff)
    SetInsideIsPositive = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_SetInsideIsPositive)
    GetInsideIsPositive = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_GetInsideIsPositive)
    InsideIsPositiveOn = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_InsideIsPositiveOn)
    InsideIsPositiveOff = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_InsideIsPositiveOff)
    GetVoronoiMap = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_GetVoronoiMap)
    GetDistanceMap = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_GetDistanceMap)
    GetVectorDistanceMap = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_GetVectorDistanceMap)
    IntConvertibleToInputCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_IntConvertibleToInputCheck
    
    InputHasNumericTraitsCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSignedDanielssonDistanceMapImageFilterPython.delete_itkSignedDanielssonDistanceMapImageFilterIUC3IF3
    cast = _swig_new_static_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkSignedDanielssonDistanceMapImageFilterIUC3IF3

        Create a new object of the class itkSignedDanielssonDistanceMapImageFilterIUC3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedDanielssonDistanceMapImageFilterIUC3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSignedDanielssonDistanceMapImageFilterIUC3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSignedDanielssonDistanceMapImageFilterIUC3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSignedDanielssonDistanceMapImageFilterIUC3IF3 in _itkSignedDanielssonDistanceMapImageFilterPython:
_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_swigregister(itkSignedDanielssonDistanceMapImageFilterIUC3IF3)
itkSignedDanielssonDistanceMapImageFilterIUC3IF3___New_orig__ = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3___New_orig__
itkSignedDanielssonDistanceMapImageFilterIUC3IF3_cast = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_cast


def itkSignedDanielssonDistanceMapImageFilterIUS2ID2_New():
    return itkSignedDanielssonDistanceMapImageFilterIUS2ID2.New()

class itkSignedDanielssonDistanceMapImageFilterIUS2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2ID2):
    r"""


    This filter computes the signed distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    This class is parameterized over the type of the input image and the
    type of the output image.

    For purposes of evaluating the signed distance map, the input is
    assumed to be binary composed of pixels with value 0 and non-zero.

    The inside is considered as having negative distances. Outside is
    treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    As a convention, the distance is evaluated from the boundary of the ON
    pixels.

    The filter returns A signed distance map with the approximation to the
    euclidean distance.

    A voronoi partition. (See itkDanielssonDistanceMapImageFilter)

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used. (See
    itkDanielssonDistanceMapImageFilter)

    This filter internally uses the DanielssonDistanceMap filter. This
    filter is N-dimensional.

    See:  itkDanielssonDistanceMapImageFilter
    {Filtering/DistanceMap/SignedDistanceMapOfBinary,Signed Distance Map
    Of Binary Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_Clone)
    SetSquaredDistance = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_SetSquaredDistance)
    GetSquaredDistance = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_GetSquaredDistance)
    SquaredDistanceOn = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_SquaredDistanceOn)
    SquaredDistanceOff = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_SquaredDistanceOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_UseImageSpacingOff)
    SetInsideIsPositive = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_SetInsideIsPositive)
    GetInsideIsPositive = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_GetInsideIsPositive)
    InsideIsPositiveOn = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_InsideIsPositiveOn)
    InsideIsPositiveOff = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_InsideIsPositiveOff)
    GetVoronoiMap = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_GetVoronoiMap)
    GetDistanceMap = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_GetDistanceMap)
    GetVectorDistanceMap = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_GetVectorDistanceMap)
    IntConvertibleToInputCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_IntConvertibleToInputCheck
    
    InputHasNumericTraitsCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSignedDanielssonDistanceMapImageFilterPython.delete_itkSignedDanielssonDistanceMapImageFilterIUS2ID2
    cast = _swig_new_static_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkSignedDanielssonDistanceMapImageFilterIUS2ID2

        Create a new object of the class itkSignedDanielssonDistanceMapImageFilterIUS2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedDanielssonDistanceMapImageFilterIUS2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSignedDanielssonDistanceMapImageFilterIUS2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSignedDanielssonDistanceMapImageFilterIUS2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSignedDanielssonDistanceMapImageFilterIUS2ID2 in _itkSignedDanielssonDistanceMapImageFilterPython:
_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_swigregister(itkSignedDanielssonDistanceMapImageFilterIUS2ID2)
itkSignedDanielssonDistanceMapImageFilterIUS2ID2___New_orig__ = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2___New_orig__
itkSignedDanielssonDistanceMapImageFilterIUS2ID2_cast = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_cast


def itkSignedDanielssonDistanceMapImageFilterIUS2IF2_New():
    return itkSignedDanielssonDistanceMapImageFilterIUS2IF2.New()

class itkSignedDanielssonDistanceMapImageFilterIUS2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IF2):
    r"""


    This filter computes the signed distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    This class is parameterized over the type of the input image and the
    type of the output image.

    For purposes of evaluating the signed distance map, the input is
    assumed to be binary composed of pixels with value 0 and non-zero.

    The inside is considered as having negative distances. Outside is
    treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    As a convention, the distance is evaluated from the boundary of the ON
    pixels.

    The filter returns A signed distance map with the approximation to the
    euclidean distance.

    A voronoi partition. (See itkDanielssonDistanceMapImageFilter)

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used. (See
    itkDanielssonDistanceMapImageFilter)

    This filter internally uses the DanielssonDistanceMap filter. This
    filter is N-dimensional.

    See:  itkDanielssonDistanceMapImageFilter
    {Filtering/DistanceMap/SignedDistanceMapOfBinary,Signed Distance Map
    Of Binary Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_Clone)
    SetSquaredDistance = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_SetSquaredDistance)
    GetSquaredDistance = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_GetSquaredDistance)
    SquaredDistanceOn = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_SquaredDistanceOn)
    SquaredDistanceOff = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_SquaredDistanceOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_UseImageSpacingOff)
    SetInsideIsPositive = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_SetInsideIsPositive)
    GetInsideIsPositive = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_GetInsideIsPositive)
    InsideIsPositiveOn = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_InsideIsPositiveOn)
    InsideIsPositiveOff = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_InsideIsPositiveOff)
    GetVoronoiMap = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_GetVoronoiMap)
    GetDistanceMap = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_GetDistanceMap)
    GetVectorDistanceMap = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_GetVectorDistanceMap)
    IntConvertibleToInputCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_IntConvertibleToInputCheck
    
    InputHasNumericTraitsCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSignedDanielssonDistanceMapImageFilterPython.delete_itkSignedDanielssonDistanceMapImageFilterIUS2IF2
    cast = _swig_new_static_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkSignedDanielssonDistanceMapImageFilterIUS2IF2

        Create a new object of the class itkSignedDanielssonDistanceMapImageFilterIUS2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedDanielssonDistanceMapImageFilterIUS2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSignedDanielssonDistanceMapImageFilterIUS2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSignedDanielssonDistanceMapImageFilterIUS2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSignedDanielssonDistanceMapImageFilterIUS2IF2 in _itkSignedDanielssonDistanceMapImageFilterPython:
_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_swigregister(itkSignedDanielssonDistanceMapImageFilterIUS2IF2)
itkSignedDanielssonDistanceMapImageFilterIUS2IF2___New_orig__ = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2___New_orig__
itkSignedDanielssonDistanceMapImageFilterIUS2IF2_cast = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_cast


def itkSignedDanielssonDistanceMapImageFilterIUS3ID3_New():
    return itkSignedDanielssonDistanceMapImageFilterIUS3ID3.New()

class itkSignedDanielssonDistanceMapImageFilterIUS3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3ID3):
    r"""


    This filter computes the signed distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    This class is parameterized over the type of the input image and the
    type of the output image.

    For purposes of evaluating the signed distance map, the input is
    assumed to be binary composed of pixels with value 0 and non-zero.

    The inside is considered as having negative distances. Outside is
    treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    As a convention, the distance is evaluated from the boundary of the ON
    pixels.

    The filter returns A signed distance map with the approximation to the
    euclidean distance.

    A voronoi partition. (See itkDanielssonDistanceMapImageFilter)

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used. (See
    itkDanielssonDistanceMapImageFilter)

    This filter internally uses the DanielssonDistanceMap filter. This
    filter is N-dimensional.

    See:  itkDanielssonDistanceMapImageFilter
    {Filtering/DistanceMap/SignedDistanceMapOfBinary,Signed Distance Map
    Of Binary Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_Clone)
    SetSquaredDistance = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_SetSquaredDistance)
    GetSquaredDistance = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_GetSquaredDistance)
    SquaredDistanceOn = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_SquaredDistanceOn)
    SquaredDistanceOff = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_SquaredDistanceOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_UseImageSpacingOff)
    SetInsideIsPositive = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_SetInsideIsPositive)
    GetInsideIsPositive = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_GetInsideIsPositive)
    InsideIsPositiveOn = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_InsideIsPositiveOn)
    InsideIsPositiveOff = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_InsideIsPositiveOff)
    GetVoronoiMap = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_GetVoronoiMap)
    GetDistanceMap = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_GetDistanceMap)
    GetVectorDistanceMap = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_GetVectorDistanceMap)
    IntConvertibleToInputCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_IntConvertibleToInputCheck
    
    InputHasNumericTraitsCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSignedDanielssonDistanceMapImageFilterPython.delete_itkSignedDanielssonDistanceMapImageFilterIUS3ID3
    cast = _swig_new_static_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkSignedDanielssonDistanceMapImageFilterIUS3ID3

        Create a new object of the class itkSignedDanielssonDistanceMapImageFilterIUS3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedDanielssonDistanceMapImageFilterIUS3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSignedDanielssonDistanceMapImageFilterIUS3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSignedDanielssonDistanceMapImageFilterIUS3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSignedDanielssonDistanceMapImageFilterIUS3ID3 in _itkSignedDanielssonDistanceMapImageFilterPython:
_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_swigregister(itkSignedDanielssonDistanceMapImageFilterIUS3ID3)
itkSignedDanielssonDistanceMapImageFilterIUS3ID3___New_orig__ = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3___New_orig__
itkSignedDanielssonDistanceMapImageFilterIUS3ID3_cast = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_cast


def itkSignedDanielssonDistanceMapImageFilterIUS3IF3_New():
    return itkSignedDanielssonDistanceMapImageFilterIUS3IF3.New()

class itkSignedDanielssonDistanceMapImageFilterIUS3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IF3):
    r"""


    This filter computes the signed distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    This class is parameterized over the type of the input image and the
    type of the output image.

    For purposes of evaluating the signed distance map, the input is
    assumed to be binary composed of pixels with value 0 and non-zero.

    The inside is considered as having negative distances. Outside is
    treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    As a convention, the distance is evaluated from the boundary of the ON
    pixels.

    The filter returns A signed distance map with the approximation to the
    euclidean distance.

    A voronoi partition. (See itkDanielssonDistanceMapImageFilter)

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used. (See
    itkDanielssonDistanceMapImageFilter)

    This filter internally uses the DanielssonDistanceMap filter. This
    filter is N-dimensional.

    See:  itkDanielssonDistanceMapImageFilter
    {Filtering/DistanceMap/SignedDistanceMapOfBinary,Signed Distance Map
    Of Binary Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_Clone)
    SetSquaredDistance = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_SetSquaredDistance)
    GetSquaredDistance = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_GetSquaredDistance)
    SquaredDistanceOn = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_SquaredDistanceOn)
    SquaredDistanceOff = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_SquaredDistanceOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_UseImageSpacingOff)
    SetInsideIsPositive = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_SetInsideIsPositive)
    GetInsideIsPositive = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_GetInsideIsPositive)
    InsideIsPositiveOn = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_InsideIsPositiveOn)
    InsideIsPositiveOff = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_InsideIsPositiveOff)
    GetVoronoiMap = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_GetVoronoiMap)
    GetDistanceMap = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_GetDistanceMap)
    GetVectorDistanceMap = _swig_new_instance_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_GetVectorDistanceMap)
    IntConvertibleToInputCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_IntConvertibleToInputCheck
    
    InputHasNumericTraitsCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSignedDanielssonDistanceMapImageFilterPython.delete_itkSignedDanielssonDistanceMapImageFilterIUS3IF3
    cast = _swig_new_static_method(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkSignedDanielssonDistanceMapImageFilterIUS3IF3

        Create a new object of the class itkSignedDanielssonDistanceMapImageFilterIUS3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedDanielssonDistanceMapImageFilterIUS3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSignedDanielssonDistanceMapImageFilterIUS3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSignedDanielssonDistanceMapImageFilterIUS3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSignedDanielssonDistanceMapImageFilterIUS3IF3 in _itkSignedDanielssonDistanceMapImageFilterPython:
_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_swigregister(itkSignedDanielssonDistanceMapImageFilterIUS3IF3)
itkSignedDanielssonDistanceMapImageFilterIUS3IF3___New_orig__ = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3___New_orig__
itkSignedDanielssonDistanceMapImageFilterIUS3IF3_cast = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def signed_danielsson_distance_map_image_filter(*args, **kwargs):
    """Procedural interface for SignedDanielssonDistanceMapImageFilter"""
    import itk
    instance = itk.SignedDanielssonDistanceMapImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def signed_danielsson_distance_map_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.SignedDanielssonDistanceMapImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.SignedDanielssonDistanceMapImageFilter.values()[0]
    else:
        filter_object = itk.SignedDanielssonDistanceMapImageFilter

    signed_danielsson_distance_map_image_filter.__doc__ = filter_object.__doc__
    signed_danielsson_distance_map_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    signed_danielsson_distance_map_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.SignedDanielssonDistanceMapImageFilter, itkTemplate.itkTemplate):
        signed_danielsson_distance_map_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        signed_danielsson_distance_map_image_filter.__doc__ += "\n"
        signed_danielsson_distance_map_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        signed_danielsson_distance_map_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



