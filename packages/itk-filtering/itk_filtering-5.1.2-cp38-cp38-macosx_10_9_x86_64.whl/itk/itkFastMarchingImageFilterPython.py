# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKFastMarchingPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkFastMarchingImageFilterPython
else:
    import _itkFastMarchingImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkFastMarchingImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkFastMarchingImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkMatrixPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.ITKCommonBasePython
import itk.ITKFastMarchingBasePython
import itk.itkNodePairPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkFastMarchingStoppingCriterionBasePython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageRegionPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkLevelSetNodePython
class itkFastMarchingImageFilterEnums(object):
    r"""Proxy of C++ itkFastMarchingImageFilterEnums class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Label_FarPoint = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterEnums_Label_FarPoint
    
    Label_AlivePoint = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterEnums_Label_AlivePoint
    
    Label_TrialPoint = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterEnums_Label_TrialPoint
    
    Label_InitialTrialPoint = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterEnums_Label_InitialTrialPoint
    
    Label_OutsidePoint = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterEnums_Label_OutsidePoint
    

    def __init__(self, *args):
        r"""
        __init__(itkFastMarchingImageFilterEnums self) -> itkFastMarchingImageFilterEnums
        __init__(itkFastMarchingImageFilterEnums self, itkFastMarchingImageFilterEnums arg0) -> itkFastMarchingImageFilterEnums
        """
        _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterEnums_swiginit(self, _itkFastMarchingImageFilterPython.new_itkFastMarchingImageFilterEnums(*args))
    __swig_destroy__ = _itkFastMarchingImageFilterPython.delete_itkFastMarchingImageFilterEnums

# Register itkFastMarchingImageFilterEnums in _itkFastMarchingImageFilterPython:
_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterEnums_swigregister(itkFastMarchingImageFilterEnums)


def itkFastMarchingImageFilterID2ID2_New():
    return itkFastMarchingImageFilterID2ID2.New()

class itkFastMarchingImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""


    Solve an Eikonal equation using Fast Marching.

    Fast marching solves an Eikonal equation where the speed is always
    non-negative and depends on the position only. Starting from an
    initial position on the front, fast marching systematically moves the
    front forward one grid point at a time.

    Updates are performed using an entropy satisfy scheme where only
    "upwind" neighborhoods are used. This implementation of Fast
    Marching uses a std::priority_queue to locate the next proper grid
    position to update.

    Fast Marching sweeps through N grid points in (N log N) steps to
    obtain the arrival time value as the front propagates through the
    grid.

    Implementation of this class is based on Chapter 8 of "Level Set
    Methods and Fast Marching Methods", J.A. Sethian, Cambridge Press,
    Second edition, 1999.

    This class is templated over the level set image type and the speed
    image type. The initial front is specified by two containers: one
    containing the known points and one containing the trial points. Alive
    points are those that are already part of the object, and trial points
    are considered for inclusion. In order for the filter to evolve, at
    least some trial points must be specified. These can for instance be
    specified as the layer of pixels around the alive points.

    The speed function can be specified as a speed image or a speed
    constant. The speed image is set using the method SetInput(). If the
    speed image is nullptr, a constant speed function is used and is
    specified using method the SetSpeedConstant().

    If the speed function is constant and of value one, fast marching
    results in an approximate distance function from the initial alive
    points. FastMarchingImageFilter is used in the
    ReinitializeLevelSetImageFilter object to create a signed distance
    function from the zero level set.

    The algorithm can be terminated early by setting an appropriate
    stopping value. The algorithm terminates when the current arrival time
    being processed is greater than the stopping value.

    There are two ways to specify the output image information (
    LargestPossibleRegion, Spacing, Origin): (a) it is copied directly
    from the input speed image or (b) it is specified by the user. Default
    values are used if the user does not specify all the information.

    The output information is computed as follows. If the speed image is
    nullptr or if the OverrideOutputInformation is set to true, the output
    information is set from user specified parameters. These parameters
    can be specified using methods SetOutputRegion(), SetOutputSpacing(),
    SetOutputDirection(), and SetOutputOrigin(). Else if the speed image
    is not nullptr, the output information is copied from the input speed
    image.

    For an alternative implementation, see itk::FastMarchingImageFilter.

    Possible Improvements: In the current implementation,
    std::priority_queue only allows taking nodes out from the front and
    putting nodes in from the back. To update a value already on the heap,
    a new node is added to the heap. The defunct old node is left on the
    heap. When it is removed from the top, it will be recognized as
    invalid and not used. Future implementations can implement the heap in
    a different way allowing the values to be updated. This will generally
    require some sift-up and sift-down functions and an image of back-
    pointers going from the image to heap in order to locate the node
    which is to be updated.

    See:   FastMarchingImageFilterBase

    See:  LevelSetTypeDefault 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_Clone)
    SetOutsidePoints = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_SetOutsidePoints)
    SetAlivePoints = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_SetAlivePoints)
    GetAlivePoints = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_GetAlivePoints)
    SetTrialPoints = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_SetTrialPoints)
    GetTrialPoints = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_GetTrialPoints)
    GetLabelImage = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_GetLabelImage)
    SetSpeedConstant = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_SetSpeedConstant)
    GetSpeedConstant = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_GetSpeedConstant)
    SetNormalizationFactor = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_SetNormalizationFactor)
    GetNormalizationFactor = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_GetNormalizationFactor)
    SetStoppingValue = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_SetStoppingValue)
    GetStoppingValue = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_GetStoppingValue)
    SetCollectPoints = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_SetCollectPoints)
    GetCollectPoints = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_GetCollectPoints)
    CollectPointsOn = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_CollectPointsOn)
    CollectPointsOff = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_CollectPointsOff)
    GetProcessedPoints = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_GetProcessedPoints)
    SetOutputSize = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_SetOutputSize)
    GetOutputSize = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_GetOutputSize)
    SetOutputRegion = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_SetOutputRegion)
    GetOutputRegion = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_GetOutputRegion)
    SetOutputSpacing = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_SetOutputSpacing)
    GetOutputSpacing = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_GetOutputSpacing)
    SetOutputDirection = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_SetOutputDirection)
    GetOutputDirection = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_GetOutputDirection)
    SetOutputOrigin = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_SetOutputOrigin)
    GetOutputOrigin = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_GetOutputOrigin)
    SetOverrideOutputInformation = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_SetOverrideOutputInformation)
    GetOverrideOutputInformation = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_GetOverrideOutputInformation)
    OverrideOutputInformationOn = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_OverrideOutputInformationOn)
    OverrideOutputInformationOff = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_OverrideOutputInformationOff)
    SameDimensionCheck = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_SameDimensionCheck
    
    SpeedConvertibleToDoubleCheck = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_SpeedConvertibleToDoubleCheck
    
    DoubleConvertibleToLevelSetCheck = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_DoubleConvertibleToLevelSetCheck
    
    LevelSetOStreamWritableCheck = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_LevelSetOStreamWritableCheck
    
    __swig_destroy__ = _itkFastMarchingImageFilterPython.delete_itkFastMarchingImageFilterID2ID2
    cast = _swig_new_static_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkFastMarchingImageFilterID2ID2

        Create a new object of the class itkFastMarchingImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFastMarchingImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFastMarchingImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFastMarchingImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFastMarchingImageFilterID2ID2 in _itkFastMarchingImageFilterPython:
_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_swigregister(itkFastMarchingImageFilterID2ID2)
itkFastMarchingImageFilterID2ID2___New_orig__ = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2___New_orig__
itkFastMarchingImageFilterID2ID2_cast = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_cast


def itkFastMarchingImageFilterID3ID3_New():
    return itkFastMarchingImageFilterID3ID3.New()

class itkFastMarchingImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""


    Solve an Eikonal equation using Fast Marching.

    Fast marching solves an Eikonal equation where the speed is always
    non-negative and depends on the position only. Starting from an
    initial position on the front, fast marching systematically moves the
    front forward one grid point at a time.

    Updates are performed using an entropy satisfy scheme where only
    "upwind" neighborhoods are used. This implementation of Fast
    Marching uses a std::priority_queue to locate the next proper grid
    position to update.

    Fast Marching sweeps through N grid points in (N log N) steps to
    obtain the arrival time value as the front propagates through the
    grid.

    Implementation of this class is based on Chapter 8 of "Level Set
    Methods and Fast Marching Methods", J.A. Sethian, Cambridge Press,
    Second edition, 1999.

    This class is templated over the level set image type and the speed
    image type. The initial front is specified by two containers: one
    containing the known points and one containing the trial points. Alive
    points are those that are already part of the object, and trial points
    are considered for inclusion. In order for the filter to evolve, at
    least some trial points must be specified. These can for instance be
    specified as the layer of pixels around the alive points.

    The speed function can be specified as a speed image or a speed
    constant. The speed image is set using the method SetInput(). If the
    speed image is nullptr, a constant speed function is used and is
    specified using method the SetSpeedConstant().

    If the speed function is constant and of value one, fast marching
    results in an approximate distance function from the initial alive
    points. FastMarchingImageFilter is used in the
    ReinitializeLevelSetImageFilter object to create a signed distance
    function from the zero level set.

    The algorithm can be terminated early by setting an appropriate
    stopping value. The algorithm terminates when the current arrival time
    being processed is greater than the stopping value.

    There are two ways to specify the output image information (
    LargestPossibleRegion, Spacing, Origin): (a) it is copied directly
    from the input speed image or (b) it is specified by the user. Default
    values are used if the user does not specify all the information.

    The output information is computed as follows. If the speed image is
    nullptr or if the OverrideOutputInformation is set to true, the output
    information is set from user specified parameters. These parameters
    can be specified using methods SetOutputRegion(), SetOutputSpacing(),
    SetOutputDirection(), and SetOutputOrigin(). Else if the speed image
    is not nullptr, the output information is copied from the input speed
    image.

    For an alternative implementation, see itk::FastMarchingImageFilter.

    Possible Improvements: In the current implementation,
    std::priority_queue only allows taking nodes out from the front and
    putting nodes in from the back. To update a value already on the heap,
    a new node is added to the heap. The defunct old node is left on the
    heap. When it is removed from the top, it will be recognized as
    invalid and not used. Future implementations can implement the heap in
    a different way allowing the values to be updated. This will generally
    require some sift-up and sift-down functions and an image of back-
    pointers going from the image to heap in order to locate the node
    which is to be updated.

    See:   FastMarchingImageFilterBase

    See:  LevelSetTypeDefault 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_Clone)
    SetOutsidePoints = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_SetOutsidePoints)
    SetAlivePoints = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_SetAlivePoints)
    GetAlivePoints = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_GetAlivePoints)
    SetTrialPoints = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_SetTrialPoints)
    GetTrialPoints = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_GetTrialPoints)
    GetLabelImage = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_GetLabelImage)
    SetSpeedConstant = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_SetSpeedConstant)
    GetSpeedConstant = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_GetSpeedConstant)
    SetNormalizationFactor = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_SetNormalizationFactor)
    GetNormalizationFactor = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_GetNormalizationFactor)
    SetStoppingValue = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_SetStoppingValue)
    GetStoppingValue = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_GetStoppingValue)
    SetCollectPoints = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_SetCollectPoints)
    GetCollectPoints = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_GetCollectPoints)
    CollectPointsOn = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_CollectPointsOn)
    CollectPointsOff = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_CollectPointsOff)
    GetProcessedPoints = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_GetProcessedPoints)
    SetOutputSize = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_SetOutputSize)
    GetOutputSize = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_GetOutputSize)
    SetOutputRegion = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_SetOutputRegion)
    GetOutputRegion = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_GetOutputRegion)
    SetOutputSpacing = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_SetOutputSpacing)
    GetOutputSpacing = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_GetOutputSpacing)
    SetOutputDirection = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_SetOutputDirection)
    GetOutputDirection = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_GetOutputDirection)
    SetOutputOrigin = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_SetOutputOrigin)
    GetOutputOrigin = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_GetOutputOrigin)
    SetOverrideOutputInformation = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_SetOverrideOutputInformation)
    GetOverrideOutputInformation = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_GetOverrideOutputInformation)
    OverrideOutputInformationOn = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_OverrideOutputInformationOn)
    OverrideOutputInformationOff = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_OverrideOutputInformationOff)
    SameDimensionCheck = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_SameDimensionCheck
    
    SpeedConvertibleToDoubleCheck = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_SpeedConvertibleToDoubleCheck
    
    DoubleConvertibleToLevelSetCheck = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_DoubleConvertibleToLevelSetCheck
    
    LevelSetOStreamWritableCheck = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_LevelSetOStreamWritableCheck
    
    __swig_destroy__ = _itkFastMarchingImageFilterPython.delete_itkFastMarchingImageFilterID3ID3
    cast = _swig_new_static_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkFastMarchingImageFilterID3ID3

        Create a new object of the class itkFastMarchingImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFastMarchingImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFastMarchingImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFastMarchingImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFastMarchingImageFilterID3ID3 in _itkFastMarchingImageFilterPython:
_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_swigregister(itkFastMarchingImageFilterID3ID3)
itkFastMarchingImageFilterID3ID3___New_orig__ = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3___New_orig__
itkFastMarchingImageFilterID3ID3_cast = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_cast


def itkFastMarchingImageFilterIF2IF2_New():
    return itkFastMarchingImageFilterIF2IF2.New()

class itkFastMarchingImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""


    Solve an Eikonal equation using Fast Marching.

    Fast marching solves an Eikonal equation where the speed is always
    non-negative and depends on the position only. Starting from an
    initial position on the front, fast marching systematically moves the
    front forward one grid point at a time.

    Updates are performed using an entropy satisfy scheme where only
    "upwind" neighborhoods are used. This implementation of Fast
    Marching uses a std::priority_queue to locate the next proper grid
    position to update.

    Fast Marching sweeps through N grid points in (N log N) steps to
    obtain the arrival time value as the front propagates through the
    grid.

    Implementation of this class is based on Chapter 8 of "Level Set
    Methods and Fast Marching Methods", J.A. Sethian, Cambridge Press,
    Second edition, 1999.

    This class is templated over the level set image type and the speed
    image type. The initial front is specified by two containers: one
    containing the known points and one containing the trial points. Alive
    points are those that are already part of the object, and trial points
    are considered for inclusion. In order for the filter to evolve, at
    least some trial points must be specified. These can for instance be
    specified as the layer of pixels around the alive points.

    The speed function can be specified as a speed image or a speed
    constant. The speed image is set using the method SetInput(). If the
    speed image is nullptr, a constant speed function is used and is
    specified using method the SetSpeedConstant().

    If the speed function is constant and of value one, fast marching
    results in an approximate distance function from the initial alive
    points. FastMarchingImageFilter is used in the
    ReinitializeLevelSetImageFilter object to create a signed distance
    function from the zero level set.

    The algorithm can be terminated early by setting an appropriate
    stopping value. The algorithm terminates when the current arrival time
    being processed is greater than the stopping value.

    There are two ways to specify the output image information (
    LargestPossibleRegion, Spacing, Origin): (a) it is copied directly
    from the input speed image or (b) it is specified by the user. Default
    values are used if the user does not specify all the information.

    The output information is computed as follows. If the speed image is
    nullptr or if the OverrideOutputInformation is set to true, the output
    information is set from user specified parameters. These parameters
    can be specified using methods SetOutputRegion(), SetOutputSpacing(),
    SetOutputDirection(), and SetOutputOrigin(). Else if the speed image
    is not nullptr, the output information is copied from the input speed
    image.

    For an alternative implementation, see itk::FastMarchingImageFilter.

    Possible Improvements: In the current implementation,
    std::priority_queue only allows taking nodes out from the front and
    putting nodes in from the back. To update a value already on the heap,
    a new node is added to the heap. The defunct old node is left on the
    heap. When it is removed from the top, it will be recognized as
    invalid and not used. Future implementations can implement the heap in
    a different way allowing the values to be updated. This will generally
    require some sift-up and sift-down functions and an image of back-
    pointers going from the image to heap in order to locate the node
    which is to be updated.

    See:   FastMarchingImageFilterBase

    See:  LevelSetTypeDefault 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_Clone)
    SetOutsidePoints = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_SetOutsidePoints)
    SetAlivePoints = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_SetAlivePoints)
    GetAlivePoints = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_GetAlivePoints)
    SetTrialPoints = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_SetTrialPoints)
    GetTrialPoints = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_GetTrialPoints)
    GetLabelImage = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_GetLabelImage)
    SetSpeedConstant = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_SetSpeedConstant)
    GetSpeedConstant = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_GetSpeedConstant)
    SetNormalizationFactor = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_SetNormalizationFactor)
    GetNormalizationFactor = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_GetNormalizationFactor)
    SetStoppingValue = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_SetStoppingValue)
    GetStoppingValue = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_GetStoppingValue)
    SetCollectPoints = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_SetCollectPoints)
    GetCollectPoints = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_GetCollectPoints)
    CollectPointsOn = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_CollectPointsOn)
    CollectPointsOff = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_CollectPointsOff)
    GetProcessedPoints = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_GetProcessedPoints)
    SetOutputSize = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_SetOutputSize)
    GetOutputSize = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_GetOutputSize)
    SetOutputRegion = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_SetOutputRegion)
    GetOutputRegion = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_GetOutputRegion)
    SetOutputSpacing = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_SetOutputSpacing)
    GetOutputSpacing = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_GetOutputSpacing)
    SetOutputDirection = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_SetOutputDirection)
    GetOutputDirection = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_GetOutputDirection)
    SetOutputOrigin = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_SetOutputOrigin)
    GetOutputOrigin = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_GetOutputOrigin)
    SetOverrideOutputInformation = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_SetOverrideOutputInformation)
    GetOverrideOutputInformation = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_GetOverrideOutputInformation)
    OverrideOutputInformationOn = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_OverrideOutputInformationOn)
    OverrideOutputInformationOff = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_OverrideOutputInformationOff)
    SameDimensionCheck = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_SameDimensionCheck
    
    SpeedConvertibleToDoubleCheck = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_SpeedConvertibleToDoubleCheck
    
    DoubleConvertibleToLevelSetCheck = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_DoubleConvertibleToLevelSetCheck
    
    LevelSetOStreamWritableCheck = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_LevelSetOStreamWritableCheck
    
    __swig_destroy__ = _itkFastMarchingImageFilterPython.delete_itkFastMarchingImageFilterIF2IF2
    cast = _swig_new_static_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkFastMarchingImageFilterIF2IF2

        Create a new object of the class itkFastMarchingImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFastMarchingImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFastMarchingImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFastMarchingImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFastMarchingImageFilterIF2IF2 in _itkFastMarchingImageFilterPython:
_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_swigregister(itkFastMarchingImageFilterIF2IF2)
itkFastMarchingImageFilterIF2IF2___New_orig__ = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2___New_orig__
itkFastMarchingImageFilterIF2IF2_cast = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_cast


def itkFastMarchingImageFilterIF3IF3_New():
    return itkFastMarchingImageFilterIF3IF3.New()

class itkFastMarchingImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""


    Solve an Eikonal equation using Fast Marching.

    Fast marching solves an Eikonal equation where the speed is always
    non-negative and depends on the position only. Starting from an
    initial position on the front, fast marching systematically moves the
    front forward one grid point at a time.

    Updates are performed using an entropy satisfy scheme where only
    "upwind" neighborhoods are used. This implementation of Fast
    Marching uses a std::priority_queue to locate the next proper grid
    position to update.

    Fast Marching sweeps through N grid points in (N log N) steps to
    obtain the arrival time value as the front propagates through the
    grid.

    Implementation of this class is based on Chapter 8 of "Level Set
    Methods and Fast Marching Methods", J.A. Sethian, Cambridge Press,
    Second edition, 1999.

    This class is templated over the level set image type and the speed
    image type. The initial front is specified by two containers: one
    containing the known points and one containing the trial points. Alive
    points are those that are already part of the object, and trial points
    are considered for inclusion. In order for the filter to evolve, at
    least some trial points must be specified. These can for instance be
    specified as the layer of pixels around the alive points.

    The speed function can be specified as a speed image or a speed
    constant. The speed image is set using the method SetInput(). If the
    speed image is nullptr, a constant speed function is used and is
    specified using method the SetSpeedConstant().

    If the speed function is constant and of value one, fast marching
    results in an approximate distance function from the initial alive
    points. FastMarchingImageFilter is used in the
    ReinitializeLevelSetImageFilter object to create a signed distance
    function from the zero level set.

    The algorithm can be terminated early by setting an appropriate
    stopping value. The algorithm terminates when the current arrival time
    being processed is greater than the stopping value.

    There are two ways to specify the output image information (
    LargestPossibleRegion, Spacing, Origin): (a) it is copied directly
    from the input speed image or (b) it is specified by the user. Default
    values are used if the user does not specify all the information.

    The output information is computed as follows. If the speed image is
    nullptr or if the OverrideOutputInformation is set to true, the output
    information is set from user specified parameters. These parameters
    can be specified using methods SetOutputRegion(), SetOutputSpacing(),
    SetOutputDirection(), and SetOutputOrigin(). Else if the speed image
    is not nullptr, the output information is copied from the input speed
    image.

    For an alternative implementation, see itk::FastMarchingImageFilter.

    Possible Improvements: In the current implementation,
    std::priority_queue only allows taking nodes out from the front and
    putting nodes in from the back. To update a value already on the heap,
    a new node is added to the heap. The defunct old node is left on the
    heap. When it is removed from the top, it will be recognized as
    invalid and not used. Future implementations can implement the heap in
    a different way allowing the values to be updated. This will generally
    require some sift-up and sift-down functions and an image of back-
    pointers going from the image to heap in order to locate the node
    which is to be updated.

    See:   FastMarchingImageFilterBase

    See:  LevelSetTypeDefault 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_Clone)
    SetOutsidePoints = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_SetOutsidePoints)
    SetAlivePoints = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_SetAlivePoints)
    GetAlivePoints = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_GetAlivePoints)
    SetTrialPoints = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_SetTrialPoints)
    GetTrialPoints = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_GetTrialPoints)
    GetLabelImage = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_GetLabelImage)
    SetSpeedConstant = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_SetSpeedConstant)
    GetSpeedConstant = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_GetSpeedConstant)
    SetNormalizationFactor = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_SetNormalizationFactor)
    GetNormalizationFactor = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_GetNormalizationFactor)
    SetStoppingValue = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_SetStoppingValue)
    GetStoppingValue = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_GetStoppingValue)
    SetCollectPoints = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_SetCollectPoints)
    GetCollectPoints = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_GetCollectPoints)
    CollectPointsOn = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_CollectPointsOn)
    CollectPointsOff = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_CollectPointsOff)
    GetProcessedPoints = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_GetProcessedPoints)
    SetOutputSize = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_SetOutputSize)
    GetOutputSize = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_GetOutputSize)
    SetOutputRegion = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_SetOutputRegion)
    GetOutputRegion = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_GetOutputRegion)
    SetOutputSpacing = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_SetOutputSpacing)
    GetOutputSpacing = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_GetOutputSpacing)
    SetOutputDirection = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_SetOutputDirection)
    GetOutputDirection = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_GetOutputDirection)
    SetOutputOrigin = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_SetOutputOrigin)
    GetOutputOrigin = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_GetOutputOrigin)
    SetOverrideOutputInformation = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_SetOverrideOutputInformation)
    GetOverrideOutputInformation = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_GetOverrideOutputInformation)
    OverrideOutputInformationOn = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_OverrideOutputInformationOn)
    OverrideOutputInformationOff = _swig_new_instance_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_OverrideOutputInformationOff)
    SameDimensionCheck = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_SameDimensionCheck
    
    SpeedConvertibleToDoubleCheck = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_SpeedConvertibleToDoubleCheck
    
    DoubleConvertibleToLevelSetCheck = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_DoubleConvertibleToLevelSetCheck
    
    LevelSetOStreamWritableCheck = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_LevelSetOStreamWritableCheck
    
    __swig_destroy__ = _itkFastMarchingImageFilterPython.delete_itkFastMarchingImageFilterIF3IF3
    cast = _swig_new_static_method(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkFastMarchingImageFilterIF3IF3

        Create a new object of the class itkFastMarchingImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFastMarchingImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFastMarchingImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFastMarchingImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFastMarchingImageFilterIF3IF3 in _itkFastMarchingImageFilterPython:
_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_swigregister(itkFastMarchingImageFilterIF3IF3)
itkFastMarchingImageFilterIF3IF3___New_orig__ = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3___New_orig__
itkFastMarchingImageFilterIF3IF3_cast = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def fast_marching_image_filter(*args, **kwargs):
    """Procedural interface for FastMarchingImageFilter"""
    import itk
    instance = itk.FastMarchingImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def fast_marching_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.FastMarchingImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.FastMarchingImageFilter.values()[0]
    else:
        filter_object = itk.FastMarchingImageFilter

    fast_marching_image_filter.__doc__ = filter_object.__doc__
    fast_marching_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    fast_marching_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.FastMarchingImageFilter, itkTemplate.itkTemplate):
        fast_marching_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        fast_marching_image_filter.__doc__ += "\n"
        fast_marching_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        fast_marching_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



