# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageLabelPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkChangeLabelImageFilterPython
else:
    import _itkChangeLabelImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkChangeLabelImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkChangeLabelImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImageRegionPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.ITKCommonBasePython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
import itk.itkImagePython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkRGBPixelPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterBPython

def itkChangeLabelImageFilterISS2ISS2_Superclass_New():
    return itkChangeLabelImageFilterISS2ISS2_Superclass.New()

class itkChangeLabelImageFilterISS2ISS2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2ISS2):
    r"""Proxy of C++ itkChangeLabelImageFilterISS2ISS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterISS2ISS2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterISS2ISS2_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterISS2ISS2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterISS2ISS2_Superclass_SetFunctor)
    __swig_destroy__ = _itkChangeLabelImageFilterPython.delete_itkChangeLabelImageFilterISS2ISS2_Superclass
    cast = _swig_new_static_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterISS2ISS2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkChangeLabelImageFilterISS2ISS2_Superclass

        Create a new object of the class itkChangeLabelImageFilterISS2ISS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkChangeLabelImageFilterISS2ISS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkChangeLabelImageFilterISS2ISS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkChangeLabelImageFilterISS2ISS2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkChangeLabelImageFilterISS2ISS2_Superclass in _itkChangeLabelImageFilterPython:
_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterISS2ISS2_Superclass_swigregister(itkChangeLabelImageFilterISS2ISS2_Superclass)
itkChangeLabelImageFilterISS2ISS2_Superclass___New_orig__ = _itkChangeLabelImageFilterPython.itkChangeLabelImageFilterISS2ISS2_Superclass___New_orig__
itkChangeLabelImageFilterISS2ISS2_Superclass_cast = _itkChangeLabelImageFilterPython.itkChangeLabelImageFilterISS2ISS2_Superclass_cast


def itkChangeLabelImageFilterISS3ISS3_Superclass_New():
    return itkChangeLabelImageFilterISS3ISS3_Superclass.New()

class itkChangeLabelImageFilterISS3ISS3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3ISS3):
    r"""Proxy of C++ itkChangeLabelImageFilterISS3ISS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterISS3ISS3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterISS3ISS3_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterISS3ISS3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterISS3ISS3_Superclass_SetFunctor)
    __swig_destroy__ = _itkChangeLabelImageFilterPython.delete_itkChangeLabelImageFilterISS3ISS3_Superclass
    cast = _swig_new_static_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterISS3ISS3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkChangeLabelImageFilterISS3ISS3_Superclass

        Create a new object of the class itkChangeLabelImageFilterISS3ISS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkChangeLabelImageFilterISS3ISS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkChangeLabelImageFilterISS3ISS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkChangeLabelImageFilterISS3ISS3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkChangeLabelImageFilterISS3ISS3_Superclass in _itkChangeLabelImageFilterPython:
_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterISS3ISS3_Superclass_swigregister(itkChangeLabelImageFilterISS3ISS3_Superclass)
itkChangeLabelImageFilterISS3ISS3_Superclass___New_orig__ = _itkChangeLabelImageFilterPython.itkChangeLabelImageFilterISS3ISS3_Superclass___New_orig__
itkChangeLabelImageFilterISS3ISS3_Superclass_cast = _itkChangeLabelImageFilterPython.itkChangeLabelImageFilterISS3ISS3_Superclass_cast


def itkChangeLabelImageFilterIUC2IUC2_Superclass_New():
    return itkChangeLabelImageFilterIUC2IUC2_Superclass.New()

class itkChangeLabelImageFilterIUC2IUC2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUC2):
    r"""Proxy of C++ itkChangeLabelImageFilterIUC2IUC2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUC2IUC2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUC2IUC2_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUC2IUC2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUC2IUC2_Superclass_SetFunctor)
    __swig_destroy__ = _itkChangeLabelImageFilterPython.delete_itkChangeLabelImageFilterIUC2IUC2_Superclass
    cast = _swig_new_static_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUC2IUC2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkChangeLabelImageFilterIUC2IUC2_Superclass

        Create a new object of the class itkChangeLabelImageFilterIUC2IUC2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkChangeLabelImageFilterIUC2IUC2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkChangeLabelImageFilterIUC2IUC2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkChangeLabelImageFilterIUC2IUC2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkChangeLabelImageFilterIUC2IUC2_Superclass in _itkChangeLabelImageFilterPython:
_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUC2IUC2_Superclass_swigregister(itkChangeLabelImageFilterIUC2IUC2_Superclass)
itkChangeLabelImageFilterIUC2IUC2_Superclass___New_orig__ = _itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUC2IUC2_Superclass___New_orig__
itkChangeLabelImageFilterIUC2IUC2_Superclass_cast = _itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUC2IUC2_Superclass_cast


def itkChangeLabelImageFilterIUC3IUC3_Superclass_New():
    return itkChangeLabelImageFilterIUC3IUC3_Superclass.New()

class itkChangeLabelImageFilterIUC3IUC3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUC3):
    r"""Proxy of C++ itkChangeLabelImageFilterIUC3IUC3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUC3IUC3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUC3IUC3_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUC3IUC3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUC3IUC3_Superclass_SetFunctor)
    __swig_destroy__ = _itkChangeLabelImageFilterPython.delete_itkChangeLabelImageFilterIUC3IUC3_Superclass
    cast = _swig_new_static_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUC3IUC3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkChangeLabelImageFilterIUC3IUC3_Superclass

        Create a new object of the class itkChangeLabelImageFilterIUC3IUC3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkChangeLabelImageFilterIUC3IUC3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkChangeLabelImageFilterIUC3IUC3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkChangeLabelImageFilterIUC3IUC3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkChangeLabelImageFilterIUC3IUC3_Superclass in _itkChangeLabelImageFilterPython:
_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUC3IUC3_Superclass_swigregister(itkChangeLabelImageFilterIUC3IUC3_Superclass)
itkChangeLabelImageFilterIUC3IUC3_Superclass___New_orig__ = _itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUC3IUC3_Superclass___New_orig__
itkChangeLabelImageFilterIUC3IUC3_Superclass_cast = _itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUC3IUC3_Superclass_cast


def itkChangeLabelImageFilterIUS2IUS2_Superclass_New():
    return itkChangeLabelImageFilterIUS2IUS2_Superclass.New()

class itkChangeLabelImageFilterIUS2IUS2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUS2):
    r"""Proxy of C++ itkChangeLabelImageFilterIUS2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUS2IUS2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUS2IUS2_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUS2IUS2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUS2IUS2_Superclass_SetFunctor)
    __swig_destroy__ = _itkChangeLabelImageFilterPython.delete_itkChangeLabelImageFilterIUS2IUS2_Superclass
    cast = _swig_new_static_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUS2IUS2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkChangeLabelImageFilterIUS2IUS2_Superclass

        Create a new object of the class itkChangeLabelImageFilterIUS2IUS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkChangeLabelImageFilterIUS2IUS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkChangeLabelImageFilterIUS2IUS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkChangeLabelImageFilterIUS2IUS2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkChangeLabelImageFilterIUS2IUS2_Superclass in _itkChangeLabelImageFilterPython:
_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUS2IUS2_Superclass_swigregister(itkChangeLabelImageFilterIUS2IUS2_Superclass)
itkChangeLabelImageFilterIUS2IUS2_Superclass___New_orig__ = _itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUS2IUS2_Superclass___New_orig__
itkChangeLabelImageFilterIUS2IUS2_Superclass_cast = _itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUS2IUS2_Superclass_cast


def itkChangeLabelImageFilterIUS3IUS3_Superclass_New():
    return itkChangeLabelImageFilterIUS3IUS3_Superclass.New()

class itkChangeLabelImageFilterIUS3IUS3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUS3):
    r"""Proxy of C++ itkChangeLabelImageFilterIUS3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUS3IUS3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUS3IUS3_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUS3IUS3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUS3IUS3_Superclass_SetFunctor)
    __swig_destroy__ = _itkChangeLabelImageFilterPython.delete_itkChangeLabelImageFilterIUS3IUS3_Superclass
    cast = _swig_new_static_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUS3IUS3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkChangeLabelImageFilterIUS3IUS3_Superclass

        Create a new object of the class itkChangeLabelImageFilterIUS3IUS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkChangeLabelImageFilterIUS3IUS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkChangeLabelImageFilterIUS3IUS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkChangeLabelImageFilterIUS3IUS3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkChangeLabelImageFilterIUS3IUS3_Superclass in _itkChangeLabelImageFilterPython:
_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUS3IUS3_Superclass_swigregister(itkChangeLabelImageFilterIUS3IUS3_Superclass)
itkChangeLabelImageFilterIUS3IUS3_Superclass___New_orig__ = _itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUS3IUS3_Superclass___New_orig__
itkChangeLabelImageFilterIUS3IUS3_Superclass_cast = _itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUS3IUS3_Superclass_cast


def itkChangeLabelImageFilterISS2ISS2_New():
    return itkChangeLabelImageFilterISS2ISS2.New()

class itkChangeLabelImageFilterISS2ISS2(itkChangeLabelImageFilterISS2ISS2_Superclass):
    r"""


    Change Sets of Labels.

    This filter produces an output image whose pixels are either copied
    from the input if they are not being changed or are rewritten based on
    the change parameters

    This filter is templated over the input image type and the output
    image type.

    The filter expect both images to have the same number of dimensions.

    Tim Kelliher. GE Research, Niskayuna, NY.

    This work was supported by a grant from DARPA, executed by the U.S.
    Army Medical Research and Materiel Command/TATRC Assistance Agreement,
    Contract::W81XWH-05-2-0059. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterISS2ISS2_Clone)
    SetChange = _swig_new_instance_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterISS2ISS2_SetChange)
    SetChangeMap = _swig_new_instance_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterISS2ISS2_SetChangeMap)
    ClearChangeMap = _swig_new_instance_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterISS2ISS2_ClearChangeMap)
    InputConvertibleToOutputCheck = _itkChangeLabelImageFilterPython.itkChangeLabelImageFilterISS2ISS2_InputConvertibleToOutputCheck
    
    PixelTypeComparable = _itkChangeLabelImageFilterPython.itkChangeLabelImageFilterISS2ISS2_PixelTypeComparable
    
    __swig_destroy__ = _itkChangeLabelImageFilterPython.delete_itkChangeLabelImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkChangeLabelImageFilterISS2ISS2

        Create a new object of the class itkChangeLabelImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkChangeLabelImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkChangeLabelImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkChangeLabelImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkChangeLabelImageFilterISS2ISS2 in _itkChangeLabelImageFilterPython:
_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterISS2ISS2_swigregister(itkChangeLabelImageFilterISS2ISS2)
itkChangeLabelImageFilterISS2ISS2___New_orig__ = _itkChangeLabelImageFilterPython.itkChangeLabelImageFilterISS2ISS2___New_orig__
itkChangeLabelImageFilterISS2ISS2_cast = _itkChangeLabelImageFilterPython.itkChangeLabelImageFilterISS2ISS2_cast


def itkChangeLabelImageFilterISS3ISS3_New():
    return itkChangeLabelImageFilterISS3ISS3.New()

class itkChangeLabelImageFilterISS3ISS3(itkChangeLabelImageFilterISS3ISS3_Superclass):
    r"""


    Change Sets of Labels.

    This filter produces an output image whose pixels are either copied
    from the input if they are not being changed or are rewritten based on
    the change parameters

    This filter is templated over the input image type and the output
    image type.

    The filter expect both images to have the same number of dimensions.

    Tim Kelliher. GE Research, Niskayuna, NY.

    This work was supported by a grant from DARPA, executed by the U.S.
    Army Medical Research and Materiel Command/TATRC Assistance Agreement,
    Contract::W81XWH-05-2-0059. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterISS3ISS3_Clone)
    SetChange = _swig_new_instance_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterISS3ISS3_SetChange)
    SetChangeMap = _swig_new_instance_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterISS3ISS3_SetChangeMap)
    ClearChangeMap = _swig_new_instance_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterISS3ISS3_ClearChangeMap)
    InputConvertibleToOutputCheck = _itkChangeLabelImageFilterPython.itkChangeLabelImageFilterISS3ISS3_InputConvertibleToOutputCheck
    
    PixelTypeComparable = _itkChangeLabelImageFilterPython.itkChangeLabelImageFilterISS3ISS3_PixelTypeComparable
    
    __swig_destroy__ = _itkChangeLabelImageFilterPython.delete_itkChangeLabelImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkChangeLabelImageFilterISS3ISS3

        Create a new object of the class itkChangeLabelImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkChangeLabelImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkChangeLabelImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkChangeLabelImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkChangeLabelImageFilterISS3ISS3 in _itkChangeLabelImageFilterPython:
_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterISS3ISS3_swigregister(itkChangeLabelImageFilterISS3ISS3)
itkChangeLabelImageFilterISS3ISS3___New_orig__ = _itkChangeLabelImageFilterPython.itkChangeLabelImageFilterISS3ISS3___New_orig__
itkChangeLabelImageFilterISS3ISS3_cast = _itkChangeLabelImageFilterPython.itkChangeLabelImageFilterISS3ISS3_cast


def itkChangeLabelImageFilterIUC2IUC2_New():
    return itkChangeLabelImageFilterIUC2IUC2.New()

class itkChangeLabelImageFilterIUC2IUC2(itkChangeLabelImageFilterIUC2IUC2_Superclass):
    r"""


    Change Sets of Labels.

    This filter produces an output image whose pixels are either copied
    from the input if they are not being changed or are rewritten based on
    the change parameters

    This filter is templated over the input image type and the output
    image type.

    The filter expect both images to have the same number of dimensions.

    Tim Kelliher. GE Research, Niskayuna, NY.

    This work was supported by a grant from DARPA, executed by the U.S.
    Army Medical Research and Materiel Command/TATRC Assistance Agreement,
    Contract::W81XWH-05-2-0059. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUC2IUC2_Clone)
    SetChange = _swig_new_instance_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUC2IUC2_SetChange)
    SetChangeMap = _swig_new_instance_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUC2IUC2_SetChangeMap)
    ClearChangeMap = _swig_new_instance_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUC2IUC2_ClearChangeMap)
    InputConvertibleToOutputCheck = _itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUC2IUC2_InputConvertibleToOutputCheck
    
    PixelTypeComparable = _itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUC2IUC2_PixelTypeComparable
    
    __swig_destroy__ = _itkChangeLabelImageFilterPython.delete_itkChangeLabelImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkChangeLabelImageFilterIUC2IUC2

        Create a new object of the class itkChangeLabelImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkChangeLabelImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkChangeLabelImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkChangeLabelImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkChangeLabelImageFilterIUC2IUC2 in _itkChangeLabelImageFilterPython:
_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUC2IUC2_swigregister(itkChangeLabelImageFilterIUC2IUC2)
itkChangeLabelImageFilterIUC2IUC2___New_orig__ = _itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUC2IUC2___New_orig__
itkChangeLabelImageFilterIUC2IUC2_cast = _itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUC2IUC2_cast


def itkChangeLabelImageFilterIUC3IUC3_New():
    return itkChangeLabelImageFilterIUC3IUC3.New()

class itkChangeLabelImageFilterIUC3IUC3(itkChangeLabelImageFilterIUC3IUC3_Superclass):
    r"""


    Change Sets of Labels.

    This filter produces an output image whose pixels are either copied
    from the input if they are not being changed or are rewritten based on
    the change parameters

    This filter is templated over the input image type and the output
    image type.

    The filter expect both images to have the same number of dimensions.

    Tim Kelliher. GE Research, Niskayuna, NY.

    This work was supported by a grant from DARPA, executed by the U.S.
    Army Medical Research and Materiel Command/TATRC Assistance Agreement,
    Contract::W81XWH-05-2-0059. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUC3IUC3_Clone)
    SetChange = _swig_new_instance_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUC3IUC3_SetChange)
    SetChangeMap = _swig_new_instance_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUC3IUC3_SetChangeMap)
    ClearChangeMap = _swig_new_instance_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUC3IUC3_ClearChangeMap)
    InputConvertibleToOutputCheck = _itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUC3IUC3_InputConvertibleToOutputCheck
    
    PixelTypeComparable = _itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUC3IUC3_PixelTypeComparable
    
    __swig_destroy__ = _itkChangeLabelImageFilterPython.delete_itkChangeLabelImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkChangeLabelImageFilterIUC3IUC3

        Create a new object of the class itkChangeLabelImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkChangeLabelImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkChangeLabelImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkChangeLabelImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkChangeLabelImageFilterIUC3IUC3 in _itkChangeLabelImageFilterPython:
_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUC3IUC3_swigregister(itkChangeLabelImageFilterIUC3IUC3)
itkChangeLabelImageFilterIUC3IUC3___New_orig__ = _itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUC3IUC3___New_orig__
itkChangeLabelImageFilterIUC3IUC3_cast = _itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUC3IUC3_cast


def itkChangeLabelImageFilterIUS2IUS2_New():
    return itkChangeLabelImageFilterIUS2IUS2.New()

class itkChangeLabelImageFilterIUS2IUS2(itkChangeLabelImageFilterIUS2IUS2_Superclass):
    r"""


    Change Sets of Labels.

    This filter produces an output image whose pixels are either copied
    from the input if they are not being changed or are rewritten based on
    the change parameters

    This filter is templated over the input image type and the output
    image type.

    The filter expect both images to have the same number of dimensions.

    Tim Kelliher. GE Research, Niskayuna, NY.

    This work was supported by a grant from DARPA, executed by the U.S.
    Army Medical Research and Materiel Command/TATRC Assistance Agreement,
    Contract::W81XWH-05-2-0059. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUS2IUS2_Clone)
    SetChange = _swig_new_instance_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUS2IUS2_SetChange)
    SetChangeMap = _swig_new_instance_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUS2IUS2_SetChangeMap)
    ClearChangeMap = _swig_new_instance_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUS2IUS2_ClearChangeMap)
    InputConvertibleToOutputCheck = _itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUS2IUS2_InputConvertibleToOutputCheck
    
    PixelTypeComparable = _itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUS2IUS2_PixelTypeComparable
    
    __swig_destroy__ = _itkChangeLabelImageFilterPython.delete_itkChangeLabelImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkChangeLabelImageFilterIUS2IUS2

        Create a new object of the class itkChangeLabelImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkChangeLabelImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkChangeLabelImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkChangeLabelImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkChangeLabelImageFilterIUS2IUS2 in _itkChangeLabelImageFilterPython:
_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUS2IUS2_swigregister(itkChangeLabelImageFilterIUS2IUS2)
itkChangeLabelImageFilterIUS2IUS2___New_orig__ = _itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUS2IUS2___New_orig__
itkChangeLabelImageFilterIUS2IUS2_cast = _itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUS2IUS2_cast


def itkChangeLabelImageFilterIUS3IUS3_New():
    return itkChangeLabelImageFilterIUS3IUS3.New()

class itkChangeLabelImageFilterIUS3IUS3(itkChangeLabelImageFilterIUS3IUS3_Superclass):
    r"""


    Change Sets of Labels.

    This filter produces an output image whose pixels are either copied
    from the input if they are not being changed or are rewritten based on
    the change parameters

    This filter is templated over the input image type and the output
    image type.

    The filter expect both images to have the same number of dimensions.

    Tim Kelliher. GE Research, Niskayuna, NY.

    This work was supported by a grant from DARPA, executed by the U.S.
    Army Medical Research and Materiel Command/TATRC Assistance Agreement,
    Contract::W81XWH-05-2-0059. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUS3IUS3_Clone)
    SetChange = _swig_new_instance_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUS3IUS3_SetChange)
    SetChangeMap = _swig_new_instance_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUS3IUS3_SetChangeMap)
    ClearChangeMap = _swig_new_instance_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUS3IUS3_ClearChangeMap)
    InputConvertibleToOutputCheck = _itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUS3IUS3_InputConvertibleToOutputCheck
    
    PixelTypeComparable = _itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUS3IUS3_PixelTypeComparable
    
    __swig_destroy__ = _itkChangeLabelImageFilterPython.delete_itkChangeLabelImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkChangeLabelImageFilterIUS3IUS3

        Create a new object of the class itkChangeLabelImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkChangeLabelImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkChangeLabelImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkChangeLabelImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkChangeLabelImageFilterIUS3IUS3 in _itkChangeLabelImageFilterPython:
_itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUS3IUS3_swigregister(itkChangeLabelImageFilterIUS3IUS3)
itkChangeLabelImageFilterIUS3IUS3___New_orig__ = _itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUS3IUS3___New_orig__
itkChangeLabelImageFilterIUS3IUS3_cast = _itkChangeLabelImageFilterPython.itkChangeLabelImageFilterIUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def change_label_image_filter(*args, **kwargs):
    """Procedural interface for ChangeLabelImageFilter"""
    import itk
    instance = itk.ChangeLabelImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def change_label_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ChangeLabelImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.ChangeLabelImageFilter.values()[0]
    else:
        filter_object = itk.ChangeLabelImageFilter

    change_label_image_filter.__doc__ = filter_object.__doc__
    change_label_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    change_label_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.ChangeLabelImageFilter, itkTemplate.itkTemplate):
        change_label_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        change_label_image_filter.__doc__ += "\n"
        change_label_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        change_label_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])
import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def unary_functor_image_filter(*args, **kwargs):
    """Procedural interface for UnaryFunctorImageFilter"""
    import itk
    instance = itk.UnaryFunctorImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def unary_functor_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.UnaryFunctorImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.UnaryFunctorImageFilter.values()[0]
    else:
        filter_object = itk.UnaryFunctorImageFilter

    unary_functor_image_filter.__doc__ = filter_object.__doc__
    unary_functor_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    unary_functor_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.UnaryFunctorImageFilter, itkTemplate.itkTemplate):
        unary_functor_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        unary_functor_image_filter.__doc__ += "\n"
        unary_functor_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        unary_functor_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



