# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKCurvatureFlowPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkBinaryMinMaxCurvatureFlowImageFilterPython
else:
    import _itkBinaryMinMaxCurvatureFlowImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkBinaryMinMaxCurvatureFlowImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkBinaryMinMaxCurvatureFlowImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkMinMaxCurvatureFlowImageFilterPython
import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkCurvatureFlowImageFilterPython
import itk.itkDenseFiniteDifferenceImageFilterPython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkFixedArrayPython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkFiniteDifferenceImageFilterPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterBPython
import itk.itkFiniteDifferenceFunctionPython

def itkBinaryMinMaxCurvatureFlowImageFilterID2ID2_New():
    return itkBinaryMinMaxCurvatureFlowImageFilterID2ID2.New()

class itkBinaryMinMaxCurvatureFlowImageFilterID2ID2(itk.itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterID2ID2):
    r"""


    Denoise a binary image using min/max curvature flow.

    BinaryMinMaxCurvatureFlowImageFilter implements a curvature driven
    image denoising algorithm. This filter assumes that the image is
    essentially binary: consisting of two classes. Iso-brightness contours
    in the input image are viewed as a level set. The level set is then
    evolved using a curvature-based speed function:

    \\[ I_t = F_{\\mbox{minmax}} |\\nabla I| \\]

    where $ F_{\\mbox{minmax}} = \\min(\\kappa,0) $ if $
    \\mbox{Avg}_{\\mbox{stencil}}(x) $ is less than or equal to $
    T_{threshold} $ and $ \\max(\\kappa,0) $, otherwise. $ \\kappa $
    is the mean curvature of the iso-brightness contour at point $ x $.

    In min/max curvature flow, movement is turned on or off depending on
    the scale of the noise one wants to remove. Switching depends on the
    average image value of a region of radius $ R $ around each point. The
    choice of $ R $, the stencil radius, governs the scale of the noise to
    be removed.

    The threshold value $ T_{threshold} $ is a user specified value which
    discriminates between the two pixel classes.

    This filter make use of the multi-threaded finite difference solver
    hierarchy. Updates are computed using a
    BinaryMinMaxCurvatureFlowFunction object. A zero flux Neumann boundary
    condition is used when computing derivatives near the data boundary.

    WARNING:  This filter assumes that the input and output types have the
    same dimensions. This filter also requires that the output image
    pixels are of a real type. This filter works for any dimensional
    images.  Reference: "Level Set Methods and Fast Marching Methods",
    J.A. Sethian, Cambridge Press, Chapter 16, Second edition, 1999.

    See:  BinaryMinMaxCurvatureFlowFunction

    See:   CurvatureFlowImageFilter

    See:   MinMaxCurvatureFlowImageFilter
    {Filtering/CurvatureFlow/BinaryMinMaxCurvatureFlow,Binary Min And Max
    Curvature Flow Of Binary Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterID2ID2_Clone)
    SetThreshold = _swig_new_instance_method(_itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterID2ID2_SetThreshold)
    GetThreshold = _swig_new_instance_method(_itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterID2ID2_GetThreshold)
    InputConvertibleToOutputCheck = _itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterID2ID2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBinaryMinMaxCurvatureFlowImageFilterPython.delete_itkBinaryMinMaxCurvatureFlowImageFilterID2ID2
    cast = _swig_new_static_method(_itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMinMaxCurvatureFlowImageFilterID2ID2

        Create a new object of the class itkBinaryMinMaxCurvatureFlowImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMinMaxCurvatureFlowImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMinMaxCurvatureFlowImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMinMaxCurvatureFlowImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMinMaxCurvatureFlowImageFilterID2ID2 in _itkBinaryMinMaxCurvatureFlowImageFilterPython:
_itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterID2ID2_swigregister(itkBinaryMinMaxCurvatureFlowImageFilterID2ID2)
itkBinaryMinMaxCurvatureFlowImageFilterID2ID2___New_orig__ = _itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterID2ID2___New_orig__
itkBinaryMinMaxCurvatureFlowImageFilterID2ID2_cast = _itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterID2ID2_cast


def itkBinaryMinMaxCurvatureFlowImageFilterID3ID3_New():
    return itkBinaryMinMaxCurvatureFlowImageFilterID3ID3.New()

class itkBinaryMinMaxCurvatureFlowImageFilterID3ID3(itk.itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterID3ID3):
    r"""


    Denoise a binary image using min/max curvature flow.

    BinaryMinMaxCurvatureFlowImageFilter implements a curvature driven
    image denoising algorithm. This filter assumes that the image is
    essentially binary: consisting of two classes. Iso-brightness contours
    in the input image are viewed as a level set. The level set is then
    evolved using a curvature-based speed function:

    \\[ I_t = F_{\\mbox{minmax}} |\\nabla I| \\]

    where $ F_{\\mbox{minmax}} = \\min(\\kappa,0) $ if $
    \\mbox{Avg}_{\\mbox{stencil}}(x) $ is less than or equal to $
    T_{threshold} $ and $ \\max(\\kappa,0) $, otherwise. $ \\kappa $
    is the mean curvature of the iso-brightness contour at point $ x $.

    In min/max curvature flow, movement is turned on or off depending on
    the scale of the noise one wants to remove. Switching depends on the
    average image value of a region of radius $ R $ around each point. The
    choice of $ R $, the stencil radius, governs the scale of the noise to
    be removed.

    The threshold value $ T_{threshold} $ is a user specified value which
    discriminates between the two pixel classes.

    This filter make use of the multi-threaded finite difference solver
    hierarchy. Updates are computed using a
    BinaryMinMaxCurvatureFlowFunction object. A zero flux Neumann boundary
    condition is used when computing derivatives near the data boundary.

    WARNING:  This filter assumes that the input and output types have the
    same dimensions. This filter also requires that the output image
    pixels are of a real type. This filter works for any dimensional
    images.  Reference: "Level Set Methods and Fast Marching Methods",
    J.A. Sethian, Cambridge Press, Chapter 16, Second edition, 1999.

    See:  BinaryMinMaxCurvatureFlowFunction

    See:   CurvatureFlowImageFilter

    See:   MinMaxCurvatureFlowImageFilter
    {Filtering/CurvatureFlow/BinaryMinMaxCurvatureFlow,Binary Min And Max
    Curvature Flow Of Binary Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterID3ID3_Clone)
    SetThreshold = _swig_new_instance_method(_itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterID3ID3_SetThreshold)
    GetThreshold = _swig_new_instance_method(_itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterID3ID3_GetThreshold)
    InputConvertibleToOutputCheck = _itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterID3ID3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBinaryMinMaxCurvatureFlowImageFilterPython.delete_itkBinaryMinMaxCurvatureFlowImageFilterID3ID3
    cast = _swig_new_static_method(_itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMinMaxCurvatureFlowImageFilterID3ID3

        Create a new object of the class itkBinaryMinMaxCurvatureFlowImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMinMaxCurvatureFlowImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMinMaxCurvatureFlowImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMinMaxCurvatureFlowImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMinMaxCurvatureFlowImageFilterID3ID3 in _itkBinaryMinMaxCurvatureFlowImageFilterPython:
_itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterID3ID3_swigregister(itkBinaryMinMaxCurvatureFlowImageFilterID3ID3)
itkBinaryMinMaxCurvatureFlowImageFilterID3ID3___New_orig__ = _itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterID3ID3___New_orig__
itkBinaryMinMaxCurvatureFlowImageFilterID3ID3_cast = _itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterID3ID3_cast


def itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2_New():
    return itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2.New()

class itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2(itk.itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterIF2IF2):
    r"""


    Denoise a binary image using min/max curvature flow.

    BinaryMinMaxCurvatureFlowImageFilter implements a curvature driven
    image denoising algorithm. This filter assumes that the image is
    essentially binary: consisting of two classes. Iso-brightness contours
    in the input image are viewed as a level set. The level set is then
    evolved using a curvature-based speed function:

    \\[ I_t = F_{\\mbox{minmax}} |\\nabla I| \\]

    where $ F_{\\mbox{minmax}} = \\min(\\kappa,0) $ if $
    \\mbox{Avg}_{\\mbox{stencil}}(x) $ is less than or equal to $
    T_{threshold} $ and $ \\max(\\kappa,0) $, otherwise. $ \\kappa $
    is the mean curvature of the iso-brightness contour at point $ x $.

    In min/max curvature flow, movement is turned on or off depending on
    the scale of the noise one wants to remove. Switching depends on the
    average image value of a region of radius $ R $ around each point. The
    choice of $ R $, the stencil radius, governs the scale of the noise to
    be removed.

    The threshold value $ T_{threshold} $ is a user specified value which
    discriminates between the two pixel classes.

    This filter make use of the multi-threaded finite difference solver
    hierarchy. Updates are computed using a
    BinaryMinMaxCurvatureFlowFunction object. A zero flux Neumann boundary
    condition is used when computing derivatives near the data boundary.

    WARNING:  This filter assumes that the input and output types have the
    same dimensions. This filter also requires that the output image
    pixels are of a real type. This filter works for any dimensional
    images.  Reference: "Level Set Methods and Fast Marching Methods",
    J.A. Sethian, Cambridge Press, Chapter 16, Second edition, 1999.

    See:  BinaryMinMaxCurvatureFlowFunction

    See:   CurvatureFlowImageFilter

    See:   MinMaxCurvatureFlowImageFilter
    {Filtering/CurvatureFlow/BinaryMinMaxCurvatureFlow,Binary Min And Max
    Curvature Flow Of Binary Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2_Clone)
    SetThreshold = _swig_new_instance_method(_itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2_SetThreshold)
    GetThreshold = _swig_new_instance_method(_itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2_GetThreshold)
    InputConvertibleToOutputCheck = _itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBinaryMinMaxCurvatureFlowImageFilterPython.delete_itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2
    cast = _swig_new_static_method(_itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2

        Create a new object of the class itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2 in _itkBinaryMinMaxCurvatureFlowImageFilterPython:
_itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2_swigregister(itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2)
itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2___New_orig__ = _itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2___New_orig__
itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2_cast = _itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2_cast


def itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3_New():
    return itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3.New()

class itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3(itk.itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterIF3IF3):
    r"""


    Denoise a binary image using min/max curvature flow.

    BinaryMinMaxCurvatureFlowImageFilter implements a curvature driven
    image denoising algorithm. This filter assumes that the image is
    essentially binary: consisting of two classes. Iso-brightness contours
    in the input image are viewed as a level set. The level set is then
    evolved using a curvature-based speed function:

    \\[ I_t = F_{\\mbox{minmax}} |\\nabla I| \\]

    where $ F_{\\mbox{minmax}} = \\min(\\kappa,0) $ if $
    \\mbox{Avg}_{\\mbox{stencil}}(x) $ is less than or equal to $
    T_{threshold} $ and $ \\max(\\kappa,0) $, otherwise. $ \\kappa $
    is the mean curvature of the iso-brightness contour at point $ x $.

    In min/max curvature flow, movement is turned on or off depending on
    the scale of the noise one wants to remove. Switching depends on the
    average image value of a region of radius $ R $ around each point. The
    choice of $ R $, the stencil radius, governs the scale of the noise to
    be removed.

    The threshold value $ T_{threshold} $ is a user specified value which
    discriminates between the two pixel classes.

    This filter make use of the multi-threaded finite difference solver
    hierarchy. Updates are computed using a
    BinaryMinMaxCurvatureFlowFunction object. A zero flux Neumann boundary
    condition is used when computing derivatives near the data boundary.

    WARNING:  This filter assumes that the input and output types have the
    same dimensions. This filter also requires that the output image
    pixels are of a real type. This filter works for any dimensional
    images.  Reference: "Level Set Methods and Fast Marching Methods",
    J.A. Sethian, Cambridge Press, Chapter 16, Second edition, 1999.

    See:  BinaryMinMaxCurvatureFlowFunction

    See:   CurvatureFlowImageFilter

    See:   MinMaxCurvatureFlowImageFilter
    {Filtering/CurvatureFlow/BinaryMinMaxCurvatureFlow,Binary Min And Max
    Curvature Flow Of Binary Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3_Clone)
    SetThreshold = _swig_new_instance_method(_itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3_SetThreshold)
    GetThreshold = _swig_new_instance_method(_itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3_GetThreshold)
    InputConvertibleToOutputCheck = _itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBinaryMinMaxCurvatureFlowImageFilterPython.delete_itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3
    cast = _swig_new_static_method(_itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3

        Create a new object of the class itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3 in _itkBinaryMinMaxCurvatureFlowImageFilterPython:
_itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3_swigregister(itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3)
itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3___New_orig__ = _itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3___New_orig__
itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3_cast = _itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def binary_min_max_curvature_flow_image_filter(*args, **kwargs):
    """Procedural interface for BinaryMinMaxCurvatureFlowImageFilter"""
    import itk
    instance = itk.BinaryMinMaxCurvatureFlowImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def binary_min_max_curvature_flow_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.BinaryMinMaxCurvatureFlowImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.BinaryMinMaxCurvatureFlowImageFilter.values()[0]
    else:
        filter_object = itk.BinaryMinMaxCurvatureFlowImageFilter

    binary_min_max_curvature_flow_image_filter.__doc__ = filter_object.__doc__
    binary_min_max_curvature_flow_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    binary_min_max_curvature_flow_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.BinaryMinMaxCurvatureFlowImageFilter, itkTemplate.itkTemplate):
        binary_min_max_curvature_flow_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        binary_min_max_curvature_flow_image_filter.__doc__ += "\n"
        binary_min_max_curvature_flow_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        binary_min_max_curvature_flow_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



