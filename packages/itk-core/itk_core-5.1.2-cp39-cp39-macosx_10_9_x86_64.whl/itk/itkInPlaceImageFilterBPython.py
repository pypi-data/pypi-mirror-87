# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkInPlaceImageFilterBPython
else:
    import _itkInPlaceImageFilterBPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkInPlaceImageFilterBPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkInPlaceImageFilterBPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImageToImageFilterBPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkImagePython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.pyBasePython
import itk.stdcomplexPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.vnl_vectorPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkPointPython
import itk.itkRGBPixelPython
import itk.itkIndexPython
import itk.ITKCommonBasePython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
class itkInPlaceImageFilterICF2ICF2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2ICF2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2ICF2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2ICF2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2ICF2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2ICF2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterICF2ICF2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2ICF2_cast)

# Register itkInPlaceImageFilterICF2ICF2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2ICF2_swigregister(itkInPlaceImageFilterICF2ICF2)
itkInPlaceImageFilterICF2ICF2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2ICF2_cast

class itkInPlaceImageFilterICF2ICF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2ICF3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2ICF3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2ICF3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2ICF3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2ICF3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterICF2ICF3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2ICF3_cast)

# Register itkInPlaceImageFilterICF2ICF3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2ICF3_swigregister(itkInPlaceImageFilterICF2ICF3)
itkInPlaceImageFilterICF2ICF3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2ICF3_cast

class itkInPlaceImageFilterICF2ID2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF2ID2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2ID2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2ID2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2ID2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2ID2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2ID2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterICF2ID2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2ID2_cast)

# Register itkInPlaceImageFilterICF2ID2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2ID2_swigregister(itkInPlaceImageFilterICF2ID2)
itkInPlaceImageFilterICF2ID2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2ID2_cast

class itkInPlaceImageFilterICF2IF2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF2IF2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2IF2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2IF2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2IF2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2IF2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2IF2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterICF2IF2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2IF2_cast)

# Register itkInPlaceImageFilterICF2IF2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2IF2_swigregister(itkInPlaceImageFilterICF2IF2)
itkInPlaceImageFilterICF2IF2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2IF2_cast

class itkInPlaceImageFilterICF2ISS2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF2ISS2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2ISS2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2ISS2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2ISS2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2ISS2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2ISS2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterICF2ISS2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2ISS2_cast)

# Register itkInPlaceImageFilterICF2ISS2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2ISS2_swigregister(itkInPlaceImageFilterICF2ISS2)
itkInPlaceImageFilterICF2ISS2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2ISS2_cast

class itkInPlaceImageFilterICF2IUC2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF2IUC2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2IUC2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2IUC2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2IUC2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2IUC2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2IUC2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterICF2IUC2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2IUC2_cast)

# Register itkInPlaceImageFilterICF2IUC2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2IUC2_swigregister(itkInPlaceImageFilterICF2IUC2)
itkInPlaceImageFilterICF2IUC2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2IUC2_cast

class itkInPlaceImageFilterICF2IUS2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF2IUS2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2IUS2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2IUS2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2IUS2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2IUS2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2IUS2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterICF2IUS2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2IUS2_cast)

# Register itkInPlaceImageFilterICF2IUS2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2IUS2_swigregister(itkInPlaceImageFilterICF2IUS2)
itkInPlaceImageFilterICF2IUS2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2IUS2_cast

class itkInPlaceImageFilterICF3ICF2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3ICF2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3ICF2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3ICF2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3ICF2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3ICF2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterICF3ICF2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3ICF2_cast)

# Register itkInPlaceImageFilterICF3ICF2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3ICF2_swigregister(itkInPlaceImageFilterICF3ICF2)
itkInPlaceImageFilterICF3ICF2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3ICF2_cast

class itkInPlaceImageFilterICF3ICF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3ICF3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3ICF3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3ICF3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3ICF3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3ICF3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterICF3ICF3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3ICF3_cast)

# Register itkInPlaceImageFilterICF3ICF3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3ICF3_swigregister(itkInPlaceImageFilterICF3ICF3)
itkInPlaceImageFilterICF3ICF3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3ICF3_cast

class itkInPlaceImageFilterICF3ID3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF3ID3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3ID3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3ID3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3ID3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3ID3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3ID3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterICF3ID3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3ID3_cast)

# Register itkInPlaceImageFilterICF3ID3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3ID3_swigregister(itkInPlaceImageFilterICF3ID3)
itkInPlaceImageFilterICF3ID3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3ID3_cast

class itkInPlaceImageFilterICF3IF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF3IF3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3IF3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3IF3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3IF3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3IF3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3IF3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterICF3IF3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3IF3_cast)

# Register itkInPlaceImageFilterICF3IF3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3IF3_swigregister(itkInPlaceImageFilterICF3IF3)
itkInPlaceImageFilterICF3IF3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3IF3_cast

class itkInPlaceImageFilterICF3ISS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF3ISS3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3ISS3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3ISS3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3ISS3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3ISS3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3ISS3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterICF3ISS3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3ISS3_cast)

# Register itkInPlaceImageFilterICF3ISS3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3ISS3_swigregister(itkInPlaceImageFilterICF3ISS3)
itkInPlaceImageFilterICF3ISS3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3ISS3_cast

class itkInPlaceImageFilterICF3IUC3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF3IUC3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3IUC3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3IUC3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3IUC3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3IUC3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3IUC3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterICF3IUC3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3IUC3_cast)

# Register itkInPlaceImageFilterICF3IUC3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3IUC3_swigregister(itkInPlaceImageFilterICF3IUC3)
itkInPlaceImageFilterICF3IUC3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3IUC3_cast

class itkInPlaceImageFilterICF3IUS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF3IUS3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3IUS3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3IUS3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3IUS3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3IUS3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3IUS3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterICF3IUS3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3IUS3_cast)

# Register itkInPlaceImageFilterICF3IUS3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3IUS3_swigregister(itkInPlaceImageFilterICF3IUS3)
itkInPlaceImageFilterICF3IUS3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3IUS3_cast

class itkInPlaceImageFilterICVF22ID2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF22ID2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF22ID2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF22ID2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF22ID2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF22ID2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF22ID2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterICVF22ID2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF22ID2_cast)

# Register itkInPlaceImageFilterICVF22ID2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF22ID2_swigregister(itkInPlaceImageFilterICVF22ID2)
itkInPlaceImageFilterICVF22ID2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF22ID2_cast

class itkInPlaceImageFilterICVF22IF2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF22IF2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF22IF2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF22IF2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF22IF2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF22IF2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF22IF2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterICVF22IF2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF22IF2_cast)

# Register itkInPlaceImageFilterICVF22IF2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF22IF2_swigregister(itkInPlaceImageFilterICVF22IF2)
itkInPlaceImageFilterICVF22IF2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF22IF2_cast

class itkInPlaceImageFilterICVF22ISS2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF22ISS2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF22ISS2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF22ISS2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF22ISS2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF22ISS2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF22ISS2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterICVF22ISS2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF22ISS2_cast)

# Register itkInPlaceImageFilterICVF22ISS2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF22ISS2_swigregister(itkInPlaceImageFilterICVF22ISS2)
itkInPlaceImageFilterICVF22ISS2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF22ISS2_cast

class itkInPlaceImageFilterICVF22IUC2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUC2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF22IUC2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF22IUC2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF22IUC2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF22IUC2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF22IUC2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterICVF22IUC2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF22IUC2_cast)

# Register itkInPlaceImageFilterICVF22IUC2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF22IUC2_swigregister(itkInPlaceImageFilterICVF22IUC2)
itkInPlaceImageFilterICVF22IUC2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF22IUC2_cast

class itkInPlaceImageFilterICVF22IUS2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUS2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF22IUS2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF22IUS2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF22IUS2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF22IUS2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF22IUS2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterICVF22IUS2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF22IUS2_cast)

# Register itkInPlaceImageFilterICVF22IUS2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF22IUS2_swigregister(itkInPlaceImageFilterICVF22IUS2)
itkInPlaceImageFilterICVF22IUS2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF22IUS2_cast

class itkInPlaceImageFilterICVF23ID3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF23ID3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF23ID3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF23ID3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF23ID3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF23ID3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF23ID3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterICVF23ID3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF23ID3_cast)

# Register itkInPlaceImageFilterICVF23ID3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF23ID3_swigregister(itkInPlaceImageFilterICVF23ID3)
itkInPlaceImageFilterICVF23ID3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF23ID3_cast

class itkInPlaceImageFilterICVF23IF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF23IF3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF23IF3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF23IF3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF23IF3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF23IF3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF23IF3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterICVF23IF3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF23IF3_cast)

# Register itkInPlaceImageFilterICVF23IF3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF23IF3_swigregister(itkInPlaceImageFilterICVF23IF3)
itkInPlaceImageFilterICVF23IF3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF23IF3_cast

class itkInPlaceImageFilterICVF23ISS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF23ISS3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF23ISS3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF23ISS3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF23ISS3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF23ISS3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF23ISS3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterICVF23ISS3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF23ISS3_cast)

# Register itkInPlaceImageFilterICVF23ISS3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF23ISS3_swigregister(itkInPlaceImageFilterICVF23ISS3)
itkInPlaceImageFilterICVF23ISS3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF23ISS3_cast

class itkInPlaceImageFilterICVF23IUC3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUC3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF23IUC3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF23IUC3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF23IUC3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF23IUC3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF23IUC3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterICVF23IUC3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF23IUC3_cast)

# Register itkInPlaceImageFilterICVF23IUC3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF23IUC3_swigregister(itkInPlaceImageFilterICVF23IUC3)
itkInPlaceImageFilterICVF23IUC3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF23IUC3_cast

class itkInPlaceImageFilterICVF23IUS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUS3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF23IUS3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF23IUS3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF23IUS3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF23IUS3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF23IUS3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterICVF23IUS3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF23IUS3_cast)

# Register itkInPlaceImageFilterICVF23IUS3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF23IUS3_swigregister(itkInPlaceImageFilterICVF23IUS3)
itkInPlaceImageFilterICVF23IUS3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF23IUS3_cast

class itkInPlaceImageFilterICVF32ID2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF32ID2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF32ID2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF32ID2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF32ID2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF32ID2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF32ID2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterICVF32ID2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF32ID2_cast)

# Register itkInPlaceImageFilterICVF32ID2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF32ID2_swigregister(itkInPlaceImageFilterICVF32ID2)
itkInPlaceImageFilterICVF32ID2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF32ID2_cast

class itkInPlaceImageFilterICVF32IF2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF32IF2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF32IF2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF32IF2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF32IF2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF32IF2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF32IF2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterICVF32IF2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF32IF2_cast)

# Register itkInPlaceImageFilterICVF32IF2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF32IF2_swigregister(itkInPlaceImageFilterICVF32IF2)
itkInPlaceImageFilterICVF32IF2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF32IF2_cast

class itkInPlaceImageFilterICVF32ISS2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF32ISS2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF32ISS2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF32ISS2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF32ISS2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF32ISS2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF32ISS2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterICVF32ISS2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF32ISS2_cast)

# Register itkInPlaceImageFilterICVF32ISS2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF32ISS2_swigregister(itkInPlaceImageFilterICVF32ISS2)
itkInPlaceImageFilterICVF32ISS2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF32ISS2_cast

class itkInPlaceImageFilterICVF32IUC2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUC2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF32IUC2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF32IUC2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF32IUC2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF32IUC2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF32IUC2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterICVF32IUC2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF32IUC2_cast)

# Register itkInPlaceImageFilterICVF32IUC2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF32IUC2_swigregister(itkInPlaceImageFilterICVF32IUC2)
itkInPlaceImageFilterICVF32IUC2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF32IUC2_cast

class itkInPlaceImageFilterICVF32IUS2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUS2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF32IUS2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF32IUS2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF32IUS2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF32IUS2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF32IUS2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterICVF32IUS2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF32IUS2_cast)

# Register itkInPlaceImageFilterICVF32IUS2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF32IUS2_swigregister(itkInPlaceImageFilterICVF32IUS2)
itkInPlaceImageFilterICVF32IUS2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF32IUS2_cast

class itkInPlaceImageFilterICVF33ID3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF33ID3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF33ID3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF33ID3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF33ID3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF33ID3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF33ID3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterICVF33ID3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF33ID3_cast)

# Register itkInPlaceImageFilterICVF33ID3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF33ID3_swigregister(itkInPlaceImageFilterICVF33ID3)
itkInPlaceImageFilterICVF33ID3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF33ID3_cast

class itkInPlaceImageFilterICVF33IF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF33IF3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF33IF3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF33IF3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF33IF3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF33IF3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF33IF3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterICVF33IF3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF33IF3_cast)

# Register itkInPlaceImageFilterICVF33IF3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF33IF3_swigregister(itkInPlaceImageFilterICVF33IF3)
itkInPlaceImageFilterICVF33IF3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF33IF3_cast

class itkInPlaceImageFilterICVF33ISS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF33ISS3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF33ISS3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF33ISS3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF33ISS3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF33ISS3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF33ISS3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterICVF33ISS3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF33ISS3_cast)

# Register itkInPlaceImageFilterICVF33ISS3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF33ISS3_swigregister(itkInPlaceImageFilterICVF33ISS3)
itkInPlaceImageFilterICVF33ISS3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF33ISS3_cast

class itkInPlaceImageFilterICVF33IUC3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUC3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF33IUC3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF33IUC3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF33IUC3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF33IUC3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF33IUC3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterICVF33IUC3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF33IUC3_cast)

# Register itkInPlaceImageFilterICVF33IUC3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF33IUC3_swigregister(itkInPlaceImageFilterICVF33IUC3)
itkInPlaceImageFilterICVF33IUC3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF33IUC3_cast

class itkInPlaceImageFilterICVF33IUS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUS3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF33IUS3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF33IUS3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF33IUS3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF33IUS3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF33IUS3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterICVF33IUS3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF33IUS3_cast)

# Register itkInPlaceImageFilterICVF33IUS3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF33IUS3_swigregister(itkInPlaceImageFilterICVF33IUS3)
itkInPlaceImageFilterICVF33IUS3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF33IUS3_cast

class itkInPlaceImageFilterICVF42ID2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF42ID2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF42ID2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF42ID2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF42ID2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF42ID2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF42ID2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterICVF42ID2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF42ID2_cast)

# Register itkInPlaceImageFilterICVF42ID2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF42ID2_swigregister(itkInPlaceImageFilterICVF42ID2)
itkInPlaceImageFilterICVF42ID2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF42ID2_cast

class itkInPlaceImageFilterICVF42IF2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF42IF2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF42IF2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF42IF2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF42IF2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF42IF2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF42IF2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterICVF42IF2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF42IF2_cast)

# Register itkInPlaceImageFilterICVF42IF2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF42IF2_swigregister(itkInPlaceImageFilterICVF42IF2)
itkInPlaceImageFilterICVF42IF2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF42IF2_cast

class itkInPlaceImageFilterICVF42ISS2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF42ISS2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF42ISS2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF42ISS2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF42ISS2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF42ISS2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF42ISS2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterICVF42ISS2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF42ISS2_cast)

# Register itkInPlaceImageFilterICVF42ISS2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF42ISS2_swigregister(itkInPlaceImageFilterICVF42ISS2)
itkInPlaceImageFilterICVF42ISS2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF42ISS2_cast

class itkInPlaceImageFilterICVF42IUC2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUC2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF42IUC2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF42IUC2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF42IUC2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF42IUC2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF42IUC2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterICVF42IUC2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF42IUC2_cast)

# Register itkInPlaceImageFilterICVF42IUC2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF42IUC2_swigregister(itkInPlaceImageFilterICVF42IUC2)
itkInPlaceImageFilterICVF42IUC2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF42IUC2_cast

class itkInPlaceImageFilterICVF42IUS2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUS2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF42IUS2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF42IUS2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF42IUS2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF42IUS2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF42IUS2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterICVF42IUS2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF42IUS2_cast)

# Register itkInPlaceImageFilterICVF42IUS2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF42IUS2_swigregister(itkInPlaceImageFilterICVF42IUS2)
itkInPlaceImageFilterICVF42IUS2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF42IUS2_cast

class itkInPlaceImageFilterICVF43ID3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF43ID3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF43ID3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF43ID3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF43ID3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF43ID3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF43ID3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterICVF43ID3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF43ID3_cast)

# Register itkInPlaceImageFilterICVF43ID3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF43ID3_swigregister(itkInPlaceImageFilterICVF43ID3)
itkInPlaceImageFilterICVF43ID3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF43ID3_cast

class itkInPlaceImageFilterICVF43IF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF43IF3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF43IF3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF43IF3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF43IF3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF43IF3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF43IF3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterICVF43IF3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF43IF3_cast)

# Register itkInPlaceImageFilterICVF43IF3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF43IF3_swigregister(itkInPlaceImageFilterICVF43IF3)
itkInPlaceImageFilterICVF43IF3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF43IF3_cast

class itkInPlaceImageFilterICVF43ISS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF43ISS3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF43ISS3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF43ISS3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF43ISS3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF43ISS3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF43ISS3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterICVF43ISS3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF43ISS3_cast)

# Register itkInPlaceImageFilterICVF43ISS3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF43ISS3_swigregister(itkInPlaceImageFilterICVF43ISS3)
itkInPlaceImageFilterICVF43ISS3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF43ISS3_cast

class itkInPlaceImageFilterICVF43IUC3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUC3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF43IUC3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF43IUC3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF43IUC3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF43IUC3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF43IUC3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterICVF43IUC3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF43IUC3_cast)

# Register itkInPlaceImageFilterICVF43IUC3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF43IUC3_swigregister(itkInPlaceImageFilterICVF43IUC3)
itkInPlaceImageFilterICVF43IUC3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF43IUC3_cast

class itkInPlaceImageFilterICVF43IUS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUS3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF43IUS3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF43IUS3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF43IUS3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF43IUS3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF43IUS3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterICVF43IUS3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF43IUS3_cast)

# Register itkInPlaceImageFilterICVF43IUS3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF43IUS3_swigregister(itkInPlaceImageFilterICVF43IUS3)
itkInPlaceImageFilterICVF43IUS3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterICVF43IUS3_cast

class itkInPlaceImageFilterID2ICF2(itk.itkImageToImageFilterBPython.itkImageToImageFilterID2ICF2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2ICF2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2ICF2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2ICF2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2ICF2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2ICF2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterID2ICF2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2ICF2_cast)

# Register itkInPlaceImageFilterID2ICF2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2ICF2_swigregister(itkInPlaceImageFilterID2ICF2)
itkInPlaceImageFilterID2ICF2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2ICF2_cast

class itkInPlaceImageFilterID2ICVF22(itk.itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF22):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2ICVF22_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2ICVF22_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2ICVF22_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2ICVF22_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2ICVF22_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterID2ICVF22
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2ICVF22_cast)

# Register itkInPlaceImageFilterID2ICVF22 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2ICVF22_swigregister(itkInPlaceImageFilterID2ICVF22)
itkInPlaceImageFilterID2ICVF22_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2ICVF22_cast

class itkInPlaceImageFilterID2ICVF32(itk.itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF32):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2ICVF32_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2ICVF32_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2ICVF32_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2ICVF32_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2ICVF32_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterID2ICVF32
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2ICVF32_cast)

# Register itkInPlaceImageFilterID2ICVF32 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2ICVF32_swigregister(itkInPlaceImageFilterID2ICVF32)
itkInPlaceImageFilterID2ICVF32_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2ICVF32_cast

class itkInPlaceImageFilterID2ICVF42(itk.itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF42):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2ICVF42_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2ICVF42_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2ICVF42_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2ICVF42_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2ICVF42_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterID2ICVF42
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2ICVF42_cast)

# Register itkInPlaceImageFilterID2ICVF42 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2ICVF42_swigregister(itkInPlaceImageFilterID2ICVF42)
itkInPlaceImageFilterID2ICVF42_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2ICVF42_cast

class itkInPlaceImageFilterID2ID3(itk.itkImageToImageFilterBPython.itkImageToImageFilterID2ID3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2ID3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2ID3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2ID3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2ID3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2ID3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterID2ID3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2ID3_cast)

# Register itkInPlaceImageFilterID2ID3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2ID3_swigregister(itkInPlaceImageFilterID2ID3)
itkInPlaceImageFilterID2ID3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2ID3_cast

class itkInPlaceImageFilterID2IVF22(itk.itkImageToImageFilterBPython.itkImageToImageFilterID2IVF22):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2IVF22_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2IVF22_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2IVF22_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2IVF22_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2IVF22_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterID2IVF22
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2IVF22_cast)

# Register itkInPlaceImageFilterID2IVF22 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2IVF22_swigregister(itkInPlaceImageFilterID2IVF22)
itkInPlaceImageFilterID2IVF22_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2IVF22_cast

class itkInPlaceImageFilterID2IVF32(itk.itkImageToImageFilterBPython.itkImageToImageFilterID2IVF32):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2IVF32_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2IVF32_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2IVF32_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2IVF32_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2IVF32_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterID2IVF32
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2IVF32_cast)

# Register itkInPlaceImageFilterID2IVF32 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2IVF32_swigregister(itkInPlaceImageFilterID2IVF32)
itkInPlaceImageFilterID2IVF32_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2IVF32_cast

class itkInPlaceImageFilterID2IVF42(itk.itkImageToImageFilterBPython.itkImageToImageFilterID2IVF42):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2IVF42_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2IVF42_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2IVF42_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2IVF42_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2IVF42_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterID2IVF42
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2IVF42_cast)

# Register itkInPlaceImageFilterID2IVF42 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2IVF42_swigregister(itkInPlaceImageFilterID2IVF42)
itkInPlaceImageFilterID2IVF42_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2IVF42_cast

class itkInPlaceImageFilterID2VID2(itk.itkImageToImageFilterBPython.itkImageToImageFilterID2VID2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2VID2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2VID2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2VID2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2VID2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2VID2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterID2VID2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2VID2_cast)

# Register itkInPlaceImageFilterID2VID2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2VID2_swigregister(itkInPlaceImageFilterID2VID2)
itkInPlaceImageFilterID2VID2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2VID2_cast

class itkInPlaceImageFilterID3ICF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterID3ICF3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3ICF3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3ICF3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3ICF3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3ICF3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3ICF3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterID3ICF3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3ICF3_cast)

# Register itkInPlaceImageFilterID3ICF3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3ICF3_swigregister(itkInPlaceImageFilterID3ICF3)
itkInPlaceImageFilterID3ICF3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3ICF3_cast

class itkInPlaceImageFilterID3ICVF23(itk.itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF23):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3ICVF23_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3ICVF23_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3ICVF23_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3ICVF23_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3ICVF23_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterID3ICVF23
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3ICVF23_cast)

# Register itkInPlaceImageFilterID3ICVF23 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3ICVF23_swigregister(itkInPlaceImageFilterID3ICVF23)
itkInPlaceImageFilterID3ICVF23_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3ICVF23_cast

class itkInPlaceImageFilterID3ICVF33(itk.itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF33):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3ICVF33_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3ICVF33_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3ICVF33_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3ICVF33_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3ICVF33_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterID3ICVF33
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3ICVF33_cast)

# Register itkInPlaceImageFilterID3ICVF33 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3ICVF33_swigregister(itkInPlaceImageFilterID3ICVF33)
itkInPlaceImageFilterID3ICVF33_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3ICVF33_cast

class itkInPlaceImageFilterID3ICVF43(itk.itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF43):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3ICVF43_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3ICVF43_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3ICVF43_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3ICVF43_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3ICVF43_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterID3ICVF43
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3ICVF43_cast)

# Register itkInPlaceImageFilterID3ICVF43 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3ICVF43_swigregister(itkInPlaceImageFilterID3ICVF43)
itkInPlaceImageFilterID3ICVF43_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3ICVF43_cast

class itkInPlaceImageFilterID3ID2(itk.itkImageToImageFilterBPython.itkImageToImageFilterID3ID2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3ID2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3ID2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3ID2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3ID2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3ID2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterID3ID2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3ID2_cast)

# Register itkInPlaceImageFilterID3ID2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3ID2_swigregister(itkInPlaceImageFilterID3ID2)
itkInPlaceImageFilterID3ID2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3ID2_cast

class itkInPlaceImageFilterID3IVF23(itk.itkImageToImageFilterBPython.itkImageToImageFilterID3IVF23):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3IVF23_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3IVF23_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3IVF23_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3IVF23_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3IVF23_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterID3IVF23
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3IVF23_cast)

# Register itkInPlaceImageFilterID3IVF23 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3IVF23_swigregister(itkInPlaceImageFilterID3IVF23)
itkInPlaceImageFilterID3IVF23_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3IVF23_cast

class itkInPlaceImageFilterID3IVF33(itk.itkImageToImageFilterBPython.itkImageToImageFilterID3IVF33):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3IVF33_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3IVF33_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3IVF33_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3IVF33_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3IVF33_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterID3IVF33
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3IVF33_cast)

# Register itkInPlaceImageFilterID3IVF33 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3IVF33_swigregister(itkInPlaceImageFilterID3IVF33)
itkInPlaceImageFilterID3IVF33_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3IVF33_cast

class itkInPlaceImageFilterID3IVF43(itk.itkImageToImageFilterBPython.itkImageToImageFilterID3IVF43):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3IVF43_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3IVF43_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3IVF43_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3IVF43_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3IVF43_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterID3IVF43
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3IVF43_cast)

# Register itkInPlaceImageFilterID3IVF43 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3IVF43_swigregister(itkInPlaceImageFilterID3IVF43)
itkInPlaceImageFilterID3IVF43_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3IVF43_cast

class itkInPlaceImageFilterID3VID3(itk.itkImageToImageFilterBPython.itkImageToImageFilterID3VID3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3VID3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3VID3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3VID3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3VID3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3VID3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterID3VID3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3VID3_cast)

# Register itkInPlaceImageFilterID3VID3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3VID3_swigregister(itkInPlaceImageFilterID3VID3)
itkInPlaceImageFilterID3VID3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3VID3_cast

class itkInPlaceImageFilterIF2ICF2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF2ICF2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2ICF2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2ICF2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2ICF2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2ICF2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2ICF2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIF2ICF2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2ICF2_cast)

# Register itkInPlaceImageFilterIF2ICF2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2ICF2_swigregister(itkInPlaceImageFilterIF2ICF2)
itkInPlaceImageFilterIF2ICF2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2ICF2_cast

class itkInPlaceImageFilterIF2ICVF22(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF22):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2ICVF22_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2ICVF22_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2ICVF22_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2ICVF22_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2ICVF22_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIF2ICVF22
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2ICVF22_cast)

# Register itkInPlaceImageFilterIF2ICVF22 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2ICVF22_swigregister(itkInPlaceImageFilterIF2ICVF22)
itkInPlaceImageFilterIF2ICVF22_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2ICVF22_cast

class itkInPlaceImageFilterIF2ICVF32(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF32):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2ICVF32_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2ICVF32_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2ICVF32_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2ICVF32_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2ICVF32_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIF2ICVF32
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2ICVF32_cast)

# Register itkInPlaceImageFilterIF2ICVF32 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2ICVF32_swigregister(itkInPlaceImageFilterIF2ICVF32)
itkInPlaceImageFilterIF2ICVF32_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2ICVF32_cast

class itkInPlaceImageFilterIF2ICVF42(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF42):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2ICVF42_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2ICVF42_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2ICVF42_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2ICVF42_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2ICVF42_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIF2ICVF42
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2ICVF42_cast)

# Register itkInPlaceImageFilterIF2ICVF42 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2ICVF42_swigregister(itkInPlaceImageFilterIF2ICVF42)
itkInPlaceImageFilterIF2ICVF42_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2ICVF42_cast

class itkInPlaceImageFilterIF2IF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF2IF3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2IF3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2IF3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2IF3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2IF3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2IF3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIF2IF3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2IF3_cast)

# Register itkInPlaceImageFilterIF2IF3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2IF3_swigregister(itkInPlaceImageFilterIF2IF3)
itkInPlaceImageFilterIF2IF3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2IF3_cast

class itkInPlaceImageFilterIF2IVF22(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF22):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2IVF22_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2IVF22_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2IVF22_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2IVF22_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2IVF22_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIF2IVF22
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2IVF22_cast)

# Register itkInPlaceImageFilterIF2IVF22 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2IVF22_swigregister(itkInPlaceImageFilterIF2IVF22)
itkInPlaceImageFilterIF2IVF22_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2IVF22_cast

class itkInPlaceImageFilterIF2IVF32(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF32):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2IVF32_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2IVF32_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2IVF32_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2IVF32_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2IVF32_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIF2IVF32
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2IVF32_cast)

# Register itkInPlaceImageFilterIF2IVF32 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2IVF32_swigregister(itkInPlaceImageFilterIF2IVF32)
itkInPlaceImageFilterIF2IVF32_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2IVF32_cast

class itkInPlaceImageFilterIF2IVF42(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF42):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2IVF42_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2IVF42_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2IVF42_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2IVF42_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2IVF42_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIF2IVF42
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2IVF42_cast)

# Register itkInPlaceImageFilterIF2IVF42 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2IVF42_swigregister(itkInPlaceImageFilterIF2IVF42)
itkInPlaceImageFilterIF2IVF42_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2IVF42_cast

class itkInPlaceImageFilterIF2VIF2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF2VIF2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2VIF2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2VIF2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2VIF2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2VIF2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2VIF2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIF2VIF2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2VIF2_cast)

# Register itkInPlaceImageFilterIF2VIF2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2VIF2_swigregister(itkInPlaceImageFilterIF2VIF2)
itkInPlaceImageFilterIF2VIF2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2VIF2_cast

class itkInPlaceImageFilterIF3ICF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF3ICF3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3ICF3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3ICF3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3ICF3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3ICF3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3ICF3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIF3ICF3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3ICF3_cast)

# Register itkInPlaceImageFilterIF3ICF3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3ICF3_swigregister(itkInPlaceImageFilterIF3ICF3)
itkInPlaceImageFilterIF3ICF3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3ICF3_cast

class itkInPlaceImageFilterIF3ICVF23(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF23):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3ICVF23_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3ICVF23_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3ICVF23_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3ICVF23_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3ICVF23_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIF3ICVF23
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3ICVF23_cast)

# Register itkInPlaceImageFilterIF3ICVF23 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3ICVF23_swigregister(itkInPlaceImageFilterIF3ICVF23)
itkInPlaceImageFilterIF3ICVF23_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3ICVF23_cast

class itkInPlaceImageFilterIF3ICVF33(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF33):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3ICVF33_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3ICVF33_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3ICVF33_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3ICVF33_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3ICVF33_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIF3ICVF33
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3ICVF33_cast)

# Register itkInPlaceImageFilterIF3ICVF33 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3ICVF33_swigregister(itkInPlaceImageFilterIF3ICVF33)
itkInPlaceImageFilterIF3ICVF33_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3ICVF33_cast

class itkInPlaceImageFilterIF3ICVF43(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF43):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3ICVF43_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3ICVF43_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3ICVF43_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3ICVF43_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3ICVF43_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIF3ICVF43
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3ICVF43_cast)

# Register itkInPlaceImageFilterIF3ICVF43 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3ICVF43_swigregister(itkInPlaceImageFilterIF3ICVF43)
itkInPlaceImageFilterIF3ICVF43_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3ICVF43_cast

class itkInPlaceImageFilterIF3IF2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF3IF2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3IF2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3IF2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3IF2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3IF2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3IF2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIF3IF2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3IF2_cast)

# Register itkInPlaceImageFilterIF3IF2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3IF2_swigregister(itkInPlaceImageFilterIF3IF2)
itkInPlaceImageFilterIF3IF2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3IF2_cast

class itkInPlaceImageFilterIF3IVF23(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF23):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3IVF23_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3IVF23_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3IVF23_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3IVF23_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3IVF23_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIF3IVF23
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3IVF23_cast)

# Register itkInPlaceImageFilterIF3IVF23 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3IVF23_swigregister(itkInPlaceImageFilterIF3IVF23)
itkInPlaceImageFilterIF3IVF23_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3IVF23_cast

class itkInPlaceImageFilterIF3IVF33(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF33):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3IVF33_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3IVF33_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3IVF33_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3IVF33_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3IVF33_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIF3IVF33
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3IVF33_cast)

# Register itkInPlaceImageFilterIF3IVF33 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3IVF33_swigregister(itkInPlaceImageFilterIF3IVF33)
itkInPlaceImageFilterIF3IVF33_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3IVF33_cast

class itkInPlaceImageFilterIF3IVF43(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF43):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3IVF43_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3IVF43_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3IVF43_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3IVF43_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3IVF43_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIF3IVF43
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3IVF43_cast)

# Register itkInPlaceImageFilterIF3IVF43 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3IVF43_swigregister(itkInPlaceImageFilterIF3IVF43)
itkInPlaceImageFilterIF3IVF43_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3IVF43_cast

class itkInPlaceImageFilterIF3VIF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF3VIF3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3VIF3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3VIF3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3VIF3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3VIF3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3VIF3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIF3VIF3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3VIF3_cast)

# Register itkInPlaceImageFilterIF3VIF3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3VIF3_swigregister(itkInPlaceImageFilterIF3VIF3)
itkInPlaceImageFilterIF3VIF3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3VIF3_cast

class itkInPlaceImageFilterIRGBUC2ID2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2ID2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC2ID2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC2ID2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC2ID2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC2ID2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC2ID2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIRGBUC2ID2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC2ID2_cast)

# Register itkInPlaceImageFilterIRGBUC2ID2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC2ID2_swigregister(itkInPlaceImageFilterIRGBUC2ID2)
itkInPlaceImageFilterIRGBUC2ID2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC2ID2_cast

class itkInPlaceImageFilterIRGBUC2IF2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IF2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC2IF2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC2IF2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC2IF2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC2IF2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC2IF2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIRGBUC2IF2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC2IF2_cast)

# Register itkInPlaceImageFilterIRGBUC2IF2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC2IF2_swigregister(itkInPlaceImageFilterIRGBUC2IF2)
itkInPlaceImageFilterIRGBUC2IF2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC2IF2_cast

class itkInPlaceImageFilterIRGBUC2IRGBUC3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IRGBUC3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC2IRGBUC3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC2IRGBUC3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC2IRGBUC3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC2IRGBUC3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC2IRGBUC3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIRGBUC2IRGBUC3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC2IRGBUC3_cast)

# Register itkInPlaceImageFilterIRGBUC2IRGBUC3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC2IRGBUC3_swigregister(itkInPlaceImageFilterIRGBUC2IRGBUC3)
itkInPlaceImageFilterIRGBUC2IRGBUC3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC2IRGBUC3_cast

class itkInPlaceImageFilterIRGBUC2ISS2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2ISS2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC2ISS2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC2ISS2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC2ISS2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC2ISS2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC2ISS2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIRGBUC2ISS2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC2ISS2_cast)

# Register itkInPlaceImageFilterIRGBUC2ISS2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC2ISS2_swigregister(itkInPlaceImageFilterIRGBUC2ISS2)
itkInPlaceImageFilterIRGBUC2ISS2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC2ISS2_cast

class itkInPlaceImageFilterIRGBUC2IUC2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUC2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC2IUC2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC2IUC2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC2IUC2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC2IUC2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC2IUC2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIRGBUC2IUC2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC2IUC2_cast)

# Register itkInPlaceImageFilterIRGBUC2IUC2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC2IUC2_swigregister(itkInPlaceImageFilterIRGBUC2IUC2)
itkInPlaceImageFilterIRGBUC2IUC2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC2IUC2_cast

class itkInPlaceImageFilterIRGBUC2IUS2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUS2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC2IUS2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC2IUS2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC2IUS2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC2IUS2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC2IUS2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIRGBUC2IUS2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC2IUS2_cast)

# Register itkInPlaceImageFilterIRGBUC2IUS2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC2IUS2_swigregister(itkInPlaceImageFilterIRGBUC2IUS2)
itkInPlaceImageFilterIRGBUC2IUS2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC2IUS2_cast

class itkInPlaceImageFilterIRGBUC3ID3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3ID3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC3ID3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC3ID3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC3ID3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC3ID3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC3ID3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIRGBUC3ID3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC3ID3_cast)

# Register itkInPlaceImageFilterIRGBUC3ID3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC3ID3_swigregister(itkInPlaceImageFilterIRGBUC3ID3)
itkInPlaceImageFilterIRGBUC3ID3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC3ID3_cast

class itkInPlaceImageFilterIRGBUC3IF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IF3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC3IF3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC3IF3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC3IF3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC3IF3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC3IF3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIRGBUC3IF3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC3IF3_cast)

# Register itkInPlaceImageFilterIRGBUC3IF3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC3IF3_swigregister(itkInPlaceImageFilterIRGBUC3IF3)
itkInPlaceImageFilterIRGBUC3IF3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC3IF3_cast

class itkInPlaceImageFilterIRGBUC3IRGBUC2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IRGBUC2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC3IRGBUC2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC3IRGBUC2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC3IRGBUC2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC3IRGBUC2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC3IRGBUC2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIRGBUC3IRGBUC2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC3IRGBUC2_cast)

# Register itkInPlaceImageFilterIRGBUC3IRGBUC2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC3IRGBUC2_swigregister(itkInPlaceImageFilterIRGBUC3IRGBUC2)
itkInPlaceImageFilterIRGBUC3IRGBUC2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC3IRGBUC2_cast

class itkInPlaceImageFilterIRGBUC3ISS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3ISS3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC3ISS3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC3ISS3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC3ISS3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC3ISS3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC3ISS3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIRGBUC3ISS3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC3ISS3_cast)

# Register itkInPlaceImageFilterIRGBUC3ISS3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC3ISS3_swigregister(itkInPlaceImageFilterIRGBUC3ISS3)
itkInPlaceImageFilterIRGBUC3ISS3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC3ISS3_cast

class itkInPlaceImageFilterIRGBUC3IUC3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUC3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC3IUC3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC3IUC3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC3IUC3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC3IUC3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC3IUC3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIRGBUC3IUC3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC3IUC3_cast)

# Register itkInPlaceImageFilterIRGBUC3IUC3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC3IUC3_swigregister(itkInPlaceImageFilterIRGBUC3IUC3)
itkInPlaceImageFilterIRGBUC3IUC3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC3IUC3_cast

class itkInPlaceImageFilterIRGBUC3IUS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUS3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC3IUS3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC3IUS3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC3IUS3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC3IUS3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC3IUS3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIRGBUC3IUS3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC3IUS3_cast)

# Register itkInPlaceImageFilterIRGBUC3IUS3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC3IUS3_swigregister(itkInPlaceImageFilterIRGBUC3IUS3)
itkInPlaceImageFilterIRGBUC3IUS3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC3IUS3_cast

class itkInPlaceImageFilterISS2ICF2(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS2ICF2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2ICF2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2ICF2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2ICF2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2ICF2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2ICF2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterISS2ICF2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2ICF2_cast)

# Register itkInPlaceImageFilterISS2ICF2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2ICF2_swigregister(itkInPlaceImageFilterISS2ICF2)
itkInPlaceImageFilterISS2ICF2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2ICF2_cast

class itkInPlaceImageFilterISS2ICVF22(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF22):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2ICVF22_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2ICVF22_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2ICVF22_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2ICVF22_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2ICVF22_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterISS2ICVF22
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2ICVF22_cast)

# Register itkInPlaceImageFilterISS2ICVF22 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2ICVF22_swigregister(itkInPlaceImageFilterISS2ICVF22)
itkInPlaceImageFilterISS2ICVF22_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2ICVF22_cast

class itkInPlaceImageFilterISS2ICVF32(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF32):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2ICVF32_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2ICVF32_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2ICVF32_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2ICVF32_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2ICVF32_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterISS2ICVF32
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2ICVF32_cast)

# Register itkInPlaceImageFilterISS2ICVF32 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2ICVF32_swigregister(itkInPlaceImageFilterISS2ICVF32)
itkInPlaceImageFilterISS2ICVF32_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2ICVF32_cast

class itkInPlaceImageFilterISS2ICVF42(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF42):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2ICVF42_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2ICVF42_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2ICVF42_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2ICVF42_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2ICVF42_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterISS2ICVF42
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2ICVF42_cast)

# Register itkInPlaceImageFilterISS2ICVF42 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2ICVF42_swigregister(itkInPlaceImageFilterISS2ICVF42)
itkInPlaceImageFilterISS2ICVF42_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2ICVF42_cast

class itkInPlaceImageFilterISS2ISS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS2ISS3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2ISS3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2ISS3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2ISS3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2ISS3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2ISS3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterISS2ISS3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2ISS3_cast)

# Register itkInPlaceImageFilterISS2ISS3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2ISS3_swigregister(itkInPlaceImageFilterISS2ISS3)
itkInPlaceImageFilterISS2ISS3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2ISS3_cast

class itkInPlaceImageFilterISS2IVF22(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF22):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2IVF22_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2IVF22_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2IVF22_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2IVF22_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2IVF22_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterISS2IVF22
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2IVF22_cast)

# Register itkInPlaceImageFilterISS2IVF22 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2IVF22_swigregister(itkInPlaceImageFilterISS2IVF22)
itkInPlaceImageFilterISS2IVF22_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2IVF22_cast

class itkInPlaceImageFilterISS2IVF32(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF32):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2IVF32_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2IVF32_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2IVF32_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2IVF32_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2IVF32_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterISS2IVF32
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2IVF32_cast)

# Register itkInPlaceImageFilterISS2IVF32 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2IVF32_swigregister(itkInPlaceImageFilterISS2IVF32)
itkInPlaceImageFilterISS2IVF32_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2IVF32_cast

class itkInPlaceImageFilterISS2IVF42(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF42):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2IVF42_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2IVF42_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2IVF42_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2IVF42_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2IVF42_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterISS2IVF42
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2IVF42_cast)

# Register itkInPlaceImageFilterISS2IVF42 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2IVF42_swigregister(itkInPlaceImageFilterISS2IVF42)
itkInPlaceImageFilterISS2IVF42_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2IVF42_cast

class itkInPlaceImageFilterISS2VISS2(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS2VISS2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2VISS2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2VISS2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2VISS2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2VISS2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2VISS2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterISS2VISS2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2VISS2_cast)

# Register itkInPlaceImageFilterISS2VISS2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2VISS2_swigregister(itkInPlaceImageFilterISS2VISS2)
itkInPlaceImageFilterISS2VISS2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2VISS2_cast

class itkInPlaceImageFilterISS3ICF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS3ICF3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3ICF3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3ICF3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3ICF3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3ICF3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3ICF3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterISS3ICF3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3ICF3_cast)

# Register itkInPlaceImageFilterISS3ICF3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3ICF3_swigregister(itkInPlaceImageFilterISS3ICF3)
itkInPlaceImageFilterISS3ICF3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3ICF3_cast

class itkInPlaceImageFilterISS3ICVF23(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF23):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3ICVF23_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3ICVF23_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3ICVF23_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3ICVF23_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3ICVF23_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterISS3ICVF23
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3ICVF23_cast)

# Register itkInPlaceImageFilterISS3ICVF23 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3ICVF23_swigregister(itkInPlaceImageFilterISS3ICVF23)
itkInPlaceImageFilterISS3ICVF23_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3ICVF23_cast

class itkInPlaceImageFilterISS3ICVF33(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF33):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3ICVF33_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3ICVF33_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3ICVF33_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3ICVF33_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3ICVF33_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterISS3ICVF33
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3ICVF33_cast)

# Register itkInPlaceImageFilterISS3ICVF33 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3ICVF33_swigregister(itkInPlaceImageFilterISS3ICVF33)
itkInPlaceImageFilterISS3ICVF33_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3ICVF33_cast

class itkInPlaceImageFilterISS3ICVF43(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF43):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3ICVF43_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3ICVF43_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3ICVF43_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3ICVF43_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3ICVF43_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterISS3ICVF43
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3ICVF43_cast)

# Register itkInPlaceImageFilterISS3ICVF43 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3ICVF43_swigregister(itkInPlaceImageFilterISS3ICVF43)
itkInPlaceImageFilterISS3ICVF43_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3ICVF43_cast

class itkInPlaceImageFilterISS3ISS2(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS3ISS2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3ISS2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3ISS2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3ISS2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3ISS2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3ISS2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterISS3ISS2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3ISS2_cast)

# Register itkInPlaceImageFilterISS3ISS2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3ISS2_swigregister(itkInPlaceImageFilterISS3ISS2)
itkInPlaceImageFilterISS3ISS2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3ISS2_cast

class itkInPlaceImageFilterISS3IVF23(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF23):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3IVF23_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3IVF23_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3IVF23_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3IVF23_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3IVF23_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterISS3IVF23
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3IVF23_cast)

# Register itkInPlaceImageFilterISS3IVF23 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3IVF23_swigregister(itkInPlaceImageFilterISS3IVF23)
itkInPlaceImageFilterISS3IVF23_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3IVF23_cast

class itkInPlaceImageFilterISS3IVF33(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF33):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3IVF33_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3IVF33_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3IVF33_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3IVF33_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3IVF33_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterISS3IVF33
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3IVF33_cast)

# Register itkInPlaceImageFilterISS3IVF33 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3IVF33_swigregister(itkInPlaceImageFilterISS3IVF33)
itkInPlaceImageFilterISS3IVF33_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3IVF33_cast

class itkInPlaceImageFilterISS3IVF43(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF43):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3IVF43_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3IVF43_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3IVF43_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3IVF43_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3IVF43_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterISS3IVF43
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3IVF43_cast)

# Register itkInPlaceImageFilterISS3IVF43 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3IVF43_swigregister(itkInPlaceImageFilterISS3IVF43)
itkInPlaceImageFilterISS3IVF43_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3IVF43_cast

class itkInPlaceImageFilterISS3VISS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS3VISS3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3VISS3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3VISS3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3VISS3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3VISS3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3VISS3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterISS3VISS3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3VISS3_cast)

# Register itkInPlaceImageFilterISS3VISS3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3VISS3_swigregister(itkInPlaceImageFilterISS3VISS3)
itkInPlaceImageFilterISS3VISS3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3VISS3_cast

class itkInPlaceImageFilterIUC2ICF2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICF2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2ICF2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2ICF2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2ICF2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2ICF2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2ICF2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIUC2ICF2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2ICF2_cast)

# Register itkInPlaceImageFilterIUC2ICF2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2ICF2_swigregister(itkInPlaceImageFilterIUC2ICF2)
itkInPlaceImageFilterIUC2ICF2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2ICF2_cast

class itkInPlaceImageFilterIUC2ICVF22(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF22):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2ICVF22_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2ICVF22_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2ICVF22_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2ICVF22_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2ICVF22_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIUC2ICVF22
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2ICVF22_cast)

# Register itkInPlaceImageFilterIUC2ICVF22 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2ICVF22_swigregister(itkInPlaceImageFilterIUC2ICVF22)
itkInPlaceImageFilterIUC2ICVF22_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2ICVF22_cast

class itkInPlaceImageFilterIUC2ICVF32(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF32):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2ICVF32_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2ICVF32_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2ICVF32_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2ICVF32_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2ICVF32_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIUC2ICVF32
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2ICVF32_cast)

# Register itkInPlaceImageFilterIUC2ICVF32 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2ICVF32_swigregister(itkInPlaceImageFilterIUC2ICVF32)
itkInPlaceImageFilterIUC2ICVF32_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2ICVF32_cast

class itkInPlaceImageFilterIUC2ICVF42(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF42):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2ICVF42_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2ICVF42_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2ICVF42_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2ICVF42_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2ICVF42_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIUC2ICVF42
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2ICVF42_cast)

# Register itkInPlaceImageFilterIUC2ICVF42 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2ICVF42_swigregister(itkInPlaceImageFilterIUC2ICVF42)
itkInPlaceImageFilterIUC2ICVF42_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2ICVF42_cast

class itkInPlaceImageFilterIUC2IUC3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC2IUC3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2IUC3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2IUC3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2IUC3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2IUC3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2IUC3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIUC2IUC3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2IUC3_cast)

# Register itkInPlaceImageFilterIUC2IUC3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2IUC3_swigregister(itkInPlaceImageFilterIUC2IUC3)
itkInPlaceImageFilterIUC2IUC3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2IUC3_cast

class itkInPlaceImageFilterIUC2IVF22(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF22):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2IVF22_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2IVF22_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2IVF22_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2IVF22_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2IVF22_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIUC2IVF22
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2IVF22_cast)

# Register itkInPlaceImageFilterIUC2IVF22 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2IVF22_swigregister(itkInPlaceImageFilterIUC2IVF22)
itkInPlaceImageFilterIUC2IVF22_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2IVF22_cast

class itkInPlaceImageFilterIUC2IVF32(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF32):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2IVF32_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2IVF32_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2IVF32_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2IVF32_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2IVF32_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIUC2IVF32
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2IVF32_cast)

# Register itkInPlaceImageFilterIUC2IVF32 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2IVF32_swigregister(itkInPlaceImageFilterIUC2IVF32)
itkInPlaceImageFilterIUC2IVF32_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2IVF32_cast

class itkInPlaceImageFilterIUC2IVF42(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF42):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2IVF42_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2IVF42_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2IVF42_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2IVF42_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2IVF42_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIUC2IVF42
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2IVF42_cast)

# Register itkInPlaceImageFilterIUC2IVF42 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2IVF42_swigregister(itkInPlaceImageFilterIUC2IVF42)
itkInPlaceImageFilterIUC2IVF42_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2IVF42_cast

class itkInPlaceImageFilterIUC2VIUC2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIUC2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2VIUC2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2VIUC2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2VIUC2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2VIUC2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2VIUC2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIUC2VIUC2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2VIUC2_cast)

# Register itkInPlaceImageFilterIUC2VIUC2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2VIUC2_swigregister(itkInPlaceImageFilterIUC2VIUC2)
itkInPlaceImageFilterIUC2VIUC2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2VIUC2_cast

class itkInPlaceImageFilterIUC3ICF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICF3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3ICF3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3ICF3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3ICF3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3ICF3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3ICF3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIUC3ICF3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3ICF3_cast)

# Register itkInPlaceImageFilterIUC3ICF3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3ICF3_swigregister(itkInPlaceImageFilterIUC3ICF3)
itkInPlaceImageFilterIUC3ICF3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3ICF3_cast

class itkInPlaceImageFilterIUC3ICVF23(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF23):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3ICVF23_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3ICVF23_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3ICVF23_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3ICVF23_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3ICVF23_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIUC3ICVF23
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3ICVF23_cast)

# Register itkInPlaceImageFilterIUC3ICVF23 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3ICVF23_swigregister(itkInPlaceImageFilterIUC3ICVF23)
itkInPlaceImageFilterIUC3ICVF23_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3ICVF23_cast

class itkInPlaceImageFilterIUC3ICVF33(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF33):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3ICVF33_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3ICVF33_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3ICVF33_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3ICVF33_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3ICVF33_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIUC3ICVF33
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3ICVF33_cast)

# Register itkInPlaceImageFilterIUC3ICVF33 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3ICVF33_swigregister(itkInPlaceImageFilterIUC3ICVF33)
itkInPlaceImageFilterIUC3ICVF33_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3ICVF33_cast

class itkInPlaceImageFilterIUC3ICVF43(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF43):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3ICVF43_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3ICVF43_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3ICVF43_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3ICVF43_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3ICVF43_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIUC3ICVF43
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3ICVF43_cast)

# Register itkInPlaceImageFilterIUC3ICVF43 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3ICVF43_swigregister(itkInPlaceImageFilterIUC3ICVF43)
itkInPlaceImageFilterIUC3ICVF43_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3ICVF43_cast

class itkInPlaceImageFilterIUC3IUC2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC3IUC2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3IUC2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3IUC2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3IUC2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3IUC2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3IUC2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIUC3IUC2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3IUC2_cast)

# Register itkInPlaceImageFilterIUC3IUC2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3IUC2_swigregister(itkInPlaceImageFilterIUC3IUC2)
itkInPlaceImageFilterIUC3IUC2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3IUC2_cast

class itkInPlaceImageFilterIUC3IVF23(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF23):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3IVF23_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3IVF23_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3IVF23_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3IVF23_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3IVF23_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIUC3IVF23
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3IVF23_cast)

# Register itkInPlaceImageFilterIUC3IVF23 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3IVF23_swigregister(itkInPlaceImageFilterIUC3IVF23)
itkInPlaceImageFilterIUC3IVF23_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3IVF23_cast

class itkInPlaceImageFilterIUC3IVF33(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF33):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3IVF33_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3IVF33_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3IVF33_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3IVF33_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3IVF33_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIUC3IVF33
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3IVF33_cast)

# Register itkInPlaceImageFilterIUC3IVF33 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3IVF33_swigregister(itkInPlaceImageFilterIUC3IVF33)
itkInPlaceImageFilterIUC3IVF33_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3IVF33_cast

class itkInPlaceImageFilterIUC3IVF43(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF43):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3IVF43_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3IVF43_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3IVF43_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3IVF43_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3IVF43_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIUC3IVF43
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3IVF43_cast)

# Register itkInPlaceImageFilterIUC3IVF43 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3IVF43_swigregister(itkInPlaceImageFilterIUC3IVF43)
itkInPlaceImageFilterIUC3IVF43_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3IVF43_cast

class itkInPlaceImageFilterIUC3VIUC3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIUC3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3VIUC3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3VIUC3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3VIUC3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3VIUC3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3VIUC3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIUC3VIUC3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3VIUC3_cast)

# Register itkInPlaceImageFilterIUC3VIUC3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3VIUC3_swigregister(itkInPlaceImageFilterIUC3VIUC3)
itkInPlaceImageFilterIUC3VIUC3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3VIUC3_cast

class itkInPlaceImageFilterIUS2ICF2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICF2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2ICF2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2ICF2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2ICF2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2ICF2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2ICF2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIUS2ICF2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2ICF2_cast)

# Register itkInPlaceImageFilterIUS2ICF2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2ICF2_swigregister(itkInPlaceImageFilterIUS2ICF2)
itkInPlaceImageFilterIUS2ICF2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2ICF2_cast

class itkInPlaceImageFilterIUS2ICVF22(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF22):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2ICVF22_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2ICVF22_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2ICVF22_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2ICVF22_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2ICVF22_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIUS2ICVF22
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2ICVF22_cast)

# Register itkInPlaceImageFilterIUS2ICVF22 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2ICVF22_swigregister(itkInPlaceImageFilterIUS2ICVF22)
itkInPlaceImageFilterIUS2ICVF22_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2ICVF22_cast

class itkInPlaceImageFilterIUS2ICVF32(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF32):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2ICVF32_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2ICVF32_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2ICVF32_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2ICVF32_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2ICVF32_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIUS2ICVF32
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2ICVF32_cast)

# Register itkInPlaceImageFilterIUS2ICVF32 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2ICVF32_swigregister(itkInPlaceImageFilterIUS2ICVF32)
itkInPlaceImageFilterIUS2ICVF32_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2ICVF32_cast

class itkInPlaceImageFilterIUS2ICVF42(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF42):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2ICVF42_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2ICVF42_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2ICVF42_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2ICVF42_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2ICVF42_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIUS2ICVF42
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2ICVF42_cast)

# Register itkInPlaceImageFilterIUS2ICVF42 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2ICVF42_swigregister(itkInPlaceImageFilterIUS2ICVF42)
itkInPlaceImageFilterIUS2ICVF42_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2ICVF42_cast

class itkInPlaceImageFilterIUS2IUS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS2IUS3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2IUS3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2IUS3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2IUS3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2IUS3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2IUS3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIUS2IUS3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2IUS3_cast)

# Register itkInPlaceImageFilterIUS2IUS3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2IUS3_swigregister(itkInPlaceImageFilterIUS2IUS3)
itkInPlaceImageFilterIUS2IUS3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2IUS3_cast

class itkInPlaceImageFilterIUS2IVF22(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF22):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2IVF22_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2IVF22_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2IVF22_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2IVF22_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2IVF22_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIUS2IVF22
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2IVF22_cast)

# Register itkInPlaceImageFilterIUS2IVF22 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2IVF22_swigregister(itkInPlaceImageFilterIUS2IVF22)
itkInPlaceImageFilterIUS2IVF22_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2IVF22_cast

class itkInPlaceImageFilterIUS2IVF32(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF32):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2IVF32_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2IVF32_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2IVF32_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2IVF32_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2IVF32_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIUS2IVF32
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2IVF32_cast)

# Register itkInPlaceImageFilterIUS2IVF32 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2IVF32_swigregister(itkInPlaceImageFilterIUS2IVF32)
itkInPlaceImageFilterIUS2IVF32_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2IVF32_cast

class itkInPlaceImageFilterIUS2IVF42(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF42):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2IVF42_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2IVF42_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2IVF42_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2IVF42_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2IVF42_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIUS2IVF42
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2IVF42_cast)

# Register itkInPlaceImageFilterIUS2IVF42 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2IVF42_swigregister(itkInPlaceImageFilterIUS2IVF42)
itkInPlaceImageFilterIUS2IVF42_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2IVF42_cast

class itkInPlaceImageFilterIUS2VIUS2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIUS2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2VIUS2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2VIUS2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2VIUS2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2VIUS2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2VIUS2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIUS2VIUS2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2VIUS2_cast)

# Register itkInPlaceImageFilterIUS2VIUS2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2VIUS2_swigregister(itkInPlaceImageFilterIUS2VIUS2)
itkInPlaceImageFilterIUS2VIUS2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2VIUS2_cast

class itkInPlaceImageFilterIUS3ICF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICF3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3ICF3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3ICF3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3ICF3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3ICF3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3ICF3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIUS3ICF3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3ICF3_cast)

# Register itkInPlaceImageFilterIUS3ICF3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3ICF3_swigregister(itkInPlaceImageFilterIUS3ICF3)
itkInPlaceImageFilterIUS3ICF3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3ICF3_cast

class itkInPlaceImageFilterIUS3ICVF23(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF23):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3ICVF23_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3ICVF23_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3ICVF23_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3ICVF23_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3ICVF23_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIUS3ICVF23
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3ICVF23_cast)

# Register itkInPlaceImageFilterIUS3ICVF23 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3ICVF23_swigregister(itkInPlaceImageFilterIUS3ICVF23)
itkInPlaceImageFilterIUS3ICVF23_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3ICVF23_cast

class itkInPlaceImageFilterIUS3ICVF33(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF33):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3ICVF33_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3ICVF33_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3ICVF33_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3ICVF33_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3ICVF33_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIUS3ICVF33
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3ICVF33_cast)

# Register itkInPlaceImageFilterIUS3ICVF33 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3ICVF33_swigregister(itkInPlaceImageFilterIUS3ICVF33)
itkInPlaceImageFilterIUS3ICVF33_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3ICVF33_cast

class itkInPlaceImageFilterIUS3ICVF43(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF43):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3ICVF43_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3ICVF43_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3ICVF43_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3ICVF43_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3ICVF43_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIUS3ICVF43
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3ICVF43_cast)

# Register itkInPlaceImageFilterIUS3ICVF43 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3ICVF43_swigregister(itkInPlaceImageFilterIUS3ICVF43)
itkInPlaceImageFilterIUS3ICVF43_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3ICVF43_cast

class itkInPlaceImageFilterIUS3IUS2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS3IUS2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3IUS2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3IUS2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3IUS2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3IUS2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3IUS2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIUS3IUS2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3IUS2_cast)

# Register itkInPlaceImageFilterIUS3IUS2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3IUS2_swigregister(itkInPlaceImageFilterIUS3IUS2)
itkInPlaceImageFilterIUS3IUS2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3IUS2_cast

class itkInPlaceImageFilterIUS3IVF23(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF23):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3IVF23_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3IVF23_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3IVF23_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3IVF23_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3IVF23_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIUS3IVF23
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3IVF23_cast)

# Register itkInPlaceImageFilterIUS3IVF23 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3IVF23_swigregister(itkInPlaceImageFilterIUS3IVF23)
itkInPlaceImageFilterIUS3IVF23_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3IVF23_cast

class itkInPlaceImageFilterIUS3IVF33(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF33):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3IVF33_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3IVF33_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3IVF33_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3IVF33_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3IVF33_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIUS3IVF33
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3IVF33_cast)

# Register itkInPlaceImageFilterIUS3IVF33 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3IVF33_swigregister(itkInPlaceImageFilterIUS3IVF33)
itkInPlaceImageFilterIUS3IVF33_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3IVF33_cast

class itkInPlaceImageFilterIUS3IVF43(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF43):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3IVF43_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3IVF43_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3IVF43_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3IVF43_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3IVF43_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIUS3IVF43
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3IVF43_cast)

# Register itkInPlaceImageFilterIUS3IVF43 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3IVF43_swigregister(itkInPlaceImageFilterIUS3IVF43)
itkInPlaceImageFilterIUS3IVF43_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3IVF43_cast

class itkInPlaceImageFilterIUS3VIUS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIUS3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3VIUS3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3VIUS3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3VIUS3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3VIUS3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3VIUS3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIUS3VIUS3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3VIUS3_cast)

# Register itkInPlaceImageFilterIUS3VIUS3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3VIUS3_swigregister(itkInPlaceImageFilterIUS3VIUS3)
itkInPlaceImageFilterIUS3VIUS3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3VIUS3_cast

class itkInPlaceImageFilterIVF22ID2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF22ID2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF22ID2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF22ID2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF22ID2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF22ID2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF22ID2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIVF22ID2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF22ID2_cast)

# Register itkInPlaceImageFilterIVF22ID2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF22ID2_swigregister(itkInPlaceImageFilterIVF22ID2)
itkInPlaceImageFilterIVF22ID2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF22ID2_cast

class itkInPlaceImageFilterIVF22IF2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF22IF2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF22IF2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF22IF2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF22IF2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF22IF2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF22IF2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIVF22IF2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF22IF2_cast)

# Register itkInPlaceImageFilterIVF22IF2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF22IF2_swigregister(itkInPlaceImageFilterIVF22IF2)
itkInPlaceImageFilterIVF22IF2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF22IF2_cast

class itkInPlaceImageFilterIVF22ISS2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF22ISS2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF22ISS2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF22ISS2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF22ISS2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF22ISS2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF22ISS2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIVF22ISS2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF22ISS2_cast)

# Register itkInPlaceImageFilterIVF22ISS2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF22ISS2_swigregister(itkInPlaceImageFilterIVF22ISS2)
itkInPlaceImageFilterIVF22ISS2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF22ISS2_cast

class itkInPlaceImageFilterIVF22IUC2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUC2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF22IUC2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF22IUC2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF22IUC2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF22IUC2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF22IUC2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIVF22IUC2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF22IUC2_cast)

# Register itkInPlaceImageFilterIVF22IUC2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF22IUC2_swigregister(itkInPlaceImageFilterIVF22IUC2)
itkInPlaceImageFilterIVF22IUC2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF22IUC2_cast

class itkInPlaceImageFilterIVF22IUS2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUS2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF22IUS2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF22IUS2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF22IUS2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF22IUS2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF22IUS2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIVF22IUS2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF22IUS2_cast)

# Register itkInPlaceImageFilterIVF22IUS2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF22IUS2_swigregister(itkInPlaceImageFilterIVF22IUS2)
itkInPlaceImageFilterIVF22IUS2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF22IUS2_cast

class itkInPlaceImageFilterIVF23ID3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF23ID3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF23ID3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF23ID3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF23ID3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF23ID3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF23ID3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIVF23ID3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF23ID3_cast)

# Register itkInPlaceImageFilterIVF23ID3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF23ID3_swigregister(itkInPlaceImageFilterIVF23ID3)
itkInPlaceImageFilterIVF23ID3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF23ID3_cast

class itkInPlaceImageFilterIVF23IF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF23IF3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF23IF3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF23IF3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF23IF3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF23IF3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF23IF3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIVF23IF3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF23IF3_cast)

# Register itkInPlaceImageFilterIVF23IF3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF23IF3_swigregister(itkInPlaceImageFilterIVF23IF3)
itkInPlaceImageFilterIVF23IF3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF23IF3_cast

class itkInPlaceImageFilterIVF23ISS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF23ISS3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF23ISS3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF23ISS3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF23ISS3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF23ISS3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF23ISS3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIVF23ISS3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF23ISS3_cast)

# Register itkInPlaceImageFilterIVF23ISS3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF23ISS3_swigregister(itkInPlaceImageFilterIVF23ISS3)
itkInPlaceImageFilterIVF23ISS3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF23ISS3_cast

class itkInPlaceImageFilterIVF23IUC3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUC3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF23IUC3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF23IUC3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF23IUC3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF23IUC3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF23IUC3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIVF23IUC3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF23IUC3_cast)

# Register itkInPlaceImageFilterIVF23IUC3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF23IUC3_swigregister(itkInPlaceImageFilterIVF23IUC3)
itkInPlaceImageFilterIVF23IUC3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF23IUC3_cast

class itkInPlaceImageFilterIVF23IUS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUS3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF23IUS3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF23IUS3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF23IUS3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF23IUS3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF23IUS3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIVF23IUS3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF23IUS3_cast)

# Register itkInPlaceImageFilterIVF23IUS3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF23IUS3_swigregister(itkInPlaceImageFilterIVF23IUS3)
itkInPlaceImageFilterIVF23IUS3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF23IUS3_cast

class itkInPlaceImageFilterIVF32ID2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF32ID2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF32ID2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF32ID2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF32ID2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF32ID2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF32ID2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIVF32ID2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF32ID2_cast)

# Register itkInPlaceImageFilterIVF32ID2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF32ID2_swigregister(itkInPlaceImageFilterIVF32ID2)
itkInPlaceImageFilterIVF32ID2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF32ID2_cast

class itkInPlaceImageFilterIVF32IF2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF32IF2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF32IF2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF32IF2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF32IF2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF32IF2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF32IF2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIVF32IF2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF32IF2_cast)

# Register itkInPlaceImageFilterIVF32IF2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF32IF2_swigregister(itkInPlaceImageFilterIVF32IF2)
itkInPlaceImageFilterIVF32IF2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF32IF2_cast

class itkInPlaceImageFilterIVF32ISS2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF32ISS2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF32ISS2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF32ISS2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF32ISS2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF32ISS2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF32ISS2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIVF32ISS2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF32ISS2_cast)

# Register itkInPlaceImageFilterIVF32ISS2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF32ISS2_swigregister(itkInPlaceImageFilterIVF32ISS2)
itkInPlaceImageFilterIVF32ISS2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF32ISS2_cast

class itkInPlaceImageFilterIVF32IUC2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUC2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF32IUC2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF32IUC2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF32IUC2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF32IUC2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF32IUC2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIVF32IUC2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF32IUC2_cast)

# Register itkInPlaceImageFilterIVF32IUC2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF32IUC2_swigregister(itkInPlaceImageFilterIVF32IUC2)
itkInPlaceImageFilterIVF32IUC2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF32IUC2_cast

class itkInPlaceImageFilterIVF32IUS2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUS2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF32IUS2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF32IUS2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF32IUS2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF32IUS2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF32IUS2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIVF32IUS2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF32IUS2_cast)

# Register itkInPlaceImageFilterIVF32IUS2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF32IUS2_swigregister(itkInPlaceImageFilterIVF32IUS2)
itkInPlaceImageFilterIVF32IUS2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF32IUS2_cast

class itkInPlaceImageFilterIVF33ID3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF33ID3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF33ID3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF33ID3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF33ID3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF33ID3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF33ID3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIVF33ID3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF33ID3_cast)

# Register itkInPlaceImageFilterIVF33ID3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF33ID3_swigregister(itkInPlaceImageFilterIVF33ID3)
itkInPlaceImageFilterIVF33ID3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF33ID3_cast

class itkInPlaceImageFilterIVF33IF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF33IF3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF33IF3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF33IF3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF33IF3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF33IF3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF33IF3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIVF33IF3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF33IF3_cast)

# Register itkInPlaceImageFilterIVF33IF3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF33IF3_swigregister(itkInPlaceImageFilterIVF33IF3)
itkInPlaceImageFilterIVF33IF3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF33IF3_cast

class itkInPlaceImageFilterIVF33ISS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF33ISS3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF33ISS3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF33ISS3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF33ISS3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF33ISS3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF33ISS3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIVF33ISS3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF33ISS3_cast)

# Register itkInPlaceImageFilterIVF33ISS3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF33ISS3_swigregister(itkInPlaceImageFilterIVF33ISS3)
itkInPlaceImageFilterIVF33ISS3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF33ISS3_cast

class itkInPlaceImageFilterIVF33IUC3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUC3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF33IUC3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF33IUC3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF33IUC3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF33IUC3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF33IUC3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIVF33IUC3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF33IUC3_cast)

# Register itkInPlaceImageFilterIVF33IUC3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF33IUC3_swigregister(itkInPlaceImageFilterIVF33IUC3)
itkInPlaceImageFilterIVF33IUC3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF33IUC3_cast

class itkInPlaceImageFilterIVF33IUS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUS3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF33IUS3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF33IUS3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF33IUS3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF33IUS3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF33IUS3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIVF33IUS3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF33IUS3_cast)

# Register itkInPlaceImageFilterIVF33IUS3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF33IUS3_swigregister(itkInPlaceImageFilterIVF33IUS3)
itkInPlaceImageFilterIVF33IUS3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF33IUS3_cast

class itkInPlaceImageFilterIVF42ID2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF42ID2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF42ID2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF42ID2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF42ID2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF42ID2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF42ID2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIVF42ID2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF42ID2_cast)

# Register itkInPlaceImageFilterIVF42ID2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF42ID2_swigregister(itkInPlaceImageFilterIVF42ID2)
itkInPlaceImageFilterIVF42ID2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF42ID2_cast

class itkInPlaceImageFilterIVF42IF2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF42IF2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF42IF2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF42IF2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF42IF2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF42IF2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF42IF2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIVF42IF2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF42IF2_cast)

# Register itkInPlaceImageFilterIVF42IF2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF42IF2_swigregister(itkInPlaceImageFilterIVF42IF2)
itkInPlaceImageFilterIVF42IF2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF42IF2_cast

class itkInPlaceImageFilterIVF42ISS2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF42ISS2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF42ISS2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF42ISS2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF42ISS2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF42ISS2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF42ISS2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIVF42ISS2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF42ISS2_cast)

# Register itkInPlaceImageFilterIVF42ISS2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF42ISS2_swigregister(itkInPlaceImageFilterIVF42ISS2)
itkInPlaceImageFilterIVF42ISS2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF42ISS2_cast

class itkInPlaceImageFilterIVF42IUC2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUC2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF42IUC2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF42IUC2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF42IUC2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF42IUC2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF42IUC2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIVF42IUC2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF42IUC2_cast)

# Register itkInPlaceImageFilterIVF42IUC2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF42IUC2_swigregister(itkInPlaceImageFilterIVF42IUC2)
itkInPlaceImageFilterIVF42IUC2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF42IUC2_cast

class itkInPlaceImageFilterIVF42IUS2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUS2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF42IUS2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF42IUS2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF42IUS2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF42IUS2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF42IUS2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIVF42IUS2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF42IUS2_cast)

# Register itkInPlaceImageFilterIVF42IUS2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF42IUS2_swigregister(itkInPlaceImageFilterIVF42IUS2)
itkInPlaceImageFilterIVF42IUS2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF42IUS2_cast

class itkInPlaceImageFilterIVF43ID3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF43ID3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF43ID3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF43ID3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF43ID3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF43ID3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF43ID3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIVF43ID3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF43ID3_cast)

# Register itkInPlaceImageFilterIVF43ID3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF43ID3_swigregister(itkInPlaceImageFilterIVF43ID3)
itkInPlaceImageFilterIVF43ID3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF43ID3_cast

class itkInPlaceImageFilterIVF43IF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF43IF3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF43IF3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF43IF3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF43IF3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF43IF3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF43IF3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIVF43IF3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF43IF3_cast)

# Register itkInPlaceImageFilterIVF43IF3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF43IF3_swigregister(itkInPlaceImageFilterIVF43IF3)
itkInPlaceImageFilterIVF43IF3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF43IF3_cast

class itkInPlaceImageFilterIVF43ISS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF43ISS3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF43ISS3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF43ISS3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF43ISS3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF43ISS3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF43ISS3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIVF43ISS3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF43ISS3_cast)

# Register itkInPlaceImageFilterIVF43ISS3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF43ISS3_swigregister(itkInPlaceImageFilterIVF43ISS3)
itkInPlaceImageFilterIVF43ISS3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF43ISS3_cast

class itkInPlaceImageFilterIVF43IUC3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUC3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF43IUC3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF43IUC3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF43IUC3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF43IUC3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF43IUC3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIVF43IUC3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF43IUC3_cast)

# Register itkInPlaceImageFilterIVF43IUC3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF43IUC3_swigregister(itkInPlaceImageFilterIVF43IUC3)
itkInPlaceImageFilterIVF43IUC3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF43IUC3_cast

class itkInPlaceImageFilterIVF43IUS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUS3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF43IUS3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF43IUS3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF43IUS3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF43IUS3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF43IUS3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterIVF43IUS3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF43IUS3_cast)

# Register itkInPlaceImageFilterIVF43IUS3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF43IUS3_swigregister(itkInPlaceImageFilterIVF43IUS3)
itkInPlaceImageFilterIVF43IUS3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterIVF43IUS3_cast

class itkInPlaceImageFilterVID2ID2(itk.itkImageToImageFilterBPython.itkImageToImageFilterVID2ID2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVID2ID2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVID2ID2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVID2ID2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVID2ID2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVID2ID2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterVID2ID2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVID2ID2_cast)

# Register itkInPlaceImageFilterVID2ID2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVID2ID2_swigregister(itkInPlaceImageFilterVID2ID2)
itkInPlaceImageFilterVID2ID2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterVID2ID2_cast

class itkInPlaceImageFilterVID3ID3(itk.itkImageToImageFilterBPython.itkImageToImageFilterVID3ID3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVID3ID3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVID3ID3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVID3ID3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVID3ID3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVID3ID3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterVID3ID3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVID3ID3_cast)

# Register itkInPlaceImageFilterVID3ID3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVID3ID3_swigregister(itkInPlaceImageFilterVID3ID3)
itkInPlaceImageFilterVID3ID3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterVID3ID3_cast

class itkInPlaceImageFilterVIF2IF2(itk.itkImageToImageFilterBPython.itkImageToImageFilterVIF2IF2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVIF2IF2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVIF2IF2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVIF2IF2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVIF2IF2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVIF2IF2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterVIF2IF2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVIF2IF2_cast)

# Register itkInPlaceImageFilterVIF2IF2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVIF2IF2_swigregister(itkInPlaceImageFilterVIF2IF2)
itkInPlaceImageFilterVIF2IF2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterVIF2IF2_cast

class itkInPlaceImageFilterVIF3IF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterVIF3IF3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVIF3IF3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVIF3IF3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVIF3IF3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVIF3IF3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVIF3IF3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterVIF3IF3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVIF3IF3_cast)

# Register itkInPlaceImageFilterVIF3IF3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVIF3IF3_swigregister(itkInPlaceImageFilterVIF3IF3)
itkInPlaceImageFilterVIF3IF3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterVIF3IF3_cast

class itkInPlaceImageFilterVISS2ISS2(itk.itkImageToImageFilterBPython.itkImageToImageFilterVISS2ISS2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVISS2ISS2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVISS2ISS2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVISS2ISS2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVISS2ISS2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVISS2ISS2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterVISS2ISS2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVISS2ISS2_cast)

# Register itkInPlaceImageFilterVISS2ISS2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVISS2ISS2_swigregister(itkInPlaceImageFilterVISS2ISS2)
itkInPlaceImageFilterVISS2ISS2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterVISS2ISS2_cast

class itkInPlaceImageFilterVISS3ISS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterVISS3ISS3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVISS3ISS3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVISS3ISS3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVISS3ISS3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVISS3ISS3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVISS3ISS3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterVISS3ISS3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVISS3ISS3_cast)

# Register itkInPlaceImageFilterVISS3ISS3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVISS3ISS3_swigregister(itkInPlaceImageFilterVISS3ISS3)
itkInPlaceImageFilterVISS3ISS3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterVISS3ISS3_cast

class itkInPlaceImageFilterVIUC2IUC2(itk.itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUC2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVIUC2IUC2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVIUC2IUC2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVIUC2IUC2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVIUC2IUC2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVIUC2IUC2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterVIUC2IUC2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVIUC2IUC2_cast)

# Register itkInPlaceImageFilterVIUC2IUC2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVIUC2IUC2_swigregister(itkInPlaceImageFilterVIUC2IUC2)
itkInPlaceImageFilterVIUC2IUC2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterVIUC2IUC2_cast

class itkInPlaceImageFilterVIUC3IUC3(itk.itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUC3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVIUC3IUC3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVIUC3IUC3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVIUC3IUC3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVIUC3IUC3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVIUC3IUC3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterVIUC3IUC3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVIUC3IUC3_cast)

# Register itkInPlaceImageFilterVIUC3IUC3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVIUC3IUC3_swigregister(itkInPlaceImageFilterVIUC3IUC3)
itkInPlaceImageFilterVIUC3IUC3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterVIUC3IUC3_cast

class itkInPlaceImageFilterVIUS2IUS2(itk.itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUS2):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVIUS2IUS2_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVIUS2IUS2_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVIUS2IUS2_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVIUS2IUS2_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVIUS2IUS2_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterVIUS2IUS2
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVIUS2IUS2_cast)

# Register itkInPlaceImageFilterVIUS2IUS2 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVIUS2IUS2_swigregister(itkInPlaceImageFilterVIUS2IUS2)
itkInPlaceImageFilterVIUS2IUS2_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterVIUS2IUS2_cast

class itkInPlaceImageFilterVIUS3IUS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUS3):
    r"""


    Base class for filters that take an image as input and overwrite that
    image as the output.

    InPlaceImageFilter is the base class for all process objects whose
    output image data is constructed by overwriting the input image data.
    In other words, the output bulk data is the same block of memory as
    the input bulk data. This filter provides the mechanisms for in place
    image processing while maintaining general pipeline mechanics.
    InPlaceImageFilters use less memory than standard ImageToImageFilters
    because the input buffer is reused as the output buffer. However, this
    benefit does not come without a cost. Since the filter overwrites its
    input, the ownership of the bulk data is transitioned from the input
    data object to the output data object. When a data object has multiple
    consumers with one of the consumers being an in place filter, the in
    place filter effectively destroys the bulk data for the data object.
    Upstream filters will then have to re-execute to regenerate the data
    object's bulk data for the remaining consumers.

    Since an InPlaceImageFilter reuses the input bulk data memory for the
    output bulk data memory, the input image type must match the output
    image type. If the input and output image types are not identical, the
    filter reverts to a traditional ImageToImageFilter behaviour where an
    output image is allocated. Additionally, the requested region of the
    output must match that of the input. In place operation can also be
    controlled (when the input and output image type match) via the
    methods InPlaceOn() and InPlaceOff().

    Subclasses of InPlaceImageFilter must take extra care in how they
    manage memory using (and perhaps overriding) the implementations of
    ReleaseInputs() and AllocateOutputs() provided here.

    example{Core/Common/FilterImageWithoutCopying,Filter Image Without
    Copying Its Data} example{Core/Common/InPlaceFilterOfImage,In Place
    Filter Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVIUS3IUS3_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVIUS3IUS3_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVIUS3IUS3_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVIUS3IUS3_InPlaceOff)
    CanRunInPlace = _swig_new_instance_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVIUS3IUS3_CanRunInPlace)
    __swig_destroy__ = _itkInPlaceImageFilterBPython.delete_itkInPlaceImageFilterVIUS3IUS3
    cast = _swig_new_static_method(_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVIUS3IUS3_cast)

# Register itkInPlaceImageFilterVIUS3IUS3 in _itkInPlaceImageFilterBPython:
_itkInPlaceImageFilterBPython.itkInPlaceImageFilterVIUS3IUS3_swigregister(itkInPlaceImageFilterVIUS3IUS3)
itkInPlaceImageFilterVIUS3IUS3_cast = _itkInPlaceImageFilterBPython.itkInPlaceImageFilterVIUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def in_place_image_filter(*args, **kwargs):
    """Procedural interface for InPlaceImageFilter"""
    import itk
    instance = itk.InPlaceImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def in_place_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.InPlaceImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.InPlaceImageFilter.values()[0]
    else:
        filter_object = itk.InPlaceImageFilter

    in_place_image_filter.__doc__ = filter_object.__doc__
    in_place_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    in_place_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.InPlaceImageFilter, itkTemplate.itkTemplate):
        in_place_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        in_place_image_filter.__doc__ += "\n"
        in_place_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        in_place_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



