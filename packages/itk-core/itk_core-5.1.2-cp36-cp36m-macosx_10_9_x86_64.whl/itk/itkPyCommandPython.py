# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKPyUtilsPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkPyCommandPython
else:
    import _itkPyCommandPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkPyCommandPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkPyCommandPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython

def itkPyCommand_New():
    return itkPyCommand.New()

class itkPyCommand(itk.ITKCommonBasePython.itkCommand):
    r"""


    Command subclass that calls a Python callable object, e.g. a Python
    function.

    With this class, arbitrary Python callable objects (e.g. functions)
    can be associated with an instance to be used in AddObserver calls.
    This is analogous to itk::TclCommand, but then a tad more flexible.;)

    This class was contributed by Charl P. Botha <cpbotha |AT| ieee.org>

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPyCommandPython.itkPyCommand___New_orig__)
    Clone = _swig_new_instance_method(_itkPyCommandPython.itkPyCommand_Clone)
    SetCommandCallable = _swig_new_instance_method(_itkPyCommandPython.itkPyCommand_SetCommandCallable)
    GetCommandCallable = _swig_new_instance_method(_itkPyCommandPython.itkPyCommand_GetCommandCallable)
    Execute = _swig_new_instance_method(_itkPyCommandPython.itkPyCommand_Execute)
    __swig_destroy__ = _itkPyCommandPython.delete_itkPyCommand
    cast = _swig_new_static_method(_itkPyCommandPython.itkPyCommand_cast)

    def New(*args, **kargs):
        """New() -> itkPyCommand
        """
        obj = itkPyCommand.__New_orig__()
        import itk
        itk.set_inputs(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPyCommand in _itkPyCommandPython:
_itkPyCommandPython.itkPyCommand_swigregister(itkPyCommand)
itkPyCommand___New_orig__ = _itkPyCommandPython.itkPyCommand___New_orig__
itkPyCommand_cast = _itkPyCommandPython.itkPyCommand_cast



