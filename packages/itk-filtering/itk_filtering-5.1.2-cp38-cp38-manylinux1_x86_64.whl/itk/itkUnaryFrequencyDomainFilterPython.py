# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageFrequencyPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkUnaryFrequencyDomainFilterPython
else:
    import _itkUnaryFrequencyDomainFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkUnaryFrequencyDomainFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkUnaryFrequencyDomainFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkInPlaceImageFilterBPython
import itk.itkImageToImageFilterBPython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkFixedArrayPython
import itk.itkPointPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython

def itkUnaryFrequencyDomainFilterICF2_New():
    return itkUnaryFrequencyDomainFilterICF2.New()

class itkUnaryFrequencyDomainFilterICF2(itk.itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2ICF2):
    r"""


    Performs a unary operation on a frequency domain image.

    A frequency filtering functor needs to be supplied via one of
    SetFunctor() overloads. The functor should take FrequencyIteratorType
    reference as its only parameter. If functor configurability is
    required, those parameters should be passed directly to the functor at
    the place of definition.

    Filters in the module ITKImageFrequency work with input images in the
    frequency domain. This filter is templated over a TFrequencyIterator
    depending on the frequency layout of the input image.

    Images in the dual space can be acquired experimentally, from
    scattering experiments or other techniques. In that case use
    FrequencyImageRegionIteratorWithIndex because the layout of dual space
    images is the same as spatial domain images.

    Frequency-domain images can be computed from any spatial-domain
    applying a Fourier Transform. If ForwardFFTImageFilter was used,
    template this filter with the
    FrequencyFFTLayoutImageRegionIteratorWithIndex. Please note that
    FrequencyFFTLayoutImageRegionIteratorWithIndex requires a full FFT,
    and is not compatible with the Hermitian optimization.

    To use this filter with Hermitian (halved-frequency) FFTs, use
    FrequencyHalfHermitianFFTLayoutImageRegionIteratorWithIndex or its
    const version.

    use FrequencyShiftedFFTLayoutImageRegionIteratorWithIndex.

    See:  UnaryGeneratorImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryFrequencyDomainFilterPython.itkUnaryFrequencyDomainFilterICF2___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryFrequencyDomainFilterPython.itkUnaryFrequencyDomainFilterICF2_Clone)
    ImageTypeHasNumericTraitsCheck = _itkUnaryFrequencyDomainFilterPython.itkUnaryFrequencyDomainFilterICF2_ImageTypeHasNumericTraitsCheck
    
    SetActualXDimensionIsOdd = _swig_new_instance_method(_itkUnaryFrequencyDomainFilterPython.itkUnaryFrequencyDomainFilterICF2_SetActualXDimensionIsOdd)
    GetActualXDimensionIsOdd = _swig_new_instance_method(_itkUnaryFrequencyDomainFilterPython.itkUnaryFrequencyDomainFilterICF2_GetActualXDimensionIsOdd)
    ActualXDimensionIsOddOn = _swig_new_instance_method(_itkUnaryFrequencyDomainFilterPython.itkUnaryFrequencyDomainFilterICF2_ActualXDimensionIsOddOn)
    ActualXDimensionIsOddOff = _swig_new_instance_method(_itkUnaryFrequencyDomainFilterPython.itkUnaryFrequencyDomainFilterICF2_ActualXDimensionIsOddOff)
    __swig_destroy__ = _itkUnaryFrequencyDomainFilterPython.delete_itkUnaryFrequencyDomainFilterICF2
    cast = _swig_new_static_method(_itkUnaryFrequencyDomainFilterPython.itkUnaryFrequencyDomainFilterICF2_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryFrequencyDomainFilterICF2

        Create a new object of the class itkUnaryFrequencyDomainFilterICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryFrequencyDomainFilterICF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryFrequencyDomainFilterICF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryFrequencyDomainFilterICF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryFrequencyDomainFilterICF2 in _itkUnaryFrequencyDomainFilterPython:
_itkUnaryFrequencyDomainFilterPython.itkUnaryFrequencyDomainFilterICF2_swigregister(itkUnaryFrequencyDomainFilterICF2)
itkUnaryFrequencyDomainFilterICF2___New_orig__ = _itkUnaryFrequencyDomainFilterPython.itkUnaryFrequencyDomainFilterICF2___New_orig__
itkUnaryFrequencyDomainFilterICF2_cast = _itkUnaryFrequencyDomainFilterPython.itkUnaryFrequencyDomainFilterICF2_cast


def itkUnaryFrequencyDomainFilterICF3_New():
    return itkUnaryFrequencyDomainFilterICF3.New()

class itkUnaryFrequencyDomainFilterICF3(itk.itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3ICF3):
    r"""


    Performs a unary operation on a frequency domain image.

    A frequency filtering functor needs to be supplied via one of
    SetFunctor() overloads. The functor should take FrequencyIteratorType
    reference as its only parameter. If functor configurability is
    required, those parameters should be passed directly to the functor at
    the place of definition.

    Filters in the module ITKImageFrequency work with input images in the
    frequency domain. This filter is templated over a TFrequencyIterator
    depending on the frequency layout of the input image.

    Images in the dual space can be acquired experimentally, from
    scattering experiments or other techniques. In that case use
    FrequencyImageRegionIteratorWithIndex because the layout of dual space
    images is the same as spatial domain images.

    Frequency-domain images can be computed from any spatial-domain
    applying a Fourier Transform. If ForwardFFTImageFilter was used,
    template this filter with the
    FrequencyFFTLayoutImageRegionIteratorWithIndex. Please note that
    FrequencyFFTLayoutImageRegionIteratorWithIndex requires a full FFT,
    and is not compatible with the Hermitian optimization.

    To use this filter with Hermitian (halved-frequency) FFTs, use
    FrequencyHalfHermitianFFTLayoutImageRegionIteratorWithIndex or its
    const version.

    use FrequencyShiftedFFTLayoutImageRegionIteratorWithIndex.

    See:  UnaryGeneratorImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryFrequencyDomainFilterPython.itkUnaryFrequencyDomainFilterICF3___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryFrequencyDomainFilterPython.itkUnaryFrequencyDomainFilterICF3_Clone)
    ImageTypeHasNumericTraitsCheck = _itkUnaryFrequencyDomainFilterPython.itkUnaryFrequencyDomainFilterICF3_ImageTypeHasNumericTraitsCheck
    
    SetActualXDimensionIsOdd = _swig_new_instance_method(_itkUnaryFrequencyDomainFilterPython.itkUnaryFrequencyDomainFilterICF3_SetActualXDimensionIsOdd)
    GetActualXDimensionIsOdd = _swig_new_instance_method(_itkUnaryFrequencyDomainFilterPython.itkUnaryFrequencyDomainFilterICF3_GetActualXDimensionIsOdd)
    ActualXDimensionIsOddOn = _swig_new_instance_method(_itkUnaryFrequencyDomainFilterPython.itkUnaryFrequencyDomainFilterICF3_ActualXDimensionIsOddOn)
    ActualXDimensionIsOddOff = _swig_new_instance_method(_itkUnaryFrequencyDomainFilterPython.itkUnaryFrequencyDomainFilterICF3_ActualXDimensionIsOddOff)
    __swig_destroy__ = _itkUnaryFrequencyDomainFilterPython.delete_itkUnaryFrequencyDomainFilterICF3
    cast = _swig_new_static_method(_itkUnaryFrequencyDomainFilterPython.itkUnaryFrequencyDomainFilterICF3_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryFrequencyDomainFilterICF3

        Create a new object of the class itkUnaryFrequencyDomainFilterICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryFrequencyDomainFilterICF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryFrequencyDomainFilterICF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryFrequencyDomainFilterICF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryFrequencyDomainFilterICF3 in _itkUnaryFrequencyDomainFilterPython:
_itkUnaryFrequencyDomainFilterPython.itkUnaryFrequencyDomainFilterICF3_swigregister(itkUnaryFrequencyDomainFilterICF3)
itkUnaryFrequencyDomainFilterICF3___New_orig__ = _itkUnaryFrequencyDomainFilterPython.itkUnaryFrequencyDomainFilterICF3___New_orig__
itkUnaryFrequencyDomainFilterICF3_cast = _itkUnaryFrequencyDomainFilterPython.itkUnaryFrequencyDomainFilterICF3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def unary_frequency_domain_filter(*args, **kwargs):
    """Procedural interface for UnaryFrequencyDomainFilter"""
    import itk
    instance = itk.UnaryFrequencyDomainFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def unary_frequency_domain_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.UnaryFrequencyDomainFilter, itkTemplate.itkTemplate):
        filter_object = itk.UnaryFrequencyDomainFilter.values()[0]
    else:
        filter_object = itk.UnaryFrequencyDomainFilter

    unary_frequency_domain_filter.__doc__ = filter_object.__doc__
    unary_frequency_domain_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    unary_frequency_domain_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.UnaryFrequencyDomainFilter, itkTemplate.itkTemplate):
        unary_frequency_domain_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        unary_frequency_domain_filter.__doc__ += "\n"
        unary_frequency_domain_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        unary_frequency_domain_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



