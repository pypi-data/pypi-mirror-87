import abc
from abc import ABC, abstractmethod
from collections import namedtuple
from helixswarm.endpoints.activities import Activities as Activities
from helixswarm.endpoints.changes import Changes as Changes
from helixswarm.endpoints.comments import Comments as Comments
from helixswarm.endpoints.groups import Groups as Groups
from helixswarm.endpoints.projects import Projects as Projects
from helixswarm.endpoints.reviews import Reviews as Reviews
from helixswarm.endpoints.workflows import Workflows as Workflows
from helixswarm.exceptions import SwarmError as SwarmError, SwarmNotFoundError as SwarmNotFoundError
from typing import Any, Callable

Response = namedtuple('Response', ['status', 'body'])

class Swarm(ABC, metaclass=abc.ABCMeta):
    activities: Any = ...
    changes: Any = ...
    comments: Any = ...
    groups: Any = ...
    projects: Any = ...
    reviews: Any = ...
    workflows: Any = ...
    def __init__(self) -> None: ...
    @abstractmethod
    def close(self) -> None: ...
    @abstractmethod
    def request(self, callback: Callable[[Response], dict], method: str, path: str, **kwargs: Any) -> dict: ...
    def get_version(self) -> dict: ...
