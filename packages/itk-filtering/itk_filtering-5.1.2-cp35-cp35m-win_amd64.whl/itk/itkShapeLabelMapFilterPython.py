# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKLabelMapPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkShapeLabelMapFilterPython
else:
    import _itkShapeLabelMapFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkShapeLabelMapFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkShapeLabelMapFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.itkStatisticsLabelObjectPython
import itk.itkPointPython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkAffineTransformPython
import itk.itkMatrixOffsetTransformBasePython
import itk.itkOptimizerParametersPython
import itk.itkArrayPython
import itk.ITKCommonBasePython
import itk.itkVariableLengthVectorPython
import itk.itkTransformBasePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkArray2DPython
import itk.itkDiffusionTensor3DPython
import itk.itkHistogramPython
import itk.itkSamplePython
import itk.itkShapeLabelObjectPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkLabelObjectPython
import itk.itkLabelObjectLinePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkInPlaceLabelMapFilterPython
import itk.itkLabelMapFilterPython
import itk.ITKLabelMapBasePython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython

def itkShapeLabelMapFilterLM2_New():
    return itkShapeLabelMapFilterLM2.New()

class itkShapeLabelMapFilterLM2(itk.itkInPlaceLabelMapFilterPython.itkInPlaceLabelMapFilterLM2):
    r"""


    The valuator class for the ShapeLabelObject.

    ShapeLabelMapFilter can be used to set the attributes values of the
    ShapeLabelObject in a LabelMap.

    ShapeLabelMapFilter takes an optional parameter, used only to optimize
    the computation time and the memory usage when the perimeter or the
    feret diameter is used: the exact copy of the input LabelMap is stored
    in an Image. It can be set with SetLabelImage(). It is cleared at the
    end of the computation, so must be reset before running Update()
    again. It is not part of the pipeline management design, to let the
    subclasses of ShapeLabelMapFilter use the pipeline design to specify
    truly required inputs.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/1926/584
    orhttp://www.insight-journal.org/browse/publication/176 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkShapeLabelMapFilterPython.itkShapeLabelMapFilterLM2___New_orig__)
    Clone = _swig_new_instance_method(_itkShapeLabelMapFilterPython.itkShapeLabelMapFilterLM2_Clone)
    SetComputeFeretDiameter = _swig_new_instance_method(_itkShapeLabelMapFilterPython.itkShapeLabelMapFilterLM2_SetComputeFeretDiameter)
    GetComputeFeretDiameter = _swig_new_instance_method(_itkShapeLabelMapFilterPython.itkShapeLabelMapFilterLM2_GetComputeFeretDiameter)
    ComputeFeretDiameterOn = _swig_new_instance_method(_itkShapeLabelMapFilterPython.itkShapeLabelMapFilterLM2_ComputeFeretDiameterOn)
    ComputeFeretDiameterOff = _swig_new_instance_method(_itkShapeLabelMapFilterPython.itkShapeLabelMapFilterLM2_ComputeFeretDiameterOff)
    SetComputePerimeter = _swig_new_instance_method(_itkShapeLabelMapFilterPython.itkShapeLabelMapFilterLM2_SetComputePerimeter)
    GetComputePerimeter = _swig_new_instance_method(_itkShapeLabelMapFilterPython.itkShapeLabelMapFilterLM2_GetComputePerimeter)
    ComputePerimeterOn = _swig_new_instance_method(_itkShapeLabelMapFilterPython.itkShapeLabelMapFilterLM2_ComputePerimeterOn)
    ComputePerimeterOff = _swig_new_instance_method(_itkShapeLabelMapFilterPython.itkShapeLabelMapFilterLM2_ComputePerimeterOff)
    SetComputeOrientedBoundingBox = _swig_new_instance_method(_itkShapeLabelMapFilterPython.itkShapeLabelMapFilterLM2_SetComputeOrientedBoundingBox)
    GetComputeOrientedBoundingBox = _swig_new_instance_method(_itkShapeLabelMapFilterPython.itkShapeLabelMapFilterLM2_GetComputeOrientedBoundingBox)
    ComputeOrientedBoundingBoxOn = _swig_new_instance_method(_itkShapeLabelMapFilterPython.itkShapeLabelMapFilterLM2_ComputeOrientedBoundingBoxOn)
    ComputeOrientedBoundingBoxOff = _swig_new_instance_method(_itkShapeLabelMapFilterPython.itkShapeLabelMapFilterLM2_ComputeOrientedBoundingBoxOff)
    SetLabelImage = _swig_new_instance_method(_itkShapeLabelMapFilterPython.itkShapeLabelMapFilterLM2_SetLabelImage)
    __swig_destroy__ = _itkShapeLabelMapFilterPython.delete_itkShapeLabelMapFilterLM2
    cast = _swig_new_static_method(_itkShapeLabelMapFilterPython.itkShapeLabelMapFilterLM2_cast)

    def New(*args, **kargs):
        """New() -> itkShapeLabelMapFilterLM2

        Create a new object of the class itkShapeLabelMapFilterLM2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShapeLabelMapFilterLM2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkShapeLabelMapFilterLM2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkShapeLabelMapFilterLM2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkShapeLabelMapFilterLM2 in _itkShapeLabelMapFilterPython:
_itkShapeLabelMapFilterPython.itkShapeLabelMapFilterLM2_swigregister(itkShapeLabelMapFilterLM2)
itkShapeLabelMapFilterLM2___New_orig__ = _itkShapeLabelMapFilterPython.itkShapeLabelMapFilterLM2___New_orig__
itkShapeLabelMapFilterLM2_cast = _itkShapeLabelMapFilterPython.itkShapeLabelMapFilterLM2_cast


def itkShapeLabelMapFilterLM3_New():
    return itkShapeLabelMapFilterLM3.New()

class itkShapeLabelMapFilterLM3(itk.itkInPlaceLabelMapFilterPython.itkInPlaceLabelMapFilterLM3):
    r"""


    The valuator class for the ShapeLabelObject.

    ShapeLabelMapFilter can be used to set the attributes values of the
    ShapeLabelObject in a LabelMap.

    ShapeLabelMapFilter takes an optional parameter, used only to optimize
    the computation time and the memory usage when the perimeter or the
    feret diameter is used: the exact copy of the input LabelMap is stored
    in an Image. It can be set with SetLabelImage(). It is cleared at the
    end of the computation, so must be reset before running Update()
    again. It is not part of the pipeline management design, to let the
    subclasses of ShapeLabelMapFilter use the pipeline design to specify
    truly required inputs.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/1926/584
    orhttp://www.insight-journal.org/browse/publication/176 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkShapeLabelMapFilterPython.itkShapeLabelMapFilterLM3___New_orig__)
    Clone = _swig_new_instance_method(_itkShapeLabelMapFilterPython.itkShapeLabelMapFilterLM3_Clone)
    SetComputeFeretDiameter = _swig_new_instance_method(_itkShapeLabelMapFilterPython.itkShapeLabelMapFilterLM3_SetComputeFeretDiameter)
    GetComputeFeretDiameter = _swig_new_instance_method(_itkShapeLabelMapFilterPython.itkShapeLabelMapFilterLM3_GetComputeFeretDiameter)
    ComputeFeretDiameterOn = _swig_new_instance_method(_itkShapeLabelMapFilterPython.itkShapeLabelMapFilterLM3_ComputeFeretDiameterOn)
    ComputeFeretDiameterOff = _swig_new_instance_method(_itkShapeLabelMapFilterPython.itkShapeLabelMapFilterLM3_ComputeFeretDiameterOff)
    SetComputePerimeter = _swig_new_instance_method(_itkShapeLabelMapFilterPython.itkShapeLabelMapFilterLM3_SetComputePerimeter)
    GetComputePerimeter = _swig_new_instance_method(_itkShapeLabelMapFilterPython.itkShapeLabelMapFilterLM3_GetComputePerimeter)
    ComputePerimeterOn = _swig_new_instance_method(_itkShapeLabelMapFilterPython.itkShapeLabelMapFilterLM3_ComputePerimeterOn)
    ComputePerimeterOff = _swig_new_instance_method(_itkShapeLabelMapFilterPython.itkShapeLabelMapFilterLM3_ComputePerimeterOff)
    SetComputeOrientedBoundingBox = _swig_new_instance_method(_itkShapeLabelMapFilterPython.itkShapeLabelMapFilterLM3_SetComputeOrientedBoundingBox)
    GetComputeOrientedBoundingBox = _swig_new_instance_method(_itkShapeLabelMapFilterPython.itkShapeLabelMapFilterLM3_GetComputeOrientedBoundingBox)
    ComputeOrientedBoundingBoxOn = _swig_new_instance_method(_itkShapeLabelMapFilterPython.itkShapeLabelMapFilterLM3_ComputeOrientedBoundingBoxOn)
    ComputeOrientedBoundingBoxOff = _swig_new_instance_method(_itkShapeLabelMapFilterPython.itkShapeLabelMapFilterLM3_ComputeOrientedBoundingBoxOff)
    SetLabelImage = _swig_new_instance_method(_itkShapeLabelMapFilterPython.itkShapeLabelMapFilterLM3_SetLabelImage)
    __swig_destroy__ = _itkShapeLabelMapFilterPython.delete_itkShapeLabelMapFilterLM3
    cast = _swig_new_static_method(_itkShapeLabelMapFilterPython.itkShapeLabelMapFilterLM3_cast)

    def New(*args, **kargs):
        """New() -> itkShapeLabelMapFilterLM3

        Create a new object of the class itkShapeLabelMapFilterLM3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShapeLabelMapFilterLM3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkShapeLabelMapFilterLM3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkShapeLabelMapFilterLM3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkShapeLabelMapFilterLM3 in _itkShapeLabelMapFilterPython:
_itkShapeLabelMapFilterPython.itkShapeLabelMapFilterLM3_swigregister(itkShapeLabelMapFilterLM3)
itkShapeLabelMapFilterLM3___New_orig__ = _itkShapeLabelMapFilterPython.itkShapeLabelMapFilterLM3___New_orig__
itkShapeLabelMapFilterLM3_cast = _itkShapeLabelMapFilterPython.itkShapeLabelMapFilterLM3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def shape_label_map_filter(*args, **kwargs):
    """Procedural interface for ShapeLabelMapFilter"""
    import itk
    instance = itk.ShapeLabelMapFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def shape_label_map_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ShapeLabelMapFilter, itkTemplate.itkTemplate):
        filter_object = itk.ShapeLabelMapFilter.values()[0]
    else:
        filter_object = itk.ShapeLabelMapFilter

    shape_label_map_filter.__doc__ = filter_object.__doc__
    shape_label_map_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    shape_label_map_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.ShapeLabelMapFilter, itkTemplate.itkTemplate):
        shape_label_map_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        shape_label_map_filter.__doc__ += "\n"
        shape_label_map_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        shape_label_map_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



