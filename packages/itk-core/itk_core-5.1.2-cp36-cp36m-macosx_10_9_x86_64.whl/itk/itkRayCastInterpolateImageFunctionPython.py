# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageFunctionPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkRayCastInterpolateImageFunctionPython
else:
    import _itkRayCastInterpolateImageFunctionPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkRayCastInterpolateImageFunctionPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkRayCastInterpolateImageFunctionPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkTransformBasePython
import itk.vnl_matrix_fixedPython
import itk.vnl_matrixPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkPointPython
import itk.itkCovariantVectorPython
import itk.itkDiffusionTensor3DPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.itkVariableLengthVectorPython
import itk.itkArrayPython
import itk.itkArray2DPython
import itk.itkOptimizerParametersPython
import itk.itkContinuousIndexPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkInterpolateImageFunctionPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkImageFunctionBasePython
import itk.itkImagePython
import itk.itkImageRegionPython
import itk.itkFunctionBasePython
class RayCastHelperEnums(object):
    r"""Proxy of C++ RayCastHelperEnums class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    TraversalDirection_UNDEFINED_DIRECTION = _itkRayCastInterpolateImageFunctionPython.RayCastHelperEnums_TraversalDirection_UNDEFINED_DIRECTION
    
    TraversalDirection_TRANSVERSE_IN_X = _itkRayCastInterpolateImageFunctionPython.RayCastHelperEnums_TraversalDirection_TRANSVERSE_IN_X
    
    TraversalDirection_TRANSVERSE_IN_Y = _itkRayCastInterpolateImageFunctionPython.RayCastHelperEnums_TraversalDirection_TRANSVERSE_IN_Y
    
    TraversalDirection_TRANSVERSE_IN_Z = _itkRayCastInterpolateImageFunctionPython.RayCastHelperEnums_TraversalDirection_TRANSVERSE_IN_Z
    
    TraversalDirection_LAST_DIRECTION = _itkRayCastInterpolateImageFunctionPython.RayCastHelperEnums_TraversalDirection_LAST_DIRECTION
    

    def __init__(self, *args):
        r"""
        __init__(RayCastHelperEnums self) -> RayCastHelperEnums
        __init__(RayCastHelperEnums self, RayCastHelperEnums arg0) -> RayCastHelperEnums
        """
        _itkRayCastInterpolateImageFunctionPython.RayCastHelperEnums_swiginit(self, _itkRayCastInterpolateImageFunctionPython.new_RayCastHelperEnums(*args))
    __swig_destroy__ = _itkRayCastInterpolateImageFunctionPython.delete_RayCastHelperEnums

# Register RayCastHelperEnums in _itkRayCastInterpolateImageFunctionPython:
_itkRayCastInterpolateImageFunctionPython.RayCastHelperEnums_swigregister(RayCastHelperEnums)


def itkRayCastInterpolateImageFunctionID3D_New():
    return itkRayCastInterpolateImageFunctionID3D.New()

class itkRayCastInterpolateImageFunctionID3D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID3D):
    r"""


    Projective interpolation of an image at specified positions.

    RayCastInterpolateImageFunction casts rays through a 3-dimensional
    image and uses bilinear interpolation to integrate each plane of
    voxels traversed.

    WARNING:  This interpolator works for 3-dimensional images only. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3D___New_orig__)
    Clone = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3D_Clone)
    SetTransform = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3D_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3D_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3D_GetTransform)
    SetInterpolator = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3D_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3D_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3D_GetInterpolator)
    SetFocalPoint = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3D_SetFocalPoint)
    GetFocalPoint = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3D_GetFocalPoint)
    SetThreshold = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3D_SetThreshold)
    GetThreshold = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3D_GetThreshold)
    IsInsideBuffer = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3D_IsInsideBuffer)
    __swig_destroy__ = _itkRayCastInterpolateImageFunctionPython.delete_itkRayCastInterpolateImageFunctionID3D
    cast = _swig_new_static_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3D_cast)

    def New(*args, **kargs):
        """New() -> itkRayCastInterpolateImageFunctionID3D

        Create a new object of the class itkRayCastInterpolateImageFunctionID3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRayCastInterpolateImageFunctionID3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRayCastInterpolateImageFunctionID3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRayCastInterpolateImageFunctionID3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRayCastInterpolateImageFunctionID3D in _itkRayCastInterpolateImageFunctionPython:
_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3D_swigregister(itkRayCastInterpolateImageFunctionID3D)
itkRayCastInterpolateImageFunctionID3D___New_orig__ = _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3D___New_orig__
itkRayCastInterpolateImageFunctionID3D_cast = _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3D_cast


def itkRayCastInterpolateImageFunctionID3F_New():
    return itkRayCastInterpolateImageFunctionID3F.New()

class itkRayCastInterpolateImageFunctionID3F(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID3F):
    r"""


    Projective interpolation of an image at specified positions.

    RayCastInterpolateImageFunction casts rays through a 3-dimensional
    image and uses bilinear interpolation to integrate each plane of
    voxels traversed.

    WARNING:  This interpolator works for 3-dimensional images only. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3F___New_orig__)
    Clone = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3F_Clone)
    SetTransform = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3F_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3F_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3F_GetTransform)
    SetInterpolator = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3F_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3F_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3F_GetInterpolator)
    SetFocalPoint = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3F_SetFocalPoint)
    GetFocalPoint = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3F_GetFocalPoint)
    SetThreshold = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3F_SetThreshold)
    GetThreshold = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3F_GetThreshold)
    IsInsideBuffer = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3F_IsInsideBuffer)
    __swig_destroy__ = _itkRayCastInterpolateImageFunctionPython.delete_itkRayCastInterpolateImageFunctionID3F
    cast = _swig_new_static_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3F_cast)

    def New(*args, **kargs):
        """New() -> itkRayCastInterpolateImageFunctionID3F

        Create a new object of the class itkRayCastInterpolateImageFunctionID3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRayCastInterpolateImageFunctionID3F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRayCastInterpolateImageFunctionID3F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRayCastInterpolateImageFunctionID3F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRayCastInterpolateImageFunctionID3F in _itkRayCastInterpolateImageFunctionPython:
_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3F_swigregister(itkRayCastInterpolateImageFunctionID3F)
itkRayCastInterpolateImageFunctionID3F___New_orig__ = _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3F___New_orig__
itkRayCastInterpolateImageFunctionID3F_cast = _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3F_cast


def itkRayCastInterpolateImageFunctionIF3D_New():
    return itkRayCastInterpolateImageFunctionIF3D.New()

class itkRayCastInterpolateImageFunctionIF3D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF3D):
    r"""


    Projective interpolation of an image at specified positions.

    RayCastInterpolateImageFunction casts rays through a 3-dimensional
    image and uses bilinear interpolation to integrate each plane of
    voxels traversed.

    WARNING:  This interpolator works for 3-dimensional images only. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3D___New_orig__)
    Clone = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3D_Clone)
    SetTransform = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3D_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3D_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3D_GetTransform)
    SetInterpolator = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3D_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3D_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3D_GetInterpolator)
    SetFocalPoint = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3D_SetFocalPoint)
    GetFocalPoint = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3D_GetFocalPoint)
    SetThreshold = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3D_SetThreshold)
    GetThreshold = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3D_GetThreshold)
    IsInsideBuffer = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3D_IsInsideBuffer)
    __swig_destroy__ = _itkRayCastInterpolateImageFunctionPython.delete_itkRayCastInterpolateImageFunctionIF3D
    cast = _swig_new_static_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3D_cast)

    def New(*args, **kargs):
        """New() -> itkRayCastInterpolateImageFunctionIF3D

        Create a new object of the class itkRayCastInterpolateImageFunctionIF3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRayCastInterpolateImageFunctionIF3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRayCastInterpolateImageFunctionIF3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRayCastInterpolateImageFunctionIF3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRayCastInterpolateImageFunctionIF3D in _itkRayCastInterpolateImageFunctionPython:
_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3D_swigregister(itkRayCastInterpolateImageFunctionIF3D)
itkRayCastInterpolateImageFunctionIF3D___New_orig__ = _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3D___New_orig__
itkRayCastInterpolateImageFunctionIF3D_cast = _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3D_cast


def itkRayCastInterpolateImageFunctionIF3F_New():
    return itkRayCastInterpolateImageFunctionIF3F.New()

class itkRayCastInterpolateImageFunctionIF3F(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF3F):
    r"""


    Projective interpolation of an image at specified positions.

    RayCastInterpolateImageFunction casts rays through a 3-dimensional
    image and uses bilinear interpolation to integrate each plane of
    voxels traversed.

    WARNING:  This interpolator works for 3-dimensional images only. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3F___New_orig__)
    Clone = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3F_Clone)
    SetTransform = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3F_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3F_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3F_GetTransform)
    SetInterpolator = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3F_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3F_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3F_GetInterpolator)
    SetFocalPoint = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3F_SetFocalPoint)
    GetFocalPoint = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3F_GetFocalPoint)
    SetThreshold = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3F_SetThreshold)
    GetThreshold = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3F_GetThreshold)
    IsInsideBuffer = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3F_IsInsideBuffer)
    __swig_destroy__ = _itkRayCastInterpolateImageFunctionPython.delete_itkRayCastInterpolateImageFunctionIF3F
    cast = _swig_new_static_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3F_cast)

    def New(*args, **kargs):
        """New() -> itkRayCastInterpolateImageFunctionIF3F

        Create a new object of the class itkRayCastInterpolateImageFunctionIF3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRayCastInterpolateImageFunctionIF3F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRayCastInterpolateImageFunctionIF3F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRayCastInterpolateImageFunctionIF3F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRayCastInterpolateImageFunctionIF3F in _itkRayCastInterpolateImageFunctionPython:
_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3F_swigregister(itkRayCastInterpolateImageFunctionIF3F)
itkRayCastInterpolateImageFunctionIF3F___New_orig__ = _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3F___New_orig__
itkRayCastInterpolateImageFunctionIF3F_cast = _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3F_cast


def itkRayCastInterpolateImageFunctionISS3D_New():
    return itkRayCastInterpolateImageFunctionISS3D.New()

class itkRayCastInterpolateImageFunctionISS3D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS3D):
    r"""


    Projective interpolation of an image at specified positions.

    RayCastInterpolateImageFunction casts rays through a 3-dimensional
    image and uses bilinear interpolation to integrate each plane of
    voxels traversed.

    WARNING:  This interpolator works for 3-dimensional images only. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3D___New_orig__)
    Clone = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3D_Clone)
    SetTransform = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3D_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3D_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3D_GetTransform)
    SetInterpolator = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3D_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3D_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3D_GetInterpolator)
    SetFocalPoint = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3D_SetFocalPoint)
    GetFocalPoint = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3D_GetFocalPoint)
    SetThreshold = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3D_SetThreshold)
    GetThreshold = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3D_GetThreshold)
    IsInsideBuffer = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3D_IsInsideBuffer)
    __swig_destroy__ = _itkRayCastInterpolateImageFunctionPython.delete_itkRayCastInterpolateImageFunctionISS3D
    cast = _swig_new_static_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3D_cast)

    def New(*args, **kargs):
        """New() -> itkRayCastInterpolateImageFunctionISS3D

        Create a new object of the class itkRayCastInterpolateImageFunctionISS3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRayCastInterpolateImageFunctionISS3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRayCastInterpolateImageFunctionISS3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRayCastInterpolateImageFunctionISS3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRayCastInterpolateImageFunctionISS3D in _itkRayCastInterpolateImageFunctionPython:
_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3D_swigregister(itkRayCastInterpolateImageFunctionISS3D)
itkRayCastInterpolateImageFunctionISS3D___New_orig__ = _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3D___New_orig__
itkRayCastInterpolateImageFunctionISS3D_cast = _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3D_cast


def itkRayCastInterpolateImageFunctionISS3F_New():
    return itkRayCastInterpolateImageFunctionISS3F.New()

class itkRayCastInterpolateImageFunctionISS3F(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS3F):
    r"""


    Projective interpolation of an image at specified positions.

    RayCastInterpolateImageFunction casts rays through a 3-dimensional
    image and uses bilinear interpolation to integrate each plane of
    voxels traversed.

    WARNING:  This interpolator works for 3-dimensional images only. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3F___New_orig__)
    Clone = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3F_Clone)
    SetTransform = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3F_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3F_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3F_GetTransform)
    SetInterpolator = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3F_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3F_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3F_GetInterpolator)
    SetFocalPoint = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3F_SetFocalPoint)
    GetFocalPoint = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3F_GetFocalPoint)
    SetThreshold = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3F_SetThreshold)
    GetThreshold = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3F_GetThreshold)
    IsInsideBuffer = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3F_IsInsideBuffer)
    __swig_destroy__ = _itkRayCastInterpolateImageFunctionPython.delete_itkRayCastInterpolateImageFunctionISS3F
    cast = _swig_new_static_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3F_cast)

    def New(*args, **kargs):
        """New() -> itkRayCastInterpolateImageFunctionISS3F

        Create a new object of the class itkRayCastInterpolateImageFunctionISS3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRayCastInterpolateImageFunctionISS3F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRayCastInterpolateImageFunctionISS3F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRayCastInterpolateImageFunctionISS3F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRayCastInterpolateImageFunctionISS3F in _itkRayCastInterpolateImageFunctionPython:
_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3F_swigregister(itkRayCastInterpolateImageFunctionISS3F)
itkRayCastInterpolateImageFunctionISS3F___New_orig__ = _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3F___New_orig__
itkRayCastInterpolateImageFunctionISS3F_cast = _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3F_cast


def itkRayCastInterpolateImageFunctionIUC3D_New():
    return itkRayCastInterpolateImageFunctionIUC3D.New()

class itkRayCastInterpolateImageFunctionIUC3D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC3D):
    r"""


    Projective interpolation of an image at specified positions.

    RayCastInterpolateImageFunction casts rays through a 3-dimensional
    image and uses bilinear interpolation to integrate each plane of
    voxels traversed.

    WARNING:  This interpolator works for 3-dimensional images only. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3D___New_orig__)
    Clone = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3D_Clone)
    SetTransform = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3D_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3D_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3D_GetTransform)
    SetInterpolator = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3D_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3D_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3D_GetInterpolator)
    SetFocalPoint = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3D_SetFocalPoint)
    GetFocalPoint = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3D_GetFocalPoint)
    SetThreshold = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3D_SetThreshold)
    GetThreshold = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3D_GetThreshold)
    IsInsideBuffer = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3D_IsInsideBuffer)
    __swig_destroy__ = _itkRayCastInterpolateImageFunctionPython.delete_itkRayCastInterpolateImageFunctionIUC3D
    cast = _swig_new_static_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3D_cast)

    def New(*args, **kargs):
        """New() -> itkRayCastInterpolateImageFunctionIUC3D

        Create a new object of the class itkRayCastInterpolateImageFunctionIUC3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRayCastInterpolateImageFunctionIUC3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRayCastInterpolateImageFunctionIUC3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRayCastInterpolateImageFunctionIUC3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRayCastInterpolateImageFunctionIUC3D in _itkRayCastInterpolateImageFunctionPython:
_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3D_swigregister(itkRayCastInterpolateImageFunctionIUC3D)
itkRayCastInterpolateImageFunctionIUC3D___New_orig__ = _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3D___New_orig__
itkRayCastInterpolateImageFunctionIUC3D_cast = _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3D_cast


def itkRayCastInterpolateImageFunctionIUC3F_New():
    return itkRayCastInterpolateImageFunctionIUC3F.New()

class itkRayCastInterpolateImageFunctionIUC3F(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC3F):
    r"""


    Projective interpolation of an image at specified positions.

    RayCastInterpolateImageFunction casts rays through a 3-dimensional
    image and uses bilinear interpolation to integrate each plane of
    voxels traversed.

    WARNING:  This interpolator works for 3-dimensional images only. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3F___New_orig__)
    Clone = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3F_Clone)
    SetTransform = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3F_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3F_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3F_GetTransform)
    SetInterpolator = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3F_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3F_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3F_GetInterpolator)
    SetFocalPoint = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3F_SetFocalPoint)
    GetFocalPoint = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3F_GetFocalPoint)
    SetThreshold = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3F_SetThreshold)
    GetThreshold = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3F_GetThreshold)
    IsInsideBuffer = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3F_IsInsideBuffer)
    __swig_destroy__ = _itkRayCastInterpolateImageFunctionPython.delete_itkRayCastInterpolateImageFunctionIUC3F
    cast = _swig_new_static_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3F_cast)

    def New(*args, **kargs):
        """New() -> itkRayCastInterpolateImageFunctionIUC3F

        Create a new object of the class itkRayCastInterpolateImageFunctionIUC3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRayCastInterpolateImageFunctionIUC3F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRayCastInterpolateImageFunctionIUC3F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRayCastInterpolateImageFunctionIUC3F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRayCastInterpolateImageFunctionIUC3F in _itkRayCastInterpolateImageFunctionPython:
_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3F_swigregister(itkRayCastInterpolateImageFunctionIUC3F)
itkRayCastInterpolateImageFunctionIUC3F___New_orig__ = _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3F___New_orig__
itkRayCastInterpolateImageFunctionIUC3F_cast = _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3F_cast


def itkRayCastInterpolateImageFunctionIUS3D_New():
    return itkRayCastInterpolateImageFunctionIUS3D.New()

class itkRayCastInterpolateImageFunctionIUS3D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS3D):
    r"""


    Projective interpolation of an image at specified positions.

    RayCastInterpolateImageFunction casts rays through a 3-dimensional
    image and uses bilinear interpolation to integrate each plane of
    voxels traversed.

    WARNING:  This interpolator works for 3-dimensional images only. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3D___New_orig__)
    Clone = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3D_Clone)
    SetTransform = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3D_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3D_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3D_GetTransform)
    SetInterpolator = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3D_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3D_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3D_GetInterpolator)
    SetFocalPoint = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3D_SetFocalPoint)
    GetFocalPoint = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3D_GetFocalPoint)
    SetThreshold = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3D_SetThreshold)
    GetThreshold = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3D_GetThreshold)
    IsInsideBuffer = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3D_IsInsideBuffer)
    __swig_destroy__ = _itkRayCastInterpolateImageFunctionPython.delete_itkRayCastInterpolateImageFunctionIUS3D
    cast = _swig_new_static_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3D_cast)

    def New(*args, **kargs):
        """New() -> itkRayCastInterpolateImageFunctionIUS3D

        Create a new object of the class itkRayCastInterpolateImageFunctionIUS3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRayCastInterpolateImageFunctionIUS3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRayCastInterpolateImageFunctionIUS3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRayCastInterpolateImageFunctionIUS3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRayCastInterpolateImageFunctionIUS3D in _itkRayCastInterpolateImageFunctionPython:
_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3D_swigregister(itkRayCastInterpolateImageFunctionIUS3D)
itkRayCastInterpolateImageFunctionIUS3D___New_orig__ = _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3D___New_orig__
itkRayCastInterpolateImageFunctionIUS3D_cast = _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3D_cast


def itkRayCastInterpolateImageFunctionIUS3F_New():
    return itkRayCastInterpolateImageFunctionIUS3F.New()

class itkRayCastInterpolateImageFunctionIUS3F(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS3F):
    r"""


    Projective interpolation of an image at specified positions.

    RayCastInterpolateImageFunction casts rays through a 3-dimensional
    image and uses bilinear interpolation to integrate each plane of
    voxels traversed.

    WARNING:  This interpolator works for 3-dimensional images only. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3F___New_orig__)
    Clone = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3F_Clone)
    SetTransform = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3F_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3F_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3F_GetTransform)
    SetInterpolator = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3F_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3F_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3F_GetInterpolator)
    SetFocalPoint = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3F_SetFocalPoint)
    GetFocalPoint = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3F_GetFocalPoint)
    SetThreshold = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3F_SetThreshold)
    GetThreshold = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3F_GetThreshold)
    IsInsideBuffer = _swig_new_instance_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3F_IsInsideBuffer)
    __swig_destroy__ = _itkRayCastInterpolateImageFunctionPython.delete_itkRayCastInterpolateImageFunctionIUS3F
    cast = _swig_new_static_method(_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3F_cast)

    def New(*args, **kargs):
        """New() -> itkRayCastInterpolateImageFunctionIUS3F

        Create a new object of the class itkRayCastInterpolateImageFunctionIUS3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRayCastInterpolateImageFunctionIUS3F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRayCastInterpolateImageFunctionIUS3F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRayCastInterpolateImageFunctionIUS3F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRayCastInterpolateImageFunctionIUS3F in _itkRayCastInterpolateImageFunctionPython:
_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3F_swigregister(itkRayCastInterpolateImageFunctionIUS3F)
itkRayCastInterpolateImageFunctionIUS3F___New_orig__ = _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3F___New_orig__
itkRayCastInterpolateImageFunctionIUS3F_cast = _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3F_cast



