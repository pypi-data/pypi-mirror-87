# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKDeconvolutionPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkIterativeDeconvolutionImageFilterPython
else:
    import _itkIterativeDeconvolutionImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkIterativeDeconvolutionImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkIterativeDeconvolutionImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkFFTConvolutionImageFilterPython
import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkConvolutionImageFilterBasePython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkImagePython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkPointPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageBoundaryConditionPython
class itkIterativeDeconvolutionImageFilterID2ID2(itk.itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterID2ID2):
    r"""


    Abstract base class for filters that implement iterative deconvolution
    algorithms.

    This filter implements methods common to iterative deconvolution
    algorithms. The input blurred image is set with the usual SetInput()
    method and the blurring kernel is set with the SetKernelImage()
    method.

    The number of iterations can be set with the method
    SetNumberOfIterations(). This class emits an IterationEvent at the
    start of each iteration. Iteration can be terminated early by calling
    SetStopIteration( bool ) with the argument set to true. To resume
    iterating, you must call SetStopIteration( bool ) with the argument
    set to false before calling Update() a second time.

    This code was adapted from the Insight Journal contribution:

    "Deconvolution: infrastructure and reference algorithms" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3207 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetNumberOfIterations = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterID2ID2_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterID2ID2_GetNumberOfIterations)
    GetModifiableCurrentEstimate = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterID2ID2_GetModifiableCurrentEstimate)
    GetCurrentEstimate = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterID2ID2_GetCurrentEstimate)
    SetStopIteration = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterID2ID2_SetStopIteration)
    GetStopIteration = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterID2ID2_GetStopIteration)
    GetIteration = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterID2ID2_GetIteration)
    __swig_destroy__ = _itkIterativeDeconvolutionImageFilterPython.delete_itkIterativeDeconvolutionImageFilterID2ID2
    cast = _swig_new_static_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterID2ID2_cast)

# Register itkIterativeDeconvolutionImageFilterID2ID2 in _itkIterativeDeconvolutionImageFilterPython:
_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterID2ID2_swigregister(itkIterativeDeconvolutionImageFilterID2ID2)
itkIterativeDeconvolutionImageFilterID2ID2_cast = _itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterID2ID2_cast

class itkIterativeDeconvolutionImageFilterID3ID3(itk.itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterID3ID3):
    r"""


    Abstract base class for filters that implement iterative deconvolution
    algorithms.

    This filter implements methods common to iterative deconvolution
    algorithms. The input blurred image is set with the usual SetInput()
    method and the blurring kernel is set with the SetKernelImage()
    method.

    The number of iterations can be set with the method
    SetNumberOfIterations(). This class emits an IterationEvent at the
    start of each iteration. Iteration can be terminated early by calling
    SetStopIteration( bool ) with the argument set to true. To resume
    iterating, you must call SetStopIteration( bool ) with the argument
    set to false before calling Update() a second time.

    This code was adapted from the Insight Journal contribution:

    "Deconvolution: infrastructure and reference algorithms" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3207 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetNumberOfIterations = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterID3ID3_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterID3ID3_GetNumberOfIterations)
    GetModifiableCurrentEstimate = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterID3ID3_GetModifiableCurrentEstimate)
    GetCurrentEstimate = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterID3ID3_GetCurrentEstimate)
    SetStopIteration = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterID3ID3_SetStopIteration)
    GetStopIteration = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterID3ID3_GetStopIteration)
    GetIteration = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterID3ID3_GetIteration)
    __swig_destroy__ = _itkIterativeDeconvolutionImageFilterPython.delete_itkIterativeDeconvolutionImageFilterID3ID3
    cast = _swig_new_static_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterID3ID3_cast)

# Register itkIterativeDeconvolutionImageFilterID3ID3 in _itkIterativeDeconvolutionImageFilterPython:
_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterID3ID3_swigregister(itkIterativeDeconvolutionImageFilterID3ID3)
itkIterativeDeconvolutionImageFilterID3ID3_cast = _itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterID3ID3_cast

class itkIterativeDeconvolutionImageFilterIF2IF2(itk.itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIF2IF2):
    r"""


    Abstract base class for filters that implement iterative deconvolution
    algorithms.

    This filter implements methods common to iterative deconvolution
    algorithms. The input blurred image is set with the usual SetInput()
    method and the blurring kernel is set with the SetKernelImage()
    method.

    The number of iterations can be set with the method
    SetNumberOfIterations(). This class emits an IterationEvent at the
    start of each iteration. Iteration can be terminated early by calling
    SetStopIteration( bool ) with the argument set to true. To resume
    iterating, you must call SetStopIteration( bool ) with the argument
    set to false before calling Update() a second time.

    This code was adapted from the Insight Journal contribution:

    "Deconvolution: infrastructure and reference algorithms" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3207 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetNumberOfIterations = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIF2IF2_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIF2IF2_GetNumberOfIterations)
    GetModifiableCurrentEstimate = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIF2IF2_GetModifiableCurrentEstimate)
    GetCurrentEstimate = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIF2IF2_GetCurrentEstimate)
    SetStopIteration = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIF2IF2_SetStopIteration)
    GetStopIteration = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIF2IF2_GetStopIteration)
    GetIteration = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIF2IF2_GetIteration)
    __swig_destroy__ = _itkIterativeDeconvolutionImageFilterPython.delete_itkIterativeDeconvolutionImageFilterIF2IF2
    cast = _swig_new_static_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIF2IF2_cast)

# Register itkIterativeDeconvolutionImageFilterIF2IF2 in _itkIterativeDeconvolutionImageFilterPython:
_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIF2IF2_swigregister(itkIterativeDeconvolutionImageFilterIF2IF2)
itkIterativeDeconvolutionImageFilterIF2IF2_cast = _itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIF2IF2_cast

class itkIterativeDeconvolutionImageFilterIF3IF3(itk.itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIF3IF3):
    r"""


    Abstract base class for filters that implement iterative deconvolution
    algorithms.

    This filter implements methods common to iterative deconvolution
    algorithms. The input blurred image is set with the usual SetInput()
    method and the blurring kernel is set with the SetKernelImage()
    method.

    The number of iterations can be set with the method
    SetNumberOfIterations(). This class emits an IterationEvent at the
    start of each iteration. Iteration can be terminated early by calling
    SetStopIteration( bool ) with the argument set to true. To resume
    iterating, you must call SetStopIteration( bool ) with the argument
    set to false before calling Update() a second time.

    This code was adapted from the Insight Journal contribution:

    "Deconvolution: infrastructure and reference algorithms" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3207 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetNumberOfIterations = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIF3IF3_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIF3IF3_GetNumberOfIterations)
    GetModifiableCurrentEstimate = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIF3IF3_GetModifiableCurrentEstimate)
    GetCurrentEstimate = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIF3IF3_GetCurrentEstimate)
    SetStopIteration = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIF3IF3_SetStopIteration)
    GetStopIteration = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIF3IF3_GetStopIteration)
    GetIteration = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIF3IF3_GetIteration)
    __swig_destroy__ = _itkIterativeDeconvolutionImageFilterPython.delete_itkIterativeDeconvolutionImageFilterIF3IF3
    cast = _swig_new_static_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIF3IF3_cast)

# Register itkIterativeDeconvolutionImageFilterIF3IF3 in _itkIterativeDeconvolutionImageFilterPython:
_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIF3IF3_swigregister(itkIterativeDeconvolutionImageFilterIF3IF3)
itkIterativeDeconvolutionImageFilterIF3IF3_cast = _itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIF3IF3_cast

class itkIterativeDeconvolutionImageFilterISS2ISS2(itk.itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterISS2ISS2):
    r"""


    Abstract base class for filters that implement iterative deconvolution
    algorithms.

    This filter implements methods common to iterative deconvolution
    algorithms. The input blurred image is set with the usual SetInput()
    method and the blurring kernel is set with the SetKernelImage()
    method.

    The number of iterations can be set with the method
    SetNumberOfIterations(). This class emits an IterationEvent at the
    start of each iteration. Iteration can be terminated early by calling
    SetStopIteration( bool ) with the argument set to true. To resume
    iterating, you must call SetStopIteration( bool ) with the argument
    set to false before calling Update() a second time.

    This code was adapted from the Insight Journal contribution:

    "Deconvolution: infrastructure and reference algorithms" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3207 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetNumberOfIterations = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterISS2ISS2_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterISS2ISS2_GetNumberOfIterations)
    GetModifiableCurrentEstimate = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterISS2ISS2_GetModifiableCurrentEstimate)
    GetCurrentEstimate = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterISS2ISS2_GetCurrentEstimate)
    SetStopIteration = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterISS2ISS2_SetStopIteration)
    GetStopIteration = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterISS2ISS2_GetStopIteration)
    GetIteration = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterISS2ISS2_GetIteration)
    __swig_destroy__ = _itkIterativeDeconvolutionImageFilterPython.delete_itkIterativeDeconvolutionImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterISS2ISS2_cast)

# Register itkIterativeDeconvolutionImageFilterISS2ISS2 in _itkIterativeDeconvolutionImageFilterPython:
_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterISS2ISS2_swigregister(itkIterativeDeconvolutionImageFilterISS2ISS2)
itkIterativeDeconvolutionImageFilterISS2ISS2_cast = _itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterISS2ISS2_cast

class itkIterativeDeconvolutionImageFilterISS3ISS3(itk.itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterISS3ISS3):
    r"""


    Abstract base class for filters that implement iterative deconvolution
    algorithms.

    This filter implements methods common to iterative deconvolution
    algorithms. The input blurred image is set with the usual SetInput()
    method and the blurring kernel is set with the SetKernelImage()
    method.

    The number of iterations can be set with the method
    SetNumberOfIterations(). This class emits an IterationEvent at the
    start of each iteration. Iteration can be terminated early by calling
    SetStopIteration( bool ) with the argument set to true. To resume
    iterating, you must call SetStopIteration( bool ) with the argument
    set to false before calling Update() a second time.

    This code was adapted from the Insight Journal contribution:

    "Deconvolution: infrastructure and reference algorithms" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3207 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetNumberOfIterations = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterISS3ISS3_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterISS3ISS3_GetNumberOfIterations)
    GetModifiableCurrentEstimate = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterISS3ISS3_GetModifiableCurrentEstimate)
    GetCurrentEstimate = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterISS3ISS3_GetCurrentEstimate)
    SetStopIteration = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterISS3ISS3_SetStopIteration)
    GetStopIteration = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterISS3ISS3_GetStopIteration)
    GetIteration = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterISS3ISS3_GetIteration)
    __swig_destroy__ = _itkIterativeDeconvolutionImageFilterPython.delete_itkIterativeDeconvolutionImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterISS3ISS3_cast)

# Register itkIterativeDeconvolutionImageFilterISS3ISS3 in _itkIterativeDeconvolutionImageFilterPython:
_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterISS3ISS3_swigregister(itkIterativeDeconvolutionImageFilterISS3ISS3)
itkIterativeDeconvolutionImageFilterISS3ISS3_cast = _itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterISS3ISS3_cast

class itkIterativeDeconvolutionImageFilterIUC2IUC2(itk.itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIUC2IUC2):
    r"""


    Abstract base class for filters that implement iterative deconvolution
    algorithms.

    This filter implements methods common to iterative deconvolution
    algorithms. The input blurred image is set with the usual SetInput()
    method and the blurring kernel is set with the SetKernelImage()
    method.

    The number of iterations can be set with the method
    SetNumberOfIterations(). This class emits an IterationEvent at the
    start of each iteration. Iteration can be terminated early by calling
    SetStopIteration( bool ) with the argument set to true. To resume
    iterating, you must call SetStopIteration( bool ) with the argument
    set to false before calling Update() a second time.

    This code was adapted from the Insight Journal contribution:

    "Deconvolution: infrastructure and reference algorithms" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3207 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetNumberOfIterations = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUC2IUC2_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUC2IUC2_GetNumberOfIterations)
    GetModifiableCurrentEstimate = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUC2IUC2_GetModifiableCurrentEstimate)
    GetCurrentEstimate = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUC2IUC2_GetCurrentEstimate)
    SetStopIteration = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUC2IUC2_SetStopIteration)
    GetStopIteration = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUC2IUC2_GetStopIteration)
    GetIteration = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUC2IUC2_GetIteration)
    __swig_destroy__ = _itkIterativeDeconvolutionImageFilterPython.delete_itkIterativeDeconvolutionImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUC2IUC2_cast)

# Register itkIterativeDeconvolutionImageFilterIUC2IUC2 in _itkIterativeDeconvolutionImageFilterPython:
_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUC2IUC2_swigregister(itkIterativeDeconvolutionImageFilterIUC2IUC2)
itkIterativeDeconvolutionImageFilterIUC2IUC2_cast = _itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUC2IUC2_cast

class itkIterativeDeconvolutionImageFilterIUC3IUC3(itk.itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIUC3IUC3):
    r"""


    Abstract base class for filters that implement iterative deconvolution
    algorithms.

    This filter implements methods common to iterative deconvolution
    algorithms. The input blurred image is set with the usual SetInput()
    method and the blurring kernel is set with the SetKernelImage()
    method.

    The number of iterations can be set with the method
    SetNumberOfIterations(). This class emits an IterationEvent at the
    start of each iteration. Iteration can be terminated early by calling
    SetStopIteration( bool ) with the argument set to true. To resume
    iterating, you must call SetStopIteration( bool ) with the argument
    set to false before calling Update() a second time.

    This code was adapted from the Insight Journal contribution:

    "Deconvolution: infrastructure and reference algorithms" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3207 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetNumberOfIterations = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUC3IUC3_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUC3IUC3_GetNumberOfIterations)
    GetModifiableCurrentEstimate = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUC3IUC3_GetModifiableCurrentEstimate)
    GetCurrentEstimate = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUC3IUC3_GetCurrentEstimate)
    SetStopIteration = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUC3IUC3_SetStopIteration)
    GetStopIteration = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUC3IUC3_GetStopIteration)
    GetIteration = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUC3IUC3_GetIteration)
    __swig_destroy__ = _itkIterativeDeconvolutionImageFilterPython.delete_itkIterativeDeconvolutionImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUC3IUC3_cast)

# Register itkIterativeDeconvolutionImageFilterIUC3IUC3 in _itkIterativeDeconvolutionImageFilterPython:
_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUC3IUC3_swigregister(itkIterativeDeconvolutionImageFilterIUC3IUC3)
itkIterativeDeconvolutionImageFilterIUC3IUC3_cast = _itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUC3IUC3_cast

class itkIterativeDeconvolutionImageFilterIUS2IUS2(itk.itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIUS2IUS2):
    r"""


    Abstract base class for filters that implement iterative deconvolution
    algorithms.

    This filter implements methods common to iterative deconvolution
    algorithms. The input blurred image is set with the usual SetInput()
    method and the blurring kernel is set with the SetKernelImage()
    method.

    The number of iterations can be set with the method
    SetNumberOfIterations(). This class emits an IterationEvent at the
    start of each iteration. Iteration can be terminated early by calling
    SetStopIteration( bool ) with the argument set to true. To resume
    iterating, you must call SetStopIteration( bool ) with the argument
    set to false before calling Update() a second time.

    This code was adapted from the Insight Journal contribution:

    "Deconvolution: infrastructure and reference algorithms" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3207 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetNumberOfIterations = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUS2IUS2_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUS2IUS2_GetNumberOfIterations)
    GetModifiableCurrentEstimate = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUS2IUS2_GetModifiableCurrentEstimate)
    GetCurrentEstimate = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUS2IUS2_GetCurrentEstimate)
    SetStopIteration = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUS2IUS2_SetStopIteration)
    GetStopIteration = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUS2IUS2_GetStopIteration)
    GetIteration = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUS2IUS2_GetIteration)
    __swig_destroy__ = _itkIterativeDeconvolutionImageFilterPython.delete_itkIterativeDeconvolutionImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUS2IUS2_cast)

# Register itkIterativeDeconvolutionImageFilterIUS2IUS2 in _itkIterativeDeconvolutionImageFilterPython:
_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUS2IUS2_swigregister(itkIterativeDeconvolutionImageFilterIUS2IUS2)
itkIterativeDeconvolutionImageFilterIUS2IUS2_cast = _itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUS2IUS2_cast

class itkIterativeDeconvolutionImageFilterIUS3IUS3(itk.itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIUS3IUS3):
    r"""


    Abstract base class for filters that implement iterative deconvolution
    algorithms.

    This filter implements methods common to iterative deconvolution
    algorithms. The input blurred image is set with the usual SetInput()
    method and the blurring kernel is set with the SetKernelImage()
    method.

    The number of iterations can be set with the method
    SetNumberOfIterations(). This class emits an IterationEvent at the
    start of each iteration. Iteration can be terminated early by calling
    SetStopIteration( bool ) with the argument set to true. To resume
    iterating, you must call SetStopIteration( bool ) with the argument
    set to false before calling Update() a second time.

    This code was adapted from the Insight Journal contribution:

    "Deconvolution: infrastructure and reference algorithms" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3207 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetNumberOfIterations = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUS3IUS3_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUS3IUS3_GetNumberOfIterations)
    GetModifiableCurrentEstimate = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUS3IUS3_GetModifiableCurrentEstimate)
    GetCurrentEstimate = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUS3IUS3_GetCurrentEstimate)
    SetStopIteration = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUS3IUS3_SetStopIteration)
    GetStopIteration = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUS3IUS3_GetStopIteration)
    GetIteration = _swig_new_instance_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUS3IUS3_GetIteration)
    __swig_destroy__ = _itkIterativeDeconvolutionImageFilterPython.delete_itkIterativeDeconvolutionImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUS3IUS3_cast)

# Register itkIterativeDeconvolutionImageFilterIUS3IUS3 in _itkIterativeDeconvolutionImageFilterPython:
_itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUS3IUS3_swigregister(itkIterativeDeconvolutionImageFilterIUS3IUS3)
itkIterativeDeconvolutionImageFilterIUS3IUS3_cast = _itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def iterative_deconvolution_image_filter(*args, **kwargs):
    """Procedural interface for IterativeDeconvolutionImageFilter"""
    import itk
    instance = itk.IterativeDeconvolutionImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def iterative_deconvolution_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.IterativeDeconvolutionImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.IterativeDeconvolutionImageFilter.values()[0]
    else:
        filter_object = itk.IterativeDeconvolutionImageFilter

    iterative_deconvolution_image_filter.__doc__ = filter_object.__doc__
    iterative_deconvolution_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    iterative_deconvolution_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.IterativeDeconvolutionImageFilter, itkTemplate.itkTemplate):
        iterative_deconvolution_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        iterative_deconvolution_image_filter.__doc__ += "\n"
        iterative_deconvolution_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        iterative_deconvolution_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



