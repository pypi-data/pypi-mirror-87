# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKLevelSetsPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkReinitializeLevelSetImageFilterPython
else:
    import _itkReinitializeLevelSetImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkReinitializeLevelSetImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkReinitializeLevelSetImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImageToImageFilterAPython
import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkImageToImageFilterCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.stdcomplexPython
import itk.itkImagePython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.ITKFastMarchingBasePython
import itk.itkFastMarchingStoppingCriterionBasePython
import itk.itkNodePairPython
import itk.itkLevelSetNodePython

def itkReinitializeLevelSetImageFilterID2_New():
    return itkReinitializeLevelSetImageFilterID2.New()

class itkReinitializeLevelSetImageFilterID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""


    Reinitialize the level set to the signed distance function.

    ReinitializeLevelSetImageFilter reinitializes the input level set to
    the approximated signed distance function from a particular level set.
    The output is a level set of the same type as the input.

    For some level set algorithms, it is useful to periodically
    reinitialize the level set function to prevent numerical accuracy
    problems in computing derivatives and curvature values where level
    sets are densely bunched together.

    This class is templated over the image type which represents the level
    set.

    This class supports narrowbanding. If the input narrowband is
    provided, the algorithm will only locate the level set within the
    input narrowband. For the output, the reinitialize level set is only
    valid for a distance of OutputNarrowBandwidth / 2 of either side of
    the level set of interest.

    Implementation of this class is based on Chapter 11 of "Level Set
    Methods and Fast Marching Methods", J.A. Sethian, Cambridge Press,
    Second edition, 1999. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterID2___New_orig__)
    Clone = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterID2_Clone)
    SetLevelSetValue = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterID2_SetLevelSetValue)
    GetLevelSetValue = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterID2_GetLevelSetValue)
    SetNarrowBanding = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterID2_SetNarrowBanding)
    GetNarrowBanding = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterID2_GetNarrowBanding)
    NarrowBandingOn = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterID2_NarrowBandingOn)
    NarrowBandingOff = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterID2_NarrowBandingOff)
    SetInputNarrowBandwidth = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterID2_SetInputNarrowBandwidth)
    GetInputNarrowBandwidth = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterID2_GetInputNarrowBandwidth)
    SetOutputNarrowBandwidth = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterID2_SetOutputNarrowBandwidth)
    GetOutputNarrowBandwidth = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterID2_GetOutputNarrowBandwidth)
    SetNarrowBandwidth = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterID2_SetNarrowBandwidth)
    SetInputNarrowBand = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterID2_SetInputNarrowBand)
    GetInputNarrowBand = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterID2_GetInputNarrowBand)
    GetOutputNarrowBand = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterID2_GetOutputNarrowBand)
    LevelSetDoubleAdditiveOperatorsCheck = _itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterID2_LevelSetDoubleAdditiveOperatorsCheck
    
    LevelSetOStreamWritableCheck = _itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterID2_LevelSetOStreamWritableCheck
    
    __swig_destroy__ = _itkReinitializeLevelSetImageFilterPython.delete_itkReinitializeLevelSetImageFilterID2
    cast = _swig_new_static_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterID2_cast)

    def New(*args, **kargs):
        """New() -> itkReinitializeLevelSetImageFilterID2

        Create a new object of the class itkReinitializeLevelSetImageFilterID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkReinitializeLevelSetImageFilterID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkReinitializeLevelSetImageFilterID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkReinitializeLevelSetImageFilterID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkReinitializeLevelSetImageFilterID2 in _itkReinitializeLevelSetImageFilterPython:
_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterID2_swigregister(itkReinitializeLevelSetImageFilterID2)
itkReinitializeLevelSetImageFilterID2___New_orig__ = _itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterID2___New_orig__
itkReinitializeLevelSetImageFilterID2_cast = _itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterID2_cast


def itkReinitializeLevelSetImageFilterID3_New():
    return itkReinitializeLevelSetImageFilterID3.New()

class itkReinitializeLevelSetImageFilterID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""


    Reinitialize the level set to the signed distance function.

    ReinitializeLevelSetImageFilter reinitializes the input level set to
    the approximated signed distance function from a particular level set.
    The output is a level set of the same type as the input.

    For some level set algorithms, it is useful to periodically
    reinitialize the level set function to prevent numerical accuracy
    problems in computing derivatives and curvature values where level
    sets are densely bunched together.

    This class is templated over the image type which represents the level
    set.

    This class supports narrowbanding. If the input narrowband is
    provided, the algorithm will only locate the level set within the
    input narrowband. For the output, the reinitialize level set is only
    valid for a distance of OutputNarrowBandwidth / 2 of either side of
    the level set of interest.

    Implementation of this class is based on Chapter 11 of "Level Set
    Methods and Fast Marching Methods", J.A. Sethian, Cambridge Press,
    Second edition, 1999. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterID3___New_orig__)
    Clone = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterID3_Clone)
    SetLevelSetValue = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterID3_SetLevelSetValue)
    GetLevelSetValue = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterID3_GetLevelSetValue)
    SetNarrowBanding = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterID3_SetNarrowBanding)
    GetNarrowBanding = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterID3_GetNarrowBanding)
    NarrowBandingOn = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterID3_NarrowBandingOn)
    NarrowBandingOff = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterID3_NarrowBandingOff)
    SetInputNarrowBandwidth = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterID3_SetInputNarrowBandwidth)
    GetInputNarrowBandwidth = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterID3_GetInputNarrowBandwidth)
    SetOutputNarrowBandwidth = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterID3_SetOutputNarrowBandwidth)
    GetOutputNarrowBandwidth = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterID3_GetOutputNarrowBandwidth)
    SetNarrowBandwidth = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterID3_SetNarrowBandwidth)
    SetInputNarrowBand = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterID3_SetInputNarrowBand)
    GetInputNarrowBand = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterID3_GetInputNarrowBand)
    GetOutputNarrowBand = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterID3_GetOutputNarrowBand)
    LevelSetDoubleAdditiveOperatorsCheck = _itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterID3_LevelSetDoubleAdditiveOperatorsCheck
    
    LevelSetOStreamWritableCheck = _itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterID3_LevelSetOStreamWritableCheck
    
    __swig_destroy__ = _itkReinitializeLevelSetImageFilterPython.delete_itkReinitializeLevelSetImageFilterID3
    cast = _swig_new_static_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterID3_cast)

    def New(*args, **kargs):
        """New() -> itkReinitializeLevelSetImageFilterID3

        Create a new object of the class itkReinitializeLevelSetImageFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkReinitializeLevelSetImageFilterID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkReinitializeLevelSetImageFilterID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkReinitializeLevelSetImageFilterID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkReinitializeLevelSetImageFilterID3 in _itkReinitializeLevelSetImageFilterPython:
_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterID3_swigregister(itkReinitializeLevelSetImageFilterID3)
itkReinitializeLevelSetImageFilterID3___New_orig__ = _itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterID3___New_orig__
itkReinitializeLevelSetImageFilterID3_cast = _itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterID3_cast


def itkReinitializeLevelSetImageFilterIF2_New():
    return itkReinitializeLevelSetImageFilterIF2.New()

class itkReinitializeLevelSetImageFilterIF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""


    Reinitialize the level set to the signed distance function.

    ReinitializeLevelSetImageFilter reinitializes the input level set to
    the approximated signed distance function from a particular level set.
    The output is a level set of the same type as the input.

    For some level set algorithms, it is useful to periodically
    reinitialize the level set function to prevent numerical accuracy
    problems in computing derivatives and curvature values where level
    sets are densely bunched together.

    This class is templated over the image type which represents the level
    set.

    This class supports narrowbanding. If the input narrowband is
    provided, the algorithm will only locate the level set within the
    input narrowband. For the output, the reinitialize level set is only
    valid for a distance of OutputNarrowBandwidth / 2 of either side of
    the level set of interest.

    Implementation of this class is based on Chapter 11 of "Level Set
    Methods and Fast Marching Methods", J.A. Sethian, Cambridge Press,
    Second edition, 1999. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterIF2___New_orig__)
    Clone = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterIF2_Clone)
    SetLevelSetValue = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterIF2_SetLevelSetValue)
    GetLevelSetValue = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterIF2_GetLevelSetValue)
    SetNarrowBanding = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterIF2_SetNarrowBanding)
    GetNarrowBanding = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterIF2_GetNarrowBanding)
    NarrowBandingOn = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterIF2_NarrowBandingOn)
    NarrowBandingOff = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterIF2_NarrowBandingOff)
    SetInputNarrowBandwidth = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterIF2_SetInputNarrowBandwidth)
    GetInputNarrowBandwidth = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterIF2_GetInputNarrowBandwidth)
    SetOutputNarrowBandwidth = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterIF2_SetOutputNarrowBandwidth)
    GetOutputNarrowBandwidth = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterIF2_GetOutputNarrowBandwidth)
    SetNarrowBandwidth = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterIF2_SetNarrowBandwidth)
    SetInputNarrowBand = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterIF2_SetInputNarrowBand)
    GetInputNarrowBand = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterIF2_GetInputNarrowBand)
    GetOutputNarrowBand = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterIF2_GetOutputNarrowBand)
    LevelSetDoubleAdditiveOperatorsCheck = _itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterIF2_LevelSetDoubleAdditiveOperatorsCheck
    
    LevelSetOStreamWritableCheck = _itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterIF2_LevelSetOStreamWritableCheck
    
    __swig_destroy__ = _itkReinitializeLevelSetImageFilterPython.delete_itkReinitializeLevelSetImageFilterIF2
    cast = _swig_new_static_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterIF2_cast)

    def New(*args, **kargs):
        """New() -> itkReinitializeLevelSetImageFilterIF2

        Create a new object of the class itkReinitializeLevelSetImageFilterIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkReinitializeLevelSetImageFilterIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkReinitializeLevelSetImageFilterIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkReinitializeLevelSetImageFilterIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkReinitializeLevelSetImageFilterIF2 in _itkReinitializeLevelSetImageFilterPython:
_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterIF2_swigregister(itkReinitializeLevelSetImageFilterIF2)
itkReinitializeLevelSetImageFilterIF2___New_orig__ = _itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterIF2___New_orig__
itkReinitializeLevelSetImageFilterIF2_cast = _itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterIF2_cast


def itkReinitializeLevelSetImageFilterIF3_New():
    return itkReinitializeLevelSetImageFilterIF3.New()

class itkReinitializeLevelSetImageFilterIF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""


    Reinitialize the level set to the signed distance function.

    ReinitializeLevelSetImageFilter reinitializes the input level set to
    the approximated signed distance function from a particular level set.
    The output is a level set of the same type as the input.

    For some level set algorithms, it is useful to periodically
    reinitialize the level set function to prevent numerical accuracy
    problems in computing derivatives and curvature values where level
    sets are densely bunched together.

    This class is templated over the image type which represents the level
    set.

    This class supports narrowbanding. If the input narrowband is
    provided, the algorithm will only locate the level set within the
    input narrowband. For the output, the reinitialize level set is only
    valid for a distance of OutputNarrowBandwidth / 2 of either side of
    the level set of interest.

    Implementation of this class is based on Chapter 11 of "Level Set
    Methods and Fast Marching Methods", J.A. Sethian, Cambridge Press,
    Second edition, 1999. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterIF3___New_orig__)
    Clone = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterIF3_Clone)
    SetLevelSetValue = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterIF3_SetLevelSetValue)
    GetLevelSetValue = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterIF3_GetLevelSetValue)
    SetNarrowBanding = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterIF3_SetNarrowBanding)
    GetNarrowBanding = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterIF3_GetNarrowBanding)
    NarrowBandingOn = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterIF3_NarrowBandingOn)
    NarrowBandingOff = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterIF3_NarrowBandingOff)
    SetInputNarrowBandwidth = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterIF3_SetInputNarrowBandwidth)
    GetInputNarrowBandwidth = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterIF3_GetInputNarrowBandwidth)
    SetOutputNarrowBandwidth = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterIF3_SetOutputNarrowBandwidth)
    GetOutputNarrowBandwidth = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterIF3_GetOutputNarrowBandwidth)
    SetNarrowBandwidth = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterIF3_SetNarrowBandwidth)
    SetInputNarrowBand = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterIF3_SetInputNarrowBand)
    GetInputNarrowBand = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterIF3_GetInputNarrowBand)
    GetOutputNarrowBand = _swig_new_instance_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterIF3_GetOutputNarrowBand)
    LevelSetDoubleAdditiveOperatorsCheck = _itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterIF3_LevelSetDoubleAdditiveOperatorsCheck
    
    LevelSetOStreamWritableCheck = _itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterIF3_LevelSetOStreamWritableCheck
    
    __swig_destroy__ = _itkReinitializeLevelSetImageFilterPython.delete_itkReinitializeLevelSetImageFilterIF3
    cast = _swig_new_static_method(_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterIF3_cast)

    def New(*args, **kargs):
        """New() -> itkReinitializeLevelSetImageFilterIF3

        Create a new object of the class itkReinitializeLevelSetImageFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkReinitializeLevelSetImageFilterIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkReinitializeLevelSetImageFilterIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkReinitializeLevelSetImageFilterIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkReinitializeLevelSetImageFilterIF3 in _itkReinitializeLevelSetImageFilterPython:
_itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterIF3_swigregister(itkReinitializeLevelSetImageFilterIF3)
itkReinitializeLevelSetImageFilterIF3___New_orig__ = _itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterIF3___New_orig__
itkReinitializeLevelSetImageFilterIF3_cast = _itkReinitializeLevelSetImageFilterPython.itkReinitializeLevelSetImageFilterIF3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def reinitialize_level_set_image_filter(*args, **kwargs):
    """Procedural interface for ReinitializeLevelSetImageFilter"""
    import itk
    instance = itk.ReinitializeLevelSetImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def reinitialize_level_set_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ReinitializeLevelSetImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.ReinitializeLevelSetImageFilter.values()[0]
    else:
        filter_object = itk.ReinitializeLevelSetImageFilter

    reinitialize_level_set_image_filter.__doc__ = filter_object.__doc__
    reinitialize_level_set_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    reinitialize_level_set_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.ReinitializeLevelSetImageFilter, itkTemplate.itkTemplate):
        reinitialize_level_set_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        reinitialize_level_set_image_filter.__doc__ += "\n"
        reinitialize_level_set_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        reinitialize_level_set_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



