# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkPointSetPython
else:
    import _itkPointSetPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkPointSetPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkPointSetPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkVectorContainerPython
import itk.itkPointPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.ITKCommonBasePython
import itk.itkContinuousIndexPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython

def itkPointSetD2_New():
    return itkPointSetD2.New()

class itkPointSetD2(itk.ITKCommonBasePython.itkDataObject):
    r"""


    A superclass of the N-dimensional mesh structure; supports point
    (geometric coordinate and attribute) definition.

    PointSet is a superclass of the N-dimensional mesh structure
    (itk::Mesh). It provides the portion of the mesh definition for
    geometric coordinates (and associated attribute or pixel information).
    The defined API provides operations on points but does not tie down
    the underlying implementation and storage. A "MeshTraits" structure
    is used to define the container and identifier to access the points.
    See DefaultStaticMeshTraits for the set of type definitions needed.
    All types that are defined in the "MeshTraits" structure will have
    duplicate type alias in the resulting mesh itself.

    PointSet has two template parameters. The first is the pixel type, or
    the type of data stored (optionally) with the points. The second is
    the "MeshTraits" structure controlling type information
    characterizing the point set. Most users will be happy with the
    defaults, and will not have to worry about this second argument.

    Template parameters for PointSet:

    TPixelType = The type stored as data for the point.

    TMeshTraits = Type information structure for the point set.

    {Core/Common/CreateAPointSet,Create a PointSet}
    {Core/Common/ReadAPointSet,Read a PointSet}
    {Core/Common/WriteAPointSet,Write a PointSet}
    {Core/Common/BoundingBoxOfAPointSet,Bounding Box Of A Point Set} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointSetPython.itkPointSetD2___New_orig__)
    Clone = _swig_new_instance_method(_itkPointSetPython.itkPointSetD2_Clone)
    GetMaximumNumberOfRegions = _swig_new_instance_method(_itkPointSetPython.itkPointSetD2_GetMaximumNumberOfRegions)
    PassStructure = _swig_new_instance_method(_itkPointSetPython.itkPointSetD2_PassStructure)
    GetNumberOfPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetD2_GetNumberOfPoints)
    SetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetD2_SetPoints)
    GetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetD2_GetPoints)
    SetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetD2_SetPoint)
    GetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetD2_GetPoint)
    SetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetD2_SetPointData)
    GetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetD2_GetPointData)
    SetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetD2_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetD2_GetRequestedRegion)
    SetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetD2_SetBufferedRegion)
    GetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetD2_GetBufferedRegion)
    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetD2
    cast = _swig_new_static_method(_itkPointSetPython.itkPointSetD2_cast)

    def New(*args, **kargs):
        """New() -> itkPointSetD2

        Create a new object of the class itkPointSetD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetD2 in _itkPointSetPython:
_itkPointSetPython.itkPointSetD2_swigregister(itkPointSetD2)
itkPointSetD2___New_orig__ = _itkPointSetPython.itkPointSetD2___New_orig__
itkPointSetD2_cast = _itkPointSetPython.itkPointSetD2_cast


def itkPointSetD3_New():
    return itkPointSetD3.New()

class itkPointSetD3(itk.ITKCommonBasePython.itkDataObject):
    r"""


    A superclass of the N-dimensional mesh structure; supports point
    (geometric coordinate and attribute) definition.

    PointSet is a superclass of the N-dimensional mesh structure
    (itk::Mesh). It provides the portion of the mesh definition for
    geometric coordinates (and associated attribute or pixel information).
    The defined API provides operations on points but does not tie down
    the underlying implementation and storage. A "MeshTraits" structure
    is used to define the container and identifier to access the points.
    See DefaultStaticMeshTraits for the set of type definitions needed.
    All types that are defined in the "MeshTraits" structure will have
    duplicate type alias in the resulting mesh itself.

    PointSet has two template parameters. The first is the pixel type, or
    the type of data stored (optionally) with the points. The second is
    the "MeshTraits" structure controlling type information
    characterizing the point set. Most users will be happy with the
    defaults, and will not have to worry about this second argument.

    Template parameters for PointSet:

    TPixelType = The type stored as data for the point.

    TMeshTraits = Type information structure for the point set.

    {Core/Common/CreateAPointSet,Create a PointSet}
    {Core/Common/ReadAPointSet,Read a PointSet}
    {Core/Common/WriteAPointSet,Write a PointSet}
    {Core/Common/BoundingBoxOfAPointSet,Bounding Box Of A Point Set} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointSetPython.itkPointSetD3___New_orig__)
    Clone = _swig_new_instance_method(_itkPointSetPython.itkPointSetD3_Clone)
    GetMaximumNumberOfRegions = _swig_new_instance_method(_itkPointSetPython.itkPointSetD3_GetMaximumNumberOfRegions)
    PassStructure = _swig_new_instance_method(_itkPointSetPython.itkPointSetD3_PassStructure)
    GetNumberOfPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetD3_GetNumberOfPoints)
    SetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetD3_SetPoints)
    GetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetD3_GetPoints)
    SetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetD3_SetPoint)
    GetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetD3_GetPoint)
    SetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetD3_SetPointData)
    GetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetD3_GetPointData)
    SetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetD3_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetD3_GetRequestedRegion)
    SetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetD3_SetBufferedRegion)
    GetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetD3_GetBufferedRegion)
    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetD3
    cast = _swig_new_static_method(_itkPointSetPython.itkPointSetD3_cast)

    def New(*args, **kargs):
        """New() -> itkPointSetD3

        Create a new object of the class itkPointSetD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetD3 in _itkPointSetPython:
_itkPointSetPython.itkPointSetD3_swigregister(itkPointSetD3)
itkPointSetD3___New_orig__ = _itkPointSetPython.itkPointSetD3___New_orig__
itkPointSetD3_cast = _itkPointSetPython.itkPointSetD3_cast


def itkPointSetF2_New():
    return itkPointSetF2.New()

class itkPointSetF2(itk.ITKCommonBasePython.itkDataObject):
    r"""


    A superclass of the N-dimensional mesh structure; supports point
    (geometric coordinate and attribute) definition.

    PointSet is a superclass of the N-dimensional mesh structure
    (itk::Mesh). It provides the portion of the mesh definition for
    geometric coordinates (and associated attribute or pixel information).
    The defined API provides operations on points but does not tie down
    the underlying implementation and storage. A "MeshTraits" structure
    is used to define the container and identifier to access the points.
    See DefaultStaticMeshTraits for the set of type definitions needed.
    All types that are defined in the "MeshTraits" structure will have
    duplicate type alias in the resulting mesh itself.

    PointSet has two template parameters. The first is the pixel type, or
    the type of data stored (optionally) with the points. The second is
    the "MeshTraits" structure controlling type information
    characterizing the point set. Most users will be happy with the
    defaults, and will not have to worry about this second argument.

    Template parameters for PointSet:

    TPixelType = The type stored as data for the point.

    TMeshTraits = Type information structure for the point set.

    {Core/Common/CreateAPointSet,Create a PointSet}
    {Core/Common/ReadAPointSet,Read a PointSet}
    {Core/Common/WriteAPointSet,Write a PointSet}
    {Core/Common/BoundingBoxOfAPointSet,Bounding Box Of A Point Set} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointSetPython.itkPointSetF2___New_orig__)
    Clone = _swig_new_instance_method(_itkPointSetPython.itkPointSetF2_Clone)
    GetMaximumNumberOfRegions = _swig_new_instance_method(_itkPointSetPython.itkPointSetF2_GetMaximumNumberOfRegions)
    PassStructure = _swig_new_instance_method(_itkPointSetPython.itkPointSetF2_PassStructure)
    GetNumberOfPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetF2_GetNumberOfPoints)
    SetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetF2_SetPoints)
    GetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetF2_GetPoints)
    SetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetF2_SetPoint)
    GetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetF2_GetPoint)
    SetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetF2_SetPointData)
    GetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetF2_GetPointData)
    SetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetF2_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetF2_GetRequestedRegion)
    SetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetF2_SetBufferedRegion)
    GetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetF2_GetBufferedRegion)
    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetF2
    cast = _swig_new_static_method(_itkPointSetPython.itkPointSetF2_cast)

    def New(*args, **kargs):
        """New() -> itkPointSetF2

        Create a new object of the class itkPointSetF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetF2 in _itkPointSetPython:
_itkPointSetPython.itkPointSetF2_swigregister(itkPointSetF2)
itkPointSetF2___New_orig__ = _itkPointSetPython.itkPointSetF2___New_orig__
itkPointSetF2_cast = _itkPointSetPython.itkPointSetF2_cast


def itkPointSetF3_New():
    return itkPointSetF3.New()

class itkPointSetF3(itk.ITKCommonBasePython.itkDataObject):
    r"""


    A superclass of the N-dimensional mesh structure; supports point
    (geometric coordinate and attribute) definition.

    PointSet is a superclass of the N-dimensional mesh structure
    (itk::Mesh). It provides the portion of the mesh definition for
    geometric coordinates (and associated attribute or pixel information).
    The defined API provides operations on points but does not tie down
    the underlying implementation and storage. A "MeshTraits" structure
    is used to define the container and identifier to access the points.
    See DefaultStaticMeshTraits for the set of type definitions needed.
    All types that are defined in the "MeshTraits" structure will have
    duplicate type alias in the resulting mesh itself.

    PointSet has two template parameters. The first is the pixel type, or
    the type of data stored (optionally) with the points. The second is
    the "MeshTraits" structure controlling type information
    characterizing the point set. Most users will be happy with the
    defaults, and will not have to worry about this second argument.

    Template parameters for PointSet:

    TPixelType = The type stored as data for the point.

    TMeshTraits = Type information structure for the point set.

    {Core/Common/CreateAPointSet,Create a PointSet}
    {Core/Common/ReadAPointSet,Read a PointSet}
    {Core/Common/WriteAPointSet,Write a PointSet}
    {Core/Common/BoundingBoxOfAPointSet,Bounding Box Of A Point Set} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointSetPython.itkPointSetF3___New_orig__)
    Clone = _swig_new_instance_method(_itkPointSetPython.itkPointSetF3_Clone)
    GetMaximumNumberOfRegions = _swig_new_instance_method(_itkPointSetPython.itkPointSetF3_GetMaximumNumberOfRegions)
    PassStructure = _swig_new_instance_method(_itkPointSetPython.itkPointSetF3_PassStructure)
    GetNumberOfPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetF3_GetNumberOfPoints)
    SetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetF3_SetPoints)
    GetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetF3_GetPoints)
    SetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetF3_SetPoint)
    GetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetF3_GetPoint)
    SetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetF3_SetPointData)
    GetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetF3_GetPointData)
    SetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetF3_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetF3_GetRequestedRegion)
    SetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetF3_SetBufferedRegion)
    GetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetF3_GetBufferedRegion)
    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetF3
    cast = _swig_new_static_method(_itkPointSetPython.itkPointSetF3_cast)

    def New(*args, **kargs):
        """New() -> itkPointSetF3

        Create a new object of the class itkPointSetF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetF3 in _itkPointSetPython:
_itkPointSetPython.itkPointSetF3_swigregister(itkPointSetF3)
itkPointSetF3___New_orig__ = _itkPointSetPython.itkPointSetF3___New_orig__
itkPointSetF3_cast = _itkPointSetPython.itkPointSetF3_cast


def itkPointSetMD22_New():
    return itkPointSetMD22.New()

class itkPointSetMD22(itk.ITKCommonBasePython.itkDataObject):
    r"""


    A superclass of the N-dimensional mesh structure; supports point
    (geometric coordinate and attribute) definition.

    PointSet is a superclass of the N-dimensional mesh structure
    (itk::Mesh). It provides the portion of the mesh definition for
    geometric coordinates (and associated attribute or pixel information).
    The defined API provides operations on points but does not tie down
    the underlying implementation and storage. A "MeshTraits" structure
    is used to define the container and identifier to access the points.
    See DefaultStaticMeshTraits for the set of type definitions needed.
    All types that are defined in the "MeshTraits" structure will have
    duplicate type alias in the resulting mesh itself.

    PointSet has two template parameters. The first is the pixel type, or
    the type of data stored (optionally) with the points. The second is
    the "MeshTraits" structure controlling type information
    characterizing the point set. Most users will be happy with the
    defaults, and will not have to worry about this second argument.

    Template parameters for PointSet:

    TPixelType = The type stored as data for the point.

    TMeshTraits = Type information structure for the point set.

    {Core/Common/CreateAPointSet,Create a PointSet}
    {Core/Common/ReadAPointSet,Read a PointSet}
    {Core/Common/WriteAPointSet,Write a PointSet}
    {Core/Common/BoundingBoxOfAPointSet,Bounding Box Of A Point Set} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointSetPython.itkPointSetMD22___New_orig__)
    Clone = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD22_Clone)
    GetMaximumNumberOfRegions = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD22_GetMaximumNumberOfRegions)
    PassStructure = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD22_PassStructure)
    GetNumberOfPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD22_GetNumberOfPoints)
    SetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD22_SetPoints)
    GetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD22_GetPoints)
    SetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD22_SetPoint)
    GetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD22_GetPoint)
    SetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD22_SetPointData)
    GetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD22_GetPointData)
    SetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD22_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD22_GetRequestedRegion)
    SetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD22_SetBufferedRegion)
    GetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD22_GetBufferedRegion)
    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetMD22
    cast = _swig_new_static_method(_itkPointSetPython.itkPointSetMD22_cast)

    def New(*args, **kargs):
        """New() -> itkPointSetMD22

        Create a new object of the class itkPointSetMD22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetMD22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetMD22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetMD22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetMD22 in _itkPointSetPython:
_itkPointSetPython.itkPointSetMD22_swigregister(itkPointSetMD22)
itkPointSetMD22___New_orig__ = _itkPointSetPython.itkPointSetMD22___New_orig__
itkPointSetMD22_cast = _itkPointSetPython.itkPointSetMD22_cast


def itkPointSetMD33_New():
    return itkPointSetMD33.New()

class itkPointSetMD33(itk.ITKCommonBasePython.itkDataObject):
    r"""


    A superclass of the N-dimensional mesh structure; supports point
    (geometric coordinate and attribute) definition.

    PointSet is a superclass of the N-dimensional mesh structure
    (itk::Mesh). It provides the portion of the mesh definition for
    geometric coordinates (and associated attribute or pixel information).
    The defined API provides operations on points but does not tie down
    the underlying implementation and storage. A "MeshTraits" structure
    is used to define the container and identifier to access the points.
    See DefaultStaticMeshTraits for the set of type definitions needed.
    All types that are defined in the "MeshTraits" structure will have
    duplicate type alias in the resulting mesh itself.

    PointSet has two template parameters. The first is the pixel type, or
    the type of data stored (optionally) with the points. The second is
    the "MeshTraits" structure controlling type information
    characterizing the point set. Most users will be happy with the
    defaults, and will not have to worry about this second argument.

    Template parameters for PointSet:

    TPixelType = The type stored as data for the point.

    TMeshTraits = Type information structure for the point set.

    {Core/Common/CreateAPointSet,Create a PointSet}
    {Core/Common/ReadAPointSet,Read a PointSet}
    {Core/Common/WriteAPointSet,Write a PointSet}
    {Core/Common/BoundingBoxOfAPointSet,Bounding Box Of A Point Set} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointSetPython.itkPointSetMD33___New_orig__)
    Clone = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD33_Clone)
    GetMaximumNumberOfRegions = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD33_GetMaximumNumberOfRegions)
    PassStructure = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD33_PassStructure)
    GetNumberOfPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD33_GetNumberOfPoints)
    SetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD33_SetPoints)
    GetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD33_GetPoints)
    SetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD33_SetPoint)
    GetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD33_GetPoint)
    SetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD33_SetPointData)
    GetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD33_GetPointData)
    SetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD33_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD33_GetRequestedRegion)
    SetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD33_SetBufferedRegion)
    GetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD33_GetBufferedRegion)
    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetMD33
    cast = _swig_new_static_method(_itkPointSetPython.itkPointSetMD33_cast)

    def New(*args, **kargs):
        """New() -> itkPointSetMD33

        Create a new object of the class itkPointSetMD33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetMD33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetMD33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetMD33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetMD33 in _itkPointSetPython:
_itkPointSetPython.itkPointSetMD33_swigregister(itkPointSetMD33)
itkPointSetMD33___New_orig__ = _itkPointSetPython.itkPointSetMD33___New_orig__
itkPointSetMD33_cast = _itkPointSetPython.itkPointSetMD33_cast


def itkPointSetPD22STD22DD_New():
    return itkPointSetPD22STD22DD.New()

class itkPointSetPD22STD22DD(itk.ITKCommonBasePython.itkDataObject):
    r"""


    A superclass of the N-dimensional mesh structure; supports point
    (geometric coordinate and attribute) definition.

    PointSet is a superclass of the N-dimensional mesh structure
    (itk::Mesh). It provides the portion of the mesh definition for
    geometric coordinates (and associated attribute or pixel information).
    The defined API provides operations on points but does not tie down
    the underlying implementation and storage. A "MeshTraits" structure
    is used to define the container and identifier to access the points.
    See DefaultStaticMeshTraits for the set of type definitions needed.
    All types that are defined in the "MeshTraits" structure will have
    duplicate type alias in the resulting mesh itself.

    PointSet has two template parameters. The first is the pixel type, or
    the type of data stored (optionally) with the points. The second is
    the "MeshTraits" structure controlling type information
    characterizing the point set. Most users will be happy with the
    defaults, and will not have to worry about this second argument.

    Template parameters for PointSet:

    TPixelType = The type stored as data for the point.

    TMeshTraits = Type information structure for the point set.

    {Core/Common/CreateAPointSet,Create a PointSet}
    {Core/Common/ReadAPointSet,Read a PointSet}
    {Core/Common/WriteAPointSet,Write a PointSet}
    {Core/Common/BoundingBoxOfAPointSet,Bounding Box Of A Point Set} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointSetPython.itkPointSetPD22STD22DD___New_orig__)
    Clone = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD22STD22DD_Clone)
    GetMaximumNumberOfRegions = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD22STD22DD_GetMaximumNumberOfRegions)
    PassStructure = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD22STD22DD_PassStructure)
    GetNumberOfPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD22STD22DD_GetNumberOfPoints)
    SetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD22STD22DD_SetPoints)
    GetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD22STD22DD_GetPoints)
    SetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD22STD22DD_SetPoint)
    GetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD22STD22DD_GetPoint)
    SetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD22STD22DD_SetPointData)
    GetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD22STD22DD_GetPointData)
    SetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD22STD22DD_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD22STD22DD_GetRequestedRegion)
    SetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD22STD22DD_SetBufferedRegion)
    GetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD22STD22DD_GetBufferedRegion)
    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetPD22STD22DD
    cast = _swig_new_static_method(_itkPointSetPython.itkPointSetPD22STD22DD_cast)

    def New(*args, **kargs):
        """New() -> itkPointSetPD22STD22DD

        Create a new object of the class itkPointSetPD22STD22DD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetPD22STD22DD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetPD22STD22DD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetPD22STD22DD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetPD22STD22DD in _itkPointSetPython:
_itkPointSetPython.itkPointSetPD22STD22DD_swigregister(itkPointSetPD22STD22DD)
itkPointSetPD22STD22DD___New_orig__ = _itkPointSetPython.itkPointSetPD22STD22DD___New_orig__
itkPointSetPD22STD22DD_cast = _itkPointSetPython.itkPointSetPD22STD22DD_cast


def itkPointSetPD33STD33DD_New():
    return itkPointSetPD33STD33DD.New()

class itkPointSetPD33STD33DD(itk.ITKCommonBasePython.itkDataObject):
    r"""


    A superclass of the N-dimensional mesh structure; supports point
    (geometric coordinate and attribute) definition.

    PointSet is a superclass of the N-dimensional mesh structure
    (itk::Mesh). It provides the portion of the mesh definition for
    geometric coordinates (and associated attribute or pixel information).
    The defined API provides operations on points but does not tie down
    the underlying implementation and storage. A "MeshTraits" structure
    is used to define the container and identifier to access the points.
    See DefaultStaticMeshTraits for the set of type definitions needed.
    All types that are defined in the "MeshTraits" structure will have
    duplicate type alias in the resulting mesh itself.

    PointSet has two template parameters. The first is the pixel type, or
    the type of data stored (optionally) with the points. The second is
    the "MeshTraits" structure controlling type information
    characterizing the point set. Most users will be happy with the
    defaults, and will not have to worry about this second argument.

    Template parameters for PointSet:

    TPixelType = The type stored as data for the point.

    TMeshTraits = Type information structure for the point set.

    {Core/Common/CreateAPointSet,Create a PointSet}
    {Core/Common/ReadAPointSet,Read a PointSet}
    {Core/Common/WriteAPointSet,Write a PointSet}
    {Core/Common/BoundingBoxOfAPointSet,Bounding Box Of A Point Set} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointSetPython.itkPointSetPD33STD33DD___New_orig__)
    Clone = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD33STD33DD_Clone)
    GetMaximumNumberOfRegions = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD33STD33DD_GetMaximumNumberOfRegions)
    PassStructure = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD33STD33DD_PassStructure)
    GetNumberOfPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD33STD33DD_GetNumberOfPoints)
    SetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD33STD33DD_SetPoints)
    GetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD33STD33DD_GetPoints)
    SetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD33STD33DD_SetPoint)
    GetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD33STD33DD_GetPoint)
    SetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD33STD33DD_SetPointData)
    GetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD33STD33DD_GetPointData)
    SetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD33STD33DD_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD33STD33DD_GetRequestedRegion)
    SetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD33STD33DD_SetBufferedRegion)
    GetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD33STD33DD_GetBufferedRegion)
    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetPD33STD33DD
    cast = _swig_new_static_method(_itkPointSetPython.itkPointSetPD33STD33DD_cast)

    def New(*args, **kargs):
        """New() -> itkPointSetPD33STD33DD

        Create a new object of the class itkPointSetPD33STD33DD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetPD33STD33DD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetPD33STD33DD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetPD33STD33DD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetPD33STD33DD in _itkPointSetPython:
_itkPointSetPython.itkPointSetPD33STD33DD_swigregister(itkPointSetPD33STD33DD)
itkPointSetPD33STD33DD___New_orig__ = _itkPointSetPython.itkPointSetPD33STD33DD___New_orig__
itkPointSetPD33STD33DD_cast = _itkPointSetPython.itkPointSetPD33STD33DD_cast


def itkPointSetSS2_New():
    return itkPointSetSS2.New()

class itkPointSetSS2(itk.ITKCommonBasePython.itkDataObject):
    r"""


    A superclass of the N-dimensional mesh structure; supports point
    (geometric coordinate and attribute) definition.

    PointSet is a superclass of the N-dimensional mesh structure
    (itk::Mesh). It provides the portion of the mesh definition for
    geometric coordinates (and associated attribute or pixel information).
    The defined API provides operations on points but does not tie down
    the underlying implementation and storage. A "MeshTraits" structure
    is used to define the container and identifier to access the points.
    See DefaultStaticMeshTraits for the set of type definitions needed.
    All types that are defined in the "MeshTraits" structure will have
    duplicate type alias in the resulting mesh itself.

    PointSet has two template parameters. The first is the pixel type, or
    the type of data stored (optionally) with the points. The second is
    the "MeshTraits" structure controlling type information
    characterizing the point set. Most users will be happy with the
    defaults, and will not have to worry about this second argument.

    Template parameters for PointSet:

    TPixelType = The type stored as data for the point.

    TMeshTraits = Type information structure for the point set.

    {Core/Common/CreateAPointSet,Create a PointSet}
    {Core/Common/ReadAPointSet,Read a PointSet}
    {Core/Common/WriteAPointSet,Write a PointSet}
    {Core/Common/BoundingBoxOfAPointSet,Bounding Box Of A Point Set} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointSetPython.itkPointSetSS2___New_orig__)
    Clone = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS2_Clone)
    GetMaximumNumberOfRegions = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS2_GetMaximumNumberOfRegions)
    PassStructure = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS2_PassStructure)
    GetNumberOfPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS2_GetNumberOfPoints)
    SetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS2_SetPoints)
    GetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS2_GetPoints)
    SetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS2_SetPoint)
    GetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS2_GetPoint)
    SetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS2_SetPointData)
    GetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS2_GetPointData)
    SetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS2_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS2_GetRequestedRegion)
    SetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS2_SetBufferedRegion)
    GetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS2_GetBufferedRegion)
    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetSS2
    cast = _swig_new_static_method(_itkPointSetPython.itkPointSetSS2_cast)

    def New(*args, **kargs):
        """New() -> itkPointSetSS2

        Create a new object of the class itkPointSetSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetSS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetSS2 in _itkPointSetPython:
_itkPointSetPython.itkPointSetSS2_swigregister(itkPointSetSS2)
itkPointSetSS2___New_orig__ = _itkPointSetPython.itkPointSetSS2___New_orig__
itkPointSetSS2_cast = _itkPointSetPython.itkPointSetSS2_cast


def itkPointSetSS3_New():
    return itkPointSetSS3.New()

class itkPointSetSS3(itk.ITKCommonBasePython.itkDataObject):
    r"""


    A superclass of the N-dimensional mesh structure; supports point
    (geometric coordinate and attribute) definition.

    PointSet is a superclass of the N-dimensional mesh structure
    (itk::Mesh). It provides the portion of the mesh definition for
    geometric coordinates (and associated attribute or pixel information).
    The defined API provides operations on points but does not tie down
    the underlying implementation and storage. A "MeshTraits" structure
    is used to define the container and identifier to access the points.
    See DefaultStaticMeshTraits for the set of type definitions needed.
    All types that are defined in the "MeshTraits" structure will have
    duplicate type alias in the resulting mesh itself.

    PointSet has two template parameters. The first is the pixel type, or
    the type of data stored (optionally) with the points. The second is
    the "MeshTraits" structure controlling type information
    characterizing the point set. Most users will be happy with the
    defaults, and will not have to worry about this second argument.

    Template parameters for PointSet:

    TPixelType = The type stored as data for the point.

    TMeshTraits = Type information structure for the point set.

    {Core/Common/CreateAPointSet,Create a PointSet}
    {Core/Common/ReadAPointSet,Read a PointSet}
    {Core/Common/WriteAPointSet,Write a PointSet}
    {Core/Common/BoundingBoxOfAPointSet,Bounding Box Of A Point Set} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointSetPython.itkPointSetSS3___New_orig__)
    Clone = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS3_Clone)
    GetMaximumNumberOfRegions = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS3_GetMaximumNumberOfRegions)
    PassStructure = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS3_PassStructure)
    GetNumberOfPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS3_GetNumberOfPoints)
    SetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS3_SetPoints)
    GetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS3_GetPoints)
    SetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS3_SetPoint)
    GetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS3_GetPoint)
    SetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS3_SetPointData)
    GetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS3_GetPointData)
    SetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS3_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS3_GetRequestedRegion)
    SetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS3_SetBufferedRegion)
    GetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS3_GetBufferedRegion)
    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetSS3
    cast = _swig_new_static_method(_itkPointSetPython.itkPointSetSS3_cast)

    def New(*args, **kargs):
        """New() -> itkPointSetSS3

        Create a new object of the class itkPointSetSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetSS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetSS3 in _itkPointSetPython:
_itkPointSetPython.itkPointSetSS3_swigregister(itkPointSetSS3)
itkPointSetSS3___New_orig__ = _itkPointSetPython.itkPointSetSS3___New_orig__
itkPointSetSS3_cast = _itkPointSetPython.itkPointSetSS3_cast


def itkPointSetUC2_New():
    return itkPointSetUC2.New()

class itkPointSetUC2(itk.ITKCommonBasePython.itkDataObject):
    r"""


    A superclass of the N-dimensional mesh structure; supports point
    (geometric coordinate and attribute) definition.

    PointSet is a superclass of the N-dimensional mesh structure
    (itk::Mesh). It provides the portion of the mesh definition for
    geometric coordinates (and associated attribute or pixel information).
    The defined API provides operations on points but does not tie down
    the underlying implementation and storage. A "MeshTraits" structure
    is used to define the container and identifier to access the points.
    See DefaultStaticMeshTraits for the set of type definitions needed.
    All types that are defined in the "MeshTraits" structure will have
    duplicate type alias in the resulting mesh itself.

    PointSet has two template parameters. The first is the pixel type, or
    the type of data stored (optionally) with the points. The second is
    the "MeshTraits" structure controlling type information
    characterizing the point set. Most users will be happy with the
    defaults, and will not have to worry about this second argument.

    Template parameters for PointSet:

    TPixelType = The type stored as data for the point.

    TMeshTraits = Type information structure for the point set.

    {Core/Common/CreateAPointSet,Create a PointSet}
    {Core/Common/ReadAPointSet,Read a PointSet}
    {Core/Common/WriteAPointSet,Write a PointSet}
    {Core/Common/BoundingBoxOfAPointSet,Bounding Box Of A Point Set} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointSetPython.itkPointSetUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC2_Clone)
    GetMaximumNumberOfRegions = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC2_GetMaximumNumberOfRegions)
    PassStructure = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC2_PassStructure)
    GetNumberOfPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC2_GetNumberOfPoints)
    SetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC2_SetPoints)
    GetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC2_GetPoints)
    SetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC2_SetPoint)
    GetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC2_GetPoint)
    SetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC2_SetPointData)
    GetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC2_GetPointData)
    SetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC2_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC2_GetRequestedRegion)
    SetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC2_SetBufferedRegion)
    GetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC2_GetBufferedRegion)
    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetUC2
    cast = _swig_new_static_method(_itkPointSetPython.itkPointSetUC2_cast)

    def New(*args, **kargs):
        """New() -> itkPointSetUC2

        Create a new object of the class itkPointSetUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetUC2 in _itkPointSetPython:
_itkPointSetPython.itkPointSetUC2_swigregister(itkPointSetUC2)
itkPointSetUC2___New_orig__ = _itkPointSetPython.itkPointSetUC2___New_orig__
itkPointSetUC2_cast = _itkPointSetPython.itkPointSetUC2_cast


def itkPointSetUC3_New():
    return itkPointSetUC3.New()

class itkPointSetUC3(itk.ITKCommonBasePython.itkDataObject):
    r"""


    A superclass of the N-dimensional mesh structure; supports point
    (geometric coordinate and attribute) definition.

    PointSet is a superclass of the N-dimensional mesh structure
    (itk::Mesh). It provides the portion of the mesh definition for
    geometric coordinates (and associated attribute or pixel information).
    The defined API provides operations on points but does not tie down
    the underlying implementation and storage. A "MeshTraits" structure
    is used to define the container and identifier to access the points.
    See DefaultStaticMeshTraits for the set of type definitions needed.
    All types that are defined in the "MeshTraits" structure will have
    duplicate type alias in the resulting mesh itself.

    PointSet has two template parameters. The first is the pixel type, or
    the type of data stored (optionally) with the points. The second is
    the "MeshTraits" structure controlling type information
    characterizing the point set. Most users will be happy with the
    defaults, and will not have to worry about this second argument.

    Template parameters for PointSet:

    TPixelType = The type stored as data for the point.

    TMeshTraits = Type information structure for the point set.

    {Core/Common/CreateAPointSet,Create a PointSet}
    {Core/Common/ReadAPointSet,Read a PointSet}
    {Core/Common/WriteAPointSet,Write a PointSet}
    {Core/Common/BoundingBoxOfAPointSet,Bounding Box Of A Point Set} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointSetPython.itkPointSetUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC3_Clone)
    GetMaximumNumberOfRegions = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC3_GetMaximumNumberOfRegions)
    PassStructure = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC3_PassStructure)
    GetNumberOfPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC3_GetNumberOfPoints)
    SetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC3_SetPoints)
    GetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC3_GetPoints)
    SetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC3_SetPoint)
    GetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC3_GetPoint)
    SetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC3_SetPointData)
    GetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC3_GetPointData)
    SetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC3_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC3_GetRequestedRegion)
    SetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC3_SetBufferedRegion)
    GetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC3_GetBufferedRegion)
    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetUC3
    cast = _swig_new_static_method(_itkPointSetPython.itkPointSetUC3_cast)

    def New(*args, **kargs):
        """New() -> itkPointSetUC3

        Create a new object of the class itkPointSetUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetUC3 in _itkPointSetPython:
_itkPointSetPython.itkPointSetUC3_swigregister(itkPointSetUC3)
itkPointSetUC3___New_orig__ = _itkPointSetPython.itkPointSetUC3___New_orig__
itkPointSetUC3_cast = _itkPointSetPython.itkPointSetUC3_cast


def itkPointSetUI2DSMUI22FFUI_New():
    return itkPointSetUI2DSMUI22FFUI.New()

class itkPointSetUI2DSMUI22FFUI(itk.ITKCommonBasePython.itkDataObject):
    r"""


    A superclass of the N-dimensional mesh structure; supports point
    (geometric coordinate and attribute) definition.

    PointSet is a superclass of the N-dimensional mesh structure
    (itk::Mesh). It provides the portion of the mesh definition for
    geometric coordinates (and associated attribute or pixel information).
    The defined API provides operations on points but does not tie down
    the underlying implementation and storage. A "MeshTraits" structure
    is used to define the container and identifier to access the points.
    See DefaultStaticMeshTraits for the set of type definitions needed.
    All types that are defined in the "MeshTraits" structure will have
    duplicate type alias in the resulting mesh itself.

    PointSet has two template parameters. The first is the pixel type, or
    the type of data stored (optionally) with the points. The second is
    the "MeshTraits" structure controlling type information
    characterizing the point set. Most users will be happy with the
    defaults, and will not have to worry about this second argument.

    Template parameters for PointSet:

    TPixelType = The type stored as data for the point.

    TMeshTraits = Type information structure for the point set.

    {Core/Common/CreateAPointSet,Create a PointSet}
    {Core/Common/ReadAPointSet,Read a PointSet}
    {Core/Common/WriteAPointSet,Write a PointSet}
    {Core/Common/BoundingBoxOfAPointSet,Bounding Box Of A Point Set} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointSetPython.itkPointSetUI2DSMUI22FFUI___New_orig__)
    Clone = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI2DSMUI22FFUI_Clone)
    GetMaximumNumberOfRegions = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI2DSMUI22FFUI_GetMaximumNumberOfRegions)
    PassStructure = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI2DSMUI22FFUI_PassStructure)
    GetNumberOfPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI2DSMUI22FFUI_GetNumberOfPoints)
    SetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI2DSMUI22FFUI_SetPoints)
    GetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI2DSMUI22FFUI_GetPoints)
    SetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI2DSMUI22FFUI_SetPoint)
    GetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI2DSMUI22FFUI_GetPoint)
    SetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI2DSMUI22FFUI_SetPointData)
    GetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI2DSMUI22FFUI_GetPointData)
    SetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI2DSMUI22FFUI_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI2DSMUI22FFUI_GetRequestedRegion)
    SetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI2DSMUI22FFUI_SetBufferedRegion)
    GetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI2DSMUI22FFUI_GetBufferedRegion)
    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetUI2DSMUI22FFUI
    cast = _swig_new_static_method(_itkPointSetPython.itkPointSetUI2DSMUI22FFUI_cast)

    def New(*args, **kargs):
        """New() -> itkPointSetUI2DSMUI22FFUI

        Create a new object of the class itkPointSetUI2DSMUI22FFUI and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetUI2DSMUI22FFUI.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetUI2DSMUI22FFUI.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetUI2DSMUI22FFUI.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetUI2DSMUI22FFUI in _itkPointSetPython:
_itkPointSetPython.itkPointSetUI2DSMUI22FFUI_swigregister(itkPointSetUI2DSMUI22FFUI)
itkPointSetUI2DSMUI22FFUI___New_orig__ = _itkPointSetPython.itkPointSetUI2DSMUI22FFUI___New_orig__
itkPointSetUI2DSMUI22FFUI_cast = _itkPointSetPython.itkPointSetUI2DSMUI22FFUI_cast


def itkPointSetUI3DSMUI33FFUI_New():
    return itkPointSetUI3DSMUI33FFUI.New()

class itkPointSetUI3DSMUI33FFUI(itk.ITKCommonBasePython.itkDataObject):
    r"""


    A superclass of the N-dimensional mesh structure; supports point
    (geometric coordinate and attribute) definition.

    PointSet is a superclass of the N-dimensional mesh structure
    (itk::Mesh). It provides the portion of the mesh definition for
    geometric coordinates (and associated attribute or pixel information).
    The defined API provides operations on points but does not tie down
    the underlying implementation and storage. A "MeshTraits" structure
    is used to define the container and identifier to access the points.
    See DefaultStaticMeshTraits for the set of type definitions needed.
    All types that are defined in the "MeshTraits" structure will have
    duplicate type alias in the resulting mesh itself.

    PointSet has two template parameters. The first is the pixel type, or
    the type of data stored (optionally) with the points. The second is
    the "MeshTraits" structure controlling type information
    characterizing the point set. Most users will be happy with the
    defaults, and will not have to worry about this second argument.

    Template parameters for PointSet:

    TPixelType = The type stored as data for the point.

    TMeshTraits = Type information structure for the point set.

    {Core/Common/CreateAPointSet,Create a PointSet}
    {Core/Common/ReadAPointSet,Read a PointSet}
    {Core/Common/WriteAPointSet,Write a PointSet}
    {Core/Common/BoundingBoxOfAPointSet,Bounding Box Of A Point Set} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointSetPython.itkPointSetUI3DSMUI33FFUI___New_orig__)
    Clone = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI3DSMUI33FFUI_Clone)
    GetMaximumNumberOfRegions = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI3DSMUI33FFUI_GetMaximumNumberOfRegions)
    PassStructure = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI3DSMUI33FFUI_PassStructure)
    GetNumberOfPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI3DSMUI33FFUI_GetNumberOfPoints)
    SetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI3DSMUI33FFUI_SetPoints)
    GetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI3DSMUI33FFUI_GetPoints)
    SetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI3DSMUI33FFUI_SetPoint)
    GetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI3DSMUI33FFUI_GetPoint)
    SetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI3DSMUI33FFUI_SetPointData)
    GetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI3DSMUI33FFUI_GetPointData)
    SetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI3DSMUI33FFUI_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI3DSMUI33FFUI_GetRequestedRegion)
    SetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI3DSMUI33FFUI_SetBufferedRegion)
    GetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI3DSMUI33FFUI_GetBufferedRegion)
    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetUI3DSMUI33FFUI
    cast = _swig_new_static_method(_itkPointSetPython.itkPointSetUI3DSMUI33FFUI_cast)

    def New(*args, **kargs):
        """New() -> itkPointSetUI3DSMUI33FFUI

        Create a new object of the class itkPointSetUI3DSMUI33FFUI and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetUI3DSMUI33FFUI.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetUI3DSMUI33FFUI.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetUI3DSMUI33FFUI.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetUI3DSMUI33FFUI in _itkPointSetPython:
_itkPointSetPython.itkPointSetUI3DSMUI33FFUI_swigregister(itkPointSetUI3DSMUI33FFUI)
itkPointSetUI3DSMUI33FFUI___New_orig__ = _itkPointSetPython.itkPointSetUI3DSMUI33FFUI___New_orig__
itkPointSetUI3DSMUI33FFUI_cast = _itkPointSetPython.itkPointSetUI3DSMUI33FFUI_cast


def itkPointSetUS2_New():
    return itkPointSetUS2.New()

class itkPointSetUS2(itk.ITKCommonBasePython.itkDataObject):
    r"""


    A superclass of the N-dimensional mesh structure; supports point
    (geometric coordinate and attribute) definition.

    PointSet is a superclass of the N-dimensional mesh structure
    (itk::Mesh). It provides the portion of the mesh definition for
    geometric coordinates (and associated attribute or pixel information).
    The defined API provides operations on points but does not tie down
    the underlying implementation and storage. A "MeshTraits" structure
    is used to define the container and identifier to access the points.
    See DefaultStaticMeshTraits for the set of type definitions needed.
    All types that are defined in the "MeshTraits" structure will have
    duplicate type alias in the resulting mesh itself.

    PointSet has two template parameters. The first is the pixel type, or
    the type of data stored (optionally) with the points. The second is
    the "MeshTraits" structure controlling type information
    characterizing the point set. Most users will be happy with the
    defaults, and will not have to worry about this second argument.

    Template parameters for PointSet:

    TPixelType = The type stored as data for the point.

    TMeshTraits = Type information structure for the point set.

    {Core/Common/CreateAPointSet,Create a PointSet}
    {Core/Common/ReadAPointSet,Read a PointSet}
    {Core/Common/WriteAPointSet,Write a PointSet}
    {Core/Common/BoundingBoxOfAPointSet,Bounding Box Of A Point Set} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointSetPython.itkPointSetUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS2_Clone)
    GetMaximumNumberOfRegions = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS2_GetMaximumNumberOfRegions)
    PassStructure = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS2_PassStructure)
    GetNumberOfPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS2_GetNumberOfPoints)
    SetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS2_SetPoints)
    GetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS2_GetPoints)
    SetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS2_SetPoint)
    GetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS2_GetPoint)
    SetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS2_SetPointData)
    GetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS2_GetPointData)
    SetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS2_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS2_GetRequestedRegion)
    SetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS2_SetBufferedRegion)
    GetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS2_GetBufferedRegion)
    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetUS2
    cast = _swig_new_static_method(_itkPointSetPython.itkPointSetUS2_cast)

    def New(*args, **kargs):
        """New() -> itkPointSetUS2

        Create a new object of the class itkPointSetUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetUS2 in _itkPointSetPython:
_itkPointSetPython.itkPointSetUS2_swigregister(itkPointSetUS2)
itkPointSetUS2___New_orig__ = _itkPointSetPython.itkPointSetUS2___New_orig__
itkPointSetUS2_cast = _itkPointSetPython.itkPointSetUS2_cast


def itkPointSetUS3_New():
    return itkPointSetUS3.New()

class itkPointSetUS3(itk.ITKCommonBasePython.itkDataObject):
    r"""


    A superclass of the N-dimensional mesh structure; supports point
    (geometric coordinate and attribute) definition.

    PointSet is a superclass of the N-dimensional mesh structure
    (itk::Mesh). It provides the portion of the mesh definition for
    geometric coordinates (and associated attribute or pixel information).
    The defined API provides operations on points but does not tie down
    the underlying implementation and storage. A "MeshTraits" structure
    is used to define the container and identifier to access the points.
    See DefaultStaticMeshTraits for the set of type definitions needed.
    All types that are defined in the "MeshTraits" structure will have
    duplicate type alias in the resulting mesh itself.

    PointSet has two template parameters. The first is the pixel type, or
    the type of data stored (optionally) with the points. The second is
    the "MeshTraits" structure controlling type information
    characterizing the point set. Most users will be happy with the
    defaults, and will not have to worry about this second argument.

    Template parameters for PointSet:

    TPixelType = The type stored as data for the point.

    TMeshTraits = Type information structure for the point set.

    {Core/Common/CreateAPointSet,Create a PointSet}
    {Core/Common/ReadAPointSet,Read a PointSet}
    {Core/Common/WriteAPointSet,Write a PointSet}
    {Core/Common/BoundingBoxOfAPointSet,Bounding Box Of A Point Set} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointSetPython.itkPointSetUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS3_Clone)
    GetMaximumNumberOfRegions = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS3_GetMaximumNumberOfRegions)
    PassStructure = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS3_PassStructure)
    GetNumberOfPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS3_GetNumberOfPoints)
    SetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS3_SetPoints)
    GetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS3_GetPoints)
    SetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS3_SetPoint)
    GetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS3_GetPoint)
    SetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS3_SetPointData)
    GetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS3_GetPointData)
    SetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS3_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS3_GetRequestedRegion)
    SetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS3_SetBufferedRegion)
    GetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS3_GetBufferedRegion)
    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetUS3
    cast = _swig_new_static_method(_itkPointSetPython.itkPointSetUS3_cast)

    def New(*args, **kargs):
        """New() -> itkPointSetUS3

        Create a new object of the class itkPointSetUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetUS3 in _itkPointSetPython:
_itkPointSetPython.itkPointSetUS3_swigregister(itkPointSetUS3)
itkPointSetUS3___New_orig__ = _itkPointSetPython.itkPointSetUS3___New_orig__
itkPointSetUS3_cast = _itkPointSetPython.itkPointSetUS3_cast



