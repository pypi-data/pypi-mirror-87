# coding: utf-8

"""
    Argo Events

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from argo.events.client.configuration import Configuration


class V1alpha1SensorSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'circuit': 'str',
        'dependencies': 'list[V1alpha1EventDependency]',
        'dependency_groups': 'list[V1alpha1DependencyGroup]',
        'error_on_failed_round': 'bool',
        'event_bus_name': 'str',
        'template': 'SensorV1alpha1Template',
        'triggers': 'list[V1alpha1Trigger]'
    }

    attribute_map = {
        'circuit': 'circuit',
        'dependencies': 'dependencies',
        'dependency_groups': 'dependencyGroups',
        'error_on_failed_round': 'errorOnFailedRound',
        'event_bus_name': 'eventBusName',
        'template': 'template',
        'triggers': 'triggers'
    }

    def __init__(self, circuit=None, dependencies=None, dependency_groups=None, error_on_failed_round=None, event_bus_name=None, template=None, triggers=None, local_vars_configuration=None):  # noqa: E501
        """V1alpha1SensorSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._circuit = None
        self._dependencies = None
        self._dependency_groups = None
        self._error_on_failed_round = None
        self._event_bus_name = None
        self._template = None
        self._triggers = None
        self.discriminator = None

        if circuit is not None:
            self.circuit = circuit
        self.dependencies = dependencies
        if dependency_groups is not None:
            self.dependency_groups = dependency_groups
        if error_on_failed_round is not None:
            self.error_on_failed_round = error_on_failed_round
        if event_bus_name is not None:
            self.event_bus_name = event_bus_name
        if template is not None:
            self.template = template
        self.triggers = triggers

    @property
    def circuit(self):
        """Gets the circuit of this V1alpha1SensorSpec.  # noqa: E501

        Circuit is a boolean expression of dependency groups DEPRECATED: Use Switch in triggers instead.  # noqa: E501

        :return: The circuit of this V1alpha1SensorSpec.  # noqa: E501
        :rtype: str
        """
        return self._circuit

    @circuit.setter
    def circuit(self, circuit):
        """Sets the circuit of this V1alpha1SensorSpec.

        Circuit is a boolean expression of dependency groups DEPRECATED: Use Switch in triggers instead.  # noqa: E501

        :param circuit: The circuit of this V1alpha1SensorSpec.  # noqa: E501
        :type: str
        """

        self._circuit = circuit

    @property
    def dependencies(self):
        """Gets the dependencies of this V1alpha1SensorSpec.  # noqa: E501

        Dependencies is a list of the events that this sensor is dependent on.  # noqa: E501

        :return: The dependencies of this V1alpha1SensorSpec.  # noqa: E501
        :rtype: list[V1alpha1EventDependency]
        """
        return self._dependencies

    @dependencies.setter
    def dependencies(self, dependencies):
        """Sets the dependencies of this V1alpha1SensorSpec.

        Dependencies is a list of the events that this sensor is dependent on.  # noqa: E501

        :param dependencies: The dependencies of this V1alpha1SensorSpec.  # noqa: E501
        :type: list[V1alpha1EventDependency]
        """
        if self.local_vars_configuration.client_side_validation and dependencies is None:  # noqa: E501
            raise ValueError("Invalid value for `dependencies`, must not be `None`")  # noqa: E501

        self._dependencies = dependencies

    @property
    def dependency_groups(self):
        """Gets the dependency_groups of this V1alpha1SensorSpec.  # noqa: E501

        DependencyGroups is a list of the groups of events.  # noqa: E501

        :return: The dependency_groups of this V1alpha1SensorSpec.  # noqa: E501
        :rtype: list[V1alpha1DependencyGroup]
        """
        return self._dependency_groups

    @dependency_groups.setter
    def dependency_groups(self, dependency_groups):
        """Sets the dependency_groups of this V1alpha1SensorSpec.

        DependencyGroups is a list of the groups of events.  # noqa: E501

        :param dependency_groups: The dependency_groups of this V1alpha1SensorSpec.  # noqa: E501
        :type: list[V1alpha1DependencyGroup]
        """

        self._dependency_groups = dependency_groups

    @property
    def error_on_failed_round(self):
        """Gets the error_on_failed_round of this V1alpha1SensorSpec.  # noqa: E501

        ErrorOnFailedRound if set to true, marks sensor state as `error` if the previous trigger round fails. Once sensor state is set to `error`, no further triggers will be processed.  # noqa: E501

        :return: The error_on_failed_round of this V1alpha1SensorSpec.  # noqa: E501
        :rtype: bool
        """
        return self._error_on_failed_round

    @error_on_failed_round.setter
    def error_on_failed_round(self, error_on_failed_round):
        """Sets the error_on_failed_round of this V1alpha1SensorSpec.

        ErrorOnFailedRound if set to true, marks sensor state as `error` if the previous trigger round fails. Once sensor state is set to `error`, no further triggers will be processed.  # noqa: E501

        :param error_on_failed_round: The error_on_failed_round of this V1alpha1SensorSpec.  # noqa: E501
        :type: bool
        """

        self._error_on_failed_round = error_on_failed_round

    @property
    def event_bus_name(self):
        """Gets the event_bus_name of this V1alpha1SensorSpec.  # noqa: E501

        EventBusName references to a EventBus name. By default the value is \"default\"  # noqa: E501

        :return: The event_bus_name of this V1alpha1SensorSpec.  # noqa: E501
        :rtype: str
        """
        return self._event_bus_name

    @event_bus_name.setter
    def event_bus_name(self, event_bus_name):
        """Sets the event_bus_name of this V1alpha1SensorSpec.

        EventBusName references to a EventBus name. By default the value is \"default\"  # noqa: E501

        :param event_bus_name: The event_bus_name of this V1alpha1SensorSpec.  # noqa: E501
        :type: str
        """

        self._event_bus_name = event_bus_name

    @property
    def template(self):
        """Gets the template of this V1alpha1SensorSpec.  # noqa: E501


        :return: The template of this V1alpha1SensorSpec.  # noqa: E501
        :rtype: SensorV1alpha1Template
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this V1alpha1SensorSpec.


        :param template: The template of this V1alpha1SensorSpec.  # noqa: E501
        :type: SensorV1alpha1Template
        """

        self._template = template

    @property
    def triggers(self):
        """Gets the triggers of this V1alpha1SensorSpec.  # noqa: E501

        Triggers is a list of the things that this sensor evokes. These are the outputs from this sensor.  # noqa: E501

        :return: The triggers of this V1alpha1SensorSpec.  # noqa: E501
        :rtype: list[V1alpha1Trigger]
        """
        return self._triggers

    @triggers.setter
    def triggers(self, triggers):
        """Sets the triggers of this V1alpha1SensorSpec.

        Triggers is a list of the things that this sensor evokes. These are the outputs from this sensor.  # noqa: E501

        :param triggers: The triggers of this V1alpha1SensorSpec.  # noqa: E501
        :type: list[V1alpha1Trigger]
        """
        if self.local_vars_configuration.client_side_validation and triggers is None:  # noqa: E501
            raise ValueError("Invalid value for `triggers`, must not be `None`")  # noqa: E501

        self._triggers = triggers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1SensorSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alpha1SensorSpec):
            return True

        return self.to_dict() != other.to_dict()
