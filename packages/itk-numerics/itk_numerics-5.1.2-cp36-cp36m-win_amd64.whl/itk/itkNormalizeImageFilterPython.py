# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageIntensityPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkNormalizeImageFilterPython
else:
    import _itkNormalizeImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkNormalizeImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkNormalizeImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.stdcomplexPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkImagePython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.itkPointPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkRGBAPixelPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython

def itkNormalizeImageFilterID2ID2_New():
    return itkNormalizeImageFilterID2ID2.New()

class itkNormalizeImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""


    Normalize an image by setting its mean to zero and variance to one.

    NormalizeImageFilter shifts and scales an image so that the pixels in
    the image have a zero mean and unit variance. This filter uses
    StatisticsImageFilter to compute the mean and variance of the input
    and then applies ShiftScaleImageFilter to shift and scale the pixels.

    NB: since this filter normalizes the data such that the mean is at 0,
    and $-\\sigma$ to $+\\sigma$ is mapped to -1.0 to 1.0, output
    image integral types will produce an image that DOES NOT HAVE a unit
    variance due to 68% of the intensity values being mapped to the real
    number range of -1.0 to 1.0 and then cast to the output integral
    value.

    See:   NormalizeToConstantImageFilter
    {Filtering/ImageIntensity/NormalizeImage,Normalize Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNormalizeImageFilterPython.itkNormalizeImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkNormalizeImageFilterPython.itkNormalizeImageFilterID2ID2_Clone)
    __swig_destroy__ = _itkNormalizeImageFilterPython.delete_itkNormalizeImageFilterID2ID2
    cast = _swig_new_static_method(_itkNormalizeImageFilterPython.itkNormalizeImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkNormalizeImageFilterID2ID2

        Create a new object of the class itkNormalizeImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizeImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizeImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizeImageFilterID2ID2 in _itkNormalizeImageFilterPython:
_itkNormalizeImageFilterPython.itkNormalizeImageFilterID2ID2_swigregister(itkNormalizeImageFilterID2ID2)
itkNormalizeImageFilterID2ID2___New_orig__ = _itkNormalizeImageFilterPython.itkNormalizeImageFilterID2ID2___New_orig__
itkNormalizeImageFilterID2ID2_cast = _itkNormalizeImageFilterPython.itkNormalizeImageFilterID2ID2_cast


def itkNormalizeImageFilterID3ID3_New():
    return itkNormalizeImageFilterID3ID3.New()

class itkNormalizeImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""


    Normalize an image by setting its mean to zero and variance to one.

    NormalizeImageFilter shifts and scales an image so that the pixels in
    the image have a zero mean and unit variance. This filter uses
    StatisticsImageFilter to compute the mean and variance of the input
    and then applies ShiftScaleImageFilter to shift and scale the pixels.

    NB: since this filter normalizes the data such that the mean is at 0,
    and $-\\sigma$ to $+\\sigma$ is mapped to -1.0 to 1.0, output
    image integral types will produce an image that DOES NOT HAVE a unit
    variance due to 68% of the intensity values being mapped to the real
    number range of -1.0 to 1.0 and then cast to the output integral
    value.

    See:   NormalizeToConstantImageFilter
    {Filtering/ImageIntensity/NormalizeImage,Normalize Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNormalizeImageFilterPython.itkNormalizeImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkNormalizeImageFilterPython.itkNormalizeImageFilterID3ID3_Clone)
    __swig_destroy__ = _itkNormalizeImageFilterPython.delete_itkNormalizeImageFilterID3ID3
    cast = _swig_new_static_method(_itkNormalizeImageFilterPython.itkNormalizeImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkNormalizeImageFilterID3ID3

        Create a new object of the class itkNormalizeImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizeImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizeImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizeImageFilterID3ID3 in _itkNormalizeImageFilterPython:
_itkNormalizeImageFilterPython.itkNormalizeImageFilterID3ID3_swigregister(itkNormalizeImageFilterID3ID3)
itkNormalizeImageFilterID3ID3___New_orig__ = _itkNormalizeImageFilterPython.itkNormalizeImageFilterID3ID3___New_orig__
itkNormalizeImageFilterID3ID3_cast = _itkNormalizeImageFilterPython.itkNormalizeImageFilterID3ID3_cast


def itkNormalizeImageFilterIF2IF2_New():
    return itkNormalizeImageFilterIF2IF2.New()

class itkNormalizeImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""


    Normalize an image by setting its mean to zero and variance to one.

    NormalizeImageFilter shifts and scales an image so that the pixels in
    the image have a zero mean and unit variance. This filter uses
    StatisticsImageFilter to compute the mean and variance of the input
    and then applies ShiftScaleImageFilter to shift and scale the pixels.

    NB: since this filter normalizes the data such that the mean is at 0,
    and $-\\sigma$ to $+\\sigma$ is mapped to -1.0 to 1.0, output
    image integral types will produce an image that DOES NOT HAVE a unit
    variance due to 68% of the intensity values being mapped to the real
    number range of -1.0 to 1.0 and then cast to the output integral
    value.

    See:   NormalizeToConstantImageFilter
    {Filtering/ImageIntensity/NormalizeImage,Normalize Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNormalizeImageFilterPython.itkNormalizeImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkNormalizeImageFilterPython.itkNormalizeImageFilterIF2IF2_Clone)
    __swig_destroy__ = _itkNormalizeImageFilterPython.delete_itkNormalizeImageFilterIF2IF2
    cast = _swig_new_static_method(_itkNormalizeImageFilterPython.itkNormalizeImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkNormalizeImageFilterIF2IF2

        Create a new object of the class itkNormalizeImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizeImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizeImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizeImageFilterIF2IF2 in _itkNormalizeImageFilterPython:
_itkNormalizeImageFilterPython.itkNormalizeImageFilterIF2IF2_swigregister(itkNormalizeImageFilterIF2IF2)
itkNormalizeImageFilterIF2IF2___New_orig__ = _itkNormalizeImageFilterPython.itkNormalizeImageFilterIF2IF2___New_orig__
itkNormalizeImageFilterIF2IF2_cast = _itkNormalizeImageFilterPython.itkNormalizeImageFilterIF2IF2_cast


def itkNormalizeImageFilterIF3IF3_New():
    return itkNormalizeImageFilterIF3IF3.New()

class itkNormalizeImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""


    Normalize an image by setting its mean to zero and variance to one.

    NormalizeImageFilter shifts and scales an image so that the pixels in
    the image have a zero mean and unit variance. This filter uses
    StatisticsImageFilter to compute the mean and variance of the input
    and then applies ShiftScaleImageFilter to shift and scale the pixels.

    NB: since this filter normalizes the data such that the mean is at 0,
    and $-\\sigma$ to $+\\sigma$ is mapped to -1.0 to 1.0, output
    image integral types will produce an image that DOES NOT HAVE a unit
    variance due to 68% of the intensity values being mapped to the real
    number range of -1.0 to 1.0 and then cast to the output integral
    value.

    See:   NormalizeToConstantImageFilter
    {Filtering/ImageIntensity/NormalizeImage,Normalize Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNormalizeImageFilterPython.itkNormalizeImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkNormalizeImageFilterPython.itkNormalizeImageFilterIF3IF3_Clone)
    __swig_destroy__ = _itkNormalizeImageFilterPython.delete_itkNormalizeImageFilterIF3IF3
    cast = _swig_new_static_method(_itkNormalizeImageFilterPython.itkNormalizeImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkNormalizeImageFilterIF3IF3

        Create a new object of the class itkNormalizeImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizeImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizeImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizeImageFilterIF3IF3 in _itkNormalizeImageFilterPython:
_itkNormalizeImageFilterPython.itkNormalizeImageFilterIF3IF3_swigregister(itkNormalizeImageFilterIF3IF3)
itkNormalizeImageFilterIF3IF3___New_orig__ = _itkNormalizeImageFilterPython.itkNormalizeImageFilterIF3IF3___New_orig__
itkNormalizeImageFilterIF3IF3_cast = _itkNormalizeImageFilterPython.itkNormalizeImageFilterIF3IF3_cast


def itkNormalizeImageFilterISS2ISS2_New():
    return itkNormalizeImageFilterISS2ISS2.New()

class itkNormalizeImageFilterISS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""


    Normalize an image by setting its mean to zero and variance to one.

    NormalizeImageFilter shifts and scales an image so that the pixels in
    the image have a zero mean and unit variance. This filter uses
    StatisticsImageFilter to compute the mean and variance of the input
    and then applies ShiftScaleImageFilter to shift and scale the pixels.

    NB: since this filter normalizes the data such that the mean is at 0,
    and $-\\sigma$ to $+\\sigma$ is mapped to -1.0 to 1.0, output
    image integral types will produce an image that DOES NOT HAVE a unit
    variance due to 68% of the intensity values being mapped to the real
    number range of -1.0 to 1.0 and then cast to the output integral
    value.

    See:   NormalizeToConstantImageFilter
    {Filtering/ImageIntensity/NormalizeImage,Normalize Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNormalizeImageFilterPython.itkNormalizeImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkNormalizeImageFilterPython.itkNormalizeImageFilterISS2ISS2_Clone)
    __swig_destroy__ = _itkNormalizeImageFilterPython.delete_itkNormalizeImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkNormalizeImageFilterPython.itkNormalizeImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkNormalizeImageFilterISS2ISS2

        Create a new object of the class itkNormalizeImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizeImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizeImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizeImageFilterISS2ISS2 in _itkNormalizeImageFilterPython:
_itkNormalizeImageFilterPython.itkNormalizeImageFilterISS2ISS2_swigregister(itkNormalizeImageFilterISS2ISS2)
itkNormalizeImageFilterISS2ISS2___New_orig__ = _itkNormalizeImageFilterPython.itkNormalizeImageFilterISS2ISS2___New_orig__
itkNormalizeImageFilterISS2ISS2_cast = _itkNormalizeImageFilterPython.itkNormalizeImageFilterISS2ISS2_cast


def itkNormalizeImageFilterISS3ISS3_New():
    return itkNormalizeImageFilterISS3ISS3.New()

class itkNormalizeImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""


    Normalize an image by setting its mean to zero and variance to one.

    NormalizeImageFilter shifts and scales an image so that the pixels in
    the image have a zero mean and unit variance. This filter uses
    StatisticsImageFilter to compute the mean and variance of the input
    and then applies ShiftScaleImageFilter to shift and scale the pixels.

    NB: since this filter normalizes the data such that the mean is at 0,
    and $-\\sigma$ to $+\\sigma$ is mapped to -1.0 to 1.0, output
    image integral types will produce an image that DOES NOT HAVE a unit
    variance due to 68% of the intensity values being mapped to the real
    number range of -1.0 to 1.0 and then cast to the output integral
    value.

    See:   NormalizeToConstantImageFilter
    {Filtering/ImageIntensity/NormalizeImage,Normalize Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNormalizeImageFilterPython.itkNormalizeImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkNormalizeImageFilterPython.itkNormalizeImageFilterISS3ISS3_Clone)
    __swig_destroy__ = _itkNormalizeImageFilterPython.delete_itkNormalizeImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkNormalizeImageFilterPython.itkNormalizeImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkNormalizeImageFilterISS3ISS3

        Create a new object of the class itkNormalizeImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizeImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizeImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizeImageFilterISS3ISS3 in _itkNormalizeImageFilterPython:
_itkNormalizeImageFilterPython.itkNormalizeImageFilterISS3ISS3_swigregister(itkNormalizeImageFilterISS3ISS3)
itkNormalizeImageFilterISS3ISS3___New_orig__ = _itkNormalizeImageFilterPython.itkNormalizeImageFilterISS3ISS3___New_orig__
itkNormalizeImageFilterISS3ISS3_cast = _itkNormalizeImageFilterPython.itkNormalizeImageFilterISS3ISS3_cast


def itkNormalizeImageFilterIUC2IUC2_New():
    return itkNormalizeImageFilterIUC2IUC2.New()

class itkNormalizeImageFilterIUC2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""


    Normalize an image by setting its mean to zero and variance to one.

    NormalizeImageFilter shifts and scales an image so that the pixels in
    the image have a zero mean and unit variance. This filter uses
    StatisticsImageFilter to compute the mean and variance of the input
    and then applies ShiftScaleImageFilter to shift and scale the pixels.

    NB: since this filter normalizes the data such that the mean is at 0,
    and $-\\sigma$ to $+\\sigma$ is mapped to -1.0 to 1.0, output
    image integral types will produce an image that DOES NOT HAVE a unit
    variance due to 68% of the intensity values being mapped to the real
    number range of -1.0 to 1.0 and then cast to the output integral
    value.

    See:   NormalizeToConstantImageFilter
    {Filtering/ImageIntensity/NormalizeImage,Normalize Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNormalizeImageFilterPython.itkNormalizeImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkNormalizeImageFilterPython.itkNormalizeImageFilterIUC2IUC2_Clone)
    __swig_destroy__ = _itkNormalizeImageFilterPython.delete_itkNormalizeImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkNormalizeImageFilterPython.itkNormalizeImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkNormalizeImageFilterIUC2IUC2

        Create a new object of the class itkNormalizeImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizeImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizeImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizeImageFilterIUC2IUC2 in _itkNormalizeImageFilterPython:
_itkNormalizeImageFilterPython.itkNormalizeImageFilterIUC2IUC2_swigregister(itkNormalizeImageFilterIUC2IUC2)
itkNormalizeImageFilterIUC2IUC2___New_orig__ = _itkNormalizeImageFilterPython.itkNormalizeImageFilterIUC2IUC2___New_orig__
itkNormalizeImageFilterIUC2IUC2_cast = _itkNormalizeImageFilterPython.itkNormalizeImageFilterIUC2IUC2_cast


def itkNormalizeImageFilterIUC3IUC3_New():
    return itkNormalizeImageFilterIUC3IUC3.New()

class itkNormalizeImageFilterIUC3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""


    Normalize an image by setting its mean to zero and variance to one.

    NormalizeImageFilter shifts and scales an image so that the pixels in
    the image have a zero mean and unit variance. This filter uses
    StatisticsImageFilter to compute the mean and variance of the input
    and then applies ShiftScaleImageFilter to shift and scale the pixels.

    NB: since this filter normalizes the data such that the mean is at 0,
    and $-\\sigma$ to $+\\sigma$ is mapped to -1.0 to 1.0, output
    image integral types will produce an image that DOES NOT HAVE a unit
    variance due to 68% of the intensity values being mapped to the real
    number range of -1.0 to 1.0 and then cast to the output integral
    value.

    See:   NormalizeToConstantImageFilter
    {Filtering/ImageIntensity/NormalizeImage,Normalize Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNormalizeImageFilterPython.itkNormalizeImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkNormalizeImageFilterPython.itkNormalizeImageFilterIUC3IUC3_Clone)
    __swig_destroy__ = _itkNormalizeImageFilterPython.delete_itkNormalizeImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkNormalizeImageFilterPython.itkNormalizeImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkNormalizeImageFilterIUC3IUC3

        Create a new object of the class itkNormalizeImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizeImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizeImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizeImageFilterIUC3IUC3 in _itkNormalizeImageFilterPython:
_itkNormalizeImageFilterPython.itkNormalizeImageFilterIUC3IUC3_swigregister(itkNormalizeImageFilterIUC3IUC3)
itkNormalizeImageFilterIUC3IUC3___New_orig__ = _itkNormalizeImageFilterPython.itkNormalizeImageFilterIUC3IUC3___New_orig__
itkNormalizeImageFilterIUC3IUC3_cast = _itkNormalizeImageFilterPython.itkNormalizeImageFilterIUC3IUC3_cast


def itkNormalizeImageFilterIUS2IUS2_New():
    return itkNormalizeImageFilterIUS2IUS2.New()

class itkNormalizeImageFilterIUS2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""


    Normalize an image by setting its mean to zero and variance to one.

    NormalizeImageFilter shifts and scales an image so that the pixels in
    the image have a zero mean and unit variance. This filter uses
    StatisticsImageFilter to compute the mean and variance of the input
    and then applies ShiftScaleImageFilter to shift and scale the pixels.

    NB: since this filter normalizes the data such that the mean is at 0,
    and $-\\sigma$ to $+\\sigma$ is mapped to -1.0 to 1.0, output
    image integral types will produce an image that DOES NOT HAVE a unit
    variance due to 68% of the intensity values being mapped to the real
    number range of -1.0 to 1.0 and then cast to the output integral
    value.

    See:   NormalizeToConstantImageFilter
    {Filtering/ImageIntensity/NormalizeImage,Normalize Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNormalizeImageFilterPython.itkNormalizeImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkNormalizeImageFilterPython.itkNormalizeImageFilterIUS2IUS2_Clone)
    __swig_destroy__ = _itkNormalizeImageFilterPython.delete_itkNormalizeImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkNormalizeImageFilterPython.itkNormalizeImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkNormalizeImageFilterIUS2IUS2

        Create a new object of the class itkNormalizeImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizeImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizeImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizeImageFilterIUS2IUS2 in _itkNormalizeImageFilterPython:
_itkNormalizeImageFilterPython.itkNormalizeImageFilterIUS2IUS2_swigregister(itkNormalizeImageFilterIUS2IUS2)
itkNormalizeImageFilterIUS2IUS2___New_orig__ = _itkNormalizeImageFilterPython.itkNormalizeImageFilterIUS2IUS2___New_orig__
itkNormalizeImageFilterIUS2IUS2_cast = _itkNormalizeImageFilterPython.itkNormalizeImageFilterIUS2IUS2_cast


def itkNormalizeImageFilterIUS3IUS3_New():
    return itkNormalizeImageFilterIUS3IUS3.New()

class itkNormalizeImageFilterIUS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""


    Normalize an image by setting its mean to zero and variance to one.

    NormalizeImageFilter shifts and scales an image so that the pixels in
    the image have a zero mean and unit variance. This filter uses
    StatisticsImageFilter to compute the mean and variance of the input
    and then applies ShiftScaleImageFilter to shift and scale the pixels.

    NB: since this filter normalizes the data such that the mean is at 0,
    and $-\\sigma$ to $+\\sigma$ is mapped to -1.0 to 1.0, output
    image integral types will produce an image that DOES NOT HAVE a unit
    variance due to 68% of the intensity values being mapped to the real
    number range of -1.0 to 1.0 and then cast to the output integral
    value.

    See:   NormalizeToConstantImageFilter
    {Filtering/ImageIntensity/NormalizeImage,Normalize Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNormalizeImageFilterPython.itkNormalizeImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkNormalizeImageFilterPython.itkNormalizeImageFilterIUS3IUS3_Clone)
    __swig_destroy__ = _itkNormalizeImageFilterPython.delete_itkNormalizeImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkNormalizeImageFilterPython.itkNormalizeImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkNormalizeImageFilterIUS3IUS3

        Create a new object of the class itkNormalizeImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizeImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizeImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizeImageFilterIUS3IUS3 in _itkNormalizeImageFilterPython:
_itkNormalizeImageFilterPython.itkNormalizeImageFilterIUS3IUS3_swigregister(itkNormalizeImageFilterIUS3IUS3)
itkNormalizeImageFilterIUS3IUS3___New_orig__ = _itkNormalizeImageFilterPython.itkNormalizeImageFilterIUS3IUS3___New_orig__
itkNormalizeImageFilterIUS3IUS3_cast = _itkNormalizeImageFilterPython.itkNormalizeImageFilterIUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def normalize_image_filter(*args, **kwargs):
    """Procedural interface for NormalizeImageFilter"""
    import itk
    instance = itk.NormalizeImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def normalize_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.NormalizeImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.NormalizeImageFilter.values()[0]
    else:
        filter_object = itk.NormalizeImageFilter

    normalize_image_filter.__doc__ = filter_object.__doc__
    normalize_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    normalize_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.NormalizeImageFilter, itkTemplate.itkTemplate):
        normalize_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        normalize_image_filter.__doc__ += "\n"
        normalize_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        normalize_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



