# coding: utf-8

"""
    ExaVault API

    See our API reference documentation at https://www.exavault.com/developer/api-docs/  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@exavault.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ShareRelationships(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'messages': 'list[ShareRelationshipsMessage]',
        'owner': 'ShareRelationshipsOwner',
        'resources': 'list[ShareRelationshipsResource]',
        'notifications': 'list[ShareRelationshipsNotification]'
    }

    attribute_map = {
        'messages': 'messages',
        'owner': 'owner',
        'resources': 'resources',
        'notifications': 'notifications'
    }

    def __init__(self, messages=None, owner=None, resources=None, notifications=None):  # noqa: E501
        """ShareRelationships - a model defined in Swagger"""  # noqa: E501
        self._messages = None
        self._owner = None
        self._resources = None
        self._notifications = None
        self.discriminator = None
        if messages is not None:
            self.messages = messages
        if owner is not None:
            self.owner = owner
        if resources is not None:
            self.resources = resources
        if notifications is not None:
            self.notifications = notifications

    @property
    def messages(self):
        """Gets the messages of this ShareRelationships.  # noqa: E501

        null  # noqa: E501

        :return: The messages of this ShareRelationships.  # noqa: E501
        :rtype: list[ShareRelationshipsMessage]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this ShareRelationships.

        null  # noqa: E501

        :param messages: The messages of this ShareRelationships.  # noqa: E501
        :type: list[ShareRelationshipsMessage]
        """

        self._messages = messages

    @property
    def owner(self):
        """Gets the owner of this ShareRelationships.  # noqa: E501


        :return: The owner of this ShareRelationships.  # noqa: E501
        :rtype: ShareRelationshipsOwner
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this ShareRelationships.


        :param owner: The owner of this ShareRelationships.  # noqa: E501
        :type: ShareRelationshipsOwner
        """

        self._owner = owner

    @property
    def resources(self):
        """Gets the resources of this ShareRelationships.  # noqa: E501


        :return: The resources of this ShareRelationships.  # noqa: E501
        :rtype: list[ShareRelationshipsResource]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this ShareRelationships.


        :param resources: The resources of this ShareRelationships.  # noqa: E501
        :type: list[ShareRelationshipsResource]
        """

        self._resources = resources

    @property
    def notifications(self):
        """Gets the notifications of this ShareRelationships.  # noqa: E501

        null  # noqa: E501

        :return: The notifications of this ShareRelationships.  # noqa: E501
        :rtype: list[ShareRelationshipsNotification]
        """
        return self._notifications

    @notifications.setter
    def notifications(self, notifications):
        """Sets the notifications of this ShareRelationships.

        null  # noqa: E501

        :param notifications: The notifications of this ShareRelationships.  # noqa: E501
        :type: list[ShareRelationshipsNotification]
        """

        self._notifications = notifications

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ShareRelationships, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShareRelationships):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
