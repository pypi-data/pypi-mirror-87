# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageFunctionPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkLinearInterpolateImageFunctionPython
else:
    import _itkLinearInterpolateImageFunctionPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkLinearInterpolateImageFunctionPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkLinearInterpolateImageFunctionPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkRGBAPixelPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkContinuousIndexPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkPointPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkCovariantVectorPython
import itk.itkRGBPixelPython
import itk.itkInterpolateImageFunctionPython
import itk.itkImageFunctionBasePython
import itk.itkFunctionBasePython
import itk.itkArrayPython
import itk.itkImagePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython

def itkLinearInterpolateImageFunctionICVF22D_New():
    return itkLinearInterpolateImageFunctionICVF22D.New()

class itkLinearInterpolateImageFunctionICVF22D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionICVF22D):
    r"""


    Linearly interpolate an image at specified positions.

    LinearInterpolateImageFunction linearly interpolates image intensity
    at a non-integer pixel position. This class is templated over the
    input image type and the coordinate representation type (e.g. float or
    double).

    This function works for N-dimensional images.

    This function works for images with scalar and vector pixel types, and
    for images of type VectorImage.

    See:  VectorLinearInterpolateImageFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionICVF22D___New_orig__)
    Clone = _swig_new_instance_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionICVF22D_Clone)
    __swig_destroy__ = _itkLinearInterpolateImageFunctionPython.delete_itkLinearInterpolateImageFunctionICVF22D
    cast = _swig_new_static_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionICVF22D_cast)

    def New(*args, **kargs):
        """New() -> itkLinearInterpolateImageFunctionICVF22D

        Create a new object of the class itkLinearInterpolateImageFunctionICVF22D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLinearInterpolateImageFunctionICVF22D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLinearInterpolateImageFunctionICVF22D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLinearInterpolateImageFunctionICVF22D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLinearInterpolateImageFunctionICVF22D in _itkLinearInterpolateImageFunctionPython:
_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionICVF22D_swigregister(itkLinearInterpolateImageFunctionICVF22D)
itkLinearInterpolateImageFunctionICVF22D___New_orig__ = _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionICVF22D___New_orig__
itkLinearInterpolateImageFunctionICVF22D_cast = _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionICVF22D_cast


def itkLinearInterpolateImageFunctionICVF33D_New():
    return itkLinearInterpolateImageFunctionICVF33D.New()

class itkLinearInterpolateImageFunctionICVF33D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionICVF33D):
    r"""


    Linearly interpolate an image at specified positions.

    LinearInterpolateImageFunction linearly interpolates image intensity
    at a non-integer pixel position. This class is templated over the
    input image type and the coordinate representation type (e.g. float or
    double).

    This function works for N-dimensional images.

    This function works for images with scalar and vector pixel types, and
    for images of type VectorImage.

    See:  VectorLinearInterpolateImageFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionICVF33D___New_orig__)
    Clone = _swig_new_instance_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionICVF33D_Clone)
    __swig_destroy__ = _itkLinearInterpolateImageFunctionPython.delete_itkLinearInterpolateImageFunctionICVF33D
    cast = _swig_new_static_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionICVF33D_cast)

    def New(*args, **kargs):
        """New() -> itkLinearInterpolateImageFunctionICVF33D

        Create a new object of the class itkLinearInterpolateImageFunctionICVF33D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLinearInterpolateImageFunctionICVF33D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLinearInterpolateImageFunctionICVF33D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLinearInterpolateImageFunctionICVF33D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLinearInterpolateImageFunctionICVF33D in _itkLinearInterpolateImageFunctionPython:
_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionICVF33D_swigregister(itkLinearInterpolateImageFunctionICVF33D)
itkLinearInterpolateImageFunctionICVF33D___New_orig__ = _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionICVF33D___New_orig__
itkLinearInterpolateImageFunctionICVF33D_cast = _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionICVF33D_cast


def itkLinearInterpolateImageFunctionID2D_New():
    return itkLinearInterpolateImageFunctionID2D.New()

class itkLinearInterpolateImageFunctionID2D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID2D):
    r"""


    Linearly interpolate an image at specified positions.

    LinearInterpolateImageFunction linearly interpolates image intensity
    at a non-integer pixel position. This class is templated over the
    input image type and the coordinate representation type (e.g. float or
    double).

    This function works for N-dimensional images.

    This function works for images with scalar and vector pixel types, and
    for images of type VectorImage.

    See:  VectorLinearInterpolateImageFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionID2D___New_orig__)
    Clone = _swig_new_instance_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionID2D_Clone)
    __swig_destroy__ = _itkLinearInterpolateImageFunctionPython.delete_itkLinearInterpolateImageFunctionID2D
    cast = _swig_new_static_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionID2D_cast)

    def New(*args, **kargs):
        """New() -> itkLinearInterpolateImageFunctionID2D

        Create a new object of the class itkLinearInterpolateImageFunctionID2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLinearInterpolateImageFunctionID2D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLinearInterpolateImageFunctionID2D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLinearInterpolateImageFunctionID2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLinearInterpolateImageFunctionID2D in _itkLinearInterpolateImageFunctionPython:
_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionID2D_swigregister(itkLinearInterpolateImageFunctionID2D)
itkLinearInterpolateImageFunctionID2D___New_orig__ = _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionID2D___New_orig__
itkLinearInterpolateImageFunctionID2D_cast = _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionID2D_cast


def itkLinearInterpolateImageFunctionID3D_New():
    return itkLinearInterpolateImageFunctionID3D.New()

class itkLinearInterpolateImageFunctionID3D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID3D):
    r"""


    Linearly interpolate an image at specified positions.

    LinearInterpolateImageFunction linearly interpolates image intensity
    at a non-integer pixel position. This class is templated over the
    input image type and the coordinate representation type (e.g. float or
    double).

    This function works for N-dimensional images.

    This function works for images with scalar and vector pixel types, and
    for images of type VectorImage.

    See:  VectorLinearInterpolateImageFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionID3D___New_orig__)
    Clone = _swig_new_instance_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionID3D_Clone)
    __swig_destroy__ = _itkLinearInterpolateImageFunctionPython.delete_itkLinearInterpolateImageFunctionID3D
    cast = _swig_new_static_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionID3D_cast)

    def New(*args, **kargs):
        """New() -> itkLinearInterpolateImageFunctionID3D

        Create a new object of the class itkLinearInterpolateImageFunctionID3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLinearInterpolateImageFunctionID3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLinearInterpolateImageFunctionID3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLinearInterpolateImageFunctionID3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLinearInterpolateImageFunctionID3D in _itkLinearInterpolateImageFunctionPython:
_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionID3D_swigregister(itkLinearInterpolateImageFunctionID3D)
itkLinearInterpolateImageFunctionID3D___New_orig__ = _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionID3D___New_orig__
itkLinearInterpolateImageFunctionID3D_cast = _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionID3D_cast


def itkLinearInterpolateImageFunctionIF2D_New():
    return itkLinearInterpolateImageFunctionIF2D.New()

class itkLinearInterpolateImageFunctionIF2D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF2D):
    r"""


    Linearly interpolate an image at specified positions.

    LinearInterpolateImageFunction linearly interpolates image intensity
    at a non-integer pixel position. This class is templated over the
    input image type and the coordinate representation type (e.g. float or
    double).

    This function works for N-dimensional images.

    This function works for images with scalar and vector pixel types, and
    for images of type VectorImage.

    See:  VectorLinearInterpolateImageFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIF2D___New_orig__)
    Clone = _swig_new_instance_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIF2D_Clone)
    __swig_destroy__ = _itkLinearInterpolateImageFunctionPython.delete_itkLinearInterpolateImageFunctionIF2D
    cast = _swig_new_static_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIF2D_cast)

    def New(*args, **kargs):
        """New() -> itkLinearInterpolateImageFunctionIF2D

        Create a new object of the class itkLinearInterpolateImageFunctionIF2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLinearInterpolateImageFunctionIF2D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLinearInterpolateImageFunctionIF2D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLinearInterpolateImageFunctionIF2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLinearInterpolateImageFunctionIF2D in _itkLinearInterpolateImageFunctionPython:
_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIF2D_swigregister(itkLinearInterpolateImageFunctionIF2D)
itkLinearInterpolateImageFunctionIF2D___New_orig__ = _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIF2D___New_orig__
itkLinearInterpolateImageFunctionIF2D_cast = _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIF2D_cast


def itkLinearInterpolateImageFunctionIF3D_New():
    return itkLinearInterpolateImageFunctionIF3D.New()

class itkLinearInterpolateImageFunctionIF3D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF3D):
    r"""


    Linearly interpolate an image at specified positions.

    LinearInterpolateImageFunction linearly interpolates image intensity
    at a non-integer pixel position. This class is templated over the
    input image type and the coordinate representation type (e.g. float or
    double).

    This function works for N-dimensional images.

    This function works for images with scalar and vector pixel types, and
    for images of type VectorImage.

    See:  VectorLinearInterpolateImageFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIF3D___New_orig__)
    Clone = _swig_new_instance_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIF3D_Clone)
    __swig_destroy__ = _itkLinearInterpolateImageFunctionPython.delete_itkLinearInterpolateImageFunctionIF3D
    cast = _swig_new_static_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIF3D_cast)

    def New(*args, **kargs):
        """New() -> itkLinearInterpolateImageFunctionIF3D

        Create a new object of the class itkLinearInterpolateImageFunctionIF3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLinearInterpolateImageFunctionIF3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLinearInterpolateImageFunctionIF3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLinearInterpolateImageFunctionIF3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLinearInterpolateImageFunctionIF3D in _itkLinearInterpolateImageFunctionPython:
_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIF3D_swigregister(itkLinearInterpolateImageFunctionIF3D)
itkLinearInterpolateImageFunctionIF3D___New_orig__ = _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIF3D___New_orig__
itkLinearInterpolateImageFunctionIF3D_cast = _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIF3D_cast


def itkLinearInterpolateImageFunctionIRGBAUC2D_New():
    return itkLinearInterpolateImageFunctionIRGBAUC2D.New()

class itkLinearInterpolateImageFunctionIRGBAUC2D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIRGBAUC2D):
    r"""


    Linearly interpolate an image at specified positions.

    LinearInterpolateImageFunction linearly interpolates image intensity
    at a non-integer pixel position. This class is templated over the
    input image type and the coordinate representation type (e.g. float or
    double).

    This function works for N-dimensional images.

    This function works for images with scalar and vector pixel types, and
    for images of type VectorImage.

    See:  VectorLinearInterpolateImageFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIRGBAUC2D___New_orig__)
    Clone = _swig_new_instance_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIRGBAUC2D_Clone)
    __swig_destroy__ = _itkLinearInterpolateImageFunctionPython.delete_itkLinearInterpolateImageFunctionIRGBAUC2D
    cast = _swig_new_static_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIRGBAUC2D_cast)

    def New(*args, **kargs):
        """New() -> itkLinearInterpolateImageFunctionIRGBAUC2D

        Create a new object of the class itkLinearInterpolateImageFunctionIRGBAUC2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLinearInterpolateImageFunctionIRGBAUC2D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLinearInterpolateImageFunctionIRGBAUC2D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLinearInterpolateImageFunctionIRGBAUC2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLinearInterpolateImageFunctionIRGBAUC2D in _itkLinearInterpolateImageFunctionPython:
_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIRGBAUC2D_swigregister(itkLinearInterpolateImageFunctionIRGBAUC2D)
itkLinearInterpolateImageFunctionIRGBAUC2D___New_orig__ = _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIRGBAUC2D___New_orig__
itkLinearInterpolateImageFunctionIRGBAUC2D_cast = _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIRGBAUC2D_cast


def itkLinearInterpolateImageFunctionIRGBAUC3D_New():
    return itkLinearInterpolateImageFunctionIRGBAUC3D.New()

class itkLinearInterpolateImageFunctionIRGBAUC3D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIRGBAUC3D):
    r"""


    Linearly interpolate an image at specified positions.

    LinearInterpolateImageFunction linearly interpolates image intensity
    at a non-integer pixel position. This class is templated over the
    input image type and the coordinate representation type (e.g. float or
    double).

    This function works for N-dimensional images.

    This function works for images with scalar and vector pixel types, and
    for images of type VectorImage.

    See:  VectorLinearInterpolateImageFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIRGBAUC3D___New_orig__)
    Clone = _swig_new_instance_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIRGBAUC3D_Clone)
    __swig_destroy__ = _itkLinearInterpolateImageFunctionPython.delete_itkLinearInterpolateImageFunctionIRGBAUC3D
    cast = _swig_new_static_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIRGBAUC3D_cast)

    def New(*args, **kargs):
        """New() -> itkLinearInterpolateImageFunctionIRGBAUC3D

        Create a new object of the class itkLinearInterpolateImageFunctionIRGBAUC3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLinearInterpolateImageFunctionIRGBAUC3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLinearInterpolateImageFunctionIRGBAUC3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLinearInterpolateImageFunctionIRGBAUC3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLinearInterpolateImageFunctionIRGBAUC3D in _itkLinearInterpolateImageFunctionPython:
_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIRGBAUC3D_swigregister(itkLinearInterpolateImageFunctionIRGBAUC3D)
itkLinearInterpolateImageFunctionIRGBAUC3D___New_orig__ = _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIRGBAUC3D___New_orig__
itkLinearInterpolateImageFunctionIRGBAUC3D_cast = _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIRGBAUC3D_cast


def itkLinearInterpolateImageFunctionIRGBUC2D_New():
    return itkLinearInterpolateImageFunctionIRGBUC2D.New()

class itkLinearInterpolateImageFunctionIRGBUC2D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIRGBUC2D):
    r"""


    Linearly interpolate an image at specified positions.

    LinearInterpolateImageFunction linearly interpolates image intensity
    at a non-integer pixel position. This class is templated over the
    input image type and the coordinate representation type (e.g. float or
    double).

    This function works for N-dimensional images.

    This function works for images with scalar and vector pixel types, and
    for images of type VectorImage.

    See:  VectorLinearInterpolateImageFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIRGBUC2D___New_orig__)
    Clone = _swig_new_instance_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIRGBUC2D_Clone)
    __swig_destroy__ = _itkLinearInterpolateImageFunctionPython.delete_itkLinearInterpolateImageFunctionIRGBUC2D
    cast = _swig_new_static_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIRGBUC2D_cast)

    def New(*args, **kargs):
        """New() -> itkLinearInterpolateImageFunctionIRGBUC2D

        Create a new object of the class itkLinearInterpolateImageFunctionIRGBUC2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLinearInterpolateImageFunctionIRGBUC2D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLinearInterpolateImageFunctionIRGBUC2D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLinearInterpolateImageFunctionIRGBUC2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLinearInterpolateImageFunctionIRGBUC2D in _itkLinearInterpolateImageFunctionPython:
_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIRGBUC2D_swigregister(itkLinearInterpolateImageFunctionIRGBUC2D)
itkLinearInterpolateImageFunctionIRGBUC2D___New_orig__ = _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIRGBUC2D___New_orig__
itkLinearInterpolateImageFunctionIRGBUC2D_cast = _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIRGBUC2D_cast


def itkLinearInterpolateImageFunctionIRGBUC3D_New():
    return itkLinearInterpolateImageFunctionIRGBUC3D.New()

class itkLinearInterpolateImageFunctionIRGBUC3D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIRGBUC3D):
    r"""


    Linearly interpolate an image at specified positions.

    LinearInterpolateImageFunction linearly interpolates image intensity
    at a non-integer pixel position. This class is templated over the
    input image type and the coordinate representation type (e.g. float or
    double).

    This function works for N-dimensional images.

    This function works for images with scalar and vector pixel types, and
    for images of type VectorImage.

    See:  VectorLinearInterpolateImageFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIRGBUC3D___New_orig__)
    Clone = _swig_new_instance_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIRGBUC3D_Clone)
    __swig_destroy__ = _itkLinearInterpolateImageFunctionPython.delete_itkLinearInterpolateImageFunctionIRGBUC3D
    cast = _swig_new_static_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIRGBUC3D_cast)

    def New(*args, **kargs):
        """New() -> itkLinearInterpolateImageFunctionIRGBUC3D

        Create a new object of the class itkLinearInterpolateImageFunctionIRGBUC3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLinearInterpolateImageFunctionIRGBUC3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLinearInterpolateImageFunctionIRGBUC3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLinearInterpolateImageFunctionIRGBUC3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLinearInterpolateImageFunctionIRGBUC3D in _itkLinearInterpolateImageFunctionPython:
_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIRGBUC3D_swigregister(itkLinearInterpolateImageFunctionIRGBUC3D)
itkLinearInterpolateImageFunctionIRGBUC3D___New_orig__ = _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIRGBUC3D___New_orig__
itkLinearInterpolateImageFunctionIRGBUC3D_cast = _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIRGBUC3D_cast


def itkLinearInterpolateImageFunctionISS2D_New():
    return itkLinearInterpolateImageFunctionISS2D.New()

class itkLinearInterpolateImageFunctionISS2D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS2D):
    r"""


    Linearly interpolate an image at specified positions.

    LinearInterpolateImageFunction linearly interpolates image intensity
    at a non-integer pixel position. This class is templated over the
    input image type and the coordinate representation type (e.g. float or
    double).

    This function works for N-dimensional images.

    This function works for images with scalar and vector pixel types, and
    for images of type VectorImage.

    See:  VectorLinearInterpolateImageFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionISS2D___New_orig__)
    Clone = _swig_new_instance_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionISS2D_Clone)
    __swig_destroy__ = _itkLinearInterpolateImageFunctionPython.delete_itkLinearInterpolateImageFunctionISS2D
    cast = _swig_new_static_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionISS2D_cast)

    def New(*args, **kargs):
        """New() -> itkLinearInterpolateImageFunctionISS2D

        Create a new object of the class itkLinearInterpolateImageFunctionISS2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLinearInterpolateImageFunctionISS2D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLinearInterpolateImageFunctionISS2D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLinearInterpolateImageFunctionISS2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLinearInterpolateImageFunctionISS2D in _itkLinearInterpolateImageFunctionPython:
_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionISS2D_swigregister(itkLinearInterpolateImageFunctionISS2D)
itkLinearInterpolateImageFunctionISS2D___New_orig__ = _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionISS2D___New_orig__
itkLinearInterpolateImageFunctionISS2D_cast = _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionISS2D_cast


def itkLinearInterpolateImageFunctionISS3D_New():
    return itkLinearInterpolateImageFunctionISS3D.New()

class itkLinearInterpolateImageFunctionISS3D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS3D):
    r"""


    Linearly interpolate an image at specified positions.

    LinearInterpolateImageFunction linearly interpolates image intensity
    at a non-integer pixel position. This class is templated over the
    input image type and the coordinate representation type (e.g. float or
    double).

    This function works for N-dimensional images.

    This function works for images with scalar and vector pixel types, and
    for images of type VectorImage.

    See:  VectorLinearInterpolateImageFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionISS3D___New_orig__)
    Clone = _swig_new_instance_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionISS3D_Clone)
    __swig_destroy__ = _itkLinearInterpolateImageFunctionPython.delete_itkLinearInterpolateImageFunctionISS3D
    cast = _swig_new_static_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionISS3D_cast)

    def New(*args, **kargs):
        """New() -> itkLinearInterpolateImageFunctionISS3D

        Create a new object of the class itkLinearInterpolateImageFunctionISS3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLinearInterpolateImageFunctionISS3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLinearInterpolateImageFunctionISS3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLinearInterpolateImageFunctionISS3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLinearInterpolateImageFunctionISS3D in _itkLinearInterpolateImageFunctionPython:
_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionISS3D_swigregister(itkLinearInterpolateImageFunctionISS3D)
itkLinearInterpolateImageFunctionISS3D___New_orig__ = _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionISS3D___New_orig__
itkLinearInterpolateImageFunctionISS3D_cast = _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionISS3D_cast


def itkLinearInterpolateImageFunctionIUC2D_New():
    return itkLinearInterpolateImageFunctionIUC2D.New()

class itkLinearInterpolateImageFunctionIUC2D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC2D):
    r"""


    Linearly interpolate an image at specified positions.

    LinearInterpolateImageFunction linearly interpolates image intensity
    at a non-integer pixel position. This class is templated over the
    input image type and the coordinate representation type (e.g. float or
    double).

    This function works for N-dimensional images.

    This function works for images with scalar and vector pixel types, and
    for images of type VectorImage.

    See:  VectorLinearInterpolateImageFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIUC2D___New_orig__)
    Clone = _swig_new_instance_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIUC2D_Clone)
    __swig_destroy__ = _itkLinearInterpolateImageFunctionPython.delete_itkLinearInterpolateImageFunctionIUC2D
    cast = _swig_new_static_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIUC2D_cast)

    def New(*args, **kargs):
        """New() -> itkLinearInterpolateImageFunctionIUC2D

        Create a new object of the class itkLinearInterpolateImageFunctionIUC2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLinearInterpolateImageFunctionIUC2D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLinearInterpolateImageFunctionIUC2D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLinearInterpolateImageFunctionIUC2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLinearInterpolateImageFunctionIUC2D in _itkLinearInterpolateImageFunctionPython:
_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIUC2D_swigregister(itkLinearInterpolateImageFunctionIUC2D)
itkLinearInterpolateImageFunctionIUC2D___New_orig__ = _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIUC2D___New_orig__
itkLinearInterpolateImageFunctionIUC2D_cast = _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIUC2D_cast


def itkLinearInterpolateImageFunctionIUC3D_New():
    return itkLinearInterpolateImageFunctionIUC3D.New()

class itkLinearInterpolateImageFunctionIUC3D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC3D):
    r"""


    Linearly interpolate an image at specified positions.

    LinearInterpolateImageFunction linearly interpolates image intensity
    at a non-integer pixel position. This class is templated over the
    input image type and the coordinate representation type (e.g. float or
    double).

    This function works for N-dimensional images.

    This function works for images with scalar and vector pixel types, and
    for images of type VectorImage.

    See:  VectorLinearInterpolateImageFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIUC3D___New_orig__)
    Clone = _swig_new_instance_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIUC3D_Clone)
    __swig_destroy__ = _itkLinearInterpolateImageFunctionPython.delete_itkLinearInterpolateImageFunctionIUC3D
    cast = _swig_new_static_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIUC3D_cast)

    def New(*args, **kargs):
        """New() -> itkLinearInterpolateImageFunctionIUC3D

        Create a new object of the class itkLinearInterpolateImageFunctionIUC3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLinearInterpolateImageFunctionIUC3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLinearInterpolateImageFunctionIUC3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLinearInterpolateImageFunctionIUC3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLinearInterpolateImageFunctionIUC3D in _itkLinearInterpolateImageFunctionPython:
_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIUC3D_swigregister(itkLinearInterpolateImageFunctionIUC3D)
itkLinearInterpolateImageFunctionIUC3D___New_orig__ = _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIUC3D___New_orig__
itkLinearInterpolateImageFunctionIUC3D_cast = _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIUC3D_cast


def itkLinearInterpolateImageFunctionIUS2D_New():
    return itkLinearInterpolateImageFunctionIUS2D.New()

class itkLinearInterpolateImageFunctionIUS2D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS2D):
    r"""


    Linearly interpolate an image at specified positions.

    LinearInterpolateImageFunction linearly interpolates image intensity
    at a non-integer pixel position. This class is templated over the
    input image type and the coordinate representation type (e.g. float or
    double).

    This function works for N-dimensional images.

    This function works for images with scalar and vector pixel types, and
    for images of type VectorImage.

    See:  VectorLinearInterpolateImageFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIUS2D___New_orig__)
    Clone = _swig_new_instance_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIUS2D_Clone)
    __swig_destroy__ = _itkLinearInterpolateImageFunctionPython.delete_itkLinearInterpolateImageFunctionIUS2D
    cast = _swig_new_static_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIUS2D_cast)

    def New(*args, **kargs):
        """New() -> itkLinearInterpolateImageFunctionIUS2D

        Create a new object of the class itkLinearInterpolateImageFunctionIUS2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLinearInterpolateImageFunctionIUS2D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLinearInterpolateImageFunctionIUS2D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLinearInterpolateImageFunctionIUS2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLinearInterpolateImageFunctionIUS2D in _itkLinearInterpolateImageFunctionPython:
_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIUS2D_swigregister(itkLinearInterpolateImageFunctionIUS2D)
itkLinearInterpolateImageFunctionIUS2D___New_orig__ = _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIUS2D___New_orig__
itkLinearInterpolateImageFunctionIUS2D_cast = _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIUS2D_cast


def itkLinearInterpolateImageFunctionIUS3D_New():
    return itkLinearInterpolateImageFunctionIUS3D.New()

class itkLinearInterpolateImageFunctionIUS3D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS3D):
    r"""


    Linearly interpolate an image at specified positions.

    LinearInterpolateImageFunction linearly interpolates image intensity
    at a non-integer pixel position. This class is templated over the
    input image type and the coordinate representation type (e.g. float or
    double).

    This function works for N-dimensional images.

    This function works for images with scalar and vector pixel types, and
    for images of type VectorImage.

    See:  VectorLinearInterpolateImageFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIUS3D___New_orig__)
    Clone = _swig_new_instance_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIUS3D_Clone)
    __swig_destroy__ = _itkLinearInterpolateImageFunctionPython.delete_itkLinearInterpolateImageFunctionIUS3D
    cast = _swig_new_static_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIUS3D_cast)

    def New(*args, **kargs):
        """New() -> itkLinearInterpolateImageFunctionIUS3D

        Create a new object of the class itkLinearInterpolateImageFunctionIUS3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLinearInterpolateImageFunctionIUS3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLinearInterpolateImageFunctionIUS3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLinearInterpolateImageFunctionIUS3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLinearInterpolateImageFunctionIUS3D in _itkLinearInterpolateImageFunctionPython:
_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIUS3D_swigregister(itkLinearInterpolateImageFunctionIUS3D)
itkLinearInterpolateImageFunctionIUS3D___New_orig__ = _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIUS3D___New_orig__
itkLinearInterpolateImageFunctionIUS3D_cast = _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIUS3D_cast


def itkLinearInterpolateImageFunctionIVF22D_New():
    return itkLinearInterpolateImageFunctionIVF22D.New()

class itkLinearInterpolateImageFunctionIVF22D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIVF22D):
    r"""


    Linearly interpolate an image at specified positions.

    LinearInterpolateImageFunction linearly interpolates image intensity
    at a non-integer pixel position. This class is templated over the
    input image type and the coordinate representation type (e.g. float or
    double).

    This function works for N-dimensional images.

    This function works for images with scalar and vector pixel types, and
    for images of type VectorImage.

    See:  VectorLinearInterpolateImageFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIVF22D___New_orig__)
    Clone = _swig_new_instance_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIVF22D_Clone)
    __swig_destroy__ = _itkLinearInterpolateImageFunctionPython.delete_itkLinearInterpolateImageFunctionIVF22D
    cast = _swig_new_static_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIVF22D_cast)

    def New(*args, **kargs):
        """New() -> itkLinearInterpolateImageFunctionIVF22D

        Create a new object of the class itkLinearInterpolateImageFunctionIVF22D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLinearInterpolateImageFunctionIVF22D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLinearInterpolateImageFunctionIVF22D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLinearInterpolateImageFunctionIVF22D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLinearInterpolateImageFunctionIVF22D in _itkLinearInterpolateImageFunctionPython:
_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIVF22D_swigregister(itkLinearInterpolateImageFunctionIVF22D)
itkLinearInterpolateImageFunctionIVF22D___New_orig__ = _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIVF22D___New_orig__
itkLinearInterpolateImageFunctionIVF22D_cast = _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIVF22D_cast


def itkLinearInterpolateImageFunctionIVF33D_New():
    return itkLinearInterpolateImageFunctionIVF33D.New()

class itkLinearInterpolateImageFunctionIVF33D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIVF33D):
    r"""


    Linearly interpolate an image at specified positions.

    LinearInterpolateImageFunction linearly interpolates image intensity
    at a non-integer pixel position. This class is templated over the
    input image type and the coordinate representation type (e.g. float or
    double).

    This function works for N-dimensional images.

    This function works for images with scalar and vector pixel types, and
    for images of type VectorImage.

    See:  VectorLinearInterpolateImageFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIVF33D___New_orig__)
    Clone = _swig_new_instance_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIVF33D_Clone)
    __swig_destroy__ = _itkLinearInterpolateImageFunctionPython.delete_itkLinearInterpolateImageFunctionIVF33D
    cast = _swig_new_static_method(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIVF33D_cast)

    def New(*args, **kargs):
        """New() -> itkLinearInterpolateImageFunctionIVF33D

        Create a new object of the class itkLinearInterpolateImageFunctionIVF33D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLinearInterpolateImageFunctionIVF33D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLinearInterpolateImageFunctionIVF33D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLinearInterpolateImageFunctionIVF33D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLinearInterpolateImageFunctionIVF33D in _itkLinearInterpolateImageFunctionPython:
_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIVF33D_swigregister(itkLinearInterpolateImageFunctionIVF33D)
itkLinearInterpolateImageFunctionIVF33D___New_orig__ = _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIVF33D___New_orig__
itkLinearInterpolateImageFunctionIVF33D_cast = _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIVF33D_cast



