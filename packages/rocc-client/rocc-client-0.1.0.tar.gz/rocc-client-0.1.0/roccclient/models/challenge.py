# coding: utf-8

"""
    Registry of Open Community Challenge API

    The OpenAPI specification implemented by the Challenge Registries. # Introduction TBA   # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Contact: thomas.schaffter@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from roccclient.configuration import Configuration


class Challenge(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'start_date': 'date',
        'end_date': 'date',
        'website': 'str',
        'status': 'str',
        'tags': 'list[str]',
        'grant': 'list[Grant]',
        'organizers': 'list[Person]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'start_date': 'startDate',
        'end_date': 'endDate',
        'website': 'website',
        'status': 'status',
        'tags': 'tags',
        'grant': 'grant',
        'organizers': 'organizers'
    }

    def __init__(self, id=None, name=None, start_date=None, end_date=None, website=None, status=None, tags=None, grant=None, organizers=None, local_vars_configuration=None):  # noqa: E501
        """Challenge - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._start_date = None
        self._end_date = None
        self._website = None
        self._status = None
        self._tags = None
        self._grant = None
        self._organizers = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        self.start_date = start_date
        self.end_date = end_date
        if website is not None:
            self.website = website
        self.status = status
        if tags is not None:
            self.tags = tags
        if grant is not None:
            self.grant = grant
        if organizers is not None:
            self.organizers = organizers

    @property
    def id(self):
        """Gets the id of this Challenge.  # noqa: E501

        The ID of the challenge  # noqa: E501

        :return: The id of this Challenge.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Challenge.

        The ID of the challenge  # noqa: E501

        :param id: The id of this Challenge.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Challenge.  # noqa: E501

        The challenge name  # noqa: E501

        :return: The name of this Challenge.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Challenge.

        The challenge name  # noqa: E501

        :param name: The name of this Challenge.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def start_date(self):
        """Gets the start_date of this Challenge.  # noqa: E501

        When the challenge started  # noqa: E501

        :return: The start_date of this Challenge.  # noqa: E501
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Challenge.

        When the challenge started  # noqa: E501

        :param start_date: The start_date of this Challenge.  # noqa: E501
        :type start_date: date
        """
        if self.local_vars_configuration.client_side_validation and start_date is None:  # noqa: E501
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this Challenge.  # noqa: E501

        When the challenge ended  # noqa: E501

        :return: The end_date of this Challenge.  # noqa: E501
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this Challenge.

        When the challenge ended  # noqa: E501

        :param end_date: The end_date of this Challenge.  # noqa: E501
        :type end_date: date
        """
        if self.local_vars_configuration.client_side_validation and end_date is None:  # noqa: E501
            raise ValueError("Invalid value for `end_date`, must not be `None`")  # noqa: E501

        self._end_date = end_date

    @property
    def website(self):
        """Gets the website of this Challenge.  # noqa: E501

        The URL to the challenge website  # noqa: E501

        :return: The website of this Challenge.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this Challenge.

        The URL to the challenge website  # noqa: E501

        :param website: The website of this Challenge.  # noqa: E501
        :type website: str
        """

        self._website = website

    @property
    def status(self):
        """Gets the status of this Challenge.  # noqa: E501

        The status of challenge  # noqa: E501

        :return: The status of this Challenge.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Challenge.

        The status of challenge  # noqa: E501

        :param status: The status of this Challenge.  # noqa: E501
        :type status: str
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["upcoming", "open", "closed"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this Challenge.  # noqa: E501

        The tags associated to the challenge  # noqa: E501

        :return: The tags of this Challenge.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Challenge.

        The tags associated to the challenge  # noqa: E501

        :param tags: The tags of this Challenge.  # noqa: E501
        :type tags: list[str]
        """

        self._tags = tags

    @property
    def grant(self):
        """Gets the grant of this Challenge.  # noqa: E501

        The grants supporting this challenge  # noqa: E501

        :return: The grant of this Challenge.  # noqa: E501
        :rtype: list[Grant]
        """
        return self._grant

    @grant.setter
    def grant(self, grant):
        """Sets the grant of this Challenge.

        The grants supporting this challenge  # noqa: E501

        :param grant: The grant of this Challenge.  # noqa: E501
        :type grant: list[Grant]
        """

        self._grant = grant

    @property
    def organizers(self):
        """Gets the organizers of this Challenge.  # noqa: E501

        The organizers of the challenge  # noqa: E501

        :return: The organizers of this Challenge.  # noqa: E501
        :rtype: list[Person]
        """
        return self._organizers

    @organizers.setter
    def organizers(self, organizers):
        """Sets the organizers of this Challenge.

        The organizers of the challenge  # noqa: E501

        :param organizers: The organizers of this Challenge.  # noqa: E501
        :type organizers: list[Person]
        """

        self._organizers = organizers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Challenge):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Challenge):
            return True

        return self.to_dict() != other.to_dict()
