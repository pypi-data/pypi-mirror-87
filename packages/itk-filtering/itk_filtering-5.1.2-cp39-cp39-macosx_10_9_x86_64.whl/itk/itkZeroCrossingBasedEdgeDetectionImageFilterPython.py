# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageFeaturePython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkZeroCrossingBasedEdgeDetectionImageFilterPython
else:
    import _itkZeroCrossingBasedEdgeDetectionImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImageToImageFilterAPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkImagePython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.pyBasePython
import itk.stdcomplexPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.vnl_vectorPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkPointPython
import itk.itkRGBPixelPython
import itk.itkIndexPython
import itk.ITKCommonBasePython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython

def itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_New():
    return itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2.New()

class itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""


    This filter implements a zero-crossing based edge detecor.

    The zero-crossing based edge detector looks for pixels in the
    Laplacian of an image where the value of the Laplacian passes through
    zero points where the Laplacian changes sign. Such points often occur
    at "edges" in images i.e. points where the intensity of the image
    changes rapidly, but they also occur at places that are not as easy to
    associate with edges. It is best to think of the zero crossing
    detector as some sort of feature detector rather than as a specific
    edge detector.

    Zero crossings always lie on closed contours and so the output from
    the zero crossing detector is usually a binary image with single pixel
    thickness lines showing the positions of the zero crossing points.

    In this implementation, the input image is first smoothed with a
    Gaussian filter, then the LaplacianImageFilter is applied to smoothed
    image. Finally the zero-crossing of the Laplacian of the smoothed
    image is detected. The output is a binary image. Inputs and Outputs
    The input to the filter should be a scalar, itk::Image of arbitrary
    dimension. The output image is a binary, labeled image. See
    itkZeroCrossingImageFilter for more information on requirements of the
    data type of the output.

    To use this filter, first set the parameters (variance and maximum
    error) needed by the embedded DiscreteGaussianImageFilter, i.e. See
    DiscreteGaussianImageFilter for information about these parameters.
    Optionally, you may also set foreground and background values for the
    zero-crossing filter. The default label values are Zero for the
    background and One for the foreground, as defined in NumericTraits for
    the data type of the output image.

    See:  DiscreteGaussianImageFilter

    See:   LaplacianImageFilter

    See:   ZeroCrossingImageFilter
    example{Filtering/ImageFeature/ZeroCrossingBasedEdgeDecor,Zero-
    crossing Based Edge Decor} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_Clone)
    GetVariance = _swig_new_instance_method(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_GetVariance)
    GetMaximumError = _swig_new_instance_method(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_GetMaximumError)
    GetBackgroundValue = _swig_new_instance_method(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_GetBackgroundValue)
    SetBackgroundValue = _swig_new_instance_method(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_SetBackgroundValue)
    GetForegroundValue = _swig_new_instance_method(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_GetForegroundValue)
    SetForegroundValue = _swig_new_instance_method(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_SetForegroundValue)
    SetVariance = _swig_new_instance_method(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_SetVariance)
    SetMaximumError = _swig_new_instance_method(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_SetMaximumError)
    OutputEqualityComparableCheck = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_OutputEqualityComparableCheck
    
    SameDimensionCheck = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_SameDimensionCheck
    
    SameTypeCheck = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_SameTypeCheck
    
    OutputOStreamWritableCheck = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_OutputOStreamWritableCheck
    
    PixelTypeIsFloatingPointCheck = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_PixelTypeIsFloatingPointCheck
    
    __swig_destroy__ = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.delete_itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2
    cast = _swig_new_static_method(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2

        Create a new object of the class itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2 in _itkZeroCrossingBasedEdgeDetectionImageFilterPython:
_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_swigregister(itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2)
itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2___New_orig__ = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2___New_orig__
itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_cast = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_cast


def itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_New():
    return itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3.New()

class itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""


    This filter implements a zero-crossing based edge detecor.

    The zero-crossing based edge detector looks for pixels in the
    Laplacian of an image where the value of the Laplacian passes through
    zero points where the Laplacian changes sign. Such points often occur
    at "edges" in images i.e. points where the intensity of the image
    changes rapidly, but they also occur at places that are not as easy to
    associate with edges. It is best to think of the zero crossing
    detector as some sort of feature detector rather than as a specific
    edge detector.

    Zero crossings always lie on closed contours and so the output from
    the zero crossing detector is usually a binary image with single pixel
    thickness lines showing the positions of the zero crossing points.

    In this implementation, the input image is first smoothed with a
    Gaussian filter, then the LaplacianImageFilter is applied to smoothed
    image. Finally the zero-crossing of the Laplacian of the smoothed
    image is detected. The output is a binary image. Inputs and Outputs
    The input to the filter should be a scalar, itk::Image of arbitrary
    dimension. The output image is a binary, labeled image. See
    itkZeroCrossingImageFilter for more information on requirements of the
    data type of the output.

    To use this filter, first set the parameters (variance and maximum
    error) needed by the embedded DiscreteGaussianImageFilter, i.e. See
    DiscreteGaussianImageFilter for information about these parameters.
    Optionally, you may also set foreground and background values for the
    zero-crossing filter. The default label values are Zero for the
    background and One for the foreground, as defined in NumericTraits for
    the data type of the output image.

    See:  DiscreteGaussianImageFilter

    See:   LaplacianImageFilter

    See:   ZeroCrossingImageFilter
    example{Filtering/ImageFeature/ZeroCrossingBasedEdgeDecor,Zero-
    crossing Based Edge Decor} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_Clone)
    GetVariance = _swig_new_instance_method(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_GetVariance)
    GetMaximumError = _swig_new_instance_method(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_GetMaximumError)
    GetBackgroundValue = _swig_new_instance_method(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_GetBackgroundValue)
    SetBackgroundValue = _swig_new_instance_method(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_SetBackgroundValue)
    GetForegroundValue = _swig_new_instance_method(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_GetForegroundValue)
    SetForegroundValue = _swig_new_instance_method(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_SetForegroundValue)
    SetVariance = _swig_new_instance_method(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_SetVariance)
    SetMaximumError = _swig_new_instance_method(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_SetMaximumError)
    OutputEqualityComparableCheck = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_OutputEqualityComparableCheck
    
    SameDimensionCheck = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_SameDimensionCheck
    
    SameTypeCheck = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_SameTypeCheck
    
    OutputOStreamWritableCheck = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_OutputOStreamWritableCheck
    
    PixelTypeIsFloatingPointCheck = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_PixelTypeIsFloatingPointCheck
    
    __swig_destroy__ = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.delete_itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3
    cast = _swig_new_static_method(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3

        Create a new object of the class itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3 in _itkZeroCrossingBasedEdgeDetectionImageFilterPython:
_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_swigregister(itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3)
itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3___New_orig__ = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3___New_orig__
itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_cast = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_cast


def itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_New():
    return itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2.New()

class itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""


    This filter implements a zero-crossing based edge detecor.

    The zero-crossing based edge detector looks for pixels in the
    Laplacian of an image where the value of the Laplacian passes through
    zero points where the Laplacian changes sign. Such points often occur
    at "edges" in images i.e. points where the intensity of the image
    changes rapidly, but they also occur at places that are not as easy to
    associate with edges. It is best to think of the zero crossing
    detector as some sort of feature detector rather than as a specific
    edge detector.

    Zero crossings always lie on closed contours and so the output from
    the zero crossing detector is usually a binary image with single pixel
    thickness lines showing the positions of the zero crossing points.

    In this implementation, the input image is first smoothed with a
    Gaussian filter, then the LaplacianImageFilter is applied to smoothed
    image. Finally the zero-crossing of the Laplacian of the smoothed
    image is detected. The output is a binary image. Inputs and Outputs
    The input to the filter should be a scalar, itk::Image of arbitrary
    dimension. The output image is a binary, labeled image. See
    itkZeroCrossingImageFilter for more information on requirements of the
    data type of the output.

    To use this filter, first set the parameters (variance and maximum
    error) needed by the embedded DiscreteGaussianImageFilter, i.e. See
    DiscreteGaussianImageFilter for information about these parameters.
    Optionally, you may also set foreground and background values for the
    zero-crossing filter. The default label values are Zero for the
    background and One for the foreground, as defined in NumericTraits for
    the data type of the output image.

    See:  DiscreteGaussianImageFilter

    See:   LaplacianImageFilter

    See:   ZeroCrossingImageFilter
    example{Filtering/ImageFeature/ZeroCrossingBasedEdgeDecor,Zero-
    crossing Based Edge Decor} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_Clone)
    GetVariance = _swig_new_instance_method(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_GetVariance)
    GetMaximumError = _swig_new_instance_method(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_GetMaximumError)
    GetBackgroundValue = _swig_new_instance_method(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_GetBackgroundValue)
    SetBackgroundValue = _swig_new_instance_method(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_SetBackgroundValue)
    GetForegroundValue = _swig_new_instance_method(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_GetForegroundValue)
    SetForegroundValue = _swig_new_instance_method(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_SetForegroundValue)
    SetVariance = _swig_new_instance_method(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_SetVariance)
    SetMaximumError = _swig_new_instance_method(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_SetMaximumError)
    OutputEqualityComparableCheck = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_OutputEqualityComparableCheck
    
    SameDimensionCheck = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_SameDimensionCheck
    
    SameTypeCheck = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_SameTypeCheck
    
    OutputOStreamWritableCheck = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_OutputOStreamWritableCheck
    
    PixelTypeIsFloatingPointCheck = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_PixelTypeIsFloatingPointCheck
    
    __swig_destroy__ = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.delete_itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2
    cast = _swig_new_static_method(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2

        Create a new object of the class itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2 in _itkZeroCrossingBasedEdgeDetectionImageFilterPython:
_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_swigregister(itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2)
itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2___New_orig__ = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2___New_orig__
itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_cast = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_cast


def itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_New():
    return itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3.New()

class itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""


    This filter implements a zero-crossing based edge detecor.

    The zero-crossing based edge detector looks for pixels in the
    Laplacian of an image where the value of the Laplacian passes through
    zero points where the Laplacian changes sign. Such points often occur
    at "edges" in images i.e. points where the intensity of the image
    changes rapidly, but they also occur at places that are not as easy to
    associate with edges. It is best to think of the zero crossing
    detector as some sort of feature detector rather than as a specific
    edge detector.

    Zero crossings always lie on closed contours and so the output from
    the zero crossing detector is usually a binary image with single pixel
    thickness lines showing the positions of the zero crossing points.

    In this implementation, the input image is first smoothed with a
    Gaussian filter, then the LaplacianImageFilter is applied to smoothed
    image. Finally the zero-crossing of the Laplacian of the smoothed
    image is detected. The output is a binary image. Inputs and Outputs
    The input to the filter should be a scalar, itk::Image of arbitrary
    dimension. The output image is a binary, labeled image. See
    itkZeroCrossingImageFilter for more information on requirements of the
    data type of the output.

    To use this filter, first set the parameters (variance and maximum
    error) needed by the embedded DiscreteGaussianImageFilter, i.e. See
    DiscreteGaussianImageFilter for information about these parameters.
    Optionally, you may also set foreground and background values for the
    zero-crossing filter. The default label values are Zero for the
    background and One for the foreground, as defined in NumericTraits for
    the data type of the output image.

    See:  DiscreteGaussianImageFilter

    See:   LaplacianImageFilter

    See:   ZeroCrossingImageFilter
    example{Filtering/ImageFeature/ZeroCrossingBasedEdgeDecor,Zero-
    crossing Based Edge Decor} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_Clone)
    GetVariance = _swig_new_instance_method(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_GetVariance)
    GetMaximumError = _swig_new_instance_method(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_GetMaximumError)
    GetBackgroundValue = _swig_new_instance_method(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_GetBackgroundValue)
    SetBackgroundValue = _swig_new_instance_method(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_SetBackgroundValue)
    GetForegroundValue = _swig_new_instance_method(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_GetForegroundValue)
    SetForegroundValue = _swig_new_instance_method(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_SetForegroundValue)
    SetVariance = _swig_new_instance_method(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_SetVariance)
    SetMaximumError = _swig_new_instance_method(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_SetMaximumError)
    OutputEqualityComparableCheck = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_OutputEqualityComparableCheck
    
    SameDimensionCheck = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_SameDimensionCheck
    
    SameTypeCheck = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_SameTypeCheck
    
    OutputOStreamWritableCheck = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_OutputOStreamWritableCheck
    
    PixelTypeIsFloatingPointCheck = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_PixelTypeIsFloatingPointCheck
    
    __swig_destroy__ = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.delete_itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3
    cast = _swig_new_static_method(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3

        Create a new object of the class itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3 in _itkZeroCrossingBasedEdgeDetectionImageFilterPython:
_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_swigregister(itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3)
itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3___New_orig__ = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3___New_orig__
itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_cast = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def zero_crossing_based_edge_detection_image_filter(*args, **kwargs):
    """Procedural interface for ZeroCrossingBasedEdgeDetectionImageFilter"""
    import itk
    instance = itk.ZeroCrossingBasedEdgeDetectionImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def zero_crossing_based_edge_detection_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ZeroCrossingBasedEdgeDetectionImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.ZeroCrossingBasedEdgeDetectionImageFilter.values()[0]
    else:
        filter_object = itk.ZeroCrossingBasedEdgeDetectionImageFilter

    zero_crossing_based_edge_detection_image_filter.__doc__ = filter_object.__doc__
    zero_crossing_based_edge_detection_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    zero_crossing_based_edge_detection_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.ZeroCrossingBasedEdgeDetectionImageFilter, itkTemplate.itkTemplate):
        zero_crossing_based_edge_detection_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        zero_crossing_based_edge_detection_image_filter.__doc__ += "\n"
        zero_crossing_based_edge_detection_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        zero_crossing_based_edge_detection_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



