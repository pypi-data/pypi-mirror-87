# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageComposePython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkJoinSeriesImageFilterPython
else:
    import _itkJoinSeriesImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkJoinSeriesImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkJoinSeriesImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkImageToImageFilterBPython
import itk.itkImagePython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkRGBPixelPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython

def itkJoinSeriesImageFilterID2ID3_New():
    return itkJoinSeriesImageFilterID2ID3.New()

class itkJoinSeriesImageFilterID2ID3(itk.itkImageToImageFilterBPython.itkImageToImageFilterID2ID3):
    r"""


    Join N-D images into an (N+1)-D image.

    This filter is templated over the input image type and the output
    image type. The pixel type of them must be the same and the input
    dimension must be less than the output dimension. When the input
    images are N-dimensional, they are joined in order and the size of the
    N+1'th dimension of the output is same as the number of the inputs.
    The spacing and the origin (where the first input is placed) for the
    N+1'th dimension is specified in this filter. The output image
    informations for the first N dimensions are taken from the first
    input. Note that all the inputs should have the same information.

    Hideaki Hiraki  Contributed in the users
    listhttp://public.kitware.com/pipermail/insight-
    users/2004-February/006542.html 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterID2ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterID2ID3_Clone)
    SetSpacing = _swig_new_instance_method(_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterID2ID3_SetSpacing)
    GetSpacing = _swig_new_instance_method(_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterID2ID3_GetSpacing)
    SetOrigin = _swig_new_instance_method(_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterID2ID3_SetOrigin)
    GetOrigin = _swig_new_instance_method(_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterID2ID3_GetOrigin)
    InputConvertibleToOutputCheck = _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterID2ID3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkJoinSeriesImageFilterPython.delete_itkJoinSeriesImageFilterID2ID3
    cast = _swig_new_static_method(_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterID2ID3_cast)

    def New(*args, **kargs):
        """New() -> itkJoinSeriesImageFilterID2ID3

        Create a new object of the class itkJoinSeriesImageFilterID2ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkJoinSeriesImageFilterID2ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkJoinSeriesImageFilterID2ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkJoinSeriesImageFilterID2ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkJoinSeriesImageFilterID2ID3 in _itkJoinSeriesImageFilterPython:
_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterID2ID3_swigregister(itkJoinSeriesImageFilterID2ID3)
itkJoinSeriesImageFilterID2ID3___New_orig__ = _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterID2ID3___New_orig__
itkJoinSeriesImageFilterID2ID3_cast = _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterID2ID3_cast


def itkJoinSeriesImageFilterIF2IF3_New():
    return itkJoinSeriesImageFilterIF2IF3.New()

class itkJoinSeriesImageFilterIF2IF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF2IF3):
    r"""


    Join N-D images into an (N+1)-D image.

    This filter is templated over the input image type and the output
    image type. The pixel type of them must be the same and the input
    dimension must be less than the output dimension. When the input
    images are N-dimensional, they are joined in order and the size of the
    N+1'th dimension of the output is same as the number of the inputs.
    The spacing and the origin (where the first input is placed) for the
    N+1'th dimension is specified in this filter. The output image
    informations for the first N dimensions are taken from the first
    input. Note that all the inputs should have the same information.

    Hideaki Hiraki  Contributed in the users
    listhttp://public.kitware.com/pipermail/insight-
    users/2004-February/006542.html 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIF2IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIF2IF3_Clone)
    SetSpacing = _swig_new_instance_method(_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIF2IF3_SetSpacing)
    GetSpacing = _swig_new_instance_method(_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIF2IF3_GetSpacing)
    SetOrigin = _swig_new_instance_method(_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIF2IF3_SetOrigin)
    GetOrigin = _swig_new_instance_method(_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIF2IF3_GetOrigin)
    InputConvertibleToOutputCheck = _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIF2IF3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkJoinSeriesImageFilterPython.delete_itkJoinSeriesImageFilterIF2IF3
    cast = _swig_new_static_method(_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIF2IF3_cast)

    def New(*args, **kargs):
        """New() -> itkJoinSeriesImageFilterIF2IF3

        Create a new object of the class itkJoinSeriesImageFilterIF2IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkJoinSeriesImageFilterIF2IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkJoinSeriesImageFilterIF2IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkJoinSeriesImageFilterIF2IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkJoinSeriesImageFilterIF2IF3 in _itkJoinSeriesImageFilterPython:
_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIF2IF3_swigregister(itkJoinSeriesImageFilterIF2IF3)
itkJoinSeriesImageFilterIF2IF3___New_orig__ = _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIF2IF3___New_orig__
itkJoinSeriesImageFilterIF2IF3_cast = _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIF2IF3_cast


def itkJoinSeriesImageFilterISS2ISS3_New():
    return itkJoinSeriesImageFilterISS2ISS3.New()

class itkJoinSeriesImageFilterISS2ISS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS2ISS3):
    r"""


    Join N-D images into an (N+1)-D image.

    This filter is templated over the input image type and the output
    image type. The pixel type of them must be the same and the input
    dimension must be less than the output dimension. When the input
    images are N-dimensional, they are joined in order and the size of the
    N+1'th dimension of the output is same as the number of the inputs.
    The spacing and the origin (where the first input is placed) for the
    N+1'th dimension is specified in this filter. The output image
    informations for the first N dimensions are taken from the first
    input. Note that all the inputs should have the same information.

    Hideaki Hiraki  Contributed in the users
    listhttp://public.kitware.com/pipermail/insight-
    users/2004-February/006542.html 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterISS2ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterISS2ISS3_Clone)
    SetSpacing = _swig_new_instance_method(_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterISS2ISS3_SetSpacing)
    GetSpacing = _swig_new_instance_method(_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterISS2ISS3_GetSpacing)
    SetOrigin = _swig_new_instance_method(_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterISS2ISS3_SetOrigin)
    GetOrigin = _swig_new_instance_method(_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterISS2ISS3_GetOrigin)
    InputConvertibleToOutputCheck = _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterISS2ISS3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkJoinSeriesImageFilterPython.delete_itkJoinSeriesImageFilterISS2ISS3
    cast = _swig_new_static_method(_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterISS2ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkJoinSeriesImageFilterISS2ISS3

        Create a new object of the class itkJoinSeriesImageFilterISS2ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkJoinSeriesImageFilterISS2ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkJoinSeriesImageFilterISS2ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkJoinSeriesImageFilterISS2ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkJoinSeriesImageFilterISS2ISS3 in _itkJoinSeriesImageFilterPython:
_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterISS2ISS3_swigregister(itkJoinSeriesImageFilterISS2ISS3)
itkJoinSeriesImageFilterISS2ISS3___New_orig__ = _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterISS2ISS3___New_orig__
itkJoinSeriesImageFilterISS2ISS3_cast = _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterISS2ISS3_cast


def itkJoinSeriesImageFilterIUC2IUC3_New():
    return itkJoinSeriesImageFilterIUC2IUC3.New()

class itkJoinSeriesImageFilterIUC2IUC3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC2IUC3):
    r"""


    Join N-D images into an (N+1)-D image.

    This filter is templated over the input image type and the output
    image type. The pixel type of them must be the same and the input
    dimension must be less than the output dimension. When the input
    images are N-dimensional, they are joined in order and the size of the
    N+1'th dimension of the output is same as the number of the inputs.
    The spacing and the origin (where the first input is placed) for the
    N+1'th dimension is specified in this filter. The output image
    informations for the first N dimensions are taken from the first
    input. Note that all the inputs should have the same information.

    Hideaki Hiraki  Contributed in the users
    listhttp://public.kitware.com/pipermail/insight-
    users/2004-February/006542.html 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUC2IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUC2IUC3_Clone)
    SetSpacing = _swig_new_instance_method(_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUC2IUC3_SetSpacing)
    GetSpacing = _swig_new_instance_method(_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUC2IUC3_GetSpacing)
    SetOrigin = _swig_new_instance_method(_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUC2IUC3_SetOrigin)
    GetOrigin = _swig_new_instance_method(_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUC2IUC3_GetOrigin)
    InputConvertibleToOutputCheck = _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUC2IUC3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkJoinSeriesImageFilterPython.delete_itkJoinSeriesImageFilterIUC2IUC3
    cast = _swig_new_static_method(_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUC2IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkJoinSeriesImageFilterIUC2IUC3

        Create a new object of the class itkJoinSeriesImageFilterIUC2IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkJoinSeriesImageFilterIUC2IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkJoinSeriesImageFilterIUC2IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkJoinSeriesImageFilterIUC2IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkJoinSeriesImageFilterIUC2IUC3 in _itkJoinSeriesImageFilterPython:
_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUC2IUC3_swigregister(itkJoinSeriesImageFilterIUC2IUC3)
itkJoinSeriesImageFilterIUC2IUC3___New_orig__ = _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUC2IUC3___New_orig__
itkJoinSeriesImageFilterIUC2IUC3_cast = _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUC2IUC3_cast


def itkJoinSeriesImageFilterIUS2IUS3_New():
    return itkJoinSeriesImageFilterIUS2IUS3.New()

class itkJoinSeriesImageFilterIUS2IUS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS2IUS3):
    r"""


    Join N-D images into an (N+1)-D image.

    This filter is templated over the input image type and the output
    image type. The pixel type of them must be the same and the input
    dimension must be less than the output dimension. When the input
    images are N-dimensional, they are joined in order and the size of the
    N+1'th dimension of the output is same as the number of the inputs.
    The spacing and the origin (where the first input is placed) for the
    N+1'th dimension is specified in this filter. The output image
    informations for the first N dimensions are taken from the first
    input. Note that all the inputs should have the same information.

    Hideaki Hiraki  Contributed in the users
    listhttp://public.kitware.com/pipermail/insight-
    users/2004-February/006542.html 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUS2IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUS2IUS3_Clone)
    SetSpacing = _swig_new_instance_method(_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUS2IUS3_SetSpacing)
    GetSpacing = _swig_new_instance_method(_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUS2IUS3_GetSpacing)
    SetOrigin = _swig_new_instance_method(_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUS2IUS3_SetOrigin)
    GetOrigin = _swig_new_instance_method(_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUS2IUS3_GetOrigin)
    InputConvertibleToOutputCheck = _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUS2IUS3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkJoinSeriesImageFilterPython.delete_itkJoinSeriesImageFilterIUS2IUS3
    cast = _swig_new_static_method(_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUS2IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkJoinSeriesImageFilterIUS2IUS3

        Create a new object of the class itkJoinSeriesImageFilterIUS2IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkJoinSeriesImageFilterIUS2IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkJoinSeriesImageFilterIUS2IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkJoinSeriesImageFilterIUS2IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkJoinSeriesImageFilterIUS2IUS3 in _itkJoinSeriesImageFilterPython:
_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUS2IUS3_swigregister(itkJoinSeriesImageFilterIUS2IUS3)
itkJoinSeriesImageFilterIUS2IUS3___New_orig__ = _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUS2IUS3___New_orig__
itkJoinSeriesImageFilterIUS2IUS3_cast = _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUS2IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def join_series_image_filter(*args, **kwargs):
    """Procedural interface for JoinSeriesImageFilter"""
    import itk
    instance = itk.JoinSeriesImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def join_series_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.JoinSeriesImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.JoinSeriesImageFilter.values()[0]
    else:
        filter_object = itk.JoinSeriesImageFilter

    join_series_image_filter.__doc__ = filter_object.__doc__
    join_series_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    join_series_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.JoinSeriesImageFilter, itkTemplate.itkTemplate):
        join_series_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        join_series_image_filter.__doc__ += "\n"
        join_series_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        join_series_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



