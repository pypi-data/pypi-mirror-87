# coding: utf-8

"""
    ExaVault API

    See our API reference documentation at https://www.exavault.com/developer/api-docs/  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@exavault.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccessMode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'download': 'bool',
        'upload': 'bool',
        'modify': 'bool',
        'delete': 'bool'
    }

    attribute_map = {
        'download': 'download',
        'upload': 'upload',
        'modify': 'modify',
        'delete': 'delete'
    }

    def __init__(self, download=None, upload=None, modify=None, delete=None):  # noqa: E501
        """AccessMode - a model defined in Swagger"""  # noqa: E501
        self._download = None
        self._upload = None
        self._modify = None
        self._delete = None
        self.discriminator = None
        if download is not None:
            self.download = download
        if upload is not None:
            self.upload = upload
        if modify is not None:
            self.modify = modify
        if delete is not None:
            self.delete = delete

    @property
    def download(self):
        """Gets the download of this AccessMode.  # noqa: E501

        Whether share allows visitors to download  # noqa: E501

        :return: The download of this AccessMode.  # noqa: E501
        :rtype: bool
        """
        return self._download

    @download.setter
    def download(self, download):
        """Sets the download of this AccessMode.

        Whether share allows visitors to download  # noqa: E501

        :param download: The download of this AccessMode.  # noqa: E501
        :type: bool
        """

        self._download = download

    @property
    def upload(self):
        """Gets the upload of this AccessMode.  # noqa: E501

        Whether share allows visitors to upload  # noqa: E501

        :return: The upload of this AccessMode.  # noqa: E501
        :rtype: bool
        """
        return self._upload

    @upload.setter
    def upload(self, upload):
        """Sets the upload of this AccessMode.

        Whether share allows visitors to upload  # noqa: E501

        :param upload: The upload of this AccessMode.  # noqa: E501
        :type: bool
        """

        self._upload = upload

    @property
    def modify(self):
        """Gets the modify of this AccessMode.  # noqa: E501

        Whether share allows visitors to rename or move contents.  # noqa: E501

        :return: The modify of this AccessMode.  # noqa: E501
        :rtype: bool
        """
        return self._modify

    @modify.setter
    def modify(self, modify):
        """Sets the modify of this AccessMode.

        Whether share allows visitors to rename or move contents.  # noqa: E501

        :param modify: The modify of this AccessMode.  # noqa: E501
        :type: bool
        """

        self._modify = modify

    @property
    def delete(self):
        """Gets the delete of this AccessMode.  # noqa: E501

        Whether share allows visitors to delete contents  # noqa: E501

        :return: The delete of this AccessMode.  # noqa: E501
        :rtype: bool
        """
        return self._delete

    @delete.setter
    def delete(self, delete):
        """Sets the delete of this AccessMode.

        Whether share allows visitors to delete contents  # noqa: E501

        :param delete: The delete of this AccessMode.  # noqa: E501
        :type: bool
        """

        self._delete = delete

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccessMode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccessMode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
