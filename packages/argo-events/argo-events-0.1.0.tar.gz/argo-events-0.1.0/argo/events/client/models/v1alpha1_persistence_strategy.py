# coding: utf-8

"""
    Argo Events

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from argo.events.client.configuration import Configuration


class V1alpha1PersistenceStrategy(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_mode': 'str',
        'storage_class_name': 'str',
        'volume_size': 'str'
    }

    attribute_map = {
        'access_mode': 'accessMode',
        'storage_class_name': 'storageClassName',
        'volume_size': 'volumeSize'
    }

    def __init__(self, access_mode=None, storage_class_name=None, volume_size=None, local_vars_configuration=None):  # noqa: E501
        """V1alpha1PersistenceStrategy - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._access_mode = None
        self._storage_class_name = None
        self._volume_size = None
        self.discriminator = None

        if access_mode is not None:
            self.access_mode = access_mode
        if storage_class_name is not None:
            self.storage_class_name = storage_class_name
        if volume_size is not None:
            self.volume_size = volume_size

    @property
    def access_mode(self):
        """Gets the access_mode of this V1alpha1PersistenceStrategy.  # noqa: E501

        Available access modes such as ReadWriteOnce, ReadWriteMany https://kubernetes.io/docs/concepts/storage/persistent-volumes/#access-modes  # noqa: E501

        :return: The access_mode of this V1alpha1PersistenceStrategy.  # noqa: E501
        :rtype: str
        """
        return self._access_mode

    @access_mode.setter
    def access_mode(self, access_mode):
        """Sets the access_mode of this V1alpha1PersistenceStrategy.

        Available access modes such as ReadWriteOnce, ReadWriteMany https://kubernetes.io/docs/concepts/storage/persistent-volumes/#access-modes  # noqa: E501

        :param access_mode: The access_mode of this V1alpha1PersistenceStrategy.  # noqa: E501
        :type: str
        """

        self._access_mode = access_mode

    @property
    def storage_class_name(self):
        """Gets the storage_class_name of this V1alpha1PersistenceStrategy.  # noqa: E501

        Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1  # noqa: E501

        :return: The storage_class_name of this V1alpha1PersistenceStrategy.  # noqa: E501
        :rtype: str
        """
        return self._storage_class_name

    @storage_class_name.setter
    def storage_class_name(self, storage_class_name):
        """Sets the storage_class_name of this V1alpha1PersistenceStrategy.

        Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1  # noqa: E501

        :param storage_class_name: The storage_class_name of this V1alpha1PersistenceStrategy.  # noqa: E501
        :type: str
        """

        self._storage_class_name = storage_class_name

    @property
    def volume_size(self):
        """Gets the volume_size of this V1alpha1PersistenceStrategy.  # noqa: E501

        Volume size, e.g. 10Gi  # noqa: E501

        :return: The volume_size of this V1alpha1PersistenceStrategy.  # noqa: E501
        :rtype: str
        """
        return self._volume_size

    @volume_size.setter
    def volume_size(self, volume_size):
        """Sets the volume_size of this V1alpha1PersistenceStrategy.

        Volume size, e.g. 10Gi  # noqa: E501

        :param volume_size: The volume_size of this V1alpha1PersistenceStrategy.  # noqa: E501
        :type: str
        """

        self._volume_size = volume_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1PersistenceStrategy):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alpha1PersistenceStrategy):
            return True

        return self.to_dict() != other.to_dict()
