# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKLevelSetsPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkShapePriorMAPCostFunctionPython
else:
    import _itkShapePriorMAPCostFunctionPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkShapePriorMAPCostFunctionPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkShapePriorMAPCostFunctionPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkShapePriorMAPCostFunctionBasePython
import itk.itkArrayPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkImagePython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkSizePython
import itk.itkCovariantVectorPython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkRGBPixelPython
import itk.itkShapeSignedDistanceFunctionPython
import itk.itkSpatialFunctionPython
import itk.itkFunctionBasePython
import itk.itkContinuousIndexPython
import itk.itkOptimizerParametersPython
import itk.ITKCostFunctionsPython
import itk.vnl_cost_functionPython
import itk.vnl_unary_functionPython
import itk.itkCostFunctionPython
import itk.vnl_least_squares_functionPython
import itk.itkArray2DPython
import itk.ITKFastMarchingBasePython
import itk.itkLevelSetNodePython
import itk.itkImageToImageFilterAPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
import itk.itkFastMarchingStoppingCriterionBasePython
import itk.itkNodePairPython

def itkShapePriorMAPCostFunctionID2D_New():
    return itkShapePriorMAPCostFunctionID2D.New()

class itkShapePriorMAPCostFunctionID2D(itk.itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID2D):
    r"""


    Represents the maximum aprior (MAP) cost function used
    ShapePriorSegmentationLevelSetImageFilter to estimate the shape
    parameters.

    This class follows the shape and pose parameters estimation developed
    in [1]. Note that this class returns the negative log of the MAP
    function. Using the negative function make this cost function
    compatible with generic optimizers which seeks the minimum of a cost
    function.

    This class has two template parameters, the feature image type
    representing the edge potential map and the pixel type used to
    represent the output level set in the
    ShapePriorSegmentationLevelSetImageFilter.

    See:   ShapePriorSegmentationLevelSetImageFilter REFERENCES

    [1] Leventon, M.E. et al. "Statistical Shape Influence in Geodesic
    Active Contours", CVPR 2000. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkShapePriorMAPCostFunctionPython.itkShapePriorMAPCostFunctionID2D___New_orig__)
    Clone = _swig_new_instance_method(_itkShapePriorMAPCostFunctionPython.itkShapePriorMAPCostFunctionID2D_Clone)
    SetShapeParameterMeans = _swig_new_instance_method(_itkShapePriorMAPCostFunctionPython.itkShapePriorMAPCostFunctionID2D_SetShapeParameterMeans)
    GetShapeParameterMeans = _swig_new_instance_method(_itkShapePriorMAPCostFunctionPython.itkShapePriorMAPCostFunctionID2D_GetShapeParameterMeans)
    SetShapeParameterStandardDeviations = _swig_new_instance_method(_itkShapePriorMAPCostFunctionPython.itkShapePriorMAPCostFunctionID2D_SetShapeParameterStandardDeviations)
    GetShapeParameterStandardDeviations = _swig_new_instance_method(_itkShapePriorMAPCostFunctionPython.itkShapePriorMAPCostFunctionID2D_GetShapeParameterStandardDeviations)
    SetWeights = _swig_new_instance_method(_itkShapePriorMAPCostFunctionPython.itkShapePriorMAPCostFunctionID2D_SetWeights)
    GetWeights = _swig_new_instance_method(_itkShapePriorMAPCostFunctionPython.itkShapePriorMAPCostFunctionID2D_GetWeights)
    __swig_destroy__ = _itkShapePriorMAPCostFunctionPython.delete_itkShapePriorMAPCostFunctionID2D
    cast = _swig_new_static_method(_itkShapePriorMAPCostFunctionPython.itkShapePriorMAPCostFunctionID2D_cast)

    def New(*args, **kargs):
        """New() -> itkShapePriorMAPCostFunctionID2D

        Create a new object of the class itkShapePriorMAPCostFunctionID2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShapePriorMAPCostFunctionID2D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkShapePriorMAPCostFunctionID2D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkShapePriorMAPCostFunctionID2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkShapePriorMAPCostFunctionID2D in _itkShapePriorMAPCostFunctionPython:
_itkShapePriorMAPCostFunctionPython.itkShapePriorMAPCostFunctionID2D_swigregister(itkShapePriorMAPCostFunctionID2D)
itkShapePriorMAPCostFunctionID2D___New_orig__ = _itkShapePriorMAPCostFunctionPython.itkShapePriorMAPCostFunctionID2D___New_orig__
itkShapePriorMAPCostFunctionID2D_cast = _itkShapePriorMAPCostFunctionPython.itkShapePriorMAPCostFunctionID2D_cast


def itkShapePriorMAPCostFunctionID3D_New():
    return itkShapePriorMAPCostFunctionID3D.New()

class itkShapePriorMAPCostFunctionID3D(itk.itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID3D):
    r"""


    Represents the maximum aprior (MAP) cost function used
    ShapePriorSegmentationLevelSetImageFilter to estimate the shape
    parameters.

    This class follows the shape and pose parameters estimation developed
    in [1]. Note that this class returns the negative log of the MAP
    function. Using the negative function make this cost function
    compatible with generic optimizers which seeks the minimum of a cost
    function.

    This class has two template parameters, the feature image type
    representing the edge potential map and the pixel type used to
    represent the output level set in the
    ShapePriorSegmentationLevelSetImageFilter.

    See:   ShapePriorSegmentationLevelSetImageFilter REFERENCES

    [1] Leventon, M.E. et al. "Statistical Shape Influence in Geodesic
    Active Contours", CVPR 2000. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkShapePriorMAPCostFunctionPython.itkShapePriorMAPCostFunctionID3D___New_orig__)
    Clone = _swig_new_instance_method(_itkShapePriorMAPCostFunctionPython.itkShapePriorMAPCostFunctionID3D_Clone)
    SetShapeParameterMeans = _swig_new_instance_method(_itkShapePriorMAPCostFunctionPython.itkShapePriorMAPCostFunctionID3D_SetShapeParameterMeans)
    GetShapeParameterMeans = _swig_new_instance_method(_itkShapePriorMAPCostFunctionPython.itkShapePriorMAPCostFunctionID3D_GetShapeParameterMeans)
    SetShapeParameterStandardDeviations = _swig_new_instance_method(_itkShapePriorMAPCostFunctionPython.itkShapePriorMAPCostFunctionID3D_SetShapeParameterStandardDeviations)
    GetShapeParameterStandardDeviations = _swig_new_instance_method(_itkShapePriorMAPCostFunctionPython.itkShapePriorMAPCostFunctionID3D_GetShapeParameterStandardDeviations)
    SetWeights = _swig_new_instance_method(_itkShapePriorMAPCostFunctionPython.itkShapePriorMAPCostFunctionID3D_SetWeights)
    GetWeights = _swig_new_instance_method(_itkShapePriorMAPCostFunctionPython.itkShapePriorMAPCostFunctionID3D_GetWeights)
    __swig_destroy__ = _itkShapePriorMAPCostFunctionPython.delete_itkShapePriorMAPCostFunctionID3D
    cast = _swig_new_static_method(_itkShapePriorMAPCostFunctionPython.itkShapePriorMAPCostFunctionID3D_cast)

    def New(*args, **kargs):
        """New() -> itkShapePriorMAPCostFunctionID3D

        Create a new object of the class itkShapePriorMAPCostFunctionID3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShapePriorMAPCostFunctionID3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkShapePriorMAPCostFunctionID3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkShapePriorMAPCostFunctionID3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkShapePriorMAPCostFunctionID3D in _itkShapePriorMAPCostFunctionPython:
_itkShapePriorMAPCostFunctionPython.itkShapePriorMAPCostFunctionID3D_swigregister(itkShapePriorMAPCostFunctionID3D)
itkShapePriorMAPCostFunctionID3D___New_orig__ = _itkShapePriorMAPCostFunctionPython.itkShapePriorMAPCostFunctionID3D___New_orig__
itkShapePriorMAPCostFunctionID3D_cast = _itkShapePriorMAPCostFunctionPython.itkShapePriorMAPCostFunctionID3D_cast


def itkShapePriorMAPCostFunctionIF2F_New():
    return itkShapePriorMAPCostFunctionIF2F.New()

class itkShapePriorMAPCostFunctionIF2F(itk.itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF2F):
    r"""


    Represents the maximum aprior (MAP) cost function used
    ShapePriorSegmentationLevelSetImageFilter to estimate the shape
    parameters.

    This class follows the shape and pose parameters estimation developed
    in [1]. Note that this class returns the negative log of the MAP
    function. Using the negative function make this cost function
    compatible with generic optimizers which seeks the minimum of a cost
    function.

    This class has two template parameters, the feature image type
    representing the edge potential map and the pixel type used to
    represent the output level set in the
    ShapePriorSegmentationLevelSetImageFilter.

    See:   ShapePriorSegmentationLevelSetImageFilter REFERENCES

    [1] Leventon, M.E. et al. "Statistical Shape Influence in Geodesic
    Active Contours", CVPR 2000. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkShapePriorMAPCostFunctionPython.itkShapePriorMAPCostFunctionIF2F___New_orig__)
    Clone = _swig_new_instance_method(_itkShapePriorMAPCostFunctionPython.itkShapePriorMAPCostFunctionIF2F_Clone)
    SetShapeParameterMeans = _swig_new_instance_method(_itkShapePriorMAPCostFunctionPython.itkShapePriorMAPCostFunctionIF2F_SetShapeParameterMeans)
    GetShapeParameterMeans = _swig_new_instance_method(_itkShapePriorMAPCostFunctionPython.itkShapePriorMAPCostFunctionIF2F_GetShapeParameterMeans)
    SetShapeParameterStandardDeviations = _swig_new_instance_method(_itkShapePriorMAPCostFunctionPython.itkShapePriorMAPCostFunctionIF2F_SetShapeParameterStandardDeviations)
    GetShapeParameterStandardDeviations = _swig_new_instance_method(_itkShapePriorMAPCostFunctionPython.itkShapePriorMAPCostFunctionIF2F_GetShapeParameterStandardDeviations)
    SetWeights = _swig_new_instance_method(_itkShapePriorMAPCostFunctionPython.itkShapePriorMAPCostFunctionIF2F_SetWeights)
    GetWeights = _swig_new_instance_method(_itkShapePriorMAPCostFunctionPython.itkShapePriorMAPCostFunctionIF2F_GetWeights)
    __swig_destroy__ = _itkShapePriorMAPCostFunctionPython.delete_itkShapePriorMAPCostFunctionIF2F
    cast = _swig_new_static_method(_itkShapePriorMAPCostFunctionPython.itkShapePriorMAPCostFunctionIF2F_cast)

    def New(*args, **kargs):
        """New() -> itkShapePriorMAPCostFunctionIF2F

        Create a new object of the class itkShapePriorMAPCostFunctionIF2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShapePriorMAPCostFunctionIF2F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkShapePriorMAPCostFunctionIF2F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkShapePriorMAPCostFunctionIF2F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkShapePriorMAPCostFunctionIF2F in _itkShapePriorMAPCostFunctionPython:
_itkShapePriorMAPCostFunctionPython.itkShapePriorMAPCostFunctionIF2F_swigregister(itkShapePriorMAPCostFunctionIF2F)
itkShapePriorMAPCostFunctionIF2F___New_orig__ = _itkShapePriorMAPCostFunctionPython.itkShapePriorMAPCostFunctionIF2F___New_orig__
itkShapePriorMAPCostFunctionIF2F_cast = _itkShapePriorMAPCostFunctionPython.itkShapePriorMAPCostFunctionIF2F_cast


def itkShapePriorMAPCostFunctionIF3F_New():
    return itkShapePriorMAPCostFunctionIF3F.New()

class itkShapePriorMAPCostFunctionIF3F(itk.itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF3F):
    r"""


    Represents the maximum aprior (MAP) cost function used
    ShapePriorSegmentationLevelSetImageFilter to estimate the shape
    parameters.

    This class follows the shape and pose parameters estimation developed
    in [1]. Note that this class returns the negative log of the MAP
    function. Using the negative function make this cost function
    compatible with generic optimizers which seeks the minimum of a cost
    function.

    This class has two template parameters, the feature image type
    representing the edge potential map and the pixel type used to
    represent the output level set in the
    ShapePriorSegmentationLevelSetImageFilter.

    See:   ShapePriorSegmentationLevelSetImageFilter REFERENCES

    [1] Leventon, M.E. et al. "Statistical Shape Influence in Geodesic
    Active Contours", CVPR 2000. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkShapePriorMAPCostFunctionPython.itkShapePriorMAPCostFunctionIF3F___New_orig__)
    Clone = _swig_new_instance_method(_itkShapePriorMAPCostFunctionPython.itkShapePriorMAPCostFunctionIF3F_Clone)
    SetShapeParameterMeans = _swig_new_instance_method(_itkShapePriorMAPCostFunctionPython.itkShapePriorMAPCostFunctionIF3F_SetShapeParameterMeans)
    GetShapeParameterMeans = _swig_new_instance_method(_itkShapePriorMAPCostFunctionPython.itkShapePriorMAPCostFunctionIF3F_GetShapeParameterMeans)
    SetShapeParameterStandardDeviations = _swig_new_instance_method(_itkShapePriorMAPCostFunctionPython.itkShapePriorMAPCostFunctionIF3F_SetShapeParameterStandardDeviations)
    GetShapeParameterStandardDeviations = _swig_new_instance_method(_itkShapePriorMAPCostFunctionPython.itkShapePriorMAPCostFunctionIF3F_GetShapeParameterStandardDeviations)
    SetWeights = _swig_new_instance_method(_itkShapePriorMAPCostFunctionPython.itkShapePriorMAPCostFunctionIF3F_SetWeights)
    GetWeights = _swig_new_instance_method(_itkShapePriorMAPCostFunctionPython.itkShapePriorMAPCostFunctionIF3F_GetWeights)
    __swig_destroy__ = _itkShapePriorMAPCostFunctionPython.delete_itkShapePriorMAPCostFunctionIF3F
    cast = _swig_new_static_method(_itkShapePriorMAPCostFunctionPython.itkShapePriorMAPCostFunctionIF3F_cast)

    def New(*args, **kargs):
        """New() -> itkShapePriorMAPCostFunctionIF3F

        Create a new object of the class itkShapePriorMAPCostFunctionIF3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShapePriorMAPCostFunctionIF3F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkShapePriorMAPCostFunctionIF3F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkShapePriorMAPCostFunctionIF3F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkShapePriorMAPCostFunctionIF3F in _itkShapePriorMAPCostFunctionPython:
_itkShapePriorMAPCostFunctionPython.itkShapePriorMAPCostFunctionIF3F_swigregister(itkShapePriorMAPCostFunctionIF3F)
itkShapePriorMAPCostFunctionIF3F___New_orig__ = _itkShapePriorMAPCostFunctionPython.itkShapePriorMAPCostFunctionIF3F___New_orig__
itkShapePriorMAPCostFunctionIF3F_cast = _itkShapePriorMAPCostFunctionPython.itkShapePriorMAPCostFunctionIF3F_cast



