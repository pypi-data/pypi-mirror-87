# coding: utf-8

"""
    Argo Events

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from argo.events.client.configuration import Configuration


class V1alpha1AMQPEventSource(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'connection_backoff': 'CommonBackoff',
        'exchange_name': 'str',
        'exchange_type': 'str',
        'json_body': 'bool',
        'metadata': 'dict(str, str)',
        'routing_key': 'str',
        'tls': 'CommonTLSConfig',
        'url': 'str'
    }

    attribute_map = {
        'connection_backoff': 'connectionBackoff',
        'exchange_name': 'exchangeName',
        'exchange_type': 'exchangeType',
        'json_body': 'jsonBody',
        'metadata': 'metadata',
        'routing_key': 'routingKey',
        'tls': 'tls',
        'url': 'url'
    }

    def __init__(self, connection_backoff=None, exchange_name=None, exchange_type=None, json_body=None, metadata=None, routing_key=None, tls=None, url=None, local_vars_configuration=None):  # noqa: E501
        """V1alpha1AMQPEventSource - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._connection_backoff = None
        self._exchange_name = None
        self._exchange_type = None
        self._json_body = None
        self._metadata = None
        self._routing_key = None
        self._tls = None
        self._url = None
        self.discriminator = None

        if connection_backoff is not None:
            self.connection_backoff = connection_backoff
        self.exchange_name = exchange_name
        self.exchange_type = exchange_type
        if json_body is not None:
            self.json_body = json_body
        if metadata is not None:
            self.metadata = metadata
        self.routing_key = routing_key
        if tls is not None:
            self.tls = tls
        self.url = url

    @property
    def connection_backoff(self):
        """Gets the connection_backoff of this V1alpha1AMQPEventSource.  # noqa: E501


        :return: The connection_backoff of this V1alpha1AMQPEventSource.  # noqa: E501
        :rtype: CommonBackoff
        """
        return self._connection_backoff

    @connection_backoff.setter
    def connection_backoff(self, connection_backoff):
        """Sets the connection_backoff of this V1alpha1AMQPEventSource.


        :param connection_backoff: The connection_backoff of this V1alpha1AMQPEventSource.  # noqa: E501
        :type: CommonBackoff
        """

        self._connection_backoff = connection_backoff

    @property
    def exchange_name(self):
        """Gets the exchange_name of this V1alpha1AMQPEventSource.  # noqa: E501

        ExchangeName is the exchange name For more information, visit https://www.rabbitmq.com/tutorials/amqp-concepts.html  # noqa: E501

        :return: The exchange_name of this V1alpha1AMQPEventSource.  # noqa: E501
        :rtype: str
        """
        return self._exchange_name

    @exchange_name.setter
    def exchange_name(self, exchange_name):
        """Sets the exchange_name of this V1alpha1AMQPEventSource.

        ExchangeName is the exchange name For more information, visit https://www.rabbitmq.com/tutorials/amqp-concepts.html  # noqa: E501

        :param exchange_name: The exchange_name of this V1alpha1AMQPEventSource.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and exchange_name is None:  # noqa: E501
            raise ValueError("Invalid value for `exchange_name`, must not be `None`")  # noqa: E501

        self._exchange_name = exchange_name

    @property
    def exchange_type(self):
        """Gets the exchange_type of this V1alpha1AMQPEventSource.  # noqa: E501

        ExchangeType is rabbitmq exchange type  # noqa: E501

        :return: The exchange_type of this V1alpha1AMQPEventSource.  # noqa: E501
        :rtype: str
        """
        return self._exchange_type

    @exchange_type.setter
    def exchange_type(self, exchange_type):
        """Sets the exchange_type of this V1alpha1AMQPEventSource.

        ExchangeType is rabbitmq exchange type  # noqa: E501

        :param exchange_type: The exchange_type of this V1alpha1AMQPEventSource.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and exchange_type is None:  # noqa: E501
            raise ValueError("Invalid value for `exchange_type`, must not be `None`")  # noqa: E501

        self._exchange_type = exchange_type

    @property
    def json_body(self):
        """Gets the json_body of this V1alpha1AMQPEventSource.  # noqa: E501

        JSONBody specifies that all event body payload coming from this source will be JSON  # noqa: E501

        :return: The json_body of this V1alpha1AMQPEventSource.  # noqa: E501
        :rtype: bool
        """
        return self._json_body

    @json_body.setter
    def json_body(self, json_body):
        """Sets the json_body of this V1alpha1AMQPEventSource.

        JSONBody specifies that all event body payload coming from this source will be JSON  # noqa: E501

        :param json_body: The json_body of this V1alpha1AMQPEventSource.  # noqa: E501
        :type: bool
        """

        self._json_body = json_body

    @property
    def metadata(self):
        """Gets the metadata of this V1alpha1AMQPEventSource.  # noqa: E501

        Metadata holds the user defined metadata which will passed along the event payload.  # noqa: E501

        :return: The metadata of this V1alpha1AMQPEventSource.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this V1alpha1AMQPEventSource.

        Metadata holds the user defined metadata which will passed along the event payload.  # noqa: E501

        :param metadata: The metadata of this V1alpha1AMQPEventSource.  # noqa: E501
        :type: dict(str, str)
        """

        self._metadata = metadata

    @property
    def routing_key(self):
        """Gets the routing_key of this V1alpha1AMQPEventSource.  # noqa: E501

        Routing key for bindings  # noqa: E501

        :return: The routing_key of this V1alpha1AMQPEventSource.  # noqa: E501
        :rtype: str
        """
        return self._routing_key

    @routing_key.setter
    def routing_key(self, routing_key):
        """Sets the routing_key of this V1alpha1AMQPEventSource.

        Routing key for bindings  # noqa: E501

        :param routing_key: The routing_key of this V1alpha1AMQPEventSource.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and routing_key is None:  # noqa: E501
            raise ValueError("Invalid value for `routing_key`, must not be `None`")  # noqa: E501

        self._routing_key = routing_key

    @property
    def tls(self):
        """Gets the tls of this V1alpha1AMQPEventSource.  # noqa: E501


        :return: The tls of this V1alpha1AMQPEventSource.  # noqa: E501
        :rtype: CommonTLSConfig
        """
        return self._tls

    @tls.setter
    def tls(self, tls):
        """Sets the tls of this V1alpha1AMQPEventSource.


        :param tls: The tls of this V1alpha1AMQPEventSource.  # noqa: E501
        :type: CommonTLSConfig
        """

        self._tls = tls

    @property
    def url(self):
        """Gets the url of this V1alpha1AMQPEventSource.  # noqa: E501

        URL for rabbitmq service  # noqa: E501

        :return: The url of this V1alpha1AMQPEventSource.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this V1alpha1AMQPEventSource.

        URL for rabbitmq service  # noqa: E501

        :param url: The url of this V1alpha1AMQPEventSource.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and url is None:  # noqa: E501
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1AMQPEventSource):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alpha1AMQPEventSource):
            return True

        return self.to_dict() != other.to_dict()
