# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkMapContainerPython
else:
    import _itkMapContainerPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkMapContainerPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkMapContainerPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkFixedArrayPython
import itk.itkPointPython

def itkMapContainerULLD_New():
    return itkMapContainerULLD.New()

class itkMapContainerULLD(itk.ITKCommonBasePython.itkObject):
    r"""


    A wrapper of the STL "map" container.

    Define a front-end to the STL "map" container that conforms to the
    IndexedContainerInterface. This is a full-fleged Object, so there are
    events, modification time, debug, and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  A type that shall be used to index the container.
    It must have a < operator defined for ordering.

    TElement:  The element type stored in the container. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkMapContainerULLD self) -> itkMapContainerULLD
        __init__(itkMapContainerULLD self, std::less< unsigned long long > const & comp) -> itkMapContainerULLD


        A wrapper of the STL "map" container.

        Define a front-end to the STL "map" container that conforms to the
        IndexedContainerInterface. This is a full-fleged Object, so there are
        events, modification time, debug, and reference count information.

        Parameters:
        -----------

        TElementIdentifier:  A type that shall be used to index the container.
        It must have a < operator defined for ordering.

        TElement:  The element type stored in the container. 
        """
        _itkMapContainerPython.itkMapContainerULLD_swiginit(self, _itkMapContainerPython.new_itkMapContainerULLD(*args))
    __New_orig__ = _swig_new_static_method(_itkMapContainerPython.itkMapContainerULLD___New_orig__)
    Clone = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLD_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLD_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLD_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLD_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLD_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLD_GetElement)
    SetElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLD_SetElement)
    InsertElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLD_InsertElement)
    IndexExists = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLD_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLD_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLD_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLD_DeleteIndex)
    Size = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLD_Size)
    Reserve = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLD_Reserve)
    Squeeze = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLD_Squeeze)
    Initialize = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLD_Initialize)
    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULLD
    cast = _swig_new_static_method(_itkMapContainerPython.itkMapContainerULLD_cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerULLD

        Create a new object of the class itkMapContainerULLD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULLD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerULLD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerULLD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerULLD in _itkMapContainerPython:
_itkMapContainerPython.itkMapContainerULLD_swigregister(itkMapContainerULLD)
itkMapContainerULLD___New_orig__ = _itkMapContainerPython.itkMapContainerULLD___New_orig__
itkMapContainerULLD_cast = _itkMapContainerPython.itkMapContainerULLD_cast


def itkMapContainerULLF_New():
    return itkMapContainerULLF.New()

class itkMapContainerULLF(itk.ITKCommonBasePython.itkObject):
    r"""


    A wrapper of the STL "map" container.

    Define a front-end to the STL "map" container that conforms to the
    IndexedContainerInterface. This is a full-fleged Object, so there are
    events, modification time, debug, and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  A type that shall be used to index the container.
    It must have a < operator defined for ordering.

    TElement:  The element type stored in the container. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkMapContainerULLF self) -> itkMapContainerULLF
        __init__(itkMapContainerULLF self, std::less< unsigned long long > const & comp) -> itkMapContainerULLF


        A wrapper of the STL "map" container.

        Define a front-end to the STL "map" container that conforms to the
        IndexedContainerInterface. This is a full-fleged Object, so there are
        events, modification time, debug, and reference count information.

        Parameters:
        -----------

        TElementIdentifier:  A type that shall be used to index the container.
        It must have a < operator defined for ordering.

        TElement:  The element type stored in the container. 
        """
        _itkMapContainerPython.itkMapContainerULLF_swiginit(self, _itkMapContainerPython.new_itkMapContainerULLF(*args))
    __New_orig__ = _swig_new_static_method(_itkMapContainerPython.itkMapContainerULLF___New_orig__)
    Clone = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLF_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLF_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLF_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLF_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLF_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLF_GetElement)
    SetElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLF_SetElement)
    InsertElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLF_InsertElement)
    IndexExists = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLF_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLF_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLF_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLF_DeleteIndex)
    Size = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLF_Size)
    Reserve = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLF_Reserve)
    Squeeze = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLF_Squeeze)
    Initialize = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLF_Initialize)
    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULLF
    cast = _swig_new_static_method(_itkMapContainerPython.itkMapContainerULLF_cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerULLF

        Create a new object of the class itkMapContainerULLF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULLF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerULLF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerULLF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerULLF in _itkMapContainerPython:
_itkMapContainerPython.itkMapContainerULLF_swigregister(itkMapContainerULLF)
itkMapContainerULLF___New_orig__ = _itkMapContainerPython.itkMapContainerULLF___New_orig__
itkMapContainerULLF_cast = _itkMapContainerPython.itkMapContainerULLF_cast


def itkMapContainerULLPD2_New():
    return itkMapContainerULLPD2.New()

class itkMapContainerULLPD2(itk.ITKCommonBasePython.itkObject):
    r"""


    A wrapper of the STL "map" container.

    Define a front-end to the STL "map" container that conforms to the
    IndexedContainerInterface. This is a full-fleged Object, so there are
    events, modification time, debug, and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  A type that shall be used to index the container.
    It must have a < operator defined for ordering.

    TElement:  The element type stored in the container. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkMapContainerULLPD2 self) -> itkMapContainerULLPD2
        __init__(itkMapContainerULLPD2 self, std::less< unsigned long long > const & comp) -> itkMapContainerULLPD2


        A wrapper of the STL "map" container.

        Define a front-end to the STL "map" container that conforms to the
        IndexedContainerInterface. This is a full-fleged Object, so there are
        events, modification time, debug, and reference count information.

        Parameters:
        -----------

        TElementIdentifier:  A type that shall be used to index the container.
        It must have a < operator defined for ordering.

        TElement:  The element type stored in the container. 
        """
        _itkMapContainerPython.itkMapContainerULLPD2_swiginit(self, _itkMapContainerPython.new_itkMapContainerULLPD2(*args))
    __New_orig__ = _swig_new_static_method(_itkMapContainerPython.itkMapContainerULLPD2___New_orig__)
    Clone = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPD2_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPD2_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPD2_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPD2_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPD2_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPD2_GetElement)
    SetElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPD2_SetElement)
    InsertElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPD2_InsertElement)
    IndexExists = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPD2_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPD2_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPD2_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPD2_DeleteIndex)
    Size = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPD2_Size)
    Reserve = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPD2_Reserve)
    Squeeze = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPD2_Squeeze)
    Initialize = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPD2_Initialize)
    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULLPD2
    cast = _swig_new_static_method(_itkMapContainerPython.itkMapContainerULLPD2_cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerULLPD2

        Create a new object of the class itkMapContainerULLPD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULLPD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerULLPD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerULLPD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerULLPD2 in _itkMapContainerPython:
_itkMapContainerPython.itkMapContainerULLPD2_swigregister(itkMapContainerULLPD2)
itkMapContainerULLPD2___New_orig__ = _itkMapContainerPython.itkMapContainerULLPD2___New_orig__
itkMapContainerULLPD2_cast = _itkMapContainerPython.itkMapContainerULLPD2_cast


def itkMapContainerULLPD3_New():
    return itkMapContainerULLPD3.New()

class itkMapContainerULLPD3(itk.ITKCommonBasePython.itkObject):
    r"""


    A wrapper of the STL "map" container.

    Define a front-end to the STL "map" container that conforms to the
    IndexedContainerInterface. This is a full-fleged Object, so there are
    events, modification time, debug, and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  A type that shall be used to index the container.
    It must have a < operator defined for ordering.

    TElement:  The element type stored in the container. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkMapContainerULLPD3 self) -> itkMapContainerULLPD3
        __init__(itkMapContainerULLPD3 self, std::less< unsigned long long > const & comp) -> itkMapContainerULLPD3


        A wrapper of the STL "map" container.

        Define a front-end to the STL "map" container that conforms to the
        IndexedContainerInterface. This is a full-fleged Object, so there are
        events, modification time, debug, and reference count information.

        Parameters:
        -----------

        TElementIdentifier:  A type that shall be used to index the container.
        It must have a < operator defined for ordering.

        TElement:  The element type stored in the container. 
        """
        _itkMapContainerPython.itkMapContainerULLPD3_swiginit(self, _itkMapContainerPython.new_itkMapContainerULLPD3(*args))
    __New_orig__ = _swig_new_static_method(_itkMapContainerPython.itkMapContainerULLPD3___New_orig__)
    Clone = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPD3_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPD3_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPD3_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPD3_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPD3_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPD3_GetElement)
    SetElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPD3_SetElement)
    InsertElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPD3_InsertElement)
    IndexExists = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPD3_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPD3_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPD3_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPD3_DeleteIndex)
    Size = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPD3_Size)
    Reserve = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPD3_Reserve)
    Squeeze = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPD3_Squeeze)
    Initialize = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPD3_Initialize)
    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULLPD3
    cast = _swig_new_static_method(_itkMapContainerPython.itkMapContainerULLPD3_cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerULLPD3

        Create a new object of the class itkMapContainerULLPD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULLPD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerULLPD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerULLPD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerULLPD3 in _itkMapContainerPython:
_itkMapContainerPython.itkMapContainerULLPD3_swigregister(itkMapContainerULLPD3)
itkMapContainerULLPD3___New_orig__ = _itkMapContainerPython.itkMapContainerULLPD3___New_orig__
itkMapContainerULLPD3_cast = _itkMapContainerPython.itkMapContainerULLPD3_cast


def itkMapContainerULLPF2_New():
    return itkMapContainerULLPF2.New()

class itkMapContainerULLPF2(itk.ITKCommonBasePython.itkObject):
    r"""


    A wrapper of the STL "map" container.

    Define a front-end to the STL "map" container that conforms to the
    IndexedContainerInterface. This is a full-fleged Object, so there are
    events, modification time, debug, and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  A type that shall be used to index the container.
    It must have a < operator defined for ordering.

    TElement:  The element type stored in the container. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkMapContainerULLPF2 self) -> itkMapContainerULLPF2
        __init__(itkMapContainerULLPF2 self, std::less< unsigned long long > const & comp) -> itkMapContainerULLPF2


        A wrapper of the STL "map" container.

        Define a front-end to the STL "map" container that conforms to the
        IndexedContainerInterface. This is a full-fleged Object, so there are
        events, modification time, debug, and reference count information.

        Parameters:
        -----------

        TElementIdentifier:  A type that shall be used to index the container.
        It must have a < operator defined for ordering.

        TElement:  The element type stored in the container. 
        """
        _itkMapContainerPython.itkMapContainerULLPF2_swiginit(self, _itkMapContainerPython.new_itkMapContainerULLPF2(*args))
    __New_orig__ = _swig_new_static_method(_itkMapContainerPython.itkMapContainerULLPF2___New_orig__)
    Clone = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPF2_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPF2_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPF2_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPF2_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPF2_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPF2_GetElement)
    SetElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPF2_SetElement)
    InsertElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPF2_InsertElement)
    IndexExists = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPF2_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPF2_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPF2_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPF2_DeleteIndex)
    Size = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPF2_Size)
    Reserve = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPF2_Reserve)
    Squeeze = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPF2_Squeeze)
    Initialize = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPF2_Initialize)
    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULLPF2
    cast = _swig_new_static_method(_itkMapContainerPython.itkMapContainerULLPF2_cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerULLPF2

        Create a new object of the class itkMapContainerULLPF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULLPF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerULLPF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerULLPF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerULLPF2 in _itkMapContainerPython:
_itkMapContainerPython.itkMapContainerULLPF2_swigregister(itkMapContainerULLPF2)
itkMapContainerULLPF2___New_orig__ = _itkMapContainerPython.itkMapContainerULLPF2___New_orig__
itkMapContainerULLPF2_cast = _itkMapContainerPython.itkMapContainerULLPF2_cast


def itkMapContainerULLPF3_New():
    return itkMapContainerULLPF3.New()

class itkMapContainerULLPF3(itk.ITKCommonBasePython.itkObject):
    r"""


    A wrapper of the STL "map" container.

    Define a front-end to the STL "map" container that conforms to the
    IndexedContainerInterface. This is a full-fleged Object, so there are
    events, modification time, debug, and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  A type that shall be used to index the container.
    It must have a < operator defined for ordering.

    TElement:  The element type stored in the container. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkMapContainerULLPF3 self) -> itkMapContainerULLPF3
        __init__(itkMapContainerULLPF3 self, std::less< unsigned long long > const & comp) -> itkMapContainerULLPF3


        A wrapper of the STL "map" container.

        Define a front-end to the STL "map" container that conforms to the
        IndexedContainerInterface. This is a full-fleged Object, so there are
        events, modification time, debug, and reference count information.

        Parameters:
        -----------

        TElementIdentifier:  A type that shall be used to index the container.
        It must have a < operator defined for ordering.

        TElement:  The element type stored in the container. 
        """
        _itkMapContainerPython.itkMapContainerULLPF3_swiginit(self, _itkMapContainerPython.new_itkMapContainerULLPF3(*args))
    __New_orig__ = _swig_new_static_method(_itkMapContainerPython.itkMapContainerULLPF3___New_orig__)
    Clone = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPF3_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPF3_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPF3_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPF3_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPF3_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPF3_GetElement)
    SetElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPF3_SetElement)
    InsertElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPF3_InsertElement)
    IndexExists = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPF3_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPF3_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPF3_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPF3_DeleteIndex)
    Size = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPF3_Size)
    Reserve = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPF3_Reserve)
    Squeeze = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPF3_Squeeze)
    Initialize = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLPF3_Initialize)
    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULLPF3
    cast = _swig_new_static_method(_itkMapContainerPython.itkMapContainerULLPF3_cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerULLPF3

        Create a new object of the class itkMapContainerULLPF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULLPF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerULLPF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerULLPF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerULLPF3 in _itkMapContainerPython:
_itkMapContainerPython.itkMapContainerULLPF3_swigregister(itkMapContainerULLPF3)
itkMapContainerULLPF3___New_orig__ = _itkMapContainerPython.itkMapContainerULLPF3___New_orig__
itkMapContainerULLPF3_cast = _itkMapContainerPython.itkMapContainerULLPF3_cast


def itkMapContainerULLSIT_New():
    return itkMapContainerULLSIT.New()

class itkMapContainerULLSIT(itk.ITKCommonBasePython.itkObject):
    r"""


    A wrapper of the STL "map" container.

    Define a front-end to the STL "map" container that conforms to the
    IndexedContainerInterface. This is a full-fleged Object, so there are
    events, modification time, debug, and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  A type that shall be used to index the container.
    It must have a < operator defined for ordering.

    TElement:  The element type stored in the container. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkMapContainerULLSIT self) -> itkMapContainerULLSIT
        __init__(itkMapContainerULLSIT self, std::less< unsigned long long > const & comp) -> itkMapContainerULLSIT


        A wrapper of the STL "map" container.

        Define a front-end to the STL "map" container that conforms to the
        IndexedContainerInterface. This is a full-fleged Object, so there are
        events, modification time, debug, and reference count information.

        Parameters:
        -----------

        TElementIdentifier:  A type that shall be used to index the container.
        It must have a < operator defined for ordering.

        TElement:  The element type stored in the container. 
        """
        _itkMapContainerPython.itkMapContainerULLSIT_swiginit(self, _itkMapContainerPython.new_itkMapContainerULLSIT(*args))
    __New_orig__ = _swig_new_static_method(_itkMapContainerPython.itkMapContainerULLSIT___New_orig__)
    Clone = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLSIT_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLSIT_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLSIT_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLSIT_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLSIT_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLSIT_GetElement)
    SetElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLSIT_SetElement)
    InsertElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLSIT_InsertElement)
    IndexExists = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLSIT_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLSIT_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLSIT_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLSIT_DeleteIndex)
    Size = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLSIT_Size)
    Reserve = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLSIT_Reserve)
    Squeeze = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLSIT_Squeeze)
    Initialize = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLSIT_Initialize)
    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULLSIT
    cast = _swig_new_static_method(_itkMapContainerPython.itkMapContainerULLSIT_cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerULLSIT

        Create a new object of the class itkMapContainerULLSIT and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULLSIT.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerULLSIT.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerULLSIT.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerULLSIT in _itkMapContainerPython:
_itkMapContainerPython.itkMapContainerULLSIT_swigregister(itkMapContainerULLSIT)
itkMapContainerULLSIT___New_orig__ = _itkMapContainerPython.itkMapContainerULLSIT___New_orig__
itkMapContainerULLSIT_cast = _itkMapContainerPython.itkMapContainerULLSIT_cast


def itkMapContainerULLVD2_New():
    return itkMapContainerULLVD2.New()

class itkMapContainerULLVD2(itk.ITKCommonBasePython.itkObject):
    r"""


    A wrapper of the STL "map" container.

    Define a front-end to the STL "map" container that conforms to the
    IndexedContainerInterface. This is a full-fleged Object, so there are
    events, modification time, debug, and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  A type that shall be used to index the container.
    It must have a < operator defined for ordering.

    TElement:  The element type stored in the container. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkMapContainerULLVD2 self) -> itkMapContainerULLVD2
        __init__(itkMapContainerULLVD2 self, std::less< unsigned long long > const & comp) -> itkMapContainerULLVD2


        A wrapper of the STL "map" container.

        Define a front-end to the STL "map" container that conforms to the
        IndexedContainerInterface. This is a full-fleged Object, so there are
        events, modification time, debug, and reference count information.

        Parameters:
        -----------

        TElementIdentifier:  A type that shall be used to index the container.
        It must have a < operator defined for ordering.

        TElement:  The element type stored in the container. 
        """
        _itkMapContainerPython.itkMapContainerULLVD2_swiginit(self, _itkMapContainerPython.new_itkMapContainerULLVD2(*args))
    __New_orig__ = _swig_new_static_method(_itkMapContainerPython.itkMapContainerULLVD2___New_orig__)
    Clone = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVD2_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVD2_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVD2_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVD2_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVD2_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVD2_GetElement)
    SetElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVD2_SetElement)
    InsertElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVD2_InsertElement)
    IndexExists = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVD2_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVD2_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVD2_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVD2_DeleteIndex)
    Size = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVD2_Size)
    Reserve = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVD2_Reserve)
    Squeeze = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVD2_Squeeze)
    Initialize = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVD2_Initialize)
    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULLVD2
    cast = _swig_new_static_method(_itkMapContainerPython.itkMapContainerULLVD2_cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerULLVD2

        Create a new object of the class itkMapContainerULLVD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULLVD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerULLVD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerULLVD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerULLVD2 in _itkMapContainerPython:
_itkMapContainerPython.itkMapContainerULLVD2_swigregister(itkMapContainerULLVD2)
itkMapContainerULLVD2___New_orig__ = _itkMapContainerPython.itkMapContainerULLVD2___New_orig__
itkMapContainerULLVD2_cast = _itkMapContainerPython.itkMapContainerULLVD2_cast


def itkMapContainerULLVD3_New():
    return itkMapContainerULLVD3.New()

class itkMapContainerULLVD3(itk.ITKCommonBasePython.itkObject):
    r"""


    A wrapper of the STL "map" container.

    Define a front-end to the STL "map" container that conforms to the
    IndexedContainerInterface. This is a full-fleged Object, so there are
    events, modification time, debug, and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  A type that shall be used to index the container.
    It must have a < operator defined for ordering.

    TElement:  The element type stored in the container. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkMapContainerULLVD3 self) -> itkMapContainerULLVD3
        __init__(itkMapContainerULLVD3 self, std::less< unsigned long long > const & comp) -> itkMapContainerULLVD3


        A wrapper of the STL "map" container.

        Define a front-end to the STL "map" container that conforms to the
        IndexedContainerInterface. This is a full-fleged Object, so there are
        events, modification time, debug, and reference count information.

        Parameters:
        -----------

        TElementIdentifier:  A type that shall be used to index the container.
        It must have a < operator defined for ordering.

        TElement:  The element type stored in the container. 
        """
        _itkMapContainerPython.itkMapContainerULLVD3_swiginit(self, _itkMapContainerPython.new_itkMapContainerULLVD3(*args))
    __New_orig__ = _swig_new_static_method(_itkMapContainerPython.itkMapContainerULLVD3___New_orig__)
    Clone = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVD3_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVD3_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVD3_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVD3_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVD3_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVD3_GetElement)
    SetElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVD3_SetElement)
    InsertElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVD3_InsertElement)
    IndexExists = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVD3_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVD3_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVD3_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVD3_DeleteIndex)
    Size = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVD3_Size)
    Reserve = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVD3_Reserve)
    Squeeze = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVD3_Squeeze)
    Initialize = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVD3_Initialize)
    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULLVD3
    cast = _swig_new_static_method(_itkMapContainerPython.itkMapContainerULLVD3_cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerULLVD3

        Create a new object of the class itkMapContainerULLVD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULLVD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerULLVD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerULLVD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerULLVD3 in _itkMapContainerPython:
_itkMapContainerPython.itkMapContainerULLVD3_swigregister(itkMapContainerULLVD3)
itkMapContainerULLVD3___New_orig__ = _itkMapContainerPython.itkMapContainerULLVD3___New_orig__
itkMapContainerULLVD3_cast = _itkMapContainerPython.itkMapContainerULLVD3_cast


def itkMapContainerULLVF2_New():
    return itkMapContainerULLVF2.New()

class itkMapContainerULLVF2(itk.ITKCommonBasePython.itkObject):
    r"""


    A wrapper of the STL "map" container.

    Define a front-end to the STL "map" container that conforms to the
    IndexedContainerInterface. This is a full-fleged Object, so there are
    events, modification time, debug, and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  A type that shall be used to index the container.
    It must have a < operator defined for ordering.

    TElement:  The element type stored in the container. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkMapContainerULLVF2 self) -> itkMapContainerULLVF2
        __init__(itkMapContainerULLVF2 self, std::less< unsigned long long > const & comp) -> itkMapContainerULLVF2


        A wrapper of the STL "map" container.

        Define a front-end to the STL "map" container that conforms to the
        IndexedContainerInterface. This is a full-fleged Object, so there are
        events, modification time, debug, and reference count information.

        Parameters:
        -----------

        TElementIdentifier:  A type that shall be used to index the container.
        It must have a < operator defined for ordering.

        TElement:  The element type stored in the container. 
        """
        _itkMapContainerPython.itkMapContainerULLVF2_swiginit(self, _itkMapContainerPython.new_itkMapContainerULLVF2(*args))
    __New_orig__ = _swig_new_static_method(_itkMapContainerPython.itkMapContainerULLVF2___New_orig__)
    Clone = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVF2_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVF2_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVF2_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVF2_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVF2_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVF2_GetElement)
    SetElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVF2_SetElement)
    InsertElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVF2_InsertElement)
    IndexExists = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVF2_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVF2_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVF2_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVF2_DeleteIndex)
    Size = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVF2_Size)
    Reserve = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVF2_Reserve)
    Squeeze = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVF2_Squeeze)
    Initialize = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVF2_Initialize)
    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULLVF2
    cast = _swig_new_static_method(_itkMapContainerPython.itkMapContainerULLVF2_cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerULLVF2

        Create a new object of the class itkMapContainerULLVF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULLVF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerULLVF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerULLVF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerULLVF2 in _itkMapContainerPython:
_itkMapContainerPython.itkMapContainerULLVF2_swigregister(itkMapContainerULLVF2)
itkMapContainerULLVF2___New_orig__ = _itkMapContainerPython.itkMapContainerULLVF2___New_orig__
itkMapContainerULLVF2_cast = _itkMapContainerPython.itkMapContainerULLVF2_cast


def itkMapContainerULLVF3_New():
    return itkMapContainerULLVF3.New()

class itkMapContainerULLVF3(itk.ITKCommonBasePython.itkObject):
    r"""


    A wrapper of the STL "map" container.

    Define a front-end to the STL "map" container that conforms to the
    IndexedContainerInterface. This is a full-fleged Object, so there are
    events, modification time, debug, and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  A type that shall be used to index the container.
    It must have a < operator defined for ordering.

    TElement:  The element type stored in the container. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkMapContainerULLVF3 self) -> itkMapContainerULLVF3
        __init__(itkMapContainerULLVF3 self, std::less< unsigned long long > const & comp) -> itkMapContainerULLVF3


        A wrapper of the STL "map" container.

        Define a front-end to the STL "map" container that conforms to the
        IndexedContainerInterface. This is a full-fleged Object, so there are
        events, modification time, debug, and reference count information.

        Parameters:
        -----------

        TElementIdentifier:  A type that shall be used to index the container.
        It must have a < operator defined for ordering.

        TElement:  The element type stored in the container. 
        """
        _itkMapContainerPython.itkMapContainerULLVF3_swiginit(self, _itkMapContainerPython.new_itkMapContainerULLVF3(*args))
    __New_orig__ = _swig_new_static_method(_itkMapContainerPython.itkMapContainerULLVF3___New_orig__)
    Clone = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVF3_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVF3_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVF3_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVF3_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVF3_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVF3_GetElement)
    SetElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVF3_SetElement)
    InsertElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVF3_InsertElement)
    IndexExists = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVF3_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVF3_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVF3_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVF3_DeleteIndex)
    Size = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVF3_Size)
    Reserve = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVF3_Reserve)
    Squeeze = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVF3_Squeeze)
    Initialize = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULLVF3_Initialize)
    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULLVF3
    cast = _swig_new_static_method(_itkMapContainerPython.itkMapContainerULLVF3_cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerULLVF3

        Create a new object of the class itkMapContainerULLVF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULLVF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerULLVF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerULLVF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerULLVF3 in _itkMapContainerPython:
_itkMapContainerPython.itkMapContainerULLVF3_swigregister(itkMapContainerULLVF3)
itkMapContainerULLVF3___New_orig__ = _itkMapContainerPython.itkMapContainerULLVF3___New_orig__
itkMapContainerULLVF3_cast = _itkMapContainerPython.itkMapContainerULLVF3_cast



