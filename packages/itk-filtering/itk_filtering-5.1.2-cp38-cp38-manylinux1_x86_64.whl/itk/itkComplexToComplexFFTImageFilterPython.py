# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKFFTPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkComplexToComplexFFTImageFilterPython
else:
    import _itkComplexToComplexFFTImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkComplexToComplexFFTImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkComplexToComplexFFTImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImageToImageFilterBPython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.itkPointPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.ITKCommonBasePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
class itkComplexToComplexFFTImageFilterEnums(object):
    r"""Proxy of C++ itkComplexToComplexFFTImageFilterEnums class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    TransformDirection_FORWARD = _itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterEnums_TransformDirection_FORWARD
    
    TransformDirection_INVERSE = _itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterEnums_TransformDirection_INVERSE
    

    def __init__(self, *args):
        r"""
        __init__(itkComplexToComplexFFTImageFilterEnums self) -> itkComplexToComplexFFTImageFilterEnums
        __init__(itkComplexToComplexFFTImageFilterEnums self, itkComplexToComplexFFTImageFilterEnums arg0) -> itkComplexToComplexFFTImageFilterEnums
        """
        _itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterEnums_swiginit(self, _itkComplexToComplexFFTImageFilterPython.new_itkComplexToComplexFFTImageFilterEnums(*args))
    __swig_destroy__ = _itkComplexToComplexFFTImageFilterPython.delete_itkComplexToComplexFFTImageFilterEnums

# Register itkComplexToComplexFFTImageFilterEnums in _itkComplexToComplexFFTImageFilterPython:
_itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterEnums_swigregister(itkComplexToComplexFFTImageFilterEnums)


def itkComplexToComplexFFTImageFilterICF2_New():
    return itkComplexToComplexFFTImageFilterICF2.New()

class itkComplexToComplexFFTImageFilterICF2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF2):
    r"""


    Implements an API to enable the Fourier transform or the inverse
    Fourier transform of images with complex valued voxels to be computed.

    Simon K. Warfield simon.warfield@childrens.harvard.edu

    Attribution Notice. This research work was made possible by Grant
    Number R01 RR021885 (PI Simon K. Warfield, Ph.D.) from the National
    Center for Research Resources (NCRR), a component of the National
    Institutes of Health (NIH). Its contents are solely the responsibility
    of the authors and do not necessarily represent the official view of
    NCRR or NIH.  This class was taken from the Insight Journal
    paper:https://hdl.handle.net/1926/326

    See:   ForwardFFTImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterICF2___New_orig__)
    SetTransformDirection = _swig_new_instance_method(_itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterICF2_SetTransformDirection)
    GetTransformDirection = _swig_new_instance_method(_itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterICF2_GetTransformDirection)
    __swig_destroy__ = _itkComplexToComplexFFTImageFilterPython.delete_itkComplexToComplexFFTImageFilterICF2
    cast = _swig_new_static_method(_itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterICF2_cast)

    def New(*args, **kargs):
        """New() -> itkComplexToComplexFFTImageFilterICF2

        Create a new object of the class itkComplexToComplexFFTImageFilterICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComplexToComplexFFTImageFilterICF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComplexToComplexFFTImageFilterICF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComplexToComplexFFTImageFilterICF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComplexToComplexFFTImageFilterICF2 in _itkComplexToComplexFFTImageFilterPython:
_itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterICF2_swigregister(itkComplexToComplexFFTImageFilterICF2)
itkComplexToComplexFFTImageFilterICF2___New_orig__ = _itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterICF2___New_orig__
itkComplexToComplexFFTImageFilterICF2_cast = _itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterICF2_cast


def itkComplexToComplexFFTImageFilterICF3_New():
    return itkComplexToComplexFFTImageFilterICF3.New()

class itkComplexToComplexFFTImageFilterICF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF3):
    r"""


    Implements an API to enable the Fourier transform or the inverse
    Fourier transform of images with complex valued voxels to be computed.

    Simon K. Warfield simon.warfield@childrens.harvard.edu

    Attribution Notice. This research work was made possible by Grant
    Number R01 RR021885 (PI Simon K. Warfield, Ph.D.) from the National
    Center for Research Resources (NCRR), a component of the National
    Institutes of Health (NIH). Its contents are solely the responsibility
    of the authors and do not necessarily represent the official view of
    NCRR or NIH.  This class was taken from the Insight Journal
    paper:https://hdl.handle.net/1926/326

    See:   ForwardFFTImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterICF3___New_orig__)
    SetTransformDirection = _swig_new_instance_method(_itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterICF3_SetTransformDirection)
    GetTransformDirection = _swig_new_instance_method(_itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterICF3_GetTransformDirection)
    __swig_destroy__ = _itkComplexToComplexFFTImageFilterPython.delete_itkComplexToComplexFFTImageFilterICF3
    cast = _swig_new_static_method(_itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterICF3_cast)

    def New(*args, **kargs):
        """New() -> itkComplexToComplexFFTImageFilterICF3

        Create a new object of the class itkComplexToComplexFFTImageFilterICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComplexToComplexFFTImageFilterICF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComplexToComplexFFTImageFilterICF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComplexToComplexFFTImageFilterICF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComplexToComplexFFTImageFilterICF3 in _itkComplexToComplexFFTImageFilterPython:
_itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterICF3_swigregister(itkComplexToComplexFFTImageFilterICF3)
itkComplexToComplexFFTImageFilterICF3___New_orig__ = _itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterICF3___New_orig__
itkComplexToComplexFFTImageFilterICF3_cast = _itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterICF3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def complex_to_complex_fft_image_filter(*args, **kwargs):
    """Procedural interface for ComplexToComplexFFTImageFilter"""
    import itk
    instance = itk.ComplexToComplexFFTImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def complex_to_complex_fft_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ComplexToComplexFFTImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.ComplexToComplexFFTImageFilter.values()[0]
    else:
        filter_object = itk.ComplexToComplexFFTImageFilter

    complex_to_complex_fft_image_filter.__doc__ = filter_object.__doc__
    complex_to_complex_fft_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    complex_to_complex_fft_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.ComplexToComplexFFTImageFilter, itkTemplate.itkTemplate):
        complex_to_complex_fft_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        complex_to_complex_fft_image_filter.__doc__ += "\n"
        complex_to_complex_fft_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        complex_to_complex_fft_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



