# AUTOGENERATED! DO NOT EDIT! File to edit: 01_actions.ipynb (unless otherwise specified).

__all__ = ['contexts', 'context_github', 'context_env', 'context_job', 'context_steps', 'context_runner',
           'context_secrets', 'context_strategy', 'context_matrix', 'context_needs', 'create_workflow',
           'example_payload', 'Event', 'github_token', 'actions_output', 'actions_debug', 'actions_warn',
           'actions_error', 'actions_group', 'actions_endgroup', 'actions_mask']

# Cell
from fastcore.utils import *
from fastcore.foundation import *
from fastcore.meta import *
from .core import *

from enum import Enum

# Cell
# So we can run this outside of GitHub actions too, read from file if needed
if 'CONTEXT_GITHUB' not in os.environ:
    os.environ['CONTEXT_GITHUB'] = Path('examples/context.json').read_text()
if 'CONTEXT_GITHUB' not in os.environ:
    os.environ['CONTEXT_NEEDS'] = Path('examples/needs.json').read_text()

# Cell
contexts = 'github', 'env', 'job', 'steps', 'runner', 'secrets', 'strategy', 'matrix', 'needs'
for context in contexts:
    globals()[f'context_{context}'] = dict2obj(loads(os.getenv(f"CONTEXT_{context.upper()}", "{}")))

# Cell
#nbdev_comment _all_ = ['context_github', 'context_env', 'context_job', 'context_steps', 'context_runner', 'context_secrets', 'context_strategy', 'context_matrix', 'context_needs']

# Cell
_wf_tmpl = """
name: NAME
on:
  workflow_dispatch:
  EVENT:
defaults:
  run: { shell: bash }

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-python@v2
      with: {python-version: '3.8'}
    - name: Run script
      env:
        CONTEXT_GITHUB: ${{ toJson(github) }}
      run: |
        pip install -q ghapi
        python .github/scripts/build-NAME-EVENT.py
"""

# Cell
def create_workflow(name:str, event:'Event'):
    "Create a simple Ubuntu workflow that calls a Python `ghapi` script"
    if not os.path.exists('.git'): return print('This does not appear to be the root of a git repo')
    wf_path  = Path('.github/workflows')
    scr_path = Path('.github/scripts')
    wf_path .mkdir(parents=True, exist_ok=True)
    scr_path.mkdir(parents=True, exist_ok=True)
    fname = f'{name}-{event}'
    if not (wf_path/f'{fname}.yml').exists():
        contents = _wf_tmpl.replace('NAME',name).replace('EVENT',str(event))
        (wf_path/f'{fname}.yml').write_text(contents)
    if not (scr_path/f'build-{fname}.py').exists():
        py = "from fastcore.all import *\nfrom ghapi import *"
        (scr_path/f'build-{fname}.py').write_text(py)

# Cell
_example_url = 'https://raw.githubusercontent.com/fastai/ghapi/master/examples/{}.json'

# Cell
def example_payload(event):
    "Get an example of a JSON payload for `event`"
    return dict2obj(urljson(_example_url.format(event)))

# Cell
Event = str_enum('Event',
    'page_build','content_reference','repository_import','create','workflow_run','delete','organization','sponsorship',
    'project_column','push','context','milestone','project_card','project','package','pull_request','repository_dispatch',
    'team_add','workflow_dispatch','member','meta','code_scanning_alert','public','needs','check_run','security_advisory',
    'pull_request_review_comment','org_block','commit_comment','watch','marketplace_purchase','star','installation_repositories',
    'check_suite','github_app_authorization','team','status','repository_vulnerability_alert','pull_request_review','label',
    'installation','release','issues','repository','gollum','membership','deployment','deploy_key','issue_comment','ping',
    'deployment_status','fork')

# Cell
def github_token():
    "Get GitHub token from `GITHUB_TOKEN` env var if available, or from `github` context"
    return os.getenv('GITHUB_TOKEN', context_github.get('token', None))

# Cell
def actions_output(name, value):
    "Print the special GitHub Actions `::set-output` line for `name::value`"
    print(f"::set-output name={name}::{value}")

# Cell
def actions_debug(message):
    "Print the special `::debug` line for `message`"
    print(f"::debug::{message}")

# Cell
def actions_warn(message, details=''):
    "Print the special `::warning` line for `message`"
    print(f"::warning {details}::{message}")

# Cell
def actions_error(message, details=''):
    "Print the special `::error` line for `message`"
    print(f"::error {details}::{message}")

# Cell
def actions_group(title):
    "Print the special `::group` line for `title`"
    print(f"::group::{title}")

# Cell
def actions_endgroup():
    "Print the special `::endgroup`"
    print(f"::endgroup::")

# Cell
def actions_mask(value):
    "Print the special `::add-mask` line for `value`"
    print(f"::add-mask::{value}")