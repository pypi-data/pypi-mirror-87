# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageIntensityPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkModulusImageFilterPython
else:
    import _itkModulusImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkModulusImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkModulusImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkBinaryGeneratorImageFilterPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkFixedArrayPython
import itk.itkPointPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterAPython
import itk.itkInPlaceImageFilterBPython
import itk.itkSimpleDataObjectDecoratorPython
import itk.itkArrayPython

def itkModulusImageFilterISS2ISS2_New():
    return itkModulusImageFilterISS2ISS2.New()

class itkModulusImageFilterISS2ISS2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS2ISS2ISS2):
    r"""


    Computes the modulus (x % dividend) pixel-wise.

    The input pixel type must support the c++ modulus operator (%).

    If the dividend is zero, the maximum value will be returned.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkModulusImageFilterPython.itkModulusImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkModulusImageFilterPython.itkModulusImageFilterISS2ISS2_Clone)
    SetDividend = _swig_new_instance_method(_itkModulusImageFilterPython.itkModulusImageFilterISS2ISS2_SetDividend)
    GetDividend = _swig_new_instance_method(_itkModulusImageFilterPython.itkModulusImageFilterISS2ISS2_GetDividend)
    InputHasNumericTraitsCheck = _itkModulusImageFilterPython.itkModulusImageFilterISS2ISS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkModulusImageFilterPython.delete_itkModulusImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkModulusImageFilterPython.itkModulusImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkModulusImageFilterISS2ISS2

        Create a new object of the class itkModulusImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkModulusImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkModulusImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkModulusImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkModulusImageFilterISS2ISS2 in _itkModulusImageFilterPython:
_itkModulusImageFilterPython.itkModulusImageFilterISS2ISS2_swigregister(itkModulusImageFilterISS2ISS2)
itkModulusImageFilterISS2ISS2___New_orig__ = _itkModulusImageFilterPython.itkModulusImageFilterISS2ISS2___New_orig__
itkModulusImageFilterISS2ISS2_cast = _itkModulusImageFilterPython.itkModulusImageFilterISS2ISS2_cast


def itkModulusImageFilterISS3ISS3_New():
    return itkModulusImageFilterISS3ISS3.New()

class itkModulusImageFilterISS3ISS3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS3ISS3ISS3):
    r"""


    Computes the modulus (x % dividend) pixel-wise.

    The input pixel type must support the c++ modulus operator (%).

    If the dividend is zero, the maximum value will be returned.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkModulusImageFilterPython.itkModulusImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkModulusImageFilterPython.itkModulusImageFilterISS3ISS3_Clone)
    SetDividend = _swig_new_instance_method(_itkModulusImageFilterPython.itkModulusImageFilterISS3ISS3_SetDividend)
    GetDividend = _swig_new_instance_method(_itkModulusImageFilterPython.itkModulusImageFilterISS3ISS3_GetDividend)
    InputHasNumericTraitsCheck = _itkModulusImageFilterPython.itkModulusImageFilterISS3ISS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkModulusImageFilterPython.delete_itkModulusImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkModulusImageFilterPython.itkModulusImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkModulusImageFilterISS3ISS3

        Create a new object of the class itkModulusImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkModulusImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkModulusImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkModulusImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkModulusImageFilterISS3ISS3 in _itkModulusImageFilterPython:
_itkModulusImageFilterPython.itkModulusImageFilterISS3ISS3_swigregister(itkModulusImageFilterISS3ISS3)
itkModulusImageFilterISS3ISS3___New_orig__ = _itkModulusImageFilterPython.itkModulusImageFilterISS3ISS3___New_orig__
itkModulusImageFilterISS3ISS3_cast = _itkModulusImageFilterPython.itkModulusImageFilterISS3ISS3_cast


def itkModulusImageFilterIUC2IUC2_New():
    return itkModulusImageFilterIUC2IUC2.New()

class itkModulusImageFilterIUC2IUC2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC2IUC2IUC2):
    r"""


    Computes the modulus (x % dividend) pixel-wise.

    The input pixel type must support the c++ modulus operator (%).

    If the dividend is zero, the maximum value will be returned.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkModulusImageFilterPython.itkModulusImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkModulusImageFilterPython.itkModulusImageFilterIUC2IUC2_Clone)
    SetDividend = _swig_new_instance_method(_itkModulusImageFilterPython.itkModulusImageFilterIUC2IUC2_SetDividend)
    GetDividend = _swig_new_instance_method(_itkModulusImageFilterPython.itkModulusImageFilterIUC2IUC2_GetDividend)
    InputHasNumericTraitsCheck = _itkModulusImageFilterPython.itkModulusImageFilterIUC2IUC2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkModulusImageFilterPython.delete_itkModulusImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkModulusImageFilterPython.itkModulusImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkModulusImageFilterIUC2IUC2

        Create a new object of the class itkModulusImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkModulusImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkModulusImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkModulusImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkModulusImageFilterIUC2IUC2 in _itkModulusImageFilterPython:
_itkModulusImageFilterPython.itkModulusImageFilterIUC2IUC2_swigregister(itkModulusImageFilterIUC2IUC2)
itkModulusImageFilterIUC2IUC2___New_orig__ = _itkModulusImageFilterPython.itkModulusImageFilterIUC2IUC2___New_orig__
itkModulusImageFilterIUC2IUC2_cast = _itkModulusImageFilterPython.itkModulusImageFilterIUC2IUC2_cast


def itkModulusImageFilterIUC3IUC3_New():
    return itkModulusImageFilterIUC3IUC3.New()

class itkModulusImageFilterIUC3IUC3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC3IUC3IUC3):
    r"""


    Computes the modulus (x % dividend) pixel-wise.

    The input pixel type must support the c++ modulus operator (%).

    If the dividend is zero, the maximum value will be returned.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkModulusImageFilterPython.itkModulusImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkModulusImageFilterPython.itkModulusImageFilterIUC3IUC3_Clone)
    SetDividend = _swig_new_instance_method(_itkModulusImageFilterPython.itkModulusImageFilterIUC3IUC3_SetDividend)
    GetDividend = _swig_new_instance_method(_itkModulusImageFilterPython.itkModulusImageFilterIUC3IUC3_GetDividend)
    InputHasNumericTraitsCheck = _itkModulusImageFilterPython.itkModulusImageFilterIUC3IUC3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkModulusImageFilterPython.delete_itkModulusImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkModulusImageFilterPython.itkModulusImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkModulusImageFilterIUC3IUC3

        Create a new object of the class itkModulusImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkModulusImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkModulusImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkModulusImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkModulusImageFilterIUC3IUC3 in _itkModulusImageFilterPython:
_itkModulusImageFilterPython.itkModulusImageFilterIUC3IUC3_swigregister(itkModulusImageFilterIUC3IUC3)
itkModulusImageFilterIUC3IUC3___New_orig__ = _itkModulusImageFilterPython.itkModulusImageFilterIUC3IUC3___New_orig__
itkModulusImageFilterIUC3IUC3_cast = _itkModulusImageFilterPython.itkModulusImageFilterIUC3IUC3_cast


def itkModulusImageFilterIUS2IUS2_New():
    return itkModulusImageFilterIUS2IUS2.New()

class itkModulusImageFilterIUS2IUS2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS2IUS2IUS2):
    r"""


    Computes the modulus (x % dividend) pixel-wise.

    The input pixel type must support the c++ modulus operator (%).

    If the dividend is zero, the maximum value will be returned.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkModulusImageFilterPython.itkModulusImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkModulusImageFilterPython.itkModulusImageFilterIUS2IUS2_Clone)
    SetDividend = _swig_new_instance_method(_itkModulusImageFilterPython.itkModulusImageFilterIUS2IUS2_SetDividend)
    GetDividend = _swig_new_instance_method(_itkModulusImageFilterPython.itkModulusImageFilterIUS2IUS2_GetDividend)
    InputHasNumericTraitsCheck = _itkModulusImageFilterPython.itkModulusImageFilterIUS2IUS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkModulusImageFilterPython.delete_itkModulusImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkModulusImageFilterPython.itkModulusImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkModulusImageFilterIUS2IUS2

        Create a new object of the class itkModulusImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkModulusImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkModulusImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkModulusImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkModulusImageFilterIUS2IUS2 in _itkModulusImageFilterPython:
_itkModulusImageFilterPython.itkModulusImageFilterIUS2IUS2_swigregister(itkModulusImageFilterIUS2IUS2)
itkModulusImageFilterIUS2IUS2___New_orig__ = _itkModulusImageFilterPython.itkModulusImageFilterIUS2IUS2___New_orig__
itkModulusImageFilterIUS2IUS2_cast = _itkModulusImageFilterPython.itkModulusImageFilterIUS2IUS2_cast


def itkModulusImageFilterIUS3IUS3_New():
    return itkModulusImageFilterIUS3IUS3.New()

class itkModulusImageFilterIUS3IUS3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS3IUS3IUS3):
    r"""


    Computes the modulus (x % dividend) pixel-wise.

    The input pixel type must support the c++ modulus operator (%).

    If the dividend is zero, the maximum value will be returned.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkModulusImageFilterPython.itkModulusImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkModulusImageFilterPython.itkModulusImageFilterIUS3IUS3_Clone)
    SetDividend = _swig_new_instance_method(_itkModulusImageFilterPython.itkModulusImageFilterIUS3IUS3_SetDividend)
    GetDividend = _swig_new_instance_method(_itkModulusImageFilterPython.itkModulusImageFilterIUS3IUS3_GetDividend)
    InputHasNumericTraitsCheck = _itkModulusImageFilterPython.itkModulusImageFilterIUS3IUS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkModulusImageFilterPython.delete_itkModulusImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkModulusImageFilterPython.itkModulusImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkModulusImageFilterIUS3IUS3

        Create a new object of the class itkModulusImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkModulusImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkModulusImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkModulusImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkModulusImageFilterIUS3IUS3 in _itkModulusImageFilterPython:
_itkModulusImageFilterPython.itkModulusImageFilterIUS3IUS3_swigregister(itkModulusImageFilterIUS3IUS3)
itkModulusImageFilterIUS3IUS3___New_orig__ = _itkModulusImageFilterPython.itkModulusImageFilterIUS3IUS3___New_orig__
itkModulusImageFilterIUS3IUS3_cast = _itkModulusImageFilterPython.itkModulusImageFilterIUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def modulus_image_filter(*args, **kwargs):
    """Procedural interface for ModulusImageFilter"""
    import itk
    instance = itk.ModulusImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def modulus_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ModulusImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.ModulusImageFilter.values()[0]
    else:
        filter_object = itk.ModulusImageFilter

    modulus_image_filter.__doc__ = filter_object.__doc__
    modulus_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    modulus_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.ModulusImageFilter, itkTemplate.itkTemplate):
        modulus_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        modulus_image_filter.__doc__ += "\n"
        modulus_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        modulus_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



