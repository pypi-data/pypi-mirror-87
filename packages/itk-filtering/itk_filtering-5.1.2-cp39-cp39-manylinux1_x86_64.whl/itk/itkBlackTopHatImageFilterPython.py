# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKMathematicalMorphologyPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkBlackTopHatImageFilterPython
else:
    import _itkBlackTopHatImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkBlackTopHatImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkBlackTopHatImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkFlatStructuringElementPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkOffsetPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.ITKCommonBasePython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkCovariantVectorPython
import itk.itkRGBPixelPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkNeighborhoodPython
import itk.itkBoxImageFilterPython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython

def itkBlackTopHatImageFilterID2ID2SE2_New():
    return itkBlackTopHatImageFilterID2ID2SE2.New()

class itkBlackTopHatImageFilterID2ID2SE2(itk.itkFlatStructuringElementPython.itkKernelImageFilterID2ID2SE2):
    r"""


    Black top hat extracts local minima that are smaller than the
    structuring element.

    Black top hat extracts local minima that are smaller than the
    structuring element. It subtracts the background from the input image.
    The output of the filter transforms the black valleys into white
    peaks.

    Top-hats are described in Chapter 4.5 of Pierre Soille's book
    "Morphological Image Analysis: Principles and Applications", Second
    Edition, Springer, 2003.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterID2ID2SE2___New_orig__)
    Clone = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterID2ID2SE2_Clone)
    SetSafeBorder = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterID2ID2SE2_SetSafeBorder)
    GetSafeBorder = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterID2ID2SE2_GetSafeBorder)
    SafeBorderOn = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterID2ID2SE2_SafeBorderOn)
    SafeBorderOff = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterID2ID2SE2_SafeBorderOff)
    AlgorithmType_BASIC = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterID2ID2SE2_AlgorithmType_BASIC
    
    AlgorithmType_HISTO = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterID2ID2SE2_AlgorithmType_HISTO
    
    AlgorithmType_ANCHOR = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterID2ID2SE2_AlgorithmType_ANCHOR
    
    AlgorithmType_VHGW = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterID2ID2SE2_AlgorithmType_VHGW
    
    SetAlgorithm = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterID2ID2SE2_SetAlgorithm)
    GetAlgorithm = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterID2ID2SE2_GetAlgorithm)
    SetForceAlgorithm = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterID2ID2SE2_SetForceAlgorithm)
    GetForceAlgorithm = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterID2ID2SE2_GetForceAlgorithm)
    ForceAlgorithmOn = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterID2ID2SE2_ForceAlgorithmOn)
    ForceAlgorithmOff = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterID2ID2SE2_ForceAlgorithmOff)
    __swig_destroy__ = _itkBlackTopHatImageFilterPython.delete_itkBlackTopHatImageFilterID2ID2SE2
    cast = _swig_new_static_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterID2ID2SE2_cast)

    def New(*args, **kargs):
        """New() -> itkBlackTopHatImageFilterID2ID2SE2

        Create a new object of the class itkBlackTopHatImageFilterID2ID2SE2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBlackTopHatImageFilterID2ID2SE2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBlackTopHatImageFilterID2ID2SE2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBlackTopHatImageFilterID2ID2SE2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBlackTopHatImageFilterID2ID2SE2 in _itkBlackTopHatImageFilterPython:
_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterID2ID2SE2_swigregister(itkBlackTopHatImageFilterID2ID2SE2)
itkBlackTopHatImageFilterID2ID2SE2___New_orig__ = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterID2ID2SE2___New_orig__
itkBlackTopHatImageFilterID2ID2SE2_cast = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterID2ID2SE2_cast


def itkBlackTopHatImageFilterID3ID3SE3_New():
    return itkBlackTopHatImageFilterID3ID3SE3.New()

class itkBlackTopHatImageFilterID3ID3SE3(itk.itkFlatStructuringElementPython.itkKernelImageFilterID3ID3SE3):
    r"""


    Black top hat extracts local minima that are smaller than the
    structuring element.

    Black top hat extracts local minima that are smaller than the
    structuring element. It subtracts the background from the input image.
    The output of the filter transforms the black valleys into white
    peaks.

    Top-hats are described in Chapter 4.5 of Pierre Soille's book
    "Morphological Image Analysis: Principles and Applications", Second
    Edition, Springer, 2003.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterID3ID3SE3___New_orig__)
    Clone = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterID3ID3SE3_Clone)
    SetSafeBorder = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterID3ID3SE3_SetSafeBorder)
    GetSafeBorder = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterID3ID3SE3_GetSafeBorder)
    SafeBorderOn = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterID3ID3SE3_SafeBorderOn)
    SafeBorderOff = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterID3ID3SE3_SafeBorderOff)
    AlgorithmType_BASIC = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterID3ID3SE3_AlgorithmType_BASIC
    
    AlgorithmType_HISTO = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterID3ID3SE3_AlgorithmType_HISTO
    
    AlgorithmType_ANCHOR = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterID3ID3SE3_AlgorithmType_ANCHOR
    
    AlgorithmType_VHGW = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterID3ID3SE3_AlgorithmType_VHGW
    
    SetAlgorithm = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterID3ID3SE3_SetAlgorithm)
    GetAlgorithm = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterID3ID3SE3_GetAlgorithm)
    SetForceAlgorithm = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterID3ID3SE3_SetForceAlgorithm)
    GetForceAlgorithm = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterID3ID3SE3_GetForceAlgorithm)
    ForceAlgorithmOn = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterID3ID3SE3_ForceAlgorithmOn)
    ForceAlgorithmOff = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterID3ID3SE3_ForceAlgorithmOff)
    __swig_destroy__ = _itkBlackTopHatImageFilterPython.delete_itkBlackTopHatImageFilterID3ID3SE3
    cast = _swig_new_static_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterID3ID3SE3_cast)

    def New(*args, **kargs):
        """New() -> itkBlackTopHatImageFilterID3ID3SE3

        Create a new object of the class itkBlackTopHatImageFilterID3ID3SE3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBlackTopHatImageFilterID3ID3SE3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBlackTopHatImageFilterID3ID3SE3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBlackTopHatImageFilterID3ID3SE3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBlackTopHatImageFilterID3ID3SE3 in _itkBlackTopHatImageFilterPython:
_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterID3ID3SE3_swigregister(itkBlackTopHatImageFilterID3ID3SE3)
itkBlackTopHatImageFilterID3ID3SE3___New_orig__ = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterID3ID3SE3___New_orig__
itkBlackTopHatImageFilterID3ID3SE3_cast = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterID3ID3SE3_cast


def itkBlackTopHatImageFilterIF2IF2SE2_New():
    return itkBlackTopHatImageFilterIF2IF2SE2.New()

class itkBlackTopHatImageFilterIF2IF2SE2(itk.itkFlatStructuringElementPython.itkKernelImageFilterIF2IF2SE2):
    r"""


    Black top hat extracts local minima that are smaller than the
    structuring element.

    Black top hat extracts local minima that are smaller than the
    structuring element. It subtracts the background from the input image.
    The output of the filter transforms the black valleys into white
    peaks.

    Top-hats are described in Chapter 4.5 of Pierre Soille's book
    "Morphological Image Analysis: Principles and Applications", Second
    Edition, Springer, 2003.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIF2IF2SE2___New_orig__)
    Clone = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIF2IF2SE2_Clone)
    SetSafeBorder = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIF2IF2SE2_SetSafeBorder)
    GetSafeBorder = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIF2IF2SE2_GetSafeBorder)
    SafeBorderOn = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIF2IF2SE2_SafeBorderOn)
    SafeBorderOff = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIF2IF2SE2_SafeBorderOff)
    AlgorithmType_BASIC = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIF2IF2SE2_AlgorithmType_BASIC
    
    AlgorithmType_HISTO = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIF2IF2SE2_AlgorithmType_HISTO
    
    AlgorithmType_ANCHOR = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIF2IF2SE2_AlgorithmType_ANCHOR
    
    AlgorithmType_VHGW = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIF2IF2SE2_AlgorithmType_VHGW
    
    SetAlgorithm = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIF2IF2SE2_SetAlgorithm)
    GetAlgorithm = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIF2IF2SE2_GetAlgorithm)
    SetForceAlgorithm = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIF2IF2SE2_SetForceAlgorithm)
    GetForceAlgorithm = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIF2IF2SE2_GetForceAlgorithm)
    ForceAlgorithmOn = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIF2IF2SE2_ForceAlgorithmOn)
    ForceAlgorithmOff = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIF2IF2SE2_ForceAlgorithmOff)
    __swig_destroy__ = _itkBlackTopHatImageFilterPython.delete_itkBlackTopHatImageFilterIF2IF2SE2
    cast = _swig_new_static_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIF2IF2SE2_cast)

    def New(*args, **kargs):
        """New() -> itkBlackTopHatImageFilterIF2IF2SE2

        Create a new object of the class itkBlackTopHatImageFilterIF2IF2SE2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBlackTopHatImageFilterIF2IF2SE2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBlackTopHatImageFilterIF2IF2SE2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBlackTopHatImageFilterIF2IF2SE2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBlackTopHatImageFilterIF2IF2SE2 in _itkBlackTopHatImageFilterPython:
_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIF2IF2SE2_swigregister(itkBlackTopHatImageFilterIF2IF2SE2)
itkBlackTopHatImageFilterIF2IF2SE2___New_orig__ = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIF2IF2SE2___New_orig__
itkBlackTopHatImageFilterIF2IF2SE2_cast = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIF2IF2SE2_cast


def itkBlackTopHatImageFilterIF3IF3SE3_New():
    return itkBlackTopHatImageFilterIF3IF3SE3.New()

class itkBlackTopHatImageFilterIF3IF3SE3(itk.itkFlatStructuringElementPython.itkKernelImageFilterIF3IF3SE3):
    r"""


    Black top hat extracts local minima that are smaller than the
    structuring element.

    Black top hat extracts local minima that are smaller than the
    structuring element. It subtracts the background from the input image.
    The output of the filter transforms the black valleys into white
    peaks.

    Top-hats are described in Chapter 4.5 of Pierre Soille's book
    "Morphological Image Analysis: Principles and Applications", Second
    Edition, Springer, 2003.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIF3IF3SE3___New_orig__)
    Clone = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIF3IF3SE3_Clone)
    SetSafeBorder = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIF3IF3SE3_SetSafeBorder)
    GetSafeBorder = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIF3IF3SE3_GetSafeBorder)
    SafeBorderOn = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIF3IF3SE3_SafeBorderOn)
    SafeBorderOff = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIF3IF3SE3_SafeBorderOff)
    AlgorithmType_BASIC = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIF3IF3SE3_AlgorithmType_BASIC
    
    AlgorithmType_HISTO = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIF3IF3SE3_AlgorithmType_HISTO
    
    AlgorithmType_ANCHOR = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIF3IF3SE3_AlgorithmType_ANCHOR
    
    AlgorithmType_VHGW = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIF3IF3SE3_AlgorithmType_VHGW
    
    SetAlgorithm = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIF3IF3SE3_SetAlgorithm)
    GetAlgorithm = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIF3IF3SE3_GetAlgorithm)
    SetForceAlgorithm = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIF3IF3SE3_SetForceAlgorithm)
    GetForceAlgorithm = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIF3IF3SE3_GetForceAlgorithm)
    ForceAlgorithmOn = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIF3IF3SE3_ForceAlgorithmOn)
    ForceAlgorithmOff = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIF3IF3SE3_ForceAlgorithmOff)
    __swig_destroy__ = _itkBlackTopHatImageFilterPython.delete_itkBlackTopHatImageFilterIF3IF3SE3
    cast = _swig_new_static_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIF3IF3SE3_cast)

    def New(*args, **kargs):
        """New() -> itkBlackTopHatImageFilterIF3IF3SE3

        Create a new object of the class itkBlackTopHatImageFilterIF3IF3SE3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBlackTopHatImageFilterIF3IF3SE3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBlackTopHatImageFilterIF3IF3SE3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBlackTopHatImageFilterIF3IF3SE3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBlackTopHatImageFilterIF3IF3SE3 in _itkBlackTopHatImageFilterPython:
_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIF3IF3SE3_swigregister(itkBlackTopHatImageFilterIF3IF3SE3)
itkBlackTopHatImageFilterIF3IF3SE3___New_orig__ = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIF3IF3SE3___New_orig__
itkBlackTopHatImageFilterIF3IF3SE3_cast = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIF3IF3SE3_cast


def itkBlackTopHatImageFilterISS2ISS2SE2_New():
    return itkBlackTopHatImageFilterISS2ISS2SE2.New()

class itkBlackTopHatImageFilterISS2ISS2SE2(itk.itkFlatStructuringElementPython.itkKernelImageFilterISS2ISS2SE2):
    r"""


    Black top hat extracts local minima that are smaller than the
    structuring element.

    Black top hat extracts local minima that are smaller than the
    structuring element. It subtracts the background from the input image.
    The output of the filter transforms the black valleys into white
    peaks.

    Top-hats are described in Chapter 4.5 of Pierre Soille's book
    "Morphological Image Analysis: Principles and Applications", Second
    Edition, Springer, 2003.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterISS2ISS2SE2___New_orig__)
    Clone = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterISS2ISS2SE2_Clone)
    SetSafeBorder = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterISS2ISS2SE2_SetSafeBorder)
    GetSafeBorder = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterISS2ISS2SE2_GetSafeBorder)
    SafeBorderOn = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterISS2ISS2SE2_SafeBorderOn)
    SafeBorderOff = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterISS2ISS2SE2_SafeBorderOff)
    AlgorithmType_BASIC = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterISS2ISS2SE2_AlgorithmType_BASIC
    
    AlgorithmType_HISTO = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterISS2ISS2SE2_AlgorithmType_HISTO
    
    AlgorithmType_ANCHOR = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterISS2ISS2SE2_AlgorithmType_ANCHOR
    
    AlgorithmType_VHGW = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterISS2ISS2SE2_AlgorithmType_VHGW
    
    SetAlgorithm = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterISS2ISS2SE2_SetAlgorithm)
    GetAlgorithm = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterISS2ISS2SE2_GetAlgorithm)
    SetForceAlgorithm = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterISS2ISS2SE2_SetForceAlgorithm)
    GetForceAlgorithm = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterISS2ISS2SE2_GetForceAlgorithm)
    ForceAlgorithmOn = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterISS2ISS2SE2_ForceAlgorithmOn)
    ForceAlgorithmOff = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterISS2ISS2SE2_ForceAlgorithmOff)
    __swig_destroy__ = _itkBlackTopHatImageFilterPython.delete_itkBlackTopHatImageFilterISS2ISS2SE2
    cast = _swig_new_static_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterISS2ISS2SE2_cast)

    def New(*args, **kargs):
        """New() -> itkBlackTopHatImageFilterISS2ISS2SE2

        Create a new object of the class itkBlackTopHatImageFilterISS2ISS2SE2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBlackTopHatImageFilterISS2ISS2SE2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBlackTopHatImageFilterISS2ISS2SE2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBlackTopHatImageFilterISS2ISS2SE2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBlackTopHatImageFilterISS2ISS2SE2 in _itkBlackTopHatImageFilterPython:
_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterISS2ISS2SE2_swigregister(itkBlackTopHatImageFilterISS2ISS2SE2)
itkBlackTopHatImageFilterISS2ISS2SE2___New_orig__ = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterISS2ISS2SE2___New_orig__
itkBlackTopHatImageFilterISS2ISS2SE2_cast = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterISS2ISS2SE2_cast


def itkBlackTopHatImageFilterISS3ISS3SE3_New():
    return itkBlackTopHatImageFilterISS3ISS3SE3.New()

class itkBlackTopHatImageFilterISS3ISS3SE3(itk.itkFlatStructuringElementPython.itkKernelImageFilterISS3ISS3SE3):
    r"""


    Black top hat extracts local minima that are smaller than the
    structuring element.

    Black top hat extracts local minima that are smaller than the
    structuring element. It subtracts the background from the input image.
    The output of the filter transforms the black valleys into white
    peaks.

    Top-hats are described in Chapter 4.5 of Pierre Soille's book
    "Morphological Image Analysis: Principles and Applications", Second
    Edition, Springer, 2003.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterISS3ISS3SE3___New_orig__)
    Clone = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterISS3ISS3SE3_Clone)
    SetSafeBorder = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterISS3ISS3SE3_SetSafeBorder)
    GetSafeBorder = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterISS3ISS3SE3_GetSafeBorder)
    SafeBorderOn = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterISS3ISS3SE3_SafeBorderOn)
    SafeBorderOff = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterISS3ISS3SE3_SafeBorderOff)
    AlgorithmType_BASIC = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterISS3ISS3SE3_AlgorithmType_BASIC
    
    AlgorithmType_HISTO = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterISS3ISS3SE3_AlgorithmType_HISTO
    
    AlgorithmType_ANCHOR = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterISS3ISS3SE3_AlgorithmType_ANCHOR
    
    AlgorithmType_VHGW = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterISS3ISS3SE3_AlgorithmType_VHGW
    
    SetAlgorithm = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterISS3ISS3SE3_SetAlgorithm)
    GetAlgorithm = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterISS3ISS3SE3_GetAlgorithm)
    SetForceAlgorithm = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterISS3ISS3SE3_SetForceAlgorithm)
    GetForceAlgorithm = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterISS3ISS3SE3_GetForceAlgorithm)
    ForceAlgorithmOn = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterISS3ISS3SE3_ForceAlgorithmOn)
    ForceAlgorithmOff = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterISS3ISS3SE3_ForceAlgorithmOff)
    __swig_destroy__ = _itkBlackTopHatImageFilterPython.delete_itkBlackTopHatImageFilterISS3ISS3SE3
    cast = _swig_new_static_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterISS3ISS3SE3_cast)

    def New(*args, **kargs):
        """New() -> itkBlackTopHatImageFilterISS3ISS3SE3

        Create a new object of the class itkBlackTopHatImageFilterISS3ISS3SE3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBlackTopHatImageFilterISS3ISS3SE3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBlackTopHatImageFilterISS3ISS3SE3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBlackTopHatImageFilterISS3ISS3SE3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBlackTopHatImageFilterISS3ISS3SE3 in _itkBlackTopHatImageFilterPython:
_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterISS3ISS3SE3_swigregister(itkBlackTopHatImageFilterISS3ISS3SE3)
itkBlackTopHatImageFilterISS3ISS3SE3___New_orig__ = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterISS3ISS3SE3___New_orig__
itkBlackTopHatImageFilterISS3ISS3SE3_cast = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterISS3ISS3SE3_cast


def itkBlackTopHatImageFilterIUC2IUC2SE2_New():
    return itkBlackTopHatImageFilterIUC2IUC2SE2.New()

class itkBlackTopHatImageFilterIUC2IUC2SE2(itk.itkFlatStructuringElementPython.itkKernelImageFilterIUC2IUC2SE2):
    r"""


    Black top hat extracts local minima that are smaller than the
    structuring element.

    Black top hat extracts local minima that are smaller than the
    structuring element. It subtracts the background from the input image.
    The output of the filter transforms the black valleys into white
    peaks.

    Top-hats are described in Chapter 4.5 of Pierre Soille's book
    "Morphological Image Analysis: Principles and Applications", Second
    Edition, Springer, 2003.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUC2IUC2SE2___New_orig__)
    Clone = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUC2IUC2SE2_Clone)
    SetSafeBorder = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUC2IUC2SE2_SetSafeBorder)
    GetSafeBorder = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUC2IUC2SE2_GetSafeBorder)
    SafeBorderOn = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUC2IUC2SE2_SafeBorderOn)
    SafeBorderOff = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUC2IUC2SE2_SafeBorderOff)
    AlgorithmType_BASIC = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUC2IUC2SE2_AlgorithmType_BASIC
    
    AlgorithmType_HISTO = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUC2IUC2SE2_AlgorithmType_HISTO
    
    AlgorithmType_ANCHOR = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUC2IUC2SE2_AlgorithmType_ANCHOR
    
    AlgorithmType_VHGW = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUC2IUC2SE2_AlgorithmType_VHGW
    
    SetAlgorithm = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUC2IUC2SE2_SetAlgorithm)
    GetAlgorithm = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUC2IUC2SE2_GetAlgorithm)
    SetForceAlgorithm = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUC2IUC2SE2_SetForceAlgorithm)
    GetForceAlgorithm = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUC2IUC2SE2_GetForceAlgorithm)
    ForceAlgorithmOn = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUC2IUC2SE2_ForceAlgorithmOn)
    ForceAlgorithmOff = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUC2IUC2SE2_ForceAlgorithmOff)
    __swig_destroy__ = _itkBlackTopHatImageFilterPython.delete_itkBlackTopHatImageFilterIUC2IUC2SE2
    cast = _swig_new_static_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUC2IUC2SE2_cast)

    def New(*args, **kargs):
        """New() -> itkBlackTopHatImageFilterIUC2IUC2SE2

        Create a new object of the class itkBlackTopHatImageFilterIUC2IUC2SE2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBlackTopHatImageFilterIUC2IUC2SE2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBlackTopHatImageFilterIUC2IUC2SE2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBlackTopHatImageFilterIUC2IUC2SE2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBlackTopHatImageFilterIUC2IUC2SE2 in _itkBlackTopHatImageFilterPython:
_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUC2IUC2SE2_swigregister(itkBlackTopHatImageFilterIUC2IUC2SE2)
itkBlackTopHatImageFilterIUC2IUC2SE2___New_orig__ = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUC2IUC2SE2___New_orig__
itkBlackTopHatImageFilterIUC2IUC2SE2_cast = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUC2IUC2SE2_cast


def itkBlackTopHatImageFilterIUC3IUC3SE3_New():
    return itkBlackTopHatImageFilterIUC3IUC3SE3.New()

class itkBlackTopHatImageFilterIUC3IUC3SE3(itk.itkFlatStructuringElementPython.itkKernelImageFilterIUC3IUC3SE3):
    r"""


    Black top hat extracts local minima that are smaller than the
    structuring element.

    Black top hat extracts local minima that are smaller than the
    structuring element. It subtracts the background from the input image.
    The output of the filter transforms the black valleys into white
    peaks.

    Top-hats are described in Chapter 4.5 of Pierre Soille's book
    "Morphological Image Analysis: Principles and Applications", Second
    Edition, Springer, 2003.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUC3IUC3SE3___New_orig__)
    Clone = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUC3IUC3SE3_Clone)
    SetSafeBorder = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUC3IUC3SE3_SetSafeBorder)
    GetSafeBorder = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUC3IUC3SE3_GetSafeBorder)
    SafeBorderOn = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUC3IUC3SE3_SafeBorderOn)
    SafeBorderOff = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUC3IUC3SE3_SafeBorderOff)
    AlgorithmType_BASIC = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUC3IUC3SE3_AlgorithmType_BASIC
    
    AlgorithmType_HISTO = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUC3IUC3SE3_AlgorithmType_HISTO
    
    AlgorithmType_ANCHOR = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUC3IUC3SE3_AlgorithmType_ANCHOR
    
    AlgorithmType_VHGW = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUC3IUC3SE3_AlgorithmType_VHGW
    
    SetAlgorithm = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUC3IUC3SE3_SetAlgorithm)
    GetAlgorithm = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUC3IUC3SE3_GetAlgorithm)
    SetForceAlgorithm = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUC3IUC3SE3_SetForceAlgorithm)
    GetForceAlgorithm = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUC3IUC3SE3_GetForceAlgorithm)
    ForceAlgorithmOn = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUC3IUC3SE3_ForceAlgorithmOn)
    ForceAlgorithmOff = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUC3IUC3SE3_ForceAlgorithmOff)
    __swig_destroy__ = _itkBlackTopHatImageFilterPython.delete_itkBlackTopHatImageFilterIUC3IUC3SE3
    cast = _swig_new_static_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUC3IUC3SE3_cast)

    def New(*args, **kargs):
        """New() -> itkBlackTopHatImageFilterIUC3IUC3SE3

        Create a new object of the class itkBlackTopHatImageFilterIUC3IUC3SE3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBlackTopHatImageFilterIUC3IUC3SE3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBlackTopHatImageFilterIUC3IUC3SE3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBlackTopHatImageFilterIUC3IUC3SE3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBlackTopHatImageFilterIUC3IUC3SE3 in _itkBlackTopHatImageFilterPython:
_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUC3IUC3SE3_swigregister(itkBlackTopHatImageFilterIUC3IUC3SE3)
itkBlackTopHatImageFilterIUC3IUC3SE3___New_orig__ = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUC3IUC3SE3___New_orig__
itkBlackTopHatImageFilterIUC3IUC3SE3_cast = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUC3IUC3SE3_cast


def itkBlackTopHatImageFilterIUS2IUS2SE2_New():
    return itkBlackTopHatImageFilterIUS2IUS2SE2.New()

class itkBlackTopHatImageFilterIUS2IUS2SE2(itk.itkFlatStructuringElementPython.itkKernelImageFilterIUS2IUS2SE2):
    r"""


    Black top hat extracts local minima that are smaller than the
    structuring element.

    Black top hat extracts local minima that are smaller than the
    structuring element. It subtracts the background from the input image.
    The output of the filter transforms the black valleys into white
    peaks.

    Top-hats are described in Chapter 4.5 of Pierre Soille's book
    "Morphological Image Analysis: Principles and Applications", Second
    Edition, Springer, 2003.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUS2IUS2SE2___New_orig__)
    Clone = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUS2IUS2SE2_Clone)
    SetSafeBorder = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUS2IUS2SE2_SetSafeBorder)
    GetSafeBorder = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUS2IUS2SE2_GetSafeBorder)
    SafeBorderOn = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUS2IUS2SE2_SafeBorderOn)
    SafeBorderOff = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUS2IUS2SE2_SafeBorderOff)
    AlgorithmType_BASIC = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUS2IUS2SE2_AlgorithmType_BASIC
    
    AlgorithmType_HISTO = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUS2IUS2SE2_AlgorithmType_HISTO
    
    AlgorithmType_ANCHOR = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUS2IUS2SE2_AlgorithmType_ANCHOR
    
    AlgorithmType_VHGW = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUS2IUS2SE2_AlgorithmType_VHGW
    
    SetAlgorithm = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUS2IUS2SE2_SetAlgorithm)
    GetAlgorithm = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUS2IUS2SE2_GetAlgorithm)
    SetForceAlgorithm = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUS2IUS2SE2_SetForceAlgorithm)
    GetForceAlgorithm = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUS2IUS2SE2_GetForceAlgorithm)
    ForceAlgorithmOn = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUS2IUS2SE2_ForceAlgorithmOn)
    ForceAlgorithmOff = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUS2IUS2SE2_ForceAlgorithmOff)
    __swig_destroy__ = _itkBlackTopHatImageFilterPython.delete_itkBlackTopHatImageFilterIUS2IUS2SE2
    cast = _swig_new_static_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUS2IUS2SE2_cast)

    def New(*args, **kargs):
        """New() -> itkBlackTopHatImageFilterIUS2IUS2SE2

        Create a new object of the class itkBlackTopHatImageFilterIUS2IUS2SE2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBlackTopHatImageFilterIUS2IUS2SE2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBlackTopHatImageFilterIUS2IUS2SE2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBlackTopHatImageFilterIUS2IUS2SE2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBlackTopHatImageFilterIUS2IUS2SE2 in _itkBlackTopHatImageFilterPython:
_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUS2IUS2SE2_swigregister(itkBlackTopHatImageFilterIUS2IUS2SE2)
itkBlackTopHatImageFilterIUS2IUS2SE2___New_orig__ = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUS2IUS2SE2___New_orig__
itkBlackTopHatImageFilterIUS2IUS2SE2_cast = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUS2IUS2SE2_cast


def itkBlackTopHatImageFilterIUS3IUS3SE3_New():
    return itkBlackTopHatImageFilterIUS3IUS3SE3.New()

class itkBlackTopHatImageFilterIUS3IUS3SE3(itk.itkFlatStructuringElementPython.itkKernelImageFilterIUS3IUS3SE3):
    r"""


    Black top hat extracts local minima that are smaller than the
    structuring element.

    Black top hat extracts local minima that are smaller than the
    structuring element. It subtracts the background from the input image.
    The output of the filter transforms the black valleys into white
    peaks.

    Top-hats are described in Chapter 4.5 of Pierre Soille's book
    "Morphological Image Analysis: Principles and Applications", Second
    Edition, Springer, 2003.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUS3IUS3SE3___New_orig__)
    Clone = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUS3IUS3SE3_Clone)
    SetSafeBorder = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUS3IUS3SE3_SetSafeBorder)
    GetSafeBorder = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUS3IUS3SE3_GetSafeBorder)
    SafeBorderOn = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUS3IUS3SE3_SafeBorderOn)
    SafeBorderOff = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUS3IUS3SE3_SafeBorderOff)
    AlgorithmType_BASIC = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUS3IUS3SE3_AlgorithmType_BASIC
    
    AlgorithmType_HISTO = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUS3IUS3SE3_AlgorithmType_HISTO
    
    AlgorithmType_ANCHOR = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUS3IUS3SE3_AlgorithmType_ANCHOR
    
    AlgorithmType_VHGW = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUS3IUS3SE3_AlgorithmType_VHGW
    
    SetAlgorithm = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUS3IUS3SE3_SetAlgorithm)
    GetAlgorithm = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUS3IUS3SE3_GetAlgorithm)
    SetForceAlgorithm = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUS3IUS3SE3_SetForceAlgorithm)
    GetForceAlgorithm = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUS3IUS3SE3_GetForceAlgorithm)
    ForceAlgorithmOn = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUS3IUS3SE3_ForceAlgorithmOn)
    ForceAlgorithmOff = _swig_new_instance_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUS3IUS3SE3_ForceAlgorithmOff)
    __swig_destroy__ = _itkBlackTopHatImageFilterPython.delete_itkBlackTopHatImageFilterIUS3IUS3SE3
    cast = _swig_new_static_method(_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUS3IUS3SE3_cast)

    def New(*args, **kargs):
        """New() -> itkBlackTopHatImageFilterIUS3IUS3SE3

        Create a new object of the class itkBlackTopHatImageFilterIUS3IUS3SE3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBlackTopHatImageFilterIUS3IUS3SE3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBlackTopHatImageFilterIUS3IUS3SE3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBlackTopHatImageFilterIUS3IUS3SE3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBlackTopHatImageFilterIUS3IUS3SE3 in _itkBlackTopHatImageFilterPython:
_itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUS3IUS3SE3_swigregister(itkBlackTopHatImageFilterIUS3IUS3SE3)
itkBlackTopHatImageFilterIUS3IUS3SE3___New_orig__ = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUS3IUS3SE3___New_orig__
itkBlackTopHatImageFilterIUS3IUS3SE3_cast = _itkBlackTopHatImageFilterPython.itkBlackTopHatImageFilterIUS3IUS3SE3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def black_top_hat_image_filter(*args, **kwargs):
    """Procedural interface for BlackTopHatImageFilter"""
    import itk
    instance = itk.BlackTopHatImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def black_top_hat_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.BlackTopHatImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.BlackTopHatImageFilter.values()[0]
    else:
        filter_object = itk.BlackTopHatImageFilter

    black_top_hat_image_filter.__doc__ = filter_object.__doc__
    black_top_hat_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    black_top_hat_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.BlackTopHatImageFilter, itkTemplate.itkTemplate):
        black_top_hat_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        black_top_hat_image_filter.__doc__ += "\n"
        black_top_hat_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        black_top_hat_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



