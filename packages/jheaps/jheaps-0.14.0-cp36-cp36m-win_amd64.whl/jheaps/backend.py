# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


# The Python-JHeaps library

from enum import Enum




from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _backend
else:
    import _backend

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


STATUS_SUCCESS = _backend.STATUS_SUCCESS
STATUS_ERROR = _backend.STATUS_ERROR
STATUS_ILLEGAL_ARGUMENT = _backend.STATUS_ILLEGAL_ARGUMENT
STATUS_UNSUPPORTED_OPERATION = _backend.STATUS_UNSUPPORTED_OPERATION
STATUS_INDEX_OUT_OF_BOUNDS = _backend.STATUS_INDEX_OUT_OF_BOUNDS
STATUS_NO_SUCH_ELEMENT = _backend.STATUS_NO_SUCH_ELEMENT
STATUS_NULL_POINTER = _backend.STATUS_NULL_POINTER
STATUS_CLASS_CAST = _backend.STATUS_CLASS_CAST
STATUS_IO_ERROR = _backend.STATUS_IO_ERROR
STATUS_ILLEGAL_STATE = _backend.STATUS_ILLEGAL_STATE
HEAP_TYPE_MERGEABLE_ADDRESSABLE_FIBONACCI = _backend.HEAP_TYPE_MERGEABLE_ADDRESSABLE_FIBONACCI
HEAP_TYPE_MERGEABLE_ADDRESSABLE_FIBONACCI_SIMPLE = _backend.HEAP_TYPE_MERGEABLE_ADDRESSABLE_FIBONACCI_SIMPLE
HEAP_TYPE_MERGEABLE_ADDRESSABLE_PAIRING = _backend.HEAP_TYPE_MERGEABLE_ADDRESSABLE_PAIRING
HEAP_TYPE_MERGEABLE_ADDRESSABLE_PAIRING_RANK = _backend.HEAP_TYPE_MERGEABLE_ADDRESSABLE_PAIRING_RANK
HEAP_TYPE_MERGEABLE_ADDRESSABLE_PAIRING_COSTLESSMELD = _backend.HEAP_TYPE_MERGEABLE_ADDRESSABLE_PAIRING_COSTLESSMELD
HEAP_TYPE_MERGEABLE_ADDRESSABLE_HOLLOW = _backend.HEAP_TYPE_MERGEABLE_ADDRESSABLE_HOLLOW
HEAP_TYPE_MERGEABLE_ADDRESSABLE_LEFTIST = _backend.HEAP_TYPE_MERGEABLE_ADDRESSABLE_LEFTIST
HEAP_TYPE_MERGEABLE_ADDRESSABLE_SKEW = _backend.HEAP_TYPE_MERGEABLE_ADDRESSABLE_SKEW
HEAP_TYPE_BINARY_IMPLICIT = _backend.HEAP_TYPE_BINARY_IMPLICIT
HEAP_TYPE_BINARY_IMPLICIT_WEAK = _backend.HEAP_TYPE_BINARY_IMPLICIT_WEAK
HEAP_TYPE_BINARY_IMPLICIT_WEAK_BULKINSERT = _backend.HEAP_TYPE_BINARY_IMPLICIT_WEAK_BULKINSERT
HEAP_TYPE_ADDRESSABLE_BINARY_IMPLICIT = _backend.HEAP_TYPE_ADDRESSABLE_BINARY_IMPLICIT
HEAP_TYPE_ADDRESSABLE_BINARY_EXPLICIT = _backend.HEAP_TYPE_ADDRESSABLE_BINARY_EXPLICIT
HEAP_TYPE_DARY_IMPLICIT = _backend.HEAP_TYPE_DARY_IMPLICIT
HEAP_TYPE_ADDRESSABLE_DARY_IMPLICIT = _backend.HEAP_TYPE_ADDRESSABLE_DARY_IMPLICIT
HEAP_TYPE_ADDRESSABLE_DARY_EXPLICIT = _backend.HEAP_TYPE_ADDRESSABLE_DARY_EXPLICIT
HEAP_TYPE_MERGEABLE_ADDRESSABLE_BINARY_EXPLICIT_SOFT = _backend.HEAP_TYPE_MERGEABLE_ADDRESSABLE_BINARY_EXPLICIT_SOFT
HEAP_TYPE_DOUBLEENDED_BINARY_IMPLICIT_MINMAX = _backend.HEAP_TYPE_DOUBLEENDED_BINARY_IMPLICIT_MINMAX
HEAP_TYPE_DOUBLEENDED_MERGEABLE_ADDRESSABLE_FIBONACCI_REFLECTED = _backend.HEAP_TYPE_DOUBLEENDED_MERGEABLE_ADDRESSABLE_FIBONACCI_REFLECTED
HEAP_TYPE_DOUBLEENDED_MERGEABLE_ADDRESSABLE_PAIRING_REFLECTED = _backend.HEAP_TYPE_DOUBLEENDED_MERGEABLE_ADDRESSABLE_PAIRING_REFLECTED
HEAP_TYPE_MONOTONE_LONG_RADIX = _backend.HEAP_TYPE_MONOTONE_LONG_RADIX
HEAP_TYPE_MONOTONE_ADDRESSABLE_LONG_RADIX = _backend.HEAP_TYPE_MONOTONE_ADDRESSABLE_LONG_RADIX
HEAP_TYPE_MONOTONE_DOUBLE_RADIX = _backend.HEAP_TYPE_MONOTONE_DOUBLE_RADIX
HEAP_TYPE_MONOTONE_ADDRESSABLE_DOUBLE_RADIX = _backend.HEAP_TYPE_MONOTONE_ADDRESSABLE_DOUBLE_RADIX

def jheaps_init():
    return _backend.jheaps_init()

def jheaps_cleanup():
    return _backend.jheaps_cleanup()

def jheaps_is_initialized():
    return _backend.jheaps_is_initialized()

def jheaps_error_clear_errno():
    return _backend.jheaps_error_clear_errno()

def jheaps_error_get_errno():
    return _backend.jheaps_error_get_errno()

def jheaps_error_get_errno_msg():
    return _backend.jheaps_error_get_errno_msg()

def jheaps_error_print_stack_trace():
    return _backend.jheaps_error_print_stack_trace()

def jheaps_vmLocatorSymbol():
    return _backend.jheaps_vmLocatorSymbol()


class HeapType(Enum):
    HEAP_TYPE_MERGEABLE_ADDRESSABLE_FIBONACCI = _backend.HEAP_TYPE_MERGEABLE_ADDRESSABLE_FIBONACCI
    HEAP_TYPE_MERGEABLE_ADDRESSABLE_FIBONACCI_SIMPLE = _backend.HEAP_TYPE_MERGEABLE_ADDRESSABLE_FIBONACCI_SIMPLE
    HEAP_TYPE_MERGEABLE_ADDRESSABLE_PAIRING = _backend.HEAP_TYPE_MERGEABLE_ADDRESSABLE_PAIRING
    HEAP_TYPE_MERGEABLE_ADDRESSABLE_PAIRING_RANK = _backend.HEAP_TYPE_MERGEABLE_ADDRESSABLE_PAIRING_RANK
    HEAP_TYPE_MERGEABLE_ADDRESSABLE_PAIRING_COSTLESSMELD = _backend.HEAP_TYPE_MERGEABLE_ADDRESSABLE_PAIRING_COSTLESSMELD
    HEAP_TYPE_MERGEABLE_ADDRESSABLE_HOLLOW = _backend.HEAP_TYPE_MERGEABLE_ADDRESSABLE_HOLLOW
    HEAP_TYPE_MERGEABLE_ADDRESSABLE_LEFTIST = _backend.HEAP_TYPE_MERGEABLE_ADDRESSABLE_LEFTIST
    HEAP_TYPE_MERGEABLE_ADDRESSABLE_SKEW = _backend.HEAP_TYPE_MERGEABLE_ADDRESSABLE_SKEW
    HEAP_TYPE_BINARY_IMPLICIT = _backend.HEAP_TYPE_BINARY_IMPLICIT
    HEAP_TYPE_BINARY_IMPLICIT_WEAK = _backend.HEAP_TYPE_BINARY_IMPLICIT_WEAK
    HEAP_TYPE_BINARY_IMPLICIT_WEAK_BULKINSERT = _backend.HEAP_TYPE_BINARY_IMPLICIT_WEAK_BULKINSERT
    HEAP_TYPE_ADDRESSABLE_BINARY_IMPLICIT = _backend.HEAP_TYPE_ADDRESSABLE_BINARY_IMPLICIT
    HEAP_TYPE_ADDRESSABLE_BINARY_EXPLICIT = _backend.HEAP_TYPE_ADDRESSABLE_BINARY_EXPLICIT
    HEAP_TYPE_DARY_IMPLICIT = _backend.HEAP_TYPE_DARY_IMPLICIT
    HEAP_TYPE_ADDRESSABLE_DARY_IMPLICIT = _backend.HEAP_TYPE_ADDRESSABLE_DARY_IMPLICIT
    HEAP_TYPE_ADDRESSABLE_DARY_EXPLICIT = _backend.HEAP_TYPE_ADDRESSABLE_DARY_EXPLICIT
    HEAP_TYPE_MERGEABLE_ADDRESSABLE_BINARY_EXPLICIT_SOFT = _backend.HEAP_TYPE_MERGEABLE_ADDRESSABLE_BINARY_EXPLICIT_SOFT
    HEAP_TYPE_DOUBLEENDED_BINARY_IMPLICIT_MINMAX = _backend.HEAP_TYPE_DOUBLEENDED_BINARY_IMPLICIT_MINMAX
    HEAP_TYPE_DOUBLEENDED_MERGEABLE_ADDRESSABLE_FIBONACCI_REFLECTED = _backend.HEAP_TYPE_DOUBLEENDED_MERGEABLE_ADDRESSABLE_FIBONACCI_REFLECTED
    HEAP_TYPE_DOUBLEENDED_MERGEABLE_ADDRESSABLE_PAIRING_REFLECTED = _backend.HEAP_TYPE_DOUBLEENDED_MERGEABLE_ADDRESSABLE_PAIRING_REFLECTED
    HEAP_TYPE_MONOTONE_LONG_RADIX = _backend.HEAP_TYPE_MONOTONE_LONG_RADIX
    HEAP_TYPE_MONOTONE_ADDRESSABLE_LONG_RADIX = _backend.HEAP_TYPE_MONOTONE_ADDRESSABLE_LONG_RADIX
    HEAP_TYPE_MONOTONE_DOUBLE_RADIX = _backend.HEAP_TYPE_MONOTONE_DOUBLE_RADIX
    HEAP_TYPE_MONOTONE_ADDRESSABLE_DOUBLE_RADIX = _backend.HEAP_TYPE_MONOTONE_ADDRESSABLE_DOUBLE_RADIX



def jheaps_AHeap_D_insert_key(arg1, arg2):
    return _backend.jheaps_AHeap_D_insert_key(arg1, arg2)

def jheaps_AHeap_L_insert_key(arg1, arg2):
    return _backend.jheaps_AHeap_L_insert_key(arg1, arg2)

def jheaps_AHeap_D_insert_key_value(arg1, arg2, arg3):
    return _backend.jheaps_AHeap_D_insert_key_value(arg1, arg2, arg3)

def jheaps_AHeap_L_insert_key_value(arg1, arg2, arg3):
    return _backend.jheaps_AHeap_L_insert_key_value(arg1, arg2, arg3)

def jheaps_AHeap_find_min(arg1):
    return _backend.jheaps_AHeap_find_min(arg1)

def jheaps_AHeap_delete_min(arg1):
    return _backend.jheaps_AHeap_delete_min(arg1)

def jheaps_AHeap_size(arg1):
    return _backend.jheaps_AHeap_size(arg1)

def jheaps_AHeap_isempty(arg1):
    return _backend.jheaps_AHeap_isempty(arg1)

def jheaps_AHeap_clear(arg1):
    return _backend.jheaps_AHeap_clear(arg1)

def jheaps_AHeapHandle_D_get_key(arg1):
    return _backend.jheaps_AHeapHandle_D_get_key(arg1)

def jheaps_AHeapHandle_L_get_key(arg1):
    return _backend.jheaps_AHeapHandle_L_get_key(arg1)

def jheaps_AHeapHandle_get_value(arg1):
    return _backend.jheaps_AHeapHandle_get_value(arg1)

def jheaps_AHeapHandle_set_value(arg1, arg2):
    return _backend.jheaps_AHeapHandle_set_value(arg1, arg2)

def jheaps_AHeapHandle_D_decrease_key(arg1, arg2):
    return _backend.jheaps_AHeapHandle_D_decrease_key(arg1, arg2)

def jheaps_AHeapHandle_L_decrease_key(arg1, arg2):
    return _backend.jheaps_AHeapHandle_L_decrease_key(arg1, arg2)

def jheaps_AHeapHandle_delete(arg1):
    return _backend.jheaps_AHeapHandle_delete(arg1)

def jheaps_DEAHeap_find_max(arg1):
    return _backend.jheaps_DEAHeap_find_max(arg1)

def jheaps_DEAHeap_delete_max(arg1):
    return _backend.jheaps_DEAHeap_delete_max(arg1)

def jheaps_DEAHeapHandle_D_increase_key(arg1, arg2):
    return _backend.jheaps_DEAHeapHandle_D_increase_key(arg1, arg2)

def jheaps_DEAHeapHandle_L_increase_key(arg1, arg2):
    return _backend.jheaps_DEAHeapHandle_L_increase_key(arg1, arg2)

def jheaps_DEHeap_D_find_max(arg1):
    return _backend.jheaps_DEHeap_D_find_max(arg1)

def jheaps_DEHeap_L_find_max(arg1):
    return _backend.jheaps_DEHeap_L_find_max(arg1)

def jheaps_DEHeap_D_delete_max(arg1):
    return _backend.jheaps_DEHeap_D_delete_max(arg1)

def jheaps_DEHeap_L_delete_max(arg1):
    return _backend.jheaps_DEHeap_L_delete_max(arg1)

def jheaps_handles_destroy(arg1):
    return _backend.jheaps_handles_destroy(arg1)

def jheaps_Heap_create(arg1):
    return _backend.jheaps_Heap_create(arg1)

def jheaps_dary_Heap_create(arg1, arg2):
    return _backend.jheaps_dary_Heap_create(arg1, arg2)

def jheaps_soft_Heap_create(arg1, arg2):
    return _backend.jheaps_soft_Heap_create(arg1, arg2)

def jheaps_double_radix_Heap_create(arg1, arg2, arg3):
    return _backend.jheaps_double_radix_Heap_create(arg1, arg2, arg3)

def jheaps_long_radix_Heap_create(arg1, arg2, arg3):
    return _backend.jheaps_long_radix_Heap_create(arg1, arg2, arg3)

def jheaps_Heap_comparator_create(arg1, LONG_TO_FPTR):
    return _backend.jheaps_Heap_comparator_create(arg1, LONG_TO_FPTR)

def jheaps_dary_Heap_comparator_create(arg1, LONG_TO_FPTR, arg3):
    return _backend.jheaps_dary_Heap_comparator_create(arg1, LONG_TO_FPTR, arg3)

def jheaps_soft_Heap_comparator_create(arg1, LONG_TO_FPTR, arg3):
    return _backend.jheaps_soft_Heap_comparator_create(arg1, LONG_TO_FPTR, arg3)

def jheaps_Heap_D_insert_key(arg1, arg2):
    return _backend.jheaps_Heap_D_insert_key(arg1, arg2)

def jheaps_Heap_L_insert_key(arg1, arg2):
    return _backend.jheaps_Heap_L_insert_key(arg1, arg2)

def jheaps_Heap_D_find_min(arg1):
    return _backend.jheaps_Heap_D_find_min(arg1)

def jheaps_Heap_L_find_min(arg1):
    return _backend.jheaps_Heap_L_find_min(arg1)

def jheaps_Heap_D_delete_min(arg1):
    return _backend.jheaps_Heap_D_delete_min(arg1)

def jheaps_Heap_L_delete_min(arg1):
    return _backend.jheaps_Heap_L_delete_min(arg1)

def jheaps_Heap_size(arg1):
    return _backend.jheaps_Heap_size(arg1)

def jheaps_Heap_isempty(arg1):
    return _backend.jheaps_Heap_isempty(arg1)

def jheaps_Heap_clear(arg1):
    return _backend.jheaps_Heap_clear(arg1)

def jheaps_Heap_D_heapify(arg1, arg2, arg3, arg4):
    return _backend.jheaps_Heap_D_heapify(arg1, arg2, arg3, arg4)

def jheaps_Heap_L_heapify(arg1, arg2, arg3, arg4):
    return _backend.jheaps_Heap_L_heapify(arg1, arg2, arg3, arg4)

def jheaps_dary_Heap_D_heapify(arg1, arg2, arg3, arg4, arg5):
    return _backend.jheaps_dary_Heap_D_heapify(arg1, arg2, arg3, arg4, arg5)

def jheaps_dary_Heap_L_heapify(arg1, arg2, arg3, arg4, arg5):
    return _backend.jheaps_dary_Heap_L_heapify(arg1, arg2, arg3, arg4, arg5)

def jheaps_Heap_L_comparator_heapify(arg1, LONG_TO_FPTR, arg3, arg4, arg5):
    return _backend.jheaps_Heap_L_comparator_heapify(arg1, LONG_TO_FPTR, arg3, arg4, arg5)

def jheaps_dary_Heap_L_comparator_heapify(arg1, LONG_TO_FPTR, arg3, arg4, arg5, arg6):
    return _backend.jheaps_dary_Heap_L_comparator_heapify(arg1, LONG_TO_FPTR, arg3, arg4, arg5, arg6)

def jheaps_MAHeap_D_meld(arg1, arg2):
    return _backend.jheaps_MAHeap_D_meld(arg1, arg2)

def jheaps_MAHeap_L_meld(arg1, arg2):
    return _backend.jheaps_MAHeap_L_meld(arg1, arg2)

def jheaps_MDEAHeap_D_meld(arg1, arg2):
    return _backend.jheaps_MDEAHeap_D_meld(arg1, arg2)

def jheaps_MDEAHeap_L_meld(arg1, arg2):
    return _backend.jheaps_MDEAHeap_L_meld(arg1, arg2)


