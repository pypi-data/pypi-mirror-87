# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKStatisticsPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkSamplePython
else:
    import _itkSamplePython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkSamplePython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkSamplePython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.ITKCommonBasePython
import itk.itkArrayPython
class itkSampleAD(itk.ITKCommonBasePython.itkDataObject):
    r"""


    A collection of measurements for statistical analysis.

    Sample represents a set of measurements for statistical analysis.
    Sample is templated over a measurement vector. The measurement vector
    encapsulates the set of values associated with a single measurement.
    For instance, a measurement vector may contain an image intensity of a
    pixel and the gradient magnitude at that pixel.

    Data within a sample can be accessed via an InstanceIdentifier.
    InstanceIdentifiers have different forms and meanings depending on the
    type of sample. For ListSamples, the InstanceIdentifier is an index
    into the corresponding list. In this case, the InstanceIndentifier
    corresponds to a particular measurement stored in the Sample. For
    Histograms, an InstanceIdentifier corresponds to a particular bin in
    the N-dimensional histogram. In other words, the InstanceIdentifier in
    a histogram does not correspond to a specific measurement used to
    build the histogram but to the "bin" in which a number of original
    measurements were "accumulated".

    Recent API changes: The static const macro to get the length of a
    measurement vector, 'MeasurementVectorSize' has been removed to allow
    the length of a measurement vector to be specified at run time. Please
    use the function GetMeasurementVectorSize() instead. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Size = _swig_new_instance_method(_itkSamplePython.itkSampleAD_Size)
    GetMeasurementVector = _swig_new_instance_method(_itkSamplePython.itkSampleAD_GetMeasurementVector)
    GetFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleAD_GetFrequency)
    GetTotalFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleAD_GetTotalFrequency)
    SetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleAD_SetMeasurementVectorSize)
    GetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleAD_GetMeasurementVectorSize)
    __swig_destroy__ = _itkSamplePython.delete_itkSampleAD
    cast = _swig_new_static_method(_itkSamplePython.itkSampleAD_cast)

# Register itkSampleAD in _itkSamplePython:
_itkSamplePython.itkSampleAD_swigregister(itkSampleAD)
itkSampleAD_cast = _itkSamplePython.itkSampleAD_cast

class itkSampleAF(itk.ITKCommonBasePython.itkDataObject):
    r"""


    A collection of measurements for statistical analysis.

    Sample represents a set of measurements for statistical analysis.
    Sample is templated over a measurement vector. The measurement vector
    encapsulates the set of values associated with a single measurement.
    For instance, a measurement vector may contain an image intensity of a
    pixel and the gradient magnitude at that pixel.

    Data within a sample can be accessed via an InstanceIdentifier.
    InstanceIdentifiers have different forms and meanings depending on the
    type of sample. For ListSamples, the InstanceIdentifier is an index
    into the corresponding list. In this case, the InstanceIndentifier
    corresponds to a particular measurement stored in the Sample. For
    Histograms, an InstanceIdentifier corresponds to a particular bin in
    the N-dimensional histogram. In other words, the InstanceIdentifier in
    a histogram does not correspond to a specific measurement used to
    build the histogram but to the "bin" in which a number of original
    measurements were "accumulated".

    Recent API changes: The static const macro to get the length of a
    measurement vector, 'MeasurementVectorSize' has been removed to allow
    the length of a measurement vector to be specified at run time. Please
    use the function GetMeasurementVectorSize() instead. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Size = _swig_new_instance_method(_itkSamplePython.itkSampleAF_Size)
    GetMeasurementVector = _swig_new_instance_method(_itkSamplePython.itkSampleAF_GetMeasurementVector)
    GetFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleAF_GetFrequency)
    GetTotalFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleAF_GetTotalFrequency)
    SetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleAF_SetMeasurementVectorSize)
    GetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleAF_GetMeasurementVectorSize)
    __swig_destroy__ = _itkSamplePython.delete_itkSampleAF
    cast = _swig_new_static_method(_itkSamplePython.itkSampleAF_cast)

# Register itkSampleAF in _itkSamplePython:
_itkSamplePython.itkSampleAF_swigregister(itkSampleAF)
itkSampleAF_cast = _itkSamplePython.itkSampleAF_cast

class itkSampleFAD1(itk.ITKCommonBasePython.itkDataObject):
    r"""


    A collection of measurements for statistical analysis.

    Sample represents a set of measurements for statistical analysis.
    Sample is templated over a measurement vector. The measurement vector
    encapsulates the set of values associated with a single measurement.
    For instance, a measurement vector may contain an image intensity of a
    pixel and the gradient magnitude at that pixel.

    Data within a sample can be accessed via an InstanceIdentifier.
    InstanceIdentifiers have different forms and meanings depending on the
    type of sample. For ListSamples, the InstanceIdentifier is an index
    into the corresponding list. In this case, the InstanceIndentifier
    corresponds to a particular measurement stored in the Sample. For
    Histograms, an InstanceIdentifier corresponds to a particular bin in
    the N-dimensional histogram. In other words, the InstanceIdentifier in
    a histogram does not correspond to a specific measurement used to
    build the histogram but to the "bin" in which a number of original
    measurements were "accumulated".

    Recent API changes: The static const macro to get the length of a
    measurement vector, 'MeasurementVectorSize' has been removed to allow
    the length of a measurement vector to be specified at run time. Please
    use the function GetMeasurementVectorSize() instead. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Size = _swig_new_instance_method(_itkSamplePython.itkSampleFAD1_Size)
    GetMeasurementVector = _swig_new_instance_method(_itkSamplePython.itkSampleFAD1_GetMeasurementVector)
    GetFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleFAD1_GetFrequency)
    GetTotalFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleFAD1_GetTotalFrequency)
    SetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleFAD1_SetMeasurementVectorSize)
    GetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleFAD1_GetMeasurementVectorSize)
    __swig_destroy__ = _itkSamplePython.delete_itkSampleFAD1
    cast = _swig_new_static_method(_itkSamplePython.itkSampleFAD1_cast)

# Register itkSampleFAD1 in _itkSamplePython:
_itkSamplePython.itkSampleFAD1_swigregister(itkSampleFAD1)
itkSampleFAD1_cast = _itkSamplePython.itkSampleFAD1_cast

class itkSampleFAD2(itk.ITKCommonBasePython.itkDataObject):
    r"""


    A collection of measurements for statistical analysis.

    Sample represents a set of measurements for statistical analysis.
    Sample is templated over a measurement vector. The measurement vector
    encapsulates the set of values associated with a single measurement.
    For instance, a measurement vector may contain an image intensity of a
    pixel and the gradient magnitude at that pixel.

    Data within a sample can be accessed via an InstanceIdentifier.
    InstanceIdentifiers have different forms and meanings depending on the
    type of sample. For ListSamples, the InstanceIdentifier is an index
    into the corresponding list. In this case, the InstanceIndentifier
    corresponds to a particular measurement stored in the Sample. For
    Histograms, an InstanceIdentifier corresponds to a particular bin in
    the N-dimensional histogram. In other words, the InstanceIdentifier in
    a histogram does not correspond to a specific measurement used to
    build the histogram but to the "bin" in which a number of original
    measurements were "accumulated".

    Recent API changes: The static const macro to get the length of a
    measurement vector, 'MeasurementVectorSize' has been removed to allow
    the length of a measurement vector to be specified at run time. Please
    use the function GetMeasurementVectorSize() instead. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Size = _swig_new_instance_method(_itkSamplePython.itkSampleFAD2_Size)
    GetMeasurementVector = _swig_new_instance_method(_itkSamplePython.itkSampleFAD2_GetMeasurementVector)
    GetFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleFAD2_GetFrequency)
    GetTotalFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleFAD2_GetTotalFrequency)
    SetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleFAD2_SetMeasurementVectorSize)
    GetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleFAD2_GetMeasurementVectorSize)
    __swig_destroy__ = _itkSamplePython.delete_itkSampleFAD2
    cast = _swig_new_static_method(_itkSamplePython.itkSampleFAD2_cast)

# Register itkSampleFAD2 in _itkSamplePython:
_itkSamplePython.itkSampleFAD2_swigregister(itkSampleFAD2)
itkSampleFAD2_cast = _itkSamplePython.itkSampleFAD2_cast

class itkSampleFAD3(itk.ITKCommonBasePython.itkDataObject):
    r"""


    A collection of measurements for statistical analysis.

    Sample represents a set of measurements for statistical analysis.
    Sample is templated over a measurement vector. The measurement vector
    encapsulates the set of values associated with a single measurement.
    For instance, a measurement vector may contain an image intensity of a
    pixel and the gradient magnitude at that pixel.

    Data within a sample can be accessed via an InstanceIdentifier.
    InstanceIdentifiers have different forms and meanings depending on the
    type of sample. For ListSamples, the InstanceIdentifier is an index
    into the corresponding list. In this case, the InstanceIndentifier
    corresponds to a particular measurement stored in the Sample. For
    Histograms, an InstanceIdentifier corresponds to a particular bin in
    the N-dimensional histogram. In other words, the InstanceIdentifier in
    a histogram does not correspond to a specific measurement used to
    build the histogram but to the "bin" in which a number of original
    measurements were "accumulated".

    Recent API changes: The static const macro to get the length of a
    measurement vector, 'MeasurementVectorSize' has been removed to allow
    the length of a measurement vector to be specified at run time. Please
    use the function GetMeasurementVectorSize() instead. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Size = _swig_new_instance_method(_itkSamplePython.itkSampleFAD3_Size)
    GetMeasurementVector = _swig_new_instance_method(_itkSamplePython.itkSampleFAD3_GetMeasurementVector)
    GetFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleFAD3_GetFrequency)
    GetTotalFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleFAD3_GetTotalFrequency)
    SetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleFAD3_SetMeasurementVectorSize)
    GetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleFAD3_GetMeasurementVectorSize)
    __swig_destroy__ = _itkSamplePython.delete_itkSampleFAD3
    cast = _swig_new_static_method(_itkSamplePython.itkSampleFAD3_cast)

# Register itkSampleFAD3 in _itkSamplePython:
_itkSamplePython.itkSampleFAD3_swigregister(itkSampleFAD3)
itkSampleFAD3_cast = _itkSamplePython.itkSampleFAD3_cast

class itkSampleFAF1(itk.ITKCommonBasePython.itkDataObject):
    r"""


    A collection of measurements for statistical analysis.

    Sample represents a set of measurements for statistical analysis.
    Sample is templated over a measurement vector. The measurement vector
    encapsulates the set of values associated with a single measurement.
    For instance, a measurement vector may contain an image intensity of a
    pixel and the gradient magnitude at that pixel.

    Data within a sample can be accessed via an InstanceIdentifier.
    InstanceIdentifiers have different forms and meanings depending on the
    type of sample. For ListSamples, the InstanceIdentifier is an index
    into the corresponding list. In this case, the InstanceIndentifier
    corresponds to a particular measurement stored in the Sample. For
    Histograms, an InstanceIdentifier corresponds to a particular bin in
    the N-dimensional histogram. In other words, the InstanceIdentifier in
    a histogram does not correspond to a specific measurement used to
    build the histogram but to the "bin" in which a number of original
    measurements were "accumulated".

    Recent API changes: The static const macro to get the length of a
    measurement vector, 'MeasurementVectorSize' has been removed to allow
    the length of a measurement vector to be specified at run time. Please
    use the function GetMeasurementVectorSize() instead. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Size = _swig_new_instance_method(_itkSamplePython.itkSampleFAF1_Size)
    GetMeasurementVector = _swig_new_instance_method(_itkSamplePython.itkSampleFAF1_GetMeasurementVector)
    GetFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleFAF1_GetFrequency)
    GetTotalFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleFAF1_GetTotalFrequency)
    SetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleFAF1_SetMeasurementVectorSize)
    GetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleFAF1_GetMeasurementVectorSize)
    __swig_destroy__ = _itkSamplePython.delete_itkSampleFAF1
    cast = _swig_new_static_method(_itkSamplePython.itkSampleFAF1_cast)

# Register itkSampleFAF1 in _itkSamplePython:
_itkSamplePython.itkSampleFAF1_swigregister(itkSampleFAF1)
itkSampleFAF1_cast = _itkSamplePython.itkSampleFAF1_cast

class itkSampleFAF2(itk.ITKCommonBasePython.itkDataObject):
    r"""


    A collection of measurements for statistical analysis.

    Sample represents a set of measurements for statistical analysis.
    Sample is templated over a measurement vector. The measurement vector
    encapsulates the set of values associated with a single measurement.
    For instance, a measurement vector may contain an image intensity of a
    pixel and the gradient magnitude at that pixel.

    Data within a sample can be accessed via an InstanceIdentifier.
    InstanceIdentifiers have different forms and meanings depending on the
    type of sample. For ListSamples, the InstanceIdentifier is an index
    into the corresponding list. In this case, the InstanceIndentifier
    corresponds to a particular measurement stored in the Sample. For
    Histograms, an InstanceIdentifier corresponds to a particular bin in
    the N-dimensional histogram. In other words, the InstanceIdentifier in
    a histogram does not correspond to a specific measurement used to
    build the histogram but to the "bin" in which a number of original
    measurements were "accumulated".

    Recent API changes: The static const macro to get the length of a
    measurement vector, 'MeasurementVectorSize' has been removed to allow
    the length of a measurement vector to be specified at run time. Please
    use the function GetMeasurementVectorSize() instead. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Size = _swig_new_instance_method(_itkSamplePython.itkSampleFAF2_Size)
    GetMeasurementVector = _swig_new_instance_method(_itkSamplePython.itkSampleFAF2_GetMeasurementVector)
    GetFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleFAF2_GetFrequency)
    GetTotalFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleFAF2_GetTotalFrequency)
    SetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleFAF2_SetMeasurementVectorSize)
    GetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleFAF2_GetMeasurementVectorSize)
    __swig_destroy__ = _itkSamplePython.delete_itkSampleFAF2
    cast = _swig_new_static_method(_itkSamplePython.itkSampleFAF2_cast)

# Register itkSampleFAF2 in _itkSamplePython:
_itkSamplePython.itkSampleFAF2_swigregister(itkSampleFAF2)
itkSampleFAF2_cast = _itkSamplePython.itkSampleFAF2_cast

class itkSampleFAF3(itk.ITKCommonBasePython.itkDataObject):
    r"""


    A collection of measurements for statistical analysis.

    Sample represents a set of measurements for statistical analysis.
    Sample is templated over a measurement vector. The measurement vector
    encapsulates the set of values associated with a single measurement.
    For instance, a measurement vector may contain an image intensity of a
    pixel and the gradient magnitude at that pixel.

    Data within a sample can be accessed via an InstanceIdentifier.
    InstanceIdentifiers have different forms and meanings depending on the
    type of sample. For ListSamples, the InstanceIdentifier is an index
    into the corresponding list. In this case, the InstanceIndentifier
    corresponds to a particular measurement stored in the Sample. For
    Histograms, an InstanceIdentifier corresponds to a particular bin in
    the N-dimensional histogram. In other words, the InstanceIdentifier in
    a histogram does not correspond to a specific measurement used to
    build the histogram but to the "bin" in which a number of original
    measurements were "accumulated".

    Recent API changes: The static const macro to get the length of a
    measurement vector, 'MeasurementVectorSize' has been removed to allow
    the length of a measurement vector to be specified at run time. Please
    use the function GetMeasurementVectorSize() instead. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Size = _swig_new_instance_method(_itkSamplePython.itkSampleFAF3_Size)
    GetMeasurementVector = _swig_new_instance_method(_itkSamplePython.itkSampleFAF3_GetMeasurementVector)
    GetFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleFAF3_GetFrequency)
    GetTotalFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleFAF3_GetTotalFrequency)
    SetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleFAF3_SetMeasurementVectorSize)
    GetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleFAF3_GetMeasurementVectorSize)
    __swig_destroy__ = _itkSamplePython.delete_itkSampleFAF3
    cast = _swig_new_static_method(_itkSamplePython.itkSampleFAF3_cast)

# Register itkSampleFAF3 in _itkSamplePython:
_itkSamplePython.itkSampleFAF3_swigregister(itkSampleFAF3)
itkSampleFAF3_cast = _itkSamplePython.itkSampleFAF3_cast

class itkSampleFASC1(itk.ITKCommonBasePython.itkDataObject):
    r"""


    A collection of measurements for statistical analysis.

    Sample represents a set of measurements for statistical analysis.
    Sample is templated over a measurement vector. The measurement vector
    encapsulates the set of values associated with a single measurement.
    For instance, a measurement vector may contain an image intensity of a
    pixel and the gradient magnitude at that pixel.

    Data within a sample can be accessed via an InstanceIdentifier.
    InstanceIdentifiers have different forms and meanings depending on the
    type of sample. For ListSamples, the InstanceIdentifier is an index
    into the corresponding list. In this case, the InstanceIndentifier
    corresponds to a particular measurement stored in the Sample. For
    Histograms, an InstanceIdentifier corresponds to a particular bin in
    the N-dimensional histogram. In other words, the InstanceIdentifier in
    a histogram does not correspond to a specific measurement used to
    build the histogram but to the "bin" in which a number of original
    measurements were "accumulated".

    Recent API changes: The static const macro to get the length of a
    measurement vector, 'MeasurementVectorSize' has been removed to allow
    the length of a measurement vector to be specified at run time. Please
    use the function GetMeasurementVectorSize() instead. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Size = _swig_new_instance_method(_itkSamplePython.itkSampleFASC1_Size)
    GetMeasurementVector = _swig_new_instance_method(_itkSamplePython.itkSampleFASC1_GetMeasurementVector)
    GetFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleFASC1_GetFrequency)
    GetTotalFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleFASC1_GetTotalFrequency)
    SetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleFASC1_SetMeasurementVectorSize)
    GetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleFASC1_GetMeasurementVectorSize)
    __swig_destroy__ = _itkSamplePython.delete_itkSampleFASC1
    cast = _swig_new_static_method(_itkSamplePython.itkSampleFASC1_cast)

# Register itkSampleFASC1 in _itkSamplePython:
_itkSamplePython.itkSampleFASC1_swigregister(itkSampleFASC1)
itkSampleFASC1_cast = _itkSamplePython.itkSampleFASC1_cast

class itkSampleFASC2(itk.ITKCommonBasePython.itkDataObject):
    r"""


    A collection of measurements for statistical analysis.

    Sample represents a set of measurements for statistical analysis.
    Sample is templated over a measurement vector. The measurement vector
    encapsulates the set of values associated with a single measurement.
    For instance, a measurement vector may contain an image intensity of a
    pixel and the gradient magnitude at that pixel.

    Data within a sample can be accessed via an InstanceIdentifier.
    InstanceIdentifiers have different forms and meanings depending on the
    type of sample. For ListSamples, the InstanceIdentifier is an index
    into the corresponding list. In this case, the InstanceIndentifier
    corresponds to a particular measurement stored in the Sample. For
    Histograms, an InstanceIdentifier corresponds to a particular bin in
    the N-dimensional histogram. In other words, the InstanceIdentifier in
    a histogram does not correspond to a specific measurement used to
    build the histogram but to the "bin" in which a number of original
    measurements were "accumulated".

    Recent API changes: The static const macro to get the length of a
    measurement vector, 'MeasurementVectorSize' has been removed to allow
    the length of a measurement vector to be specified at run time. Please
    use the function GetMeasurementVectorSize() instead. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Size = _swig_new_instance_method(_itkSamplePython.itkSampleFASC2_Size)
    GetMeasurementVector = _swig_new_instance_method(_itkSamplePython.itkSampleFASC2_GetMeasurementVector)
    GetFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleFASC2_GetFrequency)
    GetTotalFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleFASC2_GetTotalFrequency)
    SetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleFASC2_SetMeasurementVectorSize)
    GetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleFASC2_GetMeasurementVectorSize)
    __swig_destroy__ = _itkSamplePython.delete_itkSampleFASC2
    cast = _swig_new_static_method(_itkSamplePython.itkSampleFASC2_cast)

# Register itkSampleFASC2 in _itkSamplePython:
_itkSamplePython.itkSampleFASC2_swigregister(itkSampleFASC2)
itkSampleFASC2_cast = _itkSamplePython.itkSampleFASC2_cast

class itkSampleFASC3(itk.ITKCommonBasePython.itkDataObject):
    r"""


    A collection of measurements for statistical analysis.

    Sample represents a set of measurements for statistical analysis.
    Sample is templated over a measurement vector. The measurement vector
    encapsulates the set of values associated with a single measurement.
    For instance, a measurement vector may contain an image intensity of a
    pixel and the gradient magnitude at that pixel.

    Data within a sample can be accessed via an InstanceIdentifier.
    InstanceIdentifiers have different forms and meanings depending on the
    type of sample. For ListSamples, the InstanceIdentifier is an index
    into the corresponding list. In this case, the InstanceIndentifier
    corresponds to a particular measurement stored in the Sample. For
    Histograms, an InstanceIdentifier corresponds to a particular bin in
    the N-dimensional histogram. In other words, the InstanceIdentifier in
    a histogram does not correspond to a specific measurement used to
    build the histogram but to the "bin" in which a number of original
    measurements were "accumulated".

    Recent API changes: The static const macro to get the length of a
    measurement vector, 'MeasurementVectorSize' has been removed to allow
    the length of a measurement vector to be specified at run time. Please
    use the function GetMeasurementVectorSize() instead. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Size = _swig_new_instance_method(_itkSamplePython.itkSampleFASC3_Size)
    GetMeasurementVector = _swig_new_instance_method(_itkSamplePython.itkSampleFASC3_GetMeasurementVector)
    GetFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleFASC3_GetFrequency)
    GetTotalFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleFASC3_GetTotalFrequency)
    SetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleFASC3_SetMeasurementVectorSize)
    GetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleFASC3_GetMeasurementVectorSize)
    __swig_destroy__ = _itkSamplePython.delete_itkSampleFASC3
    cast = _swig_new_static_method(_itkSamplePython.itkSampleFASC3_cast)

# Register itkSampleFASC3 in _itkSamplePython:
_itkSamplePython.itkSampleFASC3_swigregister(itkSampleFASC3)
itkSampleFASC3_cast = _itkSamplePython.itkSampleFASC3_cast

class itkSampleFASL1(itk.ITKCommonBasePython.itkDataObject):
    r"""


    A collection of measurements for statistical analysis.

    Sample represents a set of measurements for statistical analysis.
    Sample is templated over a measurement vector. The measurement vector
    encapsulates the set of values associated with a single measurement.
    For instance, a measurement vector may contain an image intensity of a
    pixel and the gradient magnitude at that pixel.

    Data within a sample can be accessed via an InstanceIdentifier.
    InstanceIdentifiers have different forms and meanings depending on the
    type of sample. For ListSamples, the InstanceIdentifier is an index
    into the corresponding list. In this case, the InstanceIndentifier
    corresponds to a particular measurement stored in the Sample. For
    Histograms, an InstanceIdentifier corresponds to a particular bin in
    the N-dimensional histogram. In other words, the InstanceIdentifier in
    a histogram does not correspond to a specific measurement used to
    build the histogram but to the "bin" in which a number of original
    measurements were "accumulated".

    Recent API changes: The static const macro to get the length of a
    measurement vector, 'MeasurementVectorSize' has been removed to allow
    the length of a measurement vector to be specified at run time. Please
    use the function GetMeasurementVectorSize() instead. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Size = _swig_new_instance_method(_itkSamplePython.itkSampleFASL1_Size)
    GetMeasurementVector = _swig_new_instance_method(_itkSamplePython.itkSampleFASL1_GetMeasurementVector)
    GetFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleFASL1_GetFrequency)
    GetTotalFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleFASL1_GetTotalFrequency)
    SetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleFASL1_SetMeasurementVectorSize)
    GetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleFASL1_GetMeasurementVectorSize)
    __swig_destroy__ = _itkSamplePython.delete_itkSampleFASL1
    cast = _swig_new_static_method(_itkSamplePython.itkSampleFASL1_cast)

# Register itkSampleFASL1 in _itkSamplePython:
_itkSamplePython.itkSampleFASL1_swigregister(itkSampleFASL1)
itkSampleFASL1_cast = _itkSamplePython.itkSampleFASL1_cast

class itkSampleFASL2(itk.ITKCommonBasePython.itkDataObject):
    r"""


    A collection of measurements for statistical analysis.

    Sample represents a set of measurements for statistical analysis.
    Sample is templated over a measurement vector. The measurement vector
    encapsulates the set of values associated with a single measurement.
    For instance, a measurement vector may contain an image intensity of a
    pixel and the gradient magnitude at that pixel.

    Data within a sample can be accessed via an InstanceIdentifier.
    InstanceIdentifiers have different forms and meanings depending on the
    type of sample. For ListSamples, the InstanceIdentifier is an index
    into the corresponding list. In this case, the InstanceIndentifier
    corresponds to a particular measurement stored in the Sample. For
    Histograms, an InstanceIdentifier corresponds to a particular bin in
    the N-dimensional histogram. In other words, the InstanceIdentifier in
    a histogram does not correspond to a specific measurement used to
    build the histogram but to the "bin" in which a number of original
    measurements were "accumulated".

    Recent API changes: The static const macro to get the length of a
    measurement vector, 'MeasurementVectorSize' has been removed to allow
    the length of a measurement vector to be specified at run time. Please
    use the function GetMeasurementVectorSize() instead. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Size = _swig_new_instance_method(_itkSamplePython.itkSampleFASL2_Size)
    GetMeasurementVector = _swig_new_instance_method(_itkSamplePython.itkSampleFASL2_GetMeasurementVector)
    GetFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleFASL2_GetFrequency)
    GetTotalFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleFASL2_GetTotalFrequency)
    SetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleFASL2_SetMeasurementVectorSize)
    GetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleFASL2_GetMeasurementVectorSize)
    __swig_destroy__ = _itkSamplePython.delete_itkSampleFASL2
    cast = _swig_new_static_method(_itkSamplePython.itkSampleFASL2_cast)

# Register itkSampleFASL2 in _itkSamplePython:
_itkSamplePython.itkSampleFASL2_swigregister(itkSampleFASL2)
itkSampleFASL2_cast = _itkSamplePython.itkSampleFASL2_cast

class itkSampleFASL3(itk.ITKCommonBasePython.itkDataObject):
    r"""


    A collection of measurements for statistical analysis.

    Sample represents a set of measurements for statistical analysis.
    Sample is templated over a measurement vector. The measurement vector
    encapsulates the set of values associated with a single measurement.
    For instance, a measurement vector may contain an image intensity of a
    pixel and the gradient magnitude at that pixel.

    Data within a sample can be accessed via an InstanceIdentifier.
    InstanceIdentifiers have different forms and meanings depending on the
    type of sample. For ListSamples, the InstanceIdentifier is an index
    into the corresponding list. In this case, the InstanceIndentifier
    corresponds to a particular measurement stored in the Sample. For
    Histograms, an InstanceIdentifier corresponds to a particular bin in
    the N-dimensional histogram. In other words, the InstanceIdentifier in
    a histogram does not correspond to a specific measurement used to
    build the histogram but to the "bin" in which a number of original
    measurements were "accumulated".

    Recent API changes: The static const macro to get the length of a
    measurement vector, 'MeasurementVectorSize' has been removed to allow
    the length of a measurement vector to be specified at run time. Please
    use the function GetMeasurementVectorSize() instead. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Size = _swig_new_instance_method(_itkSamplePython.itkSampleFASL3_Size)
    GetMeasurementVector = _swig_new_instance_method(_itkSamplePython.itkSampleFASL3_GetMeasurementVector)
    GetFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleFASL3_GetFrequency)
    GetTotalFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleFASL3_GetTotalFrequency)
    SetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleFASL3_SetMeasurementVectorSize)
    GetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleFASL3_GetMeasurementVectorSize)
    __swig_destroy__ = _itkSamplePython.delete_itkSampleFASL3
    cast = _swig_new_static_method(_itkSamplePython.itkSampleFASL3_cast)

# Register itkSampleFASL3 in _itkSamplePython:
_itkSamplePython.itkSampleFASL3_swigregister(itkSampleFASL3)
itkSampleFASL3_cast = _itkSamplePython.itkSampleFASL3_cast

class itkSampleFASS1(itk.ITKCommonBasePython.itkDataObject):
    r"""


    A collection of measurements for statistical analysis.

    Sample represents a set of measurements for statistical analysis.
    Sample is templated over a measurement vector. The measurement vector
    encapsulates the set of values associated with a single measurement.
    For instance, a measurement vector may contain an image intensity of a
    pixel and the gradient magnitude at that pixel.

    Data within a sample can be accessed via an InstanceIdentifier.
    InstanceIdentifiers have different forms and meanings depending on the
    type of sample. For ListSamples, the InstanceIdentifier is an index
    into the corresponding list. In this case, the InstanceIndentifier
    corresponds to a particular measurement stored in the Sample. For
    Histograms, an InstanceIdentifier corresponds to a particular bin in
    the N-dimensional histogram. In other words, the InstanceIdentifier in
    a histogram does not correspond to a specific measurement used to
    build the histogram but to the "bin" in which a number of original
    measurements were "accumulated".

    Recent API changes: The static const macro to get the length of a
    measurement vector, 'MeasurementVectorSize' has been removed to allow
    the length of a measurement vector to be specified at run time. Please
    use the function GetMeasurementVectorSize() instead. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Size = _swig_new_instance_method(_itkSamplePython.itkSampleFASS1_Size)
    GetMeasurementVector = _swig_new_instance_method(_itkSamplePython.itkSampleFASS1_GetMeasurementVector)
    GetFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleFASS1_GetFrequency)
    GetTotalFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleFASS1_GetTotalFrequency)
    SetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleFASS1_SetMeasurementVectorSize)
    GetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleFASS1_GetMeasurementVectorSize)
    __swig_destroy__ = _itkSamplePython.delete_itkSampleFASS1
    cast = _swig_new_static_method(_itkSamplePython.itkSampleFASS1_cast)

# Register itkSampleFASS1 in _itkSamplePython:
_itkSamplePython.itkSampleFASS1_swigregister(itkSampleFASS1)
itkSampleFASS1_cast = _itkSamplePython.itkSampleFASS1_cast

class itkSampleFASS2(itk.ITKCommonBasePython.itkDataObject):
    r"""


    A collection of measurements for statistical analysis.

    Sample represents a set of measurements for statistical analysis.
    Sample is templated over a measurement vector. The measurement vector
    encapsulates the set of values associated with a single measurement.
    For instance, a measurement vector may contain an image intensity of a
    pixel and the gradient magnitude at that pixel.

    Data within a sample can be accessed via an InstanceIdentifier.
    InstanceIdentifiers have different forms and meanings depending on the
    type of sample. For ListSamples, the InstanceIdentifier is an index
    into the corresponding list. In this case, the InstanceIndentifier
    corresponds to a particular measurement stored in the Sample. For
    Histograms, an InstanceIdentifier corresponds to a particular bin in
    the N-dimensional histogram. In other words, the InstanceIdentifier in
    a histogram does not correspond to a specific measurement used to
    build the histogram but to the "bin" in which a number of original
    measurements were "accumulated".

    Recent API changes: The static const macro to get the length of a
    measurement vector, 'MeasurementVectorSize' has been removed to allow
    the length of a measurement vector to be specified at run time. Please
    use the function GetMeasurementVectorSize() instead. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Size = _swig_new_instance_method(_itkSamplePython.itkSampleFASS2_Size)
    GetMeasurementVector = _swig_new_instance_method(_itkSamplePython.itkSampleFASS2_GetMeasurementVector)
    GetFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleFASS2_GetFrequency)
    GetTotalFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleFASS2_GetTotalFrequency)
    SetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleFASS2_SetMeasurementVectorSize)
    GetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleFASS2_GetMeasurementVectorSize)
    __swig_destroy__ = _itkSamplePython.delete_itkSampleFASS2
    cast = _swig_new_static_method(_itkSamplePython.itkSampleFASS2_cast)

# Register itkSampleFASS2 in _itkSamplePython:
_itkSamplePython.itkSampleFASS2_swigregister(itkSampleFASS2)
itkSampleFASS2_cast = _itkSamplePython.itkSampleFASS2_cast

class itkSampleFASS3(itk.ITKCommonBasePython.itkDataObject):
    r"""


    A collection of measurements for statistical analysis.

    Sample represents a set of measurements for statistical analysis.
    Sample is templated over a measurement vector. The measurement vector
    encapsulates the set of values associated with a single measurement.
    For instance, a measurement vector may contain an image intensity of a
    pixel and the gradient magnitude at that pixel.

    Data within a sample can be accessed via an InstanceIdentifier.
    InstanceIdentifiers have different forms and meanings depending on the
    type of sample. For ListSamples, the InstanceIdentifier is an index
    into the corresponding list. In this case, the InstanceIndentifier
    corresponds to a particular measurement stored in the Sample. For
    Histograms, an InstanceIdentifier corresponds to a particular bin in
    the N-dimensional histogram. In other words, the InstanceIdentifier in
    a histogram does not correspond to a specific measurement used to
    build the histogram but to the "bin" in which a number of original
    measurements were "accumulated".

    Recent API changes: The static const macro to get the length of a
    measurement vector, 'MeasurementVectorSize' has been removed to allow
    the length of a measurement vector to be specified at run time. Please
    use the function GetMeasurementVectorSize() instead. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Size = _swig_new_instance_method(_itkSamplePython.itkSampleFASS3_Size)
    GetMeasurementVector = _swig_new_instance_method(_itkSamplePython.itkSampleFASS3_GetMeasurementVector)
    GetFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleFASS3_GetFrequency)
    GetTotalFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleFASS3_GetTotalFrequency)
    SetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleFASS3_SetMeasurementVectorSize)
    GetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleFASS3_GetMeasurementVectorSize)
    __swig_destroy__ = _itkSamplePython.delete_itkSampleFASS3
    cast = _swig_new_static_method(_itkSamplePython.itkSampleFASS3_cast)

# Register itkSampleFASS3 in _itkSamplePython:
_itkSamplePython.itkSampleFASS3_swigregister(itkSampleFASS3)
itkSampleFASS3_cast = _itkSamplePython.itkSampleFASS3_cast

class itkSampleFAUC1(itk.ITKCommonBasePython.itkDataObject):
    r"""


    A collection of measurements for statistical analysis.

    Sample represents a set of measurements for statistical analysis.
    Sample is templated over a measurement vector. The measurement vector
    encapsulates the set of values associated with a single measurement.
    For instance, a measurement vector may contain an image intensity of a
    pixel and the gradient magnitude at that pixel.

    Data within a sample can be accessed via an InstanceIdentifier.
    InstanceIdentifiers have different forms and meanings depending on the
    type of sample. For ListSamples, the InstanceIdentifier is an index
    into the corresponding list. In this case, the InstanceIndentifier
    corresponds to a particular measurement stored in the Sample. For
    Histograms, an InstanceIdentifier corresponds to a particular bin in
    the N-dimensional histogram. In other words, the InstanceIdentifier in
    a histogram does not correspond to a specific measurement used to
    build the histogram but to the "bin" in which a number of original
    measurements were "accumulated".

    Recent API changes: The static const macro to get the length of a
    measurement vector, 'MeasurementVectorSize' has been removed to allow
    the length of a measurement vector to be specified at run time. Please
    use the function GetMeasurementVectorSize() instead. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Size = _swig_new_instance_method(_itkSamplePython.itkSampleFAUC1_Size)
    GetMeasurementVector = _swig_new_instance_method(_itkSamplePython.itkSampleFAUC1_GetMeasurementVector)
    GetFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleFAUC1_GetFrequency)
    GetTotalFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleFAUC1_GetTotalFrequency)
    SetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleFAUC1_SetMeasurementVectorSize)
    GetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleFAUC1_GetMeasurementVectorSize)
    __swig_destroy__ = _itkSamplePython.delete_itkSampleFAUC1
    cast = _swig_new_static_method(_itkSamplePython.itkSampleFAUC1_cast)

# Register itkSampleFAUC1 in _itkSamplePython:
_itkSamplePython.itkSampleFAUC1_swigregister(itkSampleFAUC1)
itkSampleFAUC1_cast = _itkSamplePython.itkSampleFAUC1_cast

class itkSampleFAUC2(itk.ITKCommonBasePython.itkDataObject):
    r"""


    A collection of measurements for statistical analysis.

    Sample represents a set of measurements for statistical analysis.
    Sample is templated over a measurement vector. The measurement vector
    encapsulates the set of values associated with a single measurement.
    For instance, a measurement vector may contain an image intensity of a
    pixel and the gradient magnitude at that pixel.

    Data within a sample can be accessed via an InstanceIdentifier.
    InstanceIdentifiers have different forms and meanings depending on the
    type of sample. For ListSamples, the InstanceIdentifier is an index
    into the corresponding list. In this case, the InstanceIndentifier
    corresponds to a particular measurement stored in the Sample. For
    Histograms, an InstanceIdentifier corresponds to a particular bin in
    the N-dimensional histogram. In other words, the InstanceIdentifier in
    a histogram does not correspond to a specific measurement used to
    build the histogram but to the "bin" in which a number of original
    measurements were "accumulated".

    Recent API changes: The static const macro to get the length of a
    measurement vector, 'MeasurementVectorSize' has been removed to allow
    the length of a measurement vector to be specified at run time. Please
    use the function GetMeasurementVectorSize() instead. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Size = _swig_new_instance_method(_itkSamplePython.itkSampleFAUC2_Size)
    GetMeasurementVector = _swig_new_instance_method(_itkSamplePython.itkSampleFAUC2_GetMeasurementVector)
    GetFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleFAUC2_GetFrequency)
    GetTotalFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleFAUC2_GetTotalFrequency)
    SetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleFAUC2_SetMeasurementVectorSize)
    GetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleFAUC2_GetMeasurementVectorSize)
    __swig_destroy__ = _itkSamplePython.delete_itkSampleFAUC2
    cast = _swig_new_static_method(_itkSamplePython.itkSampleFAUC2_cast)

# Register itkSampleFAUC2 in _itkSamplePython:
_itkSamplePython.itkSampleFAUC2_swigregister(itkSampleFAUC2)
itkSampleFAUC2_cast = _itkSamplePython.itkSampleFAUC2_cast

class itkSampleFAUC3(itk.ITKCommonBasePython.itkDataObject):
    r"""


    A collection of measurements for statistical analysis.

    Sample represents a set of measurements for statistical analysis.
    Sample is templated over a measurement vector. The measurement vector
    encapsulates the set of values associated with a single measurement.
    For instance, a measurement vector may contain an image intensity of a
    pixel and the gradient magnitude at that pixel.

    Data within a sample can be accessed via an InstanceIdentifier.
    InstanceIdentifiers have different forms and meanings depending on the
    type of sample. For ListSamples, the InstanceIdentifier is an index
    into the corresponding list. In this case, the InstanceIndentifier
    corresponds to a particular measurement stored in the Sample. For
    Histograms, an InstanceIdentifier corresponds to a particular bin in
    the N-dimensional histogram. In other words, the InstanceIdentifier in
    a histogram does not correspond to a specific measurement used to
    build the histogram but to the "bin" in which a number of original
    measurements were "accumulated".

    Recent API changes: The static const macro to get the length of a
    measurement vector, 'MeasurementVectorSize' has been removed to allow
    the length of a measurement vector to be specified at run time. Please
    use the function GetMeasurementVectorSize() instead. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Size = _swig_new_instance_method(_itkSamplePython.itkSampleFAUC3_Size)
    GetMeasurementVector = _swig_new_instance_method(_itkSamplePython.itkSampleFAUC3_GetMeasurementVector)
    GetFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleFAUC3_GetFrequency)
    GetTotalFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleFAUC3_GetTotalFrequency)
    SetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleFAUC3_SetMeasurementVectorSize)
    GetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleFAUC3_GetMeasurementVectorSize)
    __swig_destroy__ = _itkSamplePython.delete_itkSampleFAUC3
    cast = _swig_new_static_method(_itkSamplePython.itkSampleFAUC3_cast)

# Register itkSampleFAUC3 in _itkSamplePython:
_itkSamplePython.itkSampleFAUC3_swigregister(itkSampleFAUC3)
itkSampleFAUC3_cast = _itkSamplePython.itkSampleFAUC3_cast

class itkSampleFAUL1(itk.ITKCommonBasePython.itkDataObject):
    r"""


    A collection of measurements for statistical analysis.

    Sample represents a set of measurements for statistical analysis.
    Sample is templated over a measurement vector. The measurement vector
    encapsulates the set of values associated with a single measurement.
    For instance, a measurement vector may contain an image intensity of a
    pixel and the gradient magnitude at that pixel.

    Data within a sample can be accessed via an InstanceIdentifier.
    InstanceIdentifiers have different forms and meanings depending on the
    type of sample. For ListSamples, the InstanceIdentifier is an index
    into the corresponding list. In this case, the InstanceIndentifier
    corresponds to a particular measurement stored in the Sample. For
    Histograms, an InstanceIdentifier corresponds to a particular bin in
    the N-dimensional histogram. In other words, the InstanceIdentifier in
    a histogram does not correspond to a specific measurement used to
    build the histogram but to the "bin" in which a number of original
    measurements were "accumulated".

    Recent API changes: The static const macro to get the length of a
    measurement vector, 'MeasurementVectorSize' has been removed to allow
    the length of a measurement vector to be specified at run time. Please
    use the function GetMeasurementVectorSize() instead. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Size = _swig_new_instance_method(_itkSamplePython.itkSampleFAUL1_Size)
    GetMeasurementVector = _swig_new_instance_method(_itkSamplePython.itkSampleFAUL1_GetMeasurementVector)
    GetFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleFAUL1_GetFrequency)
    GetTotalFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleFAUL1_GetTotalFrequency)
    SetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleFAUL1_SetMeasurementVectorSize)
    GetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleFAUL1_GetMeasurementVectorSize)
    __swig_destroy__ = _itkSamplePython.delete_itkSampleFAUL1
    cast = _swig_new_static_method(_itkSamplePython.itkSampleFAUL1_cast)

# Register itkSampleFAUL1 in _itkSamplePython:
_itkSamplePython.itkSampleFAUL1_swigregister(itkSampleFAUL1)
itkSampleFAUL1_cast = _itkSamplePython.itkSampleFAUL1_cast

class itkSampleFAUL2(itk.ITKCommonBasePython.itkDataObject):
    r"""


    A collection of measurements for statistical analysis.

    Sample represents a set of measurements for statistical analysis.
    Sample is templated over a measurement vector. The measurement vector
    encapsulates the set of values associated with a single measurement.
    For instance, a measurement vector may contain an image intensity of a
    pixel and the gradient magnitude at that pixel.

    Data within a sample can be accessed via an InstanceIdentifier.
    InstanceIdentifiers have different forms and meanings depending on the
    type of sample. For ListSamples, the InstanceIdentifier is an index
    into the corresponding list. In this case, the InstanceIndentifier
    corresponds to a particular measurement stored in the Sample. For
    Histograms, an InstanceIdentifier corresponds to a particular bin in
    the N-dimensional histogram. In other words, the InstanceIdentifier in
    a histogram does not correspond to a specific measurement used to
    build the histogram but to the "bin" in which a number of original
    measurements were "accumulated".

    Recent API changes: The static const macro to get the length of a
    measurement vector, 'MeasurementVectorSize' has been removed to allow
    the length of a measurement vector to be specified at run time. Please
    use the function GetMeasurementVectorSize() instead. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Size = _swig_new_instance_method(_itkSamplePython.itkSampleFAUL2_Size)
    GetMeasurementVector = _swig_new_instance_method(_itkSamplePython.itkSampleFAUL2_GetMeasurementVector)
    GetFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleFAUL2_GetFrequency)
    GetTotalFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleFAUL2_GetTotalFrequency)
    SetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleFAUL2_SetMeasurementVectorSize)
    GetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleFAUL2_GetMeasurementVectorSize)
    __swig_destroy__ = _itkSamplePython.delete_itkSampleFAUL2
    cast = _swig_new_static_method(_itkSamplePython.itkSampleFAUL2_cast)

# Register itkSampleFAUL2 in _itkSamplePython:
_itkSamplePython.itkSampleFAUL2_swigregister(itkSampleFAUL2)
itkSampleFAUL2_cast = _itkSamplePython.itkSampleFAUL2_cast

class itkSampleFAUL3(itk.ITKCommonBasePython.itkDataObject):
    r"""


    A collection of measurements for statistical analysis.

    Sample represents a set of measurements for statistical analysis.
    Sample is templated over a measurement vector. The measurement vector
    encapsulates the set of values associated with a single measurement.
    For instance, a measurement vector may contain an image intensity of a
    pixel and the gradient magnitude at that pixel.

    Data within a sample can be accessed via an InstanceIdentifier.
    InstanceIdentifiers have different forms and meanings depending on the
    type of sample. For ListSamples, the InstanceIdentifier is an index
    into the corresponding list. In this case, the InstanceIndentifier
    corresponds to a particular measurement stored in the Sample. For
    Histograms, an InstanceIdentifier corresponds to a particular bin in
    the N-dimensional histogram. In other words, the InstanceIdentifier in
    a histogram does not correspond to a specific measurement used to
    build the histogram but to the "bin" in which a number of original
    measurements were "accumulated".

    Recent API changes: The static const macro to get the length of a
    measurement vector, 'MeasurementVectorSize' has been removed to allow
    the length of a measurement vector to be specified at run time. Please
    use the function GetMeasurementVectorSize() instead. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Size = _swig_new_instance_method(_itkSamplePython.itkSampleFAUL3_Size)
    GetMeasurementVector = _swig_new_instance_method(_itkSamplePython.itkSampleFAUL3_GetMeasurementVector)
    GetFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleFAUL3_GetFrequency)
    GetTotalFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleFAUL3_GetTotalFrequency)
    SetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleFAUL3_SetMeasurementVectorSize)
    GetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleFAUL3_GetMeasurementVectorSize)
    __swig_destroy__ = _itkSamplePython.delete_itkSampleFAUL3
    cast = _swig_new_static_method(_itkSamplePython.itkSampleFAUL3_cast)

# Register itkSampleFAUL3 in _itkSamplePython:
_itkSamplePython.itkSampleFAUL3_swigregister(itkSampleFAUL3)
itkSampleFAUL3_cast = _itkSamplePython.itkSampleFAUL3_cast

class itkSampleFAUS1(itk.ITKCommonBasePython.itkDataObject):
    r"""


    A collection of measurements for statistical analysis.

    Sample represents a set of measurements for statistical analysis.
    Sample is templated over a measurement vector. The measurement vector
    encapsulates the set of values associated with a single measurement.
    For instance, a measurement vector may contain an image intensity of a
    pixel and the gradient magnitude at that pixel.

    Data within a sample can be accessed via an InstanceIdentifier.
    InstanceIdentifiers have different forms and meanings depending on the
    type of sample. For ListSamples, the InstanceIdentifier is an index
    into the corresponding list. In this case, the InstanceIndentifier
    corresponds to a particular measurement stored in the Sample. For
    Histograms, an InstanceIdentifier corresponds to a particular bin in
    the N-dimensional histogram. In other words, the InstanceIdentifier in
    a histogram does not correspond to a specific measurement used to
    build the histogram but to the "bin" in which a number of original
    measurements were "accumulated".

    Recent API changes: The static const macro to get the length of a
    measurement vector, 'MeasurementVectorSize' has been removed to allow
    the length of a measurement vector to be specified at run time. Please
    use the function GetMeasurementVectorSize() instead. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Size = _swig_new_instance_method(_itkSamplePython.itkSampleFAUS1_Size)
    GetMeasurementVector = _swig_new_instance_method(_itkSamplePython.itkSampleFAUS1_GetMeasurementVector)
    GetFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleFAUS1_GetFrequency)
    GetTotalFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleFAUS1_GetTotalFrequency)
    SetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleFAUS1_SetMeasurementVectorSize)
    GetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleFAUS1_GetMeasurementVectorSize)
    __swig_destroy__ = _itkSamplePython.delete_itkSampleFAUS1
    cast = _swig_new_static_method(_itkSamplePython.itkSampleFAUS1_cast)

# Register itkSampleFAUS1 in _itkSamplePython:
_itkSamplePython.itkSampleFAUS1_swigregister(itkSampleFAUS1)
itkSampleFAUS1_cast = _itkSamplePython.itkSampleFAUS1_cast

class itkSampleFAUS2(itk.ITKCommonBasePython.itkDataObject):
    r"""


    A collection of measurements for statistical analysis.

    Sample represents a set of measurements for statistical analysis.
    Sample is templated over a measurement vector. The measurement vector
    encapsulates the set of values associated with a single measurement.
    For instance, a measurement vector may contain an image intensity of a
    pixel and the gradient magnitude at that pixel.

    Data within a sample can be accessed via an InstanceIdentifier.
    InstanceIdentifiers have different forms and meanings depending on the
    type of sample. For ListSamples, the InstanceIdentifier is an index
    into the corresponding list. In this case, the InstanceIndentifier
    corresponds to a particular measurement stored in the Sample. For
    Histograms, an InstanceIdentifier corresponds to a particular bin in
    the N-dimensional histogram. In other words, the InstanceIdentifier in
    a histogram does not correspond to a specific measurement used to
    build the histogram but to the "bin" in which a number of original
    measurements were "accumulated".

    Recent API changes: The static const macro to get the length of a
    measurement vector, 'MeasurementVectorSize' has been removed to allow
    the length of a measurement vector to be specified at run time. Please
    use the function GetMeasurementVectorSize() instead. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Size = _swig_new_instance_method(_itkSamplePython.itkSampleFAUS2_Size)
    GetMeasurementVector = _swig_new_instance_method(_itkSamplePython.itkSampleFAUS2_GetMeasurementVector)
    GetFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleFAUS2_GetFrequency)
    GetTotalFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleFAUS2_GetTotalFrequency)
    SetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleFAUS2_SetMeasurementVectorSize)
    GetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleFAUS2_GetMeasurementVectorSize)
    __swig_destroy__ = _itkSamplePython.delete_itkSampleFAUS2
    cast = _swig_new_static_method(_itkSamplePython.itkSampleFAUS2_cast)

# Register itkSampleFAUS2 in _itkSamplePython:
_itkSamplePython.itkSampleFAUS2_swigregister(itkSampleFAUS2)
itkSampleFAUS2_cast = _itkSamplePython.itkSampleFAUS2_cast

class itkSampleFAUS3(itk.ITKCommonBasePython.itkDataObject):
    r"""


    A collection of measurements for statistical analysis.

    Sample represents a set of measurements for statistical analysis.
    Sample is templated over a measurement vector. The measurement vector
    encapsulates the set of values associated with a single measurement.
    For instance, a measurement vector may contain an image intensity of a
    pixel and the gradient magnitude at that pixel.

    Data within a sample can be accessed via an InstanceIdentifier.
    InstanceIdentifiers have different forms and meanings depending on the
    type of sample. For ListSamples, the InstanceIdentifier is an index
    into the corresponding list. In this case, the InstanceIndentifier
    corresponds to a particular measurement stored in the Sample. For
    Histograms, an InstanceIdentifier corresponds to a particular bin in
    the N-dimensional histogram. In other words, the InstanceIdentifier in
    a histogram does not correspond to a specific measurement used to
    build the histogram but to the "bin" in which a number of original
    measurements were "accumulated".

    Recent API changes: The static const macro to get the length of a
    measurement vector, 'MeasurementVectorSize' has been removed to allow
    the length of a measurement vector to be specified at run time. Please
    use the function GetMeasurementVectorSize() instead. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Size = _swig_new_instance_method(_itkSamplePython.itkSampleFAUS3_Size)
    GetMeasurementVector = _swig_new_instance_method(_itkSamplePython.itkSampleFAUS3_GetMeasurementVector)
    GetFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleFAUS3_GetFrequency)
    GetTotalFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleFAUS3_GetTotalFrequency)
    SetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleFAUS3_SetMeasurementVectorSize)
    GetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleFAUS3_GetMeasurementVectorSize)
    __swig_destroy__ = _itkSamplePython.delete_itkSampleFAUS3
    cast = _swig_new_static_method(_itkSamplePython.itkSampleFAUS3_cast)

# Register itkSampleFAUS3 in _itkSamplePython:
_itkSamplePython.itkSampleFAUS3_swigregister(itkSampleFAUS3)
itkSampleFAUS3_cast = _itkSamplePython.itkSampleFAUS3_cast

class itkSampleVF2(itk.ITKCommonBasePython.itkDataObject):
    r"""


    A collection of measurements for statistical analysis.

    Sample represents a set of measurements for statistical analysis.
    Sample is templated over a measurement vector. The measurement vector
    encapsulates the set of values associated with a single measurement.
    For instance, a measurement vector may contain an image intensity of a
    pixel and the gradient magnitude at that pixel.

    Data within a sample can be accessed via an InstanceIdentifier.
    InstanceIdentifiers have different forms and meanings depending on the
    type of sample. For ListSamples, the InstanceIdentifier is an index
    into the corresponding list. In this case, the InstanceIndentifier
    corresponds to a particular measurement stored in the Sample. For
    Histograms, an InstanceIdentifier corresponds to a particular bin in
    the N-dimensional histogram. In other words, the InstanceIdentifier in
    a histogram does not correspond to a specific measurement used to
    build the histogram but to the "bin" in which a number of original
    measurements were "accumulated".

    Recent API changes: The static const macro to get the length of a
    measurement vector, 'MeasurementVectorSize' has been removed to allow
    the length of a measurement vector to be specified at run time. Please
    use the function GetMeasurementVectorSize() instead. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Size = _swig_new_instance_method(_itkSamplePython.itkSampleVF2_Size)
    GetMeasurementVector = _swig_new_instance_method(_itkSamplePython.itkSampleVF2_GetMeasurementVector)
    GetFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleVF2_GetFrequency)
    GetTotalFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleVF2_GetTotalFrequency)
    SetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleVF2_SetMeasurementVectorSize)
    GetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleVF2_GetMeasurementVectorSize)
    __swig_destroy__ = _itkSamplePython.delete_itkSampleVF2
    cast = _swig_new_static_method(_itkSamplePython.itkSampleVF2_cast)

# Register itkSampleVF2 in _itkSamplePython:
_itkSamplePython.itkSampleVF2_swigregister(itkSampleVF2)
itkSampleVF2_cast = _itkSamplePython.itkSampleVF2_cast

class itkSampleVF3(itk.ITKCommonBasePython.itkDataObject):
    r"""


    A collection of measurements for statistical analysis.

    Sample represents a set of measurements for statistical analysis.
    Sample is templated over a measurement vector. The measurement vector
    encapsulates the set of values associated with a single measurement.
    For instance, a measurement vector may contain an image intensity of a
    pixel and the gradient magnitude at that pixel.

    Data within a sample can be accessed via an InstanceIdentifier.
    InstanceIdentifiers have different forms and meanings depending on the
    type of sample. For ListSamples, the InstanceIdentifier is an index
    into the corresponding list. In this case, the InstanceIndentifier
    corresponds to a particular measurement stored in the Sample. For
    Histograms, an InstanceIdentifier corresponds to a particular bin in
    the N-dimensional histogram. In other words, the InstanceIdentifier in
    a histogram does not correspond to a specific measurement used to
    build the histogram but to the "bin" in which a number of original
    measurements were "accumulated".

    Recent API changes: The static const macro to get the length of a
    measurement vector, 'MeasurementVectorSize' has been removed to allow
    the length of a measurement vector to be specified at run time. Please
    use the function GetMeasurementVectorSize() instead. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Size = _swig_new_instance_method(_itkSamplePython.itkSampleVF3_Size)
    GetMeasurementVector = _swig_new_instance_method(_itkSamplePython.itkSampleVF3_GetMeasurementVector)
    GetFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleVF3_GetFrequency)
    GetTotalFrequency = _swig_new_instance_method(_itkSamplePython.itkSampleVF3_GetTotalFrequency)
    SetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleVF3_SetMeasurementVectorSize)
    GetMeasurementVectorSize = _swig_new_instance_method(_itkSamplePython.itkSampleVF3_GetMeasurementVectorSize)
    __swig_destroy__ = _itkSamplePython.delete_itkSampleVF3
    cast = _swig_new_static_method(_itkSamplePython.itkSampleVF3_cast)

# Register itkSampleVF3 in _itkSamplePython:
_itkSamplePython.itkSampleVF3_swigregister(itkSampleVF3)
itkSampleVF3_cast = _itkSamplePython.itkSampleVF3_cast



