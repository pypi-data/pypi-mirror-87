# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKLevelSetsPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkLevelSetFunctionPython
else:
    import _itkLevelSetFunctionPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkLevelSetFunctionPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkLevelSetFunctionPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkSizePython
import itk.itkFiniteDifferenceFunctionPython
import itk.itkCovariantVectorPython

def itkLevelSetFunctionID2_New():
    return itkLevelSetFunctionID2.New()

class itkLevelSetFunctionID2(itk.itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID2):
    r"""


    The LevelSetFunction class is a generic function object which can be
    used to create a level set method filter when combined with an
    appropriate finite difference image filter. (See
    FiniteDifferenceImageFilter.)

    LevelSetFunction implements a generic level set function. This
    function is an expanded form of the basic equation developed in [1].

    $\\phi_{t} + \\alpha \\stackrel{\\rightharpoonup}{A}(\\mathb
    f{x})\\cdot\\nabla\\phi + \\beta
    P(\\mathbf{x})\\mid\\nabla\\phi\\mid = \\gamma
    Z(\\mathbf{x})\\kappa\\mid\\nabla\\phi\\mid$

    where $ \\stackrel{\\rightharpoonup}{A} $ is an advection term, $
    P $ is a propagation (growth) term, and $ Z $ is a spatial modifier
    term for the mean curvature $ \\kappa $. $ \\alpha $, $ \\beta
    $, and $ \\gamma $ are all scalar constants.

    Terms in the equation above are supplied through virtual methods,
    which must be subclassed to complete an implementation. Terms can be
    eliminated from the equation by setting the corresponding constants to
    zero. A wide variety of level set methods can be implemented by
    subclassing this basic equation.

    In ITK, the usual sign convention is that the INSIDE of a surface
    contains NEGATIVE values and the OUTSIDE of the surface contains
    POSITIVE values.

    WARNING:  You MUST call Initialize() in the constructor of subclasses
    of this object to set it up properly to do level-set Calculations. The
    argument that you pass Initialize is the radius of the neighborhood
    needed to perform the calculations. If your subclass does not do any
    additional neighborhood processing, then the default radius should be
    1 in each direction. REFERENCES

    [1] Sethian, J.A. Level Set Methods. Cambridge University Press. 1996.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID2___New_orig__)
    Clone = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_Clone)
    AdvectionField = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_AdvectionField)
    PropagationSpeed = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_PropagationSpeed)
    CurvatureSpeed = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_CurvatureSpeed)
    LaplacianSmoothingSpeed = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_LaplacianSmoothingSpeed)
    SetAdvectionWeight = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_SetAdvectionWeight)
    GetAdvectionWeight = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_GetAdvectionWeight)
    SetPropagationWeight = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_SetPropagationWeight)
    GetPropagationWeight = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_GetPropagationWeight)
    SetCurvatureWeight = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_SetCurvatureWeight)
    GetCurvatureWeight = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_GetCurvatureWeight)
    SetLaplacianSmoothingWeight = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_SetLaplacianSmoothingWeight)
    GetLaplacianSmoothingWeight = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_GetLaplacianSmoothingWeight)
    SetEpsilonMagnitude = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_SetEpsilonMagnitude)
    GetEpsilonMagnitude = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_GetEpsilonMagnitude)
    ComputeUpdate = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_ComputeUpdate)
    Initialize = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_Initialize)
    ComputeCurvatureTerm = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_ComputeCurvatureTerm)
    ComputeMeanCurvature = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_ComputeMeanCurvature)
    ComputeMinimalCurvature = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_ComputeMinimalCurvature)
    Compute3DMinimalCurvature = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_Compute3DMinimalCurvature)
    SetUseMinimalCurvature = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_SetUseMinimalCurvature)
    GetUseMinimalCurvature = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_GetUseMinimalCurvature)
    UseMinimalCurvatureOn = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_UseMinimalCurvatureOn)
    UseMinimalCurvatureOff = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_UseMinimalCurvatureOff)
    SetMaximumCurvatureTimeStep = _swig_new_static_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_SetMaximumCurvatureTimeStep)
    GetMaximumCurvatureTimeStep = _swig_new_static_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_GetMaximumCurvatureTimeStep)
    SetMaximumPropagationTimeStep = _swig_new_static_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_SetMaximumPropagationTimeStep)
    GetMaximumPropagationTimeStep = _swig_new_static_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_GetMaximumPropagationTimeStep)
    __swig_destroy__ = _itkLevelSetFunctionPython.delete_itkLevelSetFunctionID2
    cast = _swig_new_static_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_cast)

    def New(*args, **kargs):
        """New() -> itkLevelSetFunctionID2

        Create a new object of the class itkLevelSetFunctionID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetFunctionID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLevelSetFunctionID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLevelSetFunctionID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLevelSetFunctionID2 in _itkLevelSetFunctionPython:
_itkLevelSetFunctionPython.itkLevelSetFunctionID2_swigregister(itkLevelSetFunctionID2)
itkLevelSetFunctionID2___New_orig__ = _itkLevelSetFunctionPython.itkLevelSetFunctionID2___New_orig__
itkLevelSetFunctionID2_SetMaximumCurvatureTimeStep = _itkLevelSetFunctionPython.itkLevelSetFunctionID2_SetMaximumCurvatureTimeStep
itkLevelSetFunctionID2_GetMaximumCurvatureTimeStep = _itkLevelSetFunctionPython.itkLevelSetFunctionID2_GetMaximumCurvatureTimeStep
itkLevelSetFunctionID2_SetMaximumPropagationTimeStep = _itkLevelSetFunctionPython.itkLevelSetFunctionID2_SetMaximumPropagationTimeStep
itkLevelSetFunctionID2_GetMaximumPropagationTimeStep = _itkLevelSetFunctionPython.itkLevelSetFunctionID2_GetMaximumPropagationTimeStep
itkLevelSetFunctionID2_cast = _itkLevelSetFunctionPython.itkLevelSetFunctionID2_cast


def itkLevelSetFunctionID3_New():
    return itkLevelSetFunctionID3.New()

class itkLevelSetFunctionID3(itk.itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID3):
    r"""


    The LevelSetFunction class is a generic function object which can be
    used to create a level set method filter when combined with an
    appropriate finite difference image filter. (See
    FiniteDifferenceImageFilter.)

    LevelSetFunction implements a generic level set function. This
    function is an expanded form of the basic equation developed in [1].

    $\\phi_{t} + \\alpha \\stackrel{\\rightharpoonup}{A}(\\mathb
    f{x})\\cdot\\nabla\\phi + \\beta
    P(\\mathbf{x})\\mid\\nabla\\phi\\mid = \\gamma
    Z(\\mathbf{x})\\kappa\\mid\\nabla\\phi\\mid$

    where $ \\stackrel{\\rightharpoonup}{A} $ is an advection term, $
    P $ is a propagation (growth) term, and $ Z $ is a spatial modifier
    term for the mean curvature $ \\kappa $. $ \\alpha $, $ \\beta
    $, and $ \\gamma $ are all scalar constants.

    Terms in the equation above are supplied through virtual methods,
    which must be subclassed to complete an implementation. Terms can be
    eliminated from the equation by setting the corresponding constants to
    zero. A wide variety of level set methods can be implemented by
    subclassing this basic equation.

    In ITK, the usual sign convention is that the INSIDE of a surface
    contains NEGATIVE values and the OUTSIDE of the surface contains
    POSITIVE values.

    WARNING:  You MUST call Initialize() in the constructor of subclasses
    of this object to set it up properly to do level-set Calculations. The
    argument that you pass Initialize is the radius of the neighborhood
    needed to perform the calculations. If your subclass does not do any
    additional neighborhood processing, then the default radius should be
    1 in each direction. REFERENCES

    [1] Sethian, J.A. Level Set Methods. Cambridge University Press. 1996.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID3___New_orig__)
    Clone = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_Clone)
    AdvectionField = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_AdvectionField)
    PropagationSpeed = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_PropagationSpeed)
    CurvatureSpeed = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_CurvatureSpeed)
    LaplacianSmoothingSpeed = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_LaplacianSmoothingSpeed)
    SetAdvectionWeight = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_SetAdvectionWeight)
    GetAdvectionWeight = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_GetAdvectionWeight)
    SetPropagationWeight = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_SetPropagationWeight)
    GetPropagationWeight = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_GetPropagationWeight)
    SetCurvatureWeight = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_SetCurvatureWeight)
    GetCurvatureWeight = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_GetCurvatureWeight)
    SetLaplacianSmoothingWeight = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_SetLaplacianSmoothingWeight)
    GetLaplacianSmoothingWeight = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_GetLaplacianSmoothingWeight)
    SetEpsilonMagnitude = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_SetEpsilonMagnitude)
    GetEpsilonMagnitude = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_GetEpsilonMagnitude)
    ComputeUpdate = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_ComputeUpdate)
    Initialize = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_Initialize)
    ComputeCurvatureTerm = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_ComputeCurvatureTerm)
    ComputeMeanCurvature = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_ComputeMeanCurvature)
    ComputeMinimalCurvature = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_ComputeMinimalCurvature)
    Compute3DMinimalCurvature = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_Compute3DMinimalCurvature)
    SetUseMinimalCurvature = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_SetUseMinimalCurvature)
    GetUseMinimalCurvature = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_GetUseMinimalCurvature)
    UseMinimalCurvatureOn = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_UseMinimalCurvatureOn)
    UseMinimalCurvatureOff = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_UseMinimalCurvatureOff)
    SetMaximumCurvatureTimeStep = _swig_new_static_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_SetMaximumCurvatureTimeStep)
    GetMaximumCurvatureTimeStep = _swig_new_static_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_GetMaximumCurvatureTimeStep)
    SetMaximumPropagationTimeStep = _swig_new_static_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_SetMaximumPropagationTimeStep)
    GetMaximumPropagationTimeStep = _swig_new_static_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_GetMaximumPropagationTimeStep)
    __swig_destroy__ = _itkLevelSetFunctionPython.delete_itkLevelSetFunctionID3
    cast = _swig_new_static_method(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_cast)

    def New(*args, **kargs):
        """New() -> itkLevelSetFunctionID3

        Create a new object of the class itkLevelSetFunctionID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetFunctionID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLevelSetFunctionID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLevelSetFunctionID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLevelSetFunctionID3 in _itkLevelSetFunctionPython:
_itkLevelSetFunctionPython.itkLevelSetFunctionID3_swigregister(itkLevelSetFunctionID3)
itkLevelSetFunctionID3___New_orig__ = _itkLevelSetFunctionPython.itkLevelSetFunctionID3___New_orig__
itkLevelSetFunctionID3_SetMaximumCurvatureTimeStep = _itkLevelSetFunctionPython.itkLevelSetFunctionID3_SetMaximumCurvatureTimeStep
itkLevelSetFunctionID3_GetMaximumCurvatureTimeStep = _itkLevelSetFunctionPython.itkLevelSetFunctionID3_GetMaximumCurvatureTimeStep
itkLevelSetFunctionID3_SetMaximumPropagationTimeStep = _itkLevelSetFunctionPython.itkLevelSetFunctionID3_SetMaximumPropagationTimeStep
itkLevelSetFunctionID3_GetMaximumPropagationTimeStep = _itkLevelSetFunctionPython.itkLevelSetFunctionID3_GetMaximumPropagationTimeStep
itkLevelSetFunctionID3_cast = _itkLevelSetFunctionPython.itkLevelSetFunctionID3_cast


def itkLevelSetFunctionIF2_New():
    return itkLevelSetFunctionIF2.New()

class itkLevelSetFunctionIF2(itk.itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2):
    r"""


    The LevelSetFunction class is a generic function object which can be
    used to create a level set method filter when combined with an
    appropriate finite difference image filter. (See
    FiniteDifferenceImageFilter.)

    LevelSetFunction implements a generic level set function. This
    function is an expanded form of the basic equation developed in [1].

    $\\phi_{t} + \\alpha \\stackrel{\\rightharpoonup}{A}(\\mathb
    f{x})\\cdot\\nabla\\phi + \\beta
    P(\\mathbf{x})\\mid\\nabla\\phi\\mid = \\gamma
    Z(\\mathbf{x})\\kappa\\mid\\nabla\\phi\\mid$

    where $ \\stackrel{\\rightharpoonup}{A} $ is an advection term, $
    P $ is a propagation (growth) term, and $ Z $ is a spatial modifier
    term for the mean curvature $ \\kappa $. $ \\alpha $, $ \\beta
    $, and $ \\gamma $ are all scalar constants.

    Terms in the equation above are supplied through virtual methods,
    which must be subclassed to complete an implementation. Terms can be
    eliminated from the equation by setting the corresponding constants to
    zero. A wide variety of level set methods can be implemented by
    subclassing this basic equation.

    In ITK, the usual sign convention is that the INSIDE of a surface
    contains NEGATIVE values and the OUTSIDE of the surface contains
    POSITIVE values.

    WARNING:  You MUST call Initialize() in the constructor of subclasses
    of this object to set it up properly to do level-set Calculations. The
    argument that you pass Initialize is the radius of the neighborhood
    needed to perform the calculations. If your subclass does not do any
    additional neighborhood processing, then the default radius should be
    1 in each direction. REFERENCES

    [1] Sethian, J.A. Level Set Methods. Cambridge University Press. 1996.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2___New_orig__)
    Clone = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_Clone)
    AdvectionField = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_AdvectionField)
    PropagationSpeed = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_PropagationSpeed)
    CurvatureSpeed = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_CurvatureSpeed)
    LaplacianSmoothingSpeed = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_LaplacianSmoothingSpeed)
    SetAdvectionWeight = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetAdvectionWeight)
    GetAdvectionWeight = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetAdvectionWeight)
    SetPropagationWeight = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetPropagationWeight)
    GetPropagationWeight = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetPropagationWeight)
    SetCurvatureWeight = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetCurvatureWeight)
    GetCurvatureWeight = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetCurvatureWeight)
    SetLaplacianSmoothingWeight = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetLaplacianSmoothingWeight)
    GetLaplacianSmoothingWeight = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetLaplacianSmoothingWeight)
    SetEpsilonMagnitude = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetEpsilonMagnitude)
    GetEpsilonMagnitude = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetEpsilonMagnitude)
    ComputeUpdate = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_ComputeUpdate)
    Initialize = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_Initialize)
    ComputeCurvatureTerm = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_ComputeCurvatureTerm)
    ComputeMeanCurvature = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_ComputeMeanCurvature)
    ComputeMinimalCurvature = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_ComputeMinimalCurvature)
    Compute3DMinimalCurvature = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_Compute3DMinimalCurvature)
    SetUseMinimalCurvature = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetUseMinimalCurvature)
    GetUseMinimalCurvature = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetUseMinimalCurvature)
    UseMinimalCurvatureOn = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_UseMinimalCurvatureOn)
    UseMinimalCurvatureOff = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_UseMinimalCurvatureOff)
    SetMaximumCurvatureTimeStep = _swig_new_static_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetMaximumCurvatureTimeStep)
    GetMaximumCurvatureTimeStep = _swig_new_static_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetMaximumCurvatureTimeStep)
    SetMaximumPropagationTimeStep = _swig_new_static_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetMaximumPropagationTimeStep)
    GetMaximumPropagationTimeStep = _swig_new_static_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetMaximumPropagationTimeStep)
    __swig_destroy__ = _itkLevelSetFunctionPython.delete_itkLevelSetFunctionIF2
    cast = _swig_new_static_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_cast)

    def New(*args, **kargs):
        """New() -> itkLevelSetFunctionIF2

        Create a new object of the class itkLevelSetFunctionIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetFunctionIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLevelSetFunctionIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLevelSetFunctionIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLevelSetFunctionIF2 in _itkLevelSetFunctionPython:
_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_swigregister(itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2___New_orig__ = _itkLevelSetFunctionPython.itkLevelSetFunctionIF2___New_orig__
itkLevelSetFunctionIF2_SetMaximumCurvatureTimeStep = _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetMaximumCurvatureTimeStep
itkLevelSetFunctionIF2_GetMaximumCurvatureTimeStep = _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetMaximumCurvatureTimeStep
itkLevelSetFunctionIF2_SetMaximumPropagationTimeStep = _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetMaximumPropagationTimeStep
itkLevelSetFunctionIF2_GetMaximumPropagationTimeStep = _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetMaximumPropagationTimeStep
itkLevelSetFunctionIF2_cast = _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_cast


def itkLevelSetFunctionIF3_New():
    return itkLevelSetFunctionIF3.New()

class itkLevelSetFunctionIF3(itk.itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3):
    r"""


    The LevelSetFunction class is a generic function object which can be
    used to create a level set method filter when combined with an
    appropriate finite difference image filter. (See
    FiniteDifferenceImageFilter.)

    LevelSetFunction implements a generic level set function. This
    function is an expanded form of the basic equation developed in [1].

    $\\phi_{t} + \\alpha \\stackrel{\\rightharpoonup}{A}(\\mathb
    f{x})\\cdot\\nabla\\phi + \\beta
    P(\\mathbf{x})\\mid\\nabla\\phi\\mid = \\gamma
    Z(\\mathbf{x})\\kappa\\mid\\nabla\\phi\\mid$

    where $ \\stackrel{\\rightharpoonup}{A} $ is an advection term, $
    P $ is a propagation (growth) term, and $ Z $ is a spatial modifier
    term for the mean curvature $ \\kappa $. $ \\alpha $, $ \\beta
    $, and $ \\gamma $ are all scalar constants.

    Terms in the equation above are supplied through virtual methods,
    which must be subclassed to complete an implementation. Terms can be
    eliminated from the equation by setting the corresponding constants to
    zero. A wide variety of level set methods can be implemented by
    subclassing this basic equation.

    In ITK, the usual sign convention is that the INSIDE of a surface
    contains NEGATIVE values and the OUTSIDE of the surface contains
    POSITIVE values.

    WARNING:  You MUST call Initialize() in the constructor of subclasses
    of this object to set it up properly to do level-set Calculations. The
    argument that you pass Initialize is the radius of the neighborhood
    needed to perform the calculations. If your subclass does not do any
    additional neighborhood processing, then the default radius should be
    1 in each direction. REFERENCES

    [1] Sethian, J.A. Level Set Methods. Cambridge University Press. 1996.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3___New_orig__)
    Clone = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_Clone)
    AdvectionField = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_AdvectionField)
    PropagationSpeed = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_PropagationSpeed)
    CurvatureSpeed = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_CurvatureSpeed)
    LaplacianSmoothingSpeed = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_LaplacianSmoothingSpeed)
    SetAdvectionWeight = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetAdvectionWeight)
    GetAdvectionWeight = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetAdvectionWeight)
    SetPropagationWeight = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetPropagationWeight)
    GetPropagationWeight = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetPropagationWeight)
    SetCurvatureWeight = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetCurvatureWeight)
    GetCurvatureWeight = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetCurvatureWeight)
    SetLaplacianSmoothingWeight = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetLaplacianSmoothingWeight)
    GetLaplacianSmoothingWeight = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetLaplacianSmoothingWeight)
    SetEpsilonMagnitude = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetEpsilonMagnitude)
    GetEpsilonMagnitude = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetEpsilonMagnitude)
    ComputeUpdate = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_ComputeUpdate)
    Initialize = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_Initialize)
    ComputeCurvatureTerm = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_ComputeCurvatureTerm)
    ComputeMeanCurvature = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_ComputeMeanCurvature)
    ComputeMinimalCurvature = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_ComputeMinimalCurvature)
    Compute3DMinimalCurvature = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_Compute3DMinimalCurvature)
    SetUseMinimalCurvature = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetUseMinimalCurvature)
    GetUseMinimalCurvature = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetUseMinimalCurvature)
    UseMinimalCurvatureOn = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_UseMinimalCurvatureOn)
    UseMinimalCurvatureOff = _swig_new_instance_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_UseMinimalCurvatureOff)
    SetMaximumCurvatureTimeStep = _swig_new_static_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetMaximumCurvatureTimeStep)
    GetMaximumCurvatureTimeStep = _swig_new_static_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetMaximumCurvatureTimeStep)
    SetMaximumPropagationTimeStep = _swig_new_static_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetMaximumPropagationTimeStep)
    GetMaximumPropagationTimeStep = _swig_new_static_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetMaximumPropagationTimeStep)
    __swig_destroy__ = _itkLevelSetFunctionPython.delete_itkLevelSetFunctionIF3
    cast = _swig_new_static_method(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_cast)

    def New(*args, **kargs):
        """New() -> itkLevelSetFunctionIF3

        Create a new object of the class itkLevelSetFunctionIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetFunctionIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLevelSetFunctionIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLevelSetFunctionIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLevelSetFunctionIF3 in _itkLevelSetFunctionPython:
_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_swigregister(itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3___New_orig__ = _itkLevelSetFunctionPython.itkLevelSetFunctionIF3___New_orig__
itkLevelSetFunctionIF3_SetMaximumCurvatureTimeStep = _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetMaximumCurvatureTimeStep
itkLevelSetFunctionIF3_GetMaximumCurvatureTimeStep = _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetMaximumCurvatureTimeStep
itkLevelSetFunctionIF3_SetMaximumPropagationTimeStep = _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetMaximumPropagationTimeStep
itkLevelSetFunctionIF3_GetMaximumPropagationTimeStep = _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetMaximumPropagationTimeStep
itkLevelSetFunctionIF3_cast = _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_cast



