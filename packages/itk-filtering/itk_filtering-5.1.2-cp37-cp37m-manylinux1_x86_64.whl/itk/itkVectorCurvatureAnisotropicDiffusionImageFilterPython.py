# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKAnisotropicSmoothingPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkVectorCurvatureAnisotropicDiffusionImageFilterPython
else:
    import _itkVectorCurvatureAnisotropicDiffusionImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkAnisotropicDiffusionImageFilterPython
import itk.itkDenseFiniteDifferenceImageFilterPython
import itk.itkImagePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImageRegionPython
import itk.itkRGBPixelPython
import itk.itkFixedArrayPython
import itk.stdcomplexPython
import itk.itkRGBAPixelPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.itkCovariantVectorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkFiniteDifferenceImageFilterPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterAPython
import itk.itkFiniteDifferenceFunctionPython

def itkVectorCurvatureAnisotropicDiffusionImageFilterICVF22ICVF22_New():
    return itkVectorCurvatureAnisotropicDiffusionImageFilterICVF22ICVF22.New()

class itkVectorCurvatureAnisotropicDiffusionImageFilterICVF22ICVF22(itk.itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF22ICVF22):
    r"""


    This filter performs anisotropic diffusion on a vector itk::Image
    using the modified curvature diffusion equation (MCDE) implemented in
    itkVectorCurvatureNDAnisotropicDiffusionFunction. For detailed
    information on anisotropic diffusion and the MCDE see
    itkAnisotropicDiffusionFunction,
    itkVectorCurvatureNDAnisotropicDiffusionFunction, and
    itkCurvatureNDAnisotropicDiffusionFunction.

    Inputs and Outputs The input to this filter must be an itk::Image with
    pixel type which is either an itk::Vector, or a subclass of an
    itk::Vector. Additionally, the component type of the vector should be
    a numerical type (float or double, or a user defined type which
    correctly defines arithmetic operations with floating point accuracy).
    The output image type also has these requirements. Parameters Please
    first read all the documentation found in
    AnisotropicDiffusionImageFilter and AnisotropicDiffusionFunction. Also
    see VectorCurvatureNDAnisotropicDiffusionFunction.  The default time
    step for this filter is set to the maximum theoretically stable value:
    0.5 / 2^N, where N is the dimensionality of the image. For a 2D image,
    this means valid time steps are below 0.1250. For a 3D image, valid
    time steps are below 0.0625.

    See:   AnisotropicDiffusionImageFilter

    See:  AnisotropicDiffusionFunction

    See:  CurvatureNDAnisotropicDiffusionFunction  (Curvature)} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterICVF22ICVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterICVF22ICVF22_Clone)
    InputHasNumericTraitsCheck = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterICVF22ICVF22_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterICVF22ICVF22_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.delete_itkVectorCurvatureAnisotropicDiffusionImageFilterICVF22ICVF22
    cast = _swig_new_static_method(_itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterICVF22ICVF22_cast)

    def New(*args, **kargs):
        """New() -> itkVectorCurvatureAnisotropicDiffusionImageFilterICVF22ICVF22

        Create a new object of the class itkVectorCurvatureAnisotropicDiffusionImageFilterICVF22ICVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorCurvatureAnisotropicDiffusionImageFilterICVF22ICVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorCurvatureAnisotropicDiffusionImageFilterICVF22ICVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorCurvatureAnisotropicDiffusionImageFilterICVF22ICVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorCurvatureAnisotropicDiffusionImageFilterICVF22ICVF22 in _itkVectorCurvatureAnisotropicDiffusionImageFilterPython:
_itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterICVF22ICVF22_swigregister(itkVectorCurvatureAnisotropicDiffusionImageFilterICVF22ICVF22)
itkVectorCurvatureAnisotropicDiffusionImageFilterICVF22ICVF22___New_orig__ = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterICVF22ICVF22___New_orig__
itkVectorCurvatureAnisotropicDiffusionImageFilterICVF22ICVF22_cast = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterICVF22ICVF22_cast


def itkVectorCurvatureAnisotropicDiffusionImageFilterICVF23ICVF23_New():
    return itkVectorCurvatureAnisotropicDiffusionImageFilterICVF23ICVF23.New()

class itkVectorCurvatureAnisotropicDiffusionImageFilterICVF23ICVF23(itk.itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF23ICVF23):
    r"""


    This filter performs anisotropic diffusion on a vector itk::Image
    using the modified curvature diffusion equation (MCDE) implemented in
    itkVectorCurvatureNDAnisotropicDiffusionFunction. For detailed
    information on anisotropic diffusion and the MCDE see
    itkAnisotropicDiffusionFunction,
    itkVectorCurvatureNDAnisotropicDiffusionFunction, and
    itkCurvatureNDAnisotropicDiffusionFunction.

    Inputs and Outputs The input to this filter must be an itk::Image with
    pixel type which is either an itk::Vector, or a subclass of an
    itk::Vector. Additionally, the component type of the vector should be
    a numerical type (float or double, or a user defined type which
    correctly defines arithmetic operations with floating point accuracy).
    The output image type also has these requirements. Parameters Please
    first read all the documentation found in
    AnisotropicDiffusionImageFilter and AnisotropicDiffusionFunction. Also
    see VectorCurvatureNDAnisotropicDiffusionFunction.  The default time
    step for this filter is set to the maximum theoretically stable value:
    0.5 / 2^N, where N is the dimensionality of the image. For a 2D image,
    this means valid time steps are below 0.1250. For a 3D image, valid
    time steps are below 0.0625.

    See:   AnisotropicDiffusionImageFilter

    See:  AnisotropicDiffusionFunction

    See:  CurvatureNDAnisotropicDiffusionFunction  (Curvature)} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterICVF23ICVF23___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterICVF23ICVF23_Clone)
    InputHasNumericTraitsCheck = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterICVF23ICVF23_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterICVF23ICVF23_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.delete_itkVectorCurvatureAnisotropicDiffusionImageFilterICVF23ICVF23
    cast = _swig_new_static_method(_itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterICVF23ICVF23_cast)

    def New(*args, **kargs):
        """New() -> itkVectorCurvatureAnisotropicDiffusionImageFilterICVF23ICVF23

        Create a new object of the class itkVectorCurvatureAnisotropicDiffusionImageFilterICVF23ICVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorCurvatureAnisotropicDiffusionImageFilterICVF23ICVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorCurvatureAnisotropicDiffusionImageFilterICVF23ICVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorCurvatureAnisotropicDiffusionImageFilterICVF23ICVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorCurvatureAnisotropicDiffusionImageFilterICVF23ICVF23 in _itkVectorCurvatureAnisotropicDiffusionImageFilterPython:
_itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterICVF23ICVF23_swigregister(itkVectorCurvatureAnisotropicDiffusionImageFilterICVF23ICVF23)
itkVectorCurvatureAnisotropicDiffusionImageFilterICVF23ICVF23___New_orig__ = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterICVF23ICVF23___New_orig__
itkVectorCurvatureAnisotropicDiffusionImageFilterICVF23ICVF23_cast = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterICVF23ICVF23_cast


def itkVectorCurvatureAnisotropicDiffusionImageFilterICVF32ICVF32_New():
    return itkVectorCurvatureAnisotropicDiffusionImageFilterICVF32ICVF32.New()

class itkVectorCurvatureAnisotropicDiffusionImageFilterICVF32ICVF32(itk.itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF32ICVF32):
    r"""


    This filter performs anisotropic diffusion on a vector itk::Image
    using the modified curvature diffusion equation (MCDE) implemented in
    itkVectorCurvatureNDAnisotropicDiffusionFunction. For detailed
    information on anisotropic diffusion and the MCDE see
    itkAnisotropicDiffusionFunction,
    itkVectorCurvatureNDAnisotropicDiffusionFunction, and
    itkCurvatureNDAnisotropicDiffusionFunction.

    Inputs and Outputs The input to this filter must be an itk::Image with
    pixel type which is either an itk::Vector, or a subclass of an
    itk::Vector. Additionally, the component type of the vector should be
    a numerical type (float or double, or a user defined type which
    correctly defines arithmetic operations with floating point accuracy).
    The output image type also has these requirements. Parameters Please
    first read all the documentation found in
    AnisotropicDiffusionImageFilter and AnisotropicDiffusionFunction. Also
    see VectorCurvatureNDAnisotropicDiffusionFunction.  The default time
    step for this filter is set to the maximum theoretically stable value:
    0.5 / 2^N, where N is the dimensionality of the image. For a 2D image,
    this means valid time steps are below 0.1250. For a 3D image, valid
    time steps are below 0.0625.

    See:   AnisotropicDiffusionImageFilter

    See:  AnisotropicDiffusionFunction

    See:  CurvatureNDAnisotropicDiffusionFunction  (Curvature)} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterICVF32ICVF32___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterICVF32ICVF32_Clone)
    InputHasNumericTraitsCheck = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterICVF32ICVF32_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterICVF32ICVF32_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.delete_itkVectorCurvatureAnisotropicDiffusionImageFilterICVF32ICVF32
    cast = _swig_new_static_method(_itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterICVF32ICVF32_cast)

    def New(*args, **kargs):
        """New() -> itkVectorCurvatureAnisotropicDiffusionImageFilterICVF32ICVF32

        Create a new object of the class itkVectorCurvatureAnisotropicDiffusionImageFilterICVF32ICVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorCurvatureAnisotropicDiffusionImageFilterICVF32ICVF32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorCurvatureAnisotropicDiffusionImageFilterICVF32ICVF32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorCurvatureAnisotropicDiffusionImageFilterICVF32ICVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorCurvatureAnisotropicDiffusionImageFilterICVF32ICVF32 in _itkVectorCurvatureAnisotropicDiffusionImageFilterPython:
_itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterICVF32ICVF32_swigregister(itkVectorCurvatureAnisotropicDiffusionImageFilterICVF32ICVF32)
itkVectorCurvatureAnisotropicDiffusionImageFilterICVF32ICVF32___New_orig__ = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterICVF32ICVF32___New_orig__
itkVectorCurvatureAnisotropicDiffusionImageFilterICVF32ICVF32_cast = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterICVF32ICVF32_cast


def itkVectorCurvatureAnisotropicDiffusionImageFilterICVF33ICVF33_New():
    return itkVectorCurvatureAnisotropicDiffusionImageFilterICVF33ICVF33.New()

class itkVectorCurvatureAnisotropicDiffusionImageFilterICVF33ICVF33(itk.itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF33ICVF33):
    r"""


    This filter performs anisotropic diffusion on a vector itk::Image
    using the modified curvature diffusion equation (MCDE) implemented in
    itkVectorCurvatureNDAnisotropicDiffusionFunction. For detailed
    information on anisotropic diffusion and the MCDE see
    itkAnisotropicDiffusionFunction,
    itkVectorCurvatureNDAnisotropicDiffusionFunction, and
    itkCurvatureNDAnisotropicDiffusionFunction.

    Inputs and Outputs The input to this filter must be an itk::Image with
    pixel type which is either an itk::Vector, or a subclass of an
    itk::Vector. Additionally, the component type of the vector should be
    a numerical type (float or double, or a user defined type which
    correctly defines arithmetic operations with floating point accuracy).
    The output image type also has these requirements. Parameters Please
    first read all the documentation found in
    AnisotropicDiffusionImageFilter and AnisotropicDiffusionFunction. Also
    see VectorCurvatureNDAnisotropicDiffusionFunction.  The default time
    step for this filter is set to the maximum theoretically stable value:
    0.5 / 2^N, where N is the dimensionality of the image. For a 2D image,
    this means valid time steps are below 0.1250. For a 3D image, valid
    time steps are below 0.0625.

    See:   AnisotropicDiffusionImageFilter

    See:  AnisotropicDiffusionFunction

    See:  CurvatureNDAnisotropicDiffusionFunction  (Curvature)} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterICVF33ICVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterICVF33ICVF33_Clone)
    InputHasNumericTraitsCheck = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterICVF33ICVF33_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterICVF33ICVF33_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.delete_itkVectorCurvatureAnisotropicDiffusionImageFilterICVF33ICVF33
    cast = _swig_new_static_method(_itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterICVF33ICVF33_cast)

    def New(*args, **kargs):
        """New() -> itkVectorCurvatureAnisotropicDiffusionImageFilterICVF33ICVF33

        Create a new object of the class itkVectorCurvatureAnisotropicDiffusionImageFilterICVF33ICVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorCurvatureAnisotropicDiffusionImageFilterICVF33ICVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorCurvatureAnisotropicDiffusionImageFilterICVF33ICVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorCurvatureAnisotropicDiffusionImageFilterICVF33ICVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorCurvatureAnisotropicDiffusionImageFilterICVF33ICVF33 in _itkVectorCurvatureAnisotropicDiffusionImageFilterPython:
_itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterICVF33ICVF33_swigregister(itkVectorCurvatureAnisotropicDiffusionImageFilterICVF33ICVF33)
itkVectorCurvatureAnisotropicDiffusionImageFilterICVF33ICVF33___New_orig__ = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterICVF33ICVF33___New_orig__
itkVectorCurvatureAnisotropicDiffusionImageFilterICVF33ICVF33_cast = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterICVF33ICVF33_cast


def itkVectorCurvatureAnisotropicDiffusionImageFilterICVF42ICVF42_New():
    return itkVectorCurvatureAnisotropicDiffusionImageFilterICVF42ICVF42.New()

class itkVectorCurvatureAnisotropicDiffusionImageFilterICVF42ICVF42(itk.itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF42ICVF42):
    r"""


    This filter performs anisotropic diffusion on a vector itk::Image
    using the modified curvature diffusion equation (MCDE) implemented in
    itkVectorCurvatureNDAnisotropicDiffusionFunction. For detailed
    information on anisotropic diffusion and the MCDE see
    itkAnisotropicDiffusionFunction,
    itkVectorCurvatureNDAnisotropicDiffusionFunction, and
    itkCurvatureNDAnisotropicDiffusionFunction.

    Inputs and Outputs The input to this filter must be an itk::Image with
    pixel type which is either an itk::Vector, or a subclass of an
    itk::Vector. Additionally, the component type of the vector should be
    a numerical type (float or double, or a user defined type which
    correctly defines arithmetic operations with floating point accuracy).
    The output image type also has these requirements. Parameters Please
    first read all the documentation found in
    AnisotropicDiffusionImageFilter and AnisotropicDiffusionFunction. Also
    see VectorCurvatureNDAnisotropicDiffusionFunction.  The default time
    step for this filter is set to the maximum theoretically stable value:
    0.5 / 2^N, where N is the dimensionality of the image. For a 2D image,
    this means valid time steps are below 0.1250. For a 3D image, valid
    time steps are below 0.0625.

    See:   AnisotropicDiffusionImageFilter

    See:  AnisotropicDiffusionFunction

    See:  CurvatureNDAnisotropicDiffusionFunction  (Curvature)} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterICVF42ICVF42___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterICVF42ICVF42_Clone)
    InputHasNumericTraitsCheck = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterICVF42ICVF42_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterICVF42ICVF42_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.delete_itkVectorCurvatureAnisotropicDiffusionImageFilterICVF42ICVF42
    cast = _swig_new_static_method(_itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterICVF42ICVF42_cast)

    def New(*args, **kargs):
        """New() -> itkVectorCurvatureAnisotropicDiffusionImageFilterICVF42ICVF42

        Create a new object of the class itkVectorCurvatureAnisotropicDiffusionImageFilterICVF42ICVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorCurvatureAnisotropicDiffusionImageFilterICVF42ICVF42.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorCurvatureAnisotropicDiffusionImageFilterICVF42ICVF42.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorCurvatureAnisotropicDiffusionImageFilterICVF42ICVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorCurvatureAnisotropicDiffusionImageFilterICVF42ICVF42 in _itkVectorCurvatureAnisotropicDiffusionImageFilterPython:
_itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterICVF42ICVF42_swigregister(itkVectorCurvatureAnisotropicDiffusionImageFilterICVF42ICVF42)
itkVectorCurvatureAnisotropicDiffusionImageFilterICVF42ICVF42___New_orig__ = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterICVF42ICVF42___New_orig__
itkVectorCurvatureAnisotropicDiffusionImageFilterICVF42ICVF42_cast = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterICVF42ICVF42_cast


def itkVectorCurvatureAnisotropicDiffusionImageFilterICVF43ICVF43_New():
    return itkVectorCurvatureAnisotropicDiffusionImageFilterICVF43ICVF43.New()

class itkVectorCurvatureAnisotropicDiffusionImageFilterICVF43ICVF43(itk.itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF43ICVF43):
    r"""


    This filter performs anisotropic diffusion on a vector itk::Image
    using the modified curvature diffusion equation (MCDE) implemented in
    itkVectorCurvatureNDAnisotropicDiffusionFunction. For detailed
    information on anisotropic diffusion and the MCDE see
    itkAnisotropicDiffusionFunction,
    itkVectorCurvatureNDAnisotropicDiffusionFunction, and
    itkCurvatureNDAnisotropicDiffusionFunction.

    Inputs and Outputs The input to this filter must be an itk::Image with
    pixel type which is either an itk::Vector, or a subclass of an
    itk::Vector. Additionally, the component type of the vector should be
    a numerical type (float or double, or a user defined type which
    correctly defines arithmetic operations with floating point accuracy).
    The output image type also has these requirements. Parameters Please
    first read all the documentation found in
    AnisotropicDiffusionImageFilter and AnisotropicDiffusionFunction. Also
    see VectorCurvatureNDAnisotropicDiffusionFunction.  The default time
    step for this filter is set to the maximum theoretically stable value:
    0.5 / 2^N, where N is the dimensionality of the image. For a 2D image,
    this means valid time steps are below 0.1250. For a 3D image, valid
    time steps are below 0.0625.

    See:   AnisotropicDiffusionImageFilter

    See:  AnisotropicDiffusionFunction

    See:  CurvatureNDAnisotropicDiffusionFunction  (Curvature)} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterICVF43ICVF43___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterICVF43ICVF43_Clone)
    InputHasNumericTraitsCheck = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterICVF43ICVF43_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterICVF43ICVF43_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.delete_itkVectorCurvatureAnisotropicDiffusionImageFilterICVF43ICVF43
    cast = _swig_new_static_method(_itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterICVF43ICVF43_cast)

    def New(*args, **kargs):
        """New() -> itkVectorCurvatureAnisotropicDiffusionImageFilterICVF43ICVF43

        Create a new object of the class itkVectorCurvatureAnisotropicDiffusionImageFilterICVF43ICVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorCurvatureAnisotropicDiffusionImageFilterICVF43ICVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorCurvatureAnisotropicDiffusionImageFilterICVF43ICVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorCurvatureAnisotropicDiffusionImageFilterICVF43ICVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorCurvatureAnisotropicDiffusionImageFilterICVF43ICVF43 in _itkVectorCurvatureAnisotropicDiffusionImageFilterPython:
_itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterICVF43ICVF43_swigregister(itkVectorCurvatureAnisotropicDiffusionImageFilterICVF43ICVF43)
itkVectorCurvatureAnisotropicDiffusionImageFilterICVF43ICVF43___New_orig__ = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterICVF43ICVF43___New_orig__
itkVectorCurvatureAnisotropicDiffusionImageFilterICVF43ICVF43_cast = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterICVF43ICVF43_cast


def itkVectorCurvatureAnisotropicDiffusionImageFilterIVF22IVF22_New():
    return itkVectorCurvatureAnisotropicDiffusionImageFilterIVF22IVF22.New()

class itkVectorCurvatureAnisotropicDiffusionImageFilterIVF22IVF22(itk.itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF22IVF22):
    r"""


    This filter performs anisotropic diffusion on a vector itk::Image
    using the modified curvature diffusion equation (MCDE) implemented in
    itkVectorCurvatureNDAnisotropicDiffusionFunction. For detailed
    information on anisotropic diffusion and the MCDE see
    itkAnisotropicDiffusionFunction,
    itkVectorCurvatureNDAnisotropicDiffusionFunction, and
    itkCurvatureNDAnisotropicDiffusionFunction.

    Inputs and Outputs The input to this filter must be an itk::Image with
    pixel type which is either an itk::Vector, or a subclass of an
    itk::Vector. Additionally, the component type of the vector should be
    a numerical type (float or double, or a user defined type which
    correctly defines arithmetic operations with floating point accuracy).
    The output image type also has these requirements. Parameters Please
    first read all the documentation found in
    AnisotropicDiffusionImageFilter and AnisotropicDiffusionFunction. Also
    see VectorCurvatureNDAnisotropicDiffusionFunction.  The default time
    step for this filter is set to the maximum theoretically stable value:
    0.5 / 2^N, where N is the dimensionality of the image. For a 2D image,
    this means valid time steps are below 0.1250. For a 3D image, valid
    time steps are below 0.0625.

    See:   AnisotropicDiffusionImageFilter

    See:  AnisotropicDiffusionFunction

    See:  CurvatureNDAnisotropicDiffusionFunction  (Curvature)} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterIVF22IVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterIVF22IVF22_Clone)
    InputHasNumericTraitsCheck = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterIVF22IVF22_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterIVF22IVF22_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.delete_itkVectorCurvatureAnisotropicDiffusionImageFilterIVF22IVF22
    cast = _swig_new_static_method(_itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterIVF22IVF22_cast)

    def New(*args, **kargs):
        """New() -> itkVectorCurvatureAnisotropicDiffusionImageFilterIVF22IVF22

        Create a new object of the class itkVectorCurvatureAnisotropicDiffusionImageFilterIVF22IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorCurvatureAnisotropicDiffusionImageFilterIVF22IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorCurvatureAnisotropicDiffusionImageFilterIVF22IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorCurvatureAnisotropicDiffusionImageFilterIVF22IVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorCurvatureAnisotropicDiffusionImageFilterIVF22IVF22 in _itkVectorCurvatureAnisotropicDiffusionImageFilterPython:
_itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterIVF22IVF22_swigregister(itkVectorCurvatureAnisotropicDiffusionImageFilterIVF22IVF22)
itkVectorCurvatureAnisotropicDiffusionImageFilterIVF22IVF22___New_orig__ = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterIVF22IVF22___New_orig__
itkVectorCurvatureAnisotropicDiffusionImageFilterIVF22IVF22_cast = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterIVF22IVF22_cast


def itkVectorCurvatureAnisotropicDiffusionImageFilterIVF23IVF23_New():
    return itkVectorCurvatureAnisotropicDiffusionImageFilterIVF23IVF23.New()

class itkVectorCurvatureAnisotropicDiffusionImageFilterIVF23IVF23(itk.itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF23IVF23):
    r"""


    This filter performs anisotropic diffusion on a vector itk::Image
    using the modified curvature diffusion equation (MCDE) implemented in
    itkVectorCurvatureNDAnisotropicDiffusionFunction. For detailed
    information on anisotropic diffusion and the MCDE see
    itkAnisotropicDiffusionFunction,
    itkVectorCurvatureNDAnisotropicDiffusionFunction, and
    itkCurvatureNDAnisotropicDiffusionFunction.

    Inputs and Outputs The input to this filter must be an itk::Image with
    pixel type which is either an itk::Vector, or a subclass of an
    itk::Vector. Additionally, the component type of the vector should be
    a numerical type (float or double, or a user defined type which
    correctly defines arithmetic operations with floating point accuracy).
    The output image type also has these requirements. Parameters Please
    first read all the documentation found in
    AnisotropicDiffusionImageFilter and AnisotropicDiffusionFunction. Also
    see VectorCurvatureNDAnisotropicDiffusionFunction.  The default time
    step for this filter is set to the maximum theoretically stable value:
    0.5 / 2^N, where N is the dimensionality of the image. For a 2D image,
    this means valid time steps are below 0.1250. For a 3D image, valid
    time steps are below 0.0625.

    See:   AnisotropicDiffusionImageFilter

    See:  AnisotropicDiffusionFunction

    See:  CurvatureNDAnisotropicDiffusionFunction  (Curvature)} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterIVF23IVF23___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterIVF23IVF23_Clone)
    InputHasNumericTraitsCheck = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterIVF23IVF23_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterIVF23IVF23_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.delete_itkVectorCurvatureAnisotropicDiffusionImageFilterIVF23IVF23
    cast = _swig_new_static_method(_itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterIVF23IVF23_cast)

    def New(*args, **kargs):
        """New() -> itkVectorCurvatureAnisotropicDiffusionImageFilterIVF23IVF23

        Create a new object of the class itkVectorCurvatureAnisotropicDiffusionImageFilterIVF23IVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorCurvatureAnisotropicDiffusionImageFilterIVF23IVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorCurvatureAnisotropicDiffusionImageFilterIVF23IVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorCurvatureAnisotropicDiffusionImageFilterIVF23IVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorCurvatureAnisotropicDiffusionImageFilterIVF23IVF23 in _itkVectorCurvatureAnisotropicDiffusionImageFilterPython:
_itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterIVF23IVF23_swigregister(itkVectorCurvatureAnisotropicDiffusionImageFilterIVF23IVF23)
itkVectorCurvatureAnisotropicDiffusionImageFilterIVF23IVF23___New_orig__ = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterIVF23IVF23___New_orig__
itkVectorCurvatureAnisotropicDiffusionImageFilterIVF23IVF23_cast = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterIVF23IVF23_cast


def itkVectorCurvatureAnisotropicDiffusionImageFilterIVF32IVF32_New():
    return itkVectorCurvatureAnisotropicDiffusionImageFilterIVF32IVF32.New()

class itkVectorCurvatureAnisotropicDiffusionImageFilterIVF32IVF32(itk.itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF32IVF32):
    r"""


    This filter performs anisotropic diffusion on a vector itk::Image
    using the modified curvature diffusion equation (MCDE) implemented in
    itkVectorCurvatureNDAnisotropicDiffusionFunction. For detailed
    information on anisotropic diffusion and the MCDE see
    itkAnisotropicDiffusionFunction,
    itkVectorCurvatureNDAnisotropicDiffusionFunction, and
    itkCurvatureNDAnisotropicDiffusionFunction.

    Inputs and Outputs The input to this filter must be an itk::Image with
    pixel type which is either an itk::Vector, or a subclass of an
    itk::Vector. Additionally, the component type of the vector should be
    a numerical type (float or double, or a user defined type which
    correctly defines arithmetic operations with floating point accuracy).
    The output image type also has these requirements. Parameters Please
    first read all the documentation found in
    AnisotropicDiffusionImageFilter and AnisotropicDiffusionFunction. Also
    see VectorCurvatureNDAnisotropicDiffusionFunction.  The default time
    step for this filter is set to the maximum theoretically stable value:
    0.5 / 2^N, where N is the dimensionality of the image. For a 2D image,
    this means valid time steps are below 0.1250. For a 3D image, valid
    time steps are below 0.0625.

    See:   AnisotropicDiffusionImageFilter

    See:  AnisotropicDiffusionFunction

    See:  CurvatureNDAnisotropicDiffusionFunction  (Curvature)} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterIVF32IVF32___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterIVF32IVF32_Clone)
    InputHasNumericTraitsCheck = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterIVF32IVF32_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterIVF32IVF32_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.delete_itkVectorCurvatureAnisotropicDiffusionImageFilterIVF32IVF32
    cast = _swig_new_static_method(_itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterIVF32IVF32_cast)

    def New(*args, **kargs):
        """New() -> itkVectorCurvatureAnisotropicDiffusionImageFilterIVF32IVF32

        Create a new object of the class itkVectorCurvatureAnisotropicDiffusionImageFilterIVF32IVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorCurvatureAnisotropicDiffusionImageFilterIVF32IVF32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorCurvatureAnisotropicDiffusionImageFilterIVF32IVF32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorCurvatureAnisotropicDiffusionImageFilterIVF32IVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorCurvatureAnisotropicDiffusionImageFilterIVF32IVF32 in _itkVectorCurvatureAnisotropicDiffusionImageFilterPython:
_itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterIVF32IVF32_swigregister(itkVectorCurvatureAnisotropicDiffusionImageFilterIVF32IVF32)
itkVectorCurvatureAnisotropicDiffusionImageFilterIVF32IVF32___New_orig__ = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterIVF32IVF32___New_orig__
itkVectorCurvatureAnisotropicDiffusionImageFilterIVF32IVF32_cast = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterIVF32IVF32_cast


def itkVectorCurvatureAnisotropicDiffusionImageFilterIVF33IVF33_New():
    return itkVectorCurvatureAnisotropicDiffusionImageFilterIVF33IVF33.New()

class itkVectorCurvatureAnisotropicDiffusionImageFilterIVF33IVF33(itk.itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF33IVF33):
    r"""


    This filter performs anisotropic diffusion on a vector itk::Image
    using the modified curvature diffusion equation (MCDE) implemented in
    itkVectorCurvatureNDAnisotropicDiffusionFunction. For detailed
    information on anisotropic diffusion and the MCDE see
    itkAnisotropicDiffusionFunction,
    itkVectorCurvatureNDAnisotropicDiffusionFunction, and
    itkCurvatureNDAnisotropicDiffusionFunction.

    Inputs and Outputs The input to this filter must be an itk::Image with
    pixel type which is either an itk::Vector, or a subclass of an
    itk::Vector. Additionally, the component type of the vector should be
    a numerical type (float or double, or a user defined type which
    correctly defines arithmetic operations with floating point accuracy).
    The output image type also has these requirements. Parameters Please
    first read all the documentation found in
    AnisotropicDiffusionImageFilter and AnisotropicDiffusionFunction. Also
    see VectorCurvatureNDAnisotropicDiffusionFunction.  The default time
    step for this filter is set to the maximum theoretically stable value:
    0.5 / 2^N, where N is the dimensionality of the image. For a 2D image,
    this means valid time steps are below 0.1250. For a 3D image, valid
    time steps are below 0.0625.

    See:   AnisotropicDiffusionImageFilter

    See:  AnisotropicDiffusionFunction

    See:  CurvatureNDAnisotropicDiffusionFunction  (Curvature)} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterIVF33IVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterIVF33IVF33_Clone)
    InputHasNumericTraitsCheck = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterIVF33IVF33_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterIVF33IVF33_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.delete_itkVectorCurvatureAnisotropicDiffusionImageFilterIVF33IVF33
    cast = _swig_new_static_method(_itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterIVF33IVF33_cast)

    def New(*args, **kargs):
        """New() -> itkVectorCurvatureAnisotropicDiffusionImageFilterIVF33IVF33

        Create a new object of the class itkVectorCurvatureAnisotropicDiffusionImageFilterIVF33IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorCurvatureAnisotropicDiffusionImageFilterIVF33IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorCurvatureAnisotropicDiffusionImageFilterIVF33IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorCurvatureAnisotropicDiffusionImageFilterIVF33IVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorCurvatureAnisotropicDiffusionImageFilterIVF33IVF33 in _itkVectorCurvatureAnisotropicDiffusionImageFilterPython:
_itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterIVF33IVF33_swigregister(itkVectorCurvatureAnisotropicDiffusionImageFilterIVF33IVF33)
itkVectorCurvatureAnisotropicDiffusionImageFilterIVF33IVF33___New_orig__ = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterIVF33IVF33___New_orig__
itkVectorCurvatureAnisotropicDiffusionImageFilterIVF33IVF33_cast = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterIVF33IVF33_cast


def itkVectorCurvatureAnisotropicDiffusionImageFilterIVF42IVF42_New():
    return itkVectorCurvatureAnisotropicDiffusionImageFilterIVF42IVF42.New()

class itkVectorCurvatureAnisotropicDiffusionImageFilterIVF42IVF42(itk.itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF42IVF42):
    r"""


    This filter performs anisotropic diffusion on a vector itk::Image
    using the modified curvature diffusion equation (MCDE) implemented in
    itkVectorCurvatureNDAnisotropicDiffusionFunction. For detailed
    information on anisotropic diffusion and the MCDE see
    itkAnisotropicDiffusionFunction,
    itkVectorCurvatureNDAnisotropicDiffusionFunction, and
    itkCurvatureNDAnisotropicDiffusionFunction.

    Inputs and Outputs The input to this filter must be an itk::Image with
    pixel type which is either an itk::Vector, or a subclass of an
    itk::Vector. Additionally, the component type of the vector should be
    a numerical type (float or double, or a user defined type which
    correctly defines arithmetic operations with floating point accuracy).
    The output image type also has these requirements. Parameters Please
    first read all the documentation found in
    AnisotropicDiffusionImageFilter and AnisotropicDiffusionFunction. Also
    see VectorCurvatureNDAnisotropicDiffusionFunction.  The default time
    step for this filter is set to the maximum theoretically stable value:
    0.5 / 2^N, where N is the dimensionality of the image. For a 2D image,
    this means valid time steps are below 0.1250. For a 3D image, valid
    time steps are below 0.0625.

    See:   AnisotropicDiffusionImageFilter

    See:  AnisotropicDiffusionFunction

    See:  CurvatureNDAnisotropicDiffusionFunction  (Curvature)} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterIVF42IVF42___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterIVF42IVF42_Clone)
    InputHasNumericTraitsCheck = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterIVF42IVF42_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterIVF42IVF42_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.delete_itkVectorCurvatureAnisotropicDiffusionImageFilterIVF42IVF42
    cast = _swig_new_static_method(_itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterIVF42IVF42_cast)

    def New(*args, **kargs):
        """New() -> itkVectorCurvatureAnisotropicDiffusionImageFilterIVF42IVF42

        Create a new object of the class itkVectorCurvatureAnisotropicDiffusionImageFilterIVF42IVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorCurvatureAnisotropicDiffusionImageFilterIVF42IVF42.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorCurvatureAnisotropicDiffusionImageFilterIVF42IVF42.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorCurvatureAnisotropicDiffusionImageFilterIVF42IVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorCurvatureAnisotropicDiffusionImageFilterIVF42IVF42 in _itkVectorCurvatureAnisotropicDiffusionImageFilterPython:
_itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterIVF42IVF42_swigregister(itkVectorCurvatureAnisotropicDiffusionImageFilterIVF42IVF42)
itkVectorCurvatureAnisotropicDiffusionImageFilterIVF42IVF42___New_orig__ = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterIVF42IVF42___New_orig__
itkVectorCurvatureAnisotropicDiffusionImageFilterIVF42IVF42_cast = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterIVF42IVF42_cast


def itkVectorCurvatureAnisotropicDiffusionImageFilterIVF43IVF43_New():
    return itkVectorCurvatureAnisotropicDiffusionImageFilterIVF43IVF43.New()

class itkVectorCurvatureAnisotropicDiffusionImageFilterIVF43IVF43(itk.itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF43IVF43):
    r"""


    This filter performs anisotropic diffusion on a vector itk::Image
    using the modified curvature diffusion equation (MCDE) implemented in
    itkVectorCurvatureNDAnisotropicDiffusionFunction. For detailed
    information on anisotropic diffusion and the MCDE see
    itkAnisotropicDiffusionFunction,
    itkVectorCurvatureNDAnisotropicDiffusionFunction, and
    itkCurvatureNDAnisotropicDiffusionFunction.

    Inputs and Outputs The input to this filter must be an itk::Image with
    pixel type which is either an itk::Vector, or a subclass of an
    itk::Vector. Additionally, the component type of the vector should be
    a numerical type (float or double, or a user defined type which
    correctly defines arithmetic operations with floating point accuracy).
    The output image type also has these requirements. Parameters Please
    first read all the documentation found in
    AnisotropicDiffusionImageFilter and AnisotropicDiffusionFunction. Also
    see VectorCurvatureNDAnisotropicDiffusionFunction.  The default time
    step for this filter is set to the maximum theoretically stable value:
    0.5 / 2^N, where N is the dimensionality of the image. For a 2D image,
    this means valid time steps are below 0.1250. For a 3D image, valid
    time steps are below 0.0625.

    See:   AnisotropicDiffusionImageFilter

    See:  AnisotropicDiffusionFunction

    See:  CurvatureNDAnisotropicDiffusionFunction  (Curvature)} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterIVF43IVF43___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterIVF43IVF43_Clone)
    InputHasNumericTraitsCheck = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterIVF43IVF43_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterIVF43IVF43_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.delete_itkVectorCurvatureAnisotropicDiffusionImageFilterIVF43IVF43
    cast = _swig_new_static_method(_itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterIVF43IVF43_cast)

    def New(*args, **kargs):
        """New() -> itkVectorCurvatureAnisotropicDiffusionImageFilterIVF43IVF43

        Create a new object of the class itkVectorCurvatureAnisotropicDiffusionImageFilterIVF43IVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorCurvatureAnisotropicDiffusionImageFilterIVF43IVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorCurvatureAnisotropicDiffusionImageFilterIVF43IVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorCurvatureAnisotropicDiffusionImageFilterIVF43IVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorCurvatureAnisotropicDiffusionImageFilterIVF43IVF43 in _itkVectorCurvatureAnisotropicDiffusionImageFilterPython:
_itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterIVF43IVF43_swigregister(itkVectorCurvatureAnisotropicDiffusionImageFilterIVF43IVF43)
itkVectorCurvatureAnisotropicDiffusionImageFilterIVF43IVF43___New_orig__ = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterIVF43IVF43___New_orig__
itkVectorCurvatureAnisotropicDiffusionImageFilterIVF43IVF43_cast = _itkVectorCurvatureAnisotropicDiffusionImageFilterPython.itkVectorCurvatureAnisotropicDiffusionImageFilterIVF43IVF43_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def vector_curvature_anisotropic_diffusion_image_filter(*args, **kwargs):
    """Procedural interface for VectorCurvatureAnisotropicDiffusionImageFilter"""
    import itk
    instance = itk.VectorCurvatureAnisotropicDiffusionImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def vector_curvature_anisotropic_diffusion_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.VectorCurvatureAnisotropicDiffusionImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.VectorCurvatureAnisotropicDiffusionImageFilter.values()[0]
    else:
        filter_object = itk.VectorCurvatureAnisotropicDiffusionImageFilter

    vector_curvature_anisotropic_diffusion_image_filter.__doc__ = filter_object.__doc__
    vector_curvature_anisotropic_diffusion_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    vector_curvature_anisotropic_diffusion_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.VectorCurvatureAnisotropicDiffusionImageFilter, itkTemplate.itkTemplate):
        vector_curvature_anisotropic_diffusion_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        vector_curvature_anisotropic_diffusion_image_filter.__doc__ += "\n"
        vector_curvature_anisotropic_diffusion_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        vector_curvature_anisotropic_diffusion_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



