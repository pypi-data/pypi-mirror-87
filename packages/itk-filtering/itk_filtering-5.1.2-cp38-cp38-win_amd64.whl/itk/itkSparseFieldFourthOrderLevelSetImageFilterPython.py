# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKLevelSetsPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkSparseFieldFourthOrderLevelSetImageFilterPython
else:
    import _itkSparseFieldFourthOrderLevelSetImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkSparseFieldFourthOrderLevelSetImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkSparseFieldFourthOrderLevelSetImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkIndexPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkOffsetPython
import itk.ITKCommonBasePython
import itk.itkImagePython
import itk.itkImageRegionPython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkSparseFieldLevelSetImageFilterPython
import itk.itkFiniteDifferenceImageFilterPython
import itk.itkFiniteDifferenceFunctionPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
import itk.itkImageToImageFilterCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterBPython
import itk.itkLevelSetFunctionPython
class vectoritkImageNBNIF22(object):
    r"""Proxy of C++ std::vector< itkImageNBNIF22_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22___nonzero__)
    __bool__ = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22___bool__)
    __len__ = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22___len__)
    __getslice__ = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22___getslice__)
    __setslice__ = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22___setslice__)
    __delslice__ = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22___delslice__)
    __delitem__ = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22___delitem__)
    __getitem__ = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22___getitem__)
    __setitem__ = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22___setitem__)
    pop = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_pop)
    append = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_append)
    empty = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_empty)
    size = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_size)
    swap = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_swap)
    begin = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_begin)
    end = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_end)
    rbegin = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_rbegin)
    rend = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_rend)
    clear = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_clear)
    get_allocator = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_get_allocator)
    pop_back = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_pop_back)
    erase = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_erase)

    def __init__(self, *args):
        r"""
        __init__(vectoritkImageNBNIF22 self) -> vectoritkImageNBNIF22
        __init__(vectoritkImageNBNIF22 self, vectoritkImageNBNIF22 other) -> vectoritkImageNBNIF22
        __init__(vectoritkImageNBNIF22 self, std::vector< itkImageNBNIF22_Pointer >::size_type size) -> vectoritkImageNBNIF22
        __init__(vectoritkImageNBNIF22 self, std::vector< itkImageNBNIF22_Pointer >::size_type size, std::vector< itkImageNBNIF22_Pointer >::value_type const & value) -> vectoritkImageNBNIF22
        """
        _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_swiginit(self, _itkSparseFieldFourthOrderLevelSetImageFilterPython.new_vectoritkImageNBNIF22(*args))
    push_back = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_push_back)
    front = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_front)
    back = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_back)
    assign = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_assign)
    resize = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_resize)
    insert = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_insert)
    reserve = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_reserve)
    capacity = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_capacity)
    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_vectoritkImageNBNIF22

# Register vectoritkImageNBNIF22 in _itkSparseFieldFourthOrderLevelSetImageFilterPython:
_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_swigregister(vectoritkImageNBNIF22)

class vectoritkImageNBNID22(object):
    r"""Proxy of C++ std::vector< itkImageNBNID22_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22___nonzero__)
    __bool__ = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22___bool__)
    __len__ = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22___len__)
    __getslice__ = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22___getslice__)
    __setslice__ = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22___setslice__)
    __delslice__ = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22___delslice__)
    __delitem__ = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22___delitem__)
    __getitem__ = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22___getitem__)
    __setitem__ = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22___setitem__)
    pop = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_pop)
    append = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_append)
    empty = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_empty)
    size = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_size)
    swap = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_swap)
    begin = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_begin)
    end = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_end)
    rbegin = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_rbegin)
    rend = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_rend)
    clear = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_clear)
    get_allocator = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_get_allocator)
    pop_back = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_pop_back)
    erase = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_erase)

    def __init__(self, *args):
        r"""
        __init__(vectoritkImageNBNID22 self) -> vectoritkImageNBNID22
        __init__(vectoritkImageNBNID22 self, vectoritkImageNBNID22 other) -> vectoritkImageNBNID22
        __init__(vectoritkImageNBNID22 self, std::vector< itkImageNBNID22_Pointer >::size_type size) -> vectoritkImageNBNID22
        __init__(vectoritkImageNBNID22 self, std::vector< itkImageNBNID22_Pointer >::size_type size, std::vector< itkImageNBNID22_Pointer >::value_type const & value) -> vectoritkImageNBNID22
        """
        _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_swiginit(self, _itkSparseFieldFourthOrderLevelSetImageFilterPython.new_vectoritkImageNBNID22(*args))
    push_back = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_push_back)
    front = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_front)
    back = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_back)
    assign = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_assign)
    resize = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_resize)
    insert = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_insert)
    reserve = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_reserve)
    capacity = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_capacity)
    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_vectoritkImageNBNID22

# Register vectoritkImageNBNID22 in _itkSparseFieldFourthOrderLevelSetImageFilterPython:
_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_swigregister(vectoritkImageNBNID22)

class vectoritkImageNBNIF33(object):
    r"""Proxy of C++ std::vector< itkImageNBNIF33_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33___nonzero__)
    __bool__ = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33___bool__)
    __len__ = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33___len__)
    __getslice__ = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33___getslice__)
    __setslice__ = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33___setslice__)
    __delslice__ = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33___delslice__)
    __delitem__ = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33___delitem__)
    __getitem__ = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33___getitem__)
    __setitem__ = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33___setitem__)
    pop = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_pop)
    append = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_append)
    empty = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_empty)
    size = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_size)
    swap = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_swap)
    begin = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_begin)
    end = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_end)
    rbegin = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_rbegin)
    rend = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_rend)
    clear = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_clear)
    get_allocator = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_get_allocator)
    pop_back = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_pop_back)
    erase = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_erase)

    def __init__(self, *args):
        r"""
        __init__(vectoritkImageNBNIF33 self) -> vectoritkImageNBNIF33
        __init__(vectoritkImageNBNIF33 self, vectoritkImageNBNIF33 other) -> vectoritkImageNBNIF33
        __init__(vectoritkImageNBNIF33 self, std::vector< itkImageNBNIF33_Pointer >::size_type size) -> vectoritkImageNBNIF33
        __init__(vectoritkImageNBNIF33 self, std::vector< itkImageNBNIF33_Pointer >::size_type size, std::vector< itkImageNBNIF33_Pointer >::value_type const & value) -> vectoritkImageNBNIF33
        """
        _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_swiginit(self, _itkSparseFieldFourthOrderLevelSetImageFilterPython.new_vectoritkImageNBNIF33(*args))
    push_back = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_push_back)
    front = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_front)
    back = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_back)
    assign = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_assign)
    resize = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_resize)
    insert = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_insert)
    reserve = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_reserve)
    capacity = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_capacity)
    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_vectoritkImageNBNIF33

# Register vectoritkImageNBNIF33 in _itkSparseFieldFourthOrderLevelSetImageFilterPython:
_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_swigregister(vectoritkImageNBNIF33)

class vectoritkImageNBNID33(object):
    r"""Proxy of C++ std::vector< itkImageNBNID33_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33___nonzero__)
    __bool__ = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33___bool__)
    __len__ = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33___len__)
    __getslice__ = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33___getslice__)
    __setslice__ = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33___setslice__)
    __delslice__ = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33___delslice__)
    __delitem__ = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33___delitem__)
    __getitem__ = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33___getitem__)
    __setitem__ = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33___setitem__)
    pop = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_pop)
    append = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_append)
    empty = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_empty)
    size = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_size)
    swap = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_swap)
    begin = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_begin)
    end = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_end)
    rbegin = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_rbegin)
    rend = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_rend)
    clear = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_clear)
    get_allocator = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_get_allocator)
    pop_back = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_pop_back)
    erase = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_erase)

    def __init__(self, *args):
        r"""
        __init__(vectoritkImageNBNID33 self) -> vectoritkImageNBNID33
        __init__(vectoritkImageNBNID33 self, vectoritkImageNBNID33 other) -> vectoritkImageNBNID33
        __init__(vectoritkImageNBNID33 self, std::vector< itkImageNBNID33_Pointer >::size_type size) -> vectoritkImageNBNID33
        __init__(vectoritkImageNBNID33 self, std::vector< itkImageNBNID33_Pointer >::size_type size, std::vector< itkImageNBNID33_Pointer >::value_type const & value) -> vectoritkImageNBNID33
        """
        _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_swiginit(self, _itkSparseFieldFourthOrderLevelSetImageFilterPython.new_vectoritkImageNBNID33(*args))
    push_back = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_push_back)
    front = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_front)
    back = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_back)
    assign = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_assign)
    resize = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_resize)
    insert = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_insert)
    reserve = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_reserve)
    capacity = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_capacity)
    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_vectoritkImageNBNID33

# Register vectoritkImageNBNID33 in _itkSparseFieldFourthOrderLevelSetImageFilterPython:
_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_swigregister(vectoritkImageNBNID33)


def itkImageNBNID22_New():
    return itkImageNBNID22.New()

class itkImageNBNID22(itk.itkImagePython.itkImageBase2):
    r"""


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed directly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:  ImageBase

    See:  ImageContainerInterface
    {Core/Common/SetPixelValueInOneImage,Set Pixel Value In One Image}
    {Core/Common/GetImageSize,Get Image Size}
    {Core/Common/SortITKIndex,Sort ITK Index}
    {Core/Common/ReturnObjectFromFunction,Return Object From Function}
    {Core/Common/CreateAnotherInstanceOfAnImage,Create Another Instance Of
    An Image} {Core/Common/PassImageToFunction,Pass Image To Function}
    {Core/Common/DeepCopyImage,Deep Copy Image}
    {Core/Common/ThrowException,Throw Exception}
    {Core/Common/GetOrSetMemberVariableOfITKClass,Get Or Set Member
    Variable Of ITK Class} {Core/Common/MiniPipeline,Mini Pipeline}
    {Core/Common/CheckIfModuleIsPresent,Check If Module Is Present}
    {Core/Common/DisplayImage,Display Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID22___New_orig__)
    Clone = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID22_Clone)
    Allocate = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID22_Allocate)
    FillBuffer = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID22_FillBuffer)
    SetPixel = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID22_SetPixel)
    GetPixel = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID22_GetPixel)
    GetBufferPointer = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID22_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID22_GetPixelContainer)
    SetPixelContainer = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID22_SetPixelContainer)
    Graft = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID22_Graft)
    GetPixelAccessor = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID22_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID22_GetNeighborhoodAccessor)
    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_itkImageNBNID22
    cast = _swig_new_static_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID22_cast)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageNBNID22

        Create a new object of the class itkImageNBNID22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageNBNID22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageNBNID22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageNBNID22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageNBNID22 in _itkSparseFieldFourthOrderLevelSetImageFilterPython:
_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID22_swigregister(itkImageNBNID22)
itkImageNBNID22___New_orig__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID22___New_orig__
itkImageNBNID22_cast = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID22_cast


def itkImageNBNID33_New():
    return itkImageNBNID33.New()

class itkImageNBNID33(itk.itkImagePython.itkImageBase3):
    r"""


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed directly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:  ImageBase

    See:  ImageContainerInterface
    {Core/Common/SetPixelValueInOneImage,Set Pixel Value In One Image}
    {Core/Common/GetImageSize,Get Image Size}
    {Core/Common/SortITKIndex,Sort ITK Index}
    {Core/Common/ReturnObjectFromFunction,Return Object From Function}
    {Core/Common/CreateAnotherInstanceOfAnImage,Create Another Instance Of
    An Image} {Core/Common/PassImageToFunction,Pass Image To Function}
    {Core/Common/DeepCopyImage,Deep Copy Image}
    {Core/Common/ThrowException,Throw Exception}
    {Core/Common/GetOrSetMemberVariableOfITKClass,Get Or Set Member
    Variable Of ITK Class} {Core/Common/MiniPipeline,Mini Pipeline}
    {Core/Common/CheckIfModuleIsPresent,Check If Module Is Present}
    {Core/Common/DisplayImage,Display Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID33___New_orig__)
    Clone = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID33_Clone)
    Allocate = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID33_Allocate)
    FillBuffer = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID33_FillBuffer)
    SetPixel = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID33_SetPixel)
    GetPixel = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID33_GetPixel)
    GetBufferPointer = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID33_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID33_GetPixelContainer)
    SetPixelContainer = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID33_SetPixelContainer)
    Graft = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID33_Graft)
    GetPixelAccessor = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID33_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID33_GetNeighborhoodAccessor)
    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_itkImageNBNID33
    cast = _swig_new_static_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID33_cast)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageNBNID33

        Create a new object of the class itkImageNBNID33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageNBNID33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageNBNID33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageNBNID33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageNBNID33 in _itkSparseFieldFourthOrderLevelSetImageFilterPython:
_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID33_swigregister(itkImageNBNID33)
itkImageNBNID33___New_orig__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID33___New_orig__
itkImageNBNID33_cast = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID33_cast


def itkImageNBNIF22_New():
    return itkImageNBNIF22.New()

class itkImageNBNIF22(itk.itkImagePython.itkImageBase2):
    r"""


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed directly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:  ImageBase

    See:  ImageContainerInterface
    {Core/Common/SetPixelValueInOneImage,Set Pixel Value In One Image}
    {Core/Common/GetImageSize,Get Image Size}
    {Core/Common/SortITKIndex,Sort ITK Index}
    {Core/Common/ReturnObjectFromFunction,Return Object From Function}
    {Core/Common/CreateAnotherInstanceOfAnImage,Create Another Instance Of
    An Image} {Core/Common/PassImageToFunction,Pass Image To Function}
    {Core/Common/DeepCopyImage,Deep Copy Image}
    {Core/Common/ThrowException,Throw Exception}
    {Core/Common/GetOrSetMemberVariableOfITKClass,Get Or Set Member
    Variable Of ITK Class} {Core/Common/MiniPipeline,Mini Pipeline}
    {Core/Common/CheckIfModuleIsPresent,Check If Module Is Present}
    {Core/Common/DisplayImage,Display Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF22___New_orig__)
    Clone = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF22_Clone)
    Allocate = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF22_Allocate)
    FillBuffer = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF22_FillBuffer)
    SetPixel = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF22_SetPixel)
    GetPixel = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF22_GetPixel)
    GetBufferPointer = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF22_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF22_GetPixelContainer)
    SetPixelContainer = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF22_SetPixelContainer)
    Graft = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF22_Graft)
    GetPixelAccessor = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF22_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF22_GetNeighborhoodAccessor)
    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_itkImageNBNIF22
    cast = _swig_new_static_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF22_cast)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageNBNIF22

        Create a new object of the class itkImageNBNIF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageNBNIF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageNBNIF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageNBNIF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageNBNIF22 in _itkSparseFieldFourthOrderLevelSetImageFilterPython:
_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF22_swigregister(itkImageNBNIF22)
itkImageNBNIF22___New_orig__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF22___New_orig__
itkImageNBNIF22_cast = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF22_cast


def itkImageNBNIF33_New():
    return itkImageNBNIF33.New()

class itkImageNBNIF33(itk.itkImagePython.itkImageBase3):
    r"""


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed directly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:  ImageBase

    See:  ImageContainerInterface
    {Core/Common/SetPixelValueInOneImage,Set Pixel Value In One Image}
    {Core/Common/GetImageSize,Get Image Size}
    {Core/Common/SortITKIndex,Sort ITK Index}
    {Core/Common/ReturnObjectFromFunction,Return Object From Function}
    {Core/Common/CreateAnotherInstanceOfAnImage,Create Another Instance Of
    An Image} {Core/Common/PassImageToFunction,Pass Image To Function}
    {Core/Common/DeepCopyImage,Deep Copy Image}
    {Core/Common/ThrowException,Throw Exception}
    {Core/Common/GetOrSetMemberVariableOfITKClass,Get Or Set Member
    Variable Of ITK Class} {Core/Common/MiniPipeline,Mini Pipeline}
    {Core/Common/CheckIfModuleIsPresent,Check If Module Is Present}
    {Core/Common/DisplayImage,Display Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF33___New_orig__)
    Clone = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF33_Clone)
    Allocate = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF33_Allocate)
    FillBuffer = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF33_FillBuffer)
    SetPixel = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF33_SetPixel)
    GetPixel = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF33_GetPixel)
    GetBufferPointer = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF33_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF33_GetPixelContainer)
    SetPixelContainer = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF33_SetPixelContainer)
    Graft = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF33_Graft)
    GetPixelAccessor = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF33_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF33_GetNeighborhoodAccessor)
    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_itkImageNBNIF33
    cast = _swig_new_static_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF33_cast)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageNBNIF33

        Create a new object of the class itkImageNBNIF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageNBNIF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageNBNIF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageNBNIF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageNBNIF33 in _itkSparseFieldFourthOrderLevelSetImageFilterPython:
_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF33_swigregister(itkImageNBNIF33)
itkImageNBNIF33___New_orig__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF33___New_orig__
itkImageNBNIF33_cast = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF33_cast


def itkLevelSetFunctionWithRefitTermID2SINBNID22_New():
    return itkLevelSetFunctionWithRefitTermID2SINBNID22.New()

class itkLevelSetFunctionWithRefitTermID2SINBNID22(itk.itkLevelSetFunctionPython.itkLevelSetFunctionID2):
    r"""


    This class extends the LevelSetFunction class by adding a grow term
    based on a target curvature stored in a sparse image.

    We extend the LevelSetFunction class to add a refitting term. This
    refitting term forces the curvature of the level set interface to
    match a prescribed curvature. The prescribed curvature is provided in
    a sparse image format. The NodeType for the sparse image should
    contain the member variables m_Curvature and m_CurvatureFlag. The
    refitting term is defined as part of the propagation term of the
    original LevelSetFunction. To this purpose we defined the
    PropagationSpeed method which computes the refitting term and also
    adds to this term the value returned by the new virtual
    OtherPropagationSpeed. Therefore, classes derived from this class MUST
    NOT overwrite the PropagationSpeed method. Instead classes wishing to
    define a propagation term must define OtherPropagationSpeed. IMPORTANT
    Subclasses MUST NOT overwrite the PropagationSpeed method. Define
    OtherPropagationSpeed instead. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermID2SINBNID22___New_orig__)
    Clone = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermID2SINBNID22_Clone)
    SetRefitWeight = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermID2SINBNID22_SetRefitWeight)
    SetOtherPropagationWeight = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermID2SINBNID22_SetOtherPropagationWeight)
    SetSparseTargetImage = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermID2SINBNID22_SetSparseTargetImage)
    GetSparseTargetImage = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermID2SINBNID22_GetSparseTargetImage)
    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_itkLevelSetFunctionWithRefitTermID2SINBNID22
    cast = _swig_new_static_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermID2SINBNID22_cast)

    def New(*args, **kargs):
        """New() -> itkLevelSetFunctionWithRefitTermID2SINBNID22

        Create a new object of the class itkLevelSetFunctionWithRefitTermID2SINBNID22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetFunctionWithRefitTermID2SINBNID22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLevelSetFunctionWithRefitTermID2SINBNID22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLevelSetFunctionWithRefitTermID2SINBNID22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLevelSetFunctionWithRefitTermID2SINBNID22 in _itkSparseFieldFourthOrderLevelSetImageFilterPython:
_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermID2SINBNID22_swigregister(itkLevelSetFunctionWithRefitTermID2SINBNID22)
itkLevelSetFunctionWithRefitTermID2SINBNID22___New_orig__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermID2SINBNID22___New_orig__
itkLevelSetFunctionWithRefitTermID2SINBNID22_cast = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermID2SINBNID22_cast


def itkLevelSetFunctionWithRefitTermID3SINBNID33_New():
    return itkLevelSetFunctionWithRefitTermID3SINBNID33.New()

class itkLevelSetFunctionWithRefitTermID3SINBNID33(itk.itkLevelSetFunctionPython.itkLevelSetFunctionID3):
    r"""


    This class extends the LevelSetFunction class by adding a grow term
    based on a target curvature stored in a sparse image.

    We extend the LevelSetFunction class to add a refitting term. This
    refitting term forces the curvature of the level set interface to
    match a prescribed curvature. The prescribed curvature is provided in
    a sparse image format. The NodeType for the sparse image should
    contain the member variables m_Curvature and m_CurvatureFlag. The
    refitting term is defined as part of the propagation term of the
    original LevelSetFunction. To this purpose we defined the
    PropagationSpeed method which computes the refitting term and also
    adds to this term the value returned by the new virtual
    OtherPropagationSpeed. Therefore, classes derived from this class MUST
    NOT overwrite the PropagationSpeed method. Instead classes wishing to
    define a propagation term must define OtherPropagationSpeed. IMPORTANT
    Subclasses MUST NOT overwrite the PropagationSpeed method. Define
    OtherPropagationSpeed instead. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermID3SINBNID33___New_orig__)
    Clone = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermID3SINBNID33_Clone)
    SetRefitWeight = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermID3SINBNID33_SetRefitWeight)
    SetOtherPropagationWeight = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermID3SINBNID33_SetOtherPropagationWeight)
    SetSparseTargetImage = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermID3SINBNID33_SetSparseTargetImage)
    GetSparseTargetImage = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermID3SINBNID33_GetSparseTargetImage)
    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_itkLevelSetFunctionWithRefitTermID3SINBNID33
    cast = _swig_new_static_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermID3SINBNID33_cast)

    def New(*args, **kargs):
        """New() -> itkLevelSetFunctionWithRefitTermID3SINBNID33

        Create a new object of the class itkLevelSetFunctionWithRefitTermID3SINBNID33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetFunctionWithRefitTermID3SINBNID33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLevelSetFunctionWithRefitTermID3SINBNID33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLevelSetFunctionWithRefitTermID3SINBNID33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLevelSetFunctionWithRefitTermID3SINBNID33 in _itkSparseFieldFourthOrderLevelSetImageFilterPython:
_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermID3SINBNID33_swigregister(itkLevelSetFunctionWithRefitTermID3SINBNID33)
itkLevelSetFunctionWithRefitTermID3SINBNID33___New_orig__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermID3SINBNID33___New_orig__
itkLevelSetFunctionWithRefitTermID3SINBNID33_cast = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermID3SINBNID33_cast


def itkLevelSetFunctionWithRefitTermIF2SINBNIF22_New():
    return itkLevelSetFunctionWithRefitTermIF2SINBNIF22.New()

class itkLevelSetFunctionWithRefitTermIF2SINBNIF22(itk.itkLevelSetFunctionPython.itkLevelSetFunctionIF2):
    r"""


    This class extends the LevelSetFunction class by adding a grow term
    based on a target curvature stored in a sparse image.

    We extend the LevelSetFunction class to add a refitting term. This
    refitting term forces the curvature of the level set interface to
    match a prescribed curvature. The prescribed curvature is provided in
    a sparse image format. The NodeType for the sparse image should
    contain the member variables m_Curvature and m_CurvatureFlag. The
    refitting term is defined as part of the propagation term of the
    original LevelSetFunction. To this purpose we defined the
    PropagationSpeed method which computes the refitting term and also
    adds to this term the value returned by the new virtual
    OtherPropagationSpeed. Therefore, classes derived from this class MUST
    NOT overwrite the PropagationSpeed method. Instead classes wishing to
    define a propagation term must define OtherPropagationSpeed. IMPORTANT
    Subclasses MUST NOT overwrite the PropagationSpeed method. Define
    OtherPropagationSpeed instead. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermIF2SINBNIF22___New_orig__)
    Clone = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermIF2SINBNIF22_Clone)
    SetRefitWeight = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermIF2SINBNIF22_SetRefitWeight)
    SetOtherPropagationWeight = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermIF2SINBNIF22_SetOtherPropagationWeight)
    SetSparseTargetImage = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermIF2SINBNIF22_SetSparseTargetImage)
    GetSparseTargetImage = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermIF2SINBNIF22_GetSparseTargetImage)
    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_itkLevelSetFunctionWithRefitTermIF2SINBNIF22
    cast = _swig_new_static_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermIF2SINBNIF22_cast)

    def New(*args, **kargs):
        """New() -> itkLevelSetFunctionWithRefitTermIF2SINBNIF22

        Create a new object of the class itkLevelSetFunctionWithRefitTermIF2SINBNIF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetFunctionWithRefitTermIF2SINBNIF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLevelSetFunctionWithRefitTermIF2SINBNIF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLevelSetFunctionWithRefitTermIF2SINBNIF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLevelSetFunctionWithRefitTermIF2SINBNIF22 in _itkSparseFieldFourthOrderLevelSetImageFilterPython:
_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermIF2SINBNIF22_swigregister(itkLevelSetFunctionWithRefitTermIF2SINBNIF22)
itkLevelSetFunctionWithRefitTermIF2SINBNIF22___New_orig__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermIF2SINBNIF22___New_orig__
itkLevelSetFunctionWithRefitTermIF2SINBNIF22_cast = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermIF2SINBNIF22_cast


def itkLevelSetFunctionWithRefitTermIF3SINBNIF33_New():
    return itkLevelSetFunctionWithRefitTermIF3SINBNIF33.New()

class itkLevelSetFunctionWithRefitTermIF3SINBNIF33(itk.itkLevelSetFunctionPython.itkLevelSetFunctionIF3):
    r"""


    This class extends the LevelSetFunction class by adding a grow term
    based on a target curvature stored in a sparse image.

    We extend the LevelSetFunction class to add a refitting term. This
    refitting term forces the curvature of the level set interface to
    match a prescribed curvature. The prescribed curvature is provided in
    a sparse image format. The NodeType for the sparse image should
    contain the member variables m_Curvature and m_CurvatureFlag. The
    refitting term is defined as part of the propagation term of the
    original LevelSetFunction. To this purpose we defined the
    PropagationSpeed method which computes the refitting term and also
    adds to this term the value returned by the new virtual
    OtherPropagationSpeed. Therefore, classes derived from this class MUST
    NOT overwrite the PropagationSpeed method. Instead classes wishing to
    define a propagation term must define OtherPropagationSpeed. IMPORTANT
    Subclasses MUST NOT overwrite the PropagationSpeed method. Define
    OtherPropagationSpeed instead. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermIF3SINBNIF33___New_orig__)
    Clone = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermIF3SINBNIF33_Clone)
    SetRefitWeight = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermIF3SINBNIF33_SetRefitWeight)
    SetOtherPropagationWeight = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermIF3SINBNIF33_SetOtherPropagationWeight)
    SetSparseTargetImage = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermIF3SINBNIF33_SetSparseTargetImage)
    GetSparseTargetImage = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermIF3SINBNIF33_GetSparseTargetImage)
    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_itkLevelSetFunctionWithRefitTermIF3SINBNIF33
    cast = _swig_new_static_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermIF3SINBNIF33_cast)

    def New(*args, **kargs):
        """New() -> itkLevelSetFunctionWithRefitTermIF3SINBNIF33

        Create a new object of the class itkLevelSetFunctionWithRefitTermIF3SINBNIF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetFunctionWithRefitTermIF3SINBNIF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLevelSetFunctionWithRefitTermIF3SINBNIF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLevelSetFunctionWithRefitTermIF3SINBNIF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLevelSetFunctionWithRefitTermIF3SINBNIF33 in _itkSparseFieldFourthOrderLevelSetImageFilterPython:
_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermIF3SINBNIF33_swigregister(itkLevelSetFunctionWithRefitTermIF3SINBNIF33)
itkLevelSetFunctionWithRefitTermIF3SINBNIF33___New_orig__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermIF3SINBNIF33___New_orig__
itkLevelSetFunctionWithRefitTermIF3SINBNIF33_cast = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermIF3SINBNIF33_cast

class itkNormalBandNodeID2(object):
    r"""Proxy of C++ itkNormalBandNodeID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_itkNormalBandNodeID2

    def __init__(self, *args):
        r"""
        __init__(itkNormalBandNodeID2 self, itkNormalBandNodeID2 arg0) -> itkNormalBandNodeID2
        __init__(itkNormalBandNodeID2 self) -> itkNormalBandNodeID2
        """
        _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkNormalBandNodeID2_swiginit(self, _itkSparseFieldFourthOrderLevelSetImageFilterPython.new_itkNormalBandNodeID2(*args))

# Register itkNormalBandNodeID2 in _itkSparseFieldFourthOrderLevelSetImageFilterPython:
_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkNormalBandNodeID2_swigregister(itkNormalBandNodeID2)

class itkNormalBandNodeID3(object):
    r"""Proxy of C++ itkNormalBandNodeID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_itkNormalBandNodeID3

    def __init__(self, *args):
        r"""
        __init__(itkNormalBandNodeID3 self, itkNormalBandNodeID3 arg0) -> itkNormalBandNodeID3
        __init__(itkNormalBandNodeID3 self) -> itkNormalBandNodeID3
        """
        _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkNormalBandNodeID3_swiginit(self, _itkSparseFieldFourthOrderLevelSetImageFilterPython.new_itkNormalBandNodeID3(*args))

# Register itkNormalBandNodeID3 in _itkSparseFieldFourthOrderLevelSetImageFilterPython:
_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkNormalBandNodeID3_swigregister(itkNormalBandNodeID3)

class itkNormalBandNodeIF2(object):
    r"""Proxy of C++ itkNormalBandNodeIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_itkNormalBandNodeIF2

    def __init__(self, *args):
        r"""
        __init__(itkNormalBandNodeIF2 self, itkNormalBandNodeIF2 arg0) -> itkNormalBandNodeIF2
        __init__(itkNormalBandNodeIF2 self) -> itkNormalBandNodeIF2
        """
        _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkNormalBandNodeIF2_swiginit(self, _itkSparseFieldFourthOrderLevelSetImageFilterPython.new_itkNormalBandNodeIF2(*args))

# Register itkNormalBandNodeIF2 in _itkSparseFieldFourthOrderLevelSetImageFilterPython:
_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkNormalBandNodeIF2_swigregister(itkNormalBandNodeIF2)

class itkNormalBandNodeIF3(object):
    r"""Proxy of C++ itkNormalBandNodeIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_itkNormalBandNodeIF3

    def __init__(self, *args):
        r"""
        __init__(itkNormalBandNodeIF3 self, itkNormalBandNodeIF3 arg0) -> itkNormalBandNodeIF3
        __init__(itkNormalBandNodeIF3 self) -> itkNormalBandNodeIF3
        """
        _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkNormalBandNodeIF3_swiginit(self, _itkSparseFieldFourthOrderLevelSetImageFilterPython.new_itkNormalBandNodeIF3(*args))

# Register itkNormalBandNodeIF3 in _itkSparseFieldFourthOrderLevelSetImageFilterPython:
_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkNormalBandNodeIF3_swigregister(itkNormalBandNodeIF3)

class itkSparseFieldFourthOrderLevelSetImageFilterID2ID2(itk.itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID2ID2):
    r"""


    This class implements the fourth order level set PDE framework.

    This class adds a ProcessNormals method to
    SparseFieldLevelSetImageFilter class. The ProcessNormals method uses
    the ImplicitManifoldNormalDiffusionFilter class to generate a
    SparseImage of filtered normal vectors. We make a copy of the current
    state of the output image (also referred to as level set image) for
    this class and pass it to ImplicitManifoldNormalDiffusionFilter. That
    class computes the normal vectors to the level set image and filters
    them. The output is in the form of a sparse image templated with the
    NormalBandNode type. We then compute curvatures from that output and
    store them in the SparseImage as well. This SparseImage is passed onto
    the LevelSetFunctionWithRefitTerm filter class to be used as a target
    in the propagation term. INPUT and OUTPUT Same as
    SparseFieldLevelSetImageFilter PARAMETERS MaxRefitIteration sets the
    maximum number of allowable iterations between calls to
    ProcessNormals. The decision of when to call the ProcessNormals method
    is made in InitializeIteration according to a few criteria one of
    which is this maximum number of iterations.

    MaxNormalIteration sets the maximum number of diffusion iterations on
    the normals to be performed by the
    ImplicitManifoldNormalDiffusionFilter class. Please read the
    documentation for that class.

    CurvatureBandWidth determines the width of the band to be processed in
    ImplicitManifoldNormalDiffusionFilter.

    RMSChangeNormalProcessTrigger provides another mechanism in
    InitializeIteration for calling the ProcessNormals method. Whenever
    the RMS change reported by SparseFieldLevelSetImageFilter falls below
    this parameter ProcessNormals is called regardless of whether
    MaxRefitIteration has been reached. This parameter could be used to
    speed up the algorithm; however, it can also effect the results. Use
    with caution. Default is 0 which does nothing. IMPORTANT Defaults for
    above parameters are set in the constructor. Users should not change
    these unless they have a good understanding of the algorithm. OTHER
    PARAMETERS NormalProcessType tells ImplicitManifoldNormalVectorFilter
    whether to use isotropic or anisotropic diffusion. A value of 0 means
    isotropic whereas a value of 1 means anisotropic diffusion. If this
    parameter is set to 1, NormalProcessConductance determines the level
    of detail preservation. Please read the documentation for
    ImplicitManifoldNormalVectorFilter and
    AnisotropicFourthOrderLevelSetImageFilter.

    NormalProcessUnsharpFlag turns unsharp masking on/off. If this
    parameter is turned on, then NormalProcessUnsharpWeight should be set.
    Please read the documentation for ImplicitManifoldNormalVectorFilter.
    IMPORTANT Users of this class must define the Halt function. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    GetMaxRefitIteration = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_GetMaxRefitIteration)
    SetMaxRefitIteration = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_SetMaxRefitIteration)
    GetMaxNormalIteration = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_GetMaxNormalIteration)
    SetMaxNormalIteration = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_SetMaxNormalIteration)
    GetCurvatureBandWidth = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_GetCurvatureBandWidth)
    SetCurvatureBandWidth = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_SetCurvatureBandWidth)
    GetRMSChangeNormalProcessTrigger = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_GetRMSChangeNormalProcessTrigger)
    SetRMSChangeNormalProcessTrigger = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_SetRMSChangeNormalProcessTrigger)
    GetNormalProcessType = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_GetNormalProcessType)
    SetNormalProcessType = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_SetNormalProcessType)
    GetNormalProcessConductance = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_GetNormalProcessConductance)
    SetNormalProcessConductance = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_SetNormalProcessConductance)
    SetNormalProcessUnsharpFlag = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_SetNormalProcessUnsharpFlag)
    GetNormalProcessUnsharpFlag = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_GetNormalProcessUnsharpFlag)
    SetNormalProcessUnsharpWeight = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_SetNormalProcessUnsharpWeight)
    GetNormalProcessUnsharpWeight = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_GetNormalProcessUnsharpWeight)
    SetLevelSetFunction = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_SetLevelSetFunction)
    GetMinimumNumberOfLayers = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_GetMinimumNumberOfLayers)
    InitializeIteration = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_InitializeIteration)
    OutputHasNumericTraitsCheck = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_itkSparseFieldFourthOrderLevelSetImageFilterID2ID2
    cast = _swig_new_static_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_cast)

# Register itkSparseFieldFourthOrderLevelSetImageFilterID2ID2 in _itkSparseFieldFourthOrderLevelSetImageFilterPython:
_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_swigregister(itkSparseFieldFourthOrderLevelSetImageFilterID2ID2)
itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_cast = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_cast

class itkSparseFieldFourthOrderLevelSetImageFilterID3ID3(itk.itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID3ID3):
    r"""


    This class implements the fourth order level set PDE framework.

    This class adds a ProcessNormals method to
    SparseFieldLevelSetImageFilter class. The ProcessNormals method uses
    the ImplicitManifoldNormalDiffusionFilter class to generate a
    SparseImage of filtered normal vectors. We make a copy of the current
    state of the output image (also referred to as level set image) for
    this class and pass it to ImplicitManifoldNormalDiffusionFilter. That
    class computes the normal vectors to the level set image and filters
    them. The output is in the form of a sparse image templated with the
    NormalBandNode type. We then compute curvatures from that output and
    store them in the SparseImage as well. This SparseImage is passed onto
    the LevelSetFunctionWithRefitTerm filter class to be used as a target
    in the propagation term. INPUT and OUTPUT Same as
    SparseFieldLevelSetImageFilter PARAMETERS MaxRefitIteration sets the
    maximum number of allowable iterations between calls to
    ProcessNormals. The decision of when to call the ProcessNormals method
    is made in InitializeIteration according to a few criteria one of
    which is this maximum number of iterations.

    MaxNormalIteration sets the maximum number of diffusion iterations on
    the normals to be performed by the
    ImplicitManifoldNormalDiffusionFilter class. Please read the
    documentation for that class.

    CurvatureBandWidth determines the width of the band to be processed in
    ImplicitManifoldNormalDiffusionFilter.

    RMSChangeNormalProcessTrigger provides another mechanism in
    InitializeIteration for calling the ProcessNormals method. Whenever
    the RMS change reported by SparseFieldLevelSetImageFilter falls below
    this parameter ProcessNormals is called regardless of whether
    MaxRefitIteration has been reached. This parameter could be used to
    speed up the algorithm; however, it can also effect the results. Use
    with caution. Default is 0 which does nothing. IMPORTANT Defaults for
    above parameters are set in the constructor. Users should not change
    these unless they have a good understanding of the algorithm. OTHER
    PARAMETERS NormalProcessType tells ImplicitManifoldNormalVectorFilter
    whether to use isotropic or anisotropic diffusion. A value of 0 means
    isotropic whereas a value of 1 means anisotropic diffusion. If this
    parameter is set to 1, NormalProcessConductance determines the level
    of detail preservation. Please read the documentation for
    ImplicitManifoldNormalVectorFilter and
    AnisotropicFourthOrderLevelSetImageFilter.

    NormalProcessUnsharpFlag turns unsharp masking on/off. If this
    parameter is turned on, then NormalProcessUnsharpWeight should be set.
    Please read the documentation for ImplicitManifoldNormalVectorFilter.
    IMPORTANT Users of this class must define the Halt function. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    GetMaxRefitIteration = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_GetMaxRefitIteration)
    SetMaxRefitIteration = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_SetMaxRefitIteration)
    GetMaxNormalIteration = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_GetMaxNormalIteration)
    SetMaxNormalIteration = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_SetMaxNormalIteration)
    GetCurvatureBandWidth = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_GetCurvatureBandWidth)
    SetCurvatureBandWidth = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_SetCurvatureBandWidth)
    GetRMSChangeNormalProcessTrigger = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_GetRMSChangeNormalProcessTrigger)
    SetRMSChangeNormalProcessTrigger = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_SetRMSChangeNormalProcessTrigger)
    GetNormalProcessType = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_GetNormalProcessType)
    SetNormalProcessType = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_SetNormalProcessType)
    GetNormalProcessConductance = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_GetNormalProcessConductance)
    SetNormalProcessConductance = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_SetNormalProcessConductance)
    SetNormalProcessUnsharpFlag = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_SetNormalProcessUnsharpFlag)
    GetNormalProcessUnsharpFlag = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_GetNormalProcessUnsharpFlag)
    SetNormalProcessUnsharpWeight = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_SetNormalProcessUnsharpWeight)
    GetNormalProcessUnsharpWeight = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_GetNormalProcessUnsharpWeight)
    SetLevelSetFunction = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_SetLevelSetFunction)
    GetMinimumNumberOfLayers = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_GetMinimumNumberOfLayers)
    InitializeIteration = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_InitializeIteration)
    OutputHasNumericTraitsCheck = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_itkSparseFieldFourthOrderLevelSetImageFilterID3ID3
    cast = _swig_new_static_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_cast)

# Register itkSparseFieldFourthOrderLevelSetImageFilterID3ID3 in _itkSparseFieldFourthOrderLevelSetImageFilterPython:
_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_swigregister(itkSparseFieldFourthOrderLevelSetImageFilterID3ID3)
itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_cast = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_cast

class itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2(itk.itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF2IF2):
    r"""


    This class implements the fourth order level set PDE framework.

    This class adds a ProcessNormals method to
    SparseFieldLevelSetImageFilter class. The ProcessNormals method uses
    the ImplicitManifoldNormalDiffusionFilter class to generate a
    SparseImage of filtered normal vectors. We make a copy of the current
    state of the output image (also referred to as level set image) for
    this class and pass it to ImplicitManifoldNormalDiffusionFilter. That
    class computes the normal vectors to the level set image and filters
    them. The output is in the form of a sparse image templated with the
    NormalBandNode type. We then compute curvatures from that output and
    store them in the SparseImage as well. This SparseImage is passed onto
    the LevelSetFunctionWithRefitTerm filter class to be used as a target
    in the propagation term. INPUT and OUTPUT Same as
    SparseFieldLevelSetImageFilter PARAMETERS MaxRefitIteration sets the
    maximum number of allowable iterations between calls to
    ProcessNormals. The decision of when to call the ProcessNormals method
    is made in InitializeIteration according to a few criteria one of
    which is this maximum number of iterations.

    MaxNormalIteration sets the maximum number of diffusion iterations on
    the normals to be performed by the
    ImplicitManifoldNormalDiffusionFilter class. Please read the
    documentation for that class.

    CurvatureBandWidth determines the width of the band to be processed in
    ImplicitManifoldNormalDiffusionFilter.

    RMSChangeNormalProcessTrigger provides another mechanism in
    InitializeIteration for calling the ProcessNormals method. Whenever
    the RMS change reported by SparseFieldLevelSetImageFilter falls below
    this parameter ProcessNormals is called regardless of whether
    MaxRefitIteration has been reached. This parameter could be used to
    speed up the algorithm; however, it can also effect the results. Use
    with caution. Default is 0 which does nothing. IMPORTANT Defaults for
    above parameters are set in the constructor. Users should not change
    these unless they have a good understanding of the algorithm. OTHER
    PARAMETERS NormalProcessType tells ImplicitManifoldNormalVectorFilter
    whether to use isotropic or anisotropic diffusion. A value of 0 means
    isotropic whereas a value of 1 means anisotropic diffusion. If this
    parameter is set to 1, NormalProcessConductance determines the level
    of detail preservation. Please read the documentation for
    ImplicitManifoldNormalVectorFilter and
    AnisotropicFourthOrderLevelSetImageFilter.

    NormalProcessUnsharpFlag turns unsharp masking on/off. If this
    parameter is turned on, then NormalProcessUnsharpWeight should be set.
    Please read the documentation for ImplicitManifoldNormalVectorFilter.
    IMPORTANT Users of this class must define the Halt function. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    GetMaxRefitIteration = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_GetMaxRefitIteration)
    SetMaxRefitIteration = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_SetMaxRefitIteration)
    GetMaxNormalIteration = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_GetMaxNormalIteration)
    SetMaxNormalIteration = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_SetMaxNormalIteration)
    GetCurvatureBandWidth = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_GetCurvatureBandWidth)
    SetCurvatureBandWidth = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_SetCurvatureBandWidth)
    GetRMSChangeNormalProcessTrigger = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_GetRMSChangeNormalProcessTrigger)
    SetRMSChangeNormalProcessTrigger = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_SetRMSChangeNormalProcessTrigger)
    GetNormalProcessType = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_GetNormalProcessType)
    SetNormalProcessType = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_SetNormalProcessType)
    GetNormalProcessConductance = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_GetNormalProcessConductance)
    SetNormalProcessConductance = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_SetNormalProcessConductance)
    SetNormalProcessUnsharpFlag = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_SetNormalProcessUnsharpFlag)
    GetNormalProcessUnsharpFlag = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_GetNormalProcessUnsharpFlag)
    SetNormalProcessUnsharpWeight = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_SetNormalProcessUnsharpWeight)
    GetNormalProcessUnsharpWeight = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_GetNormalProcessUnsharpWeight)
    SetLevelSetFunction = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_SetLevelSetFunction)
    GetMinimumNumberOfLayers = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_GetMinimumNumberOfLayers)
    InitializeIteration = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_InitializeIteration)
    OutputHasNumericTraitsCheck = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2
    cast = _swig_new_static_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_cast)

# Register itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2 in _itkSparseFieldFourthOrderLevelSetImageFilterPython:
_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_swigregister(itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2)
itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_cast = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_cast

class itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3(itk.itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF3IF3):
    r"""


    This class implements the fourth order level set PDE framework.

    This class adds a ProcessNormals method to
    SparseFieldLevelSetImageFilter class. The ProcessNormals method uses
    the ImplicitManifoldNormalDiffusionFilter class to generate a
    SparseImage of filtered normal vectors. We make a copy of the current
    state of the output image (also referred to as level set image) for
    this class and pass it to ImplicitManifoldNormalDiffusionFilter. That
    class computes the normal vectors to the level set image and filters
    them. The output is in the form of a sparse image templated with the
    NormalBandNode type. We then compute curvatures from that output and
    store them in the SparseImage as well. This SparseImage is passed onto
    the LevelSetFunctionWithRefitTerm filter class to be used as a target
    in the propagation term. INPUT and OUTPUT Same as
    SparseFieldLevelSetImageFilter PARAMETERS MaxRefitIteration sets the
    maximum number of allowable iterations between calls to
    ProcessNormals. The decision of when to call the ProcessNormals method
    is made in InitializeIteration according to a few criteria one of
    which is this maximum number of iterations.

    MaxNormalIteration sets the maximum number of diffusion iterations on
    the normals to be performed by the
    ImplicitManifoldNormalDiffusionFilter class. Please read the
    documentation for that class.

    CurvatureBandWidth determines the width of the band to be processed in
    ImplicitManifoldNormalDiffusionFilter.

    RMSChangeNormalProcessTrigger provides another mechanism in
    InitializeIteration for calling the ProcessNormals method. Whenever
    the RMS change reported by SparseFieldLevelSetImageFilter falls below
    this parameter ProcessNormals is called regardless of whether
    MaxRefitIteration has been reached. This parameter could be used to
    speed up the algorithm; however, it can also effect the results. Use
    with caution. Default is 0 which does nothing. IMPORTANT Defaults for
    above parameters are set in the constructor. Users should not change
    these unless they have a good understanding of the algorithm. OTHER
    PARAMETERS NormalProcessType tells ImplicitManifoldNormalVectorFilter
    whether to use isotropic or anisotropic diffusion. A value of 0 means
    isotropic whereas a value of 1 means anisotropic diffusion. If this
    parameter is set to 1, NormalProcessConductance determines the level
    of detail preservation. Please read the documentation for
    ImplicitManifoldNormalVectorFilter and
    AnisotropicFourthOrderLevelSetImageFilter.

    NormalProcessUnsharpFlag turns unsharp masking on/off. If this
    parameter is turned on, then NormalProcessUnsharpWeight should be set.
    Please read the documentation for ImplicitManifoldNormalVectorFilter.
    IMPORTANT Users of this class must define the Halt function. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    GetMaxRefitIteration = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_GetMaxRefitIteration)
    SetMaxRefitIteration = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_SetMaxRefitIteration)
    GetMaxNormalIteration = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_GetMaxNormalIteration)
    SetMaxNormalIteration = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_SetMaxNormalIteration)
    GetCurvatureBandWidth = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_GetCurvatureBandWidth)
    SetCurvatureBandWidth = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_SetCurvatureBandWidth)
    GetRMSChangeNormalProcessTrigger = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_GetRMSChangeNormalProcessTrigger)
    SetRMSChangeNormalProcessTrigger = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_SetRMSChangeNormalProcessTrigger)
    GetNormalProcessType = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_GetNormalProcessType)
    SetNormalProcessType = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_SetNormalProcessType)
    GetNormalProcessConductance = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_GetNormalProcessConductance)
    SetNormalProcessConductance = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_SetNormalProcessConductance)
    SetNormalProcessUnsharpFlag = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_SetNormalProcessUnsharpFlag)
    GetNormalProcessUnsharpFlag = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_GetNormalProcessUnsharpFlag)
    SetNormalProcessUnsharpWeight = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_SetNormalProcessUnsharpWeight)
    GetNormalProcessUnsharpWeight = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_GetNormalProcessUnsharpWeight)
    SetLevelSetFunction = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_SetLevelSetFunction)
    GetMinimumNumberOfLayers = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_GetMinimumNumberOfLayers)
    InitializeIteration = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_InitializeIteration)
    OutputHasNumericTraitsCheck = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3
    cast = _swig_new_static_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_cast)

# Register itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3 in _itkSparseFieldFourthOrderLevelSetImageFilterPython:
_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_swigregister(itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3)
itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_cast = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_cast


def itkSparseFieldLayerNBNID2_New():
    return itkSparseFieldLayerNBNID2.New()

class itkSparseFieldLayerNBNID2(itk.ITKCommonBasePython.itkObject):
    r"""


    A very simple linked list that is used to manage nodes in a layer of a
    sparse field level-set solver.

    This class implements a very simple linked list that is used to manage
    nodes in a layer of a sparse field level-set solver. For more
    information on the sparse field level-set solver, see documentation
    for itk::SparseFieldLevelSetImageFilter. IMPORTANT! One important and
    distinctive feature of this list implementation (in fact, the entire
    reason for this object's existence) is that no memory
    allocation/deallocation occurs during linking or unlinking of nodes.
    The nodes themselves are expected to carry the appropriate "Next" &
    "Previous" fields used to link. Guaranteeing that no calls to new or
    delete are ever made for normal list operations allows us to safely
    use this class in a multithread environment without incurring
    penalties from heap contention among threads. Because no
    allocation/deallocation occurs, it is entirely up to the calling
    program to manage the allocating and freeing of the list nodes. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID2___New_orig__)
    Clone = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID2_Clone)
    Front = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID2_Front)
    PopFront = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID2_PopFront)
    PushFront = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID2_PushFront)
    Unlink = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID2_Unlink)
    Empty = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID2_Empty)
    Size = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID2_Size)
    SplitRegions = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID2_SplitRegions)
    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_itkSparseFieldLayerNBNID2
    cast = _swig_new_static_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID2_cast)

    def New(*args, **kargs):
        """New() -> itkSparseFieldLayerNBNID2

        Create a new object of the class itkSparseFieldLayerNBNID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSparseFieldLayerNBNID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSparseFieldLayerNBNID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSparseFieldLayerNBNID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSparseFieldLayerNBNID2 in _itkSparseFieldFourthOrderLevelSetImageFilterPython:
_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID2_swigregister(itkSparseFieldLayerNBNID2)
itkSparseFieldLayerNBNID2___New_orig__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID2___New_orig__
itkSparseFieldLayerNBNID2_cast = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID2_cast


def itkSparseFieldLayerNBNID3_New():
    return itkSparseFieldLayerNBNID3.New()

class itkSparseFieldLayerNBNID3(itk.ITKCommonBasePython.itkObject):
    r"""


    A very simple linked list that is used to manage nodes in a layer of a
    sparse field level-set solver.

    This class implements a very simple linked list that is used to manage
    nodes in a layer of a sparse field level-set solver. For more
    information on the sparse field level-set solver, see documentation
    for itk::SparseFieldLevelSetImageFilter. IMPORTANT! One important and
    distinctive feature of this list implementation (in fact, the entire
    reason for this object's existence) is that no memory
    allocation/deallocation occurs during linking or unlinking of nodes.
    The nodes themselves are expected to carry the appropriate "Next" &
    "Previous" fields used to link. Guaranteeing that no calls to new or
    delete are ever made for normal list operations allows us to safely
    use this class in a multithread environment without incurring
    penalties from heap contention among threads. Because no
    allocation/deallocation occurs, it is entirely up to the calling
    program to manage the allocating and freeing of the list nodes. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID3___New_orig__)
    Clone = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID3_Clone)
    Front = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID3_Front)
    PopFront = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID3_PopFront)
    PushFront = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID3_PushFront)
    Unlink = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID3_Unlink)
    Empty = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID3_Empty)
    Size = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID3_Size)
    SplitRegions = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID3_SplitRegions)
    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_itkSparseFieldLayerNBNID3
    cast = _swig_new_static_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID3_cast)

    def New(*args, **kargs):
        """New() -> itkSparseFieldLayerNBNID3

        Create a new object of the class itkSparseFieldLayerNBNID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSparseFieldLayerNBNID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSparseFieldLayerNBNID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSparseFieldLayerNBNID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSparseFieldLayerNBNID3 in _itkSparseFieldFourthOrderLevelSetImageFilterPython:
_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID3_swigregister(itkSparseFieldLayerNBNID3)
itkSparseFieldLayerNBNID3___New_orig__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID3___New_orig__
itkSparseFieldLayerNBNID3_cast = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID3_cast


def itkSparseFieldLayerNBNIF2_New():
    return itkSparseFieldLayerNBNIF2.New()

class itkSparseFieldLayerNBNIF2(itk.ITKCommonBasePython.itkObject):
    r"""


    A very simple linked list that is used to manage nodes in a layer of a
    sparse field level-set solver.

    This class implements a very simple linked list that is used to manage
    nodes in a layer of a sparse field level-set solver. For more
    information on the sparse field level-set solver, see documentation
    for itk::SparseFieldLevelSetImageFilter. IMPORTANT! One important and
    distinctive feature of this list implementation (in fact, the entire
    reason for this object's existence) is that no memory
    allocation/deallocation occurs during linking or unlinking of nodes.
    The nodes themselves are expected to carry the appropriate "Next" &
    "Previous" fields used to link. Guaranteeing that no calls to new or
    delete are ever made for normal list operations allows us to safely
    use this class in a multithread environment without incurring
    penalties from heap contention among threads. Because no
    allocation/deallocation occurs, it is entirely up to the calling
    program to manage the allocating and freeing of the list nodes. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF2___New_orig__)
    Clone = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF2_Clone)
    Front = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF2_Front)
    PopFront = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF2_PopFront)
    PushFront = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF2_PushFront)
    Unlink = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF2_Unlink)
    Empty = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF2_Empty)
    Size = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF2_Size)
    SplitRegions = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF2_SplitRegions)
    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_itkSparseFieldLayerNBNIF2
    cast = _swig_new_static_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF2_cast)

    def New(*args, **kargs):
        """New() -> itkSparseFieldLayerNBNIF2

        Create a new object of the class itkSparseFieldLayerNBNIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSparseFieldLayerNBNIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSparseFieldLayerNBNIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSparseFieldLayerNBNIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSparseFieldLayerNBNIF2 in _itkSparseFieldFourthOrderLevelSetImageFilterPython:
_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF2_swigregister(itkSparseFieldLayerNBNIF2)
itkSparseFieldLayerNBNIF2___New_orig__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF2___New_orig__
itkSparseFieldLayerNBNIF2_cast = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF2_cast


def itkSparseFieldLayerNBNIF3_New():
    return itkSparseFieldLayerNBNIF3.New()

class itkSparseFieldLayerNBNIF3(itk.ITKCommonBasePython.itkObject):
    r"""


    A very simple linked list that is used to manage nodes in a layer of a
    sparse field level-set solver.

    This class implements a very simple linked list that is used to manage
    nodes in a layer of a sparse field level-set solver. For more
    information on the sparse field level-set solver, see documentation
    for itk::SparseFieldLevelSetImageFilter. IMPORTANT! One important and
    distinctive feature of this list implementation (in fact, the entire
    reason for this object's existence) is that no memory
    allocation/deallocation occurs during linking or unlinking of nodes.
    The nodes themselves are expected to carry the appropriate "Next" &
    "Previous" fields used to link. Guaranteeing that no calls to new or
    delete are ever made for normal list operations allows us to safely
    use this class in a multithread environment without incurring
    penalties from heap contention among threads. Because no
    allocation/deallocation occurs, it is entirely up to the calling
    program to manage the allocating and freeing of the list nodes. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF3___New_orig__)
    Clone = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF3_Clone)
    Front = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF3_Front)
    PopFront = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF3_PopFront)
    PushFront = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF3_PushFront)
    Unlink = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF3_Unlink)
    Empty = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF3_Empty)
    Size = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF3_Size)
    SplitRegions = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF3_SplitRegions)
    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_itkSparseFieldLayerNBNIF3
    cast = _swig_new_static_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF3_cast)

    def New(*args, **kargs):
        """New() -> itkSparseFieldLayerNBNIF3

        Create a new object of the class itkSparseFieldLayerNBNIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSparseFieldLayerNBNIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSparseFieldLayerNBNIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSparseFieldLayerNBNIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSparseFieldLayerNBNIF3 in _itkSparseFieldFourthOrderLevelSetImageFilterPython:
_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF3_swigregister(itkSparseFieldLayerNBNIF3)
itkSparseFieldLayerNBNIF3___New_orig__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF3___New_orig__
itkSparseFieldLayerNBNIF3_cast = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF3_cast


def itkSparseImageNBNID22_New():
    return itkSparseImageNBNID22.New()

class itkSparseImageNBNID22(itkImageNBNID22):
    r"""


    A storage type for sparse image data.

    This class is derived from the Image class. It uses the base class
    image data for storing pointers to variables of type TNode. The node
    type must have a member variable m_Index. The node data is stored
    using the SparseFieldLayer and ObjectStore classes to allow sequential
    list access to the nodes. This functionality is used in filter classes
    that process the SparseImage class such as
    FiniteDifferenceSparseImageFilter. The node type must also have
    members NodeType* Next and NodeType* Previous. A minimal node class
    which could be used to create the sparse equivalent of an
    itk::Image<unsigned char, 2> is shown below:

    This class provides the method AddNode which allocates a node
    variable, associates it with the image pixel index (sets m_Index in
    the node variable) and returns the pointer to the node variable. It is
    suggested that the user call the FillBuffer method to initialize the
    image to null pointers before any calls to AddNode. This would allow
    the user later to distinguish between valid and non-valid pixels. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNID22___New_orig__)
    Clone = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNID22_Clone)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNID22_GetNeighborhoodAccessor)
    AddNode = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNID22_AddNode)
    GetNodeList = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNID22_GetNodeList)
    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_itkSparseImageNBNID22
    cast = _swig_new_static_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNID22_cast)

    def New(*args, **kargs):
        """New() -> itkSparseImageNBNID22

        Create a new object of the class itkSparseImageNBNID22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSparseImageNBNID22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSparseImageNBNID22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSparseImageNBNID22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSparseImageNBNID22 in _itkSparseFieldFourthOrderLevelSetImageFilterPython:
_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNID22_swigregister(itkSparseImageNBNID22)
itkSparseImageNBNID22___New_orig__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNID22___New_orig__
itkSparseImageNBNID22_cast = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNID22_cast


def itkSparseImageNBNID33_New():
    return itkSparseImageNBNID33.New()

class itkSparseImageNBNID33(itkImageNBNID33):
    r"""


    A storage type for sparse image data.

    This class is derived from the Image class. It uses the base class
    image data for storing pointers to variables of type TNode. The node
    type must have a member variable m_Index. The node data is stored
    using the SparseFieldLayer and ObjectStore classes to allow sequential
    list access to the nodes. This functionality is used in filter classes
    that process the SparseImage class such as
    FiniteDifferenceSparseImageFilter. The node type must also have
    members NodeType* Next and NodeType* Previous. A minimal node class
    which could be used to create the sparse equivalent of an
    itk::Image<unsigned char, 2> is shown below:

    This class provides the method AddNode which allocates a node
    variable, associates it with the image pixel index (sets m_Index in
    the node variable) and returns the pointer to the node variable. It is
    suggested that the user call the FillBuffer method to initialize the
    image to null pointers before any calls to AddNode. This would allow
    the user later to distinguish between valid and non-valid pixels. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNID33___New_orig__)
    Clone = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNID33_Clone)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNID33_GetNeighborhoodAccessor)
    AddNode = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNID33_AddNode)
    GetNodeList = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNID33_GetNodeList)
    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_itkSparseImageNBNID33
    cast = _swig_new_static_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNID33_cast)

    def New(*args, **kargs):
        """New() -> itkSparseImageNBNID33

        Create a new object of the class itkSparseImageNBNID33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSparseImageNBNID33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSparseImageNBNID33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSparseImageNBNID33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSparseImageNBNID33 in _itkSparseFieldFourthOrderLevelSetImageFilterPython:
_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNID33_swigregister(itkSparseImageNBNID33)
itkSparseImageNBNID33___New_orig__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNID33___New_orig__
itkSparseImageNBNID33_cast = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNID33_cast


def itkSparseImageNBNIF22_New():
    return itkSparseImageNBNIF22.New()

class itkSparseImageNBNIF22(itkImageNBNIF22):
    r"""


    A storage type for sparse image data.

    This class is derived from the Image class. It uses the base class
    image data for storing pointers to variables of type TNode. The node
    type must have a member variable m_Index. The node data is stored
    using the SparseFieldLayer and ObjectStore classes to allow sequential
    list access to the nodes. This functionality is used in filter classes
    that process the SparseImage class such as
    FiniteDifferenceSparseImageFilter. The node type must also have
    members NodeType* Next and NodeType* Previous. A minimal node class
    which could be used to create the sparse equivalent of an
    itk::Image<unsigned char, 2> is shown below:

    This class provides the method AddNode which allocates a node
    variable, associates it with the image pixel index (sets m_Index in
    the node variable) and returns the pointer to the node variable. It is
    suggested that the user call the FillBuffer method to initialize the
    image to null pointers before any calls to AddNode. This would allow
    the user later to distinguish between valid and non-valid pixels. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNIF22___New_orig__)
    Clone = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNIF22_Clone)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNIF22_GetNeighborhoodAccessor)
    AddNode = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNIF22_AddNode)
    GetNodeList = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNIF22_GetNodeList)
    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_itkSparseImageNBNIF22
    cast = _swig_new_static_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNIF22_cast)

    def New(*args, **kargs):
        """New() -> itkSparseImageNBNIF22

        Create a new object of the class itkSparseImageNBNIF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSparseImageNBNIF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSparseImageNBNIF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSparseImageNBNIF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSparseImageNBNIF22 in _itkSparseFieldFourthOrderLevelSetImageFilterPython:
_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNIF22_swigregister(itkSparseImageNBNIF22)
itkSparseImageNBNIF22___New_orig__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNIF22___New_orig__
itkSparseImageNBNIF22_cast = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNIF22_cast


def itkSparseImageNBNIF33_New():
    return itkSparseImageNBNIF33.New()

class itkSparseImageNBNIF33(itkImageNBNIF33):
    r"""


    A storage type for sparse image data.

    This class is derived from the Image class. It uses the base class
    image data for storing pointers to variables of type TNode. The node
    type must have a member variable m_Index. The node data is stored
    using the SparseFieldLayer and ObjectStore classes to allow sequential
    list access to the nodes. This functionality is used in filter classes
    that process the SparseImage class such as
    FiniteDifferenceSparseImageFilter. The node type must also have
    members NodeType* Next and NodeType* Previous. A minimal node class
    which could be used to create the sparse equivalent of an
    itk::Image<unsigned char, 2> is shown below:

    This class provides the method AddNode which allocates a node
    variable, associates it with the image pixel index (sets m_Index in
    the node variable) and returns the pointer to the node variable. It is
    suggested that the user call the FillBuffer method to initialize the
    image to null pointers before any calls to AddNode. This would allow
    the user later to distinguish between valid and non-valid pixels. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNIF33___New_orig__)
    Clone = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNIF33_Clone)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNIF33_GetNeighborhoodAccessor)
    AddNode = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNIF33_AddNode)
    GetNodeList = _swig_new_instance_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNIF33_GetNodeList)
    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_itkSparseImageNBNIF33
    cast = _swig_new_static_method(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNIF33_cast)

    def New(*args, **kargs):
        """New() -> itkSparseImageNBNIF33

        Create a new object of the class itkSparseImageNBNIF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSparseImageNBNIF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSparseImageNBNIF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSparseImageNBNIF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSparseImageNBNIF33 in _itkSparseFieldFourthOrderLevelSetImageFilterPython:
_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNIF33_swigregister(itkSparseImageNBNIF33)
itkSparseImageNBNIF33___New_orig__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNIF33___New_orig__
itkSparseImageNBNIF33_cast = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNIF33_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def sparse_field_fourth_order_level_set_image_filter(*args, **kwargs):
    """Procedural interface for SparseFieldFourthOrderLevelSetImageFilter"""
    import itk
    instance = itk.SparseFieldFourthOrderLevelSetImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def sparse_field_fourth_order_level_set_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.SparseFieldFourthOrderLevelSetImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.SparseFieldFourthOrderLevelSetImageFilter.values()[0]
    else:
        filter_object = itk.SparseFieldFourthOrderLevelSetImageFilter

    sparse_field_fourth_order_level_set_image_filter.__doc__ = filter_object.__doc__
    sparse_field_fourth_order_level_set_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    sparse_field_fourth_order_level_set_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.SparseFieldFourthOrderLevelSetImageFilter, itkTemplate.itkTemplate):
        sparse_field_fourth_order_level_set_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        sparse_field_fourth_order_level_set_image_filter.__doc__ += "\n"
        sparse_field_fourth_order_level_set_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        sparse_field_fourth_order_level_set_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



